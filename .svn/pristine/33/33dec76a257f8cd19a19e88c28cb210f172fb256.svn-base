
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016438  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a08  08016578  08016578  00026578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017f80  08017f80  00027f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017f88  08017f88  00027f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017f8c  08017f8c  00027f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  20000008  08017f90  00030008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a4e8  200002d0  08018258  000302d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000a7b8  08018258  0003a7b8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003203e  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000522c  00000000  00000000  0006233e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b98  00000000  00000000  00067570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000029f0  00000000  00000000  0006a108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000284ee  00000000  00000000  0006caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c08a  00000000  00000000  00094fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f8fb4  00000000  00000000  000c1070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ba024  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d4c0  00000000  00000000  001ba074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	08016558 	.word	0x08016558

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	08016558 	.word	0x08016558

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_ldivmod>:
 8000c4c:	b97b      	cbnz	r3, 8000c6e <__aeabi_ldivmod+0x22>
 8000c4e:	b972      	cbnz	r2, 8000c6e <__aeabi_ldivmod+0x22>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bfbe      	ittt	lt
 8000c54:	2000      	movlt	r0, #0
 8000c56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5a:	e006      	blt.n	8000c6a <__aeabi_ldivmod+0x1e>
 8000c5c:	bf08      	it	eq
 8000c5e:	2800      	cmpeq	r0, #0
 8000c60:	bf1c      	itt	ne
 8000c62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c66:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6a:	f000 b9bf 	b.w	8000fec <__aeabi_idiv0>
 8000c6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c76:	2900      	cmp	r1, #0
 8000c78:	db09      	blt.n	8000c8e <__aeabi_ldivmod+0x42>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db1a      	blt.n	8000cb4 <__aeabi_ldivmod+0x68>
 8000c7e:	f000 f84d 	bl	8000d1c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db1b      	blt.n	8000cd0 <__aeabi_ldivmod+0x84>
 8000c98:	f000 f840 	bl	8000d1c <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f82f 	bl	8000d1c <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4240      	negs	r0, r0
 8000cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f821 	bl	8000d1c <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	4770      	bx	lr

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b974 	b.w	8000fec <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468e      	mov	lr, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d14d      	bne.n	8000dc6 <__udivmoddi4+0xaa>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d969      	bls.n	8000e04 <__udivmoddi4+0xe8>
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	b152      	cbz	r2, 8000d4c <__udivmoddi4+0x30>
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	f1c2 0120 	rsb	r1, r2, #32
 8000d3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d46:	ea41 0e03 	orr.w	lr, r1, r3
 8000d4a:	4094      	lsls	r4, r2
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	0c21      	lsrs	r1, r4, #16
 8000d52:	fbbe f6f8 	udiv	r6, lr, r8
 8000d56:	fa1f f78c 	uxth.w	r7, ip
 8000d5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d62:	fb06 f107 	mul.w	r1, r6, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x64>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d72:	f080 811f 	bcs.w	8000fb4 <__udivmoddi4+0x298>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 811c 	bls.w	8000fb4 <__udivmoddi4+0x298>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb00 f707 	mul.w	r7, r0, r7
 8000d94:	42a7      	cmp	r7, r4
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x92>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	f080 810a 	bcs.w	8000fb8 <__udivmoddi4+0x29c>
 8000da4:	42a7      	cmp	r7, r4
 8000da6:	f240 8107 	bls.w	8000fb8 <__udivmoddi4+0x29c>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db2:	1be4      	subs	r4, r4, r7
 8000db4:	2600      	movs	r6, #0
 8000db6:	b11d      	cbz	r5, 8000dc0 <__udivmoddi4+0xa4>
 8000db8:	40d4      	lsrs	r4, r2
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d909      	bls.n	8000dde <__udivmoddi4+0xc2>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	f000 80ef 	beq.w	8000fae <__udivmoddi4+0x292>
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	fab3 f683 	clz	r6, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d14a      	bne.n	8000e7c <__udivmoddi4+0x160>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xd4>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 80f9 	bhi.w	8000fe2 <__udivmoddi4+0x2c6>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb61 0303 	sbc.w	r3, r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	469e      	mov	lr, r3
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e0      	beq.n	8000dc0 <__udivmoddi4+0xa4>
 8000dfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e02:	e7dd      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xec>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	f040 8092 	bne.w	8000f36 <__udivmoddi4+0x21a>
 8000e12:	eba1 010c 	sub.w	r1, r1, ip
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2601      	movs	r6, #1
 8000e20:	0c20      	lsrs	r0, r4, #16
 8000e22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e26:	fb07 1113 	mls	r1, r7, r3, r1
 8000e2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2e:	fb0e f003 	mul.w	r0, lr, r3
 8000e32:	4288      	cmp	r0, r1
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x12c>
 8000e36:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x12a>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2c0>
 8000e46:	4643      	mov	r3, r8
 8000e48:	1a09      	subs	r1, r1, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e50:	fb07 1110 	mls	r1, r7, r0, r1
 8000e54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x156>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x154>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2ca>
 8000e70:	4608      	mov	r0, r1
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000e7c:	f1c6 0720 	rsb	r7, r6, #32
 8000e80:	40b3      	lsls	r3, r6
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e92:	431c      	orrs	r4, r3
 8000e94:	40f9      	lsrs	r1, r7
 8000e96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	0c20      	lsrs	r0, r4, #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fb09 1118 	mls	r1, r9, r8, r1
 8000eac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b8>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000edc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee8:	458e      	cmp	lr, r1
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1e2>
 8000eec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2b4>
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2b4>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4461      	add	r1, ip
 8000efe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f02:	fba0 9402 	umull	r9, r4, r0, r2
 8000f06:	eba1 010e 	sub.w	r1, r1, lr
 8000f0a:	42a1      	cmp	r1, r4
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x2a4>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x2a0>
 8000f14:	b15d      	cbz	r5, 8000f2e <__udivmoddi4+0x212>
 8000f16:	ebb3 0208 	subs.w	r2, r3, r8
 8000f1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000f22:	fa22 f306 	lsr.w	r3, r2, r6
 8000f26:	40f1      	lsrs	r1, r6
 8000f28:	431f      	orrs	r7, r3
 8000f2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	f1c2 0320 	rsb	r3, r2, #32
 8000f3a:	40d8      	lsrs	r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa21 f303 	lsr.w	r3, r1, r3
 8000f44:	4091      	lsls	r1, r2
 8000f46:	4301      	orrs	r1, r0
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f54:	fb07 3610 	mls	r6, r7, r0, r3
 8000f58:	0c0b      	lsrs	r3, r1, #16
 8000f5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f62:	429e      	cmp	r6, r3
 8000f64:	fa04 f402 	lsl.w	r4, r4, r2
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x260>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f74:	429e      	cmp	r6, r3
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1b9b      	subs	r3, r3, r6
 8000f7e:	b289      	uxth	r1, r1
 8000f80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f84:	fb07 3316 	mls	r3, r7, r6, r3
 8000f88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x28a>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2b0>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2b0>
 8000fa2:	3e02      	subs	r6, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0x104>
 8000fae:	462e      	mov	r6, r5
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e705      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	e6e3      	b.n	8000d80 <__udivmoddi4+0x64>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6f8      	b.n	8000dae <__udivmoddi4+0x92>
 8000fbc:	454b      	cmp	r3, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f8>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc8:	3801      	subs	r0, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f8>
 8000fcc:	4646      	mov	r6, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x28a>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1e2>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b8>
 8000fdc:	3b02      	subs	r3, #2
 8000fde:	4461      	add	r1, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x12c>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e709      	b.n	8000dfa <__udivmoddi4+0xde>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x156>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000ffe:	4b22      	ldr	r3, [pc, #136]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001004:	4b20      	ldr	r3, [pc, #128]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001006:	2200      	movs	r2, #0
 8001008:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);

	if(index==CAN2){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d11a      	bne.n	8001046 <DRV_CANFDSPI_Reset+0x56>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001010:	4b1e      	ldr	r3, [pc, #120]	; (800108c <DRV_CANFDSPI_Reset+0x9c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <DRV_CANFDSPI_Reset+0xa0>)
 8001016:	8811      	ldrh	r1, [r2, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00b fd78 	bl	800cb10 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001020:	89bb      	ldrh	r3, [r7, #12]
 8001022:	2264      	movs	r2, #100	; 0x64
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <DRV_CANFDSPI_Reset+0xa4>)
 8001028:	4917      	ldr	r1, [pc, #92]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 800102a:	481b      	ldr	r0, [pc, #108]	; (8001098 <DRV_CANFDSPI_Reset+0xa8>)
 800102c:	f00e f8ee 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001034:	4b15      	ldr	r3, [pc, #84]	; (800108c <DRV_CANFDSPI_Reset+0x9c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a15      	ldr	r2, [pc, #84]	; (8001090 <DRV_CANFDSPI_Reset+0xa0>)
 800103a:	8811      	ldrh	r1, [r2, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f00b fd66 	bl	800cb10 <HAL_GPIO_WritePin>
 8001044:	e019      	b.n	800107a <DRV_CANFDSPI_Reset+0x8a>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <DRV_CANFDSPI_Reset+0xac>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <DRV_CANFDSPI_Reset+0xb0>)
 800104c:	8811      	ldrh	r1, [r2, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	4618      	mov	r0, r3
 8001052:	f00b fd5d 	bl	800cb10 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001056:	89bb      	ldrh	r3, [r7, #12]
 8001058:	2264      	movs	r2, #100	; 0x64
 800105a:	9200      	str	r2, [sp, #0]
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <DRV_CANFDSPI_Reset+0xa4>)
 800105e:	490a      	ldr	r1, [pc, #40]	; (8001088 <DRV_CANFDSPI_Reset+0x98>)
 8001060:	480d      	ldr	r0, [pc, #52]	; (8001098 <DRV_CANFDSPI_Reset+0xa8>)
 8001062:	f00e f8d3 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001066:	4603      	mov	r3, r0
 8001068:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <DRV_CANFDSPI_Reset+0xac>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a0c      	ldr	r2, [pc, #48]	; (80010a0 <DRV_CANFDSPI_Reset+0xb0>)
 8001070:	8811      	ldrh	r1, [r2, #0]
 8001072:	2201      	movs	r2, #1
 8001074:	4618      	mov	r0, r3
 8001076:	f00b fd4b 	bl	800cb10 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	200002ec 	.word	0x200002ec
 800108c:	20000c98 	.word	0x20000c98
 8001090:	20000c96 	.word	0x20000c96
 8001094:	2000034c 	.word	0x2000034c
 8001098:	20000510 	.word	0x20000510
 800109c:	20000c78 	.word	0x20000c78
 80010a0:	20000c76 	.word	0x20000c76

080010a4 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	603a      	str	r2, [r7, #0]
 80010ae:	71fb      	strb	r3, [r7, #7]
 80010b0:	460b      	mov	r3, r1
 80010b2:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80010b4:	2303      	movs	r3, #3
 80010b6:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	0a1b      	lsrs	r3, r3, #8
 80010bc:	b29b      	uxth	r3, r3
 80010be:	b2db      	uxtb	r3, r3
 80010c0:	f003 030f 	and.w	r3, r3, #15
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3330      	adds	r3, #48	; 0x30
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010cc:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80010ce:	88bb      	ldrh	r3, [r7, #4]
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010d4:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 80010d6:	4b22      	ldr	r3, [pc, #136]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	709a      	strb	r2, [r3, #2]

  if(index==CAN2){
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d11a      	bne.n	8001118 <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <DRV_CANFDSPI_ReadByte+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a20      	ldr	r2, [pc, #128]	; (8001168 <DRV_CANFDSPI_ReadByte+0xc4>)
 80010e8:	8811      	ldrh	r1, [r2, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00b fd0f 	bl	800cb10 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80010f2:	89bb      	ldrh	r3, [r7, #12]
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	9200      	str	r2, [sp, #0]
 80010f8:	4a1c      	ldr	r2, [pc, #112]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 80010fa:	4919      	ldr	r1, [pc, #100]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 80010fc:	481c      	ldr	r0, [pc, #112]	; (8001170 <DRV_CANFDSPI_ReadByte+0xcc>)
 80010fe:	f00e f885 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001102:	4603      	mov	r3, r0
 8001104:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <DRV_CANFDSPI_ReadByte+0xc0>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <DRV_CANFDSPI_ReadByte+0xc4>)
 800110c:	8811      	ldrh	r1, [r2, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f00b fcfd 	bl	800cb10 <HAL_GPIO_WritePin>
 8001116:	e019      	b.n	800114c <DRV_CANFDSPI_ReadByte+0xa8>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <DRV_CANFDSPI_ReadByte+0xd0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <DRV_CANFDSPI_ReadByte+0xd4>)
 800111e:	8811      	ldrh	r1, [r2, #0]
 8001120:	2200      	movs	r2, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00b fcf4 	bl	800cb10 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001128:	89bb      	ldrh	r3, [r7, #12]
 800112a:	2264      	movs	r2, #100	; 0x64
 800112c:	9200      	str	r2, [sp, #0]
 800112e:	4a0f      	ldr	r2, [pc, #60]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 8001130:	490b      	ldr	r1, [pc, #44]	; (8001160 <DRV_CANFDSPI_ReadByte+0xbc>)
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <DRV_CANFDSPI_ReadByte+0xcc>)
 8001134:	f00e f86a 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001138:	4603      	mov	r3, r0
 800113a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800113c:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <DRV_CANFDSPI_ReadByte+0xd0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <DRV_CANFDSPI_ReadByte+0xd4>)
 8001142:	8811      	ldrh	r1, [r2, #0]
 8001144:	2201      	movs	r2, #1
 8001146:	4618      	mov	r0, r3
 8001148:	f00b fce2 	bl	800cb10 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 800114c:	4b07      	ldr	r3, [pc, #28]	; (800116c <DRV_CANFDSPI_ReadByte+0xc8>)
 800114e:	789a      	ldrb	r2, [r3, #2]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200002ec 	.word	0x200002ec
 8001164:	20000c98 	.word	0x20000c98
 8001168:	20000c96 	.word	0x20000c96
 800116c:	2000034c 	.word	0x2000034c
 8001170:	20000510 	.word	0x20000510
 8001174:	20000c78 	.word	0x20000c78
 8001178:	20000c76 	.word	0x20000c76

0800117c <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
 8001186:	460b      	mov	r3, r1
 8001188:	80bb      	strh	r3, [r7, #4]
 800118a:	4613      	mov	r3, r2
 800118c:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 800118e:	2303      	movs	r3, #3
 8001190:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001192:	88bb      	ldrh	r3, [r7, #4]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	b29b      	uxth	r3, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3320      	adds	r3, #32
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011a6:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80011a8:	88bb      	ldrh	r3, [r7, #4]
 80011aa:	b2da      	uxtb	r2, r3
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011ae:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 80011b0:	4a20      	ldr	r2, [pc, #128]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	7093      	strb	r3, [r2, #2]

  if(index==CAN2){
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d11a      	bne.n	80011f2 <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a1e      	ldr	r2, [pc, #120]	; (800123c <DRV_CANFDSPI_WriteByte+0xc0>)
 80011c2:	8811      	ldrh	r1, [r2, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00b fca2 	bl	800cb10 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	2264      	movs	r2, #100	; 0x64
 80011d0:	9200      	str	r2, [sp, #0]
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <DRV_CANFDSPI_WriteByte+0xc4>)
 80011d4:	4917      	ldr	r1, [pc, #92]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 80011d6:	481b      	ldr	r0, [pc, #108]	; (8001244 <DRV_CANFDSPI_WriteByte+0xc8>)
 80011d8:	f00e f818 	bl	800f20c <HAL_SPI_TransmitReceive>
 80011dc:	4603      	mov	r3, r0
 80011de:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <DRV_CANFDSPI_WriteByte+0xbc>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a15      	ldr	r2, [pc, #84]	; (800123c <DRV_CANFDSPI_WriteByte+0xc0>)
 80011e6:	8811      	ldrh	r1, [r2, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f00b fc90 	bl	800cb10 <HAL_GPIO_WritePin>
 80011f0:	e019      	b.n	8001226 <DRV_CANFDSPI_WriteByte+0xaa>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80011f2:	4b15      	ldr	r3, [pc, #84]	; (8001248 <DRV_CANFDSPI_WriteByte+0xcc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a15      	ldr	r2, [pc, #84]	; (800124c <DRV_CANFDSPI_WriteByte+0xd0>)
 80011f8:	8811      	ldrh	r1, [r2, #0]
 80011fa:	2200      	movs	r2, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00b fc87 	bl	800cb10 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001202:	89bb      	ldrh	r3, [r7, #12]
 8001204:	2264      	movs	r2, #100	; 0x64
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	4a0d      	ldr	r2, [pc, #52]	; (8001240 <DRV_CANFDSPI_WriteByte+0xc4>)
 800120a:	490a      	ldr	r1, [pc, #40]	; (8001234 <DRV_CANFDSPI_WriteByte+0xb8>)
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <DRV_CANFDSPI_WriteByte+0xc8>)
 800120e:	f00d fffd 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <DRV_CANFDSPI_WriteByte+0xcc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a0c      	ldr	r2, [pc, #48]	; (800124c <DRV_CANFDSPI_WriteByte+0xd0>)
 800121c:	8811      	ldrh	r1, [r2, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f00b fc75 	bl	800cb10 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200002ec 	.word	0x200002ec
 8001238:	20000c98 	.word	0x20000c98
 800123c:	20000c96 	.word	0x20000c96
 8001240:	2000034c 	.word	0x2000034c
 8001244:	20000510 	.word	0x20000510
 8001248:	20000c78 	.word	0x20000c78
 800124c:	20000c76 	.word	0x20000c76

08001250 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af02      	add	r7, sp, #8
 8001256:	4603      	mov	r3, r0
 8001258:	603a      	str	r2, [r7, #0]
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	460b      	mov	r3, r1
 800125e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001260:	2306      	movs	r3, #6
 8001262:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001264:	88bb      	ldrh	r3, [r7, #4]
 8001266:	0a1b      	lsrs	r3, r3, #8
 8001268:	b29b      	uxth	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	b2db      	uxtb	r3, r3
 8001272:	3330      	adds	r3, #48	; 0x30
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4b32      	ldr	r3, [pc, #200]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001278:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800127a:	88bb      	ldrh	r3, [r7, #4]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	4b30      	ldr	r3, [pc, #192]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 8001280:	705a      	strb	r2, [r3, #1]

  if(index==CAN2){
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d11a      	bne.n	80012be <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <DRV_CANFDSPI_ReadWord+0xf4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <DRV_CANFDSPI_ReadWord+0xf8>)
 800128e:	8811      	ldrh	r1, [r2, #0]
 8001290:	2200      	movs	r2, #0
 8001292:	4618      	mov	r0, r3
 8001294:	f00b fc3c 	bl	800cb10 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001298:	89bb      	ldrh	r3, [r7, #12]
 800129a:	2264      	movs	r2, #100	; 0x64
 800129c:	9200      	str	r2, [sp, #0]
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 80012a0:	4927      	ldr	r1, [pc, #156]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 80012a2:	482b      	ldr	r0, [pc, #172]	; (8001350 <DRV_CANFDSPI_ReadWord+0x100>)
 80012a4:	f00d ffb2 	bl	800f20c <HAL_SPI_TransmitReceive>
 80012a8:	4603      	mov	r3, r0
 80012aa:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <DRV_CANFDSPI_ReadWord+0xf4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a25      	ldr	r2, [pc, #148]	; (8001348 <DRV_CANFDSPI_ReadWord+0xf8>)
 80012b2:	8811      	ldrh	r1, [r2, #0]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00b fc2a 	bl	800cb10 <HAL_GPIO_WritePin>
 80012bc:	e019      	b.n	80012f2 <DRV_CANFDSPI_ReadWord+0xa2>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <DRV_CANFDSPI_ReadWord+0x104>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a25      	ldr	r2, [pc, #148]	; (8001358 <DRV_CANFDSPI_ReadWord+0x108>)
 80012c4:	8811      	ldrh	r1, [r2, #0]
 80012c6:	2200      	movs	r2, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f00b fc21 	bl	800cb10 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2264      	movs	r2, #100	; 0x64
 80012d2:	9200      	str	r2, [sp, #0]
 80012d4:	4a1d      	ldr	r2, [pc, #116]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 80012d6:	491a      	ldr	r1, [pc, #104]	; (8001340 <DRV_CANFDSPI_ReadWord+0xf0>)
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <DRV_CANFDSPI_ReadWord+0x100>)
 80012da:	f00d ff97 	bl	800f20c <HAL_SPI_TransmitReceive>
 80012de:	4603      	mov	r3, r0
 80012e0:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <DRV_CANFDSPI_ReadWord+0x104>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <DRV_CANFDSPI_ReadWord+0x108>)
 80012e8:	8811      	ldrh	r1, [r2, #0]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00b fc0f 	bl	800cb10 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80012f2:	7bbb      	ldrb	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <DRV_CANFDSPI_ReadWord+0xae>
      return spiTransferError;
 80012f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80012fc:	e01c      	b.n	8001338 <DRV_CANFDSPI_ReadWord+0xe8>
  }

  // Update data
  *rxd = 0;
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001304:	2302      	movs	r3, #2
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e011      	b.n	800132e <DRV_CANFDSPI_ReadWord+0xde>
      x = (uint32_t) spiReceiveBuffer[i];
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	4a0f      	ldr	r2, [pc, #60]	; (800134c <DRV_CANFDSPI_ReadWord+0xfc>)
 800130e:	5cd3      	ldrb	r3, [r2, r3]
 8001310:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	3b02      	subs	r3, #2
 800131a:	00db      	lsls	r3, r3, #3
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	fa01 f303 	lsl.w	r3, r1, r3
 8001322:	441a      	add	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001328:	7bfb      	ldrb	r3, [r7, #15]
 800132a:	3301      	adds	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	2b05      	cmp	r3, #5
 8001332:	d9ea      	bls.n	800130a <DRV_CANFDSPI_ReadWord+0xba>
  }

  return spiTransferError;
 8001334:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200002ec 	.word	0x200002ec
 8001344:	20000c98 	.word	0x20000c98
 8001348:	20000c96 	.word	0x20000c96
 800134c:	2000034c 	.word	0x2000034c
 8001350:	20000510 	.word	0x20000510
 8001354:	20000c78 	.word	0x20000c78
 8001358:	20000c76 	.word	0x20000c76

0800135c <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af02      	add	r7, sp, #8
 8001362:	4603      	mov	r3, r0
 8001364:	603a      	str	r2, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
 8001368:	460b      	mov	r3, r1
 800136a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 800136c:	2306      	movs	r3, #6
 800136e:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001370:	88bb      	ldrh	r3, [r7, #4]
 8001372:	0a1b      	lsrs	r3, r3, #8
 8001374:	b29b      	uxth	r3, r3
 8001376:	b2db      	uxtb	r3, r3
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	b2db      	uxtb	r3, r3
 800137e:	3320      	adds	r3, #32
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001384:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4b29      	ldr	r3, [pc, #164]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 800138c:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 800138e:	2300      	movs	r3, #0
 8001390:	73fb      	strb	r3, [r7, #15]
 8001392:	e00b      	b.n	80013ac <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	40da      	lsrs	r2, r3
 800139c:	7bfb      	ldrb	r3, [r7, #15]
 800139e:	3302      	adds	r3, #2
 80013a0:	b2d1      	uxtb	r1, r2
 80013a2:	4a23      	ldr	r2, [pc, #140]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 80013a4:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3301      	adds	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d9f0      	bls.n	8001394 <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN2){
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d11a      	bne.n	80013ee <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80013b8:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <DRV_CANFDSPI_WriteWord+0xd8>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013be:	8811      	ldrh	r1, [r2, #0]
 80013c0:	2200      	movs	r2, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b fba4 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	2264      	movs	r2, #100	; 0x64
 80013cc:	9200      	str	r2, [sp, #0]
 80013ce:	4a1b      	ldr	r2, [pc, #108]	; (800143c <DRV_CANFDSPI_WriteWord+0xe0>)
 80013d0:	4917      	ldr	r1, [pc, #92]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <DRV_CANFDSPI_WriteWord+0xe4>)
 80013d4:	f00d ff1a 	bl	800f20c <HAL_SPI_TransmitReceive>
 80013d8:	4603      	mov	r3, r0
 80013da:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <DRV_CANFDSPI_WriteWord+0xd8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a15      	ldr	r2, [pc, #84]	; (8001438 <DRV_CANFDSPI_WriteWord+0xdc>)
 80013e2:	8811      	ldrh	r1, [r2, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4618      	mov	r0, r3
 80013e8:	f00b fb92 	bl	800cb10 <HAL_GPIO_WritePin>
 80013ec:	e019      	b.n	8001422 <DRV_CANFDSPI_WriteWord+0xc6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013ee:	4b15      	ldr	r3, [pc, #84]	; (8001444 <DRV_CANFDSPI_WriteWord+0xe8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a15      	ldr	r2, [pc, #84]	; (8001448 <DRV_CANFDSPI_WriteWord+0xec>)
 80013f4:	8811      	ldrh	r1, [r2, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00b fb89 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013fe:	89bb      	ldrh	r3, [r7, #12]
 8001400:	2264      	movs	r2, #100	; 0x64
 8001402:	9200      	str	r2, [sp, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	; (800143c <DRV_CANFDSPI_WriteWord+0xe0>)
 8001406:	490a      	ldr	r1, [pc, #40]	; (8001430 <DRV_CANFDSPI_WriteWord+0xd4>)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <DRV_CANFDSPI_WriteWord+0xe4>)
 800140a:	f00d feff 	bl	800f20c <HAL_SPI_TransmitReceive>
 800140e:	4603      	mov	r3, r0
 8001410:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001412:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <DRV_CANFDSPI_WriteWord+0xe8>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <DRV_CANFDSPI_WriteWord+0xec>)
 8001418:	8811      	ldrh	r1, [r2, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	4618      	mov	r0, r3
 800141e:	f00b fb77 	bl	800cb10 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 8001422:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200002ec 	.word	0x200002ec
 8001434:	20000c98 	.word	0x20000c98
 8001438:	20000c96 	.word	0x20000c96
 800143c:	2000034c 	.word	0x2000034c
 8001440:	20000510 	.word	0x20000510
 8001444:	20000c78 	.word	0x20000c78
 8001448:	20000c76 	.word	0x20000c76

0800144c <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af02      	add	r7, sp, #8
 8001452:	4603      	mov	r3, r0
 8001454:	603a      	str	r2, [r7, #0]
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	460b      	mov	r3, r1
 800145a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 800145c:	2304      	movs	r3, #4
 800145e:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f003 030f 	and.w	r3, r3, #15
 800146c:	b2db      	uxtb	r3, r3
 800146e:	3330      	adds	r3, #48	; 0x30
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 8001474:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001476:	88bb      	ldrh	r3, [r7, #4]
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b31      	ldr	r3, [pc, #196]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 800147c:	705a      	strb	r2, [r3, #1]

    if(index==CAN2){
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d11a      	bne.n	80014ba <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a2f      	ldr	r2, [pc, #188]	; (8001548 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 800148a:	8811      	ldrh	r1, [r2, #0]
 800148c:	2200      	movs	r2, #0
 800148e:	4618      	mov	r0, r3
 8001490:	f00b fb3e 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001494:	89bb      	ldrh	r3, [r7, #12]
 8001496:	2264      	movs	r2, #100	; 0x64
 8001498:	9200      	str	r2, [sp, #0]
 800149a:	4a2c      	ldr	r2, [pc, #176]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 800149c:	4928      	ldr	r1, [pc, #160]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 800149e:	482c      	ldr	r0, [pc, #176]	; (8001550 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 80014a0:	f00d feb4 	bl	800f20c <HAL_SPI_TransmitReceive>
 80014a4:	4603      	mov	r3, r0
 80014a6:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80014a8:	4b26      	ldr	r3, [pc, #152]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xf8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a26      	ldr	r2, [pc, #152]	; (8001548 <DRV_CANFDSPI_ReadHalfWord+0xfc>)
 80014ae:	8811      	ldrh	r1, [r2, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4618      	mov	r0, r3
 80014b4:	f00b fb2c 	bl	800cb10 <HAL_GPIO_WritePin>
 80014b8:	e019      	b.n	80014ee <DRV_CANFDSPI_ReadHalfWord+0xa2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80014ba:	4b26      	ldr	r3, [pc, #152]	; (8001554 <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a26      	ldr	r2, [pc, #152]	; (8001558 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014c0:	8811      	ldrh	r1, [r2, #0]
 80014c2:	2200      	movs	r2, #0
 80014c4:	4618      	mov	r0, r3
 80014c6:	f00b fb23 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014ca:	89bb      	ldrh	r3, [r7, #12]
 80014cc:	2264      	movs	r2, #100	; 0x64
 80014ce:	9200      	str	r2, [sp, #0]
 80014d0:	4a1e      	ldr	r2, [pc, #120]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 80014d2:	491b      	ldr	r1, [pc, #108]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xf4>)
 80014d4:	481e      	ldr	r0, [pc, #120]	; (8001550 <DRV_CANFDSPI_ReadHalfWord+0x104>)
 80014d6:	f00d fe99 	bl	800f20c <HAL_SPI_TransmitReceive>
 80014da:	4603      	mov	r3, r0
 80014dc:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80014de:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <DRV_CANFDSPI_ReadHalfWord+0x108>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <DRV_CANFDSPI_ReadHalfWord+0x10c>)
 80014e4:	8811      	ldrh	r1, [r2, #0]
 80014e6:	2201      	movs	r2, #1
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00b fb11 	bl	800cb10 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 80014ee:	7bbb      	ldrb	r3, [r7, #14]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <DRV_CANFDSPI_ReadHalfWord+0xae>
        return spiTransferError;
 80014f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014f8:	e01e      	b.n	8001538 <DRV_CANFDSPI_ReadHalfWord+0xec>
    }

    // Update data
    *rxd = 0;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001500:	2302      	movs	r3, #2
 8001502:	73fb      	strb	r3, [r7, #15]
 8001504:	e013      	b.n	800152e <DRV_CANFDSPI_ReadHalfWord+0xe2>
        x = (uint32_t) spiReceiveBuffer[i];
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	4a10      	ldr	r2, [pc, #64]	; (800154c <DRV_CANFDSPI_ReadHalfWord+0x100>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	881a      	ldrh	r2, [r3, #0]
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	3b02      	subs	r3, #2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	b29b      	uxth	r3, r3
 8001520:	4413      	add	r3, r2
 8001522:	b29a      	uxth	r2, r3
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	3301      	adds	r3, #1
 800152c:	73fb      	strb	r3, [r7, #15]
 800152e:	7bfb      	ldrb	r3, [r7, #15]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d9e8      	bls.n	8001506 <DRV_CANFDSPI_ReadHalfWord+0xba>
    }

    return spiTransferError;
 8001534:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200002ec 	.word	0x200002ec
 8001544:	20000c98 	.word	0x20000c98
 8001548:	20000c96 	.word	0x20000c96
 800154c:	2000034c 	.word	0x2000034c
 8001550:	20000510 	.word	0x20000510
 8001554:	20000c78 	.word	0x20000c78
 8001558:	20000c76 	.word	0x20000c76

0800155c <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af02      	add	r7, sp, #8
 8001562:	4603      	mov	r3, r0
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	460b      	mov	r3, r1
 8001568:	80bb      	strh	r3, [r7, #4]
 800156a:	4613      	mov	r3, r2
 800156c:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 800156e:	2304      	movs	r3, #4
 8001570:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001572:	88bb      	ldrh	r3, [r7, #4]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3320      	adds	r3, #32
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b2a      	ldr	r3, [pc, #168]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 8001586:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	b2da      	uxtb	r2, r3
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800158e:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
 8001594:	e00b      	b.n	80015ae <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	411a      	asrs	r2, r3
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	3302      	adds	r3, #2
 80015a2:	b2d1      	uxtb	r1, r2
 80015a4:	4a22      	ldr	r2, [pc, #136]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 80015a6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3301      	adds	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d9f0      	bls.n	8001596 <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN2){
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11a      	bne.n	80015f0 <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80015ba:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1e      	ldr	r2, [pc, #120]	; (8001638 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015c0:	8811      	ldrh	r1, [r2, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	4618      	mov	r0, r3
 80015c6:	f00b faa3 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015ca:	89bb      	ldrh	r3, [r7, #12]
 80015cc:	2264      	movs	r2, #100	; 0x64
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	4a1a      	ldr	r2, [pc, #104]	; (800163c <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 80015d4:	481a      	ldr	r0, [pc, #104]	; (8001640 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 80015d6:	f00d fe19 	bl	800f20c <HAL_SPI_TransmitReceive>
 80015da:	4603      	mov	r3, r0
 80015dc:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <DRV_CANFDSPI_WriteHalfWord+0xd8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <DRV_CANFDSPI_WriteHalfWord+0xdc>)
 80015e4:	8811      	ldrh	r1, [r2, #0]
 80015e6:	2201      	movs	r2, #1
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00b fa91 	bl	800cb10 <HAL_GPIO_WritePin>
 80015ee:	e019      	b.n	8001624 <DRV_CANFDSPI_WriteHalfWord+0xc8>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a14      	ldr	r2, [pc, #80]	; (8001648 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 80015f6:	8811      	ldrh	r1, [r2, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f00b fa88 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001600:	89bb      	ldrh	r3, [r7, #12]
 8001602:	2264      	movs	r2, #100	; 0x64
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	4a0d      	ldr	r2, [pc, #52]	; (800163c <DRV_CANFDSPI_WriteHalfWord+0xe0>)
 8001608:	4909      	ldr	r1, [pc, #36]	; (8001630 <DRV_CANFDSPI_WriteHalfWord+0xd4>)
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <DRV_CANFDSPI_WriteHalfWord+0xe4>)
 800160c:	f00d fdfe 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001610:	4603      	mov	r3, r0
 8001612:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <DRV_CANFDSPI_WriteHalfWord+0xe8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0b      	ldr	r2, [pc, #44]	; (8001648 <DRV_CANFDSPI_WriteHalfWord+0xec>)
 800161a:	8811      	ldrh	r1, [r2, #0]
 800161c:	2201      	movs	r2, #1
 800161e:	4618      	mov	r0, r3
 8001620:	f00b fa76 	bl	800cb10 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001624:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	200002ec 	.word	0x200002ec
 8001634:	20000c98 	.word	0x20000c98
 8001638:	20000c96 	.word	0x20000c96
 800163c:	2000034c 	.word	0x2000034c
 8001640:	20000510 	.word	0x20000510
 8001644:	20000c78 	.word	0x20000c78
 8001648:	20000c76 	.word	0x20000c76

0800164c <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af02      	add	r7, sp, #8
 8001652:	60ba      	str	r2, [r7, #8]
 8001654:	461a      	mov	r2, r3
 8001656:	4603      	mov	r3, r0
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	460b      	mov	r3, r1
 800165c:	81bb      	strh	r3, [r7, #12]
 800165e:	4613      	mov	r3, r2
 8001660:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	3302      	adds	r3, #2
 8001666:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001668:	8a7b      	ldrh	r3, [r7, #18]
 800166a:	2b60      	cmp	r3, #96	; 0x60
 800166c:	d902      	bls.n	8001674 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
 8001672:	e068      	b.n	8001746 <DRV_CANFDSPI_ReadByteArray+0xfa>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001674:	89bb      	ldrh	r3, [r7, #12]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	b2db      	uxtb	r3, r3
 800167c:	f003 030f 	and.w	r3, r3, #15
 8001680:	b2db      	uxtb	r3, r3
 8001682:	3330      	adds	r3, #48	; 0x30
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001688:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4b30      	ldr	r3, [pc, #192]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001690:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001692:	2302      	movs	r3, #2
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	e006      	b.n	80016a6 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 8001698:	8afb      	ldrh	r3, [r7, #22]
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 800169c:	2100      	movs	r1, #0
 800169e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80016a0:	8afb      	ldrh	r3, [r7, #22]
 80016a2:	3301      	adds	r3, #1
 80016a4:	82fb      	strh	r3, [r7, #22]
 80016a6:	8afa      	ldrh	r2, [r7, #22]
 80016a8:	8a7b      	ldrh	r3, [r7, #18]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d3f4      	bcc.n	8001698 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN2){
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d11a      	bne.n	80016ea <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016ba:	8811      	ldrh	r1, [r2, #0]
 80016bc:	2200      	movs	r2, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b fa26 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016c4:	8a7b      	ldrh	r3, [r7, #18]
 80016c6:	2264      	movs	r2, #100	; 0x64
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 80016cc:	4920      	ldr	r1, [pc, #128]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 80016ce:	4824      	ldr	r0, [pc, #144]	; (8001760 <DRV_CANFDSPI_ReadByteArray+0x114>)
 80016d0:	f00d fd9c 	bl	800f20c <HAL_SPI_TransmitReceive>
 80016d4:	4603      	mov	r3, r0
 80016d6:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <DRV_CANFDSPI_ReadByteArray+0x108>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <DRV_CANFDSPI_ReadByteArray+0x10c>)
 80016de:	8811      	ldrh	r1, [r2, #0]
 80016e0:	2201      	movs	r2, #1
 80016e2:	4618      	mov	r0, r3
 80016e4:	f00b fa14 	bl	800cb10 <HAL_GPIO_WritePin>
 80016e8:	e019      	b.n	800171e <DRV_CANFDSPI_ReadByteArray+0xd2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80016ea:	4b1e      	ldr	r3, [pc, #120]	; (8001764 <DRV_CANFDSPI_ReadByteArray+0x118>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a1e      	ldr	r2, [pc, #120]	; (8001768 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 80016f0:	8811      	ldrh	r1, [r2, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b fa0b 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80016fa:	8a7b      	ldrh	r3, [r7, #18]
 80016fc:	2264      	movs	r2, #100	; 0x64
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <DRV_CANFDSPI_ReadByteArray+0x104>)
 8001704:	4816      	ldr	r0, [pc, #88]	; (8001760 <DRV_CANFDSPI_ReadByteArray+0x114>)
 8001706:	f00d fd81 	bl	800f20c <HAL_SPI_TransmitReceive>
 800170a:	4603      	mov	r3, r0
 800170c:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <DRV_CANFDSPI_ReadByteArray+0x118>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a15      	ldr	r2, [pc, #84]	; (8001768 <DRV_CANFDSPI_ReadByteArray+0x11c>)
 8001714:	8811      	ldrh	r1, [r2, #0]
 8001716:	2201      	movs	r2, #1
 8001718:	4618      	mov	r0, r3
 800171a:	f00b f9f9 	bl	800cb10 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 800171e:	2300      	movs	r3, #0
 8001720:	82fb      	strh	r3, [r7, #22]
 8001722:	e00a      	b.n	800173a <DRV_CANFDSPI_ReadByteArray+0xee>
        rxd[i] = spiReceiveBuffer[i + 2];
 8001724:	8afb      	ldrh	r3, [r7, #22]
 8001726:	1c9a      	adds	r2, r3, #2
 8001728:	8afb      	ldrh	r3, [r7, #22]
 800172a:	68b9      	ldr	r1, [r7, #8]
 800172c:	440b      	add	r3, r1
 800172e:	490b      	ldr	r1, [pc, #44]	; (800175c <DRV_CANFDSPI_ReadByteArray+0x110>)
 8001730:	5c8a      	ldrb	r2, [r1, r2]
 8001732:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 8001734:	8afb      	ldrh	r3, [r7, #22]
 8001736:	3301      	adds	r3, #1
 8001738:	82fb      	strh	r3, [r7, #22]
 800173a:	8afa      	ldrh	r2, [r7, #22]
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	429a      	cmp	r2, r3
 8001740:	d3f0      	bcc.n	8001724 <DRV_CANFDSPI_ReadByteArray+0xd8>
    }

    return spiTransferError;
 8001742:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002ec 	.word	0x200002ec
 8001754:	20000c98 	.word	0x20000c98
 8001758:	20000c96 	.word	0x20000c96
 800175c:	2000034c 	.word	0x2000034c
 8001760:	20000510 	.word	0x20000510
 8001764:	20000c78 	.word	0x20000c78
 8001768:	20000c76 	.word	0x20000c76

0800176c <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60ba      	str	r2, [r7, #8]
 8001774:	461a      	mov	r2, r3
 8001776:	4603      	mov	r3, r0
 8001778:	73fb      	strb	r3, [r7, #15]
 800177a:	460b      	mov	r3, r1
 800177c:	81bb      	strh	r3, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	3302      	adds	r3, #2
 8001786:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001788:	8a7b      	ldrh	r3, [r7, #18]
 800178a:	2b60      	cmp	r3, #96	; 0x60
 800178c:	d902      	bls.n	8001794 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 800178e:	f04f 33ff 	mov.w	r3, #4294967295
 8001792:	e05a      	b.n	800184a <DRV_CANFDSPI_WriteByteArray+0xde>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001794:	89bb      	ldrh	r3, [r7, #12]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	b29b      	uxth	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f003 030f 	and.w	r3, r3, #15
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	3320      	adds	r3, #32
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017a8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80017aa:	89bb      	ldrh	r3, [r7, #12]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017b0:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	82fb      	strh	r3, [r7, #22]
 80017b6:	e00a      	b.n	80017ce <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 80017b8:	8afb      	ldrh	r3, [r7, #22]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	441a      	add	r2, r3
 80017be:	8afb      	ldrh	r3, [r7, #22]
 80017c0:	3302      	adds	r3, #2
 80017c2:	7811      	ldrb	r1, [r2, #0]
 80017c4:	4a23      	ldr	r2, [pc, #140]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017c6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 80017c8:	8afb      	ldrh	r3, [r7, #22]
 80017ca:	3301      	adds	r3, #1
 80017cc:	82fb      	strh	r3, [r7, #22]
 80017ce:	8afa      	ldrh	r2, [r7, #22]
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d3f0      	bcc.n	80017b8 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN2){
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d11a      	bne.n	8001812 <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80017dc:	4b1e      	ldr	r3, [pc, #120]	; (8001858 <DRV_CANFDSPI_WriteByteArray+0xec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a1e      	ldr	r2, [pc, #120]	; (800185c <DRV_CANFDSPI_WriteByteArray+0xf0>)
 80017e2:	8811      	ldrh	r1, [r2, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f00b f992 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017ec:	8a7b      	ldrh	r3, [r7, #18]
 80017ee:	2264      	movs	r2, #100	; 0x64
 80017f0:	9200      	str	r2, [sp, #0]
 80017f2:	4a1b      	ldr	r2, [pc, #108]	; (8001860 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 80017f4:	4917      	ldr	r1, [pc, #92]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 80017f6:	481b      	ldr	r0, [pc, #108]	; (8001864 <DRV_CANFDSPI_WriteByteArray+0xf8>)
 80017f8:	f00d fd08 	bl	800f20c <HAL_SPI_TransmitReceive>
 80017fc:	4603      	mov	r3, r0
 80017fe:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <DRV_CANFDSPI_WriteByteArray+0xec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a15      	ldr	r2, [pc, #84]	; (800185c <DRV_CANFDSPI_WriteByteArray+0xf0>)
 8001806:	8811      	ldrh	r1, [r2, #0]
 8001808:	2201      	movs	r2, #1
 800180a:	4618      	mov	r0, r3
 800180c:	f00b f980 	bl	800cb10 <HAL_GPIO_WritePin>
 8001810:	e019      	b.n	8001846 <DRV_CANFDSPI_WriteByteArray+0xda>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001812:	4b15      	ldr	r3, [pc, #84]	; (8001868 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <DRV_CANFDSPI_WriteByteArray+0x100>)
 8001818:	8811      	ldrh	r1, [r2, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f00b f977 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001822:	8a7b      	ldrh	r3, [r7, #18]
 8001824:	2264      	movs	r2, #100	; 0x64
 8001826:	9200      	str	r2, [sp, #0]
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <DRV_CANFDSPI_WriteByteArray+0xf4>)
 800182a:	490a      	ldr	r1, [pc, #40]	; (8001854 <DRV_CANFDSPI_WriteByteArray+0xe8>)
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <DRV_CANFDSPI_WriteByteArray+0xf8>)
 800182e:	f00d fced 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001832:	4603      	mov	r3, r0
 8001834:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <DRV_CANFDSPI_WriteByteArray+0xfc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <DRV_CANFDSPI_WriteByteArray+0x100>)
 800183c:	8811      	ldrh	r1, [r2, #0]
 800183e:	2201      	movs	r2, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f00b f965 	bl	800cb10 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001846:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002ec 	.word	0x200002ec
 8001858:	20000c98 	.word	0x20000c98
 800185c:	20000c96 	.word	0x20000c96
 8001860:	2000034c 	.word	0x2000034c
 8001864:	20000510 	.word	0x20000510
 8001868:	20000c78 	.word	0x20000c78
 800186c:	20000c76 	.word	0x20000c76

08001870 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af02      	add	r7, sp, #8
 8001876:	60ba      	str	r2, [r7, #8]
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
 800187e:	460b      	mov	r3, r1
 8001880:	81bb      	strh	r3, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	b29b      	uxth	r3, r3
 800188c:	3302      	adds	r3, #2
 800188e:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	2b60      	cmp	r3, #96	; 0x60
 8001894:	d902      	bls.n	800189c <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e084      	b.n	80019a6 <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 800189c:	89bb      	ldrh	r3, [r7, #12]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	f003 030f 	and.w	r3, r3, #15
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3330      	adds	r3, #48	; 0x30
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b40      	ldr	r3, [pc, #256]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018b0:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 80018b2:	89bb      	ldrh	r3, [r7, #12]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b3e      	ldr	r3, [pc, #248]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018b8:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 80018ba:	2302      	movs	r3, #2
 80018bc:	83fb      	strh	r3, [r7, #30]
 80018be:	e006      	b.n	80018ce <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 80018c0:	8bfb      	ldrh	r3, [r7, #30]
 80018c2:	4a3b      	ldr	r2, [pc, #236]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018c4:	2100      	movs	r1, #0
 80018c6:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 80018c8:	8bfb      	ldrh	r3, [r7, #30]
 80018ca:	3301      	adds	r3, #1
 80018cc:	83fb      	strh	r3, [r7, #30]
 80018ce:	8bfa      	ldrh	r2, [r7, #30]
 80018d0:	8afb      	ldrh	r3, [r7, #22]
 80018d2:	429a      	cmp	r2, r3
 80018d4:	d3f4      	bcc.n	80018c0 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN2){
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11a      	bne.n	8001912 <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80018dc:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <DRV_CANFDSPI_ReadWordArray+0x144>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a35      	ldr	r2, [pc, #212]	; (80019b8 <DRV_CANFDSPI_ReadWordArray+0x148>)
 80018e2:	8811      	ldrh	r1, [r2, #0]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f00b f912 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018ec:	8afb      	ldrh	r3, [r7, #22]
 80018ee:	2264      	movs	r2, #100	; 0x64
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	4a32      	ldr	r2, [pc, #200]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 80018f4:	492e      	ldr	r1, [pc, #184]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 80018f6:	4832      	ldr	r0, [pc, #200]	; (80019c0 <DRV_CANFDSPI_ReadWordArray+0x150>)
 80018f8:	f00d fc88 	bl	800f20c <HAL_SPI_TransmitReceive>
 80018fc:	4603      	mov	r3, r0
 80018fe:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001900:	4b2c      	ldr	r3, [pc, #176]	; (80019b4 <DRV_CANFDSPI_ReadWordArray+0x144>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2c      	ldr	r2, [pc, #176]	; (80019b8 <DRV_CANFDSPI_ReadWordArray+0x148>)
 8001906:	8811      	ldrh	r1, [r2, #0]
 8001908:	2201      	movs	r2, #1
 800190a:	4618      	mov	r0, r3
 800190c:	f00b f900 	bl	800cb10 <HAL_GPIO_WritePin>
 8001910:	e019      	b.n	8001946 <DRV_CANFDSPI_ReadWordArray+0xd6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001912:	4b2c      	ldr	r3, [pc, #176]	; (80019c4 <DRV_CANFDSPI_ReadWordArray+0x154>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a2c      	ldr	r2, [pc, #176]	; (80019c8 <DRV_CANFDSPI_ReadWordArray+0x158>)
 8001918:	8811      	ldrh	r1, [r2, #0]
 800191a:	2200      	movs	r2, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f00b f8f7 	bl	800cb10 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001922:	8afb      	ldrh	r3, [r7, #22]
 8001924:	2264      	movs	r2, #100	; 0x64
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	4a24      	ldr	r2, [pc, #144]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 800192a:	4921      	ldr	r1, [pc, #132]	; (80019b0 <DRV_CANFDSPI_ReadWordArray+0x140>)
 800192c:	4824      	ldr	r0, [pc, #144]	; (80019c0 <DRV_CANFDSPI_ReadWordArray+0x150>)
 800192e:	f00d fc6d 	bl	800f20c <HAL_SPI_TransmitReceive>
 8001932:	4603      	mov	r3, r0
 8001934:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001936:	4b23      	ldr	r3, [pc, #140]	; (80019c4 <DRV_CANFDSPI_ReadWordArray+0x154>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <DRV_CANFDSPI_ReadWordArray+0x158>)
 800193c:	8811      	ldrh	r1, [r2, #0]
 800193e:	2201      	movs	r2, #1
 8001940:	4618      	mov	r0, r3
 8001942:	f00b f8e5 	bl	800cb10 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001946:	7e7b      	ldrb	r3, [r7, #25]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d002      	beq.n	8001952 <DRV_CANFDSPI_ReadWordArray+0xe2>
        return spiTransferError;
 800194c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001950:	e029      	b.n	80019a6 <DRV_CANFDSPI_ReadWordArray+0x136>
    }

    // Convert Byte array to Word array
    n = 2;
 8001952:	2302      	movs	r3, #2
 8001954:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001956:	2300      	movs	r3, #0
 8001958:	83fb      	strh	r3, [r7, #30]
 800195a:	e01e      	b.n	800199a <DRV_CANFDSPI_ReadWordArray+0x12a>
        w.word = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001960:	2300      	movs	r3, #0
 8001962:	83bb      	strh	r3, [r7, #28]
 8001964:	e00d      	b.n	8001982 <DRV_CANFDSPI_ReadWordArray+0x112>
            w.byte[j] = spiReceiveBuffer[n];
 8001966:	8b7a      	ldrh	r2, [r7, #26]
 8001968:	8bbb      	ldrh	r3, [r7, #28]
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <DRV_CANFDSPI_ReadWordArray+0x14c>)
 800196c:	5c8a      	ldrb	r2, [r1, r2]
 800196e:	3320      	adds	r3, #32
 8001970:	443b      	add	r3, r7
 8001972:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3301      	adds	r3, #1
 800197a:	83bb      	strh	r3, [r7, #28]
 800197c:	8b7b      	ldrh	r3, [r7, #26]
 800197e:	3301      	adds	r3, #1
 8001980:	837b      	strh	r3, [r7, #26]
 8001982:	8bbb      	ldrh	r3, [r7, #28]
 8001984:	2b03      	cmp	r3, #3
 8001986:	d9ee      	bls.n	8001966 <DRV_CANFDSPI_ReadWordArray+0xf6>
        }
        rxd[i] = w.word;
 8001988:	8bfb      	ldrh	r3, [r7, #30]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	68ba      	ldr	r2, [r7, #8]
 800198e:	4413      	add	r3, r2
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001994:	8bfb      	ldrh	r3, [r7, #30]
 8001996:	3301      	adds	r3, #1
 8001998:	83fb      	strh	r3, [r7, #30]
 800199a:	8bfa      	ldrh	r2, [r7, #30]
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d3dc      	bcc.n	800195c <DRV_CANFDSPI_ReadWordArray+0xec>
    }

    return spiTransferError;
 80019a2:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002ec 	.word	0x200002ec
 80019b4:	20000c98 	.word	0x20000c98
 80019b8:	20000c96 	.word	0x20000c96
 80019bc:	2000034c 	.word	0x2000034c
 80019c0:	20000510 	.word	0x20000510
 80019c4:	20000c78 	.word	0x20000c78
 80019c8:	20000c76 	.word	0x20000c76

080019cc <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80019dc:	4b41      	ldr	r3, [pc, #260]	; (8001ae4 <DRV_CANFDSPI_Configure+0x118>)
 80019de:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	7a3b      	ldrb	r3, [r7, #8]
 80019ec:	f362 0304 	bfi	r3, r2, #0, #5
 80019f0:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019fa:	b2da      	uxtb	r2, r3
 80019fc:	7a3b      	ldrb	r3, [r7, #8]
 80019fe:	f362 1345 	bfi	r3, r2, #5, #1
 8001a02:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	7a3b      	ldrb	r3, [r7, #8]
 8001a10:	f362 1386 	bfi	r3, r2, #6, #1
 8001a14:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	7a7b      	ldrb	r3, [r7, #9]
 8001a22:	f362 0300 	bfi	r3, r2, #0, #1
 8001a26:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	785b      	ldrb	r3, [r3, #1]
 8001a2c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	7a7b      	ldrb	r3, [r7, #9]
 8001a34:	f362 0342 	bfi	r3, r2, #1, #2
 8001a38:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	785b      	ldrb	r3, [r3, #1]
 8001a3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	7a7b      	ldrb	r3, [r7, #9]
 8001a46:	f362 1304 	bfi	r3, r2, #4, #1
 8001a4a:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	785b      	ldrb	r3, [r3, #1]
 8001a50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	7abb      	ldrb	r3, [r7, #10]
 8001a58:	f362 0300 	bfi	r3, r2, #0, #1
 8001a5c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	785b      	ldrb	r3, [r3, #1]
 8001a62:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	7abb      	ldrb	r3, [r7, #10]
 8001a6a:	f362 0341 	bfi	r3, r2, #1, #1
 8001a6e:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	7abb      	ldrb	r3, [r7, #10]
 8001a7c:	f362 0382 	bfi	r3, r2, #2, #1
 8001a80:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	785b      	ldrb	r3, [r3, #1]
 8001a86:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	7abb      	ldrb	r3, [r7, #10]
 8001a8e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001a92:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	785b      	ldrb	r3, [r3, #1]
 8001a98:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	7abb      	ldrb	r3, [r7, #10]
 8001aa0:	f362 1304 	bfi	r3, r2, #4, #1
 8001aa4:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	789b      	ldrb	r3, [r3, #2]
 8001aaa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	f362 1307 	bfi	r3, r2, #4, #4
 8001ab6:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fc4c 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d002      	beq.n	8001ad6 <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad4:	e001      	b.n	8001ada <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	04980760 	.word	0x04980760

08001ae8 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001af2:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001af4:	7b3b      	ldrb	r3, [r7, #12]
 8001af6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001afa:	b2d9      	uxtb	r1, r3
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	7813      	ldrb	r3, [r2, #0]
 8001b00:	f361 0304 	bfi	r3, r1, #0, #5
 8001b04:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001b06:	7b3b      	ldrb	r3, [r7, #12]
 8001b08:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b0c:	b2d9      	uxtb	r1, r3
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	7813      	ldrb	r3, [r2, #0]
 8001b12:	f361 1345 	bfi	r3, r1, #5, #1
 8001b16:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001b18:	7b3b      	ldrb	r3, [r7, #12]
 8001b1a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001b1e:	b2d9      	uxtb	r1, r3
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	7813      	ldrb	r3, [r2, #0]
 8001b24:	f361 1386 	bfi	r3, r1, #6, #1
 8001b28:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001b2a:	7b7b      	ldrb	r3, [r7, #13]
 8001b2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b30:	b2d9      	uxtb	r1, r3
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	7813      	ldrb	r3, [r2, #0]
 8001b36:	f361 13c7 	bfi	r3, r1, #7, #1
 8001b3a:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001b3c:	7b7b      	ldrb	r3, [r7, #13]
 8001b3e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001b42:	b2d9      	uxtb	r1, r3
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	7853      	ldrb	r3, [r2, #1]
 8001b48:	f361 0301 	bfi	r3, r1, #0, #2
 8001b4c:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001b4e:	7b7b      	ldrb	r3, [r7, #13]
 8001b50:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001b54:	b2d9      	uxtb	r1, r3
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	7853      	ldrb	r3, [r2, #1]
 8001b5a:	f361 0382 	bfi	r3, r1, #2, #1
 8001b5e:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001b60:	7bbb      	ldrb	r3, [r7, #14]
 8001b62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b66:	b2d9      	uxtb	r1, r3
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	7853      	ldrb	r3, [r2, #1]
 8001b6c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001b70:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001b72:	7bbb      	ldrb	r3, [r7, #14]
 8001b74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001b78:	b2d9      	uxtb	r1, r3
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	7853      	ldrb	r3, [r2, #1]
 8001b7e:	f361 1304 	bfi	r3, r1, #4, #1
 8001b82:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001b84:	7bbb      	ldrb	r3, [r7, #14]
 8001b86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001b8a:	b2d9      	uxtb	r1, r3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	7853      	ldrb	r3, [r2, #1]
 8001b90:	f361 1345 	bfi	r3, r1, #5, #1
 8001b94:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001b96:	7bbb      	ldrb	r3, [r7, #14]
 8001b98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001b9c:	b2d9      	uxtb	r1, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	7853      	ldrb	r3, [r2, #1]
 8001ba2:	f361 1386 	bfi	r3, r1, #6, #1
 8001ba6:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001bae:	b2d9      	uxtb	r1, r3
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	7853      	ldrb	r3, [r2, #1]
 8001bb4:	f361 13c7 	bfi	r3, r1, #7, #1
 8001bb8:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
 8001bbc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	7893      	ldrb	r3, [r2, #2]
 8001bc6:	f361 0303 	bfi	r3, r1, #0, #4
 8001bca:	7093      	strb	r3, [r2, #2]

    return 0;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	04980760 	.word	0x04980760

08001be0 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	460a      	mov	r2, r1
 8001bea:	71fb      	strb	r3, [r7, #7]
 8001bec:	4613      	mov	r3, r2
 8001bee:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001bf8:	f107 020e 	add.w	r2, r7, #14
 8001bfc:	79fb      	ldrb	r3, [r7, #7]
 8001bfe:	2103      	movs	r1, #3
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fa4f 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8001c06:	4603      	mov	r3, r0
 8001c08:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001c12:	f04f 33ff 	mov.w	r3, #4294967295
 8001c16:	e01a      	b.n	8001c4e <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001c18:	7bbb      	ldrb	r3, [r7, #14]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001c22:	7bba      	ldrb	r2, [r7, #14]
 8001c24:	79bb      	ldrb	r3, [r7, #6]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001c2c:	7bba      	ldrb	r2, [r7, #14]
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	2103      	movs	r1, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff faa2 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001c44:	f06f 0301 	mvn.w	r3, #1
 8001c48:	e001      	b.n	8001c4e <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	603a      	str	r2, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
 8001c64:	460b      	mov	r3, r1
 8001c66:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001c70:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001c72:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001c74:	7a3b      	ldrb	r3, [r7, #8]
 8001c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c7a:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	785b      	ldrb	r3, [r3, #1]
 8001c80:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	7afb      	ldrb	r3, [r7, #11]
 8001c88:	f362 0304 	bfi	r3, r2, #0, #5
 8001c8c:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	785b      	ldrb	r3, [r3, #1]
 8001c92:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	7afb      	ldrb	r3, [r7, #11]
 8001c9a:	f362 1347 	bfi	r3, r2, #5, #3
 8001c9e:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	7abb      	ldrb	r3, [r7, #10]
 8001cac:	f362 1346 	bfi	r3, r2, #5, #2
 8001cb0:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	7abb      	ldrb	r3, [r7, #10]
 8001cbe:	f362 0304 	bfi	r3, r2, #0, #5
 8001cc2:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	7a3b      	ldrb	r3, [r7, #8]
 8001cd0:	f362 1386 	bfi	r3, r2, #6, #1
 8001cd4:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001cd6:	79bb      	ldrb	r3, [r7, #6]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	0052      	lsls	r2, r2, #1
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	3350      	adds	r3, #80	; 0x50
 8001ce6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001ce8:	68ba      	ldr	r2, [r7, #8]
 8001cea:	89b9      	ldrh	r1, [r7, #12]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fb34 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	00600400 	.word	0x00600400

08001d08 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001d10:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001d12:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001d14:	7b3b      	ldrb	r3, [r7, #12]
 8001d16:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d1a:	b2d9      	uxtb	r1, r3
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	7813      	ldrb	r3, [r2, #0]
 8001d20:	f361 0300 	bfi	r3, r1, #0, #1
 8001d24:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	7813      	ldrb	r3, [r2, #0]
 8001d32:	f361 0345 	bfi	r3, r1, #1, #5
 8001d36:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001d38:	7bbb      	ldrb	r3, [r7, #14]
 8001d3a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001d3e:	b2d9      	uxtb	r1, r3
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	7813      	ldrb	r3, [r2, #0]
 8001d44:	f361 1387 	bfi	r3, r1, #6, #2
 8001d48:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001d50:	b2d9      	uxtb	r1, r3
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	7853      	ldrb	r3, [r2, #1]
 8001d56:	f361 0304 	bfi	r3, r1, #0, #5
 8001d5a:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001d62:	b2d9      	uxtb	r1, r3
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	7853      	ldrb	r3, [r2, #1]
 8001d68:	f361 1347 	bfi	r3, r1, #5, #3
 8001d6c:	7053      	strb	r3, [r2, #1]

    return 0;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	00600400 	.word	0x00600400

08001d80 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0a0      	sub	sp, #128	; 0x80
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	0052      	lsls	r2, r2, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	3350      	adds	r3, #80	; 0x50
 8001da8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8001dac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001db0:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001db4:	7bf8      	ldrb	r0, [r7, #15]
 8001db6:	2303      	movs	r3, #3
 8001db8:	f7ff fd5a 	bl	8001870 <DRV_CANFDSPI_ReadWordArray>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001dc2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	e0c5      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8001dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd2:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 8001dd4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001dd8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d102      	bne.n	8001de8 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 8001de2:	f06f 0301 	mvn.w	r3, #1
 8001de6:	e0b9      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	791b      	ldrb	r3, [r3, #4]
 8001dec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f001 fc3a 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 8001df8:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8001dfa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001dfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d202      	bcs.n	8001e0a <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 8001e04:	f06f 0302 	mvn.w	r3, #2
 8001e08:	e0a8      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8001e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8001e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8001e12:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001e16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8001e20:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e28:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	785b      	ldrb	r3, [r3, #1]
 8001e36:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	789b      	ldrb	r3, [r3, #2]
 8001e3c:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	78db      	ldrb	r3, [r3, #3]
 8001e42:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	791b      	ldrb	r3, [r3, #4]
 8001e48:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	795b      	ldrb	r3, [r3, #5]
 8001e4e:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	799b      	ldrb	r3, [r3, #6]
 8001e54:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	79db      	ldrb	r3, [r3, #7]
 8001e5a:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e62:	e010      	b.n	8001e86 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 8001e64:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e70:	3308      	adds	r3, #8
 8001e72:	7812      	ldrb	r2, [r2, #0]
 8001e74:	3380      	adds	r3, #128	; 0x80
 8001e76:	443b      	add	r3, r7
 8001e78:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8001e7c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e80:	3301      	adds	r3, #1
 8001e82:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001e86:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001e8a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d8e8      	bhi.n	8001e64 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8001e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d02b      	beq.n	8001f02 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8001eaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	f1c3 0304 	rsb	r3, r3, #4
 8001eba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8001ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3308      	adds	r3, #8
 8001ec6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ed0:	e010      	b.n	8001ef4 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 8001ed2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ed6:	f103 0208 	add.w	r2, r3, #8
 8001eda:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ede:	4413      	add	r3, r2
 8001ee0:	3380      	adds	r3, #128	; 0x80
 8001ee2:	443b      	add	r3, r7
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8001eea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001eee:	3301      	adds	r3, #1
 8001ef0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001ef4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d8e7      	bhi.n	8001ed2 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8001f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001f0c:	4413      	add	r3, r2
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3308      	adds	r3, #8
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	f107 0210 	add.w	r2, r7, #16
 8001f18:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001f1c:	7bf8      	ldrb	r0, [r7, #15]
 8001f1e:	f7ff fc25 	bl	800176c <DRV_CANFDSPI_WriteByteArray>
 8001f22:	4603      	mov	r3, r0
 8001f24:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001f28:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8001f30:	f06f 0303 	mvn.w	r3, #3
 8001f34:	e012      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8001f36:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8001f3a:	7bb9      	ldrb	r1, [r7, #14]
 8001f3c:	7bfb      	ldrb	r3, [r7, #15]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f83a 	bl	8001fb8 <DRV_CANFDSPI_TransmitChannelUpdate>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8001f4a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 8001f52:	f06f 0304 	mvn.w	r3, #4
 8001f56:	e001      	b.n	8001f5c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8001f58:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3780      	adds	r7, #128	; 0x80
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f80:	79bb      	ldrb	r3, [r7, #6]
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	0052      	lsls	r2, r2, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3350      	adds	r3, #80	; 0x50
 8001f90:	81bb      	strh	r3, [r7, #12]
    a += 1;
 8001f92:	89bb      	ldrh	r3, [r7, #12]
 8001f94:	3301      	adds	r3, #1
 8001f96:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8001f9c:	7bfa      	ldrb	r2, [r7, #15]
 8001f9e:	89b9      	ldrh	r1, [r7, #12]
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff f8ea 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8001fac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	71bb      	strb	r3, [r7, #6]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	0052      	lsls	r2, r2, #1
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3351      	adds	r3, #81	; 0x51
 8001fde:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	f043 0301 	orr.w	r3, r3, #1
 8001fea:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8001fec:	797b      	ldrb	r3, [r7, #5]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 8001ff2:	7a7b      	ldrb	r3, [r7, #9]
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8001ffa:	7a7a      	ldrb	r2, [r7, #9]
 8001ffc:	89b9      	ldrh	r1, [r7, #12]
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f8bb 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002006:	4603      	mov	r3, r0
 8002008:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800200a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d002      	beq.n	8002018 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e001      	b.n	800201c <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 8002018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	603a      	str	r2, [r7, #0]
 800202e:	71fb      	strb	r3, [r7, #7]
 8002030:	460b      	mov	r3, r1
 8002032:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8002042:	79bb      	ldrb	r3, [r7, #6]
 8002044:	333e      	adds	r3, #62	; 0x3e
 8002046:	b29b      	uxth	r3, r3
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	89b9      	ldrh	r1, [r7, #12]
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f982 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002058:	4603      	mov	r3, r0
 800205a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800205c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	603a      	str	r2, [r7, #0]
 8002072:	71fb      	strb	r3, [r7, #7]
 8002074:	460b      	mov	r3, r1
 8002076:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002078:	2300      	movs	r3, #0
 800207a:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	b29b      	uxth	r3, r3
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	b29b      	uxth	r3, r3
 800208e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002092:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	89b9      	ldrh	r1, [r7, #12]
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f95e 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80020a0:	4603      	mov	r3, r0
 80020a2:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80020a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	461a      	mov	r2, r3
 80020be:	4623      	mov	r3, r4
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	4603      	mov	r3, r0
 80020c4:	71bb      	strb	r3, [r7, #6]
 80020c6:	460b      	mov	r3, r1
 80020c8:	717b      	strb	r3, [r7, #5]
 80020ca:	4613      	mov	r3, r2
 80020cc:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80020d2:	793b      	ldrb	r3, [r7, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80020d8:	7a3b      	ldrb	r3, [r7, #8]
 80020da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020de:	723b      	strb	r3, [r7, #8]
 80020e0:	e003      	b.n	80020ea <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	f36f 13c7 	bfc	r3, #7, #1
 80020e8:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	f003 031f 	and.w	r3, r3, #31
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	7a3b      	ldrb	r3, [r7, #8]
 80020f4:	f362 0304 	bfi	r3, r2, #0, #5
 80020f8:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002102:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8002104:	7a3a      	ldrb	r2, [r7, #8]
 8002106:	89b9      	ldrh	r1, [r7, #12]
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff f836 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002114:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bd90      	pop	{r4, r7, pc}

08002120 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	603a      	str	r2, [r7, #0]
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	460b      	mov	r3, r1
 800212e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002134:	2300      	movs	r3, #0
 8002136:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8002138:	79bb      	ldrb	r3, [r7, #6]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 800213e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002142:	e033      	b.n	80021ac <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002146:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8002148:	7a3b      	ldrb	r3, [r7, #8]
 800214a:	f36f 13c7 	bfc	r3, #7, #1
 800214e:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002158:	b2da      	uxtb	r2, r3
 800215a:	7afb      	ldrb	r3, [r7, #11]
 800215c:	f362 0304 	bfi	r3, r2, #0, #5
 8002160:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	881b      	ldrh	r3, [r3, #0]
 8002166:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	f362 1347 	bfi	r3, r2, #5, #3
 8002172:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800217c:	b2da      	uxtb	r2, r3
 800217e:	7a3b      	ldrb	r3, [r7, #8]
 8002180:	f362 1345 	bfi	r3, r2, #5, #1
 8002184:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002186:	79bb      	ldrb	r3, [r7, #6]
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	0052      	lsls	r2, r2, #1
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	b29b      	uxth	r3, r3
 8002194:	3350      	adds	r3, #80	; 0x50
 8002196:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002198:	68ba      	ldr	r2, [r7, #8]
 800219a:	89b9      	ldrh	r1, [r7, #12]
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff f8dc 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80021a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	00600400 	.word	0x00600400

080021b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 80021c2:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
 80021c6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80021ca:	b2d9      	uxtb	r1, r3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	7813      	ldrb	r3, [r2, #0]
 80021d0:	f361 0345 	bfi	r3, r1, #1, #5
 80021d4:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80021dc:	b2d9      	uxtb	r1, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	8813      	ldrh	r3, [r2, #0]
 80021e2:	f361 1388 	bfi	r3, r1, #6, #3
 80021e6:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80021e8:	7b3b      	ldrb	r3, [r7, #12]
 80021ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021ee:	b2d9      	uxtb	r1, r3
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	7813      	ldrb	r3, [r2, #0]
 80021f4:	f361 0300 	bfi	r3, r1, #0, #1
 80021f8:	7013      	strb	r3, [r2, #0]

    return 0;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	00600400 	.word	0x00600400

0800220c <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b0a0      	sub	sp, #128	; 0x80
 8002210:	af00      	add	r7, sp, #0
 8002212:	60ba      	str	r2, [r7, #8]
 8002214:	607b      	str	r3, [r7, #4]
 8002216:	4603      	mov	r3, r0
 8002218:	73fb      	strb	r3, [r7, #15]
 800221a:	460b      	mov	r3, r1
 800221c:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 800221e:	2300      	movs	r3, #0
 8002220:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	0052      	lsls	r2, r2, #1
 8002238:	4413      	add	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	b29b      	uxth	r3, r3
 800223e:	3350      	adds	r3, #80	; 0x50
 8002240:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002244:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002248:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800224c:	7bf8      	ldrb	r0, [r7, #15]
 800224e:	2303      	movs	r3, #3
 8002250:	f7ff fb0e 	bl	8001870 <DRV_CANFDSPI_ReadWordArray>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800225a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	e0cd      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800226a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 800226c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 800227a:	f06f 0301 	mvn.w	r3, #1
 800227e:	e0c1      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8002280:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002282:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8002284:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002286:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002288:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800228c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002290:	b29b      	uxth	r3, r3
 8002292:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 8002296:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800229a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800229e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 80022a2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80022a6:	3308      	adds	r3, #8
 80022a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80022ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 80022ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022be:	3304      	adds	r3, #4
 80022c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 80022c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 80022d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022d6:	f023 0303 	bic.w	r3, r3, #3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	3304      	adds	r3, #4
 80022de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 80022e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022e6:	2b4c      	cmp	r3, #76	; 0x4c
 80022e8:	d902      	bls.n	80022f0 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 80022ea:	234c      	movs	r3, #76	; 0x4c
 80022ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80022f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f107 0214 	add.w	r2, r7, #20
 80022fa:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80022fe:	7bf8      	ldrb	r0, [r7, #15]
 8002300:	f7ff f9a4 	bl	800164c <DRV_CANFDSPI_ReadByteArray>
 8002304:	4603      	mov	r3, r0
 8002306:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800230a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 8002312:	f06f 0302 	mvn.w	r3, #2
 8002316:	e075      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 8002318:	7d3b      	ldrb	r3, [r7, #20]
 800231a:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 800231c:	7d7b      	ldrb	r3, [r7, #21]
 800231e:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8002320:	7dbb      	ldrb	r3, [r7, #22]
 8002322:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8002324:	7dfb      	ldrb	r3, [r7, #23]
 8002326:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 800232e:	7e3b      	ldrb	r3, [r7, #24]
 8002330:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 8002332:	7e7b      	ldrb	r3, [r7, #25]
 8002334:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8002336:	7ebb      	ldrb	r3, [r7, #26]
 8002338:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 800233a:	7efb      	ldrb	r3, [r7, #27]
 800233c:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002344:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002348:	f003 0320 	and.w	r3, r3, #32
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d027      	beq.n	80023a2 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 8002352:	7f3b      	ldrb	r3, [r7, #28]
 8002354:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8002356:	7f7b      	ldrb	r3, [r7, #29]
 8002358:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 800235a:	7fbb      	ldrb	r3, [r7, #30]
 800235c:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 800235e:	7ffb      	ldrb	r3, [r7, #31]
 8002360:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002368:	2300      	movs	r3, #0
 800236a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800236e:	e011      	b.n	8002394 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8002370:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002374:	f103 020c 	add.w	r2, r3, #12
 8002378:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800237c:	6879      	ldr	r1, [r7, #4]
 800237e:	440b      	add	r3, r1
 8002380:	3280      	adds	r2, #128	; 0x80
 8002382:	443a      	add	r2, r7
 8002384:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002388:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 800238a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800238e:	3301      	adds	r3, #1
 8002390:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002394:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002398:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800239c:	429a      	cmp	r2, r3
 800239e:	d3e7      	bcc.n	8002370 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 80023a0:	e01e      	b.n	80023e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	2200      	movs	r2, #0
 80023a6:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023ae:	e011      	b.n	80023d4 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 80023b0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023b4:	f103 0208 	add.w	r2, r3, #8
 80023b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	440b      	add	r3, r1
 80023c0:	3280      	adds	r2, #128	; 0x80
 80023c2:	443a      	add	r2, r7
 80023c4:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80023c8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 80023ca:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80023ce:	3301      	adds	r3, #1
 80023d0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80023d4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80023d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3e7      	bcc.n	80023b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80023e0:	7bba      	ldrb	r2, [r7, #14]
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f810 	bl	800240c <DRV_CANFDSPI_ReceiveChannelUpdate>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80023f2:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80023fa:	f06f 0303 	mvn.w	r3, #3
 80023fe:	e001      	b.n	8002404 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 8002400:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8002404:	4618      	mov	r0, r3
 8002406:	3780      	adds	r7, #128	; 0x80
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	460a      	mov	r2, r1
 8002416:	71fb      	strb	r3, [r7, #7]
 8002418:	4613      	mov	r3, r2
 800241a:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	0052      	lsls	r2, r2, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	b29b      	uxth	r3, r3
 8002436:	3351      	adds	r3, #81	; 0x51
 8002438:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 800243a:	7a7b      	ldrb	r3, [r7, #9]
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8002442:	7a7a      	ldrb	r2, [r7, #9]
 8002444:	89f9      	ldrh	r1, [r7, #14]
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe fe97 	bl	800117c <DRV_CANFDSPI_WriteByte>
 800244e:	4603      	mov	r3, r0
 8002450:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 8002452:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b084      	sub	sp, #16
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	460a      	mov	r2, r1
 8002468:	71fb      	strb	r3, [r7, #7]
 800246a:	4613      	mov	r3, r2
 800246c:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002472:	2300      	movs	r3, #0
 8002474:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002476:	231e      	movs	r3, #30
 8002478:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 800247e:	f107 0208 	add.w	r2, r7, #8
 8002482:	89b9      	ldrh	r1, [r7, #12]
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe ffe0 	bl	800144c <DRV_CANFDSPI_ReadHalfWord>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
 800249c:	e01b      	b.n	80024d6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 800249e:	893b      	ldrh	r3, [r7, #8]
 80024a0:	b21a      	sxth	r2, r3
 80024a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024a6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80024aa:	b21b      	sxth	r3, r3
 80024ac:	4313      	orrs	r3, r2
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 80024b4:	893a      	ldrh	r2, [r7, #8]
 80024b6:	89b9      	ldrh	r1, [r7, #12]
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff f84e 	bl	800155c <DRV_CANFDSPI_WriteHalfWord>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80024c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 80024cc:	f06f 0301 	mvn.w	r3, #1
 80024d0:	e001      	b.n	80024d6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	4603      	mov	r3, r0
 80024e6:	603a      	str	r2, [r7, #0]
 80024e8:	71fb      	strb	r3, [r7, #7]
 80024ea:	460b      	mov	r3, r1
 80024ec:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80024fa:	79bb      	ldrb	r3, [r7, #6]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	0052      	lsls	r2, r2, #1
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	b29b      	uxth	r3, r3
 8002508:	3354      	adds	r3, #84	; 0x54
 800250a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800250c:	f107 0208 	add.w	r2, r7, #8
 8002510:	89b9      	ldrh	r1, [r7, #12]
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fdc5 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 800251a:	4603      	mov	r3, r0
 800251c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800251e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
 800252a:	e007      	b.n	800253c <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 800252c:	7a3b      	ldrb	r3, [r7, #8]
 800252e:	f003 0317 	and.w	r3, r3, #23
 8002532:	b2da      	uxtb	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002538:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	603a      	str	r2, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
 8002550:	460b      	mov	r3, r1
 8002552:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 800255c:	79bb      	ldrb	r3, [r7, #6]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8002562:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002566:	e022      	b.n	80025ae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 800256c:	79bb      	ldrb	r3, [r7, #6]
 800256e:	b29b      	uxth	r3, r3
 8002570:	461a      	mov	r2, r3
 8002572:	0052      	lsls	r2, r2, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	b29b      	uxth	r3, r3
 800257a:	3354      	adds	r3, #84	; 0x54
 800257c:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 800257e:	f107 0208 	add.w	r2, r7, #8
 8002582:	89b9      	ldrh	r1, [r7, #12]
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fd8c 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	e007      	b.n	80025ae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80025aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	460b      	mov	r3, r1
 80025c2:	71bb      	strb	r3, [r7, #6]
 80025c4:	4613      	mov	r3, r2
 80025c6:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d102      	bne.n	80025dc <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 80025d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80025da:	e036      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	461a      	mov	r2, r3
 80025e2:	0052      	lsls	r2, r2, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3350      	adds	r3, #80	; 0x50
 80025ec:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 80025f2:	f107 0208 	add.w	r2, r7, #8
 80025f6:	89b9      	ldrh	r1, [r7, #12]
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fd52 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8002600:	4603      	mov	r3, r0
 8002602:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002604:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 800260c:	f04f 33ff 	mov.w	r3, #4294967295
 8002610:	e01b      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8002612:	7a3b      	ldrb	r3, [r7, #8]
 8002614:	b25a      	sxtb	r2, r3
 8002616:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	b25b      	sxtb	r3, r3
 8002620:	4313      	orrs	r3, r2
 8002622:	b25b      	sxtb	r3, r3
 8002624:	b2db      	uxtb	r3, r3
 8002626:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002628:	7a3a      	ldrb	r2, [r7, #8]
 800262a:	89b9      	ldrh	r1, [r7, #12]
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fda4 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002634:	4603      	mov	r3, r0
 8002636:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8002640:	f06f 0301 	mvn.w	r3, #1
 8002644:	e001      	b.n	800264a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 800266a:	2334      	movs	r3, #52	; 0x34
 800266c:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8002672:	f107 0210 	add.w	r2, r7, #16
 8002676:	8ab9      	ldrh	r1, [r7, #20]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fde8 	bl	8001250 <DRV_CANFDSPI_ReadWord>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002684:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
 8002690:	e00d      	b.n	80026ae <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8002692:	7c7a      	ldrb	r2, [r7, #17]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002698:	7c3a      	ldrb	r2, [r7, #16]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800269e:	7cbb      	ldrb	r3, [r7, #18]
 80026a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80026aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 80026c8:	f107 020e 	add.w	r2, r7, #14
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	f640 610c 	movw	r1, #3596	; 0xe0c
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fce6 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 80026d8:	4603      	mov	r3, r0
 80026da:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80026dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	e015      	b.n	8002716 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 80026ea:	7bbb      	ldrb	r3, [r7, #14]
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80026f4:	7bba      	ldrb	r2, [r7, #14]
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f640 610c 	movw	r1, #3596	; 0xe0c
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fd3d 	bl	800117c <DRV_CANFDSPI_WriteByte>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 800270e:	f06f 0301 	mvn.w	r3, #1
 8002712:	e000      	b.n	8002716 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b090      	sub	sp, #64	; 0x40
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	460a      	mov	r2, r1
 8002728:	71fb      	strb	r3, [r7, #7]
 800272a:	4613      	mov	r3, r2
 800272c:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002734:	2300      	movs	r3, #0
 8002736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002738:	e008      	b.n	800274c <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 800273a:	f107 0208 	add.w	r2, r7, #8
 800273e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002740:	4413      	add	r3, r2
 8002742:	79ba      	ldrb	r2, [r7, #6]
 8002744:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002748:	3301      	adds	r3, #1
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800274e:	2b2f      	cmp	r3, #47	; 0x2f
 8002750:	d9f3      	bls.n	800273a <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002756:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002758:	2300      	movs	r3, #0
 800275a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800275c:	e016      	b.n	800278c <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 800275e:	f107 0208 	add.w	r2, r7, #8
 8002762:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002764:	79f8      	ldrb	r0, [r7, #7]
 8002766:	2330      	movs	r3, #48	; 0x30
 8002768:	f7ff f800 	bl	800176c <DRV_CANFDSPI_WriteByteArray>
 800276c:	4603      	mov	r3, r0
 800276e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8002772:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	e00a      	b.n	8002796 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002780:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002782:	3330      	adds	r3, #48	; 0x30
 8002784:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002788:	3301      	adds	r3, #1
 800278a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800278c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278e:	2b29      	cmp	r3, #41	; 0x29
 8002790:	d9e5      	bls.n	800275e <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002792:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8002796:	4618      	mov	r0, r3
 8002798:	3740      	adds	r7, #64	; 0x40
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 800279e:	b590      	push	{r4, r7, lr}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	4604      	mov	r4, r0
 80027a6:	4608      	mov	r0, r1
 80027a8:	4611      	mov	r1, r2
 80027aa:	461a      	mov	r2, r3
 80027ac:	4623      	mov	r3, r4
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	4603      	mov	r3, r0
 80027b2:	71bb      	strb	r3, [r7, #6]
 80027b4:	460b      	mov	r3, r1
 80027b6:	717b      	strb	r3, [r7, #5]
 80027b8:	4613      	mov	r3, r2
 80027ba:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80027c0:	793b      	ldrb	r3, [r7, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d036      	beq.n	8002834 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	dc4c      	bgt.n	8002864 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d018      	beq.n	8002804 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80027d2:	e047      	b.n	8002864 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80027d4:	79ba      	ldrb	r2, [r7, #6]
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	4611      	mov	r1, r2
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f84c 	bl	8002878 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 80027e0:	4603      	mov	r3, r0
 80027e2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80027e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 80027ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027f0:	e03d      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80027f2:	797a      	ldrb	r2, [r7, #5]
 80027f4:	79b9      	ldrb	r1, [r7, #6]
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f8c3 	bl	8002984 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
            break;
 8002802:	e032      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002804:	79ba      	ldrb	r2, [r7, #6]
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	4611      	mov	r1, r2
 800280a:	4618      	mov	r0, r3
 800280c:	f000 faf2 	bl	8002df4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 800281c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002820:	e025      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002822:	797a      	ldrb	r2, [r7, #5]
 8002824:	79b9      	ldrb	r1, [r7, #6]
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fb6f 	bl	8002f0c <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 800282e:	4603      	mov	r3, r0
 8002830:	73fb      	strb	r3, [r7, #15]
            break;
 8002832:	e01a      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002834:	79ba      	ldrb	r2, [r7, #6]
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	4611      	mov	r1, r2
 800283a:	4618      	mov	r0, r3
 800283c:	f000 fd10 	bl	8003260 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	e00d      	b.n	800286e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002852:	797a      	ldrb	r2, [r7, #5]
 8002854:	79b9      	ldrb	r1, [r7, #6]
 8002856:	79fb      	ldrb	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f000 fd8d 	bl	8003378 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
            break;
 8002862:	e002      	b.n	800286a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002864:	23ff      	movs	r3, #255	; 0xff
 8002866:	73fb      	strb	r3, [r7, #15]
            break;
 8002868:	bf00      	nop
    }

    return spiTransferError;
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bd90      	pop	{r4, r7, pc}
	...

08002878 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	4603      	mov	r3, r0
 8002880:	460a      	mov	r2, r1
 8002882:	71fb      	strb	r3, [r7, #7]
 8002884:	4613      	mov	r3, r2
 8002886:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800288c:	4b3c      	ldr	r3, [pc, #240]	; (8002980 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 800288e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	2b11      	cmp	r3, #17
 8002894:	d862      	bhi.n	800295c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002896:	a201      	add	r2, pc, #4	; (adr r2, 800289c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289c:	080028e5 	.word	0x080028e5
 80028a0:	080028e5 	.word	0x080028e5
 80028a4:	080028e5 	.word	0x080028e5
 80028a8:	080028e5 	.word	0x080028e5
 80028ac:	080028e5 	.word	0x080028e5
 80028b0:	080028e5 	.word	0x080028e5
 80028b4:	080028e5 	.word	0x080028e5
 80028b8:	080028e5 	.word	0x080028e5
 80028bc:	08002903 	.word	0x08002903
 80028c0:	08002903 	.word	0x08002903
 80028c4:	08002903 	.word	0x08002903
 80028c8:	08002903 	.word	0x08002903
 80028cc:	08002903 	.word	0x08002903
 80028d0:	08002903 	.word	0x08002903
 80028d4:	08002903 	.word	0x08002903
 80028d8:	08002921 	.word	0x08002921
 80028dc:	08002921 	.word	0x08002921
 80028e0:	0800293f 	.word	0x0800293f
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80028e8:	233e      	movs	r3, #62	; 0x3e
 80028ea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80028ec:	7a7b      	ldrb	r3, [r7, #9]
 80028ee:	220f      	movs	r2, #15
 80028f0:	f362 0306 	bfi	r3, r2, #0, #7
 80028f4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80028f6:	7a3b      	ldrb	r3, [r7, #8]
 80028f8:	220f      	movs	r2, #15
 80028fa:	f362 0306 	bfi	r3, r2, #0, #7
 80028fe:	723b      	strb	r3, [r7, #8]
            break;
 8002900:	e02f      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002906:	237e      	movs	r3, #126	; 0x7e
 8002908:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800290a:	7a7b      	ldrb	r3, [r7, #9]
 800290c:	221f      	movs	r2, #31
 800290e:	f362 0306 	bfi	r3, r2, #0, #7
 8002912:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002914:	7a3b      	ldrb	r3, [r7, #8]
 8002916:	221f      	movs	r2, #31
 8002918:	f362 0306 	bfi	r3, r2, #0, #7
 800291c:	723b      	strb	r3, [r7, #8]
            break;
 800291e:	e020      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002924:	231e      	movs	r3, #30
 8002926:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002928:	7a7b      	ldrb	r3, [r7, #9]
 800292a:	2207      	movs	r2, #7
 800292c:	f362 0306 	bfi	r3, r2, #0, #7
 8002930:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002932:	7a3b      	ldrb	r3, [r7, #8]
 8002934:	2207      	movs	r2, #7
 8002936:	f362 0306 	bfi	r3, r2, #0, #7
 800293a:	723b      	strb	r3, [r7, #8]
            break;
 800293c:	e011      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002942:	23fe      	movs	r3, #254	; 0xfe
 8002944:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002946:	7a7b      	ldrb	r3, [r7, #9]
 8002948:	223f      	movs	r2, #63	; 0x3f
 800294a:	f362 0306 	bfi	r3, r2, #0, #7
 800294e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002950:	7a3b      	ldrb	r3, [r7, #8]
 8002952:	223f      	movs	r2, #63	; 0x3f
 8002954:	f362 0306 	bfi	r3, r2, #0, #7
 8002958:	723b      	strb	r3, [r7, #8]
            break;
 800295a:	e002      	b.n	8002962 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 800295c:	f04f 33ff 	mov.w	r3, #4294967295
 8002960:	e009      	b.n	8002976 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	79fb      	ldrb	r3, [r7, #7]
 8002966:	2104      	movs	r1, #4
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fcf7 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800296e:	4603      	mov	r3, r0
 8002970:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002972:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	003e0f0f 	.word	0x003e0f0f

08002984 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
 800298e:	460b      	mov	r3, r1
 8002990:	71bb      	strb	r3, [r7, #6]
 8002992:	4613      	mov	r3, r2
 8002994:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800299a:	4be2      	ldr	r3, [pc, #904]	; (8002d24 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 800299c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800299e:	2300      	movs	r3, #0
 80029a0:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80029a2:	7abb      	ldrb	r3, [r7, #10]
 80029a4:	2202      	movs	r2, #2
 80029a6:	f362 0301 	bfi	r3, r2, #0, #2
 80029aa:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80029b0:	79bb      	ldrb	r3, [r7, #6]
 80029b2:	2b11      	cmp	r3, #17
 80029b4:	f200 81f6 	bhi.w	8002da4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	08002a09 	.word	0x08002a09
 80029c4:	08002a47 	.word	0x08002a47
 80029c8:	08002a85 	.word	0x08002a85
 80029cc:	08002ac3 	.word	0x08002ac3
 80029d0:	08002b01 	.word	0x08002b01
 80029d4:	08002b3f 	.word	0x08002b3f
 80029d8:	08002b79 	.word	0x08002b79
 80029dc:	08002bad 	.word	0x08002bad
 80029e0:	08002bdf 	.word	0x08002bdf
 80029e4:	08002c25 	.word	0x08002c25
 80029e8:	08002c6b 	.word	0x08002c6b
 80029ec:	08002ca9 	.word	0x08002ca9
 80029f0:	08002ce7 	.word	0x08002ce7
 80029f4:	08002d29 	.word	0x08002d29
 80029f8:	08002d67 	.word	0x08002d67
 80029fc:	08002ac3 	.word	0x08002ac3
 8002a00:	08002b79 	.word	0x08002b79
 8002a04:	08002bdf 	.word	0x08002bdf
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	221e      	movs	r2, #30
 8002a10:	f362 0304 	bfi	r3, r2, #0, #5
 8002a14:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002a16:	7b7b      	ldrb	r3, [r7, #13]
 8002a18:	2207      	movs	r2, #7
 8002a1a:	f362 0303 	bfi	r3, r2, #0, #4
 8002a1e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002a20:	7b3b      	ldrb	r3, [r7, #12]
 8002a22:	2207      	movs	r2, #7
 8002a24:	f362 0303 	bfi	r3, r2, #0, #4
 8002a28:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002a2a:	7a7b      	ldrb	r3, [r7, #9]
 8002a2c:	221f      	movs	r2, #31
 8002a2e:	f362 0306 	bfi	r3, r2, #0, #7
 8002a32:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	7a3b      	ldrb	r3, [r7, #8]
 8002a3e:	f362 0305 	bfi	r3, r2, #0, #6
 8002a42:	723b      	strb	r3, [r7, #8]
            break;
 8002a44:	e1b1      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002a4a:	7bbb      	ldrb	r3, [r7, #14]
 8002a4c:	220e      	movs	r2, #14
 8002a4e:	f362 0304 	bfi	r3, r2, #0, #5
 8002a52:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002a54:	7b7b      	ldrb	r3, [r7, #13]
 8002a56:	2203      	movs	r2, #3
 8002a58:	f362 0303 	bfi	r3, r2, #0, #4
 8002a5c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002a5e:	7b3b      	ldrb	r3, [r7, #12]
 8002a60:	2203      	movs	r2, #3
 8002a62:	f362 0303 	bfi	r3, r2, #0, #4
 8002a66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002a68:	7a7b      	ldrb	r3, [r7, #9]
 8002a6a:	220f      	movs	r2, #15
 8002a6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002a70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	7a3b      	ldrb	r3, [r7, #8]
 8002a7c:	f362 0305 	bfi	r3, r2, #0, #6
 8002a80:	723b      	strb	r3, [r7, #8]
            break;
 8002a82:	e192      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002a88:	7bbb      	ldrb	r3, [r7, #14]
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	f362 0304 	bfi	r3, r2, #0, #5
 8002a90:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002a92:	7b7b      	ldrb	r3, [r7, #13]
 8002a94:	2202      	movs	r2, #2
 8002a96:	f362 0303 	bfi	r3, r2, #0, #4
 8002a9a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002a9c:	7b3b      	ldrb	r3, [r7, #12]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f362 0303 	bfi	r3, r2, #0, #4
 8002aa4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002aa6:	7a7b      	ldrb	r3, [r7, #9]
 8002aa8:	2209      	movs	r2, #9
 8002aaa:	f362 0306 	bfi	r3, r2, #0, #7
 8002aae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	7a3b      	ldrb	r3, [r7, #8]
 8002aba:	f362 0305 	bfi	r3, r2, #0, #6
 8002abe:	723b      	strb	r3, [r7, #8]
            break;
 8002ac0:	e173      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002ac6:	7bbb      	ldrb	r3, [r7, #14]
 8002ac8:	2206      	movs	r2, #6
 8002aca:	f362 0304 	bfi	r3, r2, #0, #5
 8002ace:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002ad0:	7b7b      	ldrb	r3, [r7, #13]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f362 0303 	bfi	r3, r2, #0, #4
 8002ad8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002ada:	7b3b      	ldrb	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f362 0303 	bfi	r3, r2, #0, #4
 8002ae2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ae4:	7a7b      	ldrb	r3, [r7, #9]
 8002ae6:	2207      	movs	r2, #7
 8002ae8:	f362 0306 	bfi	r3, r2, #0, #7
 8002aec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	7a3b      	ldrb	r3, [r7, #8]
 8002af8:	f362 0305 	bfi	r3, r2, #0, #6
 8002afc:	723b      	strb	r3, [r7, #8]
            break;
 8002afe:	e154      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002b04:	7bbb      	ldrb	r3, [r7, #14]
 8002b06:	2204      	movs	r2, #4
 8002b08:	f362 0304 	bfi	r3, r2, #0, #5
 8002b0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002b0e:	7b7b      	ldrb	r3, [r7, #13]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f362 0303 	bfi	r3, r2, #0, #4
 8002b16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002b18:	7b3b      	ldrb	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f362 0303 	bfi	r3, r2, #0, #4
 8002b20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002b22:	7a7b      	ldrb	r3, [r7, #9]
 8002b24:	2205      	movs	r2, #5
 8002b26:	f362 0306 	bfi	r3, r2, #0, #7
 8002b2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	7a3b      	ldrb	r3, [r7, #8]
 8002b36:	f362 0305 	bfi	r3, r2, #0, #6
 8002b3a:	723b      	strb	r3, [r7, #8]
            break;
 8002b3c:	e135      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002b42:	7bbb      	ldrb	r3, [r7, #14]
 8002b44:	2203      	movs	r2, #3
 8002b46:	f362 0304 	bfi	r3, r2, #0, #5
 8002b4a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b4c:	7b7b      	ldrb	r3, [r7, #13]
 8002b4e:	f36f 0303 	bfc	r3, #0, #4
 8002b52:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b54:	7b3b      	ldrb	r3, [r7, #12]
 8002b56:	f36f 0303 	bfc	r3, #0, #4
 8002b5a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	2204      	movs	r2, #4
 8002b60:	f362 0306 	bfi	r3, r2, #0, #7
 8002b64:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	7a3b      	ldrb	r3, [r7, #8]
 8002b70:	f362 0305 	bfi	r3, r2, #0, #6
 8002b74:	723b      	strb	r3, [r7, #8]
            break;
 8002b76:	e118      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002b7c:	7bbb      	ldrb	r3, [r7, #14]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f362 0304 	bfi	r3, r2, #0, #5
 8002b84:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b86:	7b7b      	ldrb	r3, [r7, #13]
 8002b88:	f36f 0303 	bfc	r3, #0, #4
 8002b8c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b8e:	7b3b      	ldrb	r3, [r7, #12]
 8002b90:	f36f 0303 	bfc	r3, #0, #4
 8002b94:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002b96:	7a7b      	ldrb	r3, [r7, #9]
 8002b98:	2203      	movs	r2, #3
 8002b9a:	f362 0306 	bfi	r3, r2, #0, #7
 8002b9e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002ba0:	7a3b      	ldrb	r3, [r7, #8]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f362 0305 	bfi	r3, r2, #0, #6
 8002ba8:	723b      	strb	r3, [r7, #8]
            break;
 8002baa:	e0fe      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002bb0:	7bbb      	ldrb	r3, [r7, #14]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f362 0304 	bfi	r3, r2, #0, #5
 8002bb8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002bba:	7b7b      	ldrb	r3, [r7, #13]
 8002bbc:	f36f 0303 	bfc	r3, #0, #4
 8002bc0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002bc2:	7b3b      	ldrb	r3, [r7, #12]
 8002bc4:	f36f 0303 	bfc	r3, #0, #4
 8002bc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002bca:	7a7b      	ldrb	r3, [r7, #9]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002bd4:	7a3b      	ldrb	r3, [r7, #8]
 8002bd6:	f36f 0305 	bfc	r3, #0, #6
 8002bda:	723b      	strb	r3, [r7, #8]
            break;
 8002bdc:	e0e5      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	221e      	movs	r2, #30
 8002be6:	f362 0304 	bfi	r3, r2, #0, #5
 8002bea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002bec:	7b7b      	ldrb	r3, [r7, #13]
 8002bee:	2207      	movs	r2, #7
 8002bf0:	f362 0303 	bfi	r3, r2, #0, #4
 8002bf4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002bf6:	7b3b      	ldrb	r3, [r7, #12]
 8002bf8:	2207      	movs	r2, #7
 8002bfa:	f362 0303 	bfi	r3, r2, #0, #4
 8002bfe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002c00:	7a7b      	ldrb	r3, [r7, #9]
 8002c02:	221f      	movs	r2, #31
 8002c04:	f362 0306 	bfi	r3, r2, #0, #7
 8002c08:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	7a3b      	ldrb	r3, [r7, #8]
 8002c14:	f362 0305 	bfi	r3, r2, #0, #6
 8002c18:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c1a:	7abb      	ldrb	r3, [r7, #10]
 8002c1c:	f36f 0301 	bfc	r3, #0, #2
 8002c20:	72bb      	strb	r3, [r7, #10]
            break;
 8002c22:	e0c2      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	2211      	movs	r2, #17
 8002c2c:	f362 0304 	bfi	r3, r2, #0, #5
 8002c30:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002c32:	7b7b      	ldrb	r3, [r7, #13]
 8002c34:	2204      	movs	r2, #4
 8002c36:	f362 0303 	bfi	r3, r2, #0, #4
 8002c3a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002c3c:	7b3b      	ldrb	r3, [r7, #12]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	f362 0303 	bfi	r3, r2, #0, #4
 8002c44:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002c46:	7a7b      	ldrb	r3, [r7, #9]
 8002c48:	2212      	movs	r2, #18
 8002c4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002c4e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c56:	b2da      	uxtb	r2, r3
 8002c58:	7a3b      	ldrb	r3, [r7, #8]
 8002c5a:	f362 0305 	bfi	r3, r2, #0, #6
 8002c5e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002c60:	7abb      	ldrb	r3, [r7, #10]
 8002c62:	f36f 0301 	bfc	r3, #0, #2
 8002c66:	72bb      	strb	r3, [r7, #10]
            break;
 8002c68:	e09f      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002c6e:	7bbb      	ldrb	r3, [r7, #14]
 8002c70:	221e      	movs	r2, #30
 8002c72:	f362 0304 	bfi	r3, r2, #0, #5
 8002c76:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002c78:	7b7b      	ldrb	r3, [r7, #13]
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002c80:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002c82:	7b3b      	ldrb	r3, [r7, #12]
 8002c84:	2207      	movs	r2, #7
 8002c86:	f362 0303 	bfi	r3, r2, #0, #4
 8002c8a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002c8c:	7a7b      	ldrb	r3, [r7, #9]
 8002c8e:	221f      	movs	r2, #31
 8002c90:	f362 0306 	bfi	r3, r2, #0, #7
 8002c94:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	7a3b      	ldrb	r3, [r7, #8]
 8002ca0:	f362 0305 	bfi	r3, r2, #0, #6
 8002ca4:	723b      	strb	r3, [r7, #8]
            break;
 8002ca6:	e080      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002cac:	7bbb      	ldrb	r3, [r7, #14]
 8002cae:	2212      	movs	r2, #18
 8002cb0:	f362 0304 	bfi	r3, r2, #0, #5
 8002cb4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002cb6:	7b7b      	ldrb	r3, [r7, #13]
 8002cb8:	2205      	movs	r2, #5
 8002cba:	f362 0303 	bfi	r3, r2, #0, #4
 8002cbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002cc0:	7b3b      	ldrb	r3, [r7, #12]
 8002cc2:	2205      	movs	r2, #5
 8002cc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002cc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002cca:	7a7b      	ldrb	r3, [r7, #9]
 8002ccc:	2213      	movs	r2, #19
 8002cce:	f362 0306 	bfi	r3, r2, #0, #7
 8002cd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	7a3b      	ldrb	r3, [r7, #8]
 8002cde:	f362 0305 	bfi	r3, r2, #0, #6
 8002ce2:	723b      	strb	r3, [r7, #8]
            break;
 8002ce4:	e061      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	220e      	movs	r2, #14
 8002cee:	f362 0304 	bfi	r3, r2, #0, #5
 8002cf2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002cf4:	7b7b      	ldrb	r3, [r7, #13]
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	f362 0303 	bfi	r3, r2, #0, #4
 8002cfc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002cfe:	7b3b      	ldrb	r3, [r7, #12]
 8002d00:	2203      	movs	r2, #3
 8002d02:	f362 0303 	bfi	r3, r2, #0, #4
 8002d06:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d08:	7a7b      	ldrb	r3, [r7, #9]
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d10:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	7a3b      	ldrb	r3, [r7, #8]
 8002d1c:	f362 0305 	bfi	r3, r2, #0, #6
 8002d20:	723b      	strb	r3, [r7, #8]
            break;
 8002d22:	e042      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002d24:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	2208      	movs	r2, #8
 8002d30:	f362 0304 	bfi	r3, r2, #0, #5
 8002d34:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d36:	7b7b      	ldrb	r3, [r7, #13]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f362 0303 	bfi	r3, r2, #0, #4
 8002d3e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d40:	7b3b      	ldrb	r3, [r7, #12]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f362 0303 	bfi	r3, r2, #0, #4
 8002d48:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d4a:	7a7b      	ldrb	r3, [r7, #9]
 8002d4c:	2209      	movs	r2, #9
 8002d4e:	f362 0306 	bfi	r3, r2, #0, #7
 8002d52:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	7a3b      	ldrb	r3, [r7, #8]
 8002d5e:	f362 0305 	bfi	r3, r2, #0, #6
 8002d62:	723b      	strb	r3, [r7, #8]
            break;
 8002d64:	e021      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002d6a:	7bbb      	ldrb	r3, [r7, #14]
 8002d6c:	2206      	movs	r2, #6
 8002d6e:	f362 0304 	bfi	r3, r2, #0, #5
 8002d72:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002d74:	7b7b      	ldrb	r3, [r7, #13]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f362 0303 	bfi	r3, r2, #0, #4
 8002d7c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002d7e:	7b3b      	ldrb	r3, [r7, #12]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f362 0303 	bfi	r3, r2, #0, #4
 8002d86:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002d88:	7a7b      	ldrb	r3, [r7, #9]
 8002d8a:	2207      	movs	r2, #7
 8002d8c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d90:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	7a3b      	ldrb	r3, [r7, #8]
 8002d9c:	f362 0305 	bfi	r3, r2, #0, #6
 8002da0:	723b      	strb	r3, [r7, #8]
            break;
 8002da2:	e002      	b.n	8002daa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
 8002da8:	e01f      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	2108      	movs	r1, #8
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fad3 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002db6:	4603      	mov	r3, r0
 8002db8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002dba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d002      	beq.n	8002dc8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8002dc2:	f06f 0301 	mvn.w	r3, #1
 8002dc6:	e010      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	210c      	movs	r1, #12
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fac4 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002dd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8002de0:	f06f 0302 	mvn.w	r3, #2
 8002de4:	e001      	b.n	8002dea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8002de6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop

08002df4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	460a      	mov	r2, r1
 8002dfe:	71fb      	strb	r3, [r7, #7]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 8002e0a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002e0c:	79bb      	ldrb	r3, [r7, #6]
 8002e0e:	2b11      	cmp	r3, #17
 8002e10:	d862      	bhi.n	8002ed8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8002e12:	a201      	add	r2, pc, #4	; (adr r2, 8002e18 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e61 	.word	0x08002e61
 8002e1c:	08002e61 	.word	0x08002e61
 8002e20:	08002ed9 	.word	0x08002ed9
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e61 	.word	0x08002e61
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e7f 	.word	0x08002e7f
 8002e3c:	08002e7f 	.word	0x08002e7f
 8002e40:	08002e7f 	.word	0x08002e7f
 8002e44:	08002e7f 	.word	0x08002e7f
 8002e48:	08002e7f 	.word	0x08002e7f
 8002e4c:	08002e7f 	.word	0x08002e7f
 8002e50:	08002e7f 	.word	0x08002e7f
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e9d 	.word	0x08002e9d
 8002e5c:	08002ebb 	.word	0x08002ebb
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002e64:	231e      	movs	r3, #30
 8002e66:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002e68:	7a7b      	ldrb	r3, [r7, #9]
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e70:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002e72:	7a3b      	ldrb	r3, [r7, #8]
 8002e74:	2207      	movs	r2, #7
 8002e76:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7a:	723b      	strb	r3, [r7, #8]
            break;
 8002e7c:	e02f      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002e82:	233e      	movs	r3, #62	; 0x3e
 8002e84:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002e86:	7a7b      	ldrb	r3, [r7, #9]
 8002e88:	220f      	movs	r2, #15
 8002e8a:	f362 0306 	bfi	r3, r2, #0, #7
 8002e8e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002e90:	7a3b      	ldrb	r3, [r7, #8]
 8002e92:	220f      	movs	r2, #15
 8002e94:	f362 0306 	bfi	r3, r2, #0, #7
 8002e98:	723b      	strb	r3, [r7, #8]
            break;
 8002e9a:	e020      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8002ea0:	230e      	movs	r3, #14
 8002ea2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002ea4:	7a7b      	ldrb	r3, [r7, #9]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	f362 0306 	bfi	r3, r2, #0, #7
 8002eac:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8002eae:	7a3b      	ldrb	r3, [r7, #8]
 8002eb0:	2203      	movs	r2, #3
 8002eb2:	f362 0306 	bfi	r3, r2, #0, #7
 8002eb6:	723b      	strb	r3, [r7, #8]
            break;
 8002eb8:	e011      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002ebe:	237e      	movs	r3, #126	; 0x7e
 8002ec0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002ec2:	7a7b      	ldrb	r3, [r7, #9]
 8002ec4:	221f      	movs	r2, #31
 8002ec6:	f362 0306 	bfi	r3, r2, #0, #7
 8002eca:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002ecc:	7a3b      	ldrb	r3, [r7, #8]
 8002ece:	221f      	movs	r2, #31
 8002ed0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ed4:	723b      	strb	r3, [r7, #8]
            break;
 8002ed6:	e002      	b.n	8002ede <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8002edc:	e010      	b.n	8002f00 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2104      	movs	r1, #4
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7fe fa39 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d002      	beq.n	8002efc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8002ef6:	f06f 0301 	mvn.w	r3, #1
 8002efa:	e001      	b.n	8002f00 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8002efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	003e0f0f 	.word	0x003e0f0f

08002f0c <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
 8002f16:	460b      	mov	r3, r1
 8002f18:	71bb      	strb	r3, [r7, #6]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002f22:	4bce      	ldr	r3, [pc, #824]	; (800325c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8002f24:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002f2a:	7abb      	ldrb	r3, [r7, #10]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f362 0301 	bfi	r3, r2, #0, #2
 8002f32:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002f38:	79bb      	ldrb	r3, [r7, #6]
 8002f3a:	2b11      	cmp	r3, #17
 8002f3c:	f200 8166 	bhi.w	800320c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8002f40:	a201      	add	r2, pc, #4	; (adr r2, 8002f48 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8002f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f46:	bf00      	nop
 8002f48:	08002f91 	.word	0x08002f91
 8002f4c:	08002fcf 	.word	0x08002fcf
 8002f50:	0800320d 	.word	0x0800320d
 8002f54:	0800300d 	.word	0x0800300d
 8002f58:	08003047 	.word	0x08003047
 8002f5c:	08003081 	.word	0x08003081
 8002f60:	08003081 	.word	0x08003081
 8002f64:	08003081 	.word	0x08003081
 8002f68:	08003087 	.word	0x08003087
 8002f6c:	080030cd 	.word	0x080030cd
 8002f70:	08003113 	.word	0x08003113
 8002f74:	08003151 	.word	0x08003151
 8002f78:	0800318f 	.word	0x0800318f
 8002f7c:	080031cd 	.word	0x080031cd
 8002f80:	080031d3 	.word	0x080031d3
 8002f84:	0800300d 	.word	0x0800300d
 8002f88:	08003081 	.word	0x08003081
 8002f8c:	08003087 	.word	0x08003087
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f94:	7bbb      	ldrb	r3, [r7, #14]
 8002f96:	220e      	movs	r2, #14
 8002f98:	f362 0304 	bfi	r3, r2, #0, #5
 8002f9c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f9e:	7b7b      	ldrb	r3, [r7, #13]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fa8:	7b3b      	ldrb	r3, [r7, #12]
 8002faa:	2203      	movs	r2, #3
 8002fac:	f362 0303 	bfi	r3, r2, #0, #4
 8002fb0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fb2:	7a7b      	ldrb	r3, [r7, #9]
 8002fb4:	220f      	movs	r2, #15
 8002fb6:	f362 0306 	bfi	r3, r2, #0, #7
 8002fba:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	7a3b      	ldrb	r3, [r7, #8]
 8002fc6:	f362 0305 	bfi	r3, r2, #0, #6
 8002fca:	723b      	strb	r3, [r7, #8]
            break;
 8002fcc:	e121      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002fd2:	7bbb      	ldrb	r3, [r7, #14]
 8002fd4:	2206      	movs	r2, #6
 8002fd6:	f362 0304 	bfi	r3, r2, #0, #5
 8002fda:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002fdc:	7b7b      	ldrb	r3, [r7, #13]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002fe6:	7b3b      	ldrb	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f362 0303 	bfi	r3, r2, #0, #4
 8002fee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ff0:	7a7b      	ldrb	r3, [r7, #9]
 8002ff2:	2207      	movs	r2, #7
 8002ff4:	f362 0306 	bfi	r3, r2, #0, #7
 8002ff8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003000:	b2da      	uxtb	r2, r3
 8003002:	7a3b      	ldrb	r3, [r7, #8]
 8003004:	f362 0305 	bfi	r3, r2, #0, #6
 8003008:	723b      	strb	r3, [r7, #8]
            break;
 800300a:	e102      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	2202      	movs	r2, #2
 8003014:	f362 0304 	bfi	r3, r2, #0, #5
 8003018:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800301a:	7b7b      	ldrb	r3, [r7, #13]
 800301c:	f36f 0303 	bfc	r3, #0, #4
 8003020:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003022:	7b3b      	ldrb	r3, [r7, #12]
 8003024:	f36f 0303 	bfc	r3, #0, #4
 8003028:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800302a:	7a7b      	ldrb	r3, [r7, #9]
 800302c:	2203      	movs	r2, #3
 800302e:	f362 0306 	bfi	r3, r2, #0, #7
 8003032:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303a:	b2da      	uxtb	r2, r3
 800303c:	7a3b      	ldrb	r3, [r7, #8]
 800303e:	f362 0305 	bfi	r3, r2, #0, #6
 8003042:	723b      	strb	r3, [r7, #8]
            break;
 8003044:	e0e5      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800304a:	7bbb      	ldrb	r3, [r7, #14]
 800304c:	2201      	movs	r2, #1
 800304e:	f362 0304 	bfi	r3, r2, #0, #5
 8003052:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003054:	7b7b      	ldrb	r3, [r7, #13]
 8003056:	f36f 0303 	bfc	r3, #0, #4
 800305a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800305c:	7b3b      	ldrb	r3, [r7, #12]
 800305e:	f36f 0303 	bfc	r3, #0, #4
 8003062:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003064:	7a7b      	ldrb	r3, [r7, #9]
 8003066:	2202      	movs	r2, #2
 8003068:	f362 0306 	bfi	r3, r2, #0, #7
 800306c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003074:	b2da      	uxtb	r2, r3
 8003076:	7a3b      	ldrb	r3, [r7, #8]
 8003078:	f362 0305 	bfi	r3, r2, #0, #6
 800307c:	723b      	strb	r3, [r7, #8]
            break;
 800307e:	e0c8      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003080:	f04f 33ff 	mov.w	r3, #4294967295
 8003084:	e0e5      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	221e      	movs	r2, #30
 800308e:	f362 0304 	bfi	r3, r2, #0, #5
 8003092:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003094:	7b7b      	ldrb	r3, [r7, #13]
 8003096:	2207      	movs	r2, #7
 8003098:	f362 0303 	bfi	r3, r2, #0, #4
 800309c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800309e:	7b3b      	ldrb	r3, [r7, #12]
 80030a0:	2207      	movs	r2, #7
 80030a2:	f362 0303 	bfi	r3, r2, #0, #4
 80030a6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80030a8:	7a7b      	ldrb	r3, [r7, #9]
 80030aa:	221f      	movs	r2, #31
 80030ac:	f362 0306 	bfi	r3, r2, #0, #7
 80030b0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	7a3b      	ldrb	r3, [r7, #8]
 80030bc:	f362 0305 	bfi	r3, r2, #0, #6
 80030c0:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80030c2:	7abb      	ldrb	r3, [r7, #10]
 80030c4:	f36f 0301 	bfc	r3, #0, #2
 80030c8:	72bb      	strb	r3, [r7, #10]
            break;
 80030ca:	e0a2      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80030d0:	7bbb      	ldrb	r3, [r7, #14]
 80030d2:	2211      	movs	r2, #17
 80030d4:	f362 0304 	bfi	r3, r2, #0, #5
 80030d8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80030da:	7b7b      	ldrb	r3, [r7, #13]
 80030dc:	2204      	movs	r2, #4
 80030de:	f362 0303 	bfi	r3, r2, #0, #4
 80030e2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80030e4:	7b3b      	ldrb	r3, [r7, #12]
 80030e6:	2204      	movs	r2, #4
 80030e8:	f362 0303 	bfi	r3, r2, #0, #4
 80030ec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80030ee:	7a7b      	ldrb	r3, [r7, #9]
 80030f0:	2212      	movs	r2, #18
 80030f2:	f362 0306 	bfi	r3, r2, #0, #7
 80030f6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	7a3b      	ldrb	r3, [r7, #8]
 8003102:	f362 0305 	bfi	r3, r2, #0, #6
 8003106:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003108:	7abb      	ldrb	r3, [r7, #10]
 800310a:	f36f 0301 	bfc	r3, #0, #2
 800310e:	72bb      	strb	r3, [r7, #10]
            break;
 8003110:	e07f      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003112:	2300      	movs	r3, #0
 8003114:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003116:	7bbb      	ldrb	r3, [r7, #14]
 8003118:	220e      	movs	r2, #14
 800311a:	f362 0304 	bfi	r3, r2, #0, #5
 800311e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003120:	7b7b      	ldrb	r3, [r7, #13]
 8003122:	2203      	movs	r2, #3
 8003124:	f362 0303 	bfi	r3, r2, #0, #4
 8003128:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800312a:	7b3b      	ldrb	r3, [r7, #12]
 800312c:	2203      	movs	r2, #3
 800312e:	f362 0303 	bfi	r3, r2, #0, #4
 8003132:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003134:	7a7b      	ldrb	r3, [r7, #9]
 8003136:	220f      	movs	r2, #15
 8003138:	f362 0306 	bfi	r3, r2, #0, #7
 800313c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003144:	b2da      	uxtb	r2, r3
 8003146:	7a3b      	ldrb	r3, [r7, #8]
 8003148:	f362 0305 	bfi	r3, r2, #0, #6
 800314c:	723b      	strb	r3, [r7, #8]
            break;
 800314e:	e060      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003154:	7bbb      	ldrb	r3, [r7, #14]
 8003156:	2208      	movs	r2, #8
 8003158:	f362 0304 	bfi	r3, r2, #0, #5
 800315c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800315e:	7b7b      	ldrb	r3, [r7, #13]
 8003160:	2202      	movs	r2, #2
 8003162:	f362 0303 	bfi	r3, r2, #0, #4
 8003166:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003168:	7b3b      	ldrb	r3, [r7, #12]
 800316a:	2202      	movs	r2, #2
 800316c:	f362 0303 	bfi	r3, r2, #0, #4
 8003170:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003172:	7a7b      	ldrb	r3, [r7, #9]
 8003174:	2209      	movs	r2, #9
 8003176:	f362 0306 	bfi	r3, r2, #0, #7
 800317a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003182:	b2da      	uxtb	r2, r3
 8003184:	7a3b      	ldrb	r3, [r7, #8]
 8003186:	f362 0305 	bfi	r3, r2, #0, #6
 800318a:	723b      	strb	r3, [r7, #8]
            break;
 800318c:	e041      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003192:	7bbb      	ldrb	r3, [r7, #14]
 8003194:	2206      	movs	r2, #6
 8003196:	f362 0304 	bfi	r3, r2, #0, #5
 800319a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800319c:	7b7b      	ldrb	r3, [r7, #13]
 800319e:	2201      	movs	r2, #1
 80031a0:	f362 0303 	bfi	r3, r2, #0, #4
 80031a4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80031a6:	7b3b      	ldrb	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f362 0303 	bfi	r3, r2, #0, #4
 80031ae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80031b0:	7a7b      	ldrb	r3, [r7, #9]
 80031b2:	2207      	movs	r2, #7
 80031b4:	f362 0306 	bfi	r3, r2, #0, #7
 80031b8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	7a3b      	ldrb	r3, [r7, #8]
 80031c4:	f362 0305 	bfi	r3, r2, #0, #6
 80031c8:	723b      	strb	r3, [r7, #8]
            break;
 80031ca:	e022      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
 80031d0:	e03f      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80031d6:	7bbb      	ldrb	r3, [r7, #14]
 80031d8:	2202      	movs	r2, #2
 80031da:	f362 0304 	bfi	r3, r2, #0, #5
 80031de:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80031e0:	7b7b      	ldrb	r3, [r7, #13]
 80031e2:	f36f 0303 	bfc	r3, #0, #4
 80031e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80031e8:	7b3b      	ldrb	r3, [r7, #12]
 80031ea:	f36f 0303 	bfc	r3, #0, #4
 80031ee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80031f0:	7a7b      	ldrb	r3, [r7, #9]
 80031f2:	2203      	movs	r2, #3
 80031f4:	f362 0306 	bfi	r3, r2, #0, #7
 80031f8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003200:	b2da      	uxtb	r2, r3
 8003202:	7a3b      	ldrb	r3, [r7, #8]
 8003204:	f362 0305 	bfi	r3, r2, #0, #6
 8003208:	723b      	strb	r3, [r7, #8]
            break;
 800320a:	e002      	b.n	8003212 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295
 8003210:	e01f      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	2108      	movs	r1, #8
 8003218:	4618      	mov	r0, r3
 800321a:	f7fe f89f 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800321e:	4603      	mov	r3, r0
 8003220:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003222:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 800322a:	f06f 0301 	mvn.w	r3, #1
 800322e:	e010      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	210c      	movs	r1, #12
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe f890 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800323c:	4603      	mov	r3, r0
 800323e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003248:	f06f 0302 	mvn.w	r3, #2
 800324c:	e001      	b.n	8003252 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800324e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	000e0303 	.word	0x000e0303

08003260 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	460a      	mov	r2, r1
 800326a:	71fb      	strb	r3, [r7, #7]
 800326c:	4613      	mov	r3, r2
 800326e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003274:	4b3f      	ldr	r3, [pc, #252]	; (8003374 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003276:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003278:	79bb      	ldrb	r3, [r7, #6]
 800327a:	2b11      	cmp	r3, #17
 800327c:	d862      	bhi.n	8003344 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800327e:	a201      	add	r2, pc, #4	; (adr r2, 8003284 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003284:	080032cd 	.word	0x080032cd
 8003288:	080032cd 	.word	0x080032cd
 800328c:	08003345 	.word	0x08003345
 8003290:	080032cd 	.word	0x080032cd
 8003294:	080032cd 	.word	0x080032cd
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032cd 	.word	0x080032cd
 80032a0:	080032cd 	.word	0x080032cd
 80032a4:	080032eb 	.word	0x080032eb
 80032a8:	080032eb 	.word	0x080032eb
 80032ac:	080032eb 	.word	0x080032eb
 80032b0:	080032eb 	.word	0x080032eb
 80032b4:	080032eb 	.word	0x080032eb
 80032b8:	080032eb 	.word	0x080032eb
 80032bc:	080032eb 	.word	0x080032eb
 80032c0:	08003309 	.word	0x08003309
 80032c4:	08003309 	.word	0x08003309
 80032c8:	08003327 	.word	0x08003327
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80032cc:	2300      	movs	r3, #0
 80032ce:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80032d0:	230e      	movs	r3, #14
 80032d2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80032d4:	7a7b      	ldrb	r3, [r7, #9]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f362 0306 	bfi	r3, r2, #0, #7
 80032dc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80032de:	7a3b      	ldrb	r3, [r7, #8]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f362 0306 	bfi	r3, r2, #0, #7
 80032e6:	723b      	strb	r3, [r7, #8]
            break;
 80032e8:	e02f      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80032ee:	231e      	movs	r3, #30
 80032f0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80032f2:	7a7b      	ldrb	r3, [r7, #9]
 80032f4:	2207      	movs	r2, #7
 80032f6:	f362 0306 	bfi	r3, r2, #0, #7
 80032fa:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80032fc:	7a3b      	ldrb	r3, [r7, #8]
 80032fe:	2207      	movs	r2, #7
 8003300:	f362 0306 	bfi	r3, r2, #0, #7
 8003304:	723b      	strb	r3, [r7, #8]
            break;
 8003306:	e020      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 800330c:	2307      	movs	r3, #7
 800330e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8003310:	7a7b      	ldrb	r3, [r7, #9]
 8003312:	2202      	movs	r2, #2
 8003314:	f362 0306 	bfi	r3, r2, #0, #7
 8003318:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 800331a:	7a3b      	ldrb	r3, [r7, #8]
 800331c:	2202      	movs	r2, #2
 800331e:	f362 0306 	bfi	r3, r2, #0, #7
 8003322:	723b      	strb	r3, [r7, #8]
            break;
 8003324:	e011      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800332a:	233e      	movs	r3, #62	; 0x3e
 800332c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800332e:	7a7b      	ldrb	r3, [r7, #9]
 8003330:	220f      	movs	r2, #15
 8003332:	f362 0306 	bfi	r3, r2, #0, #7
 8003336:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003338:	7a3b      	ldrb	r3, [r7, #8]
 800333a:	220f      	movs	r2, #15
 800333c:	f362 0306 	bfi	r3, r2, #0, #7
 8003340:	723b      	strb	r3, [r7, #8]
            break;
 8003342:	e002      	b.n	800334a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003344:	f04f 33ff 	mov.w	r3, #4294967295
 8003348:	e010      	b.n	800336c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	2104      	movs	r1, #4
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe f803 	bl	800135c <DRV_CANFDSPI_WriteWord>
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800335a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003362:	f06f 0301 	mvn.w	r3, #1
 8003366:	e001      	b.n	800336c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	003e0f0f 	.word	0x003e0f0f

08003378 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	4603      	mov	r3, r0
 8003380:	71fb      	strb	r3, [r7, #7]
 8003382:	460b      	mov	r3, r1
 8003384:	71bb      	strb	r3, [r7, #6]
 8003386:	4613      	mov	r3, r2
 8003388:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800338e:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003390:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003396:	7abb      	ldrb	r3, [r7, #10]
 8003398:	2202      	movs	r2, #2
 800339a:	f362 0301 	bfi	r3, r2, #0, #2
 800339e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80033a4:	79bb      	ldrb	r3, [r7, #6]
 80033a6:	2b11      	cmp	r3, #17
 80033a8:	f200 80ef 	bhi.w	800358a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033fd 	.word	0x080033fd
 80033b8:	0800343b 	.word	0x0800343b
 80033bc:	0800358b 	.word	0x0800358b
 80033c0:	08003475 	.word	0x08003475
 80033c4:	08003475 	.word	0x08003475
 80033c8:	08003475 	.word	0x08003475
 80033cc:	08003475 	.word	0x08003475
 80033d0:	08003475 	.word	0x08003475
 80033d4:	0800347b 	.word	0x0800347b
 80033d8:	080034c1 	.word	0x080034c1
 80033dc:	08003507 	.word	0x08003507
 80033e0:	08003545 	.word	0x08003545
 80033e4:	0800354b 	.word	0x0800354b
 80033e8:	08003585 	.word	0x08003585
 80033ec:	08003585 	.word	0x08003585
 80033f0:	08003475 	.word	0x08003475
 80033f4:	08003475 	.word	0x08003475
 80033f8:	0800347b 	.word	0x0800347b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003400:	7bbb      	ldrb	r3, [r7, #14]
 8003402:	2206      	movs	r2, #6
 8003404:	f362 0304 	bfi	r3, r2, #0, #5
 8003408:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800340a:	7b7b      	ldrb	r3, [r7, #13]
 800340c:	2201      	movs	r2, #1
 800340e:	f362 0303 	bfi	r3, r2, #0, #4
 8003412:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003414:	7b3b      	ldrb	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f362 0303 	bfi	r3, r2, #0, #4
 800341c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800341e:	7a7b      	ldrb	r3, [r7, #9]
 8003420:	2207      	movs	r2, #7
 8003422:	f362 0306 	bfi	r3, r2, #0, #7
 8003426:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800342e:	b2da      	uxtb	r2, r3
 8003430:	7a3b      	ldrb	r3, [r7, #8]
 8003432:	f362 0305 	bfi	r3, r2, #0, #6
 8003436:	723b      	strb	r3, [r7, #8]
            break;
 8003438:	e0aa      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800343e:	7bbb      	ldrb	r3, [r7, #14]
 8003440:	2202      	movs	r2, #2
 8003442:	f362 0304 	bfi	r3, r2, #0, #5
 8003446:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003448:	7b7b      	ldrb	r3, [r7, #13]
 800344a:	f36f 0303 	bfc	r3, #0, #4
 800344e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003450:	7b3b      	ldrb	r3, [r7, #12]
 8003452:	f36f 0303 	bfc	r3, #0, #4
 8003456:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003458:	7a7b      	ldrb	r3, [r7, #9]
 800345a:	2203      	movs	r2, #3
 800345c:	f362 0306 	bfi	r3, r2, #0, #7
 8003460:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	b2da      	uxtb	r2, r3
 800346a:	7a3b      	ldrb	r3, [r7, #8]
 800346c:	f362 0305 	bfi	r3, r2, #0, #6
 8003470:	723b      	strb	r3, [r7, #8]
            break;
 8003472:	e08d      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	e0aa      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800347e:	7bbb      	ldrb	r3, [r7, #14]
 8003480:	220e      	movs	r2, #14
 8003482:	f362 0304 	bfi	r3, r2, #0, #5
 8003486:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003488:	7b7b      	ldrb	r3, [r7, #13]
 800348a:	2203      	movs	r2, #3
 800348c:	f362 0303 	bfi	r3, r2, #0, #4
 8003490:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003492:	7b3b      	ldrb	r3, [r7, #12]
 8003494:	2203      	movs	r2, #3
 8003496:	f362 0303 	bfi	r3, r2, #0, #4
 800349a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800349c:	7a7b      	ldrb	r3, [r7, #9]
 800349e:	220f      	movs	r2, #15
 80034a0:	f362 0306 	bfi	r3, r2, #0, #7
 80034a4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	7a3b      	ldrb	r3, [r7, #8]
 80034b0:	f362 0305 	bfi	r3, r2, #0, #6
 80034b4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034b6:	7abb      	ldrb	r3, [r7, #10]
 80034b8:	f36f 0301 	bfc	r3, #0, #2
 80034bc:	72bb      	strb	r3, [r7, #10]
            break;
 80034be:	e067      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	2207      	movs	r2, #7
 80034c8:	f362 0304 	bfi	r3, r2, #0, #5
 80034cc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80034ce:	7b7b      	ldrb	r3, [r7, #13]
 80034d0:	2202      	movs	r2, #2
 80034d2:	f362 0303 	bfi	r3, r2, #0, #4
 80034d6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80034d8:	7b3b      	ldrb	r3, [r7, #12]
 80034da:	2202      	movs	r2, #2
 80034dc:	f362 0303 	bfi	r3, r2, #0, #4
 80034e0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 80034e2:	7a7b      	ldrb	r3, [r7, #9]
 80034e4:	2208      	movs	r2, #8
 80034e6:	f362 0306 	bfi	r3, r2, #0, #7
 80034ea:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	7a3b      	ldrb	r3, [r7, #8]
 80034f6:	f362 0305 	bfi	r3, r2, #0, #6
 80034fa:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80034fc:	7abb      	ldrb	r3, [r7, #10]
 80034fe:	f36f 0301 	bfc	r3, #0, #2
 8003502:	72bb      	strb	r3, [r7, #10]
            break;
 8003504:	e044      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	2206      	movs	r2, #6
 800350e:	f362 0304 	bfi	r3, r2, #0, #5
 8003512:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003514:	7b7b      	ldrb	r3, [r7, #13]
 8003516:	2201      	movs	r2, #1
 8003518:	f362 0303 	bfi	r3, r2, #0, #4
 800351c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800351e:	7b3b      	ldrb	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f362 0303 	bfi	r3, r2, #0, #4
 8003526:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003528:	7a7b      	ldrb	r3, [r7, #9]
 800352a:	2207      	movs	r2, #7
 800352c:	f362 0306 	bfi	r3, r2, #0, #7
 8003530:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003538:	b2da      	uxtb	r2, r3
 800353a:	7a3b      	ldrb	r3, [r7, #8]
 800353c:	f362 0305 	bfi	r3, r2, #0, #6
 8003540:	723b      	strb	r3, [r7, #8]
            break;
 8003542:	e025      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	e042      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800354e:	7bbb      	ldrb	r3, [r7, #14]
 8003550:	2202      	movs	r2, #2
 8003552:	f362 0304 	bfi	r3, r2, #0, #5
 8003556:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003558:	7b7b      	ldrb	r3, [r7, #13]
 800355a:	f36f 0303 	bfc	r3, #0, #4
 800355e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003560:	7b3b      	ldrb	r3, [r7, #12]
 8003562:	f36f 0303 	bfc	r3, #0, #4
 8003566:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003568:	7a7b      	ldrb	r3, [r7, #9]
 800356a:	2203      	movs	r2, #3
 800356c:	f362 0306 	bfi	r3, r2, #0, #7
 8003570:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003578:	b2da      	uxtb	r2, r3
 800357a:	7a3b      	ldrb	r3, [r7, #8]
 800357c:	f362 0305 	bfi	r3, r2, #0, #6
 8003580:	723b      	strb	r3, [r7, #8]
            break;
 8003582:	e005      	b.n	8003590 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003584:	f04f 33ff 	mov.w	r3, #4294967295
 8003588:	e022      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 800358a:	f04f 33ff 	mov.w	r3, #4294967295
 800358e:	e01f      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	2108      	movs	r1, #8
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd fee0 	bl	800135c <DRV_CANFDSPI_WriteWord>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80035a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80035a8:	f06f 0301 	mvn.w	r3, #1
 80035ac:	e010      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80035ae:	68ba      	ldr	r2, [r7, #8]
 80035b0:	79fb      	ldrb	r3, [r7, #7]
 80035b2:	210c      	movs	r1, #12
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fed1 	bl	800135c <DRV_CANFDSPI_WriteWord>
 80035ba:	4603      	mov	r3, r0
 80035bc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80035be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d002      	beq.n	80035cc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 80035c6:	f06f 0302 	mvn.w	r3, #2
 80035ca:	e001      	b.n	80035d0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 80035cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	000e0303 	.word	0x000e0303

080035dc <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
 80035e6:	460b      	mov	r3, r1
 80035e8:	71bb      	strb	r3, [r7, #6]
 80035ea:	4613      	mov	r3, r2
 80035ec:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80035ee:	2300      	movs	r3, #0
 80035f0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 80035f6:	f640 6307 	movw	r3, #3591	; 0xe07
 80035fa:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8003600:	f107 0308 	add.w	r3, r7, #8
 8003604:	1cda      	adds	r2, r3, #3
 8003606:	89b9      	ldrh	r1, [r7, #12]
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	4618      	mov	r0, r3
 800360c:	f7fd fd4a 	bl	80010a4 <DRV_CANFDSPI_ReadByte>
 8003610:	4603      	mov	r3, r0
 8003612:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003614:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 800361c:	f04f 33ff 	mov.w	r3, #4294967295
 8003620:	e020      	b.n	8003664 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8003622:	79bb      	ldrb	r3, [r7, #6]
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	b2da      	uxtb	r2, r3
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	f362 0300 	bfi	r3, r2, #0, #1
 8003630:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8003632:	797b      	ldrb	r3, [r7, #5]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	b2da      	uxtb	r2, r3
 800363a:	7afb      	ldrb	r3, [r7, #11]
 800363c:	f362 0341 	bfi	r3, r2, #1, #1
 8003640:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8003642:	7afa      	ldrb	r2, [r7, #11]
 8003644:	89b9      	ldrh	r1, [r7, #12]
 8003646:	79fb      	ldrb	r3, [r7, #7]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fd fd97 	bl	800117c <DRV_CANFDSPI_WriteByte>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 800365a:	f06f 0301 	mvn.w	r3, #1
 800365e:	e001      	b.n	8003664 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003676:	2300      	movs	r3, #0
 8003678:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d802      	bhi.n	8003686 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003680:	79fb      	ldrb	r3, [r7, #7]
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e02a      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	3b09      	subs	r3, #9
 800368a:	2b06      	cmp	r3, #6
 800368c:	d825      	bhi.n	80036da <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800368e:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003694:	080036b1 	.word	0x080036b1
 8003698:	080036b7 	.word	0x080036b7
 800369c:	080036bd 	.word	0x080036bd
 80036a0:	080036c3 	.word	0x080036c3
 80036a4:	080036c9 	.word	0x080036c9
 80036a8:	080036cf 	.word	0x080036cf
 80036ac:	080036d5 	.word	0x080036d5
            case CAN_DLC_12:
                dataBytesInObject = 12;
 80036b0:	230c      	movs	r3, #12
 80036b2:	60fb      	str	r3, [r7, #12]
                break;
 80036b4:	e012      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 80036b6:	2310      	movs	r3, #16
 80036b8:	60fb      	str	r3, [r7, #12]
                break;
 80036ba:	e00f      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 80036bc:	2314      	movs	r3, #20
 80036be:	60fb      	str	r3, [r7, #12]
                break;
 80036c0:	e00c      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 80036c2:	2318      	movs	r3, #24
 80036c4:	60fb      	str	r3, [r7, #12]
                break;
 80036c6:	e009      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 80036c8:	2320      	movs	r3, #32
 80036ca:	60fb      	str	r3, [r7, #12]
                break;
 80036cc:	e006      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 80036ce:	2330      	movs	r3, #48	; 0x30
 80036d0:	60fb      	str	r3, [r7, #12]
                break;
 80036d2:	e003      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 80036d4:	2340      	movs	r3, #64	; 0x40
 80036d6:	60fb      	str	r3, [r7, #12]
                break;
 80036d8:	e000      	b.n	80036dc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 80036da:	bf00      	nop
        }
    }

    return dataBytesInObject;
 80036dc:	68fb      	ldr	r3, [r7, #12]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4313      	orrs	r3, r2
 8003702:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003708:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4013      	ands	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003710:	68fb      	ldr	r3, [r7, #12]
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f043 0201 	orr.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	370c      	adds	r7, #12
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 0218 	bic.w	r2, r3, #24
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	615a      	str	r2, [r3, #20]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	460b      	mov	r3, r1
 80037a6:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	801a      	strh	r2, [r3, #0]
}
 80037b2:	bf00      	nop
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr

080037be <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b090      	sub	sp, #64	; 0x40
 80037dc:	af00      	add	r7, sp, #0
 80037de:	4603      	mov	r3, r0
 80037e0:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 80037e2:	2305      	movs	r3, #5
 80037e4:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 80037e6:	2300      	movs	r3, #0
 80037e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037ea:	2300      	movs	r3, #0
 80037ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 80037f2:	2300      	movs	r3, #0
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30
 80037f6:	2300      	movs	r3, #0
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037fa:	2300      	movs	r3, #0
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 80037fe:	2300      	movs	r3, #0
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
 8003802:	2300      	movs	r3, #0
 8003804:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003816:	2300      	movs	r3, #0
 8003818:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 800381e:	f001 fd67 	bl	80052f0 <FI_CheckBankConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d002      	beq.n	800382e <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003828:	230e      	movs	r3, #14
 800382a:	f000 bcb4 	b.w	8004196 <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 800382e:	f001 fcbd 	bl	80051ac <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003832:	4b93      	ldr	r3, [pc, #588]	; (8003a80 <EE_Init+0x2a8>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003838:	4b92      	ldr	r3, [pc, #584]	; (8003a84 <EE_Init+0x2ac>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	029a      	lsls	r2, r3, #10
 800383e:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <EE_Init+0x2b0>)
 8003840:	4013      	ands	r3, r2
 8003842:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003846:	fbb2 f1f3 	udiv	r1, r2, r3
 800384a:	fb01 f303 	mul.w	r3, r1, r3
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	0b1b      	lsrs	r3, r3, #12
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003854:	e02e      	b.n	80038b4 <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003858:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800385c:	031a      	lsls	r2, r3, #12
 800385e:	4b89      	ldr	r3, [pc, #548]	; (8003a84 <EE_Init+0x2ac>)
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	0299      	lsls	r1, r3, #10
 8003864:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <EE_Init+0x2b0>)
 8003866:	400b      	ands	r3, r1
 8003868:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800386c:	fbb1 f1f3 	udiv	r1, r1, r3
 8003870:	4b84      	ldr	r3, [pc, #528]	; (8003a84 <EE_Init+0x2ac>)
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	0298      	lsls	r0, r3, #10
 8003876:	4b84      	ldr	r3, [pc, #528]	; (8003a88 <EE_Init+0x2b0>)
 8003878:	4003      	ands	r3, r0
 800387a:	fb01 f303 	mul.w	r3, r1, r3
 800387e:	4413      	add	r3, r2
 8003880:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003882:	2300      	movs	r3, #0
 8003884:	637b      	str	r3, [r7, #52]	; 0x34
 8003886:	e00e      	b.n	80038a6 <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003888:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800388a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800388c:	4413      	add	r3, r2
 800388e:	4a7f      	ldr	r2, [pc, #508]	; (8003a8c <EE_Init+0x2b4>)
 8003890:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003892:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	4413      	add	r3, r2
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80038a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a2:	3308      	adds	r3, #8
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
 80038a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ac:	d3ec      	bcc.n	8003888 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80038ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b0:	3301      	adds	r3, #1
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038b4:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <EE_Init+0x2ac>)
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	029a      	lsls	r2, r3, #10
 80038ba:	4b73      	ldr	r3, [pc, #460]	; (8003a88 <EE_Init+0x2b0>)
 80038bc:	4013      	ands	r3, r2
 80038be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038c2:	fbb2 f1f3 	udiv	r1, r2, r3
 80038c6:	fb01 f303 	mul.w	r3, r1, r3
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	0b1b      	lsrs	r3, r3, #12
 80038ce:	3304      	adds	r3, #4
 80038d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d3bf      	bcc.n	8003856 <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 80038d6:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <EE_Init+0x2a8>)
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80038dc:	4b69      	ldr	r3, [pc, #420]	; (8003a84 <EE_Init+0x2ac>)
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	029a      	lsls	r2, r3, #10
 80038e2:	4b69      	ldr	r3, [pc, #420]	; (8003a88 <EE_Init+0x2b0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80038ea:	fbb2 f1f3 	udiv	r1, r2, r3
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	0b1b      	lsrs	r3, r3, #12
 80038f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038f8:	e034      	b.n	8003964 <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 80038fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003900:	031a      	lsls	r2, r3, #12
 8003902:	4b60      	ldr	r3, [pc, #384]	; (8003a84 <EE_Init+0x2ac>)
 8003904:	881b      	ldrh	r3, [r3, #0]
 8003906:	0299      	lsls	r1, r3, #10
 8003908:	4b5f      	ldr	r3, [pc, #380]	; (8003a88 <EE_Init+0x2b0>)
 800390a:	400b      	ands	r3, r1
 800390c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003910:	fbb1 f1f3 	udiv	r1, r1, r3
 8003914:	4b5b      	ldr	r3, [pc, #364]	; (8003a84 <EE_Init+0x2ac>)
 8003916:	881b      	ldrh	r3, [r3, #0]
 8003918:	0298      	lsls	r0, r3, #10
 800391a:	4b5b      	ldr	r3, [pc, #364]	; (8003a88 <EE_Init+0x2b0>)
 800391c:	4003      	ands	r3, r0
 800391e:	fb01 f303 	mul.w	r3, r1, r3
 8003922:	4413      	add	r3, r2
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003926:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003928:	f001 fbde 	bl	80050e8 <GetPageState>
 800392c:	4603      	mov	r3, r0
 800392e:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003930:	7ebb      	ldrb	r3, [r7, #26]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d002      	beq.n	800393c <EE_Init+0x164>
 8003936:	7ebb      	ldrb	r3, [r7, #26]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d103      	bne.n	8003944 <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	3301      	adds	r3, #1
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003942:	e00c      	b.n	800395e <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003944:	7ebb      	ldrb	r3, [r7, #26]
 8003946:	2b03      	cmp	r3, #3
 8003948:	d109      	bne.n	800395e <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003952:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8003958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800395a:	3301      	adds	r3, #1
 800395c:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800395e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003960:	3301      	adds	r3, #1
 8003962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003964:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <EE_Init+0x2ac>)
 8003966:	881b      	ldrh	r3, [r3, #0]
 8003968:	029a      	lsls	r2, r3, #10
 800396a:	4b47      	ldr	r3, [pc, #284]	; (8003a88 <EE_Init+0x2b0>)
 800396c:	4013      	ands	r3, r2
 800396e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003972:	fbb2 f1f3 	udiv	r1, r2, r3
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	0b1b      	lsrs	r3, r3, #12
 800397e:	3304      	adds	r3, #4
 8003980:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003982:	429a      	cmp	r2, r3
 8003984:	d3b9      	bcc.n	80038fa <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d16a      	bne.n	8003a62 <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d062      	beq.n	8003a58 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003992:	4b3c      	ldr	r3, [pc, #240]	; (8003a84 <EE_Init+0x2ac>)
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	029a      	lsls	r2, r3, #10
 8003998:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <EE_Init+0x2b0>)
 800399a:	4013      	ands	r3, r2
 800399c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	0b1b      	lsrs	r3, r3, #12
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	3303      	adds	r3, #3
 80039b2:	f003 0103 	and.w	r1, r3, #3
 80039b6:	4b33      	ldr	r3, [pc, #204]	; (8003a84 <EE_Init+0x2ac>)
 80039b8:	881b      	ldrh	r3, [r3, #0]
 80039ba:	029a      	lsls	r2, r3, #10
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <EE_Init+0x2b0>)
 80039be:	4013      	ands	r3, r2
 80039c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80039c4:	fbb2 f0f3 	udiv	r0, r2, r3
 80039c8:	fb00 f303 	mul.w	r3, r0, r3
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	0b1b      	lsrs	r3, r3, #12
 80039d0:	440b      	add	r3, r1
 80039d2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80039d6:	031a      	lsls	r2, r3, #12
 80039d8:	4b2a      	ldr	r3, [pc, #168]	; (8003a84 <EE_Init+0x2ac>)
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	0299      	lsls	r1, r3, #10
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <EE_Init+0x2b0>)
 80039e0:	400b      	ands	r3, r1
 80039e2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80039e6:	fbb1 f1f3 	udiv	r1, r1, r3
 80039ea:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <EE_Init+0x2ac>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	0298      	lsls	r0, r3, #10
 80039f0:	4b25      	ldr	r3, [pc, #148]	; (8003a88 <EE_Init+0x2b0>)
 80039f2:	4003      	ands	r3, r0
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fb74 	bl	80050e8 <GetPageState>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d12d      	bne.n	8003a62 <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <EE_Init+0x2ac>)
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	029a      	lsls	r2, r3, #10
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <EE_Init+0x2b0>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a14:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a18:	fb01 f303 	mul.w	r3, r1, r3
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	0b1b      	lsrs	r3, r3, #12
 8003a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	3301      	adds	r3, #1
 8003a26:	f003 0103 	and.w	r1, r3, #3
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <EE_Init+0x2ac>)
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	029a      	lsls	r2, r3, #10
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <EE_Init+0x2b0>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a38:	fbb2 f0f3 	udiv	r0, r2, r3
 8003a3c:	fb00 f303 	mul.w	r3, r0, r3
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	0b1b      	lsrs	r3, r3, #12
 8003a44:	440b      	add	r3, r1
 8003a46:	2101      	movs	r1, #1
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f001 fa8b 	bl	8004f64 <SetPageState>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d006      	beq.n	8003a62 <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003a54:	2302      	movs	r3, #2
 8003a56:	e39e      	b.n	8004196 <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f000 fba7 	bl	80041ac <EE_Format>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	e399      	b.n	8004196 <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003a62:	4b08      	ldr	r3, [pc, #32]	; (8003a84 <EE_Init+0x2ac>)
 8003a64:	881b      	ldrh	r3, [r3, #0]
 8003a66:	029a      	lsls	r2, r3, #10
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <EE_Init+0x2b0>)
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003a70:	fbb2 f1f3 	udiv	r1, r2, r3
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	0b1b      	lsrs	r3, r3, #12
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7e:	e0de      	b.n	8003c3e <EE_Init+0x466>
 8003a80:	200003b4 	.word	0x200003b4
 8003a84:	1fff75e0 	.word	0x1fff75e0
 8003a88:	001ffc00 	.word	0x001ffc00
 8003a8c:	200003b0 	.word	0x200003b0
  {
    pageaddress = PAGE_ADDRESS(page);
 8003a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003a96:	031a      	lsls	r2, r3, #12
 8003a98:	4bba      	ldr	r3, [pc, #744]	; (8003d84 <EE_Init+0x5ac>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	0299      	lsls	r1, r3, #10
 8003a9e:	4bba      	ldr	r3, [pc, #744]	; (8003d88 <EE_Init+0x5b0>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003aa6:	fbb1 f1f3 	udiv	r1, r1, r3
 8003aaa:	4bb6      	ldr	r3, [pc, #728]	; (8003d84 <EE_Init+0x5ac>)
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	0298      	lsls	r0, r3, #10
 8003ab0:	4bb5      	ldr	r3, [pc, #724]	; (8003d88 <EE_Init+0x5b0>)
 8003ab2:	4003      	ands	r3, r0
 8003ab4:	fb01 f303 	mul.w	r3, r1, r3
 8003ab8:	4413      	add	r3, r2
 8003aba:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003abe:	f001 fb13 	bl	80050e8 <GetPageState>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003ac6:	7ebb      	ldrb	r3, [r7, #26]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	f040 80b5 	bne.w	8003c38 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003ace:	4bad      	ldr	r3, [pc, #692]	; (8003d84 <EE_Init+0x5ac>)
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	029a      	lsls	r2, r3, #10
 8003ad4:	4bac      	ldr	r3, [pc, #688]	; (8003d88 <EE_Init+0x5b0>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003adc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	0b1b      	lsrs	r3, r3, #12
 8003ae8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d050      	beq.n	8003b90 <EE_Init+0x3b8>
 8003aee:	4ba5      	ldr	r3, [pc, #660]	; (8003d84 <EE_Init+0x5ac>)
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	029a      	lsls	r2, r3, #10
 8003af4:	4ba4      	ldr	r3, [pc, #656]	; (8003d88 <EE_Init+0x5b0>)
 8003af6:	4013      	ands	r3, r2
 8003af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003afc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	0b1b      	lsrs	r3, r3, #12
 8003b08:	3302      	adds	r3, #2
 8003b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d03f      	beq.n	8003b90 <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b10:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <EE_Init+0x5ac>)
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	029a      	lsls	r2, r3, #10
 8003b16:	4b9c      	ldr	r3, [pc, #624]	; (8003d88 <EE_Init+0x5b0>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b1e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	0b1b      	lsrs	r3, r3, #12
 8003b2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	3303      	adds	r3, #3
 8003b30:	f003 0103 	and.w	r1, r3, #3
 8003b34:	4b93      	ldr	r3, [pc, #588]	; (8003d84 <EE_Init+0x5ac>)
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	029a      	lsls	r2, r3, #10
 8003b3a:	4b93      	ldr	r3, [pc, #588]	; (8003d88 <EE_Init+0x5b0>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b42:	fbb2 f0f3 	udiv	r0, r2, r3
 8003b46:	fb00 f303 	mul.w	r3, r0, r3
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	0b1b      	lsrs	r3, r3, #12
 8003b4e:	440b      	add	r3, r1
 8003b50:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003b54:	031a      	lsls	r2, r3, #12
 8003b56:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <EE_Init+0x5ac>)
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	0299      	lsls	r1, r3, #10
 8003b5c:	4b8a      	ldr	r3, [pc, #552]	; (8003d88 <EE_Init+0x5b0>)
 8003b5e:	400b      	ands	r3, r1
 8003b60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003b64:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b68:	4b86      	ldr	r3, [pc, #536]	; (8003d84 <EE_Init+0x5ac>)
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	0298      	lsls	r0, r3, #10
 8003b6e:	4b86      	ldr	r3, [pc, #536]	; (8003d88 <EE_Init+0x5b0>)
 8003b70:	4003      	ands	r3, r0
 8003b72:	fb01 f303 	mul.w	r3, r1, r3
 8003b76:	4413      	add	r3, r2
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fab5 	bl	80050e8 <GetPageState>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d102      	bne.n	8003b8a <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b88:	e041      	b.n	8003c0e <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003b8e:	e03e      	b.n	8003c0e <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003b90:	4b7c      	ldr	r3, [pc, #496]	; (8003d84 <EE_Init+0x5ac>)
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	029a      	lsls	r2, r3, #10
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <EE_Init+0x5b0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	0b1b      	lsrs	r3, r3, #12
 8003baa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f003 0103 	and.w	r1, r3, #3
 8003bb4:	4b73      	ldr	r3, [pc, #460]	; (8003d84 <EE_Init+0x5ac>)
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	029a      	lsls	r2, r3, #10
 8003bba:	4b73      	ldr	r3, [pc, #460]	; (8003d88 <EE_Init+0x5b0>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003bc2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	0b1b      	lsrs	r3, r3, #12
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003bd4:	031a      	lsls	r2, r3, #12
 8003bd6:	4b6b      	ldr	r3, [pc, #428]	; (8003d84 <EE_Init+0x5ac>)
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	0299      	lsls	r1, r3, #10
 8003bdc:	4b6a      	ldr	r3, [pc, #424]	; (8003d88 <EE_Init+0x5b0>)
 8003bde:	400b      	ands	r3, r1
 8003be0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003be4:	fbb1 f1f3 	udiv	r1, r1, r3
 8003be8:	4b66      	ldr	r3, [pc, #408]	; (8003d84 <EE_Init+0x5ac>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	0298      	lsls	r0, r3, #10
 8003bee:	4b66      	ldr	r3, [pc, #408]	; (8003d88 <EE_Init+0x5b0>)
 8003bf0:	4003      	ands	r3, r0
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 fa75 	bl	80050e8 <GetPageState>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d102      	bne.n	8003c0a <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	76fb      	strb	r3, [r7, #27]
 8003c08:	e001      	b.n	8003c0e <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003c0e:	7efb      	ldrb	r3, [r7, #27]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d111      	bne.n	8003c38 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b5c      	ldr	r3, [pc, #368]	; (8003d8c <EE_Init+0x5b4>)
 8003c1a:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2100      	movs	r1, #0
 8003c20:	2000      	movs	r0, #0
 8003c22:	f000 fef3 	bl	8004a0c <PagesTransfer>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c2c:	d001      	beq.n	8003c32 <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003c2e:	230c      	movs	r3, #12
 8003c30:	e2b1      	b.n	8004196 <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003c32:	2301      	movs	r3, #1
 8003c34:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003c36:	e014      	b.n	8003c62 <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c3e:	4b51      	ldr	r3, [pc, #324]	; (8003d84 <EE_Init+0x5ac>)
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	029a      	lsls	r2, r3, #10
 8003c44:	4b50      	ldr	r3, [pc, #320]	; (8003d88 <EE_Init+0x5b0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	0b1b      	lsrs	r3, r3, #12
 8003c58:	3304      	adds	r3, #4
 8003c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	f4ff af17 	bcc.w	8003a90 <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c66:	4b47      	ldr	r3, [pc, #284]	; (8003d84 <EE_Init+0x5ac>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	029a      	lsls	r2, r3, #10
 8003c6c:	4b46      	ldr	r3, [pc, #280]	; (8003d88 <EE_Init+0x5b0>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c74:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	0b1b      	lsrs	r3, r3, #12
 8003c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c82:	e0dc      	b.n	8003e3e <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c86:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003c8a:	031a      	lsls	r2, r3, #12
 8003c8c:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <EE_Init+0x5ac>)
 8003c8e:	881b      	ldrh	r3, [r3, #0]
 8003c90:	0299      	lsls	r1, r3, #10
 8003c92:	4b3d      	ldr	r3, [pc, #244]	; (8003d88 <EE_Init+0x5b0>)
 8003c94:	400b      	ands	r3, r1
 8003c96:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003c9a:	fbb1 f1f3 	udiv	r1, r1, r3
 8003c9e:	4b39      	ldr	r3, [pc, #228]	; (8003d84 <EE_Init+0x5ac>)
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	0298      	lsls	r0, r3, #10
 8003ca4:	4b38      	ldr	r3, [pc, #224]	; (8003d88 <EE_Init+0x5b0>)
 8003ca6:	4003      	ands	r3, r0
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	4413      	add	r3, r2
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003cb2:	f001 fa19 	bl	80050e8 <GetPageState>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003cba:	7ebb      	ldrb	r3, [r7, #26]
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	f040 80b6 	bne.w	8003e2e <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <EE_Init+0x5ac>)
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	029a      	lsls	r2, r3, #10
 8003cc8:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <EE_Init+0x5b0>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cd0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	0b1b      	lsrs	r3, r3, #12
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d056      	beq.n	8003d90 <EE_Init+0x5b8>
 8003ce2:	4b28      	ldr	r3, [pc, #160]	; (8003d84 <EE_Init+0x5ac>)
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	029a      	lsls	r2, r3, #10
 8003ce8:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <EE_Init+0x5b0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cf0:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	0b1b      	lsrs	r3, r3, #12
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d045      	beq.n	8003d90 <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d04:	4b1f      	ldr	r3, [pc, #124]	; (8003d84 <EE_Init+0x5ac>)
 8003d06:	881b      	ldrh	r3, [r3, #0]
 8003d08:	029a      	lsls	r2, r3, #10
 8003d0a:	4b1f      	ldr	r3, [pc, #124]	; (8003d88 <EE_Init+0x5b0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d12:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	0b1b      	lsrs	r3, r3, #12
 8003d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	3303      	adds	r3, #3
 8003d24:	f003 0103 	and.w	r1, r3, #3
 8003d28:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <EE_Init+0x5ac>)
 8003d2a:	881b      	ldrh	r3, [r3, #0]
 8003d2c:	029a      	lsls	r2, r3, #10
 8003d2e:	4b16      	ldr	r3, [pc, #88]	; (8003d88 <EE_Init+0x5b0>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d36:	fbb2 f0f3 	udiv	r0, r2, r3
 8003d3a:	fb00 f303 	mul.w	r3, r0, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	0b1b      	lsrs	r3, r3, #12
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003d48:	031a      	lsls	r2, r3, #12
 8003d4a:	4b0e      	ldr	r3, [pc, #56]	; (8003d84 <EE_Init+0x5ac>)
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	0299      	lsls	r1, r3, #10
 8003d50:	4b0d      	ldr	r3, [pc, #52]	; (8003d88 <EE_Init+0x5b0>)
 8003d52:	400b      	ands	r3, r1
 8003d54:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003d58:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d5c:	4b09      	ldr	r3, [pc, #36]	; (8003d84 <EE_Init+0x5ac>)
 8003d5e:	881b      	ldrh	r3, [r3, #0]
 8003d60:	0298      	lsls	r0, r3, #10
 8003d62:	4b09      	ldr	r3, [pc, #36]	; (8003d88 <EE_Init+0x5b0>)
 8003d64:	4003      	ands	r3, r0
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f001 f9bb 	bl	80050e8 <GetPageState>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d102      	bne.n	8003d7e <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d7c:	e047      	b.n	8003e0e <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003d82:	e044      	b.n	8003e0e <EE_Init+0x636>
 8003d84:	1fff75e0 	.word	0x1fff75e0
 8003d88:	001ffc00 	.word	0x001ffc00
 8003d8c:	200003ae 	.word	0x200003ae
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003d90:	4b98      	ldr	r3, [pc, #608]	; (8003ff4 <EE_Init+0x81c>)
 8003d92:	881b      	ldrh	r3, [r3, #0]
 8003d94:	029a      	lsls	r2, r3, #10
 8003d96:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <EE_Init+0x820>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d9e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003da2:	fb01 f303 	mul.w	r3, r1, r3
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	0b1b      	lsrs	r3, r3, #12
 8003daa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	3301      	adds	r3, #1
 8003db0:	f003 0103 	and.w	r1, r3, #3
 8003db4:	4b8f      	ldr	r3, [pc, #572]	; (8003ff4 <EE_Init+0x81c>)
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	029a      	lsls	r2, r3, #10
 8003dba:	4b8f      	ldr	r3, [pc, #572]	; (8003ff8 <EE_Init+0x820>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003dc2:	fbb2 f0f3 	udiv	r0, r2, r3
 8003dc6:	fb00 f303 	mul.w	r3, r0, r3
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	0b1b      	lsrs	r3, r3, #12
 8003dce:	440b      	add	r3, r1
 8003dd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003dd4:	031a      	lsls	r2, r3, #12
 8003dd6:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <EE_Init+0x81c>)
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	0299      	lsls	r1, r3, #10
 8003ddc:	4b86      	ldr	r3, [pc, #536]	; (8003ff8 <EE_Init+0x820>)
 8003dde:	400b      	ands	r3, r1
 8003de0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003de4:	fbb1 f1f3 	udiv	r1, r1, r3
 8003de8:	4b82      	ldr	r3, [pc, #520]	; (8003ff4 <EE_Init+0x81c>)
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	0298      	lsls	r0, r3, #10
 8003dee:	4b82      	ldr	r3, [pc, #520]	; (8003ff8 <EE_Init+0x820>)
 8003df0:	4003      	ands	r3, r0
 8003df2:	fb01 f303 	mul.w	r3, r1, r3
 8003df6:	4413      	add	r3, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f975 	bl	80050e8 <GetPageState>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8003e04:	2300      	movs	r3, #0
 8003e06:	76fb      	strb	r3, [r7, #27]
 8003e08:	e001      	b.n	8003e0e <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 8003e0e:	7efb      	ldrb	r3, [r7, #27]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d111      	bne.n	8003e38 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 8003e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 8003e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	4b77      	ldr	r3, [pc, #476]	; (8003ffc <EE_Init+0x824>)
 8003e20:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	3301      	adds	r3, #1
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
 8003e28:	e006      	b.n	8003e38 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 8003e2a:	230a      	movs	r3, #10
 8003e2c:	e1b3      	b.n	8004196 <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 8003e2e:	7ebb      	ldrb	r3, [r7, #26]
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d101      	bne.n	8003e38 <EE_Init+0x660>
    {
      lastvalidpage = page;
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ff4 <EE_Init+0x81c>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	029a      	lsls	r2, r3, #10
 8003e44:	4b6c      	ldr	r3, [pc, #432]	; (8003ff8 <EE_Init+0x820>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	0b1b      	lsrs	r3, r3, #12
 8003e58:	3304      	adds	r3, #4
 8003e5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	f4ff af11 	bcc.w	8003c84 <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d133      	bne.n	8003ed0 <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8003e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6a:	b2d9      	uxtb	r1, r3
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <EE_Init+0x81c>)
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	029a      	lsls	r2, r3, #10
 8003e72:	4b61      	ldr	r3, [pc, #388]	; (8003ff8 <EE_Init+0x820>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e7a:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e7e:	fb00 f303 	mul.w	r3, r0, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	0b1b      	lsrs	r3, r3, #12
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	1acb      	subs	r3, r1, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	b2d9      	uxtb	r1, r3
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <EE_Init+0x81c>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	029a      	lsls	r2, r3, #10
 8003e9c:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <EE_Init+0x820>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ea4:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ea8:	fb00 f303 	mul.w	r3, r0, r3
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	0b1b      	lsrs	r3, r3, #12
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	440b      	add	r3, r1
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <EE_Init+0x824>)
 8003eb8:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8003eba:	4b50      	ldr	r3, [pc, #320]	; (8003ffc <EE_Init+0x824>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2102      	movs	r1, #2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f001 f84f 	bl	8004f64 <SetPageState>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e162      	b.n	8004196 <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 8003ed0:	4b4b      	ldr	r3, [pc, #300]	; (8004000 <EE_Init+0x828>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <EE_Init+0x82c>)
 8003ed8:	2220      	movs	r2, #32
 8003eda:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003edc:	2320      	movs	r3, #32
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
 8003ee0:	e031      	b.n	8003f46 <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8003ee2:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <EE_Init+0x824>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003eea:	031a      	lsls	r2, r3, #12
 8003eec:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <EE_Init+0x81c>)
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	0299      	lsls	r1, r3, #10
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <EE_Init+0x820>)
 8003ef4:	400b      	ands	r3, r1
 8003ef6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003efa:	fbb1 f1f3 	udiv	r1, r1, r3
 8003efe:	4b3d      	ldr	r3, [pc, #244]	; (8003ff4 <EE_Init+0x81c>)
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	0298      	lsls	r0, r3, #10
 8003f04:	4b3c      	ldr	r3, [pc, #240]	; (8003ff8 <EE_Init+0x820>)
 8003f06:	4003      	ands	r3, r0
 8003f08:	fb01 f303 	mul.w	r3, r1, r3
 8003f0c:	441a      	add	r2, r3
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f10:	4413      	add	r3, r2
 8003f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f16:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 8003f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	bf08      	it	eq
 8003f24:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8003f28:	d012      	beq.n	8003f50 <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 8003f2a:	4b35      	ldr	r3, [pc, #212]	; (8004000 <EE_Init+0x828>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	4b33      	ldr	r3, [pc, #204]	; (8004000 <EE_Init+0x828>)
 8003f34:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 8003f36:	4b33      	ldr	r3, [pc, #204]	; (8004004 <EE_Init+0x82c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	4a31      	ldr	r2, [pc, #196]	; (8004004 <EE_Init+0x82c>)
 8003f3e:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f42:	3308      	adds	r3, #8
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
 8003f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4c:	d3c9      	bcc.n	8003ee2 <EE_Init+0x70a>
 8003f4e:	e000      	b.n	8003f52 <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 8003f50:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 8003f52:	4b2a      	ldr	r3, [pc, #168]	; (8003ffc <EE_Init+0x824>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 8003f58:	4b28      	ldr	r3, [pc, #160]	; (8003ffc <EE_Init+0x824>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f5e:	e053      	b.n	8004008 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <EE_Init+0x81c>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	029a      	lsls	r2, r3, #10
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <EE_Init+0x820>)
 8003f68:	4013      	ands	r3, r2
 8003f6a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f6e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f72:	fb01 f303 	mul.w	r3, r1, r3
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	0b1b      	lsrs	r3, r3, #12
 8003f7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	3303      	adds	r3, #3
 8003f80:	f003 0103 	and.w	r1, r3, #3
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <EE_Init+0x81c>)
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	029a      	lsls	r2, r3, #10
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	; (8003ff8 <EE_Init+0x820>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f92:	fbb2 f0f3 	udiv	r0, r2, r3
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	0b1b      	lsrs	r3, r3, #12
 8003f9e:	440b      	add	r3, r1
 8003fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003fa8:	031a      	lsls	r2, r3, #12
 8003faa:	4b12      	ldr	r3, [pc, #72]	; (8003ff4 <EE_Init+0x81c>)
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	0299      	lsls	r1, r3, #10
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <EE_Init+0x820>)
 8003fb2:	400b      	ands	r3, r1
 8003fb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003fb8:	fbb1 f1f3 	udiv	r1, r1, r3
 8003fbc:	4b0d      	ldr	r3, [pc, #52]	; (8003ff4 <EE_Init+0x81c>)
 8003fbe:	881b      	ldrh	r3, [r3, #0]
 8003fc0:	0298      	lsls	r0, r3, #10
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <EE_Init+0x820>)
 8003fc4:	4003      	ands	r3, r0
 8003fc6:	fb01 f303 	mul.w	r3, r1, r3
 8003fca:	4413      	add	r3, r2
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f88b 	bl	80050e8 <GetPageState>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 8003fd6:	7ebb      	ldrb	r3, [r7, #26]
 8003fd8:	2b03      	cmp	r3, #3
 8003fda:	d109      	bne.n	8003ff0 <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8003fdc:	4b08      	ldr	r3, [pc, #32]	; (8004000 <EE_Init+0x828>)
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <EE_Init+0x828>)
 8003fe8:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fec:	623b      	str	r3, [r7, #32]
 8003fee:	e00b      	b.n	8004008 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	e0d0      	b.n	8004196 <EE_Init+0x9be>
 8003ff4:	1fff75e0 	.word	0x1fff75e0
 8003ff8:	001ffc00 	.word	0x001ffc00
 8003ffc:	200003ae 	.word	0x200003ae
 8004000:	200003ac 	.word	0x200003ac
 8004004:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8004008:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <EE_Init+0x9c8>)
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	029a      	lsls	r2, r3, #10
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <EE_Init+0x9cc>)
 8004010:	4013      	ands	r3, r2
 8004012:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004016:	fbb2 f1f3 	udiv	r1, r2, r3
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	0b1b      	lsrs	r3, r3, #12
 8004022:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004024:	429a      	cmp	r2, r3
 8004026:	d010      	beq.n	800404a <EE_Init+0x872>
 8004028:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <EE_Init+0x9c8>)
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	029a      	lsls	r2, r3, #10
 800402e:	4b5d      	ldr	r3, [pc, #372]	; (80041a4 <EE_Init+0x9cc>)
 8004030:	4013      	ands	r3, r2
 8004032:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004036:	fbb2 f1f3 	udiv	r1, r2, r3
 800403a:	fb01 f303 	mul.w	r3, r1, r3
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	0b1b      	lsrs	r3, r3, #12
 8004042:	3302      	adds	r3, #2
 8004044:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004046:	429a      	cmp	r2, r3
 8004048:	d18a      	bne.n	8003f60 <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 800404a:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <EE_Init+0x9d0>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <EE_Init+0x9c8>)
 8004052:	881b      	ldrh	r3, [r3, #0]
 8004054:	029a      	lsls	r2, r3, #10
 8004056:	4b53      	ldr	r3, [pc, #332]	; (80041a4 <EE_Init+0x9cc>)
 8004058:	4013      	ands	r3, r2
 800405a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800405e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004062:	fb01 f303 	mul.w	r3, r1, r3
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	0b1b      	lsrs	r3, r3, #12
 800406a:	1ac3      	subs	r3, r0, r3
 800406c:	3301      	adds	r3, #1
 800406e:	f003 0103 	and.w	r1, r3, #3
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <EE_Init+0x9c8>)
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	029a      	lsls	r2, r3, #10
 8004078:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <EE_Init+0x9cc>)
 800407a:	4013      	ands	r3, r2
 800407c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004080:	fbb2 f0f3 	udiv	r0, r2, r3
 8004084:	fb00 f303 	mul.w	r3, r0, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	0b1b      	lsrs	r3, r3, #12
 800408c:	440b      	add	r3, r1
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004096:	031a      	lsls	r2, r3, #12
 8004098:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <EE_Init+0x9c8>)
 800409a:	881b      	ldrh	r3, [r3, #0]
 800409c:	0299      	lsls	r1, r3, #10
 800409e:	4b41      	ldr	r3, [pc, #260]	; (80041a4 <EE_Init+0x9cc>)
 80040a0:	400b      	ands	r3, r1
 80040a2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80040a6:	fbb1 f1f3 	udiv	r1, r1, r3
 80040aa:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <EE_Init+0x9c8>)
 80040ac:	881b      	ldrh	r3, [r3, #0]
 80040ae:	0298      	lsls	r0, r3, #10
 80040b0:	4b3c      	ldr	r3, [pc, #240]	; (80041a4 <EE_Init+0x9cc>)
 80040b2:	4003      	ands	r3, r0
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 80040bc:	e053      	b.n	8004166 <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d108      	bne.n	80040d6 <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80040c4:	2101      	movs	r1, #1
 80040c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040c8:	f001 f8b1 	bl	800522e <FI_PageErase>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d012      	beq.n	80040f8 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e05f      	b.n	8004196 <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 80040d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80040dc:	f000 fb5d 	bl	800479a <VerifyPageFullyErased>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d108      	bne.n	80040f8 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 80040e6:	2101      	movs	r1, #1
 80040e8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80040ea:	f001 f8a0 	bl	800522e <FI_PageErase>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e04e      	b.n	8004196 <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80040f8:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <EE_Init+0x9c8>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	029a      	lsls	r2, r3, #10
 80040fe:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <EE_Init+0x9cc>)
 8004100:	4013      	ands	r3, r2
 8004102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004106:	fbb2 f1f3 	udiv	r1, r2, r3
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	0b1b      	lsrs	r3, r3, #12
 8004112:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	3301      	adds	r3, #1
 8004118:	f003 0103 	and.w	r1, r3, #3
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <EE_Init+0x9c8>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	029a      	lsls	r2, r3, #10
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <EE_Init+0x9cc>)
 8004124:	4013      	ands	r3, r2
 8004126:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800412a:	fbb2 f0f3 	udiv	r0, r2, r3
 800412e:	fb00 f303 	mul.w	r3, r0, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	0b1b      	lsrs	r3, r3, #12
 8004136:	440b      	add	r3, r1
 8004138:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 800413a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004140:	031a      	lsls	r2, r3, #12
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <EE_Init+0x9c8>)
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	0299      	lsls	r1, r3, #10
 8004148:	4b16      	ldr	r3, [pc, #88]	; (80041a4 <EE_Init+0x9cc>)
 800414a:	400b      	ands	r3, r1
 800414c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004150:	fbb1 f1f3 	udiv	r1, r1, r3
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <EE_Init+0x9c8>)
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	0298      	lsls	r0, r3, #10
 800415a:	4b12      	ldr	r3, [pc, #72]	; (80041a4 <EE_Init+0x9cc>)
 800415c:	4003      	ands	r3, r0
 800415e:	fb01 f303 	mul.w	r3, r1, r3
 8004162:	4413      	add	r3, r2
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 8004166:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004168:	6a3b      	ldr	r3, [r7, #32]
 800416a:	429a      	cmp	r2, r3
 800416c:	d1a7      	bne.n	80040be <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800416e:	f001 f89d 	bl	80052ac <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10d      	bne.n	8004194 <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004178:	2100      	movs	r1, #0
 800417a:	2000      	movs	r0, #0
 800417c:	f000 fe6c 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004180:	4603      	mov	r3, r0
 8004182:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 8004184:	89fb      	ldrh	r3, [r7, #14]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d004      	beq.n	8004194 <EE_Init+0x9bc>
 800418a:	89fb      	ldrh	r3, [r7, #14]
 800418c:	2b12      	cmp	r3, #18
 800418e:	d001      	beq.n	8004194 <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 8004190:	2302      	movs	r3, #2
 8004192:	e000      	b.n	8004196 <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3740      	adds	r7, #64	; 0x40
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	1fff75e0 	.word	0x1fff75e0
 80041a4:	001ffc00 	.word	0x001ffc00
 80041a8:	200003ae 	.word	0x200003ae

080041ac <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 80041ba:	f001 f899 	bl	80052f0 <FI_CheckBankConfig>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 80041c4:	230e      	movs	r3, #14
 80041c6:	e083      	b.n	80042d0 <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <EE_Format+0x12c>)
 80041ca:	881b      	ldrh	r3, [r3, #0]
 80041cc:	029a      	lsls	r2, r3, #10
 80041ce:	4b43      	ldr	r3, [pc, #268]	; (80042dc <EE_Format+0x130>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80041d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	0b1b      	lsrs	r3, r3, #12
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e034      	b.n	8004250 <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d108      	bne.n	80041fe <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 80041ec:	2101      	movs	r1, #1
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f001 f81d 	bl	800522e <FI_PageErase>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d027      	beq.n	800424a <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e068      	b.n	80042d0 <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004204:	031a      	lsls	r2, r3, #12
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <EE_Format+0x12c>)
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	0299      	lsls	r1, r3, #10
 800420c:	4b33      	ldr	r3, [pc, #204]	; (80042dc <EE_Format+0x130>)
 800420e:	400b      	ands	r3, r1
 8004210:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004214:	fbb1 f1f3 	udiv	r1, r1, r3
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <EE_Format+0x12c>)
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	0298      	lsls	r0, r3, #10
 800421e:	4b2f      	ldr	r3, [pc, #188]	; (80042dc <EE_Format+0x130>)
 8004220:	4003      	ands	r3, r0
 8004222:	fb01 f303 	mul.w	r3, r1, r3
 8004226:	4413      	add	r3, r2
 8004228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fab4 	bl	800479a <VerifyPageFullyErased>
 8004232:	4603      	mov	r3, r0
 8004234:	2b10      	cmp	r3, #16
 8004236:	d108      	bne.n	800424a <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 8004238:	2101      	movs	r1, #1
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fff7 	bl	800522e <FI_PageErase>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e042      	b.n	80042d0 <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <EE_Format+0x12c>)
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	029a      	lsls	r2, r3, #10
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <EE_Format+0x130>)
 8004258:	4013      	ands	r3, r2
 800425a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800425e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004262:	fb01 f303 	mul.w	r3, r1, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	0b1b      	lsrs	r3, r3, #12
 800426a:	3304      	adds	r3, #4
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	429a      	cmp	r2, r3
 8004270:	d3b9      	bcc.n	80041e6 <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8004272:	f001 f81b 	bl	80052ac <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <EE_Format+0x12c>)
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	029a      	lsls	r2, r3, #10
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <EE_Format+0x130>)
 800427e:	4013      	ands	r3, r2
 8004280:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004284:	fbb2 f1f3 	udiv	r1, r2, r3
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	0b1b      	lsrs	r3, r3, #12
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fe66 	bl	8004f64 <SetPageState>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 800429e:	2302      	movs	r3, #2
 80042a0:	e016      	b.n	80042d0 <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 80042a2:	4b0f      	ldr	r3, [pc, #60]	; (80042e0 <EE_Format+0x134>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <EE_Format+0x12c>)
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	029a      	lsls	r2, r3, #10
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <EE_Format+0x130>)
 80042b0:	4013      	ands	r3, r2
 80042b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042b6:	fbb2 f1f3 	udiv	r1, r2, r3
 80042ba:	fb01 f303 	mul.w	r3, r1, r3
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	0b1b      	lsrs	r3, r3, #12
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <EE_Format+0x138>)
 80042c6:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 80042c8:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <EE_Format+0x13c>)
 80042ca:	2220      	movs	r2, #32
 80042cc:	601a      	str	r2, [r3, #0]

  return EE_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	1fff75e0 	.word	0x1fff75e0
 80042dc:	001ffc00 	.word	0x001ffc00
 80042e0:	200003ac 	.word	0x200003ac
 80042e4:	200003ae 	.word	0x200003ae
 80042e8:	20000008 	.word	0x20000008

080042ec <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	4603      	mov	r3, r0
 80042f4:	6039      	str	r1, [r7, #0]
 80042f6:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d016      	beq.n	800432c <EE_ReadVariable32bits+0x40>
 80042fe:	88fb      	ldrh	r3, [r7, #6]
 8004300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004304:	4293      	cmp	r3, r2
 8004306:	d011      	beq.n	800432c <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 8004310:	f107 0208 	add.w	r2, r7, #8
 8004314:	88fb      	ldrh	r3, [r7, #6]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f000 f94b 	bl	80045b4 <ReadVariable>
 800431e:	4603      	mov	r3, r0
 8004320:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	601a      	str	r2, [r3, #0]

    return status;
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	e000      	b.n	800432e <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 800432c:	2308      	movs	r3, #8
  } 
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	4603      	mov	r3, r0
 800433e:	6039      	str	r1, [r7, #0]
 8004340:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 8004342:	88fb      	ldrh	r3, [r7, #6]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <EE_WriteVariable32bits+0x2a>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800434e:	4293      	cmp	r3, r2
 8004350:	d006      	beq.n	8004360 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 8004352:	88fb      	ldrh	r3, [r7, #6]
 8004354:	6839      	ldr	r1, [r7, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fa00 	bl	800475c <WriteVariable>
 800435c:	4603      	mov	r3, r0
 800435e:	e000      	b.n	8004362 <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004360:	2308      	movs	r3, #8
  } 
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 8004382:	2305      	movs	r3, #5
 8004384:	71fb      	strb	r3, [r7, #7]
 8004386:	2305      	movs	r3, #5
 8004388:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800438a:	4b3f      	ldr	r3, [pc, #252]	; (8004488 <EE_CleanUp+0x11c>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	029a      	lsls	r2, r3, #10
 8004390:	4b3e      	ldr	r3, [pc, #248]	; (800448c <EE_CleanUp+0x120>)
 8004392:	4013      	ands	r3, r2
 8004394:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004398:	fbb2 f1f3 	udiv	r1, r2, r3
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	0b1b      	lsrs	r3, r3, #12
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	e059      	b.n	800445c <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80043ae:	031a      	lsls	r2, r3, #12
 80043b0:	4b35      	ldr	r3, [pc, #212]	; (8004488 <EE_CleanUp+0x11c>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	0299      	lsls	r1, r3, #10
 80043b6:	4b35      	ldr	r3, [pc, #212]	; (800448c <EE_CleanUp+0x120>)
 80043b8:	400b      	ands	r3, r1
 80043ba:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80043be:	fbb1 f1f3 	udiv	r1, r1, r3
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <EE_CleanUp+0x11c>)
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	0298      	lsls	r0, r3, #10
 80043c8:	4b30      	ldr	r3, [pc, #192]	; (800448c <EE_CleanUp+0x120>)
 80043ca:	4003      	ands	r3, r0
 80043cc:	fb01 f303 	mul.w	r3, r1, r3
 80043d0:	4413      	add	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 fe87 	bl	80050e8 <GetPageState>
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d138      	bne.n	8004456 <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	3301      	adds	r3, #1
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	e022      	b.n	8004432 <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80043f2:	031a      	lsls	r2, r3, #12
 80043f4:	4b24      	ldr	r3, [pc, #144]	; (8004488 <EE_CleanUp+0x11c>)
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	0299      	lsls	r1, r3, #10
 80043fa:	4b24      	ldr	r3, [pc, #144]	; (800448c <EE_CleanUp+0x120>)
 80043fc:	400b      	ands	r3, r1
 80043fe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004402:	fbb1 f1f3 	udiv	r1, r1, r3
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <EE_CleanUp+0x11c>)
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	0298      	lsls	r0, r3, #10
 800440c:	4b1f      	ldr	r3, [pc, #124]	; (800448c <EE_CleanUp+0x120>)
 800440e:	4003      	ands	r3, r0
 8004410:	fb01 f303 	mul.w	r3, r1, r3
 8004414:	4413      	add	r3, r2
 8004416:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 8004418:	68b8      	ldr	r0, [r7, #8]
 800441a:	f000 fe65 	bl	80050e8 <GetPageState>
 800441e:	4603      	mov	r3, r0
 8004420:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004422:	79bb      	ldrb	r3, [r7, #6]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d001      	beq.n	800442c <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 8004428:	2305      	movs	r3, #5
 800442a:	e029      	b.n	8004480 <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3301      	adds	r3, #1
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	3302      	adds	r3, #2
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	429a      	cmp	r2, r3
 800443a:	d3d7      	bcc.n	80043ec <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 800443c:	2102      	movs	r1, #2
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f000 fef5 	bl	800522e <FI_PageErase>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e018      	b.n	8004480 <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800444e:	f000 ff2d 	bl	80052ac <FI_CacheFlush>
        
        return EE_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	e014      	b.n	8004480 <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	3302      	adds	r3, #2
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <EE_CleanUp+0x11c>)
 800445e:	881b      	ldrh	r3, [r3, #0]
 8004460:	029a      	lsls	r2, r3, #10
 8004462:	4b0a      	ldr	r3, [pc, #40]	; (800448c <EE_CleanUp+0x120>)
 8004464:	4013      	ands	r3, r2
 8004466:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800446a:	fbb2 f1f3 	udiv	r1, r2, r3
 800446e:	fb01 f303 	mul.w	r3, r1, r3
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	0b1b      	lsrs	r3, r3, #12
 8004476:	3304      	adds	r3, #4
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	429a      	cmp	r2, r3
 800447c:	d394      	bcc.n	80043a8 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800447e:	2305      	movs	r3, #5
}
 8004480:	4618      	mov	r0, r3
 8004482:	3718      	adds	r7, #24
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	1fff75e0 	.word	0x1fff75e0
 800448c:	001ffc00 	.word	0x001ffc00

08004490 <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 80044a6:	2305      	movs	r3, #5
 80044a8:	71fb      	strb	r3, [r7, #7]
 80044aa:	2305      	movs	r3, #5
 80044ac:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 80044ae:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	029a      	lsls	r2, r3, #10
 80044b4:	4b3e      	ldr	r3, [pc, #248]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80044bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	0b1b      	lsrs	r3, r3, #12
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e059      	b.n	8004580 <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80044d2:	031a      	lsls	r2, r3, #12
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	0299      	lsls	r1, r3, #10
 80044da:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044dc:	400b      	ands	r3, r1
 80044de:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80044e2:	fbb1 f1f3 	udiv	r1, r1, r3
 80044e6:	4b31      	ldr	r3, [pc, #196]	; (80045ac <EE_CleanUp_IT+0x11c>)
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	0298      	lsls	r0, r3, #10
 80044ec:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <EE_CleanUp_IT+0x120>)
 80044ee:	4003      	ands	r3, r0
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	4413      	add	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fdf5 	bl	80050e8 <GetPageState>
 80044fe:	4603      	mov	r3, r0
 8004500:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 8004502:	79fb      	ldrb	r3, [r7, #7]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d138      	bne.n	800457a <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e022      	b.n	8004556 <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004516:	031a      	lsls	r2, r3, #12
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <EE_CleanUp_IT+0x11c>)
 800451a:	881b      	ldrh	r3, [r3, #0]
 800451c:	0299      	lsls	r1, r3, #10
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004520:	400b      	ands	r3, r1
 8004522:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004526:	fbb1 f1f3 	udiv	r1, r1, r3
 800452a:	4b20      	ldr	r3, [pc, #128]	; (80045ac <EE_CleanUp_IT+0x11c>)
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	0298      	lsls	r0, r3, #10
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004532:	4003      	ands	r3, r0
 8004534:	fb01 f303 	mul.w	r3, r1, r3
 8004538:	4413      	add	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 800453c:	68b8      	ldr	r0, [r7, #8]
 800453e:	f000 fdd3 	bl	80050e8 <GetPageState>
 8004542:	4603      	mov	r3, r0
 8004544:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 8004546:	79bb      	ldrb	r3, [r7, #6]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d001      	beq.n	8004550 <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 800454c:	2305      	movs	r3, #5
 800454e:	e029      	b.n	80045a4 <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	3301      	adds	r3, #1
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	3302      	adds	r3, #2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d3d7      	bcc.n	8004510 <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004560:	2102      	movs	r1, #2
 8004562:	6978      	ldr	r0, [r7, #20]
 8004564:	f000 fe85 	bl	8005272 <FI_PageErase_IT>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e018      	b.n	80045a4 <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 8004572:	f000 fe9b 	bl	80052ac <FI_CacheFlush>
        return EE_OK;
 8004576:	2300      	movs	r3, #0
 8004578:	e014      	b.n	80045a4 <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3302      	adds	r3, #2
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <EE_CleanUp_IT+0x11c>)
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	029a      	lsls	r2, r3, #10
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <EE_CleanUp_IT+0x120>)
 8004588:	4013      	ands	r3, r2
 800458a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800458e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004592:	fb01 f303 	mul.w	r3, r1, r3
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	0b1b      	lsrs	r3, r3, #12
 800459a:	3304      	adds	r3, #4
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d394      	bcc.n	80044cc <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 80045a2:	2305      	movs	r3, #5
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	1fff75e0 	.word	0x1fff75e0
 80045b0:	001ffc00 	.word	0x001ffc00

080045b4 <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	; 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	2300      	movs	r3, #0
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	2300      	movs	r3, #0
 80045da:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 80045dc:	2305      	movs	r3, #5
 80045de:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 80045e0:	2000      	movs	r0, #0
 80045e2:	f000 f8ff 	bl	80047e4 <FindPage>
 80045e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d101      	bne.n	80045f4 <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e0ab      	b.n	800474c <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 80045f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80045fa:	031a      	lsls	r2, r3, #12
 80045fc:	4b55      	ldr	r3, [pc, #340]	; (8004754 <ReadVariable+0x1a0>)
 80045fe:	881b      	ldrh	r3, [r3, #0]
 8004600:	0299      	lsls	r1, r3, #10
 8004602:	4b55      	ldr	r3, [pc, #340]	; (8004758 <ReadVariable+0x1a4>)
 8004604:	400b      	ands	r3, r1
 8004606:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800460a:	fbb1 f1f3 	udiv	r1, r1, r3
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <ReadVariable+0x1a0>)
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	0298      	lsls	r0, r3, #10
 8004614:	4b50      	ldr	r3, [pc, #320]	; (8004758 <ReadVariable+0x1a4>)
 8004616:	4003      	ands	r3, r0
 8004618:	fb01 f303 	mul.w	r3, r1, r3
 800461c:	4413      	add	r3, r2
 800461e:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 8004620:	6a38      	ldr	r0, [r7, #32]
 8004622:	f000 fd61 	bl	80050e8 <GetPageState>
 8004626:	4603      	mov	r3, r0
 8004628:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 800462a:	e082      	b.n	8004732 <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 800462c:	f640 73f8 	movw	r3, #4088	; 0xff8
 8004630:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 8004632:	e03f      	b.n	80046b4 <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 8004634:	6a3a      	ldr	r2, [r7, #32]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004642:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	bf08      	it	eq
 800464c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004650:	d02d      	beq.n	80046ae <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 8004652:	8a3b      	ldrh	r3, [r7, #16]
 8004654:	88fa      	ldrh	r2, [r7, #6]
 8004656:	429a      	cmp	r2, r3
 8004658:	d129      	bne.n	80046ae <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 800465a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	f04f 0300 	mov.w	r3, #0
 8004666:	000a      	movs	r2, r1
 8004668:	2300      	movs	r3, #0
 800466a:	8a3b      	ldrh	r3, [r7, #16]
 800466c:	4619      	mov	r1, r3
 800466e:	4610      	mov	r0, r2
 8004670:	f000 fdb0 	bl	80051d4 <CalculateCrc>
 8004674:	4603      	mov	r3, r0
 8004676:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004678:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800467c:	f04f 0200 	mov.w	r2, #0
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	0c02      	lsrs	r2, r0, #16
 8004686:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800468a:	0c0b      	lsrs	r3, r1, #16
 800468c:	b293      	uxth	r3, r2
 800468e:	461a      	mov	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4293      	cmp	r3, r2
 8004694:	d10b      	bne.n	80046ae <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 8004696:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	000a      	movs	r2, r1
 80046a4:	2300      	movs	r3, #0
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	601a      	str	r2, [r3, #0]

            return EE_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e04e      	b.n	800474c <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3b08      	subs	r3, #8
 80046b2:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b1f      	cmp	r3, #31
 80046b8:	d8bc      	bhi.n	8004634 <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <ReadVariable+0x1a0>)
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	029a      	lsls	r2, r3, #10
 80046c0:	4b25      	ldr	r3, [pc, #148]	; (8004758 <ReadVariable+0x1a4>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	0b1b      	lsrs	r3, r3, #12
 80046d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	3303      	adds	r3, #3
 80046da:	f003 0103 	and.w	r1, r3, #3
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <ReadVariable+0x1a0>)
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	029a      	lsls	r2, r3, #10
 80046e4:	4b1c      	ldr	r3, [pc, #112]	; (8004758 <ReadVariable+0x1a4>)
 80046e6:	4013      	ands	r3, r2
 80046e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80046ec:	fbb2 f0f3 	udiv	r0, r2, r3
 80046f0:	fb00 f303 	mul.w	r3, r0, r3
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	0b1b      	lsrs	r3, r3, #12
 80046f8:	440b      	add	r3, r1
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
    pageaddress = PAGE_ADDRESS(page);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004702:	031a      	lsls	r2, r3, #12
 8004704:	4b13      	ldr	r3, [pc, #76]	; (8004754 <ReadVariable+0x1a0>)
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	0299      	lsls	r1, r3, #10
 800470a:	4b13      	ldr	r3, [pc, #76]	; (8004758 <ReadVariable+0x1a4>)
 800470c:	400b      	ands	r3, r1
 800470e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004712:	fbb1 f1f3 	udiv	r1, r1, r3
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <ReadVariable+0x1a0>)
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	0298      	lsls	r0, r3, #10
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <ReadVariable+0x1a4>)
 800471e:	4003      	ands	r3, r0
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 8004728:	6a38      	ldr	r0, [r7, #32]
 800472a:	f000 fcdd 	bl	80050e8 <GetPageState>
 800472e:	4603      	mov	r3, r0
 8004730:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 8004732:	7efb      	ldrb	r3, [r7, #27]
 8004734:	2b02      	cmp	r3, #2
 8004736:	f43f af79 	beq.w	800462c <ReadVariable+0x78>
 800473a:	7efb      	ldrb	r3, [r7, #27]
 800473c:	2b03      	cmp	r3, #3
 800473e:	f43f af75 	beq.w	800462c <ReadVariable+0x78>
 8004742:	7efb      	ldrb	r3, [r7, #27]
 8004744:	2b04      	cmp	r3, #4
 8004746:	f43f af71 	beq.w	800462c <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 800474a:	2307      	movs	r3, #7
}
 800474c:	4618      	mov	r0, r3
 800474e:	3728      	adds	r7, #40	; 0x28
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	1fff75e0 	.word	0x1fff75e0
 8004758:	001ffc00 	.word	0x001ffc00

0800475c <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	4603      	mov	r3, r0
 8004764:	6039      	str	r1, [r7, #0]
 8004766:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 800476c:	88fb      	ldrh	r3, [r7, #6]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fb71 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004776:	4603      	mov	r3, r0
 8004778:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	2b12      	cmp	r3, #18
 800477e:	d107      	bne.n	8004790 <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004780:	88fb      	ldrh	r3, [r7, #6]
 8004782:	2200      	movs	r2, #0
 8004784:	6839      	ldr	r1, [r7, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f000 f940 	bl	8004a0c <PagesTransfer>
 800478c:	4603      	mov	r3, r0
 800478e:	e000      	b.n	8004792 <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004790:	89fb      	ldrh	r3, [r7, #14]
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}

0800479a <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 80047a4:	2311      	movs	r3, #17
 80047a6:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 80047ac:	e00f      	b.n	80047ce <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	4413      	add	r3, r2
 80047b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	bf08      	it	eq
 80047be:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80047c2:	d001      	beq.n	80047c8 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 80047c4:	2310      	movs	r3, #16
 80047c6:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	3308      	adds	r3, #8
 80047cc:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d3eb      	bcc.n	80047ae <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 80047d6:	89fb      	ldrh	r3, [r7, #14]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 80047ee:	2305      	movs	r3, #5
 80047f0:	75fb      	strb	r3, [r7, #23]
 80047f2:	2305      	movs	r3, #5
 80047f4:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	2300      	movs	r3, #0
 80047fc:	60fb      	str	r3, [r7, #12]
 80047fe:	2300      	movs	r3, #0
 8004800:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004802:	4b7e      	ldr	r3, [pc, #504]	; (80049fc <FindPage+0x218>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800480e:	031a      	lsls	r2, r3, #12
 8004810:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <FindPage+0x21c>)
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	0299      	lsls	r1, r3, #10
 8004816:	4b7b      	ldr	r3, [pc, #492]	; (8004a04 <FindPage+0x220>)
 8004818:	400b      	ands	r3, r1
 800481a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800481e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004822:	4b77      	ldr	r3, [pc, #476]	; (8004a00 <FindPage+0x21c>)
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	0298      	lsls	r0, r3, #10
 8004828:	4b76      	ldr	r3, [pc, #472]	; (8004a04 <FindPage+0x220>)
 800482a:	4003      	ands	r3, r0
 800482c:	fb01 f303 	mul.w	r3, r1, r3
 8004830:	4413      	add	r3, r2
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fc58 	bl	80050e8 <GetPageState>
 8004838:	4603      	mov	r3, r0
 800483a:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 800483c:	4b70      	ldr	r3, [pc, #448]	; (8004a00 <FindPage+0x21c>)
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	029a      	lsls	r2, r3, #10
 8004842:	4b70      	ldr	r3, [pc, #448]	; (8004a04 <FindPage+0x220>)
 8004844:	4013      	ands	r3, r2
 8004846:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800484a:	fbb2 f1f3 	udiv	r1, r2, r3
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	0b1b      	lsrs	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	3301      	adds	r3, #1
 800485c:	f003 0103 	and.w	r1, r3, #3
 8004860:	4b67      	ldr	r3, [pc, #412]	; (8004a00 <FindPage+0x21c>)
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	029a      	lsls	r2, r3, #10
 8004866:	4b67      	ldr	r3, [pc, #412]	; (8004a04 <FindPage+0x220>)
 8004868:	4013      	ands	r3, r2
 800486a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800486e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004872:	fb00 f303 	mul.w	r3, r0, r3
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	0b1b      	lsrs	r3, r3, #12
 800487a:	440b      	add	r3, r1
 800487c:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004884:	031a      	lsls	r2, r3, #12
 8004886:	4b5e      	ldr	r3, [pc, #376]	; (8004a00 <FindPage+0x21c>)
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	0299      	lsls	r1, r3, #10
 800488c:	4b5d      	ldr	r3, [pc, #372]	; (8004a04 <FindPage+0x220>)
 800488e:	400b      	ands	r3, r1
 8004890:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004894:	fbb1 f1f3 	udiv	r1, r1, r3
 8004898:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <FindPage+0x21c>)
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	0298      	lsls	r0, r3, #10
 800489e:	4b59      	ldr	r3, [pc, #356]	; (8004a04 <FindPage+0x220>)
 80048a0:	4003      	ands	r3, r0
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4413      	add	r3, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fc1d 	bl	80050e8 <GetPageState>
 80048ae:	4603      	mov	r3, r0
 80048b0:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 80048b2:	4b53      	ldr	r3, [pc, #332]	; (8004a00 <FindPage+0x21c>)
 80048b4:	881b      	ldrh	r3, [r3, #0]
 80048b6:	029a      	lsls	r2, r3, #10
 80048b8:	4b52      	ldr	r3, [pc, #328]	; (8004a04 <FindPage+0x220>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80048c4:	fb01 f303 	mul.w	r3, r1, r3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	0b1b      	lsrs	r3, r3, #12
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	3303      	adds	r3, #3
 80048d2:	f003 0103 	and.w	r1, r3, #3
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <FindPage+0x21c>)
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	029a      	lsls	r2, r3, #10
 80048dc:	4b49      	ldr	r3, [pc, #292]	; (8004a04 <FindPage+0x220>)
 80048de:	4013      	ands	r3, r2
 80048e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80048e4:	fbb2 f0f3 	udiv	r0, r2, r3
 80048e8:	fb00 f303 	mul.w	r3, r0, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	0b1b      	lsrs	r3, r3, #12
 80048f0:	440b      	add	r3, r1
 80048f2:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d071      	beq.n	80049de <FindPage+0x1fa>
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	dc77      	bgt.n	80049ee <FindPage+0x20a>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d060      	beq.n	80049c4 <FindPage+0x1e0>
 8004902:	2b01      	cmp	r3, #1
 8004904:	d173      	bne.n	80049ee <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004906:	7dfb      	ldrb	r3, [r7, #23]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d12a      	bne.n	8004962 <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 800490c:	4b3e      	ldr	r3, [pc, #248]	; (8004a08 <FindPage+0x224>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d201      	bcs.n	800491a <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	e06b      	b.n	80049f2 <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 800491a:	7dbb      	ldrb	r3, [r7, #22]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d107      	bne.n	8004930 <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004920:	f7ff fd24 	bl	800436c <EE_CleanUp>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295
 800492e:	e060      	b.n	80049f2 <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004930:	2103      	movs	r1, #3
 8004932:	6938      	ldr	r0, [r7, #16]
 8004934:	f000 fb16 	bl	8004f64 <SetPageState>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 800493e:	f04f 33ff 	mov.w	r3, #4294967295
 8004942:	e056      	b.n	80049f2 <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004944:	2102      	movs	r1, #2
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fb0c 	bl	8004f64 <SetPageState>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295
 8004956:	e04c      	b.n	80049f2 <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004958:	4b2b      	ldr	r3, [pc, #172]	; (8004a08 <FindPage+0x224>)
 800495a:	2220      	movs	r2, #32
 800495c:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	e047      	b.n	80049f2 <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d12a      	bne.n	80049be <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <FindPage+0x224>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004970:	d201      	bcs.n	8004976 <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	e03d      	b.n	80049f2 <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004976:	7dbb      	ldrb	r3, [r7, #22]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d107      	bne.n	800498c <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 800497c:	f7ff fcf6 	bl	800436c <EE_CleanUp>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004986:	f04f 33ff 	mov.w	r3, #4294967295
 800498a:	e032      	b.n	80049f2 <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 800498c:	2103      	movs	r1, #3
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	f000 fae8 	bl	8004f64 <SetPageState>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 800499a:	f04f 33ff 	mov.w	r3, #4294967295
 800499e:	e028      	b.n	80049f2 <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 80049a0:	2101      	movs	r1, #1
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 fade 	bl	8004f64 <SetPageState>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 80049ae:	f04f 33ff 	mov.w	r3, #4294967295
 80049b2:	e01e      	b.n	80049f2 <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 80049b4:	4b14      	ldr	r3, [pc, #80]	; (8004a08 <FindPage+0x224>)
 80049b6:	2220      	movs	r2, #32
 80049b8:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	e019      	b.n	80049f2 <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 80049be:	f04f 33ff 	mov.w	r3, #4294967295
 80049c2:	e016      	b.n	80049f2 <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 80049c4:	7dfb      	ldrb	r3, [r7, #23]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d101      	bne.n	80049ce <FindPage+0x1ea>
      {
        return currentpage;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	e011      	b.n	80049f2 <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 80049ce:	7dfb      	ldrb	r3, [r7, #23]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <FindPage+0x1f4>
        {
          return previouspage;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	e00c      	b.n	80049f2 <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 80049d8:	f04f 33ff 	mov.w	r3, #4294967295
 80049dc:	e009      	b.n	80049f2 <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 80049de:	7dbb      	ldrb	r3, [r7, #22]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <FindPage+0x204>
      {
        return followingpage;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	e004      	b.n	80049f2 <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295
 80049ec:	e001      	b.n	80049f2 <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 80049ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200003ae 	.word	0x200003ae
 8004a00:	1fff75e0 	.word	0x1fff75e0
 8004a04:	001ffc00 	.word	0x001ffc00
 8004a08:	20000008 	.word	0x20000008

08004a0c <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	4603      	mov	r3, r0
 8004a14:	6039      	str	r1, [r7, #0]
 8004a16:	80fb      	strh	r3, [r7, #6]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004a1c:	2305      	movs	r3, #5
 8004a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t pageaddress = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004a2e:	f04f 0200 	mov.w	r2, #0
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004a42:	797b      	ldrb	r3, [r7, #5]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <PagesTransfer+0x40>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e000      	b.n	8004a4e <PagesTransfer+0x42>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fec8 	bl	80047e4 <FindPage>
 8004a54:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a5c:	d101      	bne.n	8004a62 <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004a5e:	2304      	movs	r3, #4
 8004a60:	e1ed      	b.n	8004e3e <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004a62:	4ba4      	ldr	r3, [pc, #656]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004a68:	6a3b      	ldr	r3, [r7, #32]
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	4ba2      	ldr	r3, [pc, #648]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004a6e:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004a70:	4ba2      	ldr	r3, [pc, #648]	; (8004cfc <PagesTransfer+0x2f0>)
 8004a72:	2220      	movs	r2, #32
 8004a74:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004a76:	797b      	ldrb	r3, [r7, #5]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d108      	bne.n	8004a8e <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	6a38      	ldr	r0, [r7, #32]
 8004a80:	f000 fa70 	bl	8004f64 <SetPageState>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e1d7      	b.n	8004e3e <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004a8e:	4b9c      	ldr	r3, [pc, #624]	; (8004d00 <PagesTransfer+0x2f4>)
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	029a      	lsls	r2, r3, #10
 8004a94:	4b9b      	ldr	r3, [pc, #620]	; (8004d04 <PagesTransfer+0x2f8>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a9c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	0b1b      	lsrs	r3, r3, #12
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	3303      	adds	r3, #3
 8004aae:	f003 0103 	and.w	r1, r3, #3
 8004ab2:	4b93      	ldr	r3, [pc, #588]	; (8004d00 <PagesTransfer+0x2f4>)
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	029a      	lsls	r2, r3, #10
 8004ab8:	4b92      	ldr	r3, [pc, #584]	; (8004d04 <PagesTransfer+0x2f8>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ac0:	fbb2 f0f3 	udiv	r0, r2, r3
 8004ac4:	fb00 f303 	mul.w	r3, r0, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	0b1b      	lsrs	r3, r3, #12
 8004acc:	440b      	add	r3, r1
 8004ace:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ad6:	031a      	lsls	r2, r3, #12
 8004ad8:	4b89      	ldr	r3, [pc, #548]	; (8004d00 <PagesTransfer+0x2f4>)
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	0299      	lsls	r1, r3, #10
 8004ade:	4b89      	ldr	r3, [pc, #548]	; (8004d04 <PagesTransfer+0x2f8>)
 8004ae0:	400b      	ands	r3, r1
 8004ae2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ae6:	fbb1 f1f3 	udiv	r1, r1, r3
 8004aea:	4b85      	ldr	r3, [pc, #532]	; (8004d00 <PagesTransfer+0x2f4>)
 8004aec:	881b      	ldrh	r3, [r3, #0]
 8004aee:	0298      	lsls	r0, r3, #10
 8004af0:	4b84      	ldr	r3, [pc, #528]	; (8004d04 <PagesTransfer+0x2f8>)
 8004af2:	4003      	ands	r3, r0
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	4413      	add	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004afc:	69b8      	ldr	r0, [r7, #24]
 8004afe:	f000 faf3 	bl	80050e8 <GetPageState>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d004      	beq.n	8004b1a <PagesTransfer+0x10e>
 8004b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	f040 809e 	bne.w	8004c56 <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004b1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d108      	bne.n	8004b34 <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004b22:	2104      	movs	r1, #4
 8004b24:	6a38      	ldr	r0, [r7, #32]
 8004b26:	f000 fa1d 	bl	8004f64 <SetPageState>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004b30:	2302      	movs	r3, #2
 8004b32:	e184      	b.n	8004e3e <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004b34:	4b72      	ldr	r3, [pc, #456]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	029a      	lsls	r2, r3, #10
 8004b3a:	4b72      	ldr	r3, [pc, #456]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b42:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	0b1b      	lsrs	r3, r3, #12
 8004b4e:	6a3a      	ldr	r2, [r7, #32]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	3303      	adds	r3, #3
 8004b54:	f003 0103 	and.w	r1, r3, #3
 8004b58:	4b69      	ldr	r3, [pc, #420]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	029a      	lsls	r2, r3, #10
 8004b5e:	4b69      	ldr	r3, [pc, #420]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b66:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b6a:	fb00 f303 	mul.w	r3, r0, r3
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	0b1b      	lsrs	r3, r3, #12
 8004b72:	440b      	add	r3, r1
 8004b74:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004b7c:	031a      	lsls	r2, r3, #12
 8004b7e:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	0299      	lsls	r1, r3, #10
 8004b84:	4b5f      	ldr	r3, [pc, #380]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b86:	400b      	ands	r3, r1
 8004b88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004b8c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b90:	4b5b      	ldr	r3, [pc, #364]	; (8004d00 <PagesTransfer+0x2f4>)
 8004b92:	881b      	ldrh	r3, [r3, #0]
 8004b94:	0298      	lsls	r0, r3, #10
 8004b96:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <PagesTransfer+0x2f8>)
 8004b98:	4003      	ands	r3, r0
 8004b9a:	fb01 f303 	mul.w	r3, r1, r3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004ba2:	69b8      	ldr	r0, [r7, #24]
 8004ba4:	f000 faa0 	bl	80050e8 <GetPageState>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004bae:	e049      	b.n	8004c44 <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bb4:	2b03      	cmp	r3, #3
 8004bb6:	d108      	bne.n	8004bca <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004bb8:	2104      	movs	r1, #4
 8004bba:	6a38      	ldr	r0, [r7, #32]
 8004bbc:	f000 f9d2 	bl	8004f64 <SetPageState>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d001      	beq.n	8004bca <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e139      	b.n	8004e3e <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004bca:	4b4d      	ldr	r3, [pc, #308]	; (8004d00 <PagesTransfer+0x2f4>)
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	029a      	lsls	r2, r3, #10
 8004bd0:	4b4c      	ldr	r3, [pc, #304]	; (8004d04 <PagesTransfer+0x2f8>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bd8:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	0b1b      	lsrs	r3, r3, #12
 8004be4:	6a3a      	ldr	r2, [r7, #32]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	3303      	adds	r3, #3
 8004bea:	f003 0103 	and.w	r1, r3, #3
 8004bee:	4b44      	ldr	r3, [pc, #272]	; (8004d00 <PagesTransfer+0x2f4>)
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	029a      	lsls	r2, r3, #10
 8004bf4:	4b43      	ldr	r3, [pc, #268]	; (8004d04 <PagesTransfer+0x2f8>)
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004bfc:	fbb2 f0f3 	udiv	r0, r2, r3
 8004c00:	fb00 f303 	mul.w	r3, r0, r3
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	0b1b      	lsrs	r3, r3, #12
 8004c08:	440b      	add	r3, r1
 8004c0a:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c12:	031a      	lsls	r2, r3, #12
 8004c14:	4b3a      	ldr	r3, [pc, #232]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c16:	881b      	ldrh	r3, [r3, #0]
 8004c18:	0299      	lsls	r1, r3, #10
 8004c1a:	4b3a      	ldr	r3, [pc, #232]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c1c:	400b      	ands	r3, r1
 8004c1e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004c22:	fbb1 f1f3 	udiv	r1, r1, r3
 8004c26:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	0298      	lsls	r0, r3, #10
 8004c2c:	4b35      	ldr	r3, [pc, #212]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c2e:	4003      	ands	r3, r0
 8004c30:	fb01 f303 	mul.w	r3, r1, r3
 8004c34:	4413      	add	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004c38:	69b8      	ldr	r0, [r7, #24]
 8004c3a:	f000 fa55 	bl	80050e8 <GetPageState>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d0b1      	beq.n	8004bb0 <PagesTransfer+0x1a4>
 8004c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c50:	2b04      	cmp	r3, #4
 8004c52:	d0ad      	beq.n	8004bb0 <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004c54:	e008      	b.n	8004c68 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004c56:	797b      	ldrb	r3, [r7, #5]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d103      	bne.n	8004c64 <PagesTransfer+0x258>
 8004c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d001      	beq.n	8004c68 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004c64:	230a      	movs	r3, #10
 8004c66:	e0ea      	b.n	8004e3e <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004c68:	797b      	ldrb	r3, [r7, #5]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	f040 809b 	bne.w	8004da6 <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004c70:	2320      	movs	r3, #32
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e031      	b.n	8004cda <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004c76:	4b20      	ldr	r3, [pc, #128]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004c7e:	031a      	lsls	r2, r3, #12
 8004c80:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	0299      	lsls	r1, r3, #10
 8004c86:	4b1f      	ldr	r3, [pc, #124]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c88:	400b      	ands	r3, r1
 8004c8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004c8e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <PagesTransfer+0x2f4>)
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	0298      	lsls	r0, r3, #10
 8004c98:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <PagesTransfer+0x2f8>)
 8004c9a:	4003      	ands	r3, r0
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	441a      	add	r2, r3
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004caa:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004cae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	bf08      	it	eq
 8004cb8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004cbc:	d012      	beq.n	8004ce4 <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <PagesTransfer+0x2e8>)
 8004cc8:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004cca:	4b0c      	ldr	r3, [pc, #48]	; (8004cfc <PagesTransfer+0x2f0>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3308      	adds	r3, #8
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <PagesTransfer+0x2f0>)
 8004cd2:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	61fb      	str	r3, [r7, #28]
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	d3c9      	bcc.n	8004c76 <PagesTransfer+0x26a>
 8004ce2:	e000      	b.n	8004ce6 <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004ce4:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004ce6:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <PagesTransfer+0x2ec>)
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004cec:	2300      	movs	r3, #0
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	e054      	b.n	8004d9c <PagesTransfer+0x390>
 8004cf2:	bf00      	nop
 8004cf4:	200003ac 	.word	0x200003ac
 8004cf8:	200003ae 	.word	0x200003ae
 8004cfc:	20000008 	.word	0x20000008
 8004d00:	1fff75e0 	.word	0x1fff75e0
 8004d04:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004d08:	4b4f      	ldr	r3, [pc, #316]	; (8004e48 <PagesTransfer+0x43c>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	029a      	lsls	r2, r3, #10
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	; (8004e4c <PagesTransfer+0x440>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d16:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d1a:	fb01 f303 	mul.w	r3, r1, r3
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	0b1b      	lsrs	r3, r3, #12
 8004d22:	6a3a      	ldr	r2, [r7, #32]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	3303      	adds	r3, #3
 8004d28:	f003 0103 	and.w	r1, r3, #3
 8004d2c:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <PagesTransfer+0x43c>)
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	029a      	lsls	r2, r3, #10
 8004d32:	4b46      	ldr	r3, [pc, #280]	; (8004e4c <PagesTransfer+0x440>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d3a:	fbb2 f0f3 	udiv	r0, r2, r3
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	0b1b      	lsrs	r3, r3, #12
 8004d46:	440b      	add	r3, r1
 8004d48:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004d50:	031a      	lsls	r2, r3, #12
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <PagesTransfer+0x43c>)
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	0299      	lsls	r1, r3, #10
 8004d58:	4b3c      	ldr	r3, [pc, #240]	; (8004e4c <PagesTransfer+0x440>)
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004d60:	fbb1 f1f3 	udiv	r1, r1, r3
 8004d64:	4b38      	ldr	r3, [pc, #224]	; (8004e48 <PagesTransfer+0x43c>)
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	0298      	lsls	r0, r3, #10
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <PagesTransfer+0x440>)
 8004d6c:	4003      	ands	r3, r0
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	4413      	add	r3, r2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f9b7 	bl	80050e8 <GetPageState>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8004d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d84:	2b03      	cmp	r3, #3
 8004d86:	d10d      	bne.n	8004da4 <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8004d88:	4b31      	ldr	r3, [pc, #196]	; (8004e50 <PagesTransfer+0x444>)
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <PagesTransfer+0x444>)
 8004d94:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	61fb      	str	r3, [r7, #28]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d9b2      	bls.n	8004d08 <PagesTransfer+0x2fc>
 8004da2:	e000      	b.n	8004da6 <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 8004da4:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	6839      	ldr	r1, [r7, #0]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f854 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 8004db6:	2302      	movs	r3, #2
 8004db8:	e041      	b.n	8004e3e <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8004dba:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <PagesTransfer+0x444>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d903      	bls.n	8004dca <PagesTransfer+0x3be>
 8004dc2:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <PagesTransfer+0x444>)
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	3b02      	subs	r3, #2
 8004dc8:	e000      	b.n	8004dcc <PagesTransfer+0x3c0>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e026      	b.n	8004e1e <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8004dd0:	88fb      	ldrh	r3, [r7, #6]
 8004dd2:	69fa      	ldr	r2, [r7, #28]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d01f      	beq.n	8004e18 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	f107 0208 	add.w	r2, r7, #8
 8004de0:	4611      	mov	r1, r2
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fbe6 	bl	80045b4 <ReadVariable>
 8004de8:	4603      	mov	r3, r0
 8004dea:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 8004dec:	89fb      	ldrh	r3, [r7, #14]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f82c 	bl	8004e58 <VerifyPagesFullWriteVariable>
 8004e00:	4603      	mov	r3, r0
 8004e02:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 8004e04:	89fb      	ldrh	r3, [r7, #14]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <PagesTransfer+0x40c>
        {
          return status;
 8004e0a:	89fb      	ldrh	r3, [r7, #14]
 8004e0c:	e017      	b.n	8004e3e <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 8004e0e:	89fb      	ldrh	r3, [r7, #14]
 8004e10:	2b07      	cmp	r3, #7
 8004e12:	d001      	beq.n	8004e18 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 8004e14:	89fb      	ldrh	r3, [r7, #14]
 8004e16:	e012      	b.n	8004e3e <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	2b32      	cmp	r3, #50	; 0x32
 8004e22:	d9d5      	bls.n	8004dd0 <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8004e24:	4b0b      	ldr	r3, [pc, #44]	; (8004e54 <PagesTransfer+0x448>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2102      	movs	r1, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 f89a 	bl	8004f64 <SetPageState>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 8004e36:	2302      	movs	r3, #2
 8004e38:	e001      	b.n	8004e3e <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 8004e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3728      	adds	r7, #40	; 0x28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	1fff75e0 	.word	0x1fff75e0
 8004e4c:	001ffc00 	.word	0x001ffc00
 8004e50:	200003ac 	.word	0x200003ac
 8004e54:	200003ae 	.word	0x200003ae

08004e58 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8004e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e5c:	b08b      	sub	sp, #44	; 0x2c
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	4603      	mov	r3, r0
 8004e62:	6139      	str	r1, [r7, #16]
 8004e64:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 8004e6a:	4b3a      	ldr	r3, [pc, #232]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004e6c:	881b      	ldrh	r3, [r3, #0]
 8004e6e:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 8004e72:	d301      	bcc.n	8004e78 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 8004e74:	2312      	movs	r3, #18
 8004e76:	e068      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f7ff fcb3 	bl	80047e4 <FindPage>
 8004e7e:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	d101      	bne.n	8004e90 <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e05c      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004e96:	0319      	lsls	r1, r3, #12
 8004e98:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <VerifyPagesFullWriteVariable+0x100>)
 8004e9a:	881b      	ldrh	r3, [r3, #0]
 8004e9c:	029a      	lsls	r2, r3, #10
 8004e9e:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <VerifyPagesFullWriteVariable+0x104>)
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ea6:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eaa:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <VerifyPagesFullWriteVariable+0x100>)
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	0298      	lsls	r0, r3, #10
 8004eb0:	4b2a      	ldr	r3, [pc, #168]	; (8004f5c <VerifyPagesFullWriteVariable+0x104>)
 8004eb2:	4003      	ands	r3, r0
 8004eb4:	fb02 f303 	mul.w	r3, r2, r3
 8004eb8:	440b      	add	r3, r1
 8004eba:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d105      	bne.n	8004ece <VerifyPagesFullWriteVariable+0x76>
 8004ec2:	8afb      	ldrh	r3, [r7, #22]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ecc:	e006      	b.n	8004edc <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 8004ece:	8afb      	ldrh	r3, [r7, #22]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	6938      	ldr	r0, [r7, #16]
 8004ed4:	f000 f97e 	bl	80051d4 <CalculateCrc>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	18d0      	adds	r0, r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	60fa      	str	r2, [r7, #12]
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	000b      	movs	r3, r1
 8004ef8:	2200      	movs	r2, #0
 8004efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004efc:	0409      	lsls	r1, r1, #16
 8004efe:	2600      	movs	r6, #0
 8004f00:	468a      	mov	sl, r1
 8004f02:	46b3      	mov	fp, r6
 8004f04:	ea42 040a 	orr.w	r4, r2, sl
 8004f08:	ea43 050b 	orr.w	r5, r3, fp
 8004f0c:	8afb      	ldrh	r3, [r7, #22]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	4698      	mov	r8, r3
 8004f12:	4691      	mov	r9, r2
 8004f14:	ea44 0308 	orr.w	r3, r4, r8
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	ea45 0309 	orr.w	r3, r5, r9
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f24:	f000 f972 	bl	800520c <FI_WriteDoubleWord>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e00b      	b.n	8004f4a <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004f32:	4b0b      	ldr	r3, [pc, #44]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <VerifyPagesFullWriteVariable+0x108>)
 8004f3a:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004f3e:	881b      	ldrh	r3, [r3, #0]
 8004f40:	3301      	adds	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <VerifyPagesFullWriteVariable+0xfc>)
 8004f46:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	372c      	adds	r7, #44	; 0x2c
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	200003ac 	.word	0x200003ac
 8004f58:	1fff75e0 	.word	0x1fff75e0
 8004f5c:	001ffc00 	.word	0x001ffc00
 8004f60:	20000008 	.word	0x20000008

08004f64 <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b086      	sub	sp, #24
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	2300      	movs	r3, #0
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f86:	031a      	lsls	r2, r3, #12
 8004f88:	4b54      	ldr	r3, [pc, #336]	; (80050dc <SetPageState+0x178>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	0299      	lsls	r1, r3, #10
 8004f8e:	4b54      	ldr	r3, [pc, #336]	; (80050e0 <SetPageState+0x17c>)
 8004f90:	400b      	ands	r3, r1
 8004f92:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004f96:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f9a:	4b50      	ldr	r3, [pc, #320]	; (80050dc <SetPageState+0x178>)
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	0298      	lsls	r0, r3, #10
 8004fa0:	4b4f      	ldr	r3, [pc, #316]	; (80050e0 <SetPageState+0x17c>)
 8004fa2:	4003      	ands	r3, r0
 8004fa4:	fb01 f303 	mul.w	r3, r1, r3
 8004fa8:	4413      	add	r3, r2
 8004faa:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fb2:	031a      	lsls	r2, r3, #12
 8004fb4:	4b49      	ldr	r3, [pc, #292]	; (80050dc <SetPageState+0x178>)
 8004fb6:	881b      	ldrh	r3, [r3, #0]
 8004fb8:	0299      	lsls	r1, r3, #10
 8004fba:	4b49      	ldr	r3, [pc, #292]	; (80050e0 <SetPageState+0x17c>)
 8004fbc:	400b      	ands	r3, r1
 8004fbe:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004fc2:	fbb1 f1f3 	udiv	r1, r1, r3
 8004fc6:	4b45      	ldr	r3, [pc, #276]	; (80050dc <SetPageState+0x178>)
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	0298      	lsls	r0, r3, #10
 8004fcc:	4b44      	ldr	r3, [pc, #272]	; (80050e0 <SetPageState+0x17c>)
 8004fce:	4003      	ands	r3, r0
 8004fd0:	fb01 f303 	mul.w	r3, r1, r3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004fe0:	031a      	lsls	r2, r3, #12
 8004fe2:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <SetPageState+0x178>)
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	0299      	lsls	r1, r3, #10
 8004fe8:	4b3d      	ldr	r3, [pc, #244]	; (80050e0 <SetPageState+0x17c>)
 8004fea:	400b      	ands	r3, r1
 8004fec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ff0:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ff4:	4b39      	ldr	r3, [pc, #228]	; (80050dc <SetPageState+0x178>)
 8004ff6:	881b      	ldrh	r3, [r3, #0]
 8004ff8:	0298      	lsls	r0, r3, #10
 8004ffa:	4b39      	ldr	r3, [pc, #228]	; (80050e0 <SetPageState+0x17c>)
 8004ffc:	4003      	ands	r3, r0
 8004ffe:	fb01 f303 	mul.w	r3, r1, r3
 8005002:	4413      	add	r3, r2
 8005004:	3310      	adds	r3, #16
 8005006:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800500e:	031a      	lsls	r2, r3, #12
 8005010:	4b32      	ldr	r3, [pc, #200]	; (80050dc <SetPageState+0x178>)
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	0299      	lsls	r1, r3, #10
 8005016:	4b32      	ldr	r3, [pc, #200]	; (80050e0 <SetPageState+0x17c>)
 8005018:	400b      	ands	r3, r1
 800501a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800501e:	fbb1 f1f3 	udiv	r1, r1, r3
 8005022:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <SetPageState+0x178>)
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	0298      	lsls	r0, r3, #10
 8005028:	4b2d      	ldr	r3, [pc, #180]	; (80050e0 <SetPageState+0x17c>)
 800502a:	4003      	ands	r3, r0
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	4413      	add	r3, r2
 8005032:	3318      	adds	r3, #24
 8005034:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 8005036:	78fb      	ldrb	r3, [r7, #3]
 8005038:	3b01      	subs	r3, #1
 800503a:	2b03      	cmp	r3, #3
 800503c:	d844      	bhi.n	80050c8 <SetPageState+0x164>
 800503e:	a201      	add	r2, pc, #4	; (adr r2, 8005044 <SetPageState+0xe0>)
 8005040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005044:	08005055 	.word	0x08005055
 8005048:	08005077 	.word	0x08005077
 800504c:	08005099 	.word	0x08005099
 8005050:	080050b1 	.word	0x080050b1
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 8005054:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8005058:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800505c:	6978      	ldr	r0, [r7, #20]
 800505e:	f000 f8d5 	bl	800520c <FI_WriteDoubleWord>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005068:	2302      	movs	r3, #2
 800506a:	e033      	b.n	80050d4 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <SetPageState+0x180>)
 8005072:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005074:	e02d      	b.n	80050d2 <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 8005076:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800507a:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 800507e:	6938      	ldr	r0, [r7, #16]
 8005080:	f000 f8c4 	bl	800520c <FI_WriteDoubleWord>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 800508a:	2302      	movs	r3, #2
 800508c:	e022      	b.n	80050d4 <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b14      	ldr	r3, [pc, #80]	; (80050e4 <SetPageState+0x180>)
 8005094:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005096:	e01c      	b.n	80050d2 <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005098:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800509c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f8b3 	bl	800520c <FI_WriteDoubleWord>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00f      	beq.n	80050cc <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 80050ac:	2302      	movs	r3, #2
 80050ae:	e011      	b.n	80050d4 <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 80050b0:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80050b4:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 80050b8:	68b8      	ldr	r0, [r7, #8]
 80050ba:	f000 f8a7 	bl	800520c <FI_WriteDoubleWord>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 80050c4:	2302      	movs	r3, #2
 80050c6:	e005      	b.n	80050d4 <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 80050c8:	bf00      	nop
 80050ca:	e002      	b.n	80050d2 <SetPageState+0x16e>
    break;
 80050cc:	bf00      	nop
 80050ce:	e000      	b.n	80050d2 <SetPageState+0x16e>
    break;
 80050d0:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	1fff75e0 	.word	0x1fff75e0
 80050e0:	001ffc00 	.word	0x001ffc00
 80050e4:	200003ae 	.word	0x200003ae

080050e8 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b08b      	sub	sp, #44	; 0x2c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	f04f 0300 	mov.w	r3, #0
 8005110:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3308      	adds	r3, #8
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3310      	adds	r3, #16
 800513a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	3318      	adds	r3, #24
 8005146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514a:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 800514e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	bf08      	it	eq
 8005158:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800515c:	d001      	beq.n	8005162 <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 800515e:	2304      	movs	r3, #4
 8005160:	e01e      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 8005162:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516a:	bf08      	it	eq
 800516c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005170:	d001      	beq.n	8005176 <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 8005172:	2303      	movs	r3, #3
 8005174:	e014      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 8005176:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	bf08      	it	eq
 8005180:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005184:	d001      	beq.n	800518a <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 8005186:	2302      	movs	r3, #2
 8005188:	e00a      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 800518a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800518e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005192:	bf08      	it	eq
 8005194:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005198:	d001      	beq.n	800519e <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 800519e:	2300      	movs	r3, #0
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	372c      	adds	r7, #44	; 0x2c
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80051b0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80051b4:	f7fe fa9a 	bl	80036ec <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 80051b8:	f248 0105 	movw	r1, #32773	; 0x8005
 80051bc:	4804      	ldr	r0, [pc, #16]	; (80051d0 <ConfigureCrc+0x24>)
 80051be:	f7fe fad1 	bl	8003764 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 80051c2:	2108      	movs	r1, #8
 80051c4:	4802      	ldr	r0, [pc, #8]	; (80051d0 <ConfigureCrc+0x24>)
 80051c6:	f7fe faba 	bl	800373e <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 80051ca:	bf00      	nop
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023000 	.word	0x40023000

080051d4 <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 80051e0:	4809      	ldr	r0, [pc, #36]	; (8005208 <CalculateCrc+0x34>)
 80051e2:	f7fe fa9c 	bl	800371e <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4807      	ldr	r0, [pc, #28]	; (8005208 <CalculateCrc+0x34>)
 80051ea:	f7fe fac9 	bl	8003780 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 80051ee:	887b      	ldrh	r3, [r7, #2]
 80051f0:	4619      	mov	r1, r3
 80051f2:	4805      	ldr	r0, [pc, #20]	; (8005208 <CalculateCrc+0x34>)
 80051f4:	f7fe fad2 	bl	800379c <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 80051f8:	4803      	ldr	r0, [pc, #12]	; (8005208 <CalculateCrc+0x34>)
 80051fa:	f7fe fae0 	bl	80037be <LL_CRC_ReadData16>
 80051fe:	4603      	mov	r3, r0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40023000 	.word	0x40023000

0800520c <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 8005218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800521c:	68f9      	ldr	r1, [r7, #12]
 800521e:	2001      	movs	r0, #1
 8005220:	f007 f8d2 	bl	800c3c8 <HAL_FLASH_Program>
 8005224:	4603      	mov	r3, r0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005242:	2302      	movs	r3, #2
 8005244:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 8005246:	887b      	ldrh	r3, [r7, #2]
 8005248:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 800524e:	f107 020c 	add.w	r2, r7, #12
 8005252:	f107 0310 	add.w	r3, r7, #16
 8005256:	4611      	mov	r1, r2
 8005258:	4618      	mov	r0, r3
 800525a:	f007 f9cb 	bl	800c5f4 <HAL_FLASHEx_Erase>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d001      	beq.n	8005268 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005268:	8bfb      	ldrh	r3, [r7, #30]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	460b      	mov	r3, r1
 800527c:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005282:	2302      	movs	r3, #2
 8005284:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 8005286:	887b      	ldrh	r3, [r7, #2]
 8005288:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4618      	mov	r0, r3
 8005294:	f007 f9fe 	bl	800c694 <HAL_FLASHEx_Erase_IT>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 80052a2:	8afb      	ldrh	r3, [r7, #22]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <FI_CacheFlush+0x40>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0d      	ldr	r2, [pc, #52]	; (80052ec <FI_CacheFlush+0x40>)
 80052b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ba:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <FI_CacheFlush+0x40>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0a      	ldr	r2, [pc, #40]	; (80052ec <FI_CacheFlush+0x40>)
 80052c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <FI_CacheFlush+0x40>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a07      	ldr	r2, [pc, #28]	; (80052ec <FI_CacheFlush+0x40>)
 80052ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052d2:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <FI_CacheFlush+0x40>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <FI_CacheFlush+0x40>)
 80052da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	58004000 	.word	0x58004000

080052f0 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 80052f0:	b480      	push	{r7}
 80052f2:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 80052f4:	2300      	movs	r3, #0
#endif
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005310:	f023 0218 	bic.w	r2, r3, #24
 8005314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005334:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800533a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4313      	orrs	r3, r2
 8005342:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4013      	ands	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005350:	68fb      	ldr	r3, [r7, #12]
}
 8005352:	bf00      	nop
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005368:	f000 f834 	bl	80053d4 <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a12      	ldr	r2, [pc, #72]	; (80053b8 <serialOut+0x58>)
 8005370:	4912      	ldr	r1, [pc, #72]	; (80053bc <serialOut+0x5c>)
 8005372:	4813      	ldr	r0, [pc, #76]	; (80053c0 <serialOut+0x60>)
 8005374:	f00d ff44 	bl	8013200 <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005378:	4811      	ldr	r0, [pc, #68]	; (80053c0 <serialOut+0x60>)
 800537a:	f7fa ff01 	bl	8000180 <strlen>
 800537e:	4603      	mov	r3, r0
 8005380:	b29a      	uxth	r2, r3
 8005382:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005386:	490e      	ldr	r1, [pc, #56]	; (80053c0 <serialOut+0x60>)
 8005388:	480e      	ldr	r0, [pc, #56]	; (80053c4 <serialOut+0x64>)
 800538a:	f00b fc1b 	bl	8010bc4 <HAL_UART_Transmit>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 8005394:	4b0c      	ldr	r3, [pc, #48]	; (80053c8 <serialOut+0x68>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d006      	beq.n	80053ae <serialOut+0x4e>
 80053a0:	490a      	ldr	r1, [pc, #40]	; (80053cc <serialOut+0x6c>)
 80053a2:	480b      	ldr	r0, [pc, #44]	; (80053d0 <serialOut+0x70>)
 80053a4:	f00d ff2c 	bl	8013200 <siprintf>
 80053a8:	4809      	ldr	r0, [pc, #36]	; (80053d0 <serialOut+0x70>)
 80053aa:	f7ff ffd9 	bl	8005360 <serialOut>
  }
}
 80053ae:	bf00      	nop
 80053b0:	3708      	adds	r7, #8
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20000a5c 	.word	0x20000a5c
 80053bc:	08016578 	.word	0x08016578
 80053c0:	20000a68 	.word	0x20000a68
 80053c4:	2000044c 	.word	0x2000044c
 80053c8:	2000000c 	.word	0x2000000c
 80053cc:	08016580 	.word	0x08016580
 80053d0:	20000b64 	.word	0x20000b64

080053d4 <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	609a      	str	r2, [r3, #8]
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	2201      	movs	r2, #1
 80053f4:	4619      	mov	r1, r3
 80053f6:	480e      	ldr	r0, [pc, #56]	; (8005430 <getTimeBCD+0x5c>)
 80053f8:	f009 fc6a 	bl	800ecd0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80053fc:	1d3b      	adds	r3, r7, #4
 80053fe:	2201      	movs	r2, #1
 8005400:	4619      	mov	r1, r3
 8005402:	480b      	ldr	r0, [pc, #44]	; (8005430 <getTimeBCD+0x5c>)
 8005404:	f009 fd6e 	bl	800eee4 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 8005408:	7abb      	ldrb	r3, [r7, #10]
 800540a:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 800540c:	7a7b      	ldrb	r3, [r7, #9]
 800540e:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 8005410:	7a3b      	ldrb	r3, [r7, #8]
 8005412:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 8005414:	7f7a      	ldrb	r2, [r7, #29]
 8005416:	7fb9      	ldrb	r1, [r7, #30]
 8005418:	7ffb      	ldrb	r3, [r7, #31]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	460b      	mov	r3, r1
 800541e:	4905      	ldr	r1, [pc, #20]	; (8005434 <getTimeBCD+0x60>)
 8005420:	4805      	ldr	r0, [pc, #20]	; (8005438 <getTimeBCD+0x64>)
 8005422:	f00d feed 	bl	8013200 <siprintf>
}
 8005426:	bf00      	nop
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	200004ec 	.word	0x200004ec
 8005434:	080165a4 	.word	0x080165a4
 8005438:	20000a5c 	.word	0x20000a5c

0800543c <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 800543c:	b5b0      	push	{r4, r5, r7, lr}
 800543e:	b092      	sub	sp, #72	; 0x48
 8005440:	af00      	add	r7, sp, #0
 8005442:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 8005446:	463b      	mov	r3, r7
 8005448:	4618      	mov	r0, r3
 800544a:	f00c fd97 	bl	8011f7c <localtime>
 800544e:	4603      	mov	r3, r0
 8005450:	f107 040c 	add.w	r4, r7, #12
 8005454:	461d      	mov	r5, r3
 8005456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800545a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800545c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	b2db      	uxtb	r3, r3
 800546e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800547a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800547e:	2200      	movs	r2, #0
 8005480:	4619      	mov	r1, r3
 8005482:	4826      	ldr	r0, [pc, #152]	; (800551c <writeRTC+0xe0>)
 8005484:	f009 fb60 	bl	800eb48 <HAL_RTC_SetTime>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00c      	beq.n	80054a8 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 800548e:	4b24      	ldr	r3, [pc, #144]	; (8005520 <writeRTC+0xe4>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <writeRTC+0x6c>
 800549a:	4922      	ldr	r1, [pc, #136]	; (8005524 <writeRTC+0xe8>)
 800549c:	4822      	ldr	r0, [pc, #136]	; (8005528 <writeRTC+0xec>)
 800549e:	f00d feaf 	bl	8013200 <siprintf>
 80054a2:	4821      	ldr	r0, [pc, #132]	; (8005528 <writeRTC+0xec>)
 80054a4:	f7ff ff5c 	bl	8005360 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <writeRTC+0x76>
 80054ae:	2307      	movs	r3, #7
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	3301      	adds	r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	3b64      	subs	r3, #100	; 0x64
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80054da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054de:	2200      	movs	r2, #0
 80054e0:	4619      	mov	r1, r3
 80054e2:	480e      	ldr	r0, [pc, #56]	; (800551c <writeRTC+0xe0>)
 80054e4:	f009 fc50 	bl	800ed88 <HAL_RTC_SetDate>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 80054ee:	4b0c      	ldr	r3, [pc, #48]	; (8005520 <writeRTC+0xe4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d006      	beq.n	8005508 <writeRTC+0xcc>
 80054fa:	490c      	ldr	r1, [pc, #48]	; (800552c <writeRTC+0xf0>)
 80054fc:	480a      	ldr	r0, [pc, #40]	; (8005528 <writeRTC+0xec>)
 80054fe:	f00d fe7f 	bl	8013200 <siprintf>
 8005502:	4809      	ldr	r0, [pc, #36]	; (8005528 <writeRTC+0xec>)
 8005504:	f7ff ff2c 	bl	8005360 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 8005508:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800550c:	2100      	movs	r1, #0
 800550e:	4803      	ldr	r0, [pc, #12]	; (800551c <writeRTC+0xe0>)
 8005510:	f009 fdc1 	bl	800f096 <HAL_RTCEx_BKUPWrite>

}
 8005514:	bf00      	nop
 8005516:	3748      	adds	r7, #72	; 0x48
 8005518:	46bd      	mov	sp, r7
 800551a:	bdb0      	pop	{r4, r5, r7, pc}
 800551c:	200004ec 	.word	0x200004ec
 8005520:	2000000c 	.word	0x2000000c
 8005524:	080165b4 	.word	0x080165b4
 8005528:	20000b64 	.word	0x20000b64
 800552c:	080165dc 	.word	0x080165dc

08005530 <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b094      	sub	sp, #80	; 0x50
 8005534:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	f04f 0300 	mov.w	r3, #0
 800553e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  struct tm tim = {0};
 8005542:	463b      	mov	r3, r7
 8005544:	2224      	movs	r2, #36	; 0x24
 8005546:	2100      	movs	r1, #0
 8005548:	4618      	mov	r0, r3
 800554a:	f00c fe47 	bl	80121dc <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800554e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005552:	2200      	movs	r2, #0
 8005554:	4619      	mov	r1, r3
 8005556:	4822      	ldr	r0, [pc, #136]	; (80055e0 <readRTC+0xb0>)
 8005558:	f009 fbba 	bl	800ecd0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 800555c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005560:	2200      	movs	r2, #0
 8005562:	4619      	mov	r1, r3
 8005564:	481e      	ldr	r0, [pc, #120]	; (80055e0 <readRTC+0xb0>)
 8005566:	f009 fcbd 	bl	800eee4 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 800556a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800556e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t mm  = rtcTime.Minutes;
 8005572:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005576:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t ss  = rtcTime.Seconds;
 800557a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800557e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  uint8_t d   = rtcDate.Date;
 8005582:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005586:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  uint8_t m   = rtcDate.Month;
 800558a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800558e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint16_t y  = rtcDate.Year;
 8005592:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005596:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 800559a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800559e:	3364      	adds	r3, #100	; 0x64
 80055a0:	87fb      	strh	r3, [r7, #62]	; 0x3e

  tim.tm_year = yr;
 80055a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80055a4:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 80055a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80055aa:	3b01      	subs	r3, #1
 80055ac:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 80055ae:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80055b2:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 80055b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80055b8:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 80055ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80055be:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 80055c0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80055c4:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 80055c6:	463b      	mov	r3, r7
 80055c8:	4618      	mov	r0, r3
 80055ca:	f00c fee7 	bl	801239c <mktime>
 80055ce:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

  return currentTime;
 80055d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 80055d6:	4610      	mov	r0, r2
 80055d8:	4619      	mov	r1, r3
 80055da:	3750      	adds	r7, #80	; 0x50
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	200004ec 	.word	0x200004ec

080055e4 <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 80055ea:	2300      	movs	r3, #0
 80055ec:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80055ee:	2301      	movs	r3, #1
 80055f0:	80fb      	strh	r3, [r7, #6]
 80055f2:	e010      	b.n	8005616 <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <LoadAllEEPROM+0x44>)
 80055fa:	441a      	add	r2, r3
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	4611      	mov	r1, r2
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe fe73 	bl	80042ec <EE_ReadVariable32bits>
 8005606:	4603      	mov	r3, r0
 8005608:	461a      	mov	r2, r3
 800560a:	88bb      	ldrh	r3, [r7, #4]
 800560c:	4313      	orrs	r3, r2
 800560e:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 8005610:	88fb      	ldrh	r3, [r7, #6]
 8005612:	3301      	adds	r3, #1
 8005614:	80fb      	strh	r3, [r7, #6]
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b32      	cmp	r3, #50	; 0x32
 800561a:	d9eb      	bls.n	80055f4 <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 800561c:	88bb      	ldrh	r3, [r7, #4]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	2000098c 	.word	0x2000098c

0800562c <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	4603      	mov	r3, r0
 8005634:	6039      	str	r1, [r7, #0]
 8005636:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 800563c:	f006 ff08 	bl	800c450 <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005640:	4b1c      	ldr	r3, [pc, #112]	; (80056b4 <StoreEEPROM+0x88>)
 8005642:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005646:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005648:	bf00      	nop
 800564a:	4b1a      	ldr	r3, [pc, #104]	; (80056b4 <StoreEEPROM+0x88>)
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005652:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005656:	d0f8      	beq.n	800564a <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 8005658:	bf00      	nop
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <StoreEEPROM+0x8c>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b01      	cmp	r3, #1
 8005660:	d0fb      	beq.n	800565a <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	88fb      	ldrh	r3, [r7, #6]
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f7fe fe64 	bl	8004336 <EE_WriteVariable32bits>
 800566e:	4603      	mov	r3, r0
 8005670:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 8005672:	463a      	mov	r2, r7
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	4611      	mov	r1, r2
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fe37 	bl	80042ec <EE_ReadVariable32bits>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	4313      	orrs	r3, r2
 8005686:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d009      	beq.n	80056a6 <StoreEEPROM+0x7a>
 8005692:	4b09      	ldr	r3, [pc, #36]	; (80056b8 <StoreEEPROM+0x8c>)
 8005694:	2201      	movs	r2, #1
 8005696:	601a      	str	r2, [r3, #0]
 8005698:	f7fe fefa 	bl	8004490 <EE_CleanUp_IT>
 800569c:	4603      	mov	r3, r0
 800569e:	461a      	mov	r2, r3
 80056a0:	89fb      	ldrh	r3, [r7, #14]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 80056a6:	f006 fef5 	bl	800c494 <HAL_FLASH_Lock>

  return eeStatus;
 80056aa:	89fb      	ldrh	r3, [r7, #14]

    */



}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	58004000 	.word	0x58004000
 80056b8:	20000988 	.word	0x20000988

080056bc <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d018      	beq.n	80056fe <switchLedOn+0x42>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	dc1f      	bgt.n	8005710 <switchLedOn+0x54>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <switchLedOn+0x1e>
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d009      	beq.n	80056ec <switchLedOn+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80056d8:	e01a      	b.n	8005710 <switchLedOn+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 80056da:	4b10      	ldr	r3, [pc, #64]	; (800571c <switchLedOn+0x60>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a10      	ldr	r2, [pc, #64]	; (8005720 <switchLedOn+0x64>)
 80056e0:	8811      	ldrh	r1, [r2, #0]
 80056e2:	2201      	movs	r2, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f007 fa13 	bl	800cb10 <HAL_GPIO_WritePin>
            break;
 80056ea:	e012      	b.n	8005712 <switchLedOn+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 80056ec:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <switchLedOn+0x68>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0d      	ldr	r2, [pc, #52]	; (8005728 <switchLedOn+0x6c>)
 80056f2:	8811      	ldrh	r1, [r2, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4618      	mov	r0, r3
 80056f8:	f007 fa0a 	bl	800cb10 <HAL_GPIO_WritePin>
            break;
 80056fc:	e009      	b.n	8005712 <switchLedOn+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <switchLedOn+0x70>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a0b      	ldr	r2, [pc, #44]	; (8005730 <switchLedOn+0x74>)
 8005704:	8811      	ldrh	r1, [r2, #0]
 8005706:	2201      	movs	r2, #1
 8005708:	4618      	mov	r0, r3
 800570a:	f007 fa01 	bl	800cb10 <HAL_GPIO_WritePin>
            break;
 800570e:	e000      	b.n	8005712 <switchLedOn+0x56>
        default: break;
 8005710:	bf00      	nop
    }
}
 8005712:	bf00      	nop
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	20000cf0 	.word	0x20000cf0
 8005720:	20000cec 	.word	0x20000cec
 8005724:	20000ce8 	.word	0x20000ce8
 8005728:	20000ce6 	.word	0x20000ce6
 800572c:	20000cf8 	.word	0x20000cf8
 8005730:	20000cf4 	.word	0x20000cf4

08005734 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	4603      	mov	r3, r0
 800573c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d018      	beq.n	8005776 <switchLedOff+0x42>
 8005744:	2b02      	cmp	r3, #2
 8005746:	dc1f      	bgt.n	8005788 <switchLedOff+0x54>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <switchLedOff+0x1e>
 800574c:	2b01      	cmp	r3, #1
 800574e:	d009      	beq.n	8005764 <switchLedOff+0x30>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8005750:	e01a      	b.n	8005788 <switchLedOff+0x54>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8005752:	4b10      	ldr	r3, [pc, #64]	; (8005794 <switchLedOff+0x60>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a10      	ldr	r2, [pc, #64]	; (8005798 <switchLedOff+0x64>)
 8005758:	8811      	ldrh	r1, [r2, #0]
 800575a:	2200      	movs	r2, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f007 f9d7 	bl	800cb10 <HAL_GPIO_WritePin>
            break;
 8005762:	e012      	b.n	800578a <switchLedOff+0x56>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 8005764:	4b0d      	ldr	r3, [pc, #52]	; (800579c <switchLedOff+0x68>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <switchLedOff+0x6c>)
 800576a:	8811      	ldrh	r1, [r2, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f007 f9ce 	bl	800cb10 <HAL_GPIO_WritePin>
            break;
 8005774:	e009      	b.n	800578a <switchLedOff+0x56>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 8005776:	4b0b      	ldr	r3, [pc, #44]	; (80057a4 <switchLedOff+0x70>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a0b      	ldr	r2, [pc, #44]	; (80057a8 <switchLedOff+0x74>)
 800577c:	8811      	ldrh	r1, [r2, #0]
 800577e:	2200      	movs	r2, #0
 8005780:	4618      	mov	r0, r3
 8005782:	f007 f9c5 	bl	800cb10 <HAL_GPIO_WritePin>
            break;
 8005786:	e000      	b.n	800578a <switchLedOff+0x56>
        default: break;
 8005788:	bf00      	nop
    }
}
 800578a:	bf00      	nop
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000cf0 	.word	0x20000cf0
 8005798:	20000cec 	.word	0x20000cec
 800579c:	20000ce8 	.word	0x20000ce8
 80057a0:	20000ce6 	.word	0x20000ce6
 80057a4:	20000cf8 	.word	0x20000cf8
 80057a8:	20000cf4 	.word	0x20000cf4

080057ac <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN1_INT_Pin){
 80057b6:	4b36      	ldr	r3, [pc, #216]	; (8005890 <HAL_GPIO_EXTI_Callback+0xe4>)
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d063      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 80057c0:	4b34      	ldr	r3, [pc, #208]	; (8005894 <HAL_GPIO_EXTI_Callback+0xe8>)
 80057c2:	881b      	ldrh	r3, [r3, #0]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d103      	bne.n	80057d2 <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 80057ca:	4b33      	ldr	r3, [pc, #204]	; (8005898 <HAL_GPIO_EXTI_Callback+0xec>)
 80057cc:	2201      	movs	r2, #1
 80057ce:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON2_Pin){

  }else if(GPIO_Pin == BUTTON3_Pin){

  }
}
 80057d0:	e05a      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 80057d2:	4b32      	ldr	r3, [pc, #200]	; (800589c <HAL_GPIO_EXTI_Callback+0xf0>)
 80057d4:	881b      	ldrh	r3, [r3, #0]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d11c      	bne.n	8005816 <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 80057dc:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <HAL_GPIO_EXTI_Callback+0xf4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	; (800589c <HAL_GPIO_EXTI_Callback+0xf0>)
 80057e2:	8812      	ldrh	r2, [r2, #0]
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f007 f97a 	bl	800cae0 <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	bf0c      	ite	eq
 80057f2:	2301      	moveq	r3, #1
 80057f4:	2300      	movne	r3, #0
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	4b2a      	ldr	r3, [pc, #168]	; (80058a4 <HAL_GPIO_EXTI_Callback+0xf8>)
 80057fc:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 80057fe:	4b29      	ldr	r3, [pc, #164]	; (80058a4 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_GPIO_EXTI_Callback+0x62>
 8005806:	2000      	movs	r0, #0
 8005808:	f7ff ff58 	bl	80056bc <switchLedOn>
}
 800580c:	e03c      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
     else switchLedOff(VCU_RX_LED);
 800580e:	2000      	movs	r0, #0
 8005810:	f7ff ff90 	bl	8005734 <switchLedOff>
}
 8005814:	e038      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	429a      	cmp	r2, r3
 800581e:	d033      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005820:	4b22      	ldr	r3, [pc, #136]	; (80058ac <HAL_GPIO_EXTI_Callback+0x100>)
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	88fa      	ldrh	r2, [r7, #6]
 8005826:	429a      	cmp	r2, r3
 8005828:	d103      	bne.n	8005832 <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 800582a:	4b21      	ldr	r3, [pc, #132]	; (80058b0 <HAL_GPIO_EXTI_Callback+0x104>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
}
 8005830:	e02a      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <HAL_GPIO_EXTI_Callback+0x108>)
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	429a      	cmp	r2, r3
 800583a:	d11c      	bne.n	8005876 <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_GPIO_EXTI_Callback+0x10c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <HAL_GPIO_EXTI_Callback+0x108>)
 8005842:	8812      	ldrh	r2, [r2, #0]
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f007 f94a 	bl	800cae0 <HAL_GPIO_ReadPin>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	4b18      	ldr	r3, [pc, #96]	; (80058bc <HAL_GPIO_EXTI_Callback+0x110>)
 800585c:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 800585e:	4b17      	ldr	r3, [pc, #92]	; (80058bc <HAL_GPIO_EXTI_Callback+0x110>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_GPIO_EXTI_Callback+0xc2>
 8005866:	2001      	movs	r0, #1
 8005868:	f7ff ff28 	bl	80056bc <switchLedOn>
}
 800586c:	e00c      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
    else switchLedOff(MCU_RX_LED);
 800586e:	2001      	movs	r0, #1
 8005870:	f7ff ff60 	bl	8005734 <switchLedOff>
}
 8005874:	e008      	b.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005876:	4b12      	ldr	r3, [pc, #72]	; (80058c0 <HAL_GPIO_EXTI_Callback+0x114>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	88fa      	ldrh	r2, [r7, #6]
 800587c:	429a      	cmp	r2, r3
 800587e:	d003      	beq.n	8005888 <HAL_GPIO_EXTI_Callback+0xdc>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005880:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <HAL_GPIO_EXTI_Callback+0x118>)
 8005882:	881b      	ldrh	r3, [r3, #0]
 8005884:	88fa      	ldrh	r2, [r7, #6]
 8005886:	429a      	cmp	r2, r3
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000c5e 	.word	0x20000c5e
 8005894:	20000c66 	.word	0x20000c66
 8005898:	20000d1f 	.word	0x20000d1f
 800589c:	20000c6e 	.word	0x20000c6e
 80058a0:	20000c70 	.word	0x20000c70
 80058a4:	20000d1e 	.word	0x20000d1e
 80058a8:	20000c7c 	.word	0x20000c7c
 80058ac:	20000c86 	.word	0x20000c86
 80058b0:	20000d1d 	.word	0x20000d1d
 80058b4:	20000c8e 	.word	0x20000c8e
 80058b8:	20000c90 	.word	0x20000c90
 80058bc:	20000d1c 	.word	0x20000d1c
 80058c0:	20000ccc 	.word	0x20000ccc
 80058c4:	20000cd6 	.word	0x20000cd6

080058c8 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	4b18      	ldr	r3, [pc, #96]	; (8005938 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d129      	bne.n	8005930 <HAL_TIM_PeriodElapsedCallback+0x68>
    // last contact timer overflow
    etTimerOverflows++;
 80058dc:	4b17      	ldr	r3, [pc, #92]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3301      	adds	r3, #1
 80058e2:	4a16      	ldr	r2, [pc, #88]	; (800593c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80058e4:	6013      	str	r3, [r2, #0]
    decSec++;
 80058e6:	4b16      	ldr	r3, [pc, #88]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	3301      	adds	r3, #1
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058f0:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 80058f2:	4b13      	ldr	r3, [pc, #76]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b0a      	cmp	r3, #10
 80058f8:	d10a      	bne.n	8005910 <HAL_TIM_PeriodElapsedCallback+0x48>
      decSec = 0;
 80058fa:	4b11      	ldr	r3, [pc, #68]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin);
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a10      	ldr	r2, [pc, #64]	; (8005948 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	4611      	mov	r1, r2
 800590a:	4618      	mov	r0, r3
 800590c:	f007 f918 	bl	800cb40 <HAL_GPIO_TogglePin>
    }
    if((decSec % 5) == 0) sendState = 1;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	4b0d      	ldr	r3, [pc, #52]	; (800594c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8005916:	fba3 1302 	umull	r1, r3, r3, r2
 800591a:	0899      	lsrs	r1, r3, #2
 800591c:	460b      	mov	r3, r1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d102      	bne.n	8005930 <HAL_TIM_PeriodElapsedCallback+0x68>
 800592a:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800592c:	2201      	movs	r2, #1
 800592e:	701a      	strb	r2, [r3, #0]
  }
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	200005d8 	.word	0x200005d8
 800593c:	20000d20 	.word	0x20000d20
 8005940:	20000d24 	.word	0x20000d24
 8005944:	20000cf8 	.word	0x20000cf8
 8005948:	20000cf4 	.word	0x20000cf4
 800594c:	cccccccd 	.word	0xcccccccd
 8005950:	20000d25 	.word	0x20000d25

08005954 <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 800595e:	f006 fd77 	bl	800c450 <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005962:	492f      	ldr	r1, [pc, #188]	; (8005a20 <eepromDefaults+0xcc>)
 8005964:	2001      	movs	r0, #1
 8005966:	f7fe fce6 	bl	8004336 <EE_WriteVariable32bits>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	88fb      	ldrh	r3, [r7, #6]
 8005970:	4313      	orrs	r3, r2
 8005972:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005974:	88fb      	ldrh	r3, [r7, #6]
 8005976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800597a:	2b00      	cmp	r3, #0
 800597c:	d009      	beq.n	8005992 <eepromDefaults+0x3e>
 800597e:	4b29      	ldr	r3, [pc, #164]	; (8005a24 <eepromDefaults+0xd0>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f7fe fd84 	bl	8004490 <EE_CleanUp_IT>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	4313      	orrs	r3, r2
 8005990:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005992:	bf00      	nop
 8005994:	4b23      	ldr	r3, [pc, #140]	; (8005a24 <eepromDefaults+0xd0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1fb      	bne.n	8005994 <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 800599c:	4922      	ldr	r1, [pc, #136]	; (8005a28 <eepromDefaults+0xd4>)
 800599e:	2002      	movs	r0, #2
 80059a0:	f7fe fcc9 	bl	8004336 <EE_WriteVariable32bits>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 80059ae:	88fb      	ldrh	r3, [r7, #6]
 80059b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <eepromDefaults+0x78>
 80059b8:	4b1a      	ldr	r3, [pc, #104]	; (8005a24 <eepromDefaults+0xd0>)
 80059ba:	2201      	movs	r2, #1
 80059bc:	601a      	str	r2, [r3, #0]
 80059be:	f7fe fd67 	bl	8004490 <EE_CleanUp_IT>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	88fb      	ldrh	r3, [r7, #6]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 80059cc:	bf00      	nop
 80059ce:	4b15      	ldr	r3, [pc, #84]	; (8005a24 <eepromDefaults+0xd0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1fb      	bne.n	80059ce <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 80059d6:	2100      	movs	r1, #0
 80059d8:	2003      	movs	r0, #3
 80059da:	f7fe fcac 	bl	8004336 <EE_WriteVariable32bits>
 80059de:	4603      	mov	r3, r0
 80059e0:	461a      	mov	r2, r3
 80059e2:	88fb      	ldrh	r3, [r7, #6]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d009      	beq.n	8005a06 <eepromDefaults+0xb2>
 80059f2:	4b0c      	ldr	r3, [pc, #48]	; (8005a24 <eepromDefaults+0xd0>)
 80059f4:	2201      	movs	r2, #1
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f7fe fd4a 	bl	8004490 <EE_CleanUp_IT>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	88fb      	ldrh	r3, [r7, #6]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005a06:	bf00      	nop
 8005a08:	4b06      	ldr	r3, [pc, #24]	; (8005a24 <eepromDefaults+0xd0>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1fb      	bne.n	8005a08 <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005a10:	f006 fd40 	bl	800c494 <HAL_FLASH_Lock>

  return eeStatus;
 8005a14:	88fb      	ldrh	r3, [r7, #6]

}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	50616c61 	.word	0x50616c61
 8005a24:	20000988 	.word	0x20000988
 8005a28:	746f7621 	.word	0x746f7621

08005a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005a36:	f006 fa73 	bl	800bf20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005a3a:	f000 f881 	bl	8005b40 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005a3e:	f000 f8eb 	bl	8005c18 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */

  /* Enable and set FLASH Interrupt priority */
    /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
    HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005a42:	2200      	movs	r2, #0
 8005a44:	2100      	movs	r1, #0
 8005a46:	2004      	movs	r0, #4
 8005a48:	f006 fbcb 	bl	800c1e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005a4c:	2004      	movs	r0, #4
 8005a4e:	f006 fbe2 	bl	800c216 <HAL_NVIC_EnableIRQ>

    /* Unlock the Flash Program Erase controller */
    HAL_FLASH_Unlock();
 8005a52:	f006 fcfd 	bl	800c450 <HAL_FLASH_Unlock>

    /* Clear OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005a56:	4b34      	ldr	r3, [pc, #208]	; (8005b28 <main+0xfc>)
 8005a58:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005a5c:	611a      	str	r2, [r3, #16]
    while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005a5e:	bf00      	nop
 8005a60:	4b31      	ldr	r3, [pc, #196]	; (8005b28 <main+0xfc>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	d0f8      	beq.n	8005a60 <main+0x34>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005a6e:	f000 fb17 	bl	80060a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005a72:	f000 f9c3 	bl	8005dfc <MX_SPI1_Init>
  MX_SPI2_Init();
 8005a76:	f000 f9ff 	bl	8005e78 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005a7a:	f000 f937 	bl	8005cec <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005a7e:	f000 fae7 	bl	8006050 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005a82:	f000 f97f 	bl	8005d84 <MX_PKA_Init>
  MX_RTC_Init();
 8005a86:	f000 f991 	bl	8005dac <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005a8a:	f000 f8e3 	bl	8005c54 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005a8e:	f000 fa31 	bl	8005ef4 <MX_TIM1_Init>
  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on


  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005a92:	4826      	ldr	r0, [pc, #152]	; (8005b2c <main+0x100>)
 8005a94:	f009 ff96 	bl	800f9c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE BEGIN WHILE */

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset */
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005a98:	4b25      	ldr	r3, [pc, #148]	; (8005b30 <main+0x104>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <main+0x90>
    HAL_Delay(100);
    BSP_LED_Off(LED_OK);
    */
    /* System reset comes from a power-on reset: Forced Erase */
    /* Initialize EEPROM emulation driver (mandatory) */
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	f7fd fe96 	bl	80037d8 <EE_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <main+0xbe>
 8005ab6:	f000 fde9 	bl	800668c <Error_Handler>
 8005aba:	e016      	b.n	8005aea <main+0xbe>
  }
  else
  {
    /* Clear the Standby flag */
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005abc:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <main+0x104>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Check and Clear the Wakeup flag */
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <main+0x104>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <main+0xaa>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <main+0x104>)
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	619a      	str	r2, [r3, #24]
    HAL_Delay(100);
    BSP_LED_Off(LED_OK);
    */
    /* System reset comes from a STANDBY wakeup: Conditional Erase*/
    /* Initialize EEPROM emulation driver (mandatory) */
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	f7fd fe7e 	bl	80037d8 <EE_Init>
 8005adc:	4603      	mov	r3, r0
 8005ade:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <main+0xbe>
 8005ae6:	f000 fdd1 	bl	800668c <Error_Handler>
  }


  LoadAllEEPROM();
 8005aea:	f7ff fd7b 	bl	80055e4 <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005aee:	4b11      	ldr	r3, [pc, #68]	; (8005b34 <main+0x108>)
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	4a11      	ldr	r2, [pc, #68]	; (8005b38 <main+0x10c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d104      	bne.n	8005b02 <main+0xd6>
 8005af8:	4b0e      	ldr	r3, [pc, #56]	; (8005b34 <main+0x108>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a0f      	ldr	r2, [pc, #60]	; (8005b3c <main+0x110>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d005      	beq.n	8005b0e <main+0xe2>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005b02:	f7ff ff27 	bl	8005954 <eepromDefaults>
 8005b06:	4603      	mov	r3, r0
 8005b08:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005b0a:	f7ff fd6b 	bl	80055e4 <LoadAllEEPROM>
  }
  HAL_FLASH_Lock();
 8005b0e:	f006 fcc1 	bl	800c494 <HAL_FLASH_Lock>


  // Lock the Flash Program Erase controller */
  //HAL_FLASH_Lock();

  DRV_CANFDSPI_Reset(CAN2);
 8005b12:	2001      	movs	r0, #1
 8005b14:	f7fb fa6c 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN1);
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7fb fa69 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  PCU_Initialize();
 8005b1e:	f000 fdc5 	bl	80066ac <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005b22:	f000 ff05 	bl	8006930 <PCU_Tasks>
 8005b26:	e7fc      	b.n	8005b22 <main+0xf6>
 8005b28:	58004000 	.word	0x58004000
 8005b2c:	200005d8 	.word	0x200005d8
 8005b30:	58000400 	.word	0x58000400
 8005b34:	2000098c 	.word	0x2000098c
 8005b38:	50616c61 	.word	0x50616c61
 8005b3c:	746f7621 	.word	0x746f7621

08005b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b09a      	sub	sp, #104	; 0x68
 8005b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005b46:	f107 0320 	add.w	r3, r7, #32
 8005b4a:	2248      	movs	r2, #72	; 0x48
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f00c fb44 	bl	80121dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005b54:	1d3b      	adds	r3, r7, #4
 8005b56:	2200      	movs	r2, #0
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
 8005b5e:	60da      	str	r2, [r3, #12]
 8005b60:	611a      	str	r2, [r3, #16]
 8005b62:	615a      	str	r2, [r3, #20]
 8005b64:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005b66:	f007 f973 	bl	800ce50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005b6a:	2010      	movs	r0, #16
 8005b6c:	f7ff fbc8 	bl	8005300 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b78:	4a26      	ldr	r2, [pc, #152]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	4b24      	ldr	r3, [pc, #144]	; (8005c14 <SystemClock_Config+0xd4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b88:	603b      	str	r3, [r7, #0]
 8005b8a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005b8c:	2307      	movs	r3, #7
 8005b8e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005b96:	2301      	movs	r3, #1
 8005b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005b9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005ba0:	2340      	movs	r3, #64	; 0x40
 8005ba2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005bac:	2310      	movs	r3, #16
 8005bae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005bba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005bbe:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005bc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bc4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005bc6:	f107 0320 	add.w	r3, r7, #32
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f007 fcd4 	bl	800d578 <HAL_RCC_OscConfig>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005bd6:	f000 fd59 	bl	800668c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005bda:	236f      	movs	r3, #111	; 0x6f
 8005bdc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005bde:	2303      	movs	r3, #3
 8005be0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005bea:	2300      	movs	r3, #0
 8005bec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005bee:	2380      	movs	r3, #128	; 0x80
 8005bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005bf6:	1d3b      	adds	r3, r7, #4
 8005bf8:	2103      	movs	r1, #3
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f008 f830 	bl	800dc60 <HAL_RCC_ClockConfig>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005c06:	f000 fd41 	bl	800668c <Error_Handler>
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3768      	adds	r7, #104	; 0x68
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58000400 	.word	0x58000400

08005c18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b094      	sub	sp, #80	; 0x50
 8005c1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005c1e:	463b      	mov	r3, r7
 8005c20:	2250      	movs	r2, #80	; 0x50
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f00c fad9 	bl	80121dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005c2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c2e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8005c30:	2302      	movs	r3, #2
 8005c32:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005c34:	2310      	movs	r3, #16
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c38:	463b      	mov	r3, r7
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f008 fc4d 	bl	800e4da <HAL_RCCEx_PeriphCLKConfig>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d001      	beq.n	8005c4a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8005c46:	f000 fd21 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005c4a:	bf00      	nop
 8005c4c:	3750      	adds	r7, #80	; 0x50
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005c58:	4b22      	ldr	r3, [pc, #136]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c5a:	4a23      	ldr	r2, [pc, #140]	; (8005ce8 <MX_LPUART1_UART_Init+0x94>)
 8005c5c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8005c5e:	4b21      	ldr	r3, [pc, #132]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005c64:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005c66:	4b1f      	ldr	r3, [pc, #124]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005c6c:	4b1d      	ldr	r3, [pc, #116]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c7a:	220c      	movs	r2, #12
 8005c7c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005c84:	4b17      	ldr	r3, [pc, #92]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005c8a:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005c90:	4b14      	ldr	r3, [pc, #80]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c92:	2200      	movs	r2, #0
 8005c94:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c98:	2200      	movs	r2, #0
 8005c9a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005c9c:	4811      	ldr	r0, [pc, #68]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005c9e:	f00a ff41 	bl	8010b24 <HAL_UART_Init>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8005ca8:	f000 fcf0 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cac:	2100      	movs	r1, #0
 8005cae:	480d      	ldr	r0, [pc, #52]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cb0:	f00c f833 	bl	8011d1a <HAL_UARTEx_SetTxFifoThreshold>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d001      	beq.n	8005cbe <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005cba:	f000 fce7 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4808      	ldr	r0, [pc, #32]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cc2:	f00c f868 	bl	8011d96 <HAL_UARTEx_SetRxFifoThreshold>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005ccc:	f000 fcde 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005cd0:	4804      	ldr	r0, [pc, #16]	; (8005ce4 <MX_LPUART1_UART_Init+0x90>)
 8005cd2:	f00b ffe9 	bl	8011ca8 <HAL_UARTEx_DisableFifoMode>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005cdc:	f000 fcd6 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005ce0:	bf00      	nop
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	200003b8 	.word	0x200003b8
 8005ce8:	40008000 	.word	0x40008000

08005cec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005cf0:	4b22      	ldr	r3, [pc, #136]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005cf2:	4a23      	ldr	r2, [pc, #140]	; (8005d80 <MX_USART1_UART_Init+0x94>)
 8005cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005cf6:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005cf8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005cfe:	4b1f      	ldr	r3, [pc, #124]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d0a:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d12:	220c      	movs	r2, #12
 8005d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d16:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d28:	4b14      	ldr	r3, [pc, #80]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d2e:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d34:	4811      	ldr	r0, [pc, #68]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d36:	f00a fef5 	bl	8010b24 <HAL_UART_Init>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d001      	beq.n	8005d44 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005d40:	f000 fca4 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d44:	2100      	movs	r1, #0
 8005d46:	480d      	ldr	r0, [pc, #52]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d48:	f00b ffe7 	bl	8011d1a <HAL_UARTEx_SetTxFifoThreshold>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005d52:	f000 fc9b 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005d56:	2100      	movs	r1, #0
 8005d58:	4808      	ldr	r0, [pc, #32]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d5a:	f00c f81c 	bl	8011d96 <HAL_UARTEx_SetRxFifoThreshold>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d001      	beq.n	8005d68 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005d64:	f000 fc92 	bl	800668c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005d68:	4804      	ldr	r0, [pc, #16]	; (8005d7c <MX_USART1_UART_Init+0x90>)
 8005d6a:	f00b ff9d 	bl	8011ca8 <HAL_UARTEx_DisableFifoMode>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d001      	beq.n	8005d78 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005d74:	f000 fc8a 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005d78:	bf00      	nop
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	2000044c 	.word	0x2000044c
 8005d80:	40013800 	.word	0x40013800

08005d84 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <MX_PKA_Init+0x20>)
 8005d8a:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <MX_PKA_Init+0x24>)
 8005d8c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8005d8e:	4805      	ldr	r0, [pc, #20]	; (8005da4 <MX_PKA_Init+0x20>)
 8005d90:	f007 f82f 	bl	800cdf2 <HAL_PKA_Init>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d001      	beq.n	8005d9e <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8005d9a:	f000 fc77 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8005d9e:	bf00      	nop
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	200004e0 	.word	0x200004e0
 8005da8:	58002000 	.word	0x58002000

08005dac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005db0:	4b10      	ldr	r3, [pc, #64]	; (8005df4 <MX_RTC_Init+0x48>)
 8005db2:	4a11      	ldr	r2, [pc, #68]	; (8005df8 <MX_RTC_Init+0x4c>)
 8005db4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005db6:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <MX_RTC_Init+0x48>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dbe:	227f      	movs	r2, #127	; 0x7f
 8005dc0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dc4:	22ff      	movs	r2, #255	; 0xff
 8005dc6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005dc8:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005dce:	4b09      	ldr	r3, [pc, #36]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005dd4:	4b07      	ldr	r3, [pc, #28]	; (8005df4 <MX_RTC_Init+0x48>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005dda:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <MX_RTC_Init+0x48>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005de0:	4804      	ldr	r0, [pc, #16]	; (8005df4 <MX_RTC_Init+0x48>)
 8005de2:	f008 fe01 	bl	800e9e8 <HAL_RTC_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8005dec:	f000 fc4e 	bl	800668c <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 8005df0:	bf00      	nop
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	200004ec 	.word	0x200004ec
 8005df8:	40002800 	.word	0x40002800

08005dfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005e00:	4b1b      	ldr	r3, [pc, #108]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e02:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <MX_SPI1_Init+0x78>)
 8005e04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005e0e:	4b18      	ldr	r3, [pc, #96]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005e14:	4b16      	ldr	r3, [pc, #88]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005e1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e1c:	4b14      	ldr	r3, [pc, #80]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e1e:	2200      	movs	r2, #0
 8005e20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005e28:	4b11      	ldr	r3, [pc, #68]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e32:	2208      	movs	r2, #8
 8005e34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005e36:	4b0e      	ldr	r3, [pc, #56]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005e3c:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e42:	4b0b      	ldr	r3, [pc, #44]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005e48:	4b09      	ldr	r3, [pc, #36]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e4a:	2207      	movs	r2, #7
 8005e4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005e4e:	4b08      	ldr	r3, [pc, #32]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e56:	2200      	movs	r2, #0
 8005e58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005e5a:	4805      	ldr	r0, [pc, #20]	; (8005e70 <MX_SPI1_Init+0x74>)
 8005e5c:	f009 f933 	bl	800f0c6 <HAL_SPI_Init>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d001      	beq.n	8005e6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005e66:	f000 fc11 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005e6a:	bf00      	nop
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000510 	.word	0x20000510
 8005e74:	40013000 	.word	0x40013000

08005e78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005e7c:	4b1b      	ldr	r3, [pc, #108]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ef0 <MX_SPI2_Init+0x78>)
 8005e80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005e82:	4b1a      	ldr	r3, [pc, #104]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005e88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005e8a:	4b18      	ldr	r3, [pc, #96]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8005e90:	4b16      	ldr	r3, [pc, #88]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e92:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005e96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e98:	4b14      	ldr	r3, [pc, #80]	; (8005eec <MX_SPI2_Init+0x74>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005e9e:	4b13      	ldr	r3, [pc, #76]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005ea4:	4b11      	ldr	r3, [pc, #68]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eaa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005eb2:	4b0e      	ldr	r3, [pc, #56]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005eb8:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <MX_SPI2_Init+0x74>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ebe:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005ec4:	4b09      	ldr	r3, [pc, #36]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ec6:	2207      	movs	r2, #7
 8005ec8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005eca:	4b08      	ldr	r3, [pc, #32]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005ed0:	4b06      	ldr	r3, [pc, #24]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005ed6:	4805      	ldr	r0, [pc, #20]	; (8005eec <MX_SPI2_Init+0x74>)
 8005ed8:	f009 f8f5 	bl	800f0c6 <HAL_SPI_Init>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005ee2:	f000 fbd3 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8005ee6:	bf00      	nop
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20000574 	.word	0x20000574
 8005ef0:	40003800 	.word	0x40003800

08005ef4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b09c      	sub	sp, #112	; 0x70
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005efa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005f18:	2200      	movs	r2, #0
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
 8005f20:	60da      	str	r2, [r3, #12]
 8005f22:	611a      	str	r2, [r3, #16]
 8005f24:	615a      	str	r2, [r3, #20]
 8005f26:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005f28:	1d3b      	adds	r3, r7, #4
 8005f2a:	2234      	movs	r2, #52	; 0x34
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f00c f954 	bl	80121dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005f34:	4b44      	ldr	r3, [pc, #272]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f36:	4a45      	ldr	r2, [pc, #276]	; (800604c <MX_TIM1_Init+0x158>)
 8005f38:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8005f3a:	4b43      	ldr	r3, [pc, #268]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f3c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8005f40:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f42:	4b41      	ldr	r3, [pc, #260]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8005f48:	4b3f      	ldr	r3, [pc, #252]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f4a:	2263      	movs	r2, #99	; 0x63
 8005f4c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f4e:	4b3e      	ldr	r3, [pc, #248]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005f54:	4b3c      	ldr	r3, [pc, #240]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f56:	2200      	movs	r2, #0
 8005f58:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f5a:	4b3b      	ldr	r3, [pc, #236]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005f60:	4839      	ldr	r0, [pc, #228]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f62:	f009 fccb 	bl	800f8fc <HAL_TIM_Base_Init>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005f6c:	f000 fb8e 	bl	800668c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f74:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005f76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	4832      	ldr	r0, [pc, #200]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f7e:	f009 ff99 	bl	800feb4 <HAL_TIM_ConfigClockSource>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005f88:	f000 fb80 	bl	800668c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8005f8c:	482e      	ldr	r0, [pc, #184]	; (8006048 <MX_TIM1_Init+0x154>)
 8005f8e:	f009 fd67 	bl	800fa60 <HAL_TIM_OC_Init>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d001      	beq.n	8005f9c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005f98:	f000 fb78 	bl	800668c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fac:	4619      	mov	r1, r3
 8005fae:	4826      	ldr	r0, [pc, #152]	; (8006048 <MX_TIM1_Init+0x154>)
 8005fb0:	f00a fc80 	bl	80108b4 <HAL_TIMEx_MasterConfigSynchronization>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8005fba:	f000 fb67 	bl	800668c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005fde:	2200      	movs	r2, #0
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	4819      	ldr	r0, [pc, #100]	; (8006048 <MX_TIM1_Init+0x154>)
 8005fe4:	f009 feec 	bl	800fdc0 <HAL_TIM_OC_ConfigChannel>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005fee:	f000 fb4d 	bl	800668c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800600a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006010:	2300      	movs	r3, #0
 8006012:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8006014:	2300      	movs	r3, #0
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8006018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006022:	2300      	movs	r3, #0
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006026:	2300      	movs	r3, #0
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800602a:	1d3b      	adds	r3, r7, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4806      	ldr	r0, [pc, #24]	; (8006048 <MX_TIM1_Init+0x154>)
 8006030:	f00a fca0 	bl	8010974 <HAL_TIMEx_ConfigBreakDeadTime>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800603a:	f000 fb27 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800603e:	bf00      	nop
 8006040:	3770      	adds	r7, #112	; 0x70
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	200005d8 	.word	0x200005d8
 800604c:	40012c00 	.word	0x40012c00

08006050 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006054:	4b10      	ldr	r3, [pc, #64]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006056:	4a11      	ldr	r2, [pc, #68]	; (800609c <MX_USB_PCD_Init+0x4c>)
 8006058:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800605a:	4b0f      	ldr	r3, [pc, #60]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800605c:	2208      	movs	r2, #8
 800605e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006060:	4b0d      	ldr	r3, [pc, #52]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006062:	2202      	movs	r2, #2
 8006064:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006066:	4b0c      	ldr	r3, [pc, #48]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006068:	2202      	movs	r2, #2
 800606a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800606c:	4b0a      	ldr	r3, [pc, #40]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800606e:	2200      	movs	r2, #0
 8006070:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006072:	4b09      	ldr	r3, [pc, #36]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006074:	2200      	movs	r2, #0
 8006076:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <MX_USB_PCD_Init+0x48>)
 800607a:	2200      	movs	r2, #0
 800607c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800607e:	4b06      	ldr	r3, [pc, #24]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006080:	2200      	movs	r2, #0
 8006082:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006084:	4804      	ldr	r0, [pc, #16]	; (8006098 <MX_USB_PCD_Init+0x48>)
 8006086:	f006 fdb1 	bl	800cbec <HAL_PCD_Init>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006090:	f000 fafc 	bl	800668c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006094:	bf00      	nop
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000694 	.word	0x20000694
 800609c:	40006800 	.word	0x40006800

080060a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	609a      	str	r2, [r3, #8]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 80060b4:	4b9d      	ldr	r3, [pc, #628]	; (800632c <MX_GPIO_Init+0x28c>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f040 81c2 	bne.w	8006442 <MX_GPIO_Init+0x3a2>



CAN1_INT0_Pin         = GPIO_PIN_8;
 80060be:	4b9c      	ldr	r3, [pc, #624]	; (8006330 <MX_GPIO_Init+0x290>)
 80060c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060c4:	801a      	strh	r2, [r3, #0]
CAN1_INT0_GPIO_Port   = GPIOB;
 80060c6:	4b9b      	ldr	r3, [pc, #620]	; (8006334 <MX_GPIO_Init+0x294>)
 80060c8:	4a9b      	ldr	r2, [pc, #620]	; (8006338 <MX_GPIO_Init+0x298>)
 80060ca:	601a      	str	r2, [r3, #0]
CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 80060cc:	4b9b      	ldr	r3, [pc, #620]	; (800633c <MX_GPIO_Init+0x29c>)
 80060ce:	2217      	movs	r2, #23
 80060d0:	801a      	strh	r2, [r3, #0]
CAN1_INT1_Pin         = GPIO_PIN_9;
 80060d2:	4b9b      	ldr	r3, [pc, #620]	; (8006340 <MX_GPIO_Init+0x2a0>)
 80060d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d8:	801a      	strh	r2, [r3, #0]
CAN1_INT1_GPIO_Port   = GPIOB;
 80060da:	4b9a      	ldr	r3, [pc, #616]	; (8006344 <MX_GPIO_Init+0x2a4>)
 80060dc:	4a96      	ldr	r2, [pc, #600]	; (8006338 <MX_GPIO_Init+0x298>)
 80060de:	601a      	str	r2, [r3, #0]
CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 80060e0:	4b99      	ldr	r3, [pc, #612]	; (8006348 <MX_GPIO_Init+0x2a8>)
 80060e2:	2217      	movs	r2, #23
 80060e4:	801a      	strh	r2, [r3, #0]
SPI2_CS1_Pin          = GPIO_PIN_0;
 80060e6:	4b99      	ldr	r3, [pc, #612]	; (800634c <MX_GPIO_Init+0x2ac>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	801a      	strh	r2, [r3, #0]
SPI2_CS1_GPIO_Port    = GPIOC;
 80060ec:	4b98      	ldr	r3, [pc, #608]	; (8006350 <MX_GPIO_Init+0x2b0>)
 80060ee:	4a99      	ldr	r2, [pc, #612]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80060f0:	601a      	str	r2, [r3, #0]
SPI2_CS2_Pin          = GPIO_PIN_3;
 80060f2:	4b99      	ldr	r3, [pc, #612]	; (8006358 <MX_GPIO_Init+0x2b8>)
 80060f4:	2208      	movs	r2, #8
 80060f6:	801a      	strh	r2, [r3, #0]
SPI2_CS2_GPIO_Port    = GPIOC;
 80060f8:	4b98      	ldr	r3, [pc, #608]	; (800635c <MX_GPIO_Init+0x2bc>)
 80060fa:	4a96      	ldr	r2, [pc, #600]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80060fc:	601a      	str	r2, [r3, #0]
CAN1_CS_Pin           = GPIO_PIN_5;
 80060fe:	4b98      	ldr	r3, [pc, #608]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006100:	2220      	movs	r2, #32
 8006102:	801a      	strh	r2, [r3, #0]
CAN1_CS_GPIO_Port     = GPIOA;
 8006104:	4b97      	ldr	r3, [pc, #604]	; (8006364 <MX_GPIO_Init+0x2c4>)
 8006106:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800610a:	601a      	str	r2, [r3, #0]
BUTTON1_Pin           = GPIO_PIN_4;
 800610c:	4b96      	ldr	r3, [pc, #600]	; (8006368 <MX_GPIO_Init+0x2c8>)
 800610e:	2210      	movs	r2, #16
 8006110:	801a      	strh	r2, [r3, #0]
BUTTON1_GPIO_Port     = GPIOC;
 8006112:	4b96      	ldr	r3, [pc, #600]	; (800636c <MX_GPIO_Init+0x2cc>)
 8006114:	4a8f      	ldr	r2, [pc, #572]	; (8006354 <MX_GPIO_Init+0x2b4>)
 8006116:	601a      	str	r2, [r3, #0]
BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 8006118:	4b95      	ldr	r3, [pc, #596]	; (8006370 <MX_GPIO_Init+0x2d0>)
 800611a:	220a      	movs	r2, #10
 800611c:	801a      	strh	r2, [r3, #0]
CAN2_CS_Pin           = GPIO_PIN_5;
 800611e:	4b95      	ldr	r3, [pc, #596]	; (8006374 <MX_GPIO_Init+0x2d4>)
 8006120:	2220      	movs	r2, #32
 8006122:	801a      	strh	r2, [r3, #0]
CAN2_CS_GPIO_Port     = GPIOC;
 8006124:	4b94      	ldr	r3, [pc, #592]	; (8006378 <MX_GPIO_Init+0x2d8>)
 8006126:	4a8b      	ldr	r2, [pc, #556]	; (8006354 <MX_GPIO_Init+0x2b4>)
 8006128:	601a      	str	r2, [r3, #0]
LED_GREEN_Pin         = GPIO_PIN_0;
 800612a:	4b94      	ldr	r3, [pc, #592]	; (800637c <MX_GPIO_Init+0x2dc>)
 800612c:	2201      	movs	r2, #1
 800612e:	801a      	strh	r2, [r3, #0]
LED_GREEN_GPIO_Port   = GPIOB;
 8006130:	4b93      	ldr	r3, [pc, #588]	; (8006380 <MX_GPIO_Init+0x2e0>)
 8006132:	4a81      	ldr	r2, [pc, #516]	; (8006338 <MX_GPIO_Init+0x298>)
 8006134:	601a      	str	r2, [r3, #0]
LED_RED_Pin           = GPIO_PIN_1;
 8006136:	4b93      	ldr	r3, [pc, #588]	; (8006384 <MX_GPIO_Init+0x2e4>)
 8006138:	2202      	movs	r2, #2
 800613a:	801a      	strh	r2, [r3, #0]
LED_RED_GPIO_Port     = GPIOB;
 800613c:	4b92      	ldr	r3, [pc, #584]	; (8006388 <MX_GPIO_Init+0x2e8>)
 800613e:	4a7e      	ldr	r2, [pc, #504]	; (8006338 <MX_GPIO_Init+0x298>)
 8006140:	601a      	str	r2, [r3, #0]
CAN2_INT_Pin          = GPIO_PIN_12;
 8006142:	4b92      	ldr	r3, [pc, #584]	; (800638c <MX_GPIO_Init+0x2ec>)
 8006144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006148:	801a      	strh	r2, [r3, #0]
CAN2_INT_GPIO_Port    = GPIOB;
 800614a:	4b91      	ldr	r3, [pc, #580]	; (8006390 <MX_GPIO_Init+0x2f0>)
 800614c:	4a7a      	ldr	r2, [pc, #488]	; (8006338 <MX_GPIO_Init+0x298>)
 800614e:	601a      	str	r2, [r3, #0]
CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006150:	4b90      	ldr	r3, [pc, #576]	; (8006394 <MX_GPIO_Init+0x2f4>)
 8006152:	2228      	movs	r2, #40	; 0x28
 8006154:	801a      	strh	r2, [r3, #0]
CAN2_INT0_Pin         = GPIO_PIN_13;
 8006156:	4b90      	ldr	r3, [pc, #576]	; (8006398 <MX_GPIO_Init+0x2f8>)
 8006158:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800615c:	801a      	strh	r2, [r3, #0]
CAN2_INT0_GPIO_Port   = GPIOB;
 800615e:	4b8f      	ldr	r3, [pc, #572]	; (800639c <MX_GPIO_Init+0x2fc>)
 8006160:	4a75      	ldr	r2, [pc, #468]	; (8006338 <MX_GPIO_Init+0x298>)
 8006162:	601a      	str	r2, [r3, #0]
CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006164:	4b8e      	ldr	r3, [pc, #568]	; (80063a0 <MX_GPIO_Init+0x300>)
 8006166:	2228      	movs	r2, #40	; 0x28
 8006168:	801a      	strh	r2, [r3, #0]
CAN2_INT1_Pin         = GPIO_PIN_14;
 800616a:	4b8e      	ldr	r3, [pc, #568]	; (80063a4 <MX_GPIO_Init+0x304>)
 800616c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006170:	801a      	strh	r2, [r3, #0]
CAN2_INT1_GPIO_Port   = GPIOB;
 8006172:	4b8d      	ldr	r3, [pc, #564]	; (80063a8 <MX_GPIO_Init+0x308>)
 8006174:	4a70      	ldr	r2, [pc, #448]	; (8006338 <MX_GPIO_Init+0x298>)
 8006176:	601a      	str	r2, [r3, #0]
CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006178:	4b8c      	ldr	r3, [pc, #560]	; (80063ac <MX_GPIO_Init+0x30c>)
 800617a:	2228      	movs	r2, #40	; 0x28
 800617c:	801a      	strh	r2, [r3, #0]
CAN1_INT_Pin          = GPIO_PIN_10;
 800617e:	4b8c      	ldr	r3, [pc, #560]	; (80063b0 <MX_GPIO_Init+0x310>)
 8006180:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006184:	801a      	strh	r2, [r3, #0]
CAN1_INT_GPIO_Port    = GPIOA;
 8006186:	4b8b      	ldr	r3, [pc, #556]	; (80063b4 <MX_GPIO_Init+0x314>)
 8006188:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800618c:	601a      	str	r2, [r3, #0]
CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800618e:	4b8a      	ldr	r3, [pc, #552]	; (80063b8 <MX_GPIO_Init+0x318>)
 8006190:	2228      	movs	r2, #40	; 0x28
 8006192:	801a      	strh	r2, [r3, #0]
BUTTON2_Pin           = GPIO_PIN_0;
 8006194:	4b89      	ldr	r3, [pc, #548]	; (80063bc <MX_GPIO_Init+0x31c>)
 8006196:	2201      	movs	r2, #1
 8006198:	801a      	strh	r2, [r3, #0]
BUTTON2_GPIO_Port     = GPIOD;
 800619a:	4b89      	ldr	r3, [pc, #548]	; (80063c0 <MX_GPIO_Init+0x320>)
 800619c:	4a89      	ldr	r2, [pc, #548]	; (80063c4 <MX_GPIO_Init+0x324>)
 800619e:	601a      	str	r2, [r3, #0]
BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 80061a0:	4b89      	ldr	r3, [pc, #548]	; (80063c8 <MX_GPIO_Init+0x328>)
 80061a2:	2206      	movs	r2, #6
 80061a4:	801a      	strh	r2, [r3, #0]
BUTTON3_Pin           = GPIO_PIN_1;
 80061a6:	4b89      	ldr	r3, [pc, #548]	; (80063cc <MX_GPIO_Init+0x32c>)
 80061a8:	2202      	movs	r2, #2
 80061aa:	801a      	strh	r2, [r3, #0]
BUTTON3_GPIO_Port     = GPIOD;
 80061ac:	4b88      	ldr	r3, [pc, #544]	; (80063d0 <MX_GPIO_Init+0x330>)
 80061ae:	4a85      	ldr	r2, [pc, #532]	; (80063c4 <MX_GPIO_Init+0x324>)
 80061b0:	601a      	str	r2, [r3, #0]
BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 80061b2:	4b88      	ldr	r3, [pc, #544]	; (80063d4 <MX_GPIO_Init+0x334>)
 80061b4:	2207      	movs	r2, #7
 80061b6:	801a      	strh	r2, [r3, #0]
LED_BLUE_Pin          = GPIO_PIN_5;
 80061b8:	4b87      	ldr	r3, [pc, #540]	; (80063d8 <MX_GPIO_Init+0x338>)
 80061ba:	2220      	movs	r2, #32
 80061bc:	801a      	strh	r2, [r3, #0]
LED_BLUE_GPIO_Port    = GPIOB;
 80061be:	4b87      	ldr	r3, [pc, #540]	; (80063dc <MX_GPIO_Init+0x33c>)
 80061c0:	4a5d      	ldr	r2, [pc, #372]	; (8006338 <MX_GPIO_Init+0x298>)
 80061c2:	601a      	str	r2, [r3, #0]


/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c4:	2004      	movs	r0, #4
 80061c6:	f7ff f8b1 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ca:	2002      	movs	r0, #2
 80061cc:	f7ff f8ae 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d0:	2001      	movs	r0, #1
 80061d2:	f7ff f8ab 	bl	800532c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d6:	2008      	movs	r0, #8
 80061d8:	f7ff f8a8 	bl	800532c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 80061dc:	4b5b      	ldr	r3, [pc, #364]	; (800634c <MX_GPIO_Init+0x2ac>)
 80061de:	881a      	ldrh	r2, [r3, #0]
 80061e0:	4b5d      	ldr	r3, [pc, #372]	; (8006358 <MX_GPIO_Init+0x2b8>)
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	4b62      	ldr	r3, [pc, #392]	; (8006374 <MX_GPIO_Init+0x2d4>)
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	2200      	movs	r2, #0
 80061f2:	4619      	mov	r1, r3
 80061f4:	4857      	ldr	r0, [pc, #348]	; (8006354 <MX_GPIO_Init+0x2b4>)
 80061f6:	f006 fc8b 	bl	800cb10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80061fa:	4b5a      	ldr	r3, [pc, #360]	; (8006364 <MX_GPIO_Init+0x2c4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a58      	ldr	r2, [pc, #352]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006200:	8811      	ldrh	r1, [r2, #0]
 8006202:	2200      	movs	r2, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f006 fc83 	bl	800cb10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800620a:	4b5c      	ldr	r3, [pc, #368]	; (800637c <MX_GPIO_Init+0x2dc>)
 800620c:	881a      	ldrh	r2, [r3, #0]
 800620e:	4b5d      	ldr	r3, [pc, #372]	; (8006384 <MX_GPIO_Init+0x2e4>)
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	4b70      	ldr	r3, [pc, #448]	; (80063d8 <MX_GPIO_Init+0x338>)
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	b29b      	uxth	r3, r3
 800621e:	2200      	movs	r2, #0
 8006220:	4619      	mov	r1, r3
 8006222:	4845      	ldr	r0, [pc, #276]	; (8006338 <MX_GPIO_Init+0x298>)
 8006224:	f006 fc74 	bl	800cb10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin
                           CAN2_INT1_Pin */
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                          |CAN2_INT1_Pin;
 8006228:	4b41      	ldr	r3, [pc, #260]	; (8006330 <MX_GPIO_Init+0x290>)
 800622a:	881a      	ldrh	r2, [r3, #0]
 800622c:	4b44      	ldr	r3, [pc, #272]	; (8006340 <MX_GPIO_Init+0x2a0>)
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	4313      	orrs	r3, r2
 8006232:	b29a      	uxth	r2, r3
 8006234:	4b55      	ldr	r3, [pc, #340]	; (800638c <MX_GPIO_Init+0x2ec>)
 8006236:	881b      	ldrh	r3, [r3, #0]
 8006238:	4313      	orrs	r3, r2
 800623a:	b29a      	uxth	r2, r3
 800623c:	4b56      	ldr	r3, [pc, #344]	; (8006398 <MX_GPIO_Init+0x2f8>)
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	4b57      	ldr	r3, [pc, #348]	; (80063a4 <MX_GPIO_Init+0x304>)
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	4313      	orrs	r3, r2
 800624a:	b29b      	uxth	r3, r3
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 800624c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800624e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006254:	2301      	movs	r3, #1
 8006256:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006258:	1d3b      	adds	r3, r7, #4
 800625a:	4619      	mov	r1, r3
 800625c:	4836      	ldr	r0, [pc, #216]	; (8006338 <MX_GPIO_Init+0x298>)
 800625e:	f006 facf 	bl	800c800 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 8006262:	4b3a      	ldr	r3, [pc, #232]	; (800634c <MX_GPIO_Init+0x2ac>)
 8006264:	881a      	ldrh	r2, [r3, #0]
 8006266:	4b3c      	ldr	r3, [pc, #240]	; (8006358 <MX_GPIO_Init+0x2b8>)
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	4313      	orrs	r3, r2
 800626c:	b29a      	uxth	r2, r3
 800626e:	4b41      	ldr	r3, [pc, #260]	; (8006374 <MX_GPIO_Init+0x2d4>)
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	4313      	orrs	r3, r2
 8006274:	b29b      	uxth	r3, r3
 8006276:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006278:	2301      	movs	r3, #1
 800627a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800627c:	2300      	movs	r3, #0
 800627e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006280:	2300      	movs	r3, #0
 8006282:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006284:	1d3b      	adds	r3, r7, #4
 8006286:	4619      	mov	r1, r3
 8006288:	4832      	ldr	r0, [pc, #200]	; (8006354 <MX_GPIO_Init+0x2b4>)
 800628a:	f006 fab9 	bl	800c800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 800628e:	4b34      	ldr	r3, [pc, #208]	; (8006360 <MX_GPIO_Init+0x2c0>)
 8006290:	881b      	ldrh	r3, [r3, #0]
 8006292:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006294:	2301      	movs	r3, #1
 8006296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	2300      	movs	r3, #0
 800629a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800629c:	2300      	movs	r3, #0
 800629e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 80062a0:	4b30      	ldr	r3, [pc, #192]	; (8006364 <MX_GPIO_Init+0x2c4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	1d3a      	adds	r2, r7, #4
 80062a6:	4611      	mov	r1, r2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f006 faa9 	bl	800c800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80062ae:	4b2e      	ldr	r3, [pc, #184]	; (8006368 <MX_GPIO_Init+0x2c8>)
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80062b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80062b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062ba:	2301      	movs	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80062be:	4b2b      	ldr	r3, [pc, #172]	; (800636c <MX_GPIO_Init+0x2cc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	1d3a      	adds	r2, r7, #4
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f006 fa9a 	bl	800c800 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80062cc:	4b2b      	ldr	r3, [pc, #172]	; (800637c <MX_GPIO_Init+0x2dc>)
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	4b2c      	ldr	r3, [pc, #176]	; (8006384 <MX_GPIO_Init+0x2e4>)
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	4313      	orrs	r3, r2
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	4b3f      	ldr	r3, [pc, #252]	; (80063d8 <MX_GPIO_Init+0x338>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	4313      	orrs	r3, r2
 80062de:	b29b      	uxth	r3, r3
 80062e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062e2:	2301      	movs	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ea:	2300      	movs	r3, #0
 80062ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062ee:	1d3b      	adds	r3, r7, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4811      	ldr	r0, [pc, #68]	; (8006338 <MX_GPIO_Init+0x298>)
 80062f4:	f006 fa84 	bl	800c800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_INT_Pin */
  GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80062f8:	4b2d      	ldr	r3, [pc, #180]	; (80063b0 <MX_GPIO_Init+0x310>)
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80062fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006302:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 8006308:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <MX_GPIO_Init+0x314>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	1d3a      	adds	r2, r7, #4
 800630e:	4611      	mov	r1, r2
 8006310:	4618      	mov	r0, r3
 8006312:	f006 fa75 	bl	800c800 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 8006316:	4b29      	ldr	r3, [pc, #164]	; (80063bc <MX_GPIO_Init+0x31c>)
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	4b2c      	ldr	r3, [pc, #176]	; (80063cc <MX_GPIO_Init+0x32c>)
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	4313      	orrs	r3, r2
 8006320:	b29b      	uxth	r3, r3
 8006322:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006324:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006328:	e05a      	b.n	80063e0 <MX_GPIO_Init+0x340>
 800632a:	bf00      	nop
 800632c:	20000a58 	.word	0x20000a58
 8006330:	20000c66 	.word	0x20000c66
 8006334:	20000c68 	.word	0x20000c68
 8006338:	48000400 	.word	0x48000400
 800633c:	20000c6c 	.word	0x20000c6c
 8006340:	20000c6e 	.word	0x20000c6e
 8006344:	20000c70 	.word	0x20000c70
 8006348:	20000c74 	.word	0x20000c74
 800634c:	20000cbc 	.word	0x20000cbc
 8006350:	20000cc0 	.word	0x20000cc0
 8006354:	48000800 	.word	0x48000800
 8006358:	20000cc4 	.word	0x20000cc4
 800635c:	20000cc8 	.word	0x20000cc8
 8006360:	20000c76 	.word	0x20000c76
 8006364:	20000c78 	.word	0x20000c78
 8006368:	20000ccc 	.word	0x20000ccc
 800636c:	20000cd0 	.word	0x20000cd0
 8006370:	20000cd4 	.word	0x20000cd4
 8006374:	20000c96 	.word	0x20000c96
 8006378:	20000c98 	.word	0x20000c98
 800637c:	20000ce6 	.word	0x20000ce6
 8006380:	20000ce8 	.word	0x20000ce8
 8006384:	20000cec 	.word	0x20000cec
 8006388:	20000cf0 	.word	0x20000cf0
 800638c:	20000c7c 	.word	0x20000c7c
 8006390:	20000c80 	.word	0x20000c80
 8006394:	20000c84 	.word	0x20000c84
 8006398:	20000c86 	.word	0x20000c86
 800639c:	20000c88 	.word	0x20000c88
 80063a0:	20000c8c 	.word	0x20000c8c
 80063a4:	20000c8e 	.word	0x20000c8e
 80063a8:	20000c90 	.word	0x20000c90
 80063ac:	20000c94 	.word	0x20000c94
 80063b0:	20000c5e 	.word	0x20000c5e
 80063b4:	20000c60 	.word	0x20000c60
 80063b8:	20000c64 	.word	0x20000c64
 80063bc:	20000cd6 	.word	0x20000cd6
 80063c0:	20000cd8 	.word	0x20000cd8
 80063c4:	48000c00 	.word	0x48000c00
 80063c8:	20000cdc 	.word	0x20000cdc
 80063cc:	20000cde 	.word	0x20000cde
 80063d0:	20000ce0 	.word	0x20000ce0
 80063d4:	20000ce4 	.word	0x20000ce4
 80063d8:	20000cf4 	.word	0x20000cf4
 80063dc:	20000cf8 	.word	0x20000cf8
 80063e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063e2:	2301      	movs	r3, #1
 80063e4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80063e6:	1d3b      	adds	r3, r7, #4
 80063e8:	4619      	mov	r1, r3
 80063ea:	486e      	ldr	r0, [pc, #440]	; (80065a4 <MX_GPIO_Init+0x504>)
 80063ec:	f006 fa08 	bl	800c800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80063f0:	2200      	movs	r2, #0
 80063f2:	2100      	movs	r1, #0
 80063f4:	2006      	movs	r0, #6
 80063f6:	f005 fef4 	bl	800c1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80063fa:	2006      	movs	r0, #6
 80063fc:	f005 ff0b 	bl	800c216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8006400:	2200      	movs	r2, #0
 8006402:	2100      	movs	r1, #0
 8006404:	2007      	movs	r0, #7
 8006406:	f005 feec 	bl	800c1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800640a:	2007      	movs	r0, #7
 800640c:	f005 ff03 	bl	800c216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006410:	2200      	movs	r2, #0
 8006412:	2100      	movs	r1, #0
 8006414:	200a      	movs	r0, #10
 8006416:	f005 fee4 	bl	800c1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800641a:	200a      	movs	r0, #10
 800641c:	f005 fefb 	bl	800c216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006420:	2200      	movs	r2, #0
 8006422:	2100      	movs	r1, #0
 8006424:	2017      	movs	r0, #23
 8006426:	f005 fedc 	bl	800c1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800642a:	2017      	movs	r0, #23
 800642c:	f005 fef3 	bl	800c216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006430:	2200      	movs	r2, #0
 8006432:	2100      	movs	r1, #0
 8006434:	2028      	movs	r0, #40	; 0x28
 8006436:	f005 fed4 	bl	800c1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800643a:	2028      	movs	r0, #40	; 0x28
 800643c:	f005 feeb 	bl	800c216 <HAL_NVIC_EnableIRQ>


  }
  /* USER CODE END MX_GPIO_Init_2 */

}
 8006440:	e0ac      	b.n	800659c <MX_GPIO_Init+0x4fc>
    CAN1_INT_Pin          = GPIO_PIN_15;
 8006442:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <MX_GPIO_Init+0x508>)
 8006444:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006448:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 800644a:	4b58      	ldr	r3, [pc, #352]	; (80065ac <MX_GPIO_Init+0x50c>)
 800644c:	4a58      	ldr	r2, [pc, #352]	; (80065b0 <MX_GPIO_Init+0x510>)
 800644e:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006450:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <MX_GPIO_Init+0x514>)
 8006452:	2228      	movs	r2, #40	; 0x28
 8006454:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006456:	4b58      	ldr	r3, [pc, #352]	; (80065b8 <MX_GPIO_Init+0x518>)
 8006458:	2240      	movs	r2, #64	; 0x40
 800645a:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 800645c:	4b57      	ldr	r3, [pc, #348]	; (80065bc <MX_GPIO_Init+0x51c>)
 800645e:	4a58      	ldr	r2, [pc, #352]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006460:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006462:	4b58      	ldr	r3, [pc, #352]	; (80065c4 <MX_GPIO_Init+0x524>)
 8006464:	2217      	movs	r2, #23
 8006466:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 8006468:	4b57      	ldr	r3, [pc, #348]	; (80065c8 <MX_GPIO_Init+0x528>)
 800646a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800646e:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 8006470:	4b56      	ldr	r3, [pc, #344]	; (80065cc <MX_GPIO_Init+0x52c>)
 8006472:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006476:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 8006478:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <MX_GPIO_Init+0x530>)
 800647a:	2217      	movs	r2, #23
 800647c:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 800647e:	4b55      	ldr	r3, [pc, #340]	; (80065d4 <MX_GPIO_Init+0x534>)
 8006480:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006484:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006486:	4b54      	ldr	r3, [pc, #336]	; (80065d8 <MX_GPIO_Init+0x538>)
 8006488:	4a49      	ldr	r2, [pc, #292]	; (80065b0 <MX_GPIO_Init+0x510>)
 800648a:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 800648c:	4b53      	ldr	r3, [pc, #332]	; (80065dc <MX_GPIO_Init+0x53c>)
 800648e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006492:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 8006494:	4b52      	ldr	r3, [pc, #328]	; (80065e0 <MX_GPIO_Init+0x540>)
 8006496:	4a4a      	ldr	r2, [pc, #296]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006498:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800649a:	4b52      	ldr	r3, [pc, #328]	; (80065e4 <MX_GPIO_Init+0x544>)
 800649c:	2228      	movs	r2, #40	; 0x28
 800649e:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 80064a0:	4b51      	ldr	r3, [pc, #324]	; (80065e8 <MX_GPIO_Init+0x548>)
 80064a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064a6:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 80064a8:	4b50      	ldr	r3, [pc, #320]	; (80065ec <MX_GPIO_Init+0x54c>)
 80064aa:	4a45      	ldr	r2, [pc, #276]	; (80065c0 <MX_GPIO_Init+0x520>)
 80064ac:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 80064ae:	4b50      	ldr	r3, [pc, #320]	; (80065f0 <MX_GPIO_Init+0x550>)
 80064b0:	2228      	movs	r2, #40	; 0x28
 80064b2:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 80064b4:	4b4f      	ldr	r3, [pc, #316]	; (80065f4 <MX_GPIO_Init+0x554>)
 80064b6:	2201      	movs	r2, #1
 80064b8:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 80064ba:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <MX_GPIO_Init+0x558>)
 80064bc:	4a39      	ldr	r2, [pc, #228]	; (80065a4 <MX_GPIO_Init+0x504>)
 80064be:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 80064c0:	4b4e      	ldr	r3, [pc, #312]	; (80065fc <MX_GPIO_Init+0x55c>)
 80064c2:	2206      	movs	r2, #6
 80064c4:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 80064c6:	4b4e      	ldr	r3, [pc, #312]	; (8006600 <MX_GPIO_Init+0x560>)
 80064c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064cc:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80064ce:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <MX_GPIO_Init+0x564>)
 80064d0:	4a3b      	ldr	r2, [pc, #236]	; (80065c0 <MX_GPIO_Init+0x520>)
 80064d2:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 80064d4:	4b4c      	ldr	r3, [pc, #304]	; (8006608 <MX_GPIO_Init+0x568>)
 80064d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064da:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 80064dc:	4b4b      	ldr	r3, [pc, #300]	; (800660c <MX_GPIO_Init+0x56c>)
 80064de:	4a34      	ldr	r2, [pc, #208]	; (80065b0 <MX_GPIO_Init+0x510>)
 80064e0:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 80064e2:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <MX_GPIO_Init+0x570>)
 80064e4:	2217      	movs	r2, #23
 80064e6:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 80064e8:	4b4a      	ldr	r3, [pc, #296]	; (8006614 <MX_GPIO_Init+0x574>)
 80064ea:	2210      	movs	r2, #16
 80064ec:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80064ee:	4b4a      	ldr	r3, [pc, #296]	; (8006618 <MX_GPIO_Init+0x578>)
 80064f0:	4a2f      	ldr	r2, [pc, #188]	; (80065b0 <MX_GPIO_Init+0x510>)
 80064f2:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80064f4:	4b49      	ldr	r3, [pc, #292]	; (800661c <MX_GPIO_Init+0x57c>)
 80064f6:	220a      	movs	r2, #10
 80064f8:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80064fa:	4b49      	ldr	r3, [pc, #292]	; (8006620 <MX_GPIO_Init+0x580>)
 80064fc:	2220      	movs	r2, #32
 80064fe:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 8006500:	4b48      	ldr	r3, [pc, #288]	; (8006624 <MX_GPIO_Init+0x584>)
 8006502:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006504:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 8006506:	4b48      	ldr	r3, [pc, #288]	; (8006628 <MX_GPIO_Init+0x588>)
 8006508:	2217      	movs	r2, #23
 800650a:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 800650c:	4b47      	ldr	r3, [pc, #284]	; (800662c <MX_GPIO_Init+0x58c>)
 800650e:	2202      	movs	r2, #2
 8006510:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 8006512:	4b47      	ldr	r3, [pc, #284]	; (8006630 <MX_GPIO_Init+0x590>)
 8006514:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <MX_GPIO_Init+0x504>)
 8006516:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 8006518:	4b46      	ldr	r3, [pc, #280]	; (8006634 <MX_GPIO_Init+0x594>)
 800651a:	2201      	movs	r2, #1
 800651c:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 800651e:	4b46      	ldr	r3, [pc, #280]	; (8006638 <MX_GPIO_Init+0x598>)
 8006520:	4a27      	ldr	r2, [pc, #156]	; (80065c0 <MX_GPIO_Init+0x520>)
 8006522:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 8006524:	4b45      	ldr	r3, [pc, #276]	; (800663c <MX_GPIO_Init+0x59c>)
 8006526:	2208      	movs	r2, #8
 8006528:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 800652a:	4b45      	ldr	r3, [pc, #276]	; (8006640 <MX_GPIO_Init+0x5a0>)
 800652c:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <MX_GPIO_Init+0x520>)
 800652e:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;
 8006530:	4b44      	ldr	r3, [pc, #272]	; (8006644 <MX_GPIO_Init+0x5a4>)
 8006532:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006536:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 8006538:	4b43      	ldr	r3, [pc, #268]	; (8006648 <MX_GPIO_Init+0x5a8>)
 800653a:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <MX_GPIO_Init+0x510>)
 800653c:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 800653e:	4b43      	ldr	r3, [pc, #268]	; (800664c <MX_GPIO_Init+0x5ac>)
 8006540:	2228      	movs	r2, #40	; 0x28
 8006542:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;
 8006544:	4b42      	ldr	r3, [pc, #264]	; (8006650 <MX_GPIO_Init+0x5b0>)
 8006546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800654a:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 800654c:	4b41      	ldr	r3, [pc, #260]	; (8006654 <MX_GPIO_Init+0x5b4>)
 800654e:	4a18      	ldr	r2, [pc, #96]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006550:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8006552:	4b41      	ldr	r3, [pc, #260]	; (8006658 <MX_GPIO_Init+0x5b8>)
 8006554:	2206      	movs	r2, #6
 8006556:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;
 8006558:	4b40      	ldr	r3, [pc, #256]	; (800665c <MX_GPIO_Init+0x5bc>)
 800655a:	2204      	movs	r2, #4
 800655c:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 800655e:	4b40      	ldr	r3, [pc, #256]	; (8006660 <MX_GPIO_Init+0x5c0>)
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006562:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 8006564:	4b3f      	ldr	r3, [pc, #252]	; (8006664 <MX_GPIO_Init+0x5c4>)
 8006566:	2208      	movs	r2, #8
 8006568:	801a      	strh	r2, [r3, #0]
    LED_CAN1_Pin         = GPIO_PIN_0;
 800656a:	4b3f      	ldr	r3, [pc, #252]	; (8006668 <MX_GPIO_Init+0x5c8>)
 800656c:	2201      	movs	r2, #1
 800656e:	801a      	strh	r2, [r3, #0]
    LED_CAN1_GPIO_Port   = GPIOB;
 8006570:	4b3e      	ldr	r3, [pc, #248]	; (800666c <MX_GPIO_Init+0x5cc>)
 8006572:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006574:	601a      	str	r2, [r3, #0]
    LED_CAN2_Pin         = GPIO_PIN_1;
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <MX_GPIO_Init+0x5d0>)
 8006578:	2202      	movs	r2, #2
 800657a:	801a      	strh	r2, [r3, #0]
    LED_CAN2_GPIO_Port   = GPIOB;
 800657c:	4b3d      	ldr	r3, [pc, #244]	; (8006674 <MX_GPIO_Init+0x5d4>)
 800657e:	4a0c      	ldr	r2, [pc, #48]	; (80065b0 <MX_GPIO_Init+0x510>)
 8006580:	601a      	str	r2, [r3, #0]
    LED_CAN3_Pin         = GPIO_PIN_4;
 8006582:	4b3d      	ldr	r3, [pc, #244]	; (8006678 <MX_GPIO_Init+0x5d8>)
 8006584:	2210      	movs	r2, #16
 8006586:	801a      	strh	r2, [r3, #0]
    LED_CAN3_GPIO_Port   = GPIOE;
 8006588:	4b3c      	ldr	r3, [pc, #240]	; (800667c <MX_GPIO_Init+0x5dc>)
 800658a:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <MX_GPIO_Init+0x5e0>)
 800658c:	601a      	str	r2, [r3, #0]
    LED_HBEAT_Pin        = GPIO_PIN_12;
 800658e:	4b3d      	ldr	r3, [pc, #244]	; (8006684 <MX_GPIO_Init+0x5e4>)
 8006590:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006594:	801a      	strh	r2, [r3, #0]
    LED_HBEAT_GPIO_Port  = GPIOB;
 8006596:	4b3c      	ldr	r3, [pc, #240]	; (8006688 <MX_GPIO_Init+0x5e8>)
 8006598:	4a05      	ldr	r2, [pc, #20]	; (80065b0 <MX_GPIO_Init+0x510>)
 800659a:	601a      	str	r2, [r3, #0]
}
 800659c:	bf00      	nop
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	48000c00 	.word	0x48000c00
 80065a8:	20000c5e 	.word	0x20000c5e
 80065ac:	20000c60 	.word	0x20000c60
 80065b0:	48000400 	.word	0x48000400
 80065b4:	20000c64 	.word	0x20000c64
 80065b8:	20000c66 	.word	0x20000c66
 80065bc:	20000c68 	.word	0x20000c68
 80065c0:	48000800 	.word	0x48000800
 80065c4:	20000c6c 	.word	0x20000c6c
 80065c8:	20000c6e 	.word	0x20000c6e
 80065cc:	20000c70 	.word	0x20000c70
 80065d0:	20000c74 	.word	0x20000c74
 80065d4:	20000c76 	.word	0x20000c76
 80065d8:	20000c78 	.word	0x20000c78
 80065dc:	20000c7c 	.word	0x20000c7c
 80065e0:	20000c80 	.word	0x20000c80
 80065e4:	20000c84 	.word	0x20000c84
 80065e8:	20000c86 	.word	0x20000c86
 80065ec:	20000c88 	.word	0x20000c88
 80065f0:	20000c8c 	.word	0x20000c8c
 80065f4:	20000c8e 	.word	0x20000c8e
 80065f8:	20000c90 	.word	0x20000c90
 80065fc:	20000c94 	.word	0x20000c94
 8006600:	20000c96 	.word	0x20000c96
 8006604:	20000c98 	.word	0x20000c98
 8006608:	20000c9c 	.word	0x20000c9c
 800660c:	20000ca0 	.word	0x20000ca0
 8006610:	20000ca4 	.word	0x20000ca4
 8006614:	20000ca6 	.word	0x20000ca6
 8006618:	20000ca8 	.word	0x20000ca8
 800661c:	20000cac 	.word	0x20000cac
 8006620:	20000cae 	.word	0x20000cae
 8006624:	20000cb0 	.word	0x20000cb0
 8006628:	20000cb4 	.word	0x20000cb4
 800662c:	20000cb6 	.word	0x20000cb6
 8006630:	20000cb8 	.word	0x20000cb8
 8006634:	20000cbc 	.word	0x20000cbc
 8006638:	20000cc0 	.word	0x20000cc0
 800663c:	20000cc4 	.word	0x20000cc4
 8006640:	20000cc8 	.word	0x20000cc8
 8006644:	20000ccc 	.word	0x20000ccc
 8006648:	20000cd0 	.word	0x20000cd0
 800664c:	20000cd4 	.word	0x20000cd4
 8006650:	20000cd6 	.word	0x20000cd6
 8006654:	20000cd8 	.word	0x20000cd8
 8006658:	20000cdc 	.word	0x20000cdc
 800665c:	20000cde 	.word	0x20000cde
 8006660:	20000ce0 	.word	0x20000ce0
 8006664:	20000ce4 	.word	0x20000ce4
 8006668:	20000cfc 	.word	0x20000cfc
 800666c:	20000d00 	.word	0x20000d00
 8006670:	20000d04 	.word	0x20000d04
 8006674:	20000d08 	.word	0x20000d08
 8006678:	20000d0c 	.word	0x20000d0c
 800667c:	20000d10 	.word	0x20000d10
 8006680:	48001000 	.word	0x48001000
 8006684:	20000d14 	.word	0x20000d14
 8006688:	20000d18 	.word	0x20000d18

0800668c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006690:	4904      	ldr	r1, [pc, #16]	; (80066a4 <Error_Handler+0x18>)
 8006692:	4805      	ldr	r0, [pc, #20]	; (80066a8 <Error_Handler+0x1c>)
 8006694:	f00c fdb4 	bl	8013200 <siprintf>
 8006698:	4803      	ldr	r0, [pc, #12]	; (80066a8 <Error_Handler+0x1c>)
 800669a:	f7fe fe61 	bl	8005360 <serialOut>
  return;
 800669e:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	08016604 	.word	0x08016604
 80066a8:	20000b64 	.word	0x20000b64

080066ac <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 80066b2:	f7fe ff97 	bl	80055e4 <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 80066b6:	2254      	movs	r2, #84	; 0x54
 80066b8:	2100      	movs	r1, #0
 80066ba:	4888      	ldr	r0, [pc, #544]	; (80068dc <PCU_Initialize+0x230>)
 80066bc:	f00b fd8e 	bl	80121dc <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 80066c0:	4b87      	ldr	r3, [pc, #540]	; (80068e0 <PCU_Initialize+0x234>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	4b85      	ldr	r3, [pc, #532]	; (80068dc <PCU_Initialize+0x230>)
 80066c8:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 80066ca:	4b84      	ldr	r3, [pc, #528]	; (80068dc <PCU_Initialize+0x230>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 80066d0:	4b82      	ldr	r3, [pc, #520]	; (80068dc <PCU_Initialize+0x230>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 80066d6:	4b81      	ldr	r3, [pc, #516]	; (80068dc <PCU_Initialize+0x230>)
 80066d8:	2200      	movs	r2, #0
 80066da:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 80066dc:	4b7f      	ldr	r3, [pc, #508]	; (80068dc <PCU_Initialize+0x230>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d103      	bne.n	80066ec <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 80066e4:	4b7d      	ldr	r3, [pc, #500]	; (80068dc <PCU_Initialize+0x230>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	815a      	strh	r2, [r3, #10]
 80066ea:	e007      	b.n	80066fc <PCU_Initialize+0x50>
  else if (pack.id == 1)
 80066ec:	4b7b      	ldr	r3, [pc, #492]	; (80068dc <PCU_Initialize+0x230>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d103      	bne.n	80066fc <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 80066f4:	4b79      	ldr	r3, [pc, #484]	; (80068dc <PCU_Initialize+0x230>)
 80066f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066fa:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 80066fc:	4b77      	ldr	r3, [pc, #476]	; (80068dc <PCU_Initialize+0x230>)
 80066fe:	2200      	movs	r2, #0
 8006700:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8006702:	4b76      	ldr	r3, [pc, #472]	; (80068dc <PCU_Initialize+0x230>)
 8006704:	2200      	movs	r2, #0
 8006706:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8006708:	4b74      	ldr	r3, [pc, #464]	; (80068dc <PCU_Initialize+0x230>)
 800670a:	2200      	movs	r2, #0
 800670c:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 800670e:	4b73      	ldr	r3, [pc, #460]	; (80068dc <PCU_Initialize+0x230>)
 8006710:	2200      	movs	r2, #0
 8006712:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8006714:	4b71      	ldr	r3, [pc, #452]	; (80068dc <PCU_Initialize+0x230>)
 8006716:	2200      	movs	r2, #0
 8006718:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 800671a:	4b70      	ldr	r3, [pc, #448]	; (80068dc <PCU_Initialize+0x230>)
 800671c:	2200      	movs	r2, #0
 800671e:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8006720:	4b6e      	ldr	r3, [pc, #440]	; (80068dc <PCU_Initialize+0x230>)
 8006722:	2200      	movs	r2, #0
 8006724:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8006726:	4b6d      	ldr	r3, [pc, #436]	; (80068dc <PCU_Initialize+0x230>)
 8006728:	2200      	movs	r2, #0
 800672a:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 800672c:	4b6b      	ldr	r3, [pc, #428]	; (80068dc <PCU_Initialize+0x230>)
 800672e:	2200      	movs	r2, #0
 8006730:	845a      	strh	r2, [r3, #34]	; 0x22
  pack.cellAvgTemp=0;
 8006732:	4b6a      	ldr	r3, [pc, #424]	; (80068dc <PCU_Initialize+0x230>)
 8006734:	2200      	movs	r2, #0
 8006736:	84da      	strh	r2, [r3, #38]	; 0x26
  pack.cellHiVolt=0;
 8006738:	4b68      	ldr	r3, [pc, #416]	; (80068dc <PCU_Initialize+0x230>)
 800673a:	2200      	movs	r2, #0
 800673c:	851a      	strh	r2, [r3, #40]	; 0x28
  pack.cellLoVolt=0;
 800673e:	4b67      	ldr	r3, [pc, #412]	; (80068dc <PCU_Initialize+0x230>)
 8006740:	2200      	movs	r2, #0
 8006742:	859a      	strh	r2, [r3, #44]	; 0x2c
  pack.cellAvgVolt=0;
 8006744:	4b65      	ldr	r3, [pc, #404]	; (80068dc <PCU_Initialize+0x230>)
 8006746:	2200      	movs	r2, #0
 8006748:	861a      	strh	r2, [r3, #48]	; 0x30
  pack.status=0;
 800674a:	4b64      	ldr	r3, [pc, #400]	; (80068dc <PCU_Initialize+0x230>)
 800674c:	2200      	movs	r2, #0
 800674e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  pack.vcuStateChange=0;
 8006752:	4b62      	ldr	r3, [pc, #392]	; (80068dc <PCU_Initialize+0x230>)
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  pack.state=0;
 800675a:	4b60      	ldr	r3, [pc, #384]	; (80068dc <PCU_Initialize+0x230>)
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pack.vcuRequestedState=0;
 8006762:	4b5e      	ldr	r3, [pc, #376]	; (80068dc <PCU_Initialize+0x230>)
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pack.soc=0;
 800676a:	4b5c      	ldr	r3, [pc, #368]	; (80068dc <PCU_Initialize+0x230>)
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  pack.soh=0;
 8006772:	4b5a      	ldr	r3, [pc, #360]	; (80068dc <PCU_Initialize+0x230>)
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  pack.vcuLastContact.overflows=0;
 800677a:	4b58      	ldr	r3, [pc, #352]	; (80068dc <PCU_Initialize+0x230>)
 800677c:	2200      	movs	r2, #0
 800677e:	649a      	str	r2, [r3, #72]	; 0x48
  pack.vcuLastContact.ticks=0;
 8006780:	4b56      	ldr	r3, [pc, #344]	; (80068dc <PCU_Initialize+0x230>)
 8006782:	2200      	movs	r2, #0
 8006784:	645a      	str	r2, [r3, #68]	; 0x44
  pack.cellBalanceActive=0;
 8006786:	4b55      	ldr	r3, [pc, #340]	; (80068dc <PCU_Initialize+0x230>)
 8006788:	2200      	movs	r2, #0
 800678a:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 800678c:	4b53      	ldr	r3, [pc, #332]	; (80068dc <PCU_Initialize+0x230>)
 800678e:	2200      	movs	r2, #0
 8006790:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 8006792:	4b52      	ldr	r3, [pc, #328]	; (80068dc <PCU_Initialize+0x230>)
 8006794:	2200      	movs	r2, #0
 8006796:	761a      	strb	r2, [r3, #24]

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8006798:	2300      	movs	r3, #0
 800679a:	71fb      	strb	r3, [r7, #7]
 800679c:	e00f      	b.n	80067be <PCU_Initialize+0x112>
    memset(&module[index],0,sizeof(module[index]));
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80067a4:	fb02 f303 	mul.w	r3, r2, r3
 80067a8:	4a4e      	ldr	r2, [pc, #312]	; (80068e4 <PCU_Initialize+0x238>)
 80067aa:	4413      	add	r3, r2
 80067ac:	f240 42c4 	movw	r2, #1220	; 0x4c4
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f00b fd12 	bl	80121dc <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	3301      	adds	r3, #1
 80067bc:	71fb      	strb	r3, [r7, #7]
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b1f      	cmp	r3, #31
 80067c2:	d9ec      	bls.n	800679e <PCU_Initialize+0xf2>


  bool passed;


  serialOut("");
 80067c4:	4848      	ldr	r0, [pc, #288]	; (80068e8 <PCU_Initialize+0x23c>)
 80067c6:	f7fe fdcb 	bl	8005360 <serialOut>
  serialOut("");
 80067ca:	4847      	ldr	r0, [pc, #284]	; (80068e8 <PCU_Initialize+0x23c>)
 80067cc:	f7fe fdc8 	bl	8005360 <serialOut>
  serialOut("        ██    ██");
 80067d0:	4846      	ldr	r0, [pc, #280]	; (80068ec <PCU_Initialize+0x240>)
 80067d2:	f7fe fdc5 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 80067d6:	4846      	ldr	r0, [pc, #280]	; (80068f0 <PCU_Initialize+0x244>)
 80067d8:	f7fe fdc2 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2023");
 80067dc:	4845      	ldr	r0, [pc, #276]	; (80068f4 <PCU_Initialize+0x248>)
 80067de:	f7fe fdbf 	bl	8005360 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 80067e2:	4845      	ldr	r0, [pc, #276]	; (80068f8 <PCU_Initialize+0x24c>)
 80067e4:	f7fe fdbc 	bl	8005360 <serialOut>
  serialOut("     ██    ██    ██");
 80067e8:	4844      	ldr	r0, [pc, #272]	; (80068fc <PCU_Initialize+0x250>)
 80067ea:	f7fe fdb9 	bl	8005360 <serialOut>
  serialOut("     m o d b a t t");
 80067ee:	4844      	ldr	r0, [pc, #272]	; (8006900 <PCU_Initialize+0x254>)
 80067f0:	f7fe fdb6 	bl	8005360 <serialOut>
  serialOut("");
 80067f4:	483c      	ldr	r0, [pc, #240]	; (80068e8 <PCU_Initialize+0x23c>)
 80067f6:	f7fe fdb3 	bl	8005360 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 80067fa:	2000      	movs	r0, #0
 80067fc:	f003 fc18 	bl	800a030 <CAN_TestRamAccess>
 8006800:	4603      	mov	r3, r0
 8006802:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 8006804:	79bb      	ldrb	r3, [r7, #6]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <PCU_Initialize+0x16e>
 800680a:	493e      	ldr	r1, [pc, #248]	; (8006904 <PCU_Initialize+0x258>)
 800680c:	483e      	ldr	r0, [pc, #248]	; (8006908 <PCU_Initialize+0x25c>)
 800680e:	f00c fcf7 	bl	8013200 <siprintf>
 8006812:	483d      	ldr	r0, [pc, #244]	; (8006908 <PCU_Initialize+0x25c>)
 8006814:	f7fe fda4 	bl	8005360 <serialOut>
 8006818:	e006      	b.n	8006828 <PCU_Initialize+0x17c>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 800681a:	493c      	ldr	r1, [pc, #240]	; (800690c <PCU_Initialize+0x260>)
 800681c:	483a      	ldr	r0, [pc, #232]	; (8006908 <PCU_Initialize+0x25c>)
 800681e:	f00c fcef 	bl	8013200 <siprintf>
 8006822:	4839      	ldr	r0, [pc, #228]	; (8006908 <PCU_Initialize+0x25c>)
 8006824:	f7fe fd9c 	bl	8005360 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8006828:	2000      	movs	r0, #0
 800682a:	f003 fb87 	bl	8009f3c <CAN_TestRegisterAccess>
 800682e:	4603      	mov	r3, r0
 8006830:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 8006832:	79bb      	ldrb	r3, [r7, #6]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <PCU_Initialize+0x19c>
 8006838:	4935      	ldr	r1, [pc, #212]	; (8006910 <PCU_Initialize+0x264>)
 800683a:	4833      	ldr	r0, [pc, #204]	; (8006908 <PCU_Initialize+0x25c>)
 800683c:	f00c fce0 	bl	8013200 <siprintf>
 8006840:	4831      	ldr	r0, [pc, #196]	; (8006908 <PCU_Initialize+0x25c>)
 8006842:	f7fe fd8d 	bl	8005360 <serialOut>
 8006846:	e006      	b.n	8006856 <PCU_Initialize+0x1aa>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006848:	4932      	ldr	r1, [pc, #200]	; (8006914 <PCU_Initialize+0x268>)
 800684a:	482f      	ldr	r0, [pc, #188]	; (8006908 <PCU_Initialize+0x25c>)
 800684c:	f00c fcd8 	bl	8013200 <siprintf>
 8006850:	482d      	ldr	r0, [pc, #180]	; (8006908 <PCU_Initialize+0x25c>)
 8006852:	f7fe fd85 	bl	8005360 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 8006856:	4930      	ldr	r1, [pc, #192]	; (8006918 <PCU_Initialize+0x26c>)
 8006858:	482b      	ldr	r0, [pc, #172]	; (8006908 <PCU_Initialize+0x25c>)
 800685a:	f00c fcd1 	bl	8013200 <siprintf>
 800685e:	482a      	ldr	r0, [pc, #168]	; (8006908 <PCU_Initialize+0x25c>)
 8006860:	f7fe fd7e 	bl	8005360 <serialOut>

  passed = CAN_TestRamAccess(CAN2);
 8006864:	2001      	movs	r0, #1
 8006866:	f003 fbe3 	bl	800a030 <CAN_TestRamAccess>
 800686a:	4603      	mov	r3, r0
 800686c:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 800686e:	79bb      	ldrb	r3, [r7, #6]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d007      	beq.n	8006884 <PCU_Initialize+0x1d8>
 8006874:	4929      	ldr	r1, [pc, #164]	; (800691c <PCU_Initialize+0x270>)
 8006876:	4824      	ldr	r0, [pc, #144]	; (8006908 <PCU_Initialize+0x25c>)
 8006878:	f00c fcc2 	bl	8013200 <siprintf>
 800687c:	4822      	ldr	r0, [pc, #136]	; (8006908 <PCU_Initialize+0x25c>)
 800687e:	f7fe fd6f 	bl	8005360 <serialOut>
 8006882:	e006      	b.n	8006892 <PCU_Initialize+0x1e6>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006884:	4926      	ldr	r1, [pc, #152]	; (8006920 <PCU_Initialize+0x274>)
 8006886:	4820      	ldr	r0, [pc, #128]	; (8006908 <PCU_Initialize+0x25c>)
 8006888:	f00c fcba 	bl	8013200 <siprintf>
 800688c:	481e      	ldr	r0, [pc, #120]	; (8006908 <PCU_Initialize+0x25c>)
 800688e:	f7fe fd67 	bl	8005360 <serialOut>
  }

  passed = CAN_TestRegisterAccess(CAN2);
 8006892:	2001      	movs	r0, #1
 8006894:	f003 fb52 	bl	8009f3c <CAN_TestRegisterAccess>
 8006898:	4603      	mov	r3, r0
 800689a:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 800689c:	79bb      	ldrb	r3, [r7, #6]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d007      	beq.n	80068b2 <PCU_Initialize+0x206>
 80068a2:	4920      	ldr	r1, [pc, #128]	; (8006924 <PCU_Initialize+0x278>)
 80068a4:	4818      	ldr	r0, [pc, #96]	; (8006908 <PCU_Initialize+0x25c>)
 80068a6:	f00c fcab 	bl	8013200 <siprintf>
 80068aa:	4817      	ldr	r0, [pc, #92]	; (8006908 <PCU_Initialize+0x25c>)
 80068ac:	f7fe fd58 	bl	8005360 <serialOut>
 80068b0:	e006      	b.n	80068c0 <PCU_Initialize+0x214>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 80068b2:	491d      	ldr	r1, [pc, #116]	; (8006928 <PCU_Initialize+0x27c>)
 80068b4:	4814      	ldr	r0, [pc, #80]	; (8006908 <PCU_Initialize+0x25c>)
 80068b6:	f00c fca3 	bl	8013200 <siprintf>
 80068ba:	4813      	ldr	r0, [pc, #76]	; (8006908 <PCU_Initialize+0x25c>)
 80068bc:	f7fe fd50 	bl	8005360 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 80068c0:	4915      	ldr	r1, [pc, #84]	; (8006918 <PCU_Initialize+0x26c>)
 80068c2:	4811      	ldr	r0, [pc, #68]	; (8006908 <PCU_Initialize+0x25c>)
 80068c4:	f00c fc9c 	bl	8013200 <siprintf>
 80068c8:	480f      	ldr	r0, [pc, #60]	; (8006908 <PCU_Initialize+0x25c>)
 80068ca:	f7fe fd49 	bl	8005360 <serialOut>

  appData.state = PC_STATE_INIT;
 80068ce:	4b17      	ldr	r3, [pc, #92]	; (800692c <PCU_Initialize+0x280>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	701a      	strb	r2, [r3, #0]
}
 80068d4:	bf00      	nop
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	2000a664 	.word	0x2000a664
 80068e0:	2000098c 	.word	0x2000098c
 80068e4:	20000de4 	.word	0x20000de4
 80068e8:	08016614 	.word	0x08016614
 80068ec:	08016618 	.word	0x08016618
 80068f0:	08016634 	.word	0x08016634
 80068f4:	0801665c 	.word	0x0801665c
 80068f8:	080166ac 	.word	0x080166ac
 80068fc:	080166fc 	.word	0x080166fc
 8006900:	0801671c 	.word	0x0801671c
 8006904:	08016730 	.word	0x08016730
 8006908:	20000b64 	.word	0x20000b64
 800690c:	08016760 	.word	0x08016760
 8006910:	08016798 	.word	0x08016798
 8006914:	080167c8 	.word	0x080167c8
 8006918:	08016800 	.word	0x08016800
 800691c:	08016804 	.word	0x08016804
 8006920:	08016834 	.word	0x08016834
 8006924:	0801686c 	.word	0x0801686c
 8006928:	0801689c 	.word	0x0801689c
 800692c:	20000d28 	.word	0x20000d28

08006930 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t moduleId;
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 8006936:	4b96      	ldr	r3, [pc, #600]	; (8006b90 <PCU_Tasks+0x260>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d126      	bne.n	800698c <PCU_Tasks+0x5c>
    switchLedOn(GREEN_LED);
 800693e:	2001      	movs	r0, #1
 8006940:	f7fe febc 	bl	80056bc <switchLedOn>
    switchLedOn(RED_LED);
 8006944:	2000      	movs	r0, #0
 8006946:	f7fe feb9 	bl	80056bc <switchLedOn>
    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 800694a:	2000      	movs	r0, #0
 800694c:	f000 fc0c 	bl	8007168 <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8006950:	2001      	movs	r0, #1
 8006952:	f000 fc09 	bl	8007168 <DRV_CANFDSPI_Init>
    switchLedOff(GREEN_LED);
 8006956:	2001      	movs	r0, #1
 8006958:	f7fe feec 	bl	8005734 <switchLedOff>
    switchLedOff(RED_LED);
 800695c:	2000      	movs	r0, #0
 800695e:	f7fe fee9 	bl	8005734 <switchLedOff>

    MCU_IsolateAllModules();
 8006962:	f001 fce1 	bl	8008328 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 8006966:	f001 fc8b 	bl	8008280 <MCU_DeRegisterAllModules>

    pack.vcuRequestedState = packOff;
 800696a:	4b8a      	ldr	r3, [pc, #552]	; (8006b94 <PCU_Tasks+0x264>)
 800696c:	2200      	movs	r2, #0
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 8006972:	4b89      	ldr	r3, [pc, #548]	; (8006b98 <PCU_Tasks+0x268>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a87      	ldr	r2, [pc, #540]	; (8006b94 <PCU_Tasks+0x264>)
 8006978:	6493      	str	r3, [r2, #72]	; 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 800697a:	4b88      	ldr	r3, [pc, #544]	; (8006b9c <PCU_Tasks+0x26c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	4a84      	ldr	r2, [pc, #528]	; (8006b94 <PCU_Tasks+0x264>)
 8006982:	6453      	str	r3, [r2, #68]	; 0x44

    appData.state = PC_STATE_RUN;
 8006984:	4b82      	ldr	r3, [pc, #520]	; (8006b90 <PCU_Tasks+0x260>)
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 800698a:	e3e2      	b.n	8007152 <PCU_Tasks+0x822>
  }else if (appData.state == PC_STATE_RUN){
 800698c:	4b80      	ldr	r3, [pc, #512]	; (8006b90 <PCU_Tasks+0x260>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b01      	cmp	r3, #1
 8006992:	f040 83de 	bne.w	8007152 <PCU_Tasks+0x822>
    if(can1RxInterrupt)
 8006996:	4b82      	ldr	r3, [pc, #520]	; (8006ba0 <PCU_Tasks+0x270>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <PCU_Tasks+0x72>
      VCU_ReceiveMessages();
 800699e:	f003 ffaf 	bl	800a900 <VCU_ReceiveMessages>
    if(can2RxInterrupt)
 80069a2:	4b80      	ldr	r3, [pc, #512]	; (8006ba4 <PCU_Tasks+0x274>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <PCU_Tasks+0x7e>
      MCU_ReceiveMessages();
 80069aa:	f001 f97d 	bl	8007ca8 <MCU_ReceiveMessages>
    elapsedTicks = VCU_TicksSinceLastMessage();
 80069ae:	f004 fb55 	bl	800b05c <VCU_TicksSinceLastMessage>
 80069b2:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80069ba:	d920      	bls.n	80069fe <PCU_Tasks+0xce>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 80069bc:	4b75      	ldr	r3, [pc, #468]	; (8006b94 <PCU_Tasks+0x264>)
 80069be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d009      	beq.n	80069da <PCU_Tasks+0xaa>
 80069c6:	4b73      	ldr	r3, [pc, #460]	; (8006b94 <PCU_Tasks+0x264>)
 80069c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d004      	beq.n	80069da <PCU_Tasks+0xaa>
 80069d0:	4b70      	ldr	r3, [pc, #448]	; (8006b94 <PCU_Tasks+0x264>)
 80069d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d130      	bne.n	8006a3c <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 80069da:	4b73      	ldr	r3, [pc, #460]	; (8006ba8 <PCU_Tasks+0x278>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f003 0304 	and.w	r3, r3, #4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <PCU_Tasks+0xc4>
 80069e6:	4971      	ldr	r1, [pc, #452]	; (8006bac <PCU_Tasks+0x27c>)
 80069e8:	4871      	ldr	r0, [pc, #452]	; (8006bb0 <PCU_Tasks+0x280>)
 80069ea:	f00c fc09 	bl	8013200 <siprintf>
 80069ee:	4870      	ldr	r0, [pc, #448]	; (8006bb0 <PCU_Tasks+0x280>)
 80069f0:	f7fe fcb6 	bl	8005360 <serialOut>
        pack.vcuRequestedState = packOff;
 80069f4:	4b67      	ldr	r3, [pc, #412]	; (8006b94 <PCU_Tasks+0x264>)
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80069fc:	e01e      	b.n	8006a3c <PCU_Tasks+0x10c>
    }else if(elapsedTicks > VCU_ET_WARNING){
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8006a04:	d91a      	bls.n	8006a3c <PCU_Tasks+0x10c>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 8006a06:	4b63      	ldr	r3, [pc, #396]	; (8006b94 <PCU_Tasks+0x264>)
 8006a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d004      	beq.n	8006a1a <PCU_Tasks+0xea>
 8006a10:	4b60      	ldr	r3, [pc, #384]	; (8006b94 <PCU_Tasks+0x264>)
 8006a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d110      	bne.n	8006a3c <PCU_Tasks+0x10c>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 8006a1a:	4b63      	ldr	r3, [pc, #396]	; (8006ba8 <PCU_Tasks+0x278>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d006      	beq.n	8006a34 <PCU_Tasks+0x104>
 8006a26:	4963      	ldr	r1, [pc, #396]	; (8006bb4 <PCU_Tasks+0x284>)
 8006a28:	4861      	ldr	r0, [pc, #388]	; (8006bb0 <PCU_Tasks+0x280>)
 8006a2a:	f00c fbe9 	bl	8013200 <siprintf>
 8006a2e:	4860      	ldr	r0, [pc, #384]	; (8006bb0 <PCU_Tasks+0x280>)
 8006a30:	f7fe fc96 	bl	8005360 <serialOut>
        pack.vcuRequestedState = packStandby;
 8006a34:	4b57      	ldr	r3, [pc, #348]	; (8006b94 <PCU_Tasks+0x264>)
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    for (index =0;index < pack.moduleCount;index++){
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]
 8006a40:	e0dd      	b.n	8006bfe <PCU_Tasks+0x2ce>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8006a42:	7bfb      	ldrb	r3, [r7, #15]
 8006a44:	4a5c      	ldr	r2, [pc, #368]	; (8006bb8 <PCU_Tasks+0x288>)
 8006a46:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a4a:	fb01 f303 	mul.w	r3, r1, r3
 8006a4e:	4413      	add	r3, r2
 8006a50:	3308      	adds	r3, #8
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f003 f981 	bl	8009d5c <MCU_TicksSinceLastMessage>
 8006a5a:	60b8      	str	r0, [r7, #8]
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8006a62:	d95d      	bls.n	8006b20 <PCU_Tasks+0x1f0>
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	4a54      	ldr	r2, [pc, #336]	; (8006bb8 <PCU_Tasks+0x288>)
 8006a68:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	4413      	add	r3, r2
 8006a72:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d051      	beq.n	8006b20 <PCU_Tasks+0x1f0>
        if( module[index].faultCode.commsError == false){
 8006a7c:	7bfb      	ldrb	r3, [r7, #15]
 8006a7e:	4a4e      	ldr	r2, [pc, #312]	; (8006bb8 <PCU_Tasks+0x288>)
 8006a80:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006a84:	fb01 f303 	mul.w	r3, r1, r3
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006a8e:	789b      	ldrb	r3, [r3, #2]
 8006a90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f040 80ae 	bne.w	8006bf8 <PCU_Tasks+0x2c8>
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x",module[index].moduleId ); serialOut(tempBuffer);}
 8006a9c:	4b42      	ldr	r3, [pc, #264]	; (8006ba8 <PCU_Tasks+0x278>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f003 0303 	and.w	r3, r3, #3
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d110      	bne.n	8006aca <PCU_Tasks+0x19a>
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	4a43      	ldr	r2, [pc, #268]	; (8006bb8 <PCU_Tasks+0x288>)
 8006aac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ab0:	fb01 f303 	mul.w	r3, r1, r3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	493f      	ldr	r1, [pc, #252]	; (8006bbc <PCU_Tasks+0x28c>)
 8006abe:	483c      	ldr	r0, [pc, #240]	; (8006bb0 <PCU_Tasks+0x280>)
 8006ac0:	f00c fb9e 	bl	8013200 <siprintf>
 8006ac4:	483a      	ldr	r0, [pc, #232]	; (8006bb0 <PCU_Tasks+0x280>)
 8006ac6:	f7fe fc4b 	bl	8005360 <serialOut>
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 8006aca:	4b32      	ldr	r3, [pc, #200]	; (8006b94 <PCU_Tasks+0x264>)
 8006acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d10d      	bne.n	8006af0 <PCU_Tasks+0x1c0>
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	4a38      	ldr	r2, [pc, #224]	; (8006bb8 <PCU_Tasks+0x288>)
 8006ad8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3327      	adds	r3, #39	; 0x27
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b03      	cmp	r3, #3
 8006ae8:	d102      	bne.n	8006af0 <PCU_Tasks+0x1c0>
            pack.powerStatus.powerStage = stageSelectModule;
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <PCU_Tasks+0x264>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	769a      	strb	r2, [r3, #26]
          module[index].nextState = moduleOff;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4a31      	ldr	r2, [pc, #196]	; (8006bb8 <PCU_Tasks+0x288>)
 8006af4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	4413      	add	r3, r2
 8006afe:	3328      	adds	r3, #40	; 0x28
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	4a2c      	ldr	r2, [pc, #176]	; (8006bb8 <PCU_Tasks+0x288>)
 8006b08:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b0c:	fb01 f303 	mul.w	r3, r1, r3
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006b16:	7893      	ldrb	r3, [r2, #2]
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	7093      	strb	r3, [r2, #2]
        if( module[index].faultCode.commsError == false){
 8006b1e:	e06b      	b.n	8006bf8 <PCU_Tasks+0x2c8>
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006b26:	d94b      	bls.n	8006bc0 <PCU_Tasks+0x290>
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	4a23      	ldr	r2, [pc, #140]	; (8006bb8 <PCU_Tasks+0x288>)
 8006b2c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b30:	fb01 f303 	mul.w	r3, r1, r3
 8006b34:	4413      	add	r3, r2
 8006b36:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	f083 0301 	eor.w	r3, r3, #1
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d03c      	beq.n	8006bc0 <PCU_Tasks+0x290>
        MCU_RequestModuleStatus(module[index].moduleId);
 8006b46:	7bfb      	ldrb	r3, [r7, #15]
 8006b48:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <PCU_Tasks+0x288>)
 8006b4a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b4e:	fb01 f303 	mul.w	r3, r1, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	3308      	adds	r3, #8
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f002 f813 	bl	8008b84 <MCU_RequestModuleStatus>
        if(module[index].hardwarePending)
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <PCU_Tasks+0x288>)
 8006b62:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b66:	fb01 f303 	mul.w	r3, r1, r3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d040      	beq.n	8006bf8 <PCU_Tasks+0x2c8>
          MCU_RequestHardware(module[index].moduleId);
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
 8006b78:	4a0f      	ldr	r2, [pc, #60]	; (8006bb8 <PCU_Tasks+0x288>)
 8006b7a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006b7e:	fb01 f303 	mul.w	r3, r1, r3
 8006b82:	4413      	add	r3, r2
 8006b84:	3308      	adds	r3, #8
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f001 fca1 	bl	80084d0 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 8006b8e:	e033      	b.n	8006bf8 <PCU_Tasks+0x2c8>
 8006b90:	20000d28 	.word	0x20000d28
 8006b94:	2000a664 	.word	0x2000a664
 8006b98:	20000d20 	.word	0x20000d20
 8006b9c:	200005d8 	.word	0x200005d8
 8006ba0:	20000d1e 	.word	0x20000d1e
 8006ba4:	20000d1c 	.word	0x20000d1c
 8006ba8:	2000000c 	.word	0x2000000c
 8006bac:	080168d4 	.word	0x080168d4
 8006bb0:	20000b64 	.word	0x20000b64
 8006bb4:	080168f8 	.word	0x080168f8
 8006bb8:	20000de4 	.word	0x20000de4
 8006bbc:	0801691c 	.word	0x0801691c
        if(module[index].faultCode.commsError == true){
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	4aae      	ldr	r2, [pc, #696]	; (8006e7c <PCU_Tasks+0x54c>)
 8006bc4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006bc8:	fb01 f303 	mul.w	r3, r1, r3
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006bd2:	789b      	ldrb	r3, [r3, #2]
 8006bd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d10c      	bne.n	8006bf8 <PCU_Tasks+0x2c8>
          module[index].faultCode.commsError  = false;
 8006bde:	7bfb      	ldrb	r3, [r7, #15]
 8006be0:	4aa6      	ldr	r2, [pc, #664]	; (8006e7c <PCU_Tasks+0x54c>)
 8006be2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006be6:	fb01 f303 	mul.w	r3, r1, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006bf0:	7893      	ldrb	r3, [r2, #2]
 8006bf2:	f36f 0300 	bfc	r3, #0, #1
 8006bf6:	7093      	strb	r3, [r2, #2]
    for (index =0;index < pack.moduleCount;index++){
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	4ba0      	ldr	r3, [pc, #640]	; (8006e80 <PCU_Tasks+0x550>)
 8006c00:	7d1b      	ldrb	r3, [r3, #20]
 8006c02:	7bfa      	ldrb	r2, [r7, #15]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	f4ff af1c 	bcc.w	8006a42 <PCU_Tasks+0x112>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 8006c0a:	4b9d      	ldr	r3, [pc, #628]	; (8006e80 <PCU_Tasks+0x550>)
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c10:	2b03      	cmp	r3, #3
 8006c12:	d005      	beq.n	8006c20 <PCU_Tasks+0x2f0>
 8006c14:	4b9a      	ldr	r3, [pc, #616]	; (8006e80 <PCU_Tasks+0x550>)
 8006c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	f040 812a 	bne.w	8006e74 <PCU_Tasks+0x544>
      if(pack.powerStatus.powerStage == stageSelectModule){
 8006c20:	4b97      	ldr	r3, [pc, #604]	; (8006e80 <PCU_Tasks+0x550>)
 8006c22:	7e9b      	ldrb	r3, [r3, #26]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f040 808f 	bne.w	8006d48 <PCU_Tasks+0x418>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 8006c2a:	4b96      	ldr	r3, [pc, #600]	; (8006e84 <PCU_Tasks+0x554>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	f003 030a 	and.w	r3, r3, #10
 8006c32:	2b0a      	cmp	r3, #10
 8006c34:	d115      	bne.n	8006c62 <PCU_Tasks+0x332>
 8006c36:	4b92      	ldr	r3, [pc, #584]	; (8006e80 <PCU_Tasks+0x550>)
 8006c38:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006c3c:	4a92      	ldr	r2, [pc, #584]	; (8006e88 <PCU_Tasks+0x558>)
 8006c3e:	fba2 1203 	umull	r1, r2, r2, r3
 8006c42:	0b12      	lsrs	r2, r2, #12
 8006c44:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c48:	fb01 f202 	mul.w	r2, r1, r2
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <PCU_Tasks+0x332>
 8006c54:	498d      	ldr	r1, [pc, #564]	; (8006e8c <PCU_Tasks+0x55c>)
 8006c56:	488e      	ldr	r0, [pc, #568]	; (8006e90 <PCU_Tasks+0x560>)
 8006c58:	f00c fad2 	bl	8013200 <siprintf>
 8006c5c:	488c      	ldr	r0, [pc, #560]	; (8006e90 <PCU_Tasks+0x560>)
 8006c5e:	f7fe fb7f 	bl	8005360 <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 8006c62:	f002 f827 	bl	8008cb4 <MCU_FindMaxVoltageModule>
 8006c66:	4603      	mov	r3, r0
 8006c68:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d12f      	bne.n	8006cd0 <PCU_Tasks+0x3a0>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8006c70:	4b84      	ldr	r3, [pc, #528]	; (8006e84 <PCU_Tasks+0x554>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 0303 	and.w	r3, r3, #3
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d115      	bne.n	8006ca8 <PCU_Tasks+0x378>
 8006c7c:	4b80      	ldr	r3, [pc, #512]	; (8006e80 <PCU_Tasks+0x550>)
 8006c7e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006c82:	4a81      	ldr	r2, [pc, #516]	; (8006e88 <PCU_Tasks+0x558>)
 8006c84:	fba2 1203 	umull	r1, r2, r2, r3
 8006c88:	0b12      	lsrs	r2, r2, #12
 8006c8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006c8e:	fb01 f202 	mul.w	r2, r1, r2
 8006c92:	1a9b      	subs	r3, r3, r2
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d106      	bne.n	8006ca8 <PCU_Tasks+0x378>
 8006c9a:	497e      	ldr	r1, [pc, #504]	; (8006e94 <PCU_Tasks+0x564>)
 8006c9c:	487c      	ldr	r0, [pc, #496]	; (8006e90 <PCU_Tasks+0x560>)
 8006c9e:	f00c faaf 	bl	8013200 <siprintf>
 8006ca2:	487b      	ldr	r0, [pc, #492]	; (8006e90 <PCU_Tasks+0x560>)
 8006ca4:	f7fe fb5c 	bl	8005360 <serialOut>
          pack.errorCounts.firstModule ++;
 8006ca8:	4b75      	ldr	r3, [pc, #468]	; (8006e80 <PCU_Tasks+0x550>)
 8006caa:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006cae:	3301      	adds	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	4b73      	ldr	r3, [pc, #460]	; (8006e80 <PCU_Tasks+0x550>)
 8006cb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8006cb8:	4b71      	ldr	r3, [pc, #452]	; (8006e80 <PCU_Tasks+0x550>)
 8006cba:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006cbe:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d940      	bls.n	8006d48 <PCU_Tasks+0x418>
 8006cc6:	4b6e      	ldr	r3, [pc, #440]	; (8006e80 <PCU_Tasks+0x550>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8006cce:	e03b      	b.n	8006d48 <PCU_Tasks+0x418>
        }else if (moduleId == pack.moduleCount +1 ){
 8006cd0:	79fa      	ldrb	r2, [r7, #7]
 8006cd2:	4b6b      	ldr	r3, [pc, #428]	; (8006e80 <PCU_Tasks+0x550>)
 8006cd4:	7d1b      	ldrb	r3, [r3, #20]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d12f      	bne.n	8006d3c <PCU_Tasks+0x40c>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 8006cdc:	4b69      	ldr	r3, [pc, #420]	; (8006e84 <PCU_Tasks+0x554>)
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0303 	and.w	r3, r3, #3
 8006ce4:	2b03      	cmp	r3, #3
 8006ce6:	d115      	bne.n	8006d14 <PCU_Tasks+0x3e4>
 8006ce8:	4b65      	ldr	r3, [pc, #404]	; (8006e80 <PCU_Tasks+0x550>)
 8006cea:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006cee:	4a66      	ldr	r2, [pc, #408]	; (8006e88 <PCU_Tasks+0x558>)
 8006cf0:	fba2 1203 	umull	r1, r2, r2, r3
 8006cf4:	0b12      	lsrs	r2, r2, #12
 8006cf6:	f241 3188 	movw	r1, #5000	; 0x1388
 8006cfa:	fb01 f202 	mul.w	r2, r1, r2
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <PCU_Tasks+0x3e4>
 8006d06:	4964      	ldr	r1, [pc, #400]	; (8006e98 <PCU_Tasks+0x568>)
 8006d08:	4861      	ldr	r0, [pc, #388]	; (8006e90 <PCU_Tasks+0x560>)
 8006d0a:	f00c fa79 	bl	8013200 <siprintf>
 8006d0e:	4860      	ldr	r0, [pc, #384]	; (8006e90 <PCU_Tasks+0x560>)
 8006d10:	f7fe fb26 	bl	8005360 <serialOut>
          pack.errorCounts.firstModule ++;
 8006d14:	4b5a      	ldr	r3, [pc, #360]	; (8006e80 <PCU_Tasks+0x550>)
 8006d16:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	4b58      	ldr	r3, [pc, #352]	; (8006e80 <PCU_Tasks+0x550>)
 8006d20:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8006d24:	4b56      	ldr	r3, [pc, #344]	; (8006e80 <PCU_Tasks+0x550>)
 8006d26:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8006d2a:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d90a      	bls.n	8006d48 <PCU_Tasks+0x418>
 8006d32:	4b53      	ldr	r3, [pc, #332]	; (8006e80 <PCU_Tasks+0x550>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8006d3a:	e005      	b.n	8006d48 <PCU_Tasks+0x418>
          pack.powerStatus.firstModuleId = moduleId;
 8006d3c:	4a50      	ldr	r2, [pc, #320]	; (8006e80 <PCU_Tasks+0x550>)
 8006d3e:	79fb      	ldrb	r3, [r7, #7]
 8006d40:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 8006d42:	4b4f      	ldr	r3, [pc, #316]	; (8006e80 <PCU_Tasks+0x550>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 8006d48:	4b4d      	ldr	r3, [pc, #308]	; (8006e80 <PCU_Tasks+0x550>)
 8006d4a:	7e9b      	ldrb	r3, [r3, #26]
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	f040 8091 	bne.w	8006e74 <PCU_Tasks+0x544>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8006d52:	4b4b      	ldr	r3, [pc, #300]	; (8006e80 <PCU_Tasks+0x550>)
 8006d54:	7e5b      	ldrb	r3, [r3, #25]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f002 ffcc 	bl	8009cf4 <MCU_ModuleIndexFromId>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73bb      	strb	r3, [r7, #14]
        if (firstModuleIndex != pack.moduleCount){
 8006d60:	4b47      	ldr	r3, [pc, #284]	; (8006e80 <PCU_Tasks+0x550>)
 8006d62:	7d1b      	ldrb	r3, [r3, #20]
 8006d64:	7bba      	ldrb	r2, [r7, #14]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d077      	beq.n	8006e5a <PCU_Tasks+0x52a>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	4a43      	ldr	r2, [pc, #268]	; (8006e7c <PCU_Tasks+0x54c>)
 8006d6e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006d7c:	789b      	ldrb	r3, [r3, #2]
 8006d7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d00e      	beq.n	8006da6 <PCU_Tasks+0x476>
 8006d88:	7bbb      	ldrb	r3, [r7, #14]
 8006d8a:	4a3c      	ldr	r2, [pc, #240]	; (8006e7c <PCU_Tasks+0x54c>)
 8006d8c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006d9a:	789b      	ldrb	r3, [r3, #2]
 8006d9c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d113      	bne.n	8006dce <PCU_Tasks+0x49e>
             pack.powerStatus.powerStage = stageSelectModule;
 8006da6:	4b36      	ldr	r3, [pc, #216]	; (8006e80 <PCU_Tasks+0x550>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8006dac:	4b35      	ldr	r3, [pc, #212]	; (8006e84 <PCU_Tasks+0x554>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 0303 	and.w	r3, r3, #3
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	d15d      	bne.n	8006e74 <PCU_Tasks+0x544>
 8006db8:	4b31      	ldr	r3, [pc, #196]	; (8006e80 <PCU_Tasks+0x550>)
 8006dba:	7e5b      	ldrb	r3, [r3, #25]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	4937      	ldr	r1, [pc, #220]	; (8006e9c <PCU_Tasks+0x56c>)
 8006dc0:	4833      	ldr	r0, [pc, #204]	; (8006e90 <PCU_Tasks+0x560>)
 8006dc2:	f00c fa1d 	bl	8013200 <siprintf>
 8006dc6:	4832      	ldr	r0, [pc, #200]	; (8006e90 <PCU_Tasks+0x560>)
 8006dc8:	f7fe faca 	bl	8005360 <serialOut>
 8006dcc:	e052      	b.n	8006e74 <PCU_Tasks+0x544>
          } else if (pack.vcuRequestedState == packOn){
 8006dce:	4b2c      	ldr	r3, [pc, #176]	; (8006e80 <PCU_Tasks+0x550>)
 8006dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d11d      	bne.n	8006e14 <PCU_Tasks+0x4e4>
            if (module[firstModuleIndex].currentState == moduleOn){
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
 8006dda:	4a28      	ldr	r2, [pc, #160]	; (8006e7c <PCU_Tasks+0x54c>)
 8006ddc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006de0:	fb01 f303 	mul.w	r3, r1, r3
 8006de4:	4413      	add	r3, r2
 8006de6:	3327      	adds	r3, #39	; 0x27
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d107      	bne.n	8006dfe <PCU_Tasks+0x4ce>
              pack.state = packOn;
 8006dee:	4b24      	ldr	r3, [pc, #144]	; (8006e80 <PCU_Tasks+0x550>)
 8006df0:	2203      	movs	r2, #3
 8006df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 8006df6:	4b22      	ldr	r3, [pc, #136]	; (8006e80 <PCU_Tasks+0x550>)
 8006df8:	2202      	movs	r2, #2
 8006dfa:	769a      	strb	r2, [r3, #26]
 8006dfc:	e03a      	b.n	8006e74 <PCU_Tasks+0x544>
                module[firstModuleIndex].nextState = moduleOn;
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
 8006e00:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <PCU_Tasks+0x54c>)
 8006e02:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006e06:	fb01 f303 	mul.w	r3, r1, r3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	3328      	adds	r3, #40	; 0x28
 8006e0e:	2203      	movs	r2, #3
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	e02f      	b.n	8006e74 <PCU_Tasks+0x544>
          } else if (pack.vcuRequestedState == packPrecharge){
 8006e14:	4b1a      	ldr	r3, [pc, #104]	; (8006e80 <PCU_Tasks+0x550>)
 8006e16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d12a      	bne.n	8006e74 <PCU_Tasks+0x544>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	4a16      	ldr	r2, [pc, #88]	; (8006e7c <PCU_Tasks+0x54c>)
 8006e22:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006e26:	fb01 f303 	mul.w	r3, r1, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	3327      	adds	r3, #39	; 0x27
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b02      	cmp	r3, #2
 8006e32:	d107      	bne.n	8006e44 <PCU_Tasks+0x514>
              pack.state = packPrecharge;
 8006e34:	4b12      	ldr	r3, [pc, #72]	; (8006e80 <PCU_Tasks+0x550>)
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 8006e3c:	4b10      	ldr	r3, [pc, #64]	; (8006e80 <PCU_Tasks+0x550>)
 8006e3e:	2202      	movs	r2, #2
 8006e40:	769a      	strb	r2, [r3, #26]
 8006e42:	e017      	b.n	8006e74 <PCU_Tasks+0x544>
                module[firstModuleIndex].nextState = modulePrecharge;
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	4a0d      	ldr	r2, [pc, #52]	; (8006e7c <PCU_Tasks+0x54c>)
 8006e48:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	3328      	adds	r3, #40	; 0x28
 8006e54:	2202      	movs	r2, #2
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e00c      	b.n	8006e74 <PCU_Tasks+0x544>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <PCU_Tasks+0x554>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b03      	cmp	r3, #3
 8006e64:	d106      	bne.n	8006e74 <PCU_Tasks+0x544>
 8006e66:	490e      	ldr	r1, [pc, #56]	; (8006ea0 <PCU_Tasks+0x570>)
 8006e68:	4809      	ldr	r0, [pc, #36]	; (8006e90 <PCU_Tasks+0x560>)
 8006e6a:	f00c f9c9 	bl	8013200 <siprintf>
 8006e6e:	4808      	ldr	r0, [pc, #32]	; (8006e90 <PCU_Tasks+0x560>)
 8006e70:	f7fe fa76 	bl	8005360 <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8006e74:	2300      	movs	r3, #0
 8006e76:	73fb      	strb	r3, [r7, #15]
 8006e78:	e142      	b.n	8007100 <PCU_Tasks+0x7d0>
 8006e7a:	bf00      	nop
 8006e7c:	20000de4 	.word	0x20000de4
 8006e80:	2000a664 	.word	0x2000a664
 8006e84:	2000000c 	.word	0x2000000c
 8006e88:	d1b71759 	.word	0xd1b71759
 8006e8c:	08016940 	.word	0x08016940
 8006e90:	20000b64 	.word	0x20000b64
 8006e94:	08016974 	.word	0x08016974
 8006e98:	08016998 	.word	0x08016998
 8006e9c:	080169bc 	.word	0x080169bc
 8006ea0:	080169fc 	.word	0x080169fc
      if(module[index].faultCode.overCurrent == true){
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	4aad      	ldr	r2, [pc, #692]	; (800715c <PCU_Tasks+0x82c>)
 8006ea8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006eb6:	789b      	ldrb	r3, [r3, #2]
 8006eb8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d127      	bne.n	8006f12 <PCU_Tasks+0x5e2>
        if (pack.vcuRequestedState != packOff){
 8006ec2:	4ba7      	ldr	r3, [pc, #668]	; (8007160 <PCU_Tasks+0x830>)
 8006ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00a      	beq.n	8006ee2 <PCU_Tasks+0x5b2>
          module[index].nextState = moduleStandby;
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	4aa3      	ldr	r2, [pc, #652]	; (800715c <PCU_Tasks+0x82c>)
 8006ed0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	4413      	add	r3, r2
 8006eda:	3328      	adds	r3, #40	; 0x28
 8006edc:	2201      	movs	r2, #1
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	e0af      	b.n	8007042 <PCU_Tasks+0x712>
          module[index].nextState = moduleOff;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	4a9d      	ldr	r2, [pc, #628]	; (800715c <PCU_Tasks+0x82c>)
 8006ee6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006eea:	fb01 f303 	mul.w	r3, r1, r3
 8006eee:	4413      	add	r3, r2
 8006ef0:	3328      	adds	r3, #40	; 0x28
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	4a98      	ldr	r2, [pc, #608]	; (800715c <PCU_Tasks+0x82c>)
 8006efa:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006efe:	fb01 f303 	mul.w	r3, r1, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8006f08:	7893      	ldrb	r3, [r2, #2]
 8006f0a:	f36f 0382 	bfc	r3, #2, #1
 8006f0e:	7093      	strb	r3, [r2, #2]
 8006f10:	e097      	b.n	8007042 <PCU_Tasks+0x712>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	4a91      	ldr	r2, [pc, #580]	; (800715c <PCU_Tasks+0x82c>)
 8006f16:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006f1a:	fb01 f303 	mul.w	r3, r1, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006f24:	789b      	ldrb	r3, [r3, #2]
 8006f26:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f040 8085 	bne.w	800703c <PCU_Tasks+0x70c>
 8006f32:	7bfb      	ldrb	r3, [r7, #15]
 8006f34:	4a89      	ldr	r2, [pc, #548]	; (800715c <PCU_Tasks+0x82c>)
 8006f36:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006f3a:	fb01 f303 	mul.w	r3, r1, r3
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8006f44:	789b      	ldrb	r3, [r3, #2]
 8006f46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d175      	bne.n	800703c <PCU_Tasks+0x70c>
        switch (pack.vcuRequestedState){
 8006f50:	4b83      	ldr	r3, [pc, #524]	; (8007160 <PCU_Tasks+0x830>)
 8006f52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d872      	bhi.n	8007040 <PCU_Tasks+0x710>
 8006f5a:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <PCU_Tasks+0x630>)
 8006f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f60:	08007017 	.word	0x08007017
 8006f64:	08006ff1 	.word	0x08006ff1
 8006f68:	08006fc1 	.word	0x08006fc1
 8006f6c:	08006f71 	.word	0x08006f71
            if(pack.state == packOn){
 8006f70:	4b7b      	ldr	r3, [pc, #492]	; (8007160 <PCU_Tasks+0x830>)
 8006f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d109      	bne.n	8006f8e <PCU_Tasks+0x65e>
              module[index].nextState = moduleOn;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
 8006f7c:	4a77      	ldr	r2, [pc, #476]	; (800715c <PCU_Tasks+0x82c>)
 8006f7e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006f82:	fb01 f303 	mul.w	r3, r1, r3
 8006f86:	4413      	add	r3, r2
 8006f88:	3328      	adds	r3, #40	; 0x28
 8006f8a:	2203      	movs	r2, #3
 8006f8c:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 8006f8e:	4b74      	ldr	r3, [pc, #464]	; (8007160 <PCU_Tasks+0x830>)
 8006f90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006f94:	2b09      	cmp	r3, #9
 8006f96:	d804      	bhi.n	8006fa2 <PCU_Tasks+0x672>
 8006f98:	4b71      	ldr	r3, [pc, #452]	; (8007160 <PCU_Tasks+0x830>)
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8006fa0:	e04f      	b.n	8007042 <PCU_Tasks+0x712>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 8006fa2:	4b6f      	ldr	r3, [pc, #444]	; (8007160 <PCU_Tasks+0x830>)
 8006fa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fa8:	2bbe      	cmp	r3, #190	; 0xbe
 8006faa:	d904      	bls.n	8006fb6 <PCU_Tasks+0x686>
 8006fac:	4b6c      	ldr	r3, [pc, #432]	; (8007160 <PCU_Tasks+0x830>)
 8006fae:	2203      	movs	r2, #3
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8006fb4:	e045      	b.n	8007042 <PCU_Tasks+0x712>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 8006fb6:	4b6a      	ldr	r3, [pc, #424]	; (8007160 <PCU_Tasks+0x830>)
 8006fb8:	2202      	movs	r2, #2
 8006fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8006fbe:	e040      	b.n	8007042 <PCU_Tasks+0x712>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 8006fc0:	4b67      	ldr	r3, [pc, #412]	; (8007160 <PCU_Tasks+0x830>)
 8006fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d10d      	bne.n	8006fe6 <PCU_Tasks+0x6b6>
 8006fca:	7bfa      	ldrb	r2, [r7, #15]
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d009      	beq.n	8006fe6 <PCU_Tasks+0x6b6>
              module[index].nextState = moduleStandby;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	4a61      	ldr	r2, [pc, #388]	; (800715c <PCU_Tasks+0x82c>)
 8006fd6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006fda:	fb01 f303 	mul.w	r3, r1, r3
 8006fde:	4413      	add	r3, r2
 8006fe0:	3328      	adds	r3, #40	; 0x28
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 8006fe6:	4b5e      	ldr	r3, [pc, #376]	; (8007160 <PCU_Tasks+0x830>)
 8006fe8:	2200      	movs	r2, #0
 8006fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8006fee:	e028      	b.n	8007042 <PCU_Tasks+0x712>
            module[index].nextState = moduleStandby;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	4a5a      	ldr	r2, [pc, #360]	; (800715c <PCU_Tasks+0x82c>)
 8006ff4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	4413      	add	r3, r2
 8006ffe:	3328      	adds	r3, #40	; 0x28
 8007000:	2201      	movs	r2, #1
 8007002:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 8007004:	4b56      	ldr	r3, [pc, #344]	; (8007160 <PCU_Tasks+0x830>)
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 800700c:	4b54      	ldr	r3, [pc, #336]	; (8007160 <PCU_Tasks+0x830>)
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007014:	e015      	b.n	8007042 <PCU_Tasks+0x712>
            module[index].nextState = moduleOff;
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	4a50      	ldr	r2, [pc, #320]	; (800715c <PCU_Tasks+0x82c>)
 800701a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	4413      	add	r3, r2
 8007024:	3328      	adds	r3, #40	; 0x28
 8007026:	2200      	movs	r2, #0
 8007028:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 800702a:	4b4d      	ldr	r3, [pc, #308]	; (8007160 <PCU_Tasks+0x830>)
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 8007032:	4b4b      	ldr	r3, [pc, #300]	; (8007160 <PCU_Tasks+0x830>)
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 800703a:	e002      	b.n	8007042 <PCU_Tasks+0x712>
      }
 800703c:	bf00      	nop
 800703e:	e000      	b.n	8007042 <PCU_Tasks+0x712>
            break;
 8007040:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	4a45      	ldr	r2, [pc, #276]	; (800715c <PCU_Tasks+0x82c>)
 8007046:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800704a:	fb01 f303 	mul.w	r3, r1, r3
 800704e:	4413      	add	r3, r2
 8007050:	332a      	adds	r3, #42	; 0x2a
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d13a      	bne.n	80070ce <PCU_Tasks+0x79e>
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	4a40      	ldr	r2, [pc, #256]	; (800715c <PCU_Tasks+0x82c>)
 800705c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007060:	fb01 f303 	mul.w	r3, r1, r3
 8007064:	4413      	add	r3, r2
 8007066:	3329      	adds	r3, #41	; 0x29
 8007068:	781a      	ldrb	r2, [r3, #0]
 800706a:	7bfb      	ldrb	r3, [r7, #15]
 800706c:	493b      	ldr	r1, [pc, #236]	; (800715c <PCU_Tasks+0x82c>)
 800706e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007072:	fb00 f303 	mul.w	r3, r0, r3
 8007076:	440b      	add	r3, r1
 8007078:	3328      	adds	r3, #40	; 0x28
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d126      	bne.n	80070ce <PCU_Tasks+0x79e>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	4a36      	ldr	r2, [pc, #216]	; (800715c <PCU_Tasks+0x82c>)
 8007084:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007088:	fb01 f303 	mul.w	r3, r1, r3
 800708c:	4413      	add	r3, r2
 800708e:	3308      	adds	r3, #8
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f002 feda 	bl	8009e4c <MCU_TicksSinceLastStateTx>
 8007098:	4603      	mov	r3, r0
 800709a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800709e:	d92c      	bls.n	80070fa <PCU_Tasks+0x7ca>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
 80070a2:	4a2e      	ldr	r2, [pc, #184]	; (800715c <PCU_Tasks+0x82c>)
 80070a4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070a8:	fb01 f303 	mul.w	r3, r1, r3
 80070ac:	4413      	add	r3, r2
 80070ae:	3308      	adds	r3, #8
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	4929      	ldr	r1, [pc, #164]	; (800715c <PCU_Tasks+0x82c>)
 80070b6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80070ba:	fb00 f303 	mul.w	r3, r0, r3
 80070be:	440b      	add	r3, r1
 80070c0:	3328      	adds	r3, #40	; 0x28
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f002 fc2a 	bl	8009920 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80070cc:	e015      	b.n	80070fa <PCU_Tasks+0x7ca>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
 80070d0:	4a22      	ldr	r2, [pc, #136]	; (800715c <PCU_Tasks+0x82c>)
 80070d2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80070d6:	fb01 f303 	mul.w	r3, r1, r3
 80070da:	4413      	add	r3, r2
 80070dc:	3308      	adds	r3, #8
 80070de:	781a      	ldrb	r2, [r3, #0]
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
 80070e2:	491e      	ldr	r1, [pc, #120]	; (800715c <PCU_Tasks+0x82c>)
 80070e4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80070e8:	fb00 f303 	mul.w	r3, r0, r3
 80070ec:	440b      	add	r3, r1
 80070ee:	3328      	adds	r3, #40	; 0x28
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f002 fc13 	bl	8009920 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	3301      	adds	r3, #1
 80070fe:	73fb      	strb	r3, [r7, #15]
 8007100:	4b17      	ldr	r3, [pc, #92]	; (8007160 <PCU_Tasks+0x830>)
 8007102:	7d1b      	ldrb	r3, [r3, #20]
 8007104:	7bfa      	ldrb	r2, [r7, #15]
 8007106:	429a      	cmp	r2, r3
 8007108:	f4ff aecc 	bcc.w	8006ea4 <PCU_Tasks+0x574>
    MCU_UpdateStats();
 800710c:	f000 f8e0 	bl	80072d0 <MCU_UpdateStats>
    if(sendState > 0){
 8007110:	4b14      	ldr	r3, [pc, #80]	; (8007164 <PCU_Tasks+0x834>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01c      	beq.n	8007152 <PCU_Tasks+0x822>
      if (pack.rtcValid == false) VCU_RequestTime();
 8007118:	4b11      	ldr	r3, [pc, #68]	; (8007160 <PCU_Tasks+0x830>)
 800711a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800711e:	f083 0301 	eor.w	r3, r3, #1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d001      	beq.n	800712c <PCU_Tasks+0x7fc>
 8007128:	f004 fe6c 	bl	800be04 <VCU_RequestTime>
      VCU_TransmitBmsState();
 800712c:	f003 ffcc 	bl	800b0c8 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 8007130:	f004 f8b2 	bl	800b298 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8007134:	f004 f994 	bl	800b460 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 8007138:	f004 fad6 	bl	800b6e8 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 800713c:	f004 fc00 	bl	800b940 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 8007140:	f004 fd1e 	bl	800bb80 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8007144:	f004 fd8a 	bl	800bc5c <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 8007148:	f004 fdf6 	bl	800bd38 <VCU_TransmitBmsData10>
      sendState=0;
 800714c:	4b05      	ldr	r3, [pc, #20]	; (8007164 <PCU_Tasks+0x834>)
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
}
 8007152:	bf00      	nop
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000de4 	.word	0x20000de4
 8007160:	2000a664 	.word	0x2000a664
 8007164:	20000d25 	.word	0x20000d25

08007168 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	4618      	mov	r0, r3
 8007176:	f7f9 ff3b 	bl	8000ff0 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 800717a:	79fb      	ldrb	r3, [r7, #7]
 800717c:	4618      	mov	r0, r3
 800717e:	f7fb fa9a 	bl	80026b6 <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	21ff      	movs	r1, #255	; 0xff
 8007186:	4618      	mov	r0, r3
 8007188:	f7fb fac9 	bl	800271e <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 800718c:	484a      	ldr	r0, [pc, #296]	; (80072b8 <DRV_CANFDSPI_Init+0x150>)
 800718e:	f7fa fcab 	bl	8001ae8 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 8007192:	4a49      	ldr	r2, [pc, #292]	; (80072b8 <DRV_CANFDSPI_Init+0x150>)
 8007194:	7813      	ldrb	r3, [r2, #0]
 8007196:	f043 0320 	orr.w	r3, r3, #32
 800719a:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 800719c:	4a46      	ldr	r2, [pc, #280]	; (80072b8 <DRV_CANFDSPI_Init+0x150>)
 800719e:	7853      	ldrb	r3, [r2, #1]
 80071a0:	f36f 1386 	bfc	r3, #6, #1
 80071a4:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	4943      	ldr	r1, [pc, #268]	; (80072b8 <DRV_CANFDSPI_Init+0x150>)
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7fa fc0e 	bl	80019cc <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 80071b0:	4842      	ldr	r0, [pc, #264]	; (80072bc <DRV_CANFDSPI_Init+0x154>)
 80071b2:	f7fa fda9 	bl	8001d08 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 80071b6:	4a41      	ldr	r2, [pc, #260]	; (80072bc <DRV_CANFDSPI_Init+0x154>)
 80071b8:	7853      	ldrb	r3, [r2, #1]
 80071ba:	2107      	movs	r1, #7
 80071bc:	f361 0304 	bfi	r3, r1, #0, #5
 80071c0:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 80071c2:	4a3e      	ldr	r2, [pc, #248]	; (80072bc <DRV_CANFDSPI_Init+0x154>)
 80071c4:	7853      	ldrb	r3, [r2, #1]
 80071c6:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80071ca:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 80071cc:	4a3b      	ldr	r2, [pc, #236]	; (80072bc <DRV_CANFDSPI_Init+0x154>)
 80071ce:	7813      	ldrb	r3, [r2, #0]
 80071d0:	2101      	movs	r1, #1
 80071d2:	f361 0345 	bfi	r3, r1, #1, #5
 80071d6:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	4a38      	ldr	r2, [pc, #224]	; (80072bc <DRV_CANFDSPI_Init+0x154>)
 80071dc:	2102      	movs	r1, #2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7fa fd3a 	bl	8001c58 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 80071e4:	4836      	ldr	r0, [pc, #216]	; (80072c0 <DRV_CANFDSPI_Init+0x158>)
 80071e6:	f7fa ffe7 	bl	80021b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 80071ea:	4a35      	ldr	r2, [pc, #212]	; (80072c0 <DRV_CANFDSPI_Init+0x158>)
 80071ec:	7813      	ldrb	r3, [r2, #0]
 80071ee:	210f      	movs	r1, #15
 80071f0:	f361 0345 	bfi	r3, r1, #1, #5
 80071f4:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 80071f6:	4a32      	ldr	r2, [pc, #200]	; (80072c0 <DRV_CANFDSPI_Init+0x158>)
 80071f8:	8813      	ldrh	r3, [r2, #0]
 80071fa:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80071fe:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8007200:	79fb      	ldrb	r3, [r7, #7]
 8007202:	4a2f      	ldr	r2, [pc, #188]	; (80072c0 <DRV_CANFDSPI_Init+0x158>)
 8007204:	2101      	movs	r1, #1
 8007206:	4618      	mov	r0, r3
 8007208:	f7fa ff8a 	bl	8002120 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 800720c:	4b2d      	ldr	r3, [pc, #180]	; (80072c4 <DRV_CANFDSPI_Init+0x15c>)
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8007212:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <DRV_CANFDSPI_Init+0x15c>)
 8007214:	8813      	ldrh	r3, [r2, #0]
 8007216:	f36f 030a 	bfc	r3, #0, #11
 800721a:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 800721c:	4a29      	ldr	r2, [pc, #164]	; (80072c4 <DRV_CANFDSPI_Init+0x15c>)
 800721e:	78d3      	ldrb	r3, [r2, #3]
 8007220:	f36f 1386 	bfc	r3, #6, #1
 8007224:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 8007226:	4a27      	ldr	r2, [pc, #156]	; (80072c4 <DRV_CANFDSPI_Init+0x15c>)
 8007228:	6813      	ldr	r3, [r2, #0]
 800722a:	f36f 23dc 	bfc	r3, #11, #18
 800722e:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8007230:	79fb      	ldrb	r3, [r7, #7]
 8007232:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <DRV_CANFDSPI_Init+0x15c>)
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f7fa fef4 	bl	8002024 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 800723c:	4b22      	ldr	r3, [pc, #136]	; (80072c8 <DRV_CANFDSPI_Init+0x160>)
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 8007242:	4a21      	ldr	r2, [pc, #132]	; (80072c8 <DRV_CANFDSPI_Init+0x160>)
 8007244:	8813      	ldrh	r3, [r2, #0]
 8007246:	f36f 030a 	bfc	r3, #0, #11
 800724a:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 800724c:	4a1e      	ldr	r2, [pc, #120]	; (80072c8 <DRV_CANFDSPI_Init+0x160>)
 800724e:	78d3      	ldrb	r3, [r2, #3]
 8007250:	f36f 1386 	bfc	r3, #6, #1
 8007254:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 8007256:	4a1c      	ldr	r2, [pc, #112]	; (80072c8 <DRV_CANFDSPI_Init+0x160>)
 8007258:	6813      	ldr	r3, [r2, #0]
 800725a:	f36f 23dc 	bfc	r3, #11, #18
 800725e:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	4a19      	ldr	r2, [pc, #100]	; (80072c8 <DRV_CANFDSPI_Init+0x160>)
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f7fa fefe 	bl	8002068 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 800726c:	79f8      	ldrb	r0, [r7, #7]
 800726e:	2301      	movs	r3, #1
 8007270:	2201      	movs	r2, #1
 8007272:	2100      	movs	r1, #0
 8007274:	f7fa ff1c 	bl	80020b0 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8007278:	79f8      	ldrb	r0, [r7, #7]
 800727a:	2300      	movs	r3, #0
 800727c:	2202      	movs	r2, #2
 800727e:	2101      	movs	r1, #1
 8007280:	f7fb fa8d 	bl	800279e <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	2200      	movs	r2, #0
 8007288:	2100      	movs	r1, #0
 800728a:	4618      	mov	r0, r3
 800728c:	f7fc f9a6 	bl	80035dc <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	2201      	movs	r2, #1
 8007294:	2101      	movs	r1, #1
 8007296:	4618      	mov	r0, r3
 8007298:	f7fb f98d 	bl	80025b6 <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2103      	movs	r1, #3
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fb f8dc 	bl	800245e <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fa fc98 	bl	8001be0 <DRV_CANFDSPI_OperationModeSelect>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000d2c 	.word	0x20000d2c
 80072bc:	20000d30 	.word	0x20000d30
 80072c0:	20000d84 	.word	0x20000d84
 80072c4:	20000d88 	.word	0x20000d88
 80072c8:	20000d8c 	.word	0x20000d8c
 80072cc:	00000000 	.word	0x00000000

080072d0 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 80072d0:	b5b0      	push	{r4, r5, r7, lr}
 80072d2:	b094      	sub	sp, #80	; 0x50
 80072d4:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint32_t voltage             = 0;
 80072dc:	2300      	movs	r3, #0
 80072de:	643b      	str	r3, [r7, #64]	; 0x40
  float moduleCurrent          = 0;
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 80072e6:	f04f 0300 	mov.w	r3, #0
 80072ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  float moduleMaxChargeA       = 0;
 80072ec:	f04f 0300 	mov.w	r3, #0
 80072f0:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 80072f2:	f04f 0300 	mov.w	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 80072f8:	23ff      	movs	r3, #255	; 0xff
 80072fa:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t lowestSoh           = 255;
 80072fc:	23ff      	movs	r3, #255	; 0xff
 80072fe:	873b      	strh	r3, [r7, #56]	; 0x38
  uint32_t totalAvgCellVolt    = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
  uint16_t highestCellVolt     = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t lowestCellVolt      = 65535;
 8007308:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800730c:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t totalAvgCellTemp    = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t highestCellTemp     = 0;
 8007312:	2300      	movs	r3, #0
 8007314:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t lowestCellTemp      = 65535;
 8007316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800731a:	853b      	strh	r3, [r7, #40]	; 0x28
  float    maxChargeA          = 0;
 800731c:	f04f 0300 	mov.w	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
  float    maxDischargeA       = 0;
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 8007336:	2300      	movs	r3, #0
 8007338:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 8007346:	2300      	movs	r3, #0
 8007348:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800734c:	e275      	b.n	800783a <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 800734e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007352:	4a85      	ldr	r2, [pc, #532]	; (8007568 <MCU_UpdateStats+0x298>)
 8007354:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007358:	fb01 f303 	mul.w	r3, r1, r3
 800735c:	4413      	add	r3, r2
 800735e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007362:	789b      	ldrb	r3, [r3, #2]
 8007364:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	2b00      	cmp	r3, #0
 800736c:	f040 8260 	bne.w	8007830 <MCU_UpdateStats+0x560>
 8007370:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007374:	4a7c      	ldr	r2, [pc, #496]	; (8007568 <MCU_UpdateStats+0x298>)
 8007376:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800737a:	fb01 f303 	mul.w	r3, r1, r3
 800737e:	4413      	add	r3, r2
 8007380:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007384:	789b      	ldrb	r3, [r3, #2]
 8007386:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 824f 	bne.w	8007830 <MCU_UpdateStats+0x560>
 8007392:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007396:	4a74      	ldr	r2, [pc, #464]	; (8007568 <MCU_UpdateStats+0x298>)
 8007398:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800739c:	fb01 f303 	mul.w	r3, r1, r3
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80073a6:	789b      	ldrb	r3, [r3, #2]
 80073a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f040 823e 	bne.w	8007830 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 80073b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073b8:	4a6b      	ldr	r2, [pc, #428]	; (8007568 <MCU_UpdateStats+0x298>)
 80073ba:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80073be:	fb01 f303 	mul.w	r3, r1, r3
 80073c2:	4413      	add	r3, r2
 80073c4:	3327      	adds	r3, #39	; 0x27
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	f040 8146 	bne.w	800765a <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 80073ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80073d2:	4a65      	ldr	r2, [pc, #404]	; (8007568 <MCU_UpdateStats+0x298>)
 80073d4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80073d8:	fb01 f303 	mul.w	r3, r1, r3
 80073dc:	4413      	add	r3, r2
 80073de:	330e      	adds	r3, #14
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 f880 	bl	80004e8 <__aeabi_i2d>
 80073e8:	a359      	add	r3, pc, #356	; (adr r3, 8007550 <MCU_UpdateStats+0x280>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f9 f8e5 	bl	80005bc <__aeabi_dmul>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	4610      	mov	r0, r2
 80073f8:	4619      	mov	r1, r3
 80073fa:	a357      	add	r3, pc, #348	; (adr r3, 8007558 <MCU_UpdateStats+0x288>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f8 ff24 	bl	800024c <__aeabi_dsub>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4610      	mov	r0, r2
 800740a:	4619      	mov	r1, r3
 800740c:	f7f9 fbce 	bl	8000bac <__aeabi_d2f>
 8007410:	4603      	mov	r3, r0
 8007412:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 8007414:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007418:	4a53      	ldr	r2, [pc, #332]	; (8007568 <MCU_UpdateStats+0x298>)
 800741a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800741e:	fb01 f303 	mul.w	r3, r1, r3
 8007422:	4413      	add	r3, r2
 8007424:	3310      	adds	r3, #16
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	4618      	mov	r0, r3
 800742a:	f7f9 f85d 	bl	80004e8 <__aeabi_i2d>
 800742e:	a348      	add	r3, pc, #288	; (adr r3, 8007550 <MCU_UpdateStats+0x280>)
 8007430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007434:	f7f9 f8c2 	bl	80005bc <__aeabi_dmul>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4610      	mov	r0, r2
 800743e:	4619      	mov	r1, r3
 8007440:	a345      	add	r3, pc, #276	; (adr r3, 8007558 <MCU_UpdateStats+0x288>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	f7f8 ff01 	bl	800024c <__aeabi_dsub>
 800744a:	4602      	mov	r2, r0
 800744c:	460b      	mov	r3, r1
 800744e:	4610      	mov	r0, r2
 8007450:	4619      	mov	r1, r3
 8007452:	f7f9 fbab 	bl	8000bac <__aeabi_d2f>
 8007456:	4603      	mov	r3, r0
 8007458:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 800745a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800745e:	4a42      	ldr	r2, [pc, #264]	; (8007568 <MCU_UpdateStats+0x298>)
 8007460:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	4413      	add	r3, r2
 800746a:	3314      	adds	r3, #20
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007472:	4413      	add	r3, r2
 8007474:	643b      	str	r3, [r7, #64]	; 0x40
        //increment module on count
        modulesOn++;
 8007476:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800747a:	3301      	adds	r3, #1
 800747c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 8007480:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007484:	4a38      	ldr	r2, [pc, #224]	; (8007568 <MCU_UpdateStats+0x298>)
 8007486:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800748a:	fb01 f303 	mul.w	r3, r1, r3
 800748e:	4413      	add	r3, r2
 8007490:	3316      	adds	r3, #22
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f7f9 f827 	bl	80004e8 <__aeabi_i2d>
 800749a:	a32d      	add	r3, pc, #180	; (adr r3, 8007550 <MCU_UpdateStats+0x280>)
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f7f9 f88c 	bl	80005bc <__aeabi_dmul>
 80074a4:	4602      	mov	r2, r0
 80074a6:	460b      	mov	r3, r1
 80074a8:	4610      	mov	r0, r2
 80074aa:	4619      	mov	r1, r3
 80074ac:	a32a      	add	r3, pc, #168	; (adr r3, 8007558 <MCU_UpdateStats+0x288>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f8 fecb 	bl	800024c <__aeabi_dsub>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	4610      	mov	r0, r2
 80074bc:	4619      	mov	r1, r3
 80074be:	f7f9 fb75 	bl	8000bac <__aeabi_d2f>
 80074c2:	4603      	mov	r3, r0
 80074c4:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 80074c6:	6938      	ldr	r0, [r7, #16]
 80074c8:	f7f9 f820 	bl	800050c <__aeabi_f2d>
 80074cc:	a324      	add	r3, pc, #144	; (adr r3, 8007560 <MCU_UpdateStats+0x290>)
 80074ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d2:	f7f8 febb 	bl	800024c <__aeabi_dsub>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4614      	mov	r4, r2
 80074dc:	461d      	mov	r5, r3
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f7f9 f814 	bl	800050c <__aeabi_f2d>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4620      	mov	r0, r4
 80074ea:	4629      	mov	r1, r5
 80074ec:	f7f9 faf6 	bl	8000adc <__aeabi_dcmpgt>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d040      	beq.n	8007578 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 80074f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80074fa:	4a1b      	ldr	r2, [pc, #108]	; (8007568 <MCU_UpdateStats+0x298>)
 80074fc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	4413      	add	r3, r2
 8007506:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 800750a:	7893      	ldrb	r3, [r2, #2]
 800750c:	f043 0304 	orr.w	r3, r3, #4
 8007510:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 8007512:	4b16      	ldr	r3, [pc, #88]	; (800756c <MCU_UpdateStats+0x29c>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d16d      	bne.n	80075fa <MCU_UpdateStats+0x32a>
 800751e:	6938      	ldr	r0, [r7, #16]
 8007520:	f7f8 fff4 	bl	800050c <__aeabi_f2d>
 8007524:	4604      	mov	r4, r0
 8007526:	460d      	mov	r5, r1
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7f8 ffef 	bl	800050c <__aeabi_f2d>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	e9cd 2300 	strd	r2, r3, [sp]
 8007536:	4622      	mov	r2, r4
 8007538:	462b      	mov	r3, r5
 800753a:	490d      	ldr	r1, [pc, #52]	; (8007570 <MCU_UpdateStats+0x2a0>)
 800753c:	480d      	ldr	r0, [pc, #52]	; (8007574 <MCU_UpdateStats+0x2a4>)
 800753e:	f00b fe5f 	bl	8013200 <siprintf>
 8007542:	480c      	ldr	r0, [pc, #48]	; (8007574 <MCU_UpdateStats+0x2a4>)
 8007544:	f7fd ff0c 	bl	8005360 <serialOut>
 8007548:	e057      	b.n	80075fa <MCU_UpdateStats+0x32a>
 800754a:	bf00      	nop
 800754c:	f3af 8000 	nop.w
 8007550:	47ae147b 	.word	0x47ae147b
 8007554:	3f947ae1 	.word	0x3f947ae1
 8007558:	47ae147b 	.word	0x47ae147b
 800755c:	40847ae1 	.word	0x40847ae1
 8007560:	33333333 	.word	0x33333333
 8007564:	3fd33333 	.word	0x3fd33333
 8007568:	20000de4 	.word	0x20000de4
 800756c:	2000000c 	.word	0x2000000c
 8007570:	08016a20 	.word	0x08016a20
 8007574:	20000b64 	.word	0x20000b64
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 8007578:	6938      	ldr	r0, [r7, #16]
 800757a:	f7f8 ffc7 	bl	800050c <__aeabi_f2d>
 800757e:	a3d7      	add	r3, pc, #860	; (adr r3, 80078dc <MCU_UpdateStats+0x60c>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f8 fe64 	bl	8000250 <__adddf3>
 8007588:	4602      	mov	r2, r0
 800758a:	460b      	mov	r3, r1
 800758c:	4614      	mov	r4, r2
 800758e:	461d      	mov	r5, r3
 8007590:	68b8      	ldr	r0, [r7, #8]
 8007592:	f7f8 ffbb 	bl	800050c <__aeabi_f2d>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4620      	mov	r0, r4
 800759c:	4629      	mov	r1, r5
 800759e:	f7f9 fa7f 	bl	8000aa0 <__aeabi_dcmplt>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d028      	beq.n	80075fa <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 80075a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075ac:	4ac4      	ldr	r2, [pc, #784]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80075ae:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80075b2:	fb01 f303 	mul.w	r3, r1, r3
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80075bc:	7893      	ldrb	r3, [r2, #2]
 80075be:	f043 0304 	orr.w	r3, r3, #4
 80075c2:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 80075c4:	4bbf      	ldr	r3, [pc, #764]	; (80078c4 <MCU_UpdateStats+0x5f4>)
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	f003 0303 	and.w	r3, r3, #3
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d114      	bne.n	80075fa <MCU_UpdateStats+0x32a>
 80075d0:	6938      	ldr	r0, [r7, #16]
 80075d2:	f7f8 ff9b 	bl	800050c <__aeabi_f2d>
 80075d6:	4604      	mov	r4, r0
 80075d8:	460d      	mov	r5, r1
 80075da:	68b8      	ldr	r0, [r7, #8]
 80075dc:	f7f8 ff96 	bl	800050c <__aeabi_f2d>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	e9cd 2300 	strd	r2, r3, [sp]
 80075e8:	4622      	mov	r2, r4
 80075ea:	462b      	mov	r3, r5
 80075ec:	49b6      	ldr	r1, [pc, #728]	; (80078c8 <MCU_UpdateStats+0x5f8>)
 80075ee:	48b7      	ldr	r0, [pc, #732]	; (80078cc <MCU_UpdateStats+0x5fc>)
 80075f0:	f00b fe06 	bl	8013200 <siprintf>
 80075f4:	48b5      	ldr	r0, [pc, #724]	; (80078cc <MCU_UpdateStats+0x5fc>)
 80075f6:	f7fd feb3 	bl	8005360 <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 80075fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80075fe:	4ab0      	ldr	r2, [pc, #704]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007600:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007604:	fb01 f303 	mul.w	r3, r1, r3
 8007608:	4413      	add	r3, r2
 800760a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800760e:	789b      	ldrb	r3, [r3, #2]
 8007610:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b01      	cmp	r3, #1
 8007618:	d107      	bne.n	800762a <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 800761a:	4bad      	ldr	r3, [pc, #692]	; (80078d0 <MCU_UpdateStats+0x600>)
 800761c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007620:	2b02      	cmp	r3, #2
 8007622:	d102      	bne.n	800762a <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 8007624:	4baa      	ldr	r3, [pc, #680]	; (80078d0 <MCU_UpdateStats+0x600>)
 8007626:	2200      	movs	r2, #0
 8007628:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 800762a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800762e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007636:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 800763a:	ed97 7a08 	vldr	s14, [r7, #32]
 800763e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007646:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 800764a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800764e:	edd7 7a03 	vldr	s15, [r7, #12]
 8007652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007656:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 800765a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800765e:	4a98      	ldr	r2, [pc, #608]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007660:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007664:	fb01 f303 	mul.w	r3, r1, r3
 8007668:	4413      	add	r3, r2
 800766a:	3312      	adds	r3, #18
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 8007676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800767a:	4a91      	ldr	r2, [pc, #580]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 800767c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007680:	fb01 f303 	mul.w	r3, r1, r3
 8007684:	4413      	add	r3, r2
 8007686:	3322      	adds	r3, #34	; 0x22
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768e:	4413      	add	r3, r2
 8007690:	637b      	str	r3, [r7, #52]	; 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 8007692:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007696:	4a8a      	ldr	r2, [pc, #552]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007698:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800769c:	fb01 f303 	mul.w	r3, r1, r3
 80076a0:	4413      	add	r3, r2
 80076a2:	331c      	adds	r3, #28
 80076a4:	881b      	ldrh	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076aa:	4413      	add	r3, r2
 80076ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 80076ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076b2:	4a83      	ldr	r2, [pc, #524]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80076b4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80076b8:	fb01 f303 	mul.w	r3, r1, r3
 80076bc:	4413      	add	r3, r2
 80076be:	332b      	adds	r3, #43	; 0x2b
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d90a      	bls.n	80076e0 <MCU_UpdateStats+0x410>
 80076ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076ce:	4a7c      	ldr	r2, [pc, #496]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80076d0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80076d4:	fb01 f303 	mul.w	r3, r1, r3
 80076d8:	4413      	add	r3, r2
 80076da:	332b      	adds	r3, #43	; 0x2b
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	877b      	strh	r3, [r7, #58]	; 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 80076e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80076e4:	4a76      	ldr	r2, [pc, #472]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80076e6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80076ea:	fb01 f303 	mul.w	r3, r1, r3
 80076ee:	4413      	add	r3, r2
 80076f0:	332c      	adds	r3, #44	; 0x2c
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d90a      	bls.n	8007712 <MCU_UpdateStats+0x442>
 80076fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007700:	4a6f      	ldr	r2, [pc, #444]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007702:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007706:	fb01 f303 	mul.w	r3, r1, r3
 800770a:	4413      	add	r3, r2
 800770c:	332c      	adds	r3, #44	; 0x2c
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	873b      	strh	r3, [r7, #56]	; 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 8007712:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007716:	4a6a      	ldr	r2, [pc, #424]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007718:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800771c:	fb01 f303 	mul.w	r3, r1, r3
 8007720:	4413      	add	r3, r2
 8007722:	3320      	adds	r3, #32
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8007728:	429a      	cmp	r2, r3
 800772a:	d915      	bls.n	8007758 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 800772c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007730:	4a63      	ldr	r2, [pc, #396]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007732:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007736:	fb01 f303 	mul.w	r3, r1, r3
 800773a:	4413      	add	r3, r2
 800773c:	3320      	adds	r3, #32
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	863b      	strh	r3, [r7, #48]	; 0x30
        modLowestCellVolt = module[index].moduleId;
 8007742:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007746:	4a5e      	ldr	r2, [pc, #376]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007748:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800774c:	fb01 f303 	mul.w	r3, r1, r3
 8007750:	4413      	add	r3, r2
 8007752:	3308      	adds	r3, #8
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 8007758:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800775c:	4a58      	ldr	r2, [pc, #352]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 800775e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007762:	fb01 f303 	mul.w	r3, r1, r3
 8007766:	4413      	add	r3, r2
 8007768:	331e      	adds	r3, #30
 800776a:	881b      	ldrh	r3, [r3, #0]
 800776c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800776e:	429a      	cmp	r2, r3
 8007770:	d215      	bcs.n	800779e <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 8007772:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007776:	4a52      	ldr	r2, [pc, #328]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007778:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800777c:	fb01 f303 	mul.w	r3, r1, r3
 8007780:	4413      	add	r3, r2
 8007782:	331e      	adds	r3, #30
 8007784:	881b      	ldrh	r3, [r3, #0]
 8007786:	867b      	strh	r3, [r7, #50]	; 0x32
        modHighestCellVolt = module[index].moduleId;
 8007788:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800778c:	4a4c      	ldr	r2, [pc, #304]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 800778e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007792:	fb01 f303 	mul.w	r3, r1, r3
 8007796:	4413      	add	r3, r2
 8007798:	3308      	adds	r3, #8
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 800779e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077a2:	4a47      	ldr	r2, [pc, #284]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80077a4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	4413      	add	r3, r2
 80077ae:	3318      	adds	r3, #24
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d215      	bcs.n	80077e4 <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 80077b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077bc:	4a40      	ldr	r2, [pc, #256]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80077be:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077c2:	fb01 f303 	mul.w	r3, r1, r3
 80077c6:	4413      	add	r3, r2
 80077c8:	3318      	adds	r3, #24
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	857b      	strh	r3, [r7, #42]	; 0x2a
        modHighestCellTemp = module[index].moduleId;
 80077ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077d2:	4a3b      	ldr	r2, [pc, #236]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80077d4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077d8:	fb01 f303 	mul.w	r3, r1, r3
 80077dc:	4413      	add	r3, r2
 80077de:	3308      	adds	r3, #8
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 80077e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80077e8:	4a35      	ldr	r2, [pc, #212]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 80077ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	4413      	add	r3, r2
 80077f4:	331a      	adds	r3, #26
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d915      	bls.n	800782a <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 80077fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007802:	4a2f      	ldr	r2, [pc, #188]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 8007804:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	4413      	add	r3, r2
 800780e:	331a      	adds	r3, #26
 8007810:	881b      	ldrh	r3, [r3, #0]
 8007812:	853b      	strh	r3, [r7, #40]	; 0x28
        modLowestCellTemp = module[index].moduleId;
 8007814:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007818:	4a29      	ldr	r2, [pc, #164]	; (80078c0 <MCU_UpdateStats+0x5f0>)
 800781a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800781e:	fb01 f303 	mul.w	r3, r1, r3
 8007822:	4413      	add	r3, r2
 8007824:	3308      	adds	r3, #8
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 800782a:	7efb      	ldrb	r3, [r7, #27]
 800782c:	3301      	adds	r3, #1
 800782e:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 8007830:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007834:	3301      	adds	r3, #1
 8007836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800783a:	4b25      	ldr	r3, [pc, #148]	; (80078d0 <MCU_UpdateStats+0x600>)
 800783c:	7d1b      	ldrb	r3, [r3, #20]
 800783e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007842:	429a      	cmp	r2, r3
 8007844:	f4ff ad83 	bcc.w	800734e <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 8007848:	4a21      	ldr	r2, [pc, #132]	; (80078d0 <MCU_UpdateStats+0x600>)
 800784a:	7efb      	ldrb	r3, [r7, #27]
 800784c:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 800784e:	4b20      	ldr	r3, [pc, #128]	; (80078d0 <MCU_UpdateStats+0x600>)
 8007850:	7d1a      	ldrb	r2, [r3, #20]
 8007852:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <MCU_UpdateStats+0x600>)
 8007854:	7ddb      	ldrb	r3, [r3, #23]
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	b2da      	uxtb	r2, r3
 800785a:	4b1d      	ldr	r3, [pc, #116]	; (80078d0 <MCU_UpdateStats+0x600>)
 800785c:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 800785e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 8087 	beq.w	8007976 <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 8007868:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800786c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800786e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007872:	b29a      	uxth	r2, r3
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <MCU_UpdateStats+0x600>)
 8007876:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007878:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800787c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80078d4 <MCU_UpdateStats+0x604>
 8007880:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007888:	dd32      	ble.n	80078f0 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 800788a:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <MCU_UpdateStats+0x5f4>)
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	f003 0303 	and.w	r3, r3, #3
 8007892:	2b03      	cmp	r3, #3
 8007894:	d129      	bne.n	80078ea <MCU_UpdateStats+0x61a>
 8007896:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007898:	f7f8 fe38 	bl	800050c <__aeabi_f2d>
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	a105      	add	r1, pc, #20	; (adr r1, 80078b8 <MCU_UpdateStats+0x5e8>)
 80078a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078a6:	e9cd 0100 	strd	r0, r1, [sp]
 80078aa:	490b      	ldr	r1, [pc, #44]	; (80078d8 <MCU_UpdateStats+0x608>)
 80078ac:	4807      	ldr	r0, [pc, #28]	; (80078cc <MCU_UpdateStats+0x5fc>)
 80078ae:	f00b fca7 	bl	8013200 <siprintf>
 80078b2:	e017      	b.n	80078e4 <MCU_UpdateStats+0x614>
 80078b4:	f3af 8000 	nop.w
 80078b8:	00000000 	.word	0x00000000
 80078bc:	409a3300 	.word	0x409a3300
 80078c0:	20000de4 	.word	0x20000de4
 80078c4:	2000000c 	.word	0x2000000c
 80078c8:	08016a6c 	.word	0x08016a6c
 80078cc:	20000b64 	.word	0x20000b64
 80078d0:	2000a664 	.word	0x2000a664
 80078d4:	44d19800 	.word	0x44d19800
 80078d8:	08016abc 	.word	0x08016abc
 80078dc:	33333333 	.word	0x33333333
 80078e0:	3fd33333 	.word	0x3fd33333
 80078e4:	48b0      	ldr	r0, [pc, #704]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 80078e6:	f7fd fd3b 	bl	8005360 <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 80078ea:	4bb0      	ldr	r3, [pc, #704]	; (8007bac <MCU_UpdateStats+0x8dc>)
 80078ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078ee:	e01e      	b.n	800792e <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 80078f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80078f4:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8007bb0 <MCU_UpdateStats+0x8e0>
 80078f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80078fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007900:	d515      	bpl.n	800792e <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007902:	4bac      	ldr	r3, [pc, #688]	; (8007bb4 <MCU_UpdateStats+0x8e4>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b03      	cmp	r3, #3
 800790c:	d10d      	bne.n	800792a <MCU_UpdateStats+0x65a>
 800790e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007910:	f7f8 fdfc 	bl	800050c <__aeabi_f2d>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	49a7      	ldr	r1, [pc, #668]	; (8007bb8 <MCU_UpdateStats+0x8e8>)
 800791a:	9100      	str	r1, [sp, #0]
 800791c:	49a7      	ldr	r1, [pc, #668]	; (8007bbc <MCU_UpdateStats+0x8ec>)
 800791e:	48a2      	ldr	r0, [pc, #648]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007920:	f00b fc6e 	bl	8013200 <siprintf>
 8007924:	48a0      	ldr	r0, [pc, #640]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007926:	f7fd fd1b 	bl	8005360 <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 800792a:	4ba5      	ldr	r3, [pc, #660]	; (8007bc0 <MCU_UpdateStats+0x8f0>)
 800792c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 800792e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007930:	f7f8 fdec 	bl	800050c <__aeabi_f2d>
 8007934:	a398      	add	r3, pc, #608	; (adr r3, 8007b98 <MCU_UpdateStats+0x8c8>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f8 ff69 	bl	8000810 <__aeabi_ddiv>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4610      	mov	r0, r2
 8007944:	4619      	mov	r1, r3
 8007946:	f04f 0200 	mov.w	r2, #0
 800794a:	4b9e      	ldr	r3, [pc, #632]	; (8007bc4 <MCU_UpdateStats+0x8f4>)
 800794c:	f7f8 fc80 	bl	8000250 <__adddf3>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4610      	mov	r0, r2
 8007956:	4619      	mov	r1, r3
 8007958:	f7f9 f928 	bl	8000bac <__aeabi_d2f>
 800795c:	4603      	mov	r3, r0
 800795e:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8007960:	edd7 7a01 	vldr	s15, [r7, #4]
 8007964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007968:	ee17 3a90 	vmov	r3, s15
 800796c:	b29b      	uxth	r3, r3
 800796e:	461a      	mov	r2, r3
 8007970:	4b95      	ldr	r3, [pc, #596]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007972:	611a      	str	r2, [r3, #16]
 8007974:	e00e      	b.n	8007994 <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 8007976:	4b94      	ldr	r3, [pc, #592]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007978:	2200      	movs	r2, #0
 800797a:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 800797c:	4b93      	ldr	r3, [pc, #588]	; (8007bcc <MCU_UpdateStats+0x8fc>)
 800797e:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8007980:	edd7 7a01 	vldr	s15, [r7, #4]
 8007984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007988:	ee17 3a90 	vmov	r3, s15
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	4b8d      	ldr	r3, [pc, #564]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007992:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007994:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007998:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8007bd0 <MCU_UpdateStats+0x900>
 800799c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a4:	dd19      	ble.n	80079da <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 80079a6:	4b83      	ldr	r3, [pc, #524]	; (8007bb4 <MCU_UpdateStats+0x8e4>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	2b03      	cmp	r3, #3
 80079b0:	d110      	bne.n	80079d4 <MCU_UpdateStats+0x704>
 80079b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079b4:	f7f8 fdaa 	bl	800050c <__aeabi_f2d>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	a178      	add	r1, pc, #480	; (adr r1, 8007ba0 <MCU_UpdateStats+0x8d0>)
 80079be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079c2:	e9cd 0100 	strd	r0, r1, [sp]
 80079c6:	4983      	ldr	r1, [pc, #524]	; (8007bd4 <MCU_UpdateStats+0x904>)
 80079c8:	4877      	ldr	r0, [pc, #476]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 80079ca:	f00b fc19 	bl	8013200 <siprintf>
 80079ce:	4876      	ldr	r0, [pc, #472]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 80079d0:	f7fd fcc6 	bl	8005360 <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 80079d4:	4b75      	ldr	r3, [pc, #468]	; (8007bac <MCU_UpdateStats+0x8dc>)
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
 80079d8:	e01e      	b.n	8007a18 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 80079da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80079de:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8007bb0 <MCU_UpdateStats+0x8e0>
 80079e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80079e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ea:	d515      	bpl.n	8007a18 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 80079ec:	4b71      	ldr	r3, [pc, #452]	; (8007bb4 <MCU_UpdateStats+0x8e4>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 0303 	and.w	r3, r3, #3
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d10d      	bne.n	8007a14 <MCU_UpdateStats+0x744>
 80079f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079fa:	f7f8 fd87 	bl	800050c <__aeabi_f2d>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	496d      	ldr	r1, [pc, #436]	; (8007bb8 <MCU_UpdateStats+0x8e8>)
 8007a04:	9100      	str	r1, [sp, #0]
 8007a06:	4974      	ldr	r1, [pc, #464]	; (8007bd8 <MCU_UpdateStats+0x908>)
 8007a08:	4867      	ldr	r0, [pc, #412]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007a0a:	f00b fbf9 	bl	8013200 <siprintf>
 8007a0e:	4866      	ldr	r0, [pc, #408]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007a10:	f7fd fca6 	bl	8005360 <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 8007a14:	4b6a      	ldr	r3, [pc, #424]	; (8007bc0 <MCU_UpdateStats+0x8f0>)
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a1a:	f7f8 fd77 	bl	800050c <__aeabi_f2d>
 8007a1e:	a35e      	add	r3, pc, #376	; (adr r3, 8007b98 <MCU_UpdateStats+0x8c8>)
 8007a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a24:	f7f8 fef4 	bl	8000810 <__aeabi_ddiv>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	f04f 0200 	mov.w	r2, #0
 8007a34:	4b63      	ldr	r3, [pc, #396]	; (8007bc4 <MCU_UpdateStats+0x8f4>)
 8007a36:	f7f8 fc0b 	bl	8000250 <__adddf3>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4619      	mov	r1, r3
 8007a42:	f7f9 f893 	bl	8000b6c <__aeabi_d2uiz>
 8007a46:	4603      	mov	r3, r0
 8007a48:	4a5f      	ldr	r2, [pc, #380]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007a4a:	6353      	str	r3, [r2, #52]	; 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8007a4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a50:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8007bd0 <MCU_UpdateStats+0x900>
 8007a54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a5c:	dd19      	ble.n	8007a92 <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8007a5e:	4b55      	ldr	r3, [pc, #340]	; (8007bb4 <MCU_UpdateStats+0x8e4>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	2b03      	cmp	r3, #3
 8007a68:	d110      	bne.n	8007a8c <MCU_UpdateStats+0x7bc>
 8007a6a:	6a38      	ldr	r0, [r7, #32]
 8007a6c:	f7f8 fd4e 	bl	800050c <__aeabi_f2d>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	a14a      	add	r1, pc, #296	; (adr r1, 8007ba0 <MCU_UpdateStats+0x8d0>)
 8007a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a7a:	e9cd 0100 	strd	r0, r1, [sp]
 8007a7e:	4957      	ldr	r1, [pc, #348]	; (8007bdc <MCU_UpdateStats+0x90c>)
 8007a80:	4849      	ldr	r0, [pc, #292]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007a82:	f00b fbbd 	bl	8013200 <siprintf>
 8007a86:	4848      	ldr	r0, [pc, #288]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007a88:	f7fd fc6a 	bl	8005360 <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8007a8c:	4b47      	ldr	r3, [pc, #284]	; (8007bac <MCU_UpdateStats+0x8dc>)
 8007a8e:	623b      	str	r3, [r7, #32]
 8007a90:	e01e      	b.n	8007ad0 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 8007a92:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a96:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8007bb0 <MCU_UpdateStats+0x8e0>
 8007a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa2:	d515      	bpl.n	8007ad0 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 8007aa4:	4b43      	ldr	r3, [pc, #268]	; (8007bb4 <MCU_UpdateStats+0x8e4>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	2b03      	cmp	r3, #3
 8007aae:	d10d      	bne.n	8007acc <MCU_UpdateStats+0x7fc>
 8007ab0:	6a38      	ldr	r0, [r7, #32]
 8007ab2:	f7f8 fd2b 	bl	800050c <__aeabi_f2d>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	493f      	ldr	r1, [pc, #252]	; (8007bb8 <MCU_UpdateStats+0x8e8>)
 8007abc:	9100      	str	r1, [sp, #0]
 8007abe:	4948      	ldr	r1, [pc, #288]	; (8007be0 <MCU_UpdateStats+0x910>)
 8007ac0:	4839      	ldr	r0, [pc, #228]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007ac2:	f00b fb9d 	bl	8013200 <siprintf>
 8007ac6:	4838      	ldr	r0, [pc, #224]	; (8007ba8 <MCU_UpdateStats+0x8d8>)
 8007ac8:	f7fd fc4a 	bl	8005360 <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8007acc:	4b3c      	ldr	r3, [pc, #240]	; (8007bc0 <MCU_UpdateStats+0x8f0>)
 8007ace:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007ad0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ad2:	f7f8 fd1b 	bl	800050c <__aeabi_f2d>
 8007ad6:	a330      	add	r3, pc, #192	; (adr r3, 8007b98 <MCU_UpdateStats+0x8c8>)
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f7f8 fe98 	bl	8000810 <__aeabi_ddiv>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	4b35      	ldr	r3, [pc, #212]	; (8007bc4 <MCU_UpdateStats+0x8f4>)
 8007aee:	f7f8 fbaf 	bl	8000250 <__adddf3>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	f7f9 f837 	bl	8000b6c <__aeabi_d2uiz>
 8007afe:	4603      	mov	r3, r0
 8007b00:	4a31      	ldr	r2, [pc, #196]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b02:	6353      	str	r3, [r2, #52]	; 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8007b04:	6a38      	ldr	r0, [r7, #32]
 8007b06:	f7f8 fd01 	bl	800050c <__aeabi_f2d>
 8007b0a:	a323      	add	r3, pc, #140	; (adr r3, 8007b98 <MCU_UpdateStats+0x8c8>)
 8007b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b10:	f7f8 fe7e 	bl	8000810 <__aeabi_ddiv>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <MCU_UpdateStats+0x8f4>)
 8007b22:	f7f8 fb95 	bl	8000250 <__adddf3>
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	f7f9 f81d 	bl	8000b6c <__aeabi_d2uiz>
 8007b32:	4603      	mov	r3, r0
 8007b34:	4a24      	ldr	r2, [pc, #144]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b36:	6393      	str	r3, [r2, #56]	; 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 8007b38:	4b23      	ldr	r3, [pc, #140]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b3a:	7ddb      	ldrb	r3, [r3, #23]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <MCU_UpdateStats+0x884>
 8007b40:	4b21      	ldr	r3, [pc, #132]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b42:	7ddb      	ldrb	r3, [r3, #23]
 8007b44:	461a      	mov	r2, r3
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	4b1e      	ldr	r3, [pc, #120]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b50:	879a      	strh	r2, [r3, #60]	; 0x3c
 8007b52:	e002      	b.n	8007b5a <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 8007b54:	4b1c      	ldr	r3, [pc, #112]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	879a      	strh	r2, [r3, #60]	; 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8007b5a:	4b1b      	ldr	r3, [pc, #108]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b5c:	7ddb      	ldrb	r3, [r3, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d008      	beq.n	8007b74 <MCU_UpdateStats+0x8a4>
 8007b62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b64:	2bfe      	cmp	r3, #254	; 0xfe
 8007b66:	d805      	bhi.n	8007b74 <MCU_UpdateStats+0x8a4>
 8007b68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b72:	e003      	b.n	8007b7c <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 8007b74:	4b14      	ldr	r3, [pc, #80]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8007b7c:	4b12      	ldr	r3, [pc, #72]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b7e:	7ddb      	ldrb	r3, [r3, #23]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d02f      	beq.n	8007be4 <MCU_UpdateStats+0x914>
 8007b84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b86:	2bfe      	cmp	r3, #254	; 0xfe
 8007b88:	d82c      	bhi.n	8007be4 <MCU_UpdateStats+0x914>
 8007b8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007b8c:	b2da      	uxtb	r2, r3
 8007b8e:	4b0e      	ldr	r3, [pc, #56]	; (8007bc8 <MCU_UpdateStats+0x8f8>)
 8007b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b94:	e02a      	b.n	8007bec <MCU_UpdateStats+0x91c>
 8007b96:	bf00      	nop
 8007b98:	9999999a 	.word	0x9999999a
 8007b9c:	3fa99999 	.word	0x3fa99999
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	409a3300 	.word	0x409a3300
 8007ba8:	20000b64 	.word	0x20000b64
 8007bac:	44d19800 	.word	0x44d19800
 8007bb0:	c4c80000 	.word	0xc4c80000
 8007bb4:	2000000c 	.word	0x2000000c
 8007bb8:	fffff9c0 	.word	0xfffff9c0
 8007bbc:	08016b00 	.word	0x08016b00
 8007bc0:	c4c80000 	.word	0xc4c80000
 8007bc4:	40df4000 	.word	0x40df4000
 8007bc8:	2000a664 	.word	0x2000a664
 8007bcc:	46fa0000 	.word	0x46fa0000
 8007bd0:	44d19800 	.word	0x44d19800
 8007bd4:	08016b44 	.word	0x08016b44
 8007bd8:	08016b8c 	.word	0x08016b8c
 8007bdc:	08016bd4 	.word	0x08016bd4
 8007be0:	08016c20 	.word	0x08016c20
  else pack.soh = 0;
 8007be4:	4b2f      	ldr	r3, [pc, #188]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 8007bec:	4b2d      	ldr	r3, [pc, #180]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007bee:	7ddb      	ldrb	r3, [r3, #23]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d009      	beq.n	8007c08 <MCU_UpdateStats+0x938>
 8007bf4:	4b2b      	ldr	r3, [pc, #172]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007bf6:	7ddb      	ldrb	r3, [r3, #23]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	4b28      	ldr	r3, [pc, #160]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c04:	861a      	strh	r2, [r3, #48]	; 0x30
 8007c06:	e002      	b.n	8007c0e <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 8007c08:	4b26      	ldr	r3, [pc, #152]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	861a      	strh	r2, [r3, #48]	; 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 8007c0e:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c10:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007c12:	8513      	strh	r3, [r2, #40]	; 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 8007c14:	4a23      	ldr	r2, [pc, #140]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c16:	7e7b      	ldrb	r3, [r7, #25]
 8007c18:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
  if (lowestCellVolt < 65535){
 8007c1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d007      	beq.n	8007c36 <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 8007c26:	4a1f      	ldr	r2, [pc, #124]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c28:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007c2a:	8593      	strh	r3, [r2, #44]	; 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c2e:	7ebb      	ldrb	r3, [r7, #26]
 8007c30:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 8007c34:	e006      	b.n	8007c44 <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 8007c36:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	859a      	strh	r2, [r3, #44]	; 0x2c
    pack.modCellLoVolt = 0;
 8007c3c:	4b19      	ldr	r3, [pc, #100]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 8007c44:	4b17      	ldr	r3, [pc, #92]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c46:	7ddb      	ldrb	r3, [r3, #23]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d009      	beq.n	8007c60 <MCU_UpdateStats+0x990>
 8007c4c:	4b15      	ldr	r3, [pc, #84]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c4e:	7ddb      	ldrb	r3, [r3, #23]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c5c:	84da      	strh	r2, [r3, #38]	; 0x26
 8007c5e:	e002      	b.n	8007c66 <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8007c60:	4b10      	ldr	r3, [pc, #64]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	84da      	strh	r2, [r3, #38]	; 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 8007c66:	4a0f      	ldr	r2, [pc, #60]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007c6a:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8007c6c:	4a0d      	ldr	r2, [pc, #52]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c6e:	7dfb      	ldrb	r3, [r7, #23]
 8007c70:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 8007c74:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d007      	beq.n	8007c8e <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 8007c7e:	4a09      	ldr	r2, [pc, #36]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c82:	8453      	strh	r3, [r2, #34]	; 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 8007c84:	4a07      	ldr	r2, [pc, #28]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c86:	7e3b      	ldrb	r3, [r7, #24]
 8007c88:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8007c8c:	e006      	b.n	8007c9c <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 8007c8e:	4b05      	ldr	r3, [pc, #20]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	845a      	strh	r2, [r3, #34]	; 0x22
    pack.modCellLoTemp = 0;
 8007c94:	4b03      	ldr	r3, [pc, #12]	; (8007ca4 <MCU_UpdateStats+0x9d4>)
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8007c9c:	bf00      	nop
 8007c9e:	3748      	adds	r7, #72	; 0x48
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ca4:	2000a664 	.word	0x2000a664

08007ca8 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8007ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007caa:	b08b      	sub	sp, #44	; 0x2c
 8007cac:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8007cae:	4a64      	ldr	r2, [pc, #400]	; (8007e40 <MCU_ReceiveMessages+0x198>)
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	2001      	movs	r0, #1
 8007cb4:	f7fa fc46 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8007cb8:	e0b6      	b.n	8007e28 <MCU_ReceiveMessages+0x180>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8007cba:	2340      	movs	r3, #64	; 0x40
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	4b61      	ldr	r3, [pc, #388]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007cc0:	4a61      	ldr	r2, [pc, #388]	; (8007e48 <MCU_ReceiveMessages+0x1a0>)
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	2001      	movs	r0, #1
 8007cc6:	f7fa faa1 	bl	800220c <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) ){ sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8007cca:	4b60      	ldr	r3, [pc, #384]	; (8007e4c <MCU_ReceiveMessages+0x1a4>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	f003 030a 	and.w	r3, r3, #10
 8007cd2:	2b0a      	cmp	r3, #10
 8007cd4:	d133      	bne.n	8007d3e <MCU_ReceiveMessages+0x96>
 8007cd6:	4b5c      	ldr	r3, [pc, #368]	; (8007e48 <MCU_ReceiveMessages+0x1a0>)
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	469c      	mov	ip, r3
 8007ce2:	4b59      	ldr	r3, [pc, #356]	; (8007e48 <MCU_ReceiveMessages+0x1a0>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007cea:	469e      	mov	lr, r3
 8007cec:	4b55      	ldr	r3, [pc, #340]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	4b54      	ldr	r3, [pc, #336]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007cf4:	785b      	ldrb	r3, [r3, #1]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4b52      	ldr	r3, [pc, #328]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007cfa:	789b      	ldrb	r3, [r3, #2]
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	4b51      	ldr	r3, [pc, #324]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007d00:	78db      	ldrb	r3, [r3, #3]
 8007d02:	461c      	mov	r4, r3
 8007d04:	4b4f      	ldr	r3, [pc, #316]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007d06:	791b      	ldrb	r3, [r3, #4]
 8007d08:	461d      	mov	r5, r3
 8007d0a:	4b4e      	ldr	r3, [pc, #312]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007d0c:	795b      	ldrb	r3, [r3, #5]
 8007d0e:	461e      	mov	r6, r3
 8007d10:	4b4c      	ldr	r3, [pc, #304]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007d12:	799b      	ldrb	r3, [r3, #6]
 8007d14:	607b      	str	r3, [r7, #4]
 8007d16:	4b4b      	ldr	r3, [pc, #300]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007d18:	79db      	ldrb	r3, [r3, #7]
 8007d1a:	9307      	str	r3, [sp, #28]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	9306      	str	r3, [sp, #24]
 8007d20:	9605      	str	r6, [sp, #20]
 8007d22:	9504      	str	r5, [sp, #16]
 8007d24:	9403      	str	r4, [sp, #12]
 8007d26:	9002      	str	r0, [sp, #8]
 8007d28:	9101      	str	r1, [sp, #4]
 8007d2a:	9200      	str	r2, [sp, #0]
 8007d2c:	4673      	mov	r3, lr
 8007d2e:	4662      	mov	r2, ip
 8007d30:	4947      	ldr	r1, [pc, #284]	; (8007e50 <MCU_ReceiveMessages+0x1a8>)
 8007d32:	4848      	ldr	r0, [pc, #288]	; (8007e54 <MCU_ReceiveMessages+0x1ac>)
 8007d34:	f00b fa64 	bl	8013200 <siprintf>
 8007d38:	4846      	ldr	r0, [pc, #280]	; (8007e54 <MCU_ReceiveMessages+0x1ac>)
 8007d3a:	f7fd fb11 	bl	8005360 <serialOut>

    switch (rxObj.bF.id.SID) {
 8007d3e:	4b42      	ldr	r3, [pc, #264]	; (8007e48 <MCU_ReceiveMessages+0x1a0>)
 8007d40:	881b      	ldrh	r3, [r3, #0]
 8007d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8007d4c:	2b07      	cmp	r3, #7
 8007d4e:	d82b      	bhi.n	8007da8 <MCU_ReceiveMessages+0x100>
 8007d50:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <MCU_ReceiveMessages+0xb0>)
 8007d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d56:	bf00      	nop
 8007d58:	08007d79 	.word	0x08007d79
 8007d5c:	08007d85 	.word	0x08007d85
 8007d60:	08007d8b 	.word	0x08007d8b
 8007d64:	08007d91 	.word	0x08007d91
 8007d68:	08007d97 	.word	0x08007d97
 8007d6c:	08007d7f 	.word	0x08007d7f
 8007d70:	08007d9d 	.word	0x08007d9d
 8007d74:	08007da3 	.word	0x08007da3
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8007d78:	f000 f8ce 	bl	8007f18 <MCU_RegisterModule>
        break;
 8007d7c:	e04f      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8007d7e:	f001 fe91 	bl	8009aa4 <MCU_ProcessCellDetail>
        break;
 8007d82:	e04c      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 8007d84:	f000 fc3c 	bl	8008600 <MCU_ProcessModuleHardware>
        break;
 8007d88:	e049      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8007d8a:	f001 f80d 	bl	8008da8 <MCU_ProcessModuleStatus1>
        break;
 8007d8e:	e046      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8007d90:	f001 fa92 	bl	80092b8 <MCU_ProcessModuleStatus2>
        break;
 8007d94:	e043      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 8007d96:	f001 fc03 	bl	80095a0 <MCU_ProcessModuleStatus3>
        break;
 8007d9a:	e040      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8007d9c:	f000 fb1e 	bl	80083dc <MCU_ProcessModuleTime>
        break;
 8007da0:	e03d      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 8007da2:	f001 fd39 	bl	8009818 <MCU_ProcessCellCommStatus1>
        break;
 8007da6:	e03a      	b.n	8007e1e <MCU_ReceiveMessages+0x176>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8007da8:	4b28      	ldr	r3, [pc, #160]	; (8007e4c <MCU_ReceiveMessages+0x1a4>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	f003 0303 	and.w	r3, r3, #3
 8007db0:	2b03      	cmp	r3, #3
 8007db2:	d133      	bne.n	8007e1c <MCU_ReceiveMessages+0x174>
 8007db4:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <MCU_ReceiveMessages+0x1a0>)
 8007db6:	881b      	ldrh	r3, [r3, #0]
 8007db8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	469c      	mov	ip, r3
 8007dc0:	4b21      	ldr	r3, [pc, #132]	; (8007e48 <MCU_ReceiveMessages+0x1a0>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8007dc8:	469e      	mov	lr, r3
 8007dca:	4b1e      	ldr	r3, [pc, #120]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4b1c      	ldr	r3, [pc, #112]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007dd2:	785b      	ldrb	r3, [r3, #1]
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	4b1b      	ldr	r3, [pc, #108]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007dd8:	789b      	ldrb	r3, [r3, #2]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	4b19      	ldr	r3, [pc, #100]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007dde:	78db      	ldrb	r3, [r3, #3]
 8007de0:	461c      	mov	r4, r3
 8007de2:	4b18      	ldr	r3, [pc, #96]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007de4:	791b      	ldrb	r3, [r3, #4]
 8007de6:	461d      	mov	r5, r3
 8007de8:	4b16      	ldr	r3, [pc, #88]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007dea:	795b      	ldrb	r3, [r3, #5]
 8007dec:	461e      	mov	r6, r3
 8007dee:	4b15      	ldr	r3, [pc, #84]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007df0:	799b      	ldrb	r3, [r3, #6]
 8007df2:	607b      	str	r3, [r7, #4]
 8007df4:	4b13      	ldr	r3, [pc, #76]	; (8007e44 <MCU_ReceiveMessages+0x19c>)
 8007df6:	79db      	ldrb	r3, [r3, #7]
 8007df8:	9307      	str	r3, [sp, #28]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	9306      	str	r3, [sp, #24]
 8007dfe:	9605      	str	r6, [sp, #20]
 8007e00:	9504      	str	r5, [sp, #16]
 8007e02:	9403      	str	r4, [sp, #12]
 8007e04:	9002      	str	r0, [sp, #8]
 8007e06:	9101      	str	r1, [sp, #4]
 8007e08:	9200      	str	r2, [sp, #0]
 8007e0a:	4673      	mov	r3, lr
 8007e0c:	4662      	mov	r2, ip
 8007e0e:	4912      	ldr	r1, [pc, #72]	; (8007e58 <MCU_ReceiveMessages+0x1b0>)
 8007e10:	4810      	ldr	r0, [pc, #64]	; (8007e54 <MCU_ReceiveMessages+0x1ac>)
 8007e12:	f00b f9f5 	bl	8013200 <siprintf>
 8007e16:	480f      	ldr	r0, [pc, #60]	; (8007e54 <MCU_ReceiveMessages+0x1ac>)
 8007e18:	f7fd faa2 	bl	8005360 <serialOut>
        break;
 8007e1c:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8007e1e:	4a08      	ldr	r2, [pc, #32]	; (8007e40 <MCU_ReceiveMessages+0x198>)
 8007e20:	2101      	movs	r1, #1
 8007e22:	2001      	movs	r0, #1
 8007e24:	f7fa fb8e 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8007e28:	4b05      	ldr	r3, [pc, #20]	; (8007e40 <MCU_ReceiveMessages+0x198>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f47f af42 	bne.w	8007cba <MCU_ReceiveMessages+0x12>
  }
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	370c      	adds	r7, #12
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e40:	20000d90 	.word	0x20000d90
 8007e44:	20000da0 	.word	0x20000da0
 8007e48:	20000d94 	.word	0x20000d94
 8007e4c:	2000000c 	.word	0x2000000c
 8007e50:	08016c68 	.word	0x08016c68
 8007e54:	20000b64 	.word	0x20000b64
 8007e58:	08016ccc 	.word	0x08016ccc

08007e5c <MCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af02      	add	r7, sp, #8
 8007e62:	4603      	mov	r3, r0
 8007e64:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8007e66:	2332      	movs	r3, #50	; 0x32
 8007e68:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8007e6a:	79fb      	ldrb	r3, [r7, #7]
 8007e6c:	4a21      	ldr	r2, [pc, #132]	; (8007ef4 <MCU_TransmitMessageQueue+0x98>)
 8007e6e:	2102      	movs	r1, #2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fa fb34 	bl	80024de <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d11a      	bne.n	8007eb2 <MCU_TransmitMessageQueue+0x56>
        Nop();
 8007e7c:	bf00      	nop
        Nop();
 8007e7e:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8007e80:	79f8      	ldrb	r0, [r7, #7]
 8007e82:	4b1d      	ldr	r3, [pc, #116]	; (8007ef8 <MCU_TransmitMessageQueue+0x9c>)
 8007e84:	4a1d      	ldr	r2, [pc, #116]	; (8007efc <MCU_TransmitMessageQueue+0xa0>)
 8007e86:	491e      	ldr	r1, [pc, #120]	; (8007f00 <MCU_TransmitMessageQueue+0xa4>)
 8007e88:	f7fa fbe3 	bl	8002652 <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8007e8c:	4b1d      	ldr	r3, [pc, #116]	; (8007f04 <MCU_TransmitMessageQueue+0xa8>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	f003 0303 	and.w	r3, r3, #3
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d106      	bne.n	8007ea6 <MCU_TransmitMessageQueue+0x4a>
 8007e98:	491b      	ldr	r1, [pc, #108]	; (8007f08 <MCU_TransmitMessageQueue+0xac>)
 8007e9a:	481c      	ldr	r0, [pc, #112]	; (8007f0c <MCU_TransmitMessageQueue+0xb0>)
 8007e9c:	f00b f9b0 	bl	8013200 <siprintf>
 8007ea0:	481a      	ldr	r0, [pc, #104]	; (8007f0c <MCU_TransmitMessageQueue+0xb0>)
 8007ea2:	f7fd fa5d 	bl	8005360 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fa f85a 	bl	8001f64 <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8007eb0:	e01c      	b.n	8007eec <MCU_TransmitMessageQueue+0x90>
      }
      attempts--;
 8007eb2:	7bfb      	ldrb	r3, [r7, #15]
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8007eb8:	4b0e      	ldr	r3, [pc, #56]	; (8007ef4 <MCU_TransmitMessageQueue+0x98>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0d2      	beq.n	8007e6a <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8007ec4:	4b12      	ldr	r3, [pc, #72]	; (8007f10 <MCU_TransmitMessageQueue+0xb4>)
 8007ec6:	791b      	ldrb	r3, [r3, #4]
 8007ec8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fb fbcc 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	79f8      	ldrb	r0, [r7, #7]
 8007edc:	2201      	movs	r2, #1
 8007ede:	9201      	str	r2, [sp, #4]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <MCU_TransmitMessageQueue+0xb8>)
 8007ee4:	4a0a      	ldr	r2, [pc, #40]	; (8007f10 <MCU_TransmitMessageQueue+0xb4>)
 8007ee6:	2102      	movs	r1, #2
 8007ee8:	f7f9 ff4a 	bl	8001d80 <DRV_CANFDSPI_TransmitChannelLoad>
}
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000d34 	.word	0x20000d34
 8007ef8:	20000de3 	.word	0x20000de3
 8007efc:	20000de2 	.word	0x20000de2
 8007f00:	20000de1 	.word	0x20000de1
 8007f04:	2000000c 	.word	0x2000000c
 8007f08:	08016d38 	.word	0x08016d38
 8007f0c:	20000b64 	.word	0x20000b64
 8007f10:	20000d38 	.word	0x20000d38
 8007f14:	20000d44 	.word	0x20000d44

08007f18 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 8007f18:	b590      	push	{r4, r7, lr}
 8007f1a:	b08b      	sub	sp, #44	; 0x2c
 8007f1c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 8007f22:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <MCU_RegisterModule+0x54>)
 8007f24:	f107 030c 	add.w	r3, r7, #12
 8007f28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007f2c:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <MCU_RegisterModule+0x58>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d010      	beq.n	8007f5e <MCU_RegisterModule+0x46>
 8007f3c:	89bb      	ldrh	r3, [r7, #12]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	7bbb      	ldrb	r3, [r7, #14]
 8007f42:	4618      	mov	r0, r3
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
 8007f46:	693a      	ldr	r2, [r7, #16]
 8007f48:	9201      	str	r2, [sp, #4]
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	460a      	mov	r2, r1
 8007f50:	4908      	ldr	r1, [pc, #32]	; (8007f74 <MCU_RegisterModule+0x5c>)
 8007f52:	4809      	ldr	r0, [pc, #36]	; (8007f78 <MCU_RegisterModule+0x60>)
 8007f54:	f00b f954 	bl	8013200 <siprintf>
 8007f58:	4807      	ldr	r0, [pc, #28]	; (8007f78 <MCU_RegisterModule+0x60>)
 8007f5a:	f7fd fa01 	bl	8005360 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <MCU_RegisterModule+0x64>)
 8007f60:	7d1b      	ldrb	r3, [r3, #20]
 8007f62:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8007f64:	2300      	movs	r3, #0
 8007f66:	75bb      	strb	r3, [r7, #22]
 8007f68:	e06f      	b.n	800804a <MCU_RegisterModule+0x132>
 8007f6a:	bf00      	nop
 8007f6c:	20000da0 	.word	0x20000da0
 8007f70:	2000000c 	.word	0x2000000c
 8007f74:	08016d68 	.word	0x08016d68
 8007f78:	20000b64 	.word	0x20000b64
 8007f7c:	2000a664 	.word	0x2000a664
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 8007f80:	7bba      	ldrb	r2, [r7, #14]
 8007f82:	7dbb      	ldrb	r3, [r7, #22]
 8007f84:	49b4      	ldr	r1, [pc, #720]	; (8008258 <MCU_RegisterModule+0x340>)
 8007f86:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007f8a:	fb00 f303 	mul.w	r3, r0, r3
 8007f8e:	440b      	add	r3, r1
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d156      	bne.n	8008044 <MCU_RegisterModule+0x12c>
 8007f96:	7bfa      	ldrb	r2, [r7, #15]
 8007f98:	7dbb      	ldrb	r3, [r7, #22]
 8007f9a:	49af      	ldr	r1, [pc, #700]	; (8008258 <MCU_RegisterModule+0x340>)
 8007f9c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007fa0:	fb00 f303 	mul.w	r3, r0, r3
 8007fa4:	440b      	add	r3, r1
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d14a      	bne.n	8008044 <MCU_RegisterModule+0x12c>
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	7dbb      	ldrb	r3, [r7, #22]
 8007fb2:	49a9      	ldr	r1, [pc, #676]	; (8008258 <MCU_RegisterModule+0x340>)
 8007fb4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007fb8:	fb00 f303 	mul.w	r3, r0, r3
 8007fbc:	440b      	add	r3, r1
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d13e      	bne.n	8008044 <MCU_RegisterModule+0x12c>
      moduleIndex = index; // module is already registered, save the index
 8007fc6:	7dbb      	ldrb	r3, [r7, #22]
 8007fc8:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	4aa2      	ldr	r2, [pc, #648]	; (8008258 <MCU_RegisterModule+0x340>)
 8007fce:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007fd2:	fb01 f303 	mul.w	r3, r1, r3
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8007fdc:	7893      	ldrb	r3, [r2, #2]
 8007fde:	f36f 0300 	bfc	r3, #0, #1
 8007fe2:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8007fe4:	4b9d      	ldr	r3, [pc, #628]	; (800825c <MCU_RegisterModule+0x344>)
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	7dfb      	ldrb	r3, [r7, #23]
 8007fea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007fec:	499a      	ldr	r1, [pc, #616]	; (8008258 <MCU_RegisterModule+0x340>)
 8007fee:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007ff2:	fb00 f303 	mul.w	r3, r0, r3
 8007ff6:	440b      	add	r3, r1
 8007ff8:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8007ffc:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	4a97      	ldr	r2, [pc, #604]	; (8008260 <MCU_RegisterModule+0x348>)
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	4994      	ldr	r1, [pc, #592]	; (8008258 <MCU_RegisterModule+0x340>)
 8008006:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800800a:	fb00 f303 	mul.w	r3, r0, r3
 800800e:	440b      	add	r3, r1
 8008010:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8008014:	601a      	str	r2, [r3, #0]
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); serialOut(tempBuffer);}
 8008016:	4b93      	ldr	r3, [pc, #588]	; (8008264 <MCU_RegisterModule+0x34c>)
 8008018:	781b      	ldrb	r3, [r3, #0]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b03      	cmp	r3, #3
 8008020:	d110      	bne.n	8008044 <MCU_RegisterModule+0x12c>
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	4a8c      	ldr	r2, [pc, #560]	; (8008258 <MCU_RegisterModule+0x340>)
 8008026:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800802a:	fb01 f303 	mul.w	r3, r1, r3
 800802e:	4413      	add	r3, r2
 8008030:	3308      	adds	r3, #8
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	461a      	mov	r2, r3
 8008036:	498c      	ldr	r1, [pc, #560]	; (8008268 <MCU_RegisterModule+0x350>)
 8008038:	488c      	ldr	r0, [pc, #560]	; (800826c <MCU_RegisterModule+0x354>)
 800803a:	f00b f8e1 	bl	8013200 <siprintf>
 800803e:	488b      	ldr	r0, [pc, #556]	; (800826c <MCU_RegisterModule+0x354>)
 8008040:	f7fd f98e 	bl	8005360 <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 8008044:	7dbb      	ldrb	r3, [r7, #22]
 8008046:	3301      	adds	r3, #1
 8008048:	75bb      	strb	r3, [r7, #22]
 800804a:	4b89      	ldr	r3, [pc, #548]	; (8008270 <MCU_RegisterModule+0x358>)
 800804c:	7d1b      	ldrb	r3, [r3, #20]
 800804e:	7dba      	ldrb	r2, [r7, #22]
 8008050:	429a      	cmp	r2, r3
 8008052:	d395      	bcc.n	8007f80 <MCU_RegisterModule+0x68>
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 8008054:	4b86      	ldr	r3, [pc, #536]	; (8008270 <MCU_RegisterModule+0x358>)
 8008056:	7d1b      	ldrb	r3, [r3, #20]
 8008058:	7dfa      	ldrb	r2, [r7, #23]
 800805a:	429a      	cmp	r2, r3
 800805c:	d15f      	bne.n	800811e <MCU_RegisterModule+0x206>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 800805e:	7dfb      	ldrb	r3, [r7, #23]
 8008060:	89b8      	ldrh	r0, [r7, #12]
 8008062:	4a7d      	ldr	r2, [pc, #500]	; (8008258 <MCU_RegisterModule+0x340>)
 8008064:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008068:	fb01 f303 	mul.w	r3, r1, r3
 800806c:	4413      	add	r3, r2
 800806e:	330a      	adds	r3, #10
 8008070:	4602      	mov	r2, r0
 8008072:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	7bf8      	ldrb	r0, [r7, #15]
 8008078:	4a77      	ldr	r2, [pc, #476]	; (8008258 <MCU_RegisterModule+0x340>)
 800807a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	4413      	add	r3, r2
 8008084:	3301      	adds	r3, #1
 8008086:	4602      	mov	r2, r0
 8008088:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	7bb8      	ldrb	r0, [r7, #14]
 800808e:	4a72      	ldr	r2, [pc, #456]	; (8008258 <MCU_RegisterModule+0x340>)
 8008090:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008094:	fb01 f303 	mul.w	r3, r1, r3
 8008098:	4413      	add	r3, r2
 800809a:	4602      	mov	r2, r0
 800809c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	496d      	ldr	r1, [pc, #436]	; (8008258 <MCU_RegisterModule+0x340>)
 80080a4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80080a8:	fb00 f303 	mul.w	r3, r0, r3
 80080ac:	440b      	add	r3, r1
 80080ae:	3304      	adds	r3, #4
 80080b0:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80080b2:	4b6a      	ldr	r3, [pc, #424]	; (800825c <MCU_RegisterModule+0x344>)
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	7dfb      	ldrb	r3, [r7, #23]
 80080b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080ba:	4967      	ldr	r1, [pc, #412]	; (8008258 <MCU_RegisterModule+0x340>)
 80080bc:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80080c0:	fb00 f303 	mul.w	r3, r0, r3
 80080c4:	440b      	add	r3, r1
 80080c6:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80080ca:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	4a64      	ldr	r2, [pc, #400]	; (8008260 <MCU_RegisterModule+0x348>)
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	4961      	ldr	r1, [pc, #388]	; (8008258 <MCU_RegisterModule+0x340>)
 80080d4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80080d8:	fb00 f303 	mul.w	r3, r0, r3
 80080dc:	440b      	add	r3, r1
 80080de:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80080e2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 80080e4:	7dfb      	ldrb	r3, [r7, #23]
 80080e6:	4a5c      	ldr	r2, [pc, #368]	; (8008258 <MCU_RegisterModule+0x340>)
 80080e8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80080ec:	fb01 f303 	mul.w	r3, r1, r3
 80080f0:	4413      	add	r3, r2
 80080f2:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 80080f6:	2201      	movs	r2, #1
 80080f8:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 80080fa:	4b5d      	ldr	r3, [pc, #372]	; (8008270 <MCU_RegisterModule+0x358>)
 80080fc:	7d1b      	ldrb	r3, [r3, #20]
 80080fe:	3301      	adds	r3, #1
 8008100:	b2da      	uxtb	r2, r3
 8008102:	4b5b      	ldr	r3, [pc, #364]	; (8008270 <MCU_RegisterModule+0x358>)
 8008104:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 8008106:	7dfb      	ldrb	r3, [r7, #23]
 8008108:	4a59      	ldr	r2, [pc, #356]	; (8008270 <MCU_RegisterModule+0x358>)
 800810a:	7d10      	ldrb	r0, [r2, #20]
 800810c:	4a52      	ldr	r2, [pc, #328]	; (8008258 <MCU_RegisterModule+0x340>)
 800810e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008112:	fb01 f303 	mul.w	r3, r1, r3
 8008116:	4413      	add	r3, r2
 8008118:	3308      	adds	r3, #8
 800811a:	4602      	mov	r2, r0
 800811c:	701a      	strb	r2, [r3, #0]
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 800811e:	7dfb      	ldrb	r3, [r7, #23]
 8008120:	4a4d      	ldr	r2, [pc, #308]	; (8008258 <MCU_RegisterModule+0x340>)
 8008122:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008126:	fb01 f303 	mul.w	r3, r1, r3
 800812a:	4413      	add	r3, r2
 800812c:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8008130:	2201      	movs	r2, #1
 8008132:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	4a48      	ldr	r2, [pc, #288]	; (8008258 <MCU_RegisterModule+0x340>)
 8008138:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800813c:	fb01 f303 	mul.w	r3, r1, r3
 8008140:	4413      	add	r3, r2
 8008142:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008146:	2201      	movs	r2, #1
 8008148:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	4a42      	ldr	r2, [pc, #264]	; (8008258 <MCU_RegisterModule+0x340>)
 800814e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	4413      	add	r3, r2
 8008158:	3308      	adds	r3, #8
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 800815e:	4b44      	ldr	r3, [pc, #272]	; (8008270 <MCU_RegisterModule+0x358>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	4a3c      	ldr	r2, [pc, #240]	; (8008258 <MCU_RegisterModule+0x340>)
 8008168:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800816c:	fb01 f303 	mul.w	r3, r1, r3
 8008170:	4413      	add	r3, r2
 8008172:	3301      	adds	r3, #1
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	4a37      	ldr	r2, [pc, #220]	; (8008258 <MCU_RegisterModule+0x340>)
 800817c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008180:	fb01 f303 	mul.w	r3, r1, r3
 8008184:	4413      	add	r3, r2
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 800818a:	7dfb      	ldrb	r3, [r7, #23]
 800818c:	4a32      	ldr	r2, [pc, #200]	; (8008258 <MCU_RegisterModule+0x340>)
 800818e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008192:	fb01 f303 	mul.w	r3, r1, r3
 8008196:	4413      	add	r3, r2
 8008198:	3304      	adds	r3, #4
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 800819e:	4b35      	ldr	r3, [pc, #212]	; (8008274 <MCU_RegisterModule+0x35c>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80081a4:	4b33      	ldr	r3, [pc, #204]	; (8008274 <MCU_RegisterModule+0x35c>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80081aa:	4b32      	ldr	r3, [pc, #200]	; (8008274 <MCU_RegisterModule+0x35c>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 80081b0:	4b31      	ldr	r3, [pc, #196]	; (8008278 <MCU_RegisterModule+0x360>)
 80081b2:	461a      	mov	r2, r3
 80081b4:	1d3b      	adds	r3, r7, #4
 80081b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80081ba:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 80081be:	4a2d      	ldr	r2, [pc, #180]	; (8008274 <MCU_RegisterModule+0x35c>)
 80081c0:	8813      	ldrh	r3, [r2, #0]
 80081c2:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 80081c6:	f361 030a 	bfi	r3, r1, #0, #11
 80081ca:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 80081cc:	7dfb      	ldrb	r3, [r7, #23]
 80081ce:	4a22      	ldr	r2, [pc, #136]	; (8008258 <MCU_RegisterModule+0x340>)
 80081d0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80081d4:	fb01 f303 	mul.w	r3, r1, r3
 80081d8:	4413      	add	r3, r2
 80081da:	3308      	adds	r3, #8
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	461a      	mov	r2, r3
 80081e0:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80081e4:	4923      	ldr	r1, [pc, #140]	; (8008274 <MCU_RegisterModule+0x35c>)
 80081e6:	680b      	ldr	r3, [r1, #0]
 80081e8:	f362 23dc 	bfi	r3, r2, #11, #18
 80081ec:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80081ee:	4a21      	ldr	r2, [pc, #132]	; (8008274 <MCU_RegisterModule+0x35c>)
 80081f0:	7913      	ldrb	r3, [r2, #4]
 80081f2:	f36f 1386 	bfc	r3, #6, #1
 80081f6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80081f8:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <MCU_RegisterModule+0x35c>)
 80081fa:	7913      	ldrb	r3, [r2, #4]
 80081fc:	2108      	movs	r1, #8
 80081fe:	f361 0303 	bfi	r3, r1, #0, #4
 8008202:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008204:	4a1b      	ldr	r2, [pc, #108]	; (8008274 <MCU_RegisterModule+0x35c>)
 8008206:	7913      	ldrb	r3, [r2, #4]
 8008208:	f36f 13c7 	bfc	r3, #7, #1
 800820c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800820e:	4a19      	ldr	r2, [pc, #100]	; (8008274 <MCU_RegisterModule+0x35c>)
 8008210:	7913      	ldrb	r3, [r2, #4]
 8008212:	f043 0310 	orr.w	r3, r3, #16
 8008216:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 8008218:	4b12      	ldr	r3, [pc, #72]	; (8008264 <MCU_RegisterModule+0x34c>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d012      	beq.n	800824a <MCU_RegisterModule+0x332>
 8008224:	793b      	ldrb	r3, [r7, #4]
 8008226:	4618      	mov	r0, r3
 8008228:	797b      	ldrb	r3, [r7, #5]
 800822a:	461c      	mov	r4, r3
 800822c:	79bb      	ldrb	r3, [r7, #6]
 800822e:	79fa      	ldrb	r2, [r7, #7]
 8008230:	68b9      	ldr	r1, [r7, #8]
 8008232:	9102      	str	r1, [sp, #8]
 8008234:	9201      	str	r2, [sp, #4]
 8008236:	9300      	str	r3, [sp, #0]
 8008238:	4623      	mov	r3, r4
 800823a:	4602      	mov	r2, r0
 800823c:	490f      	ldr	r1, [pc, #60]	; (800827c <MCU_RegisterModule+0x364>)
 800823e:	480b      	ldr	r0, [pc, #44]	; (800826c <MCU_RegisterModule+0x354>)
 8008240:	f00a ffde 	bl	8013200 <siprintf>
 8008244:	4809      	ldr	r0, [pc, #36]	; (800826c <MCU_RegisterModule+0x354>)
 8008246:	f7fd f88b 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 800824a:	2001      	movs	r0, #1
 800824c:	f7ff fe06 	bl	8007e5c <MCU_TransmitMessageQueue>
}
 8008250:	bf00      	nop
 8008252:	371c      	adds	r7, #28
 8008254:	46bd      	mov	sp, r7
 8008256:	bd90      	pop	{r4, r7, pc}
 8008258:	20000de4 	.word	0x20000de4
 800825c:	200005d8 	.word	0x200005d8
 8008260:	20000d20 	.word	0x20000d20
 8008264:	2000000c 	.word	0x2000000c
 8008268:	08016da8 	.word	0x08016da8
 800826c:	20000b64 	.word	0x20000b64
 8008270:	2000a664 	.word	0x2000a664
 8008274:	20000d38 	.word	0x20000d38
 8008278:	20000d44 	.word	0x20000d44
 800827c:	08016ddc 	.word	0x08016ddc

08008280 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 8008286:	4b22      	ldr	r3, [pc, #136]	; (8008310 <MCU_DeRegisterAllModules+0x90>)
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 800828c:	4b21      	ldr	r3, [pc, #132]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 800828e:	2200      	movs	r2, #0
 8008290:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008292:	4b20      	ldr	r3, [pc, #128]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 8008294:	2200      	movs	r2, #0
 8008296:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008298:	4b1e      	ldr	r3, [pc, #120]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 800829a:	2200      	movs	r2, #0
 800829c:	609a      	str	r2, [r3, #8]
 800829e:	793a      	ldrb	r2, [r7, #4]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 80082a0:	4b1d      	ldr	r3, [pc, #116]	; (8008318 <MCU_DeRegisterAllModules+0x98>)
 80082a2:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 80082a4:	4a1b      	ldr	r2, [pc, #108]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 80082a6:	8813      	ldrh	r3, [r2, #0]
 80082a8:	f240 511e 	movw	r1, #1310	; 0x51e
 80082ac:	f361 030a 	bfi	r3, r1, #0, #11
 80082b0:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 80082b2:	4a18      	ldr	r2, [pc, #96]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 80082b4:	6813      	ldr	r3, [r2, #0]
 80082b6:	f36f 23dc 	bfc	r3, #11, #18
 80082ba:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80082bc:	4a15      	ldr	r2, [pc, #84]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 80082be:	7913      	ldrb	r3, [r2, #4]
 80082c0:	f36f 1386 	bfc	r3, #6, #1
 80082c4:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 80082c6:	4a13      	ldr	r2, [pc, #76]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 80082c8:	7913      	ldrb	r3, [r2, #4]
 80082ca:	2101      	movs	r1, #1
 80082cc:	f361 0303 	bfi	r3, r1, #0, #4
 80082d0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80082d2:	4a10      	ldr	r2, [pc, #64]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 80082d4:	7913      	ldrb	r3, [r2, #4]
 80082d6:	f36f 13c7 	bfc	r3, #7, #1
 80082da:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80082dc:	4a0d      	ldr	r2, [pc, #52]	; (8008314 <MCU_DeRegisterAllModules+0x94>)
 80082de:	7913      	ldrb	r3, [r2, #4]
 80082e0:	f043 0310 	orr.w	r3, r3, #16
 80082e4:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 80082e6:	4b0d      	ldr	r3, [pc, #52]	; (800831c <MCU_DeRegisterAllModules+0x9c>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	f003 0302 	and.w	r3, r3, #2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d006      	beq.n	8008300 <MCU_DeRegisterAllModules+0x80>
 80082f2:	490b      	ldr	r1, [pc, #44]	; (8008320 <MCU_DeRegisterAllModules+0xa0>)
 80082f4:	480b      	ldr	r0, [pc, #44]	; (8008324 <MCU_DeRegisterAllModules+0xa4>)
 80082f6:	f00a ff83 	bl	8013200 <siprintf>
 80082fa:	480a      	ldr	r0, [pc, #40]	; (8008324 <MCU_DeRegisterAllModules+0xa4>)
 80082fc:	f7fd f830 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008300:	2001      	movs	r0, #1
 8008302:	f7ff fdab 	bl	8007e5c <MCU_TransmitMessageQueue>
}
 8008306:	bf00      	nop
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	2000a664 	.word	0x2000a664
 8008314:	20000d38 	.word	0x20000d38
 8008318:	20000d44 	.word	0x20000d44
 800831c:	2000000c 	.word	0x2000000c
 8008320:	08016e28 	.word	0x08016e28
 8008324:	20000b64 	.word	0x20000b64

08008328 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 800832e:	1d3b      	adds	r3, r7, #4
 8008330:	2201      	movs	r2, #1
 8008332:	2100      	movs	r1, #0
 8008334:	4618      	mov	r0, r3
 8008336:	f009 ff51 	bl	80121dc <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 800833a:	4b22      	ldr	r3, [pc, #136]	; (80083c4 <MCU_IsolateAllModules+0x9c>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8008340:	4b21      	ldr	r3, [pc, #132]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008346:	4b20      	ldr	r3, [pc, #128]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 8008348:	2200      	movs	r2, #0
 800834a:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800834c:	4b1e      	ldr	r3, [pc, #120]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 800834e:	2200      	movs	r2, #0
 8008350:	609a      	str	r2, [r3, #8]
 8008352:	793a      	ldrb	r2, [r7, #4]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 8008354:	4b1d      	ldr	r3, [pc, #116]	; (80083cc <MCU_IsolateAllModules+0xa4>)
 8008356:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8008358:	4a1b      	ldr	r2, [pc, #108]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 800835a:	8813      	ldrh	r3, [r2, #0]
 800835c:	f240 511f 	movw	r1, #1311	; 0x51f
 8008360:	f361 030a 	bfi	r3, r1, #0, #11
 8008364:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8008366:	4a18      	ldr	r2, [pc, #96]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 8008368:	6813      	ldr	r3, [r2, #0]
 800836a:	f36f 23dc 	bfc	r3, #11, #18
 800836e:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008370:	4a15      	ldr	r2, [pc, #84]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 8008372:	7913      	ldrb	r3, [r2, #4]
 8008374:	f36f 1386 	bfc	r3, #6, #1
 8008378:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 800837a:	4a13      	ldr	r2, [pc, #76]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 800837c:	7913      	ldrb	r3, [r2, #4]
 800837e:	2101      	movs	r1, #1
 8008380:	f361 0303 	bfi	r3, r1, #0, #4
 8008384:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008386:	4a10      	ldr	r2, [pc, #64]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 8008388:	7913      	ldrb	r3, [r2, #4]
 800838a:	f36f 13c7 	bfc	r3, #7, #1
 800838e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008390:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <MCU_IsolateAllModules+0xa0>)
 8008392:	7913      	ldrb	r3, [r2, #4]
 8008394:	f043 0310 	orr.w	r3, r3, #16
 8008398:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 800839a:	4b0d      	ldr	r3, [pc, #52]	; (80083d0 <MCU_IsolateAllModules+0xa8>)
 800839c:	781b      	ldrb	r3, [r3, #0]
 800839e:	f003 0302 	and.w	r3, r3, #2
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d006      	beq.n	80083b4 <MCU_IsolateAllModules+0x8c>
 80083a6:	490b      	ldr	r1, [pc, #44]	; (80083d4 <MCU_IsolateAllModules+0xac>)
 80083a8:	480b      	ldr	r0, [pc, #44]	; (80083d8 <MCU_IsolateAllModules+0xb0>)
 80083aa:	f00a ff29 	bl	8013200 <siprintf>
 80083ae:	480a      	ldr	r0, [pc, #40]	; (80083d8 <MCU_IsolateAllModules+0xb0>)
 80083b0:	f7fc ffd6 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80083b4:	2001      	movs	r0, #1
 80083b6:	f7ff fd51 	bl	8007e5c <MCU_TransmitMessageQueue>
}
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	2000a664 	.word	0x2000a664
 80083c8:	20000d38 	.word	0x20000d38
 80083cc:	20000d44 	.word	0x20000d44
 80083d0:	2000000c 	.word	0x2000000c
 80083d4:	08016e50 	.word	0x08016e50
 80083d8:	20000b64 	.word	0x20000b64

080083dc <MCU_ProcessModuleTime>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 80083dc:	b5b0      	push	{r4, r5, r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 80083e2:	4b34      	ldr	r3, [pc, #208]	; (80084b4 <MCU_ProcessModuleTime+0xd8>)
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 0302 	and.w	r3, r3, #2
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d006      	beq.n	80083fc <MCU_ProcessModuleTime+0x20>
 80083ee:	4932      	ldr	r1, [pc, #200]	; (80084b8 <MCU_ProcessModuleTime+0xdc>)
 80083f0:	4832      	ldr	r0, [pc, #200]	; (80084bc <MCU_ProcessModuleTime+0xe0>)
 80083f2:	f00a ff05 	bl	8013200 <siprintf>
 80083f6:	4831      	ldr	r0, [pc, #196]	; (80084bc <MCU_ProcessModuleTime+0xe0>)
 80083f8:	f7fc ffb2 	bl	8005360 <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 80083fc:	f7fd f898 	bl	8005530 <readRTC>
 8008400:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 8008404:	4b2e      	ldr	r3, [pc, #184]	; (80084c0 <MCU_ProcessModuleTime+0xe4>)
 8008406:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 800840a:	79fb      	ldrb	r3, [r7, #7]
 800840c:	f362 13c7 	bfi	r3, r2, #7, #1
 8008410:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 8008412:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008416:	4614      	mov	r4, r2
 8008418:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800841c:	4623      	mov	r3, r4
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	462a      	mov	r2, r5
 8008424:	f362 031e 	bfi	r3, r2, #0, #31
 8008428:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 800842a:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 800842c:	2200      	movs	r2, #0
 800842e:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008430:	4b24      	ldr	r3, [pc, #144]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 8008432:	2200      	movs	r2, #0
 8008434:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008436:	4b23      	ldr	r3, [pc, #140]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 8008438:	2200      	movs	r2, #0
 800843a:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 800843c:	463b      	mov	r3, r7
 800843e:	2208      	movs	r2, #8
 8008440:	4619      	mov	r1, r3
 8008442:	4821      	ldr	r0, [pc, #132]	; (80084c8 <MCU_ProcessModuleTime+0xec>)
 8008444:	f009 febc 	bl	80121c0 <memcpy>

  txObj.bF.id.SID = ID_MODULE_TIME;     // Standard ID
 8008448:	4a1e      	ldr	r2, [pc, #120]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 800844a:	8813      	ldrh	r3, [r2, #0]
 800844c:	f240 5116 	movw	r1, #1302	; 0x516
 8008450:	f361 030a 	bfi	r3, r1, #0, #11
 8008454:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8008456:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 8008458:	6813      	ldr	r3, [r2, #0]
 800845a:	f36f 23dc 	bfc	r3, #11, #18
 800845e:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008460:	4a18      	ldr	r2, [pc, #96]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 8008462:	7913      	ldrb	r3, [r2, #4]
 8008464:	f36f 1386 	bfc	r3, #6, #1
 8008468:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800846a:	4a16      	ldr	r2, [pc, #88]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 800846c:	7913      	ldrb	r3, [r2, #4]
 800846e:	2108      	movs	r1, #8
 8008470:	f361 0303 	bfi	r3, r1, #0, #4
 8008474:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008476:	4a13      	ldr	r2, [pc, #76]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 8008478:	7913      	ldrb	r3, [r2, #4]
 800847a:	f36f 13c7 	bfc	r3, #7, #1
 800847e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008480:	4a10      	ldr	r2, [pc, #64]	; (80084c4 <MCU_ProcessModuleTime+0xe8>)
 8008482:	7913      	ldrb	r3, [r2, #4]
 8008484:	f043 0310 	orr.w	r3, r3, #16
 8008488:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 800848a:	4b0a      	ldr	r3, [pc, #40]	; (80084b4 <MCU_ProcessModuleTime+0xd8>)
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b00      	cmp	r3, #0
 8008494:	d006      	beq.n	80084a4 <MCU_ProcessModuleTime+0xc8>
 8008496:	490d      	ldr	r1, [pc, #52]	; (80084cc <MCU_ProcessModuleTime+0xf0>)
 8008498:	4808      	ldr	r0, [pc, #32]	; (80084bc <MCU_ProcessModuleTime+0xe0>)
 800849a:	f00a feb1 	bl	8013200 <siprintf>
 800849e:	4807      	ldr	r0, [pc, #28]	; (80084bc <MCU_ProcessModuleTime+0xe0>)
 80084a0:	f7fc ff5e 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 80084a4:	2001      	movs	r0, #1
 80084a6:	f7ff fcd9 	bl	8007e5c <MCU_TransmitMessageQueue>
}
 80084aa:	bf00      	nop
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bdb0      	pop	{r4, r5, r7, pc}
 80084b2:	bf00      	nop
 80084b4:	2000000c 	.word	0x2000000c
 80084b8:	08016e74 	.word	0x08016e74
 80084bc:	20000b64 	.word	0x20000b64
 80084c0:	2000a664 	.word	0x2000a664
 80084c4:	20000d38 	.word	0x20000d38
 80084c8:	20000d44 	.word	0x20000d44
 80084cc:	08016e90 	.word	0x08016e90

080084d0 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	4603      	mov	r3, r0
 80084d8:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 80084da:	4b41      	ldr	r3, [pc, #260]	; (80085e0 <MCU_RequestHardware+0x110>)
 80084dc:	7d1b      	ldrb	r3, [r3, #20]
 80084de:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80084e0:	2300      	movs	r3, #0
 80084e2:	73bb      	strb	r3, [r7, #14]
 80084e4:	e010      	b.n	8008508 <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 80084e6:	7bbb      	ldrb	r3, [r7, #14]
 80084e8:	4a3e      	ldr	r2, [pc, #248]	; (80085e4 <MCU_RequestHardware+0x114>)
 80084ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80084ee:	fb01 f303 	mul.w	r3, r1, r3
 80084f2:	4413      	add	r3, r2
 80084f4:	3308      	adds	r3, #8
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d101      	bne.n	8008502 <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
 8008500:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008502:	7bbb      	ldrb	r3, [r7, #14]
 8008504:	3301      	adds	r3, #1
 8008506:	73bb      	strb	r3, [r7, #14]
 8008508:	4b35      	ldr	r3, [pc, #212]	; (80085e0 <MCU_RequestHardware+0x110>)
 800850a:	7d1b      	ldrb	r3, [r3, #20]
 800850c:	7bba      	ldrb	r2, [r7, #14]
 800850e:	429a      	cmp	r2, r3
 8008510:	d3e9      	bcc.n	80084e6 <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8008512:	4b33      	ldr	r3, [pc, #204]	; (80085e0 <MCU_RequestHardware+0x110>)
 8008514:	7d1b      	ldrb	r3, [r3, #20]
 8008516:	7bfa      	ldrb	r2, [r7, #15]
 8008518:	429a      	cmp	r2, r3
 800851a:	d10d      	bne.n	8008538 <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 800851c:	4b32      	ldr	r3, [pc, #200]	; (80085e8 <MCU_RequestHardware+0x118>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f003 0303 	and.w	r3, r3, #3
 8008524:	2b03      	cmp	r3, #3
 8008526:	d156      	bne.n	80085d6 <MCU_RequestHardware+0x106>
 8008528:	4930      	ldr	r1, [pc, #192]	; (80085ec <MCU_RequestHardware+0x11c>)
 800852a:	4831      	ldr	r0, [pc, #196]	; (80085f0 <MCU_RequestHardware+0x120>)
 800852c:	f00a fe68 	bl	8013200 <siprintf>
 8008530:	482f      	ldr	r0, [pc, #188]	; (80085f0 <MCU_RequestHardware+0x120>)
 8008532:	f7fc ff15 	bl	8005360 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8008536:	e04e      	b.n	80085d6 <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 8008538:	7bfb      	ldrb	r3, [r7, #15]
 800853a:	4a2a      	ldr	r2, [pc, #168]	; (80085e4 <MCU_RequestHardware+0x114>)
 800853c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008540:	fb01 f303 	mul.w	r3, r1, r3
 8008544:	4413      	add	r3, r2
 8008546:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800854a:	2201      	movs	r2, #1
 800854c:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8008552:	4b28      	ldr	r3, [pc, #160]	; (80085f4 <MCU_RequestHardware+0x124>)
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008558:	4b26      	ldr	r3, [pc, #152]	; (80085f4 <MCU_RequestHardware+0x124>)
 800855a:	2200      	movs	r2, #0
 800855c:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800855e:	4b25      	ldr	r3, [pc, #148]	; (80085f4 <MCU_RequestHardware+0x124>)
 8008560:	2200      	movs	r2, #0
 8008562:	609a      	str	r2, [r3, #8]
 8008564:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 8008566:	4b24      	ldr	r3, [pc, #144]	; (80085f8 <MCU_RequestHardware+0x128>)
 8008568:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 800856a:	4a22      	ldr	r2, [pc, #136]	; (80085f4 <MCU_RequestHardware+0x124>)
 800856c:	8813      	ldrh	r3, [r2, #0]
 800856e:	f240 5111 	movw	r1, #1297	; 0x511
 8008572:	f361 030a 	bfi	r3, r1, #0, #11
 8008576:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008578:	79fa      	ldrb	r2, [r7, #7]
 800857a:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800857e:	491d      	ldr	r1, [pc, #116]	; (80085f4 <MCU_RequestHardware+0x124>)
 8008580:	680b      	ldr	r3, [r1, #0]
 8008582:	f362 23dc 	bfi	r3, r2, #11, #18
 8008586:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008588:	4a1a      	ldr	r2, [pc, #104]	; (80085f4 <MCU_RequestHardware+0x124>)
 800858a:	7913      	ldrb	r3, [r2, #4]
 800858c:	f36f 1386 	bfc	r3, #6, #1
 8008590:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8008592:	4a18      	ldr	r2, [pc, #96]	; (80085f4 <MCU_RequestHardware+0x124>)
 8008594:	7913      	ldrb	r3, [r2, #4]
 8008596:	2101      	movs	r1, #1
 8008598:	f361 0303 	bfi	r3, r1, #0, #4
 800859c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800859e:	4a15      	ldr	r2, [pc, #84]	; (80085f4 <MCU_RequestHardware+0x124>)
 80085a0:	7913      	ldrb	r3, [r2, #4]
 80085a2:	f36f 13c7 	bfc	r3, #7, #1
 80085a6:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 80085a8:	4a12      	ldr	r2, [pc, #72]	; (80085f4 <MCU_RequestHardware+0x124>)
 80085aa:	7913      	ldrb	r3, [r2, #4]
 80085ac:	f043 0310 	orr.w	r3, r3, #16
 80085b0:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 80085b2:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <MCU_RequestHardware+0x118>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <MCU_RequestHardware+0x100>
 80085be:	79fb      	ldrb	r3, [r7, #7]
 80085c0:	461a      	mov	r2, r3
 80085c2:	490e      	ldr	r1, [pc, #56]	; (80085fc <MCU_RequestHardware+0x12c>)
 80085c4:	480a      	ldr	r0, [pc, #40]	; (80085f0 <MCU_RequestHardware+0x120>)
 80085c6:	f00a fe1b 	bl	8013200 <siprintf>
 80085ca:	4809      	ldr	r0, [pc, #36]	; (80085f0 <MCU_RequestHardware+0x120>)
 80085cc:	f7fc fec8 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 80085d0:	2001      	movs	r0, #1
 80085d2:	f7ff fc43 	bl	8007e5c <MCU_TransmitMessageQueue>
}
 80085d6:	bf00      	nop
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	2000a664 	.word	0x2000a664
 80085e4:	20000de4 	.word	0x20000de4
 80085e8:	2000000c 	.word	0x2000000c
 80085ec:	08016ea8 	.word	0x08016ea8
 80085f0:	20000b64 	.word	0x20000b64
 80085f4:	20000d38 	.word	0x20000d38
 80085f8:	20000d44 	.word	0x20000d44
 80085fc:	08016ee4 	.word	0x08016ee4

08008600 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 8008600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008604:	b08e      	sub	sp, #56	; 0x38
 8008606:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 8008608:	463b      	mov	r3, r7
 800860a:	2208      	movs	r2, #8
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f009 fde4 	bl	80121dc <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 8008614:	4a94      	ldr	r2, [pc, #592]	; (8008868 <MCU_ProcessModuleHardware+0x268>)
 8008616:	463b      	mov	r3, r7
 8008618:	e892 0003 	ldmia.w	r2, {r0, r1}
 800861c:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8008620:	4b92      	ldr	r3, [pc, #584]	; (800886c <MCU_ProcessModuleHardware+0x26c>)
 8008622:	7d1b      	ldrb	r3, [r3, #20]
 8008624:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8008626:	2300      	movs	r3, #0
 8008628:	75bb      	strb	r3, [r7, #22]
 800862a:	e015      	b.n	8008658 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800862c:	4b90      	ldr	r3, [pc, #576]	; (8008870 <MCU_ProcessModuleHardware+0x270>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8008634:	7dbb      	ldrb	r3, [r7, #22]
 8008636:	498f      	ldr	r1, [pc, #572]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 8008638:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800863c:	fb00 f303 	mul.w	r3, r0, r3
 8008640:	440b      	add	r3, r1
 8008642:	3308      	adds	r3, #8
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800864a:	429a      	cmp	r2, r3
 800864c:	d101      	bne.n	8008652 <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 800864e:	7dbb      	ldrb	r3, [r7, #22]
 8008650:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8008652:	7dbb      	ldrb	r3, [r7, #22]
 8008654:	3301      	adds	r3, #1
 8008656:	75bb      	strb	r3, [r7, #22]
 8008658:	4b84      	ldr	r3, [pc, #528]	; (800886c <MCU_ProcessModuleHardware+0x26c>)
 800865a:	7d1b      	ldrb	r3, [r3, #20]
 800865c:	7dba      	ldrb	r2, [r7, #22]
 800865e:	429a      	cmp	r2, r3
 8008660:	d3e4      	bcc.n	800862c <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 8008662:	4b82      	ldr	r3, [pc, #520]	; (800886c <MCU_ProcessModuleHardware+0x26c>)
 8008664:	7d1b      	ldrb	r3, [r3, #20]
 8008666:	7dfa      	ldrb	r2, [r7, #23]
 8008668:	429a      	cmp	r2, r3
 800866a:	d10e      	bne.n	800868a <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 800866c:	4b82      	ldr	r3, [pc, #520]	; (8008878 <MCU_ProcessModuleHardware+0x278>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	f003 0303 	and.w	r3, r3, #3
 8008674:	2b03      	cmp	r3, #3
 8008676:	f040 825d 	bne.w	8008b34 <MCU_ProcessModuleHardware+0x534>
 800867a:	4980      	ldr	r1, [pc, #512]	; (800887c <MCU_ProcessModuleHardware+0x27c>)
 800867c:	4880      	ldr	r0, [pc, #512]	; (8008880 <MCU_ProcessModuleHardware+0x280>)
 800867e:	f00a fdbf 	bl	8013200 <siprintf>
 8008682:	487f      	ldr	r0, [pc, #508]	; (8008880 <MCU_ProcessModuleHardware+0x280>)
 8008684:	f7fc fe6c 	bl	8005360 <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8008688:	e254      	b.n	8008b34 <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	8838      	ldrh	r0, [r7, #0]
 800868e:	4a79      	ldr	r2, [pc, #484]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 8008690:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008694:	fb01 f303 	mul.w	r3, r1, r3
 8008698:	4413      	add	r3, r2
 800869a:	330e      	adds	r3, #14
 800869c:	4602      	mov	r2, r0
 800869e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	8878      	ldrh	r0, [r7, #2]
 80086a4:	4a73      	ldr	r2, [pc, #460]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 80086a6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80086aa:	fb01 f303 	mul.w	r3, r1, r3
 80086ae:	4413      	add	r3, r2
 80086b0:	3310      	adds	r3, #16
 80086b2:	4602      	mov	r2, r0
 80086b4:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 80086b6:	7dfb      	ldrb	r3, [r7, #23]
 80086b8:	88b8      	ldrh	r0, [r7, #4]
 80086ba:	4a6e      	ldr	r2, [pc, #440]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 80086bc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80086c0:	fb01 f303 	mul.w	r3, r1, r3
 80086c4:	4413      	add	r3, r2
 80086c6:	3312      	adds	r3, #18
 80086c8:	4602      	mov	r2, r0
 80086ca:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 80086cc:	7dfb      	ldrb	r3, [r7, #23]
 80086ce:	88f8      	ldrh	r0, [r7, #6]
 80086d0:	4a68      	ldr	r2, [pc, #416]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 80086d2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80086d6:	fb01 f303 	mul.w	r3, r1, r3
 80086da:	4413      	add	r3, r2
 80086dc:	330c      	adds	r3, #12
 80086de:	4602      	mov	r2, r0
 80086e0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80086e2:	4b68      	ldr	r3, [pc, #416]	; (8008884 <MCU_ProcessModuleHardware+0x284>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80086ea:	4962      	ldr	r1, [pc, #392]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 80086ec:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80086f0:	fb00 f303 	mul.w	r3, r0, r3
 80086f4:	440b      	add	r3, r1
 80086f6:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80086fa:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
 80086fe:	4a62      	ldr	r2, [pc, #392]	; (8008888 <MCU_ProcessModuleHardware+0x288>)
 8008700:	6812      	ldr	r2, [r2, #0]
 8008702:	495c      	ldr	r1, [pc, #368]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 8008704:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008708:	fb00 f303 	mul.w	r3, r0, r3
 800870c:	440b      	add	r3, r1
 800870e:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8008712:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	4a57      	ldr	r2, [pc, #348]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 8008718:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	4413      	add	r3, r2
 8008722:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008726:	2200      	movs	r2, #0
 8008728:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 800872a:	7dfb      	ldrb	r3, [r7, #23]
 800872c:	4a51      	ldr	r2, [pc, #324]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 800872e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	4413      	add	r3, r2
 8008738:	330e      	adds	r3, #14
 800873a:	881b      	ldrh	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f7f7 fed3 	bl	80004e8 <__aeabi_i2d>
 8008742:	a345      	add	r3, pc, #276	; (adr r3, 8008858 <MCU_ProcessModuleHardware+0x258>)
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f7f7 ff38 	bl	80005bc <__aeabi_dmul>
 800874c:	4602      	mov	r2, r0
 800874e:	460b      	mov	r3, r1
 8008750:	4610      	mov	r0, r2
 8008752:	4619      	mov	r1, r3
 8008754:	a342      	add	r3, pc, #264	; (adr r3, 8008860 <MCU_ProcessModuleHardware+0x260>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f7 fd77 	bl	800024c <__aeabi_dsub>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4610      	mov	r0, r2
 8008764:	4619      	mov	r1, r3
 8008766:	f7f8 fa21 	bl	8000bac <__aeabi_d2f>
 800876a:	4603      	mov	r3, r0
 800876c:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	4a40      	ldr	r2, [pc, #256]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 8008772:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008776:	fb01 f303 	mul.w	r3, r1, r3
 800877a:	4413      	add	r3, r2
 800877c:	3310      	adds	r3, #16
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f7f7 feb1 	bl	80004e8 <__aeabi_i2d>
 8008786:	a334      	add	r3, pc, #208	; (adr r3, 8008858 <MCU_ProcessModuleHardware+0x258>)
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f7f7 ff16 	bl	80005bc <__aeabi_dmul>
 8008790:	4602      	mov	r2, r0
 8008792:	460b      	mov	r3, r1
 8008794:	4610      	mov	r0, r2
 8008796:	4619      	mov	r1, r3
 8008798:	a331      	add	r3, pc, #196	; (adr r3, 8008860 <MCU_ProcessModuleHardware+0x260>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	f7f7 fd55 	bl	800024c <__aeabi_dsub>
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	4610      	mov	r0, r2
 80087a8:	4619      	mov	r1, r3
 80087aa:	f7f8 f9ff 	bl	8000bac <__aeabi_d2f>
 80087ae:	4603      	mov	r3, r0
 80087b0:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 80087b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80087b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80087ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087be:	d567      	bpl.n	8008890 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 80087c0:	4b2d      	ldr	r3, [pc, #180]	; (8008878 <MCU_ProcessModuleHardware+0x278>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	f003 0303 	and.w	r3, r3, #3
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d113      	bne.n	80087f4 <MCU_ProcessModuleHardware+0x1f4>
 80087cc:	4b28      	ldr	r3, [pc, #160]	; (8008870 <MCU_ProcessModuleHardware+0x270>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80087d4:	461c      	mov	r4, r3
 80087d6:	6938      	ldr	r0, [r7, #16]
 80087d8:	f7f7 fe98 	bl	800050c <__aeabi_f2d>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	e9cd 2300 	strd	r2, r3, [sp]
 80087e4:	4622      	mov	r2, r4
 80087e6:	4929      	ldr	r1, [pc, #164]	; (800888c <MCU_ProcessModuleHardware+0x28c>)
 80087e8:	4825      	ldr	r0, [pc, #148]	; (8008880 <MCU_ProcessModuleHardware+0x280>)
 80087ea:	f00a fd09 	bl	8013200 <siprintf>
 80087ee:	4824      	ldr	r0, [pc, #144]	; (8008880 <MCU_ProcessModuleHardware+0x280>)
 80087f0:	f7fc fdb6 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	4a1f      	ldr	r2, [pc, #124]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 80087f8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80087fc:	fb01 f303 	mul.w	r3, r1, r3
 8008800:	4413      	add	r3, r2
 8008802:	330e      	adds	r3, #14
 8008804:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008808:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	4a19      	ldr	r2, [pc, #100]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 800880e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	4413      	add	r3, r2
 8008818:	3310      	adds	r3, #16
 800881a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800881e:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	4a14      	ldr	r2, [pc, #80]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 8008824:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008828:	fb01 f303 	mul.w	r3, r1, r3
 800882c:	4413      	add	r3, r2
 800882e:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8008832:	7893      	ldrb	r3, [r2, #2]
 8008834:	f043 0302 	orr.w	r3, r3, #2
 8008838:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	4a0d      	ldr	r2, [pc, #52]	; (8008874 <MCU_ProcessModuleHardware+0x274>)
 800883e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008842:	fb01 f303 	mul.w	r3, r1, r3
 8008846:	4413      	add	r3, r2
 8008848:	3308      	adds	r3, #8
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	2100      	movs	r1, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f001 f866 	bl	8009920 <MCU_TransmitState>
 8008854:	e04f      	b.n	80088f6 <MCU_ProcessModuleHardware+0x2f6>
 8008856:	bf00      	nop
 8008858:	47ae147b 	.word	0x47ae147b
 800885c:	3f947ae1 	.word	0x3f947ae1
 8008860:	47ae147b 	.word	0x47ae147b
 8008864:	40847ae1 	.word	0x40847ae1
 8008868:	20000da0 	.word	0x20000da0
 800886c:	2000a664 	.word	0x2000a664
 8008870:	20000d94 	.word	0x20000d94
 8008874:	20000de4 	.word	0x20000de4
 8008878:	2000000c 	.word	0x2000000c
 800887c:	08016f0c 	.word	0x08016f0c
 8008880:	20000b64 	.word	0x20000b64
 8008884:	200005d8 	.word	0x200005d8
 8008888:	20000d20 	.word	0x20000d20
 800888c:	08016f4c 	.word	0x08016f4c
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8008890:	edd7 7a04 	vldr	s15, [r7, #16]
 8008894:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	dd29      	ble.n	80088f6 <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 80088a2:	4bad      	ldr	r3, [pc, #692]	; (8008b58 <MCU_ProcessModuleHardware+0x558>)
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	f003 0302 	and.w	r3, r3, #2
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d018      	beq.n	80088e0 <MCU_ProcessModuleHardware+0x2e0>
 80088ae:	4bab      	ldr	r3, [pc, #684]	; (8008b5c <MCU_ProcessModuleHardware+0x55c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80088b6:	461c      	mov	r4, r3
 80088b8:	6938      	ldr	r0, [r7, #16]
 80088ba:	f7f7 fe27 	bl	800050c <__aeabi_f2d>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	49a6      	ldr	r1, [pc, #664]	; (8008b60 <MCU_ProcessModuleHardware+0x560>)
 80088c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088cc:	e9cd 2300 	strd	r2, r3, [sp]
 80088d0:	4622      	mov	r2, r4
 80088d2:	49a4      	ldr	r1, [pc, #656]	; (8008b64 <MCU_ProcessModuleHardware+0x564>)
 80088d4:	48a4      	ldr	r0, [pc, #656]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 80088d6:	f00a fc93 	bl	8013200 <siprintf>
 80088da:	48a3      	ldr	r0, [pc, #652]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 80088dc:	f7fc fd40 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	4aa2      	ldr	r2, [pc, #648]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 80088e4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80088e8:	fb01 f303 	mul.w	r3, r1, r3
 80088ec:	4413      	add	r3, r2
 80088ee:	330e      	adds	r3, #14
 80088f0:	f248 12f4 	movw	r2, #33268	; 0x81f4
 80088f4:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 80088f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80088fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008902:	dd4a      	ble.n	800899a <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 8008904:	4b94      	ldr	r3, [pc, #592]	; (8008b58 <MCU_ProcessModuleHardware+0x558>)
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	2b03      	cmp	r3, #3
 800890e:	d113      	bne.n	8008938 <MCU_ProcessModuleHardware+0x338>
 8008910:	4b92      	ldr	r3, [pc, #584]	; (8008b5c <MCU_ProcessModuleHardware+0x55c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008918:	461c      	mov	r4, r3
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7f7 fdf6 	bl	800050c <__aeabi_f2d>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	e9cd 2300 	strd	r2, r3, [sp]
 8008928:	4622      	mov	r2, r4
 800892a:	4991      	ldr	r1, [pc, #580]	; (8008b70 <MCU_ProcessModuleHardware+0x570>)
 800892c:	488e      	ldr	r0, [pc, #568]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 800892e:	f00a fc67 	bl	8013200 <siprintf>
 8008932:	488d      	ldr	r0, [pc, #564]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 8008934:	f7fc fd14 	bl	8005360 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	4a8c      	ldr	r2, [pc, #560]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 800893c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008940:	fb01 f303 	mul.w	r3, r1, r3
 8008944:	4413      	add	r3, r2
 8008946:	330e      	adds	r3, #14
 8008948:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800894c:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	4a86      	ldr	r2, [pc, #536]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 8008952:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008956:	fb01 f303 	mul.w	r3, r1, r3
 800895a:	4413      	add	r3, r2
 800895c:	3310      	adds	r3, #16
 800895e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008962:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 8008964:	7dfb      	ldrb	r3, [r7, #23]
 8008966:	4a81      	ldr	r2, [pc, #516]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 8008968:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800896c:	fb01 f303 	mul.w	r3, r1, r3
 8008970:	4413      	add	r3, r2
 8008972:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8008976:	7893      	ldrb	r3, [r2, #2]
 8008978:	f043 0302 	orr.w	r3, r3, #2
 800897c:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	4a7a      	ldr	r2, [pc, #488]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 8008982:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008986:	fb01 f303 	mul.w	r3, r1, r3
 800898a:	4413      	add	r3, r2
 800898c:	3308      	adds	r3, #8
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2100      	movs	r1, #0
 8008992:	4618      	mov	r0, r3
 8008994:	f000 ffc4 	bl	8009920 <MCU_TransmitState>
 8008998:	e032      	b.n	8008a00 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 800899a:	edd7 7a03 	vldr	s15, [r7, #12]
 800899e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8008b74 <MCU_ProcessModuleHardware+0x574>
 80089a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089aa:	d529      	bpl.n	8008a00 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 80089ac:	4b6a      	ldr	r3, [pc, #424]	; (8008b58 <MCU_ProcessModuleHardware+0x558>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d018      	beq.n	80089ea <MCU_ProcessModuleHardware+0x3ea>
 80089b8:	4b68      	ldr	r3, [pc, #416]	; (8008b5c <MCU_ProcessModuleHardware+0x55c>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80089c0:	461c      	mov	r4, r3
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7f7 fda2 	bl	800050c <__aeabi_f2d>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	f04f 0000 	mov.w	r0, #0
 80089d0:	4969      	ldr	r1, [pc, #420]	; (8008b78 <MCU_ProcessModuleHardware+0x578>)
 80089d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d6:	e9cd 2300 	strd	r2, r3, [sp]
 80089da:	4622      	mov	r2, r4
 80089dc:	4967      	ldr	r1, [pc, #412]	; (8008b7c <MCU_ProcessModuleHardware+0x57c>)
 80089de:	4862      	ldr	r0, [pc, #392]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 80089e0:	f00a fc0e 	bl	8013200 <siprintf>
 80089e4:	4860      	ldr	r0, [pc, #384]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 80089e6:	f7fc fcbb 	bl	8005360 <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
 80089ec:	4a5f      	ldr	r2, [pc, #380]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 80089ee:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089f2:	fb01 f303 	mul.w	r3, r1, r3
 80089f6:	4413      	add	r3, r2
 80089f8:	3310      	adds	r3, #16
 80089fa:	f247 72cc 	movw	r2, #30668	; 0x77cc
 80089fe:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8008a00:	4b55      	ldr	r3, [pc, #340]	; (8008b58 <MCU_ProcessModuleHardware+0x558>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 8093 	beq.w	8008b34 <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 8008a0e:	7dfb      	ldrb	r3, [r7, #23]
 8008a10:	4a56      	ldr	r2, [pc, #344]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 8008a12:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a16:	fb01 f303 	mul.w	r3, r1, r3
 8008a1a:	4413      	add	r3, r2
 8008a1c:	330e      	adds	r3, #14
 8008a1e:	881b      	ldrh	r3, [r3, #0]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7f7 fd61 	bl	80004e8 <__aeabi_i2d>
 8008a26:	a346      	add	r3, pc, #280	; (adr r3, 8008b40 <MCU_ProcessModuleHardware+0x540>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fdc6 	bl	80005bc <__aeabi_dmul>
 8008a30:	4602      	mov	r2, r0
 8008a32:	460b      	mov	r3, r1
 8008a34:	4610      	mov	r0, r2
 8008a36:	4619      	mov	r1, r3
 8008a38:	a343      	add	r3, pc, #268	; (adr r3, 8008b48 <MCU_ProcessModuleHardware+0x548>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fc05 	bl	800024c <__aeabi_dsub>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7f8 f8af 	bl	8000bac <__aeabi_d2f>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8008a52:	7dfb      	ldrb	r3, [r7, #23]
 8008a54:	4a45      	ldr	r2, [pc, #276]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 8008a56:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a5a:	fb01 f303 	mul.w	r3, r1, r3
 8008a5e:	4413      	add	r3, r2
 8008a60:	3310      	adds	r3, #16
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7f7 fd3f 	bl	80004e8 <__aeabi_i2d>
 8008a6a:	a335      	add	r3, pc, #212	; (adr r3, 8008b40 <MCU_ProcessModuleHardware+0x540>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fda4 	bl	80005bc <__aeabi_dmul>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4610      	mov	r0, r2
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	a332      	add	r3, pc, #200	; (adr r3, 8008b48 <MCU_ProcessModuleHardware+0x548>)
 8008a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a82:	f7f7 fbe3 	bl	800024c <__aeabi_dsub>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	4610      	mov	r0, r2
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	f7f8 f88d 	bl	8000bac <__aeabi_d2f>
 8008a92:	4603      	mov	r3, r0
 8008a94:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	4a34      	ldr	r2, [pc, #208]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 8008a9a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a9e:	fb01 f303 	mul.w	r3, r1, r3
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3312      	adds	r3, #18
 8008aa6:	881b      	ldrh	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f7 fd1d 	bl	80004e8 <__aeabi_i2d>
 8008aae:	a328      	add	r3, pc, #160	; (adr r3, 8008b50 <MCU_ProcessModuleHardware+0x550>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fd82 	bl	80005bc <__aeabi_dmul>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4610      	mov	r0, r2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	f7f7 fbc2 	bl	8000250 <__adddf3>
 8008acc:	4602      	mov	r2, r0
 8008ace:	460b      	mov	r3, r1
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f7f8 f86a 	bl	8000bac <__aeabi_d2f>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008adc:	4b1f      	ldr	r3, [pc, #124]	; (8008b5c <MCU_ProcessModuleHardware+0x55c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8008ae4:	469a      	mov	sl, r3
 8008ae6:	6938      	ldr	r0, [r7, #16]
 8008ae8:	f7f7 fd10 	bl	800050c <__aeabi_f2d>
 8008aec:	4604      	mov	r4, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	68f8      	ldr	r0, [r7, #12]
 8008af2:	f7f7 fd0b 	bl	800050c <__aeabi_f2d>
 8008af6:	4680      	mov	r8, r0
 8008af8:	4689      	mov	r9, r1
 8008afa:	68b8      	ldr	r0, [r7, #8]
 8008afc:	f7f7 fd06 	bl	800050c <__aeabi_f2d>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008b04:	7df9      	ldrb	r1, [r7, #23]
 8008b06:	4819      	ldr	r0, [pc, #100]	; (8008b6c <MCU_ProcessModuleHardware+0x56c>)
 8008b08:	f240 46c4 	movw	r6, #1220	; 0x4c4
 8008b0c:	fb06 f101 	mul.w	r1, r6, r1
 8008b10:	4401      	add	r1, r0
 8008b12:	310c      	adds	r1, #12
 8008b14:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 8008b16:	9106      	str	r1, [sp, #24]
 8008b18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b1c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8008b20:	e9cd 4500 	strd	r4, r5, [sp]
 8008b24:	4652      	mov	r2, sl
 8008b26:	4916      	ldr	r1, [pc, #88]	; (8008b80 <MCU_ProcessModuleHardware+0x580>)
 8008b28:	480f      	ldr	r0, [pc, #60]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 8008b2a:	f00a fb69 	bl	8013200 <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8008b2e:	480e      	ldr	r0, [pc, #56]	; (8008b68 <MCU_ProcessModuleHardware+0x568>)
 8008b30:	f7fc fc16 	bl	8005360 <serialOut>
}
 8008b34:	bf00      	nop
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3e:	bf00      	nop
 8008b40:	47ae147b 	.word	0x47ae147b
 8008b44:	3f947ae1 	.word	0x3f947ae1
 8008b48:	47ae147b 	.word	0x47ae147b
 8008b4c:	40847ae1 	.word	0x40847ae1
 8008b50:	eb851eb8 	.word	0xeb851eb8
 8008b54:	3f8eb851 	.word	0x3f8eb851
 8008b58:	2000000c 	.word	0x2000000c
 8008b5c:	20000d94 	.word	0x20000d94
 8008b60:	40240000 	.word	0x40240000
 8008b64:	08016f94 	.word	0x08016f94
 8008b68:	20000b64 	.word	0x20000b64
 8008b6c:	20000de4 	.word	0x20000de4
 8008b70:	08016fdc 	.word	0x08016fdc
 8008b74:	c2280000 	.word	0xc2280000
 8008b78:	c0450000 	.word	0xc0450000
 8008b7c:	08017024 	.word	0x08017024
 8008b80:	08017070 	.word	0x08017070

08008b84 <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	4603      	mov	r3, r0
 8008b8c:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8008b8e:	4b41      	ldr	r3, [pc, #260]	; (8008c94 <MCU_RequestModuleStatus+0x110>)
 8008b90:	7d1b      	ldrb	r3, [r3, #20]
 8008b92:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]
 8008b98:	e010      	b.n	8008bbc <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8008b9a:	7bbb      	ldrb	r3, [r7, #14]
 8008b9c:	4a3e      	ldr	r2, [pc, #248]	; (8008c98 <MCU_RequestModuleStatus+0x114>)
 8008b9e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ba2:	fb01 f303 	mul.w	r3, r1, r3
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3308      	adds	r3, #8
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	79fa      	ldrb	r2, [r7, #7]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d101      	bne.n	8008bb6 <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8008bb2:	7bbb      	ldrb	r3, [r7, #14]
 8008bb4:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	73bb      	strb	r3, [r7, #14]
 8008bbc:	4b35      	ldr	r3, [pc, #212]	; (8008c94 <MCU_RequestModuleStatus+0x110>)
 8008bbe:	7d1b      	ldrb	r3, [r3, #20]
 8008bc0:	7bba      	ldrb	r2, [r7, #14]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d3e9      	bcc.n	8008b9a <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8008bc6:	4b33      	ldr	r3, [pc, #204]	; (8008c94 <MCU_RequestModuleStatus+0x110>)
 8008bc8:	7d1b      	ldrb	r3, [r3, #20]
 8008bca:	7bfa      	ldrb	r2, [r7, #15]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d10d      	bne.n	8008bec <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8008bd0:	4b32      	ldr	r3, [pc, #200]	; (8008c9c <MCU_RequestModuleStatus+0x118>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	2b03      	cmp	r3, #3
 8008bda:	d156      	bne.n	8008c8a <MCU_RequestModuleStatus+0x106>
 8008bdc:	4930      	ldr	r1, [pc, #192]	; (8008ca0 <MCU_RequestModuleStatus+0x11c>)
 8008bde:	4831      	ldr	r0, [pc, #196]	; (8008ca4 <MCU_RequestModuleStatus+0x120>)
 8008be0:	f00a fb0e 	bl	8013200 <siprintf>
 8008be4:	482f      	ldr	r0, [pc, #188]	; (8008ca4 <MCU_RequestModuleStatus+0x120>)
 8008be6:	f7fc fbbb 	bl	8005360 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8008bea:	e04e      	b.n	8008c8a <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 8008bec:	7bfb      	ldrb	r3, [r7, #15]
 8008bee:	4a2a      	ldr	r2, [pc, #168]	; (8008c98 <MCU_RequestModuleStatus+0x114>)
 8008bf0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008bf4:	fb01 f303 	mul.w	r3, r1, r3
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8008bfe:	2201      	movs	r2, #1
 8008c00:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 8008c02:	79fb      	ldrb	r3, [r7, #7]
 8008c04:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8008c06:	4b28      	ldr	r3, [pc, #160]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008c0c:	4b26      	ldr	r3, [pc, #152]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008c12:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	609a      	str	r2, [r3, #8]
 8008c18:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <MCU_RequestModuleStatus+0x128>)
 8008c1c:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 8008c1e:	4a22      	ldr	r2, [pc, #136]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c20:	8813      	ldrh	r3, [r2, #0]
 8008c22:	f240 5112 	movw	r1, #1298	; 0x512
 8008c26:	f361 030a 	bfi	r3, r1, #0, #11
 8008c2a:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008c2c:	79fa      	ldrb	r2, [r7, #7]
 8008c2e:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008c32:	491d      	ldr	r1, [pc, #116]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c34:	680b      	ldr	r3, [r1, #0]
 8008c36:	f362 23dc 	bfi	r3, r2, #11, #18
 8008c3a:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008c3c:	4a1a      	ldr	r2, [pc, #104]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c3e:	7913      	ldrb	r3, [r2, #4]
 8008c40:	f36f 1386 	bfc	r3, #6, #1
 8008c44:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8008c46:	4a18      	ldr	r2, [pc, #96]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c48:	7913      	ldrb	r3, [r2, #4]
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	f361 0303 	bfi	r3, r1, #0, #4
 8008c50:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008c52:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c54:	7913      	ldrb	r3, [r2, #4]
 8008c56:	f36f 13c7 	bfc	r3, #7, #1
 8008c5a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8008c5c:	4a12      	ldr	r2, [pc, #72]	; (8008ca8 <MCU_RequestModuleStatus+0x124>)
 8008c5e:	7913      	ldrb	r3, [r2, #4]
 8008c60:	f043 0310 	orr.w	r3, r3, #16
 8008c64:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8008c66:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <MCU_RequestModuleStatus+0x118>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d008      	beq.n	8008c84 <MCU_RequestModuleStatus+0x100>
 8008c72:	79fb      	ldrb	r3, [r7, #7]
 8008c74:	461a      	mov	r2, r3
 8008c76:	490e      	ldr	r1, [pc, #56]	; (8008cb0 <MCU_RequestModuleStatus+0x12c>)
 8008c78:	480a      	ldr	r0, [pc, #40]	; (8008ca4 <MCU_RequestModuleStatus+0x120>)
 8008c7a:	f00a fac1 	bl	8013200 <siprintf>
 8008c7e:	4809      	ldr	r0, [pc, #36]	; (8008ca4 <MCU_RequestModuleStatus+0x120>)
 8008c80:	f7fc fb6e 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8008c84:	2001      	movs	r0, #1
 8008c86:	f7ff f8e9 	bl	8007e5c <MCU_TransmitMessageQueue>
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	2000a664 	.word	0x2000a664
 8008c98:	20000de4 	.word	0x20000de4
 8008c9c:	2000000c 	.word	0x2000000c
 8008ca0:	080170dc 	.word	0x080170dc
 8008ca4:	20000b64 	.word	0x20000b64
 8008ca8:	20000d38 	.word	0x20000d38
 8008cac:	20000d44 	.word	0x20000d44
 8008cb0:	0801711c 	.word	0x0801711c

08008cb4 <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8008cc2:	4b37      	ldr	r3, [pc, #220]	; (8008da0 <MCU_FindMaxVoltageModule+0xec>)
 8008cc4:	7d1b      	ldrb	r3, [r3, #20]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8008cca:	2300      	movs	r3, #0
 8008ccc:	71fb      	strb	r3, [r7, #7]
 8008cce:	e052      	b.n	8008d76 <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	4a34      	ldr	r2, [pc, #208]	; (8008da4 <MCU_FindMaxVoltageModule+0xf0>)
 8008cd4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008cd8:	fb01 f303 	mul.w	r3, r1, r3
 8008cdc:	4413      	add	r3, r2
 8008cde:	3314      	adds	r3, #20
 8008ce0:	881b      	ldrh	r3, [r3, #0]
 8008ce2:	88ba      	ldrh	r2, [r7, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d243      	bcs.n	8008d70 <MCU_FindMaxVoltageModule+0xbc>
 8008ce8:	79fb      	ldrb	r3, [r7, #7]
 8008cea:	4a2e      	ldr	r2, [pc, #184]	; (8008da4 <MCU_FindMaxVoltageModule+0xf0>)
 8008cec:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008cf0:	fb01 f303 	mul.w	r3, r1, r3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008cfa:	789b      	ldrb	r3, [r3, #2]
 8008cfc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d134      	bne.n	8008d70 <MCU_FindMaxVoltageModule+0xbc>
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <MCU_FindMaxVoltageModule+0xf0>)
 8008d0a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008d0e:	fb01 f303 	mul.w	r3, r1, r3
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008d18:	789b      	ldrb	r3, [r3, #2]
 8008d1a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d125      	bne.n	8008d70 <MCU_FindMaxVoltageModule+0xbc>
 8008d24:	79fb      	ldrb	r3, [r7, #7]
 8008d26:	4a1f      	ldr	r2, [pc, #124]	; (8008da4 <MCU_FindMaxVoltageModule+0xf0>)
 8008d28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008d36:	789b      	ldrb	r3, [r3, #2]
 8008d38:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d116      	bne.n	8008d70 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	4a17      	ldr	r2, [pc, #92]	; (8008da4 <MCU_FindMaxVoltageModule+0xf0>)
 8008d46:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008d4a:	fb01 f303 	mul.w	r3, r1, r3
 8008d4e:	4413      	add	r3, r2
 8008d50:	3314      	adds	r3, #20
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 8008d56:	79fb      	ldrb	r3, [r7, #7]
 8008d58:	4a12      	ldr	r2, [pc, #72]	; (8008da4 <MCU_FindMaxVoltageModule+0xf0>)
 8008d5a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008d5e:	fb01 f303 	mul.w	r3, r1, r3
 8008d62:	4413      	add	r3, r2
 8008d64:	3308      	adds	r3, #8
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 8008d6a:	79bb      	ldrb	r3, [r7, #6]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	3301      	adds	r3, #1
 8008d74:	71fb      	strb	r3, [r7, #7]
 8008d76:	4b0a      	ldr	r3, [pc, #40]	; (8008da0 <MCU_FindMaxVoltageModule+0xec>)
 8008d78:	7d1b      	ldrb	r3, [r3, #20]
 8008d7a:	79fa      	ldrb	r2, [r7, #7]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d3a7      	bcc.n	8008cd0 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 8008d80:	88bb      	ldrh	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d104      	bne.n	8008d90 <MCU_FindMaxVoltageModule+0xdc>
 8008d86:	79bb      	ldrb	r3, [r7, #6]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <MCU_FindMaxVoltageModule+0xdc>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	e000      	b.n	8008d92 <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 8008d90:	78fb      	ldrb	r3, [r7, #3]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	2000a664 	.word	0x2000a664
 8008da4:	20000de4 	.word	0x20000de4

08008da8 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	b09d      	sub	sp, #116	; 0x74
 8008dae:	af0a      	add	r7, sp, #40	; 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 8008db0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008db4:	2208      	movs	r2, #8
 8008db6:	2100      	movs	r1, #0
 8008db8:	4618      	mov	r0, r3
 8008dba:	f009 fa0f 	bl	80121dc <memset>
  memcpy(&status1, rxd, sizeof(status1));
 8008dbe:	4ab1      	ldr	r2, [pc, #708]	; (8009084 <MCU_ProcessModuleStatus1+0x2dc>)
 8008dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008dc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008dc8:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8008dcc:	4bae      	ldr	r3, [pc, #696]	; (8009088 <MCU_ProcessModuleStatus1+0x2e0>)
 8008dce:	7d1b      	ldrb	r3, [r3, #20]
 8008dd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008dda:	e01a      	b.n	8008e12 <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 8008ddc:	4bab      	ldr	r3, [pc, #684]	; (800908c <MCU_ProcessModuleStatus1+0x2e4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8008de4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008de8:	49a9      	ldr	r1, [pc, #676]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008dea:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008dee:	fb00 f303 	mul.w	r3, r0, r3
 8008df2:	440b      	add	r3, r1
 8008df4:	3308      	adds	r3, #8
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d103      	bne.n	8008e08 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 8008e00:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008e04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 8008e08:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8008e12:	4b9d      	ldr	r3, [pc, #628]	; (8009088 <MCU_ProcessModuleStatus1+0x2e0>)
 8008e14:	7d1b      	ldrb	r3, [r3, #20]
 8008e16:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d3de      	bcc.n	8008ddc <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 8008e1e:	4b9a      	ldr	r3, [pc, #616]	; (8009088 <MCU_ProcessModuleStatus1+0x2e0>)
 8008e20:	7d1b      	ldrb	r3, [r3, #20]
 8008e22:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d10e      	bne.n	8008e48 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 8008e2a:	4b9a      	ldr	r3, [pc, #616]	; (8009094 <MCU_ProcessModuleStatus1+0x2ec>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	f003 0303 	and.w	r3, r3, #3
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	f040 8222 	bne.w	800927c <MCU_ProcessModuleStatus1+0x4d4>
 8008e38:	4997      	ldr	r1, [pc, #604]	; (8009098 <MCU_ProcessModuleStatus1+0x2f0>)
 8008e3a:	4898      	ldr	r0, [pc, #608]	; (800909c <MCU_ProcessModuleStatus1+0x2f4>)
 8008e3c:	f00a f9e0 	bl	8013200 <siprintf>
 8008e40:	4896      	ldr	r0, [pc, #600]	; (800909c <MCU_ProcessModuleStatus1+0x2f4>)
 8008e42:	f7fc fa8d 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 8008e46:	e219      	b.n	800927c <MCU_ProcessModuleStatus1+0x4d4>
    module[moduleIndex].statusPending = false;
 8008e48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e4c:	4a90      	ldr	r2, [pc, #576]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008e4e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008e52:	fb01 f303 	mul.w	r3, r1, r3
 8008e56:	4413      	add	r3, r2
 8008e58:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8008e60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e64:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 8008e66:	4a8a      	ldr	r2, [pc, #552]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008e68:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	3316      	adds	r3, #22
 8008e74:	4602      	mov	r2, r0
 8008e76:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8008e78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e7c:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8008e7e:	4a84      	ldr	r2, [pc, #528]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008e80:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008e84:	fb01 f303 	mul.w	r3, r1, r3
 8008e88:	4413      	add	r3, r2
 8008e8a:	3314      	adds	r3, #20
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8008e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008e94:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8008e98:	4a7d      	ldr	r2, [pc, #500]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008e9a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008e9e:	fb01 f303 	mul.w	r3, r1, r3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	332b      	adds	r3, #43	; 0x2b
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 8008eaa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008eae:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 8008eb2:	4a77      	ldr	r2, [pc, #476]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008eb4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008eb8:	fb01 f303 	mul.w	r3, r1, r3
 8008ebc:	4413      	add	r3, r2
 8008ebe:	332c      	adds	r3, #44	; 0x2c
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 8008ec4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008ec8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ed2:	4610      	mov	r0, r2
 8008ed4:	4a6e      	ldr	r2, [pc, #440]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008ed6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008eda:	fb01 f303 	mul.w	r3, r1, r3
 8008ede:	4413      	add	r3, r2
 8008ee0:	3327      	adds	r3, #39	; 0x27
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 8008ee6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008eea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4a66      	ldr	r2, [pc, #408]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008ef8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008efc:	fb01 f303 	mul.w	r3, r1, r3
 8008f00:	4413      	add	r3, r2
 8008f02:	3326      	adds	r3, #38	; 0x26
 8008f04:	4602      	mov	r2, r0
 8008f06:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 8008f08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f0c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8008f10:	4a5f      	ldr	r2, [pc, #380]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008f12:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008f16:	fb01 f303 	mul.w	r3, r1, r3
 8008f1a:	4413      	add	r3, r2
 8008f1c:	332d      	adds	r3, #45	; 0x2d
 8008f1e:	4602      	mov	r2, r0
 8008f20:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8008f22:	4b5f      	ldr	r3, [pc, #380]	; (80090a0 <MCU_ProcessModuleStatus1+0x2f8>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008f2c:	4958      	ldr	r1, [pc, #352]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008f2e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008f32:	fb00 f303 	mul.w	r3, r0, r3
 8008f36:	440b      	add	r3, r1
 8008f38:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008f3c:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8008f3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f42:	4a58      	ldr	r2, [pc, #352]	; (80090a4 <MCU_ProcessModuleStatus1+0x2fc>)
 8008f44:	6812      	ldr	r2, [r2, #0]
 8008f46:	4952      	ldr	r1, [pc, #328]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008f48:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008f4c:	fb00 f303 	mul.w	r3, r0, r3
 8008f50:	440b      	add	r3, r1
 8008f52:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8008f56:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 8008f58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f5c:	4a4c      	ldr	r2, [pc, #304]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008f5e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008f62:	fb01 f303 	mul.w	r3, r1, r3
 8008f66:	4413      	add	r3, r2
 8008f68:	3327      	adds	r3, #39	; 0x27
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f70:	4947      	ldr	r1, [pc, #284]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008f72:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008f76:	fb00 f303 	mul.w	r3, r0, r3
 8008f7a:	440b      	add	r3, r1
 8008f7c:	3329      	adds	r3, #41	; 0x29
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d10a      	bne.n	8008f9a <MCU_ProcessModuleStatus1+0x1f2>
     module[moduleIndex].command.commandStatus = commandActive;
 8008f84:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008f88:	4a41      	ldr	r2, [pc, #260]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008f8a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008f8e:	fb01 f303 	mul.w	r3, r1, r3
 8008f92:	4413      	add	r3, r2
 8008f94:	332a      	adds	r3, #42	; 0x2a
 8008f96:	2201      	movs	r2, #1
 8008f98:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8008f9a:	4b3e      	ldr	r3, [pc, #248]	; (8009094 <MCU_ProcessModuleStatus1+0x2ec>)
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 816a 	beq.w	800927c <MCU_ProcessModuleStatus1+0x4d4>
      switch (module[moduleIndex].currentState){
 8008fa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008fac:	4a38      	ldr	r2, [pc, #224]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008fae:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	3327      	adds	r3, #39	; 0x27
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d014      	beq.n	8008fea <MCU_ProcessModuleStatus1+0x242>
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	dc19      	bgt.n	8008ff8 <MCU_ProcessModuleStatus1+0x250>
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d002      	beq.n	8008fce <MCU_ProcessModuleStatus1+0x226>
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	d007      	beq.n	8008fdc <MCU_ProcessModuleStatus1+0x234>
 8008fcc:	e014      	b.n	8008ff8 <MCU_ProcessModuleStatus1+0x250>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 8008fce:	f107 031c 	add.w	r3, r7, #28
 8008fd2:	4935      	ldr	r1, [pc, #212]	; (80090a8 <MCU_ProcessModuleStatus1+0x300>)
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f00a f913 	bl	8013200 <siprintf>
 8008fda:	e01f      	b.n	800901c <MCU_ProcessModuleStatus1+0x274>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 8008fdc:	f107 031c 	add.w	r3, r7, #28
 8008fe0:	4932      	ldr	r1, [pc, #200]	; (80090ac <MCU_ProcessModuleStatus1+0x304>)
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f00a f90c 	bl	8013200 <siprintf>
 8008fe8:	e018      	b.n	800901c <MCU_ProcessModuleStatus1+0x274>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 8008fea:	f107 031c 	add.w	r3, r7, #28
 8008fee:	4930      	ldr	r1, [pc, #192]	; (80090b0 <MCU_ProcessModuleStatus1+0x308>)
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f00a f905 	bl	8013200 <siprintf>
 8008ff6:	e011      	b.n	800901c <MCU_ProcessModuleStatus1+0x274>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 8008ff8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008ffc:	4a24      	ldr	r2, [pc, #144]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8008ffe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009002:	fb01 f303 	mul.w	r3, r1, r3
 8009006:	4413      	add	r3, r2
 8009008:	3327      	adds	r3, #39	; 0x27
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	f107 031c 	add.w	r3, r7, #28
 8009012:	4928      	ldr	r1, [pc, #160]	; (80090b4 <MCU_ProcessModuleStatus1+0x30c>)
 8009014:	4618      	mov	r0, r3
 8009016:	f00a f8f3 	bl	8013200 <siprintf>
 800901a:	bf00      	nop
      switch (module[moduleIndex].status){
 800901c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009020:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <MCU_ProcessModuleStatus1+0x2e8>)
 8009022:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009026:	fb01 f303 	mul.w	r3, r1, r3
 800902a:	4413      	add	r3, r2
 800902c:	3326      	adds	r3, #38	; 0x26
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b03      	cmp	r3, #3
 8009032:	d847      	bhi.n	80090c4 <MCU_ProcessModuleStatus1+0x31c>
 8009034:	a201      	add	r2, pc, #4	; (adr r2, 800903c <MCU_ProcessModuleStatus1+0x294>)
 8009036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800903a:	bf00      	nop
 800903c:	0800904d 	.word	0x0800904d
 8009040:	0800905b 	.word	0x0800905b
 8009044:	08009069 	.word	0x08009069
 8009048:	08009077 	.word	0x08009077
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 800904c:	f107 030c 	add.w	r3, r7, #12
 8009050:	4915      	ldr	r1, [pc, #84]	; (80090a8 <MCU_ProcessModuleStatus1+0x300>)
 8009052:	4618      	mov	r0, r3
 8009054:	f00a f8d4 	bl	8013200 <siprintf>
 8009058:	e046      	b.n	80090e8 <MCU_ProcessModuleStatus1+0x340>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 800905a:	f107 030c 	add.w	r3, r7, #12
 800905e:	4916      	ldr	r1, [pc, #88]	; (80090b8 <MCU_ProcessModuleStatus1+0x310>)
 8009060:	4618      	mov	r0, r3
 8009062:	f00a f8cd 	bl	8013200 <siprintf>
 8009066:	e03f      	b.n	80090e8 <MCU_ProcessModuleStatus1+0x340>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 8009068:	f107 030c 	add.w	r3, r7, #12
 800906c:	4913      	ldr	r1, [pc, #76]	; (80090bc <MCU_ProcessModuleStatus1+0x314>)
 800906e:	4618      	mov	r0, r3
 8009070:	f00a f8c6 	bl	8013200 <siprintf>
 8009074:	e038      	b.n	80090e8 <MCU_ProcessModuleStatus1+0x340>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 8009076:	f107 030c 	add.w	r3, r7, #12
 800907a:	4911      	ldr	r1, [pc, #68]	; (80090c0 <MCU_ProcessModuleStatus1+0x318>)
 800907c:	4618      	mov	r0, r3
 800907e:	f00a f8bf 	bl	8013200 <siprintf>
 8009082:	e031      	b.n	80090e8 <MCU_ProcessModuleStatus1+0x340>
 8009084:	20000da0 	.word	0x20000da0
 8009088:	2000a664 	.word	0x2000a664
 800908c:	20000d94 	.word	0x20000d94
 8009090:	20000de4 	.word	0x20000de4
 8009094:	2000000c 	.word	0x2000000c
 8009098:	08017144 	.word	0x08017144
 800909c:	20000b64 	.word	0x20000b64
 80090a0:	200005d8 	.word	0x200005d8
 80090a4:	20000d20 	.word	0x20000d20
 80090a8:	08017184 	.word	0x08017184
 80090ac:	0801718c 	.word	0x0801718c
 80090b0:	08017198 	.word	0x08017198
 80090b4:	080171a0 	.word	0x080171a0
 80090b8:	080171ac 	.word	0x080171ac
 80090bc:	080171b8 	.word	0x080171b8
 80090c0:	080171c4 	.word	0x080171c4
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 80090c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090c8:	4a75      	ldr	r2, [pc, #468]	; (80092a0 <MCU_ProcessModuleStatus1+0x4f8>)
 80090ca:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090ce:	fb01 f303 	mul.w	r3, r1, r3
 80090d2:	4413      	add	r3, r2
 80090d4:	3326      	adds	r3, #38	; 0x26
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	461a      	mov	r2, r3
 80090da:	f107 030c 	add.w	r3, r7, #12
 80090de:	4971      	ldr	r1, [pc, #452]	; (80092a4 <MCU_ProcessModuleStatus1+0x4fc>)
 80090e0:	4618      	mov	r0, r3
 80090e2:	f00a f88d 	bl	8013200 <siprintf>
 80090e6:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 80090e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80090ec:	4a6c      	ldr	r2, [pc, #432]	; (80092a0 <MCU_ProcessModuleStatus1+0x4f8>)
 80090ee:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090f2:	fb01 f303 	mul.w	r3, r1, r3
 80090f6:	4413      	add	r3, r2
 80090f8:	3314      	adds	r3, #20
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f7f7 f9f3 	bl	80004e8 <__aeabi_i2d>
 8009102:	a361      	add	r3, pc, #388	; (adr r3, 8009288 <MCU_ProcessModuleStatus1+0x4e0>)
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f7f7 fa58 	bl	80005bc <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4610      	mov	r0, r2
 8009112:	4619      	mov	r1, r3
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	f04f 0300 	mov.w	r3, #0
 800911c:	f7f7 f898 	bl	8000250 <__adddf3>
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4610      	mov	r0, r2
 8009126:	4619      	mov	r1, r3
 8009128:	f7f7 fd40 	bl	8000bac <__aeabi_d2f>
 800912c:	4603      	mov	r3, r0
 800912e:	643b      	str	r3, [r7, #64]	; 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 8009130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009134:	4a5a      	ldr	r2, [pc, #360]	; (80092a0 <MCU_ProcessModuleStatus1+0x4f8>)
 8009136:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800913a:	fb01 f303 	mul.w	r3, r1, r3
 800913e:	4413      	add	r3, r2
 8009140:	3316      	adds	r3, #22
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f7f7 f9cf 	bl	80004e8 <__aeabi_i2d>
 800914a:	a351      	add	r3, pc, #324	; (adr r3, 8009290 <MCU_ProcessModuleStatus1+0x4e8>)
 800914c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009150:	f7f7 fa34 	bl	80005bc <__aeabi_dmul>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4610      	mov	r0, r2
 800915a:	4619      	mov	r1, r3
 800915c:	a34e      	add	r3, pc, #312	; (adr r3, 8009298 <MCU_ProcessModuleStatus1+0x4f0>)
 800915e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009162:	f7f7 f873 	bl	800024c <__aeabi_dsub>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4610      	mov	r0, r2
 800916c:	4619      	mov	r1, r3
 800916e:	f7f7 fd1d 	bl	8000bac <__aeabi_d2f>
 8009172:	4603      	mov	r3, r0
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 8009176:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800917a:	4a49      	ldr	r2, [pc, #292]	; (80092a0 <MCU_ProcessModuleStatus1+0x4f8>)
 800917c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009180:	fb01 f303 	mul.w	r3, r1, r3
 8009184:	4413      	add	r3, r2
 8009186:	332b      	adds	r3, #43	; 0x2b
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f7f7 f9ac 	bl	80004e8 <__aeabi_i2d>
 8009190:	f04f 0200 	mov.w	r2, #0
 8009194:	4b44      	ldr	r3, [pc, #272]	; (80092a8 <MCU_ProcessModuleStatus1+0x500>)
 8009196:	f7f7 fa11 	bl	80005bc <__aeabi_dmul>
 800919a:	4602      	mov	r2, r0
 800919c:	460b      	mov	r3, r1
 800919e:	4610      	mov	r0, r2
 80091a0:	4619      	mov	r1, r3
 80091a2:	f04f 0200 	mov.w	r2, #0
 80091a6:	f04f 0300 	mov.w	r3, #0
 80091aa:	f7f7 f851 	bl	8000250 <__adddf3>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4610      	mov	r0, r2
 80091b4:	4619      	mov	r1, r3
 80091b6:	f7f7 fcf9 	bl	8000bac <__aeabi_d2f>
 80091ba:	4603      	mov	r3, r0
 80091bc:	63bb      	str	r3, [r7, #56]	; 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 80091be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80091c2:	4a37      	ldr	r2, [pc, #220]	; (80092a0 <MCU_ProcessModuleStatus1+0x4f8>)
 80091c4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091c8:	fb01 f303 	mul.w	r3, r1, r3
 80091cc:	4413      	add	r3, r2
 80091ce:	332c      	adds	r3, #44	; 0x2c
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7f7 f988 	bl	80004e8 <__aeabi_i2d>
 80091d8:	f04f 0200 	mov.w	r2, #0
 80091dc:	4b32      	ldr	r3, [pc, #200]	; (80092a8 <MCU_ProcessModuleStatus1+0x500>)
 80091de:	f7f7 f9ed 	bl	80005bc <__aeabi_dmul>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	f04f 0200 	mov.w	r2, #0
 80091ee:	f04f 0300 	mov.w	r3, #0
 80091f2:	f7f7 f82d 	bl	8000250 <__adddf3>
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	4610      	mov	r0, r2
 80091fc:	4619      	mov	r1, r3
 80091fe:	f7f7 fcd5 	bl	8000bac <__aeabi_d2f>
 8009202:	4603      	mov	r3, r0
 8009204:	637b      	str	r3, [r7, #52]	; 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8009206:	4b29      	ldr	r3, [pc, #164]	; (80092ac <MCU_ProcessModuleStatus1+0x504>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 800920e:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8009210:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009214:	4a22      	ldr	r2, [pc, #136]	; (80092a0 <MCU_ProcessModuleStatus1+0x4f8>)
 8009216:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800921a:	fb01 f303 	mul.w	r3, r1, r3
 800921e:	4413      	add	r3, r2
 8009220:	332d      	adds	r3, #45	; 0x2d
 8009222:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 8009224:	461e      	mov	r6, r3
 8009226:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009228:	f7f7 f970 	bl	800050c <__aeabi_f2d>
 800922c:	4604      	mov	r4, r0
 800922e:	460d      	mov	r5, r1
 8009230:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009232:	f7f7 f96b 	bl	800050c <__aeabi_f2d>
 8009236:	4680      	mov	r8, r0
 8009238:	4689      	mov	r9, r1
 800923a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800923c:	f7f7 f966 	bl	800050c <__aeabi_f2d>
 8009240:	4682      	mov	sl, r0
 8009242:	468b      	mov	fp, r1
 8009244:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009246:	f7f7 f961 	bl	800050c <__aeabi_f2d>
 800924a:	4602      	mov	r2, r0
 800924c:	460b      	mov	r3, r1
 800924e:	f107 011c 	add.w	r1, r7, #28
 8009252:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009256:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800925a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800925e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009262:	9601      	str	r6, [sp, #4]
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	9300      	str	r3, [sp, #0]
 800926a:	460b      	mov	r3, r1
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	4910      	ldr	r1, [pc, #64]	; (80092b0 <MCU_ProcessModuleStatus1+0x508>)
 8009270:	4810      	ldr	r0, [pc, #64]	; (80092b4 <MCU_ProcessModuleStatus1+0x50c>)
 8009272:	f009 ffc5 	bl	8013200 <siprintf>
      serialOut(tempBuffer);
 8009276:	480f      	ldr	r0, [pc, #60]	; (80092b4 <MCU_ProcessModuleStatus1+0x50c>)
 8009278:	f7fc f872 	bl	8005360 <serialOut>
}
 800927c:	bf00      	nop
 800927e:	374c      	adds	r7, #76	; 0x4c
 8009280:	46bd      	mov	sp, r7
 8009282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009286:	bf00      	nop
 8009288:	eb851eb8 	.word	0xeb851eb8
 800928c:	3f8eb851 	.word	0x3f8eb851
 8009290:	47ae147b 	.word	0x47ae147b
 8009294:	3f947ae1 	.word	0x3f947ae1
 8009298:	47ae147b 	.word	0x47ae147b
 800929c:	40847ae1 	.word	0x40847ae1
 80092a0:	20000de4 	.word	0x20000de4
 80092a4:	080171a0 	.word	0x080171a0
 80092a8:	3fe00000 	.word	0x3fe00000
 80092ac:	20000d94 	.word	0x20000d94
 80092b0:	080171cc 	.word	0x080171cc
 80092b4:	20000b64 	.word	0x20000b64

080092b8 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	b091      	sub	sp, #68	; 0x44
 80092be:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 80092c0:	1d3b      	adds	r3, r7, #4
 80092c2:	2208      	movs	r2, #8
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f008 ff88 	bl	80121dc <memset>
  memcpy(&status2, rxd, sizeof(status2));
 80092cc:	4aaa      	ldr	r2, [pc, #680]	; (8009578 <MCU_ProcessModuleStatus2+0x2c0>)
 80092ce:	1d3b      	adds	r3, r7, #4
 80092d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80092d4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80092d8:	4ba8      	ldr	r3, [pc, #672]	; (800957c <MCU_ProcessModuleStatus2+0x2c4>)
 80092da:	7d1b      	ldrb	r3, [r3, #20]
 80092dc:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 80092de:	2300      	movs	r3, #0
 80092e0:	77bb      	strb	r3, [r7, #30]
 80092e2:	e015      	b.n	8009310 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80092e4:	4ba6      	ldr	r3, [pc, #664]	; (8009580 <MCU_ProcessModuleStatus2+0x2c8>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80092ec:	7fbb      	ldrb	r3, [r7, #30]
 80092ee:	49a5      	ldr	r1, [pc, #660]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 80092f0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80092f4:	fb00 f303 	mul.w	r3, r0, r3
 80092f8:	440b      	add	r3, r1
 80092fa:	3308      	adds	r3, #8
 80092fc:	781b      	ldrb	r3, [r3, #0]
 80092fe:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009302:	429a      	cmp	r2, r3
 8009304:	d101      	bne.n	800930a <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 8009306:	7fbb      	ldrb	r3, [r7, #30]
 8009308:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 800930a:	7fbb      	ldrb	r3, [r7, #30]
 800930c:	3301      	adds	r3, #1
 800930e:	77bb      	strb	r3, [r7, #30]
 8009310:	4b9a      	ldr	r3, [pc, #616]	; (800957c <MCU_ProcessModuleStatus2+0x2c4>)
 8009312:	7d1b      	ldrb	r3, [r3, #20]
 8009314:	7fba      	ldrb	r2, [r7, #30]
 8009316:	429a      	cmp	r2, r3
 8009318:	d3e4      	bcc.n	80092e4 <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 800931a:	4b98      	ldr	r3, [pc, #608]	; (800957c <MCU_ProcessModuleStatus2+0x2c4>)
 800931c:	7d1b      	ldrb	r3, [r3, #20]
 800931e:	7ffa      	ldrb	r2, [r7, #31]
 8009320:	429a      	cmp	r2, r3
 8009322:	d10e      	bne.n	8009342 <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 8009324:	4b98      	ldr	r3, [pc, #608]	; (8009588 <MCU_ProcessModuleStatus2+0x2d0>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	f003 0303 	and.w	r3, r3, #3
 800932c:	2b03      	cmp	r3, #3
 800932e:	f040 8114 	bne.w	800955a <MCU_ProcessModuleStatus2+0x2a2>
 8009332:	4996      	ldr	r1, [pc, #600]	; (800958c <MCU_ProcessModuleStatus2+0x2d4>)
 8009334:	4896      	ldr	r0, [pc, #600]	; (8009590 <MCU_ProcessModuleStatus2+0x2d8>)
 8009336:	f009 ff63 	bl	8013200 <siprintf>
 800933a:	4895      	ldr	r0, [pc, #596]	; (8009590 <MCU_ProcessModuleStatus2+0x2d8>)
 800933c:	f7fc f810 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 8009340:	e10b      	b.n	800955a <MCU_ProcessModuleStatus2+0x2a2>
    module[moduleIndex].statusPending = false;
 8009342:	7ffb      	ldrb	r3, [r7, #31]
 8009344:	4a8f      	ldr	r2, [pc, #572]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 8009346:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800934a:	fb01 f303 	mul.w	r3, r1, r3
 800934e:	4413      	add	r3, r2
 8009350:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009354:	2200      	movs	r2, #0
 8009356:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 8009358:	7ffb      	ldrb	r3, [r7, #31]
 800935a:	8938      	ldrh	r0, [r7, #8]
 800935c:	4a89      	ldr	r2, [pc, #548]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 800935e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009362:	fb01 f303 	mul.w	r3, r1, r3
 8009366:	4413      	add	r3, r2
 8009368:	3322      	adds	r3, #34	; 0x22
 800936a:	4602      	mov	r2, r0
 800936c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 800936e:	7ffb      	ldrb	r3, [r7, #31]
 8009370:	88f8      	ldrh	r0, [r7, #6]
 8009372:	4a84      	ldr	r2, [pc, #528]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 8009374:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009378:	fb01 f303 	mul.w	r3, r1, r3
 800937c:	4413      	add	r3, r2
 800937e:	331e      	adds	r3, #30
 8009380:	4602      	mov	r2, r0
 8009382:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 8009384:	7ffb      	ldrb	r3, [r7, #31]
 8009386:	88b8      	ldrh	r0, [r7, #4]
 8009388:	4a7e      	ldr	r2, [pc, #504]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 800938a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800938e:	fb01 f303 	mul.w	r3, r1, r3
 8009392:	4413      	add	r3, r2
 8009394:	3320      	adds	r3, #32
 8009396:	4602      	mov	r2, r0
 8009398:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 800939a:	7ffb      	ldrb	r3, [r7, #31]
 800939c:	8978      	ldrh	r0, [r7, #10]
 800939e:	4a79      	ldr	r2, [pc, #484]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 80093a0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80093a4:	fb01 f303 	mul.w	r3, r1, r3
 80093a8:	4413      	add	r3, r2
 80093aa:	3324      	adds	r3, #36	; 0x24
 80093ac:	4602      	mov	r2, r0
 80093ae:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80093b0:	4b78      	ldr	r3, [pc, #480]	; (8009594 <MCU_ProcessModuleStatus2+0x2dc>)
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	7ffb      	ldrb	r3, [r7, #31]
 80093b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80093b8:	4972      	ldr	r1, [pc, #456]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 80093ba:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80093be:	fb00 f303 	mul.w	r3, r0, r3
 80093c2:	440b      	add	r3, r1
 80093c4:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80093c8:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
 80093cc:	4a72      	ldr	r2, [pc, #456]	; (8009598 <MCU_ProcessModuleStatus2+0x2e0>)
 80093ce:	6812      	ldr	r2, [r2, #0]
 80093d0:	496c      	ldr	r1, [pc, #432]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 80093d2:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80093d6:	fb00 f303 	mul.w	r3, r0, r3
 80093da:	440b      	add	r3, r1
 80093dc:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80093e0:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 80093e2:	4b69      	ldr	r3, [pc, #420]	; (8009588 <MCU_ProcessModuleStatus2+0x2d0>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	f003 0302 	and.w	r3, r3, #2
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	f000 80b5 	beq.w	800955a <MCU_ProcessModuleStatus2+0x2a2>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 80093f0:	7ffb      	ldrb	r3, [r7, #31]
 80093f2:	4a64      	ldr	r2, [pc, #400]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 80093f4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	4413      	add	r3, r2
 80093fe:	3322      	adds	r3, #34	; 0x22
 8009400:	881b      	ldrh	r3, [r3, #0]
 8009402:	4618      	mov	r0, r3
 8009404:	f7f7 f870 	bl	80004e8 <__aeabi_i2d>
 8009408:	a357      	add	r3, pc, #348	; (adr r3, 8009568 <MCU_ProcessModuleStatus2+0x2b0>)
 800940a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940e:	f7f7 f8d5 	bl	80005bc <__aeabi_dmul>
 8009412:	4602      	mov	r2, r0
 8009414:	460b      	mov	r3, r1
 8009416:	4610      	mov	r0, r2
 8009418:	4619      	mov	r1, r3
 800941a:	f04f 0200 	mov.w	r2, #0
 800941e:	f04f 0300 	mov.w	r3, #0
 8009422:	f7f6 ff15 	bl	8000250 <__adddf3>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4610      	mov	r0, r2
 800942c:	4619      	mov	r1, r3
 800942e:	f7f7 fbbd 	bl	8000bac <__aeabi_d2f>
 8009432:	4603      	mov	r3, r0
 8009434:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 8009436:	7ffb      	ldrb	r3, [r7, #31]
 8009438:	4a52      	ldr	r2, [pc, #328]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 800943a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800943e:	fb01 f303 	mul.w	r3, r1, r3
 8009442:	4413      	add	r3, r2
 8009444:	331e      	adds	r3, #30
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	4618      	mov	r0, r3
 800944a:	f7f7 f84d 	bl	80004e8 <__aeabi_i2d>
 800944e:	a346      	add	r3, pc, #280	; (adr r3, 8009568 <MCU_ProcessModuleStatus2+0x2b0>)
 8009450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009454:	f7f7 f8b2 	bl	80005bc <__aeabi_dmul>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	4610      	mov	r0, r2
 800945e:	4619      	mov	r1, r3
 8009460:	f04f 0200 	mov.w	r2, #0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	f7f6 fef2 	bl	8000250 <__adddf3>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4610      	mov	r0, r2
 8009472:	4619      	mov	r1, r3
 8009474:	f7f7 fb9a 	bl	8000bac <__aeabi_d2f>
 8009478:	4603      	mov	r3, r0
 800947a:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 800947c:	7ffb      	ldrb	r3, [r7, #31]
 800947e:	4a41      	ldr	r2, [pc, #260]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 8009480:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009484:	fb01 f303 	mul.w	r3, r1, r3
 8009488:	4413      	add	r3, r2
 800948a:	3320      	adds	r3, #32
 800948c:	881b      	ldrh	r3, [r3, #0]
 800948e:	4618      	mov	r0, r3
 8009490:	f7f7 f82a 	bl	80004e8 <__aeabi_i2d>
 8009494:	a334      	add	r3, pc, #208	; (adr r3, 8009568 <MCU_ProcessModuleStatus2+0x2b0>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f7 f88f 	bl	80005bc <__aeabi_dmul>
 800949e:	4602      	mov	r2, r0
 80094a0:	460b      	mov	r3, r1
 80094a2:	4610      	mov	r0, r2
 80094a4:	4619      	mov	r1, r3
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	f04f 0300 	mov.w	r3, #0
 80094ae:	f7f6 fecf 	bl	8000250 <__adddf3>
 80094b2:	4602      	mov	r2, r0
 80094b4:	460b      	mov	r3, r1
 80094b6:	4610      	mov	r0, r2
 80094b8:	4619      	mov	r1, r3
 80094ba:	f7f7 fb77 	bl	8000bac <__aeabi_d2f>
 80094be:	4603      	mov	r3, r0
 80094c0:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 80094c2:	7ffb      	ldrb	r3, [r7, #31]
 80094c4:	4a2f      	ldr	r2, [pc, #188]	; (8009584 <MCU_ProcessModuleStatus2+0x2cc>)
 80094c6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80094ca:	fb01 f303 	mul.w	r3, r1, r3
 80094ce:	4413      	add	r3, r2
 80094d0:	3324      	adds	r3, #36	; 0x24
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7f7 f807 	bl	80004e8 <__aeabi_i2d>
 80094da:	a325      	add	r3, pc, #148	; (adr r3, 8009570 <MCU_ProcessModuleStatus2+0x2b8>)
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f7f7 f86c 	bl	80005bc <__aeabi_dmul>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4610      	mov	r0, r2
 80094ea:	4619      	mov	r1, r3
 80094ec:	f04f 0200 	mov.w	r2, #0
 80094f0:	f04f 0300 	mov.w	r3, #0
 80094f4:	f7f6 feac 	bl	8000250 <__adddf3>
 80094f8:	4602      	mov	r2, r0
 80094fa:	460b      	mov	r3, r1
 80094fc:	4610      	mov	r0, r2
 80094fe:	4619      	mov	r1, r3
 8009500:	f7f7 fb54 	bl	8000bac <__aeabi_d2f>
 8009504:	4603      	mov	r3, r0
 8009506:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 8009508:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <MCU_ProcessModuleStatus2+0x2c8>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 8009510:	461e      	mov	r6, r3
 8009512:	69b8      	ldr	r0, [r7, #24]
 8009514:	f7f6 fffa 	bl	800050c <__aeabi_f2d>
 8009518:	4604      	mov	r4, r0
 800951a:	460d      	mov	r5, r1
 800951c:	6978      	ldr	r0, [r7, #20]
 800951e:	f7f6 fff5 	bl	800050c <__aeabi_f2d>
 8009522:	4680      	mov	r8, r0
 8009524:	4689      	mov	r9, r1
 8009526:	6938      	ldr	r0, [r7, #16]
 8009528:	f7f6 fff0 	bl	800050c <__aeabi_f2d>
 800952c:	4682      	mov	sl, r0
 800952e:	468b      	mov	fp, r1
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7f6 ffeb 	bl	800050c <__aeabi_f2d>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800953e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8009542:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009546:	e9cd 4500 	strd	r4, r5, [sp]
 800954a:	4632      	mov	r2, r6
 800954c:	4913      	ldr	r1, [pc, #76]	; (800959c <MCU_ProcessModuleStatus2+0x2e4>)
 800954e:	4810      	ldr	r0, [pc, #64]	; (8009590 <MCU_ProcessModuleStatus2+0x2d8>)
 8009550:	f009 fe56 	bl	8013200 <siprintf>
      serialOut(tempBuffer);
 8009554:	480e      	ldr	r0, [pc, #56]	; (8009590 <MCU_ProcessModuleStatus2+0x2d8>)
 8009556:	f7fb ff03 	bl	8005360 <serialOut>
}
 800955a:	bf00      	nop
 800955c:	3724      	adds	r7, #36	; 0x24
 800955e:	46bd      	mov	sp, r7
 8009560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009564:	f3af 8000 	nop.w
 8009568:	d2f1a9fc 	.word	0xd2f1a9fc
 800956c:	3f50624d 	.word	0x3f50624d
 8009570:	eb851eb8 	.word	0xeb851eb8
 8009574:	3f8eb851 	.word	0x3f8eb851
 8009578:	20000da0 	.word	0x20000da0
 800957c:	2000a664 	.word	0x2000a664
 8009580:	20000d94 	.word	0x20000d94
 8009584:	20000de4 	.word	0x20000de4
 8009588:	2000000c 	.word	0x2000000c
 800958c:	0801724c 	.word	0x0801724c
 8009590:	20000b64 	.word	0x20000b64
 8009594:	200005d8 	.word	0x200005d8
 8009598:	20000d20 	.word	0x20000d20
 800959c:	0801728c 	.word	0x0801728c

080095a0 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 80095a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095a4:	b08d      	sub	sp, #52	; 0x34
 80095a6:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 80095a8:	463b      	mov	r3, r7
 80095aa:	2208      	movs	r2, #8
 80095ac:	2100      	movs	r1, #0
 80095ae:	4618      	mov	r0, r3
 80095b0:	f008 fe14 	bl	80121dc <memset>
  memcpy(&status3, rxd, sizeof(status3));
 80095b4:	4a8e      	ldr	r2, [pc, #568]	; (80097f0 <MCU_ProcessModuleStatus3+0x250>)
 80095b6:	463b      	mov	r3, r7
 80095b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80095bc:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 80095c0:	4b8c      	ldr	r3, [pc, #560]	; (80097f4 <MCU_ProcessModuleStatus3+0x254>)
 80095c2:	7d1b      	ldrb	r3, [r3, #20]
 80095c4:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80095c6:	2300      	movs	r3, #0
 80095c8:	75bb      	strb	r3, [r7, #22]
 80095ca:	e015      	b.n	80095f8 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80095cc:	4b8a      	ldr	r3, [pc, #552]	; (80097f8 <MCU_ProcessModuleStatus3+0x258>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80095d4:	7dbb      	ldrb	r3, [r7, #22]
 80095d6:	4989      	ldr	r1, [pc, #548]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 80095d8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80095dc:	fb00 f303 	mul.w	r3, r0, r3
 80095e0:	440b      	add	r3, r1
 80095e2:	3308      	adds	r3, #8
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d101      	bne.n	80095f2 <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 80095ee:	7dbb      	ldrb	r3, [r7, #22]
 80095f0:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80095f2:	7dbb      	ldrb	r3, [r7, #22]
 80095f4:	3301      	adds	r3, #1
 80095f6:	75bb      	strb	r3, [r7, #22]
 80095f8:	4b7e      	ldr	r3, [pc, #504]	; (80097f4 <MCU_ProcessModuleStatus3+0x254>)
 80095fa:	7d1b      	ldrb	r3, [r3, #20]
 80095fc:	7dba      	ldrb	r2, [r7, #22]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d3e4      	bcc.n	80095cc <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 8009602:	4b7c      	ldr	r3, [pc, #496]	; (80097f4 <MCU_ProcessModuleStatus3+0x254>)
 8009604:	7d1b      	ldrb	r3, [r3, #20]
 8009606:	7dfa      	ldrb	r2, [r7, #23]
 8009608:	429a      	cmp	r2, r3
 800960a:	d10e      	bne.n	800962a <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 800960c:	4b7c      	ldr	r3, [pc, #496]	; (8009800 <MCU_ProcessModuleStatus3+0x260>)
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	f003 0303 	and.w	r3, r3, #3
 8009614:	2b03      	cmp	r3, #3
 8009616:	f040 80dc 	bne.w	80097d2 <MCU_ProcessModuleStatus3+0x232>
 800961a:	497a      	ldr	r1, [pc, #488]	; (8009804 <MCU_ProcessModuleStatus3+0x264>)
 800961c:	487a      	ldr	r0, [pc, #488]	; (8009808 <MCU_ProcessModuleStatus3+0x268>)
 800961e:	f009 fdef 	bl	8013200 <siprintf>
 8009622:	4879      	ldr	r0, [pc, #484]	; (8009808 <MCU_ProcessModuleStatus3+0x268>)
 8009624:	f7fb fe9c 	bl	8005360 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 8009628:	e0d3      	b.n	80097d2 <MCU_ProcessModuleStatus3+0x232>
    module[moduleIndex].statusPending = false;
 800962a:	7dfb      	ldrb	r3, [r7, #23]
 800962c:	4a73      	ldr	r2, [pc, #460]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 800962e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 800963c:	2200      	movs	r2, #0
 800963e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	88b8      	ldrh	r0, [r7, #4]
 8009644:	4a6d      	ldr	r2, [pc, #436]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 8009646:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800964a:	fb01 f303 	mul.w	r3, r1, r3
 800964e:	4413      	add	r3, r2
 8009650:	331c      	adds	r3, #28
 8009652:	4602      	mov	r2, r0
 8009654:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	8878      	ldrh	r0, [r7, #2]
 800965a:	4a68      	ldr	r2, [pc, #416]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 800965c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009660:	fb01 f303 	mul.w	r3, r1, r3
 8009664:	4413      	add	r3, r2
 8009666:	3318      	adds	r3, #24
 8009668:	4602      	mov	r2, r0
 800966a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
 800966e:	8838      	ldrh	r0, [r7, #0]
 8009670:	4a62      	ldr	r2, [pc, #392]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 8009672:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009676:	fb01 f303 	mul.w	r3, r1, r3
 800967a:	4413      	add	r3, r2
 800967c:	331a      	adds	r3, #26
 800967e:	4602      	mov	r2, r0
 8009680:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009682:	4b62      	ldr	r3, [pc, #392]	; (800980c <MCU_ProcessModuleStatus3+0x26c>)
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	7dfb      	ldrb	r3, [r7, #23]
 8009688:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800968a:	495c      	ldr	r1, [pc, #368]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 800968c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009690:	fb00 f303 	mul.w	r3, r0, r3
 8009694:	440b      	add	r3, r1
 8009696:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800969a:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800969c:	7dfb      	ldrb	r3, [r7, #23]
 800969e:	4a5c      	ldr	r2, [pc, #368]	; (8009810 <MCU_ProcessModuleStatus3+0x270>)
 80096a0:	6812      	ldr	r2, [r2, #0]
 80096a2:	4956      	ldr	r1, [pc, #344]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 80096a4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80096a8:	fb00 f303 	mul.w	r3, r0, r3
 80096ac:	440b      	add	r3, r1
 80096ae:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80096b2:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 80096b4:	4b52      	ldr	r3, [pc, #328]	; (8009800 <MCU_ProcessModuleStatus3+0x260>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	f003 0302 	and.w	r3, r3, #2
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8088 	beq.w	80097d2 <MCU_ProcessModuleStatus3+0x232>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 80096c2:	7dfb      	ldrb	r3, [r7, #23]
 80096c4:	4a4d      	ldr	r2, [pc, #308]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 80096c6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80096ca:	fb01 f303 	mul.w	r3, r1, r3
 80096ce:	4413      	add	r3, r2
 80096d0:	331c      	adds	r3, #28
 80096d2:	881b      	ldrh	r3, [r3, #0]
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7f6 ff07 	bl	80004e8 <__aeabi_i2d>
 80096da:	a341      	add	r3, pc, #260	; (adr r3, 80097e0 <MCU_ProcessModuleStatus3+0x240>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	f7f6 ff6c 	bl	80005bc <__aeabi_dmul>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4610      	mov	r0, r2
 80096ea:	4619      	mov	r1, r3
 80096ec:	a33e      	add	r3, pc, #248	; (adr r3, 80097e8 <MCU_ProcessModuleStatus3+0x248>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 fdab 	bl	800024c <__aeabi_dsub>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4610      	mov	r0, r2
 80096fc:	4619      	mov	r1, r3
 80096fe:	f7f7 fa55 	bl	8000bac <__aeabi_d2f>
 8009702:	4603      	mov	r3, r0
 8009704:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 8009706:	7dfb      	ldrb	r3, [r7, #23]
 8009708:	4a3c      	ldr	r2, [pc, #240]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 800970a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800970e:	fb01 f303 	mul.w	r3, r1, r3
 8009712:	4413      	add	r3, r2
 8009714:	3318      	adds	r3, #24
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	4618      	mov	r0, r3
 800971a:	f7f6 fee5 	bl	80004e8 <__aeabi_i2d>
 800971e:	a330      	add	r3, pc, #192	; (adr r3, 80097e0 <MCU_ProcessModuleStatus3+0x240>)
 8009720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009724:	f7f6 ff4a 	bl	80005bc <__aeabi_dmul>
 8009728:	4602      	mov	r2, r0
 800972a:	460b      	mov	r3, r1
 800972c:	4610      	mov	r0, r2
 800972e:	4619      	mov	r1, r3
 8009730:	a32d      	add	r3, pc, #180	; (adr r3, 80097e8 <MCU_ProcessModuleStatus3+0x248>)
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	f7f6 fd89 	bl	800024c <__aeabi_dsub>
 800973a:	4602      	mov	r2, r0
 800973c:	460b      	mov	r3, r1
 800973e:	4610      	mov	r0, r2
 8009740:	4619      	mov	r1, r3
 8009742:	f7f7 fa33 	bl	8000bac <__aeabi_d2f>
 8009746:	4603      	mov	r3, r0
 8009748:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	4a2b      	ldr	r2, [pc, #172]	; (80097fc <MCU_ProcessModuleStatus3+0x25c>)
 800974e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009752:	fb01 f303 	mul.w	r3, r1, r3
 8009756:	4413      	add	r3, r2
 8009758:	331a      	adds	r3, #26
 800975a:	881b      	ldrh	r3, [r3, #0]
 800975c:	4618      	mov	r0, r3
 800975e:	f7f6 fec3 	bl	80004e8 <__aeabi_i2d>
 8009762:	a31f      	add	r3, pc, #124	; (adr r3, 80097e0 <MCU_ProcessModuleStatus3+0x240>)
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f7f6 ff28 	bl	80005bc <__aeabi_dmul>
 800976c:	4602      	mov	r2, r0
 800976e:	460b      	mov	r3, r1
 8009770:	4610      	mov	r0, r2
 8009772:	4619      	mov	r1, r3
 8009774:	a31c      	add	r3, pc, #112	; (adr r3, 80097e8 <MCU_ProcessModuleStatus3+0x248>)
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	f7f6 fd67 	bl	800024c <__aeabi_dsub>
 800977e:	4602      	mov	r2, r0
 8009780:	460b      	mov	r3, r1
 8009782:	4610      	mov	r0, r2
 8009784:	4619      	mov	r1, r3
 8009786:	f7f7 fa11 	bl	8000bac <__aeabi_d2f>
 800978a:	4603      	mov	r3, r0
 800978c:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 800978e:	4b1a      	ldr	r3, [pc, #104]	; (80097f8 <MCU_ProcessModuleStatus3+0x258>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 8009796:	461e      	mov	r6, r3
 8009798:	6938      	ldr	r0, [r7, #16]
 800979a:	f7f6 feb7 	bl	800050c <__aeabi_f2d>
 800979e:	4604      	mov	r4, r0
 80097a0:	460d      	mov	r5, r1
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7f6 feb2 	bl	800050c <__aeabi_f2d>
 80097a8:	4680      	mov	r8, r0
 80097aa:	4689      	mov	r9, r1
 80097ac:	68b8      	ldr	r0, [r7, #8]
 80097ae:	f7f6 fead 	bl	800050c <__aeabi_f2d>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097ba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80097be:	e9cd 4500 	strd	r4, r5, [sp]
 80097c2:	4632      	mov	r2, r6
 80097c4:	4913      	ldr	r1, [pc, #76]	; (8009814 <MCU_ProcessModuleStatus3+0x274>)
 80097c6:	4810      	ldr	r0, [pc, #64]	; (8009808 <MCU_ProcessModuleStatus3+0x268>)
 80097c8:	f009 fd1a 	bl	8013200 <siprintf>
      serialOut(tempBuffer);
 80097cc:	480e      	ldr	r0, [pc, #56]	; (8009808 <MCU_ProcessModuleStatus3+0x268>)
 80097ce:	f7fb fdc7 	bl	8005360 <serialOut>
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097dc:	f3af 8000 	nop.w
 80097e0:	47ae147b 	.word	0x47ae147b
 80097e4:	3f847ae1 	.word	0x3f847ae1
 80097e8:	cccccccd 	.word	0xcccccccd
 80097ec:	404baccc 	.word	0x404baccc
 80097f0:	20000da0 	.word	0x20000da0
 80097f4:	2000a664 	.word	0x2000a664
 80097f8:	20000d94 	.word	0x20000d94
 80097fc:	20000de4 	.word	0x20000de4
 8009800:	2000000c 	.word	0x2000000c
 8009804:	0801731c 	.word	0x0801731c
 8009808:	20000b64 	.word	0x20000b64
 800980c:	200005d8 	.word	0x200005d8
 8009810:	20000d20 	.word	0x20000d20
 8009814:	0801735c 	.word	0x0801735c

08009818 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 8009818:	b580      	push	{r7, lr}
 800981a:	b094      	sub	sp, #80	; 0x50
 800981c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800981e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009822:	2208      	movs	r2, #8
 8009824:	2100      	movs	r1, #0
 8009826:	4618      	mov	r0, r3
 8009828:	f008 fcd8 	bl	80121dc <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800982c:	4a31      	ldr	r2, [pc, #196]	; (80098f4 <MCU_ProcessCellCommStatus1+0xdc>)
 800982e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009832:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009836:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800983a:	4b2f      	ldr	r3, [pc, #188]	; (80098f8 <MCU_ProcessCellCommStatus1+0xe0>)
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	f003 0302 	and.w	r3, r3, #2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d052      	beq.n	80098ec <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 8009846:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800984a:	2bff      	cmp	r3, #255	; 0xff
 800984c:	d10a      	bne.n	8009864 <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800984e:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 8009852:	2b00      	cmp	r3, #0
 8009854:	d106      	bne.n	8009864 <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 8009856:	f107 0318 	add.w	r3, r7, #24
 800985a:	4928      	ldr	r1, [pc, #160]	; (80098fc <MCU_ProcessCellCommStatus1+0xe4>)
 800985c:	4618      	mov	r0, r3
 800985e:	f009 fccf 	bl	8013200 <siprintf>
 8009862:	e019      	b.n	8009898 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 8009864:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009868:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800986c:	429a      	cmp	r2, r3
 800986e:	d109      	bne.n	8009884 <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 8009870:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009874:	461a      	mov	r2, r3
 8009876:	f107 0318 	add.w	r3, r7, #24
 800987a:	4921      	ldr	r1, [pc, #132]	; (8009900 <MCU_ProcessCellCommStatus1+0xe8>)
 800987c:	4618      	mov	r0, r3
 800987e:	f009 fcbf 	bl	8013200 <siprintf>
 8009882:	e009      	b.n	8009898 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 8009884:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8009888:	461a      	mov	r2, r3
 800988a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800988e:	f107 0018 	add.w	r0, r7, #24
 8009892:	491c      	ldr	r1, [pc, #112]	; (8009904 <MCU_ProcessCellCommStatus1+0xec>)
 8009894:	f009 fcb4 	bl	8013200 <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 8009898:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800989c:	2bff      	cmp	r3, #255	; 0xff
 800989e:	d105      	bne.n	80098ac <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 80098a0:	1d3b      	adds	r3, r7, #4
 80098a2:	4919      	ldr	r1, [pc, #100]	; (8009908 <MCU_ProcessCellCommStatus1+0xf0>)
 80098a4:	4618      	mov	r0, r3
 80098a6:	f009 fcab 	bl	8013200 <siprintf>
 80098aa:	e007      	b.n	80098bc <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 80098ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80098b0:	461a      	mov	r2, r3
 80098b2:	1d3b      	adds	r3, r7, #4
 80098b4:	4915      	ldr	r1, [pc, #84]	; (800990c <MCU_ProcessCellCommStatus1+0xf4>)
 80098b6:	4618      	mov	r0, r3
 80098b8:	f009 fca2 	bl	8013200 <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 80098bc:	4b14      	ldr	r3, [pc, #80]	; (8009910 <MCU_ProcessCellCommStatus1+0xf8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 80098c4:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 80098c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 80098c8:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 80098ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 80098ce:	f107 0218 	add.w	r2, r7, #24
 80098d2:	9302      	str	r3, [sp, #8]
 80098d4:	1d3b      	adds	r3, r7, #4
 80098d6:	9301      	str	r3, [sp, #4]
 80098d8:	9100      	str	r1, [sp, #0]
 80098da:	4613      	mov	r3, r2
 80098dc:	4602      	mov	r2, r0
 80098de:	490d      	ldr	r1, [pc, #52]	; (8009914 <MCU_ProcessCellCommStatus1+0xfc>)
 80098e0:	480d      	ldr	r0, [pc, #52]	; (8009918 <MCU_ProcessCellCommStatus1+0x100>)
 80098e2:	f009 fc8d 	bl	8013200 <siprintf>

    serialOut(tempBuffer);
 80098e6:	480c      	ldr	r0, [pc, #48]	; (8009918 <MCU_ProcessCellCommStatus1+0x100>)
 80098e8:	f7fb fd3a 	bl	8005360 <serialOut>
  }
}
 80098ec:	bf00      	nop
 80098ee:	3740      	adds	r7, #64	; 0x40
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	20000da0 	.word	0x20000da0
 80098f8:	2000000c 	.word	0x2000000c
 80098fc:	080173c8 	.word	0x080173c8
 8009900:	080173d4 	.word	0x080173d4
 8009904:	080173e0 	.word	0x080173e0
 8009908:	080173ec 	.word	0x080173ec
 800990c:	080173f4 	.word	0x080173f4
 8009910:	20000d94 	.word	0x20000d94
 8009914:	08017408 	.word	0x08017408
 8009918:	20000b64 	.word	0x20000b64
 800991c:	00000000 	.word	0x00000000

08009920 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 8009920:	b5b0      	push	{r4, r5, r7, lr}
 8009922:	b086      	sub	sp, #24
 8009924:	af02      	add	r7, sp, #8
 8009926:	4603      	mov	r3, r0
 8009928:	460a      	mov	r2, r1
 800992a:	71fb      	strb	r3, [r7, #7]
 800992c:	4613      	mov	r3, r2
 800992e:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // request cell detail packet for cell 0
  stateChange.moduleId = moduleId;
 8009930:	79fb      	ldrb	r3, [r7, #7]
 8009932:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 8009934:	79bb      	ldrb	r3, [r7, #6]
 8009936:	f003 030f 	and.w	r3, r3, #15
 800993a:	b2da      	uxtb	r2, r3
 800993c:	7a7b      	ldrb	r3, [r7, #9]
 800993e:	f362 0303 	bfi	r3, r2, #0, #4
 8009942:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 8009944:	7a7b      	ldrb	r3, [r7, #9]
 8009946:	f36f 1307 	bfc	r3, #4, #4
 800994a:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 800994c:	4b4c      	ldr	r3, [pc, #304]	; (8009a80 <MCU_TransmitState+0x160>)
 800994e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009952:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 8009954:	4b4b      	ldr	r3, [pc, #300]	; (8009a84 <MCU_TransmitState+0x164>)
 8009956:	2200      	movs	r2, #0
 8009958:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800995a:	4b4a      	ldr	r3, [pc, #296]	; (8009a84 <MCU_TransmitState+0x164>)
 800995c:	2200      	movs	r2, #0
 800995e:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8009960:	4b48      	ldr	r3, [pc, #288]	; (8009a84 <MCU_TransmitState+0x164>)
 8009962:	2200      	movs	r2, #0
 8009964:	609a      	str	r2, [r3, #8]
 8009966:	68bb      	ldr	r3, [r7, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 8009968:	4a47      	ldr	r2, [pc, #284]	; (8009a88 <MCU_TransmitState+0x168>)
 800996a:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 800996c:	4a45      	ldr	r2, [pc, #276]	; (8009a84 <MCU_TransmitState+0x164>)
 800996e:	8813      	ldrh	r3, [r2, #0]
 8009970:	f240 5114 	movw	r1, #1300	; 0x514
 8009974:	f361 030a 	bfi	r3, r1, #0, #11
 8009978:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 800997a:	79fa      	ldrb	r2, [r7, #7]
 800997c:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8009980:	4940      	ldr	r1, [pc, #256]	; (8009a84 <MCU_TransmitState+0x164>)
 8009982:	680b      	ldr	r3, [r1, #0]
 8009984:	f362 23dc 	bfi	r3, r2, #11, #18
 8009988:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800998a:	4a3e      	ldr	r2, [pc, #248]	; (8009a84 <MCU_TransmitState+0x164>)
 800998c:	7913      	ldrb	r3, [r2, #4]
 800998e:	f36f 1386 	bfc	r3, #6, #1
 8009992:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 8009994:	4a3b      	ldr	r2, [pc, #236]	; (8009a84 <MCU_TransmitState+0x164>)
 8009996:	7913      	ldrb	r3, [r2, #4]
 8009998:	2104      	movs	r1, #4
 800999a:	f361 0303 	bfi	r3, r1, #0, #4
 800999e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80099a0:	4a38      	ldr	r2, [pc, #224]	; (8009a84 <MCU_TransmitState+0x164>)
 80099a2:	7913      	ldrb	r3, [r2, #4]
 80099a4:	f36f 13c7 	bfc	r3, #7, #1
 80099a8:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 80099aa:	4a36      	ldr	r2, [pc, #216]	; (8009a84 <MCU_TransmitState+0x164>)
 80099ac:	7913      	ldrb	r3, [r2, #4]
 80099ae:	f043 0310 	orr.w	r3, r3, #16
 80099b2:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 80099b4:	4b35      	ldr	r3, [pc, #212]	; (8009a8c <MCU_TransmitState+0x16c>)
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	f003 0302 	and.w	r3, r3, #2
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d019      	beq.n	80099f4 <MCU_TransmitState+0xd4>
 80099c0:	79fc      	ldrb	r4, [r7, #7]
 80099c2:	79bd      	ldrb	r5, [r7, #6]
 80099c4:	4b2e      	ldr	r3, [pc, #184]	; (8009a80 <MCU_TransmitState+0x160>)
 80099c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7f6 fd8c 	bl	80004e8 <__aeabi_i2d>
 80099d0:	a329      	add	r3, pc, #164	; (adr r3, 8009a78 <MCU_TransmitState+0x158>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fdf1 	bl	80005bc <__aeabi_dmul>
 80099da:	4602      	mov	r2, r0
 80099dc:	460b      	mov	r3, r1
 80099de:	e9cd 2300 	strd	r2, r3, [sp]
 80099e2:	462b      	mov	r3, r5
 80099e4:	4622      	mov	r2, r4
 80099e6:	492a      	ldr	r1, [pc, #168]	; (8009a90 <MCU_TransmitState+0x170>)
 80099e8:	482a      	ldr	r0, [pc, #168]	; (8009a94 <MCU_TransmitState+0x174>)
 80099ea:	f009 fc09 	bl	8013200 <siprintf>
 80099ee:	4829      	ldr	r0, [pc, #164]	; (8009a94 <MCU_TransmitState+0x174>)
 80099f0:	f7fb fcb6 	bl	8005360 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 80099f4:	2001      	movs	r0, #1
 80099f6:	f7fe fa31 	bl	8007e5c <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 f979 	bl	8009cf4 <MCU_ModuleIndexFromId>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 8009a06:	4b1e      	ldr	r3, [pc, #120]	; (8009a80 <MCU_TransmitState+0x160>)
 8009a08:	7d1b      	ldrb	r3, [r3, #20]
 8009a0a:	7bfa      	ldrb	r2, [r7, #15]
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d02c      	beq.n	8009a6a <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 8009a10:	7bfb      	ldrb	r3, [r7, #15]
 8009a12:	4a21      	ldr	r2, [pc, #132]	; (8009a98 <MCU_TransmitState+0x178>)
 8009a14:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009a18:	fb01 f303 	mul.w	r3, r1, r3
 8009a1c:	4413      	add	r3, r2
 8009a1e:	3329      	adds	r3, #41	; 0x29
 8009a20:	79ba      	ldrb	r2, [r7, #6]
 8009a22:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	4a1c      	ldr	r2, [pc, #112]	; (8009a98 <MCU_TransmitState+0x178>)
 8009a28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009a2c:	fb01 f303 	mul.w	r3, r1, r3
 8009a30:	4413      	add	r3, r2
 8009a32:	332a      	adds	r3, #42	; 0x2a
 8009a34:	2200      	movs	r2, #0
 8009a36:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 8009a38:	4b18      	ldr	r3, [pc, #96]	; (8009a9c <MCU_TransmitState+0x17c>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	7bfb      	ldrb	r3, [r7, #15]
 8009a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009a40:	4915      	ldr	r1, [pc, #84]	; (8009a98 <MCU_TransmitState+0x178>)
 8009a42:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009a46:	fb00 f303 	mul.w	r3, r0, r3
 8009a4a:	440b      	add	r3, r1
 8009a4c:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8009a50:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	4a12      	ldr	r2, [pc, #72]	; (8009aa0 <MCU_TransmitState+0x180>)
 8009a56:	6812      	ldr	r2, [r2, #0]
 8009a58:	490f      	ldr	r1, [pc, #60]	; (8009a98 <MCU_TransmitState+0x178>)
 8009a5a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009a5e:	fb00 f303 	mul.w	r3, r0, r3
 8009a62:	440b      	add	r3, r1
 8009a64:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8009a68:	601a      	str	r2, [r3, #0]
  }
}
 8009a6a:	bf00      	nop
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bdb0      	pop	{r4, r5, r7, pc}
 8009a72:	bf00      	nop
 8009a74:	f3af 8000 	nop.w
 8009a78:	eb851eb8 	.word	0xeb851eb8
 8009a7c:	3f8eb851 	.word	0x3f8eb851
 8009a80:	2000a664 	.word	0x2000a664
 8009a84:	20000d38 	.word	0x20000d38
 8009a88:	20000d44 	.word	0x20000d44
 8009a8c:	2000000c 	.word	0x2000000c
 8009a90:	0801748c 	.word	0x0801748c
 8009a94:	20000b64 	.word	0x20000b64
 8009a98:	20000de4 	.word	0x20000de4
 8009a9c:	200005d8 	.word	0x200005d8
 8009aa0:	20000d20 	.word	0x20000d20

08009aa4 <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 8009aa4:	b5b0      	push	{r4, r5, r7, lr}
 8009aa6:	b08a      	sub	sp, #40	; 0x28
 8009aa8:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 8009aae:	4a85      	ldr	r2, [pc, #532]	; (8009cc4 <MCU_ProcessCellDetail+0x220>)
 8009ab0:	1d3b      	adds	r3, r7, #4
 8009ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009ab6:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 8009aba:	4b83      	ldr	r3, [pc, #524]	; (8009cc8 <MCU_ProcessCellDetail+0x224>)
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d017      	beq.n	8009af6 <MCU_ProcessCellDetail+0x52>
 8009ac6:	4b81      	ldr	r3, [pc, #516]	; (8009ccc <MCU_ProcessCellDetail+0x228>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009ace:	461c      	mov	r4, r3
 8009ad0:	797b      	ldrb	r3, [r7, #5]
 8009ad2:	461d      	mov	r5, r3
 8009ad4:	793b      	ldrb	r3, [r7, #4]
 8009ad6:	7aba      	ldrb	r2, [r7, #10]
 8009ad8:	88f9      	ldrh	r1, [r7, #6]
 8009ada:	8938      	ldrh	r0, [r7, #8]
 8009adc:	9003      	str	r0, [sp, #12]
 8009ade:	9102      	str	r1, [sp, #8]
 8009ae0:	9201      	str	r2, [sp, #4]
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	4622      	mov	r2, r4
 8009ae8:	4979      	ldr	r1, [pc, #484]	; (8009cd0 <MCU_ProcessCellDetail+0x22c>)
 8009aea:	487a      	ldr	r0, [pc, #488]	; (8009cd4 <MCU_ProcessCellDetail+0x230>)
 8009aec:	f009 fb88 	bl	8013200 <siprintf>
 8009af0:	4878      	ldr	r0, [pc, #480]	; (8009cd4 <MCU_ProcessCellDetail+0x230>)
 8009af2:	f7fb fc35 	bl	8005360 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8009af6:	4b78      	ldr	r3, [pc, #480]	; (8009cd8 <MCU_ProcessCellDetail+0x234>)
 8009af8:	7d1b      	ldrb	r3, [r3, #20]
 8009afa:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009afc:	2300      	movs	r3, #0
 8009afe:	75bb      	strb	r3, [r7, #22]
 8009b00:	e015      	b.n	8009b2e <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009b02:	4b72      	ldr	r3, [pc, #456]	; (8009ccc <MCU_ProcessCellDetail+0x228>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009b0a:	7dbb      	ldrb	r3, [r7, #22]
 8009b0c:	4973      	ldr	r1, [pc, #460]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009b0e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009b12:	fb00 f303 	mul.w	r3, r0, r3
 8009b16:	440b      	add	r3, r1
 8009b18:	3308      	adds	r3, #8
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d101      	bne.n	8009b28 <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 8009b24:	7dbb      	ldrb	r3, [r7, #22]
 8009b26:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009b28:	7dbb      	ldrb	r3, [r7, #22]
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	75bb      	strb	r3, [r7, #22]
 8009b2e:	4b6a      	ldr	r3, [pc, #424]	; (8009cd8 <MCU_ProcessCellDetail+0x234>)
 8009b30:	7d1b      	ldrb	r3, [r3, #20]
 8009b32:	7dba      	ldrb	r2, [r7, #22]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d3e4      	bcc.n	8009b02 <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 8009b38:	7dfb      	ldrb	r3, [r7, #23]
 8009b3a:	7978      	ldrb	r0, [r7, #5]
 8009b3c:	4a67      	ldr	r2, [pc, #412]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009b3e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009b42:	fb01 f303 	mul.w	r3, r1, r3
 8009b46:	4413      	add	r3, r2
 8009b48:	332d      	adds	r3, #45	; 0x2d
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 8009b4e:	7dfa      	ldrb	r2, [r7, #23]
 8009b50:	793b      	ldrb	r3, [r7, #4]
 8009b52:	4618      	mov	r0, r3
 8009b54:	7abc      	ldrb	r4, [r7, #10]
 8009b56:	4961      	ldr	r1, [pc, #388]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009b58:	4603      	mov	r3, r0
 8009b5a:	005b      	lsls	r3, r3, #1
 8009b5c:	4403      	add	r3, r0
 8009b5e:	005b      	lsls	r3, r3, #1
 8009b60:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009b64:	fb00 f202 	mul.w	r2, r0, r2
 8009b68:	4413      	add	r3, r2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	3332      	adds	r3, #50	; 0x32
 8009b6e:	4622      	mov	r2, r4
 8009b70:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 8009b72:	7dfa      	ldrb	r2, [r7, #23]
 8009b74:	793b      	ldrb	r3, [r7, #4]
 8009b76:	4618      	mov	r0, r3
 8009b78:	7afc      	ldrb	r4, [r7, #11]
 8009b7a:	4958      	ldr	r1, [pc, #352]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4403      	add	r3, r0
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009b88:	fb00 f202 	mul.w	r2, r0, r2
 8009b8c:	4413      	add	r3, r2
 8009b8e:	440b      	add	r3, r1
 8009b90:	3333      	adds	r3, #51	; 0x33
 8009b92:	4622      	mov	r2, r4
 8009b94:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 8009b96:	7dfa      	ldrb	r2, [r7, #23]
 8009b98:	793b      	ldrb	r3, [r7, #4]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	88fc      	ldrh	r4, [r7, #6]
 8009b9e:	494f      	ldr	r1, [pc, #316]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	005b      	lsls	r3, r3, #1
 8009ba4:	4403      	add	r3, r0
 8009ba6:	005b      	lsls	r3, r3, #1
 8009ba8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009bac:	fb00 f202 	mul.w	r2, r0, r2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	440b      	add	r3, r1
 8009bb4:	3330      	adds	r3, #48	; 0x30
 8009bb6:	4622      	mov	r2, r4
 8009bb8:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 8009bba:	7dfa      	ldrb	r2, [r7, #23]
 8009bbc:	793b      	ldrb	r3, [r7, #4]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	893c      	ldrh	r4, [r7, #8]
 8009bc2:	4946      	ldr	r1, [pc, #280]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	4403      	add	r3, r0
 8009bca:	005b      	lsls	r3, r3, #1
 8009bcc:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009bd0:	fb00 f202 	mul.w	r2, r0, r2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	440b      	add	r3, r1
 8009bd8:	332e      	adds	r3, #46	; 0x2e
 8009bda:	4622      	mov	r2, r4
 8009bdc:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 8009bde:	4b40      	ldr	r3, [pc, #256]	; (8009ce0 <MCU_ProcessCellDetail+0x23c>)
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	7dfb      	ldrb	r3, [r7, #23]
 8009be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009be6:	493d      	ldr	r1, [pc, #244]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009be8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009bec:	fb00 f303 	mul.w	r3, r0, r3
 8009bf0:	440b      	add	r3, r1
 8009bf2:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009bf6:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	4a3a      	ldr	r2, [pc, #232]	; (8009ce4 <MCU_ProcessCellDetail+0x240>)
 8009bfc:	6812      	ldr	r2, [r2, #0]
 8009bfe:	4937      	ldr	r1, [pc, #220]	; (8009cdc <MCU_ProcessCellDetail+0x238>)
 8009c00:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009c04:	fb00 f303 	mul.w	r3, r0, r3
 8009c08:	440b      	add	r3, r1
 8009c0a:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8009c0e:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 8009c10:	793b      	ldrb	r3, [r7, #4]
 8009c12:	461a      	mov	r2, r3
 8009c14:	797b      	ldrb	r3, [r7, #5]
 8009c16:	3b01      	subs	r3, #1
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	da4f      	bge.n	8009cbc <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 8009c1c:	793b      	ldrb	r3, [r7, #4]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 8009c24:	4b30      	ldr	r3, [pc, #192]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8009c2a:	4b2f      	ldr	r3, [pc, #188]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8009c30:	4b2d      	ldr	r3, [pc, #180]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 8009c36:	4b2d      	ldr	r3, [pc, #180]	; (8009cec <MCU_ProcessCellDetail+0x248>)
 8009c38:	461a      	mov	r2, r3
 8009c3a:	f107 030c 	add.w	r3, r7, #12
 8009c3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009c42:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 8009c46:	4a28      	ldr	r2, [pc, #160]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c48:	8813      	ldrh	r3, [r2, #0]
 8009c4a:	f240 5115 	movw	r1, #1301	; 0x515
 8009c4e:	f361 030a 	bfi	r3, r1, #0, #11
 8009c52:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 8009c54:	4b1d      	ldr	r3, [pc, #116]	; (8009ccc <MCU_ProcessCellDetail+0x228>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 8009c5c:	4a22      	ldr	r2, [pc, #136]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c5e:	6813      	ldr	r3, [r2, #0]
 8009c60:	f361 23dc 	bfi	r3, r1, #11, #18
 8009c64:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8009c66:	4a20      	ldr	r2, [pc, #128]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c68:	7913      	ldrb	r3, [r2, #4]
 8009c6a:	f36f 1386 	bfc	r3, #6, #1
 8009c6e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 8009c70:	4a1d      	ldr	r2, [pc, #116]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c72:	7913      	ldrb	r3, [r2, #4]
 8009c74:	2102      	movs	r1, #2
 8009c76:	f361 0303 	bfi	r3, r1, #0, #4
 8009c7a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8009c7c:	4a1a      	ldr	r2, [pc, #104]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c7e:	7913      	ldrb	r3, [r2, #4]
 8009c80:	f36f 13c7 	bfc	r3, #7, #1
 8009c84:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8009c86:	4a18      	ldr	r2, [pc, #96]	; (8009ce8 <MCU_ProcessCellDetail+0x244>)
 8009c88:	7913      	ldrb	r3, [r2, #4]
 8009c8a:	f043 0310 	orr.w	r3, r3, #16
 8009c8e:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 8009c90:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <MCU_ProcessCellDetail+0x224>)
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	f003 0302 	and.w	r3, r3, #2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00c      	beq.n	8009cb6 <MCU_ProcessCellDetail+0x212>
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <MCU_ProcessCellDetail+0x228>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	7b7b      	ldrb	r3, [r7, #13]
 8009ca8:	4911      	ldr	r1, [pc, #68]	; (8009cf0 <MCU_ProcessCellDetail+0x24c>)
 8009caa:	480a      	ldr	r0, [pc, #40]	; (8009cd4 <MCU_ProcessCellDetail+0x230>)
 8009cac:	f009 faa8 	bl	8013200 <siprintf>
 8009cb0:	4808      	ldr	r0, [pc, #32]	; (8009cd4 <MCU_ProcessCellDetail+0x230>)
 8009cb2:	f7fb fb55 	bl	8005360 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8009cb6:	2001      	movs	r0, #1
 8009cb8:	f7fe f8d0 	bl	8007e5c <MCU_TransmitMessageQueue>
  }
}
 8009cbc:	bf00      	nop
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8009cc4:	20000da0 	.word	0x20000da0
 8009cc8:	2000000c 	.word	0x2000000c
 8009ccc:	20000d94 	.word	0x20000d94
 8009cd0:	080174c4 	.word	0x080174c4
 8009cd4:	20000b64 	.word	0x20000b64
 8009cd8:	2000a664 	.word	0x2000a664
 8009cdc:	20000de4 	.word	0x20000de4
 8009ce0:	200005d8 	.word	0x200005d8
 8009ce4:	20000d20 	.word	0x20000d20
 8009ce8:	20000d38 	.word	0x20000d38
 8009cec:	20000d44 	.word	0x20000d44
 8009cf0:	08017520 	.word	0x08017520

08009cf4 <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 8009cfe:	4b15      	ldr	r3, [pc, #84]	; (8009d54 <MCU_ModuleIndexFromId+0x60>)
 8009d00:	7d1b      	ldrb	r3, [r3, #20]
 8009d02:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8009d04:	2300      	movs	r3, #0
 8009d06:	73bb      	strb	r3, [r7, #14]
 8009d08:	e010      	b.n	8009d2c <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	4a12      	ldr	r2, [pc, #72]	; (8009d58 <MCU_ModuleIndexFromId+0x64>)
 8009d0e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d12:	fb01 f303 	mul.w	r3, r1, r3
 8009d16:	4413      	add	r3, r2
 8009d18:	3308      	adds	r3, #8
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	79fa      	ldrb	r2, [r7, #7]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d101      	bne.n	8009d26 <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 8009d22:	7bbb      	ldrb	r3, [r7, #14]
 8009d24:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8009d26:	7bbb      	ldrb	r3, [r7, #14]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	73bb      	strb	r3, [r7, #14]
 8009d2c:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <MCU_ModuleIndexFromId+0x60>)
 8009d2e:	7d1b      	ldrb	r3, [r3, #20]
 8009d30:	7bba      	ldrb	r2, [r7, #14]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d3e9      	bcc.n	8009d0a <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 8009d36:	4b07      	ldr	r3, [pc, #28]	; (8009d54 <MCU_ModuleIndexFromId+0x60>)
 8009d38:	7d1b      	ldrb	r3, [r3, #20]
 8009d3a:	7bfa      	ldrb	r2, [r7, #15]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d001      	beq.n	8009d44 <MCU_ModuleIndexFromId+0x50>
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	e001      	b.n	8009d48 <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 8009d44:	4b03      	ldr	r3, [pc, #12]	; (8009d54 <MCU_ModuleIndexFromId+0x60>)
 8009d46:	7d1b      	ldrb	r3, [r3, #20]

}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3714      	adds	r7, #20
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr
 8009d54:	2000a664 	.word	0x2000a664
 8009d58:	20000de4 	.word	0x20000de4

08009d5c <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 8009d5c:	b590      	push	{r4, r7, lr}
 8009d5e:	b087      	sub	sp, #28
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 8009d66:	4b32      	ldr	r3, [pc, #200]	; (8009e30 <MCU_TicksSinceLastMessage+0xd4>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6c:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 8009d6e:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <MCU_TicksSinceLastMessage+0xd8>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 8009d74:	79fb      	ldrb	r3, [r7, #7]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f7ff ffbc 	bl	8009cf4 <MCU_ModuleIndexFromId>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 8009d80:	4b2d      	ldr	r3, [pc, #180]	; (8009e38 <MCU_TicksSinceLastMessage+0xdc>)
 8009d82:	7d1b      	ldrb	r3, [r3, #20]
 8009d84:	7afa      	ldrb	r2, [r7, #11]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d040      	beq.n	8009e0c <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 8009d8a:	7afb      	ldrb	r3, [r7, #11]
 8009d8c:	4a2b      	ldr	r2, [pc, #172]	; (8009e3c <MCU_TicksSinceLastMessage+0xe0>)
 8009d8e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d92:	fb01 f303 	mul.w	r3, r1, r3
 8009d96:	4413      	add	r3, r2
 8009d98:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68fa      	ldr	r2, [r7, #12]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d10d      	bne.n	8009dc0 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	4a25      	ldr	r2, [pc, #148]	; (8009e3c <MCU_TicksSinceLastMessage+0xe0>)
 8009da8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009dac:	fb01 f303 	mul.w	r3, r1, r3
 8009db0:	4413      	add	r3, r2
 8009db2:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	693a      	ldr	r2, [r7, #16]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	617b      	str	r3, [r7, #20]
 8009dbe:	e023      	b.n	8009e08 <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 8009dc0:	4b1b      	ldr	r3, [pc, #108]	; (8009e30 <MCU_TicksSinceLastMessage+0xd4>)
 8009dc2:	68da      	ldr	r2, [r3, #12]
 8009dc4:	7afb      	ldrb	r3, [r7, #11]
 8009dc6:	491d      	ldr	r1, [pc, #116]	; (8009e3c <MCU_TicksSinceLastMessage+0xe0>)
 8009dc8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009dcc:	fb00 f303 	mul.w	r3, r0, r3
 8009dd0:	440b      	add	r3, r1
 8009dd2:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	1ad2      	subs	r2, r2, r3
 8009dda:	4b15      	ldr	r3, [pc, #84]	; (8009e30 <MCU_TicksSinceLastMessage+0xd4>)
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	3301      	adds	r3, #1
 8009de0:	7af9      	ldrb	r1, [r7, #11]
 8009de2:	4816      	ldr	r0, [pc, #88]	; (8009e3c <MCU_TicksSinceLastMessage+0xe0>)
 8009de4:	f240 44c4 	movw	r4, #1220	; 0x4c4
 8009de8:	fb04 f101 	mul.w	r1, r4, r1
 8009dec:	4401      	add	r1, r0
 8009dee:	f201 41b4 	addw	r1, r1, #1204	; 0x4b4
 8009df2:	6809      	ldr	r1, [r1, #0]
 8009df4:	68f8      	ldr	r0, [r7, #12]
 8009df6:	1a41      	subs	r1, r0, r1
 8009df8:	3901      	subs	r1, #1
 8009dfa:	fb01 f303 	mul.w	r3, r1, r3
 8009dfe:	441a      	add	r2, r3
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	4413      	add	r3, r2
 8009e04:	3301      	adds	r3, #1
 8009e06:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	e00d      	b.n	8009e28 <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 8009e0c:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <MCU_TicksSinceLastMessage+0xe4>)
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	2b03      	cmp	r3, #3
 8009e16:	d106      	bne.n	8009e26 <MCU_TicksSinceLastMessage+0xca>
 8009e18:	490a      	ldr	r1, [pc, #40]	; (8009e44 <MCU_TicksSinceLastMessage+0xe8>)
 8009e1a:	480b      	ldr	r0, [pc, #44]	; (8009e48 <MCU_TicksSinceLastMessage+0xec>)
 8009e1c:	f009 f9f0 	bl	8013200 <siprintf>
 8009e20:	4809      	ldr	r0, [pc, #36]	; (8009e48 <MCU_TicksSinceLastMessage+0xec>)
 8009e22:	f7fb fa9d 	bl	8005360 <serialOut>
    return 0; // TODO Handle this error
 8009e26:	2300      	movs	r3, #0
  }
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	371c      	adds	r7, #28
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd90      	pop	{r4, r7, pc}
 8009e30:	200005d8 	.word	0x200005d8
 8009e34:	20000d20 	.word	0x20000d20
 8009e38:	2000a664 	.word	0x2000a664
 8009e3c:	20000de4 	.word	0x20000de4
 8009e40:	2000000c 	.word	0x2000000c
 8009e44:	08017550 	.word	0x08017550
 8009e48:	20000b64 	.word	0x20000b64

08009e4c <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 8009e4c:	b590      	push	{r4, r7, lr}
 8009e4e:	b087      	sub	sp, #28
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	4603      	mov	r3, r0
 8009e54:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 8009e56:	4b32      	ldr	r3, [pc, #200]	; (8009f20 <MCU_TicksSinceLastStateTx+0xd4>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 8009e5e:	4b31      	ldr	r3, [pc, #196]	; (8009f24 <MCU_TicksSinceLastStateTx+0xd8>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 8009e64:	79fb      	ldrb	r3, [r7, #7]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7ff ff44 	bl	8009cf4 <MCU_ModuleIndexFromId>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 8009e70:	4b2d      	ldr	r3, [pc, #180]	; (8009f28 <MCU_TicksSinceLastStateTx+0xdc>)
 8009e72:	7d1b      	ldrb	r3, [r3, #20]
 8009e74:	7afa      	ldrb	r2, [r7, #11]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d040      	beq.n	8009efc <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 8009e7a:	7afb      	ldrb	r3, [r7, #11]
 8009e7c:	4a2b      	ldr	r2, [pc, #172]	; (8009f2c <MCU_TicksSinceLastStateTx+0xe0>)
 8009e7e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009e82:	fb01 f303 	mul.w	r3, r1, r3
 8009e86:	4413      	add	r3, r2
 8009e88:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d10d      	bne.n	8009eb0 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 8009e94:	7afb      	ldrb	r3, [r7, #11]
 8009e96:	4a25      	ldr	r2, [pc, #148]	; (8009f2c <MCU_TicksSinceLastStateTx+0xe0>)
 8009e98:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009e9c:	fb01 f303 	mul.w	r3, r1, r3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	617b      	str	r3, [r7, #20]
 8009eae:	e023      	b.n	8009ef8 <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 8009eb0:	4b1b      	ldr	r3, [pc, #108]	; (8009f20 <MCU_TicksSinceLastStateTx+0xd4>)
 8009eb2:	68da      	ldr	r2, [r3, #12]
 8009eb4:	7afb      	ldrb	r3, [r7, #11]
 8009eb6:	491d      	ldr	r1, [pc, #116]	; (8009f2c <MCU_TicksSinceLastStateTx+0xe0>)
 8009eb8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009ebc:	fb00 f303 	mul.w	r3, r0, r3
 8009ec0:	440b      	add	r3, r1
 8009ec2:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	1ad2      	subs	r2, r2, r3
 8009eca:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <MCU_TicksSinceLastStateTx+0xd4>)
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	3301      	adds	r3, #1
 8009ed0:	7af9      	ldrb	r1, [r7, #11]
 8009ed2:	4816      	ldr	r0, [pc, #88]	; (8009f2c <MCU_TicksSinceLastStateTx+0xe0>)
 8009ed4:	f240 44c4 	movw	r4, #1220	; 0x4c4
 8009ed8:	fb04 f101 	mul.w	r1, r4, r1
 8009edc:	4401      	add	r1, r0
 8009ede:	f201 41bc 	addw	r1, r1, #1212	; 0x4bc
 8009ee2:	6809      	ldr	r1, [r1, #0]
 8009ee4:	68f8      	ldr	r0, [r7, #12]
 8009ee6:	1a41      	subs	r1, r0, r1
 8009ee8:	3901      	subs	r1, #1
 8009eea:	fb01 f303 	mul.w	r3, r1, r3
 8009eee:	441a      	add	r2, r3
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	4413      	add	r3, r2
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	e00d      	b.n	8009f18 <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 8009efc:	4b0c      	ldr	r3, [pc, #48]	; (8009f30 <MCU_TicksSinceLastStateTx+0xe4>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	f003 0303 	and.w	r3, r3, #3
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d106      	bne.n	8009f16 <MCU_TicksSinceLastStateTx+0xca>
 8009f08:	490a      	ldr	r1, [pc, #40]	; (8009f34 <MCU_TicksSinceLastStateTx+0xe8>)
 8009f0a:	480b      	ldr	r0, [pc, #44]	; (8009f38 <MCU_TicksSinceLastStateTx+0xec>)
 8009f0c:	f009 f978 	bl	8013200 <siprintf>
 8009f10:	4809      	ldr	r0, [pc, #36]	; (8009f38 <MCU_TicksSinceLastStateTx+0xec>)
 8009f12:	f7fb fa25 	bl	8005360 <serialOut>
    return 0; // TODO Handle this error
 8009f16:	2300      	movs	r3, #0
  }
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	371c      	adds	r7, #28
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd90      	pop	{r4, r7, pc}
 8009f20:	200005d8 	.word	0x200005d8
 8009f24:	20000d20 	.word	0x20000d20
 8009f28:	2000a664 	.word	0x2000a664
 8009f2c:	20000de4 	.word	0x20000de4
 8009f30:	2000000c 	.word	0x2000000c
 8009f34:	08017590 	.word	0x08017590
 8009f38:	20000b64 	.word	0x20000b64

08009f3c <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	4603      	mov	r3, r0
 8009f44:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 8009f46:	2300      	movs	r3, #0
 8009f48:	73bb      	strb	r3, [r7, #14]
  Nop();
 8009f4a:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	73fb      	strb	r3, [r7, #15]
 8009f50:	e05d      	b.n	800a00e <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 8009f52:	4b34      	ldr	r3, [pc, #208]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]
 8009f58:	e016      	b.n	8009f88 <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 8009f5a:	f009 f903 	bl	8013164 <rand>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	b2db      	uxtb	r3, r3
 8009f62:	4a30      	ldr	r2, [pc, #192]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009f64:	7812      	ldrb	r2, [r2, #0]
 8009f66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f6a:	b2d9      	uxtb	r1, r3
 8009f6c:	4b2e      	ldr	r3, [pc, #184]	; (800a028 <CAN_TestRegisterAccess+0xec>)
 8009f6e:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 8009f70:	4b2c      	ldr	r3, [pc, #176]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	461a      	mov	r2, r3
 8009f76:	4b2d      	ldr	r3, [pc, #180]	; (800a02c <CAN_TestRegisterAccess+0xf0>)
 8009f78:	21ff      	movs	r1, #255	; 0xff
 8009f7a:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 8009f7c:	4b29      	ldr	r3, [pc, #164]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	3301      	adds	r3, #1
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	4b27      	ldr	r3, [pc, #156]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009f86:	701a      	strb	r2, [r3, #0]
 8009f88:	4b26      	ldr	r3, [pc, #152]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	7bfa      	ldrb	r2, [r7, #15]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d8e3      	bhi.n	8009f5a <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 8009f92:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	79f8      	ldrb	r0, [r7, #7]
 8009f9a:	4a23      	ldr	r2, [pc, #140]	; (800a028 <CAN_TestRegisterAccess+0xec>)
 8009f9c:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009fa0:	f7f7 fbe4 	bl	800176c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	79f8      	ldrb	r0, [r7, #7]
 8009faa:	4a20      	ldr	r2, [pc, #128]	; (800a02c <CAN_TestRegisterAccess+0xf0>)
 8009fac:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009fb0:	f7f7 fb4c 	bl	800164c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 8009fb8:	4b1a      	ldr	r3, [pc, #104]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	701a      	strb	r2, [r3, #0]
 8009fbe:	e01e      	b.n	8009ffe <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 8009fc0:	4b18      	ldr	r3, [pc, #96]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4b18      	ldr	r3, [pc, #96]	; (800a028 <CAN_TestRegisterAccess+0xec>)
 8009fc8:	5c9a      	ldrb	r2, [r3, r2]
 8009fca:	4b16      	ldr	r3, [pc, #88]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	4619      	mov	r1, r3
 8009fd0:	4b16      	ldr	r3, [pc, #88]	; (800a02c <CAN_TestRegisterAccess+0xf0>)
 8009fd2:	5c5b      	ldrb	r3, [r3, r1]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	bf0c      	ite	eq
 8009fd8:	2301      	moveq	r3, #1
 8009fda:	2300      	movne	r3, #0
 8009fdc:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	f083 0301 	eor.w	r3, r3, #1
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d003      	beq.n	8009ff2 <CAN_TestRegisterAccess+0xb6>
        Nop();
 8009fea:	bf00      	nop
        Nop();
 8009fec:	bf00      	nop

        // Data mismatch
        return false;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e013      	b.n	800a01a <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 8009ff2:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 8009ffc:	701a      	strb	r2, [r3, #0]
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <CAN_TestRegisterAccess+0xe8>)
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	7bfa      	ldrb	r2, [r7, #15]
 800a004:	429a      	cmp	r2, r3
 800a006:	d8db      	bhi.n	8009fc0 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800a008:	7bfb      	ldrb	r3, [r7, #15]
 800a00a:	3301      	adds	r3, #1
 800a00c:	73fb      	strb	r3, [r7, #15]
 800a00e:	7bfb      	ldrb	r3, [r7, #15]
 800a010:	2b40      	cmp	r3, #64	; 0x40
 800a012:	d99e      	bls.n	8009f52 <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800a014:	bf00      	nop
  Nop();
 800a016:	bf00      	nop
  return true;
 800a018:	2301      	movs	r3, #1
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
 800a022:	bf00      	nop
 800a024:	20000de0 	.word	0x20000de0
 800a028:	20000d44 	.word	0x20000d44
 800a02c:	20000da0 	.word	0x20000da0

0800a030 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800a03a:	2300      	movs	r3, #0
 800a03c:	73bb      	strb	r3, [r7, #14]
  Nop();
 800a03e:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800a040:	2304      	movs	r3, #4
 800a042:	73fb      	strb	r3, [r7, #15]
 800a044:	e05b      	b.n	800a0fe <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800a046:	4b32      	ldr	r3, [pc, #200]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a048:	2200      	movs	r2, #0
 800a04a:	701a      	strb	r2, [r3, #0]
 800a04c:	e014      	b.n	800a078 <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800a04e:	f009 f889 	bl	8013164 <rand>
 800a052:	4601      	mov	r1, r0
 800a054:	4b2e      	ldr	r3, [pc, #184]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	b2c9      	uxtb	r1, r1
 800a05c:	4b2d      	ldr	r3, [pc, #180]	; (800a114 <CAN_TestRamAccess+0xe4>)
 800a05e:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800a060:	4b2b      	ldr	r3, [pc, #172]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	461a      	mov	r2, r3
 800a066:	4b2c      	ldr	r3, [pc, #176]	; (800a118 <CAN_TestRamAccess+0xe8>)
 800a068:	21ff      	movs	r1, #255	; 0xff
 800a06a:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800a06c:	4b28      	ldr	r3, [pc, #160]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	3301      	adds	r3, #1
 800a072:	b2da      	uxtb	r2, r3
 800a074:	4b26      	ldr	r3, [pc, #152]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a076:	701a      	strb	r2, [r3, #0]
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	7bfa      	ldrb	r2, [r7, #15]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d8e5      	bhi.n	800a04e <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800a082:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800a084:	7bfb      	ldrb	r3, [r7, #15]
 800a086:	b29b      	uxth	r3, r3
 800a088:	79f8      	ldrb	r0, [r7, #7]
 800a08a:	4a22      	ldr	r2, [pc, #136]	; (800a114 <CAN_TestRamAccess+0xe4>)
 800a08c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a090:	f7f7 fb6c 	bl	800176c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800a094:	7bfb      	ldrb	r3, [r7, #15]
 800a096:	b29b      	uxth	r3, r3
 800a098:	79f8      	ldrb	r0, [r7, #7]
 800a09a:	4a1f      	ldr	r2, [pc, #124]	; (800a118 <CAN_TestRamAccess+0xe8>)
 800a09c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a0a0:	f7f7 fad4 	bl	800164c <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800a0a8:	4b19      	ldr	r3, [pc, #100]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	701a      	strb	r2, [r3, #0]
 800a0ae:	e01e      	b.n	800a0ee <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800a0b0:	4b17      	ldr	r3, [pc, #92]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	4b17      	ldr	r3, [pc, #92]	; (800a114 <CAN_TestRamAccess+0xe4>)
 800a0b8:	5c9a      	ldrb	r2, [r3, r2]
 800a0ba:	4b15      	ldr	r3, [pc, #84]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	4b15      	ldr	r3, [pc, #84]	; (800a118 <CAN_TestRamAccess+0xe8>)
 800a0c2:	5c5b      	ldrb	r3, [r3, r1]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	bf0c      	ite	eq
 800a0c8:	2301      	moveq	r3, #1
 800a0ca:	2300      	movne	r3, #0
 800a0cc:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800a0ce:	7bbb      	ldrb	r3, [r7, #14]
 800a0d0:	f083 0301 	eor.w	r3, r3, #1
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <CAN_TestRamAccess+0xb2>
        Nop();
 800a0da:	bf00      	nop
        Nop();
 800a0dc:	bf00      	nop

        // Data mismatch
        return false;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	e011      	b.n	800a106 <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800a0e2:	4b0b      	ldr	r3, [pc, #44]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	b2da      	uxtb	r2, r3
 800a0ea:	4b09      	ldr	r3, [pc, #36]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a0ec:	701a      	strb	r2, [r3, #0]
 800a0ee:	4b08      	ldr	r3, [pc, #32]	; (800a110 <CAN_TestRamAccess+0xe0>)
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	7bfa      	ldrb	r2, [r7, #15]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d8db      	bhi.n	800a0b0 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	73fb      	strb	r3, [r7, #15]
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
 800a100:	2b40      	cmp	r3, #64	; 0x40
 800a102:	d9a0      	bls.n	800a046 <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800a104:	2301      	movs	r3, #1
}
 800a106:	4618      	mov	r0, r3
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000de0 	.word	0x20000de0
 800a114:	20000d44 	.word	0x20000d44
 800a118:	20000da0 	.word	0x20000da0

0800a11c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800a11c:	b480      	push	{r7}
 800a11e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800a120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a12c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <LL_AHB2_GRP1_EnableClock>:
{
 800a13e:	b480      	push	{r7}
 800a140:	b085      	sub	sp, #20
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800a146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a14a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a14c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4313      	orrs	r3, r2
 800a154:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800a156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a15a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4013      	ands	r3, r2
 800a160:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a162:	68fb      	ldr	r3, [r7, #12]
}
 800a164:	bf00      	nop
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800a178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a17c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a17e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4313      	orrs	r3, r2
 800a186:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800a188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a18c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	4013      	ands	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a194:	68fb      	ldr	r3, [r7, #12]
}
 800a196:	bf00      	nop
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b085      	sub	sp, #20
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800a1aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800a1ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
}
 800a1c8:	bf00      	nop
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800a1dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800a1ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
}
 800a1fa:	bf00      	nop
 800a1fc:	3714      	adds	r7, #20
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800a206:	b480      	push	{r7}
 800a208:	b085      	sub	sp, #20
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800a20e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a212:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800a21e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a222:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4013      	ands	r3, r2
 800a228:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800a22a:	68fb      	ldr	r3, [r7, #12]
}
 800a22c:	bf00      	nop
 800a22e:	3714      	adds	r7, #20
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800a23c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800a240:	f7ff ff96 	bl	800a170 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800a244:	2200      	movs	r2, #0
 800a246:	2100      	movs	r1, #0
 800a248:	202e      	movs	r0, #46	; 0x2e
 800a24a:	f001 ffca 	bl	800c1e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800a24e:	202e      	movs	r0, #46	; 0x2e
 800a250:	f001 ffe1 	bl	800c216 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a254:	bf00      	nop
 800a256:	bd80      	pop	{r7, pc}

0800a258 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b09c      	sub	sp, #112	; 0x70
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a260:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	605a      	str	r2, [r3, #4]
 800a26a:	609a      	str	r2, [r3, #8]
 800a26c:	60da      	str	r2, [r3, #12]
 800a26e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a270:	f107 030c 	add.w	r3, r7, #12
 800a274:	2250      	movs	r2, #80	; 0x50
 800a276:	2100      	movs	r1, #0
 800a278:	4618      	mov	r0, r3
 800a27a:	f007 ffaf 	bl	80121dc <memset>
  if(huart->Instance==LPUART1)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a2f      	ldr	r2, [pc, #188]	; (800a340 <HAL_UART_MspInit+0xe8>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d125      	bne.n	800a2d4 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a288:	2302      	movs	r3, #2
 800a28a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a28c:	2300      	movs	r3, #0
 800a28e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a290:	f107 030c 	add.w	r3, r7, #12
 800a294:	4618      	mov	r0, r3
 800a296:	f004 f920 	bl	800e4da <HAL_RCCEx_PeriphCLKConfig>
 800a29a:	4603      	mov	r3, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d001      	beq.n	800a2a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800a2a0:	f7fc f9f4 	bl	800668c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a2a4:	2001      	movs	r0, #1
 800a2a6:	f7ff ff95 	bl	800a1d4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	f7ff ff47 	bl	800a13e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a2b0:	230c      	movs	r3, #12
 800a2b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a2c0:	2308      	movs	r3, #8
 800a2c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a2ce:	f002 fa97 	bl	800c800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800a2d2:	e031      	b.n	800a338 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a1a      	ldr	r2, [pc, #104]	; (800a344 <HAL_UART_MspInit+0xec>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d12c      	bne.n	800a338 <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a2e6:	f107 030c 	add.w	r3, r7, #12
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f004 f8f5 	bl	800e4da <HAL_RCCEx_PeriphCLKConfig>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800a2f6:	f7fc f9c9 	bl	800668c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a2fa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a2fe:	f7ff ff82 	bl	800a206 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a302:	2002      	movs	r0, #2
 800a304:	f7ff ff1b 	bl	800a13e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a308:	23c0      	movs	r3, #192	; 0xc0
 800a30a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a30c:	2302      	movs	r3, #2
 800a30e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a310:	2300      	movs	r3, #0
 800a312:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a314:	2300      	movs	r3, #0
 800a316:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a318:	2307      	movs	r3, #7
 800a31a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a31c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a320:	4619      	mov	r1, r3
 800a322:	4809      	ldr	r0, [pc, #36]	; (800a348 <HAL_UART_MspInit+0xf0>)
 800a324:	f002 fa6c 	bl	800c800 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a328:	2200      	movs	r2, #0
 800a32a:	2100      	movs	r1, #0
 800a32c:	2024      	movs	r0, #36	; 0x24
 800a32e:	f001 ff58 	bl	800c1e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a332:	2024      	movs	r0, #36	; 0x24
 800a334:	f001 ff6f 	bl	800c216 <HAL_NVIC_EnableIRQ>
}
 800a338:	bf00      	nop
 800a33a:	3770      	adds	r7, #112	; 0x70
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	40008000 	.word	0x40008000
 800a344:	40013800 	.word	0x40013800
 800a348:	48000400 	.word	0x48000400

0800a34c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a05      	ldr	r2, [pc, #20]	; (800a370 <HAL_PKA_MspInit+0x24>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d103      	bne.n	800a366 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800a35e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a362:	f7ff ff05 	bl	800a170 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	58002000 	.word	0x58002000

0800a374 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b096      	sub	sp, #88	; 0x58
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a37c:	f107 0308 	add.w	r3, r7, #8
 800a380:	2250      	movs	r2, #80	; 0x50
 800a382:	2100      	movs	r1, #0
 800a384:	4618      	mov	r0, r3
 800a386:	f007 ff29 	bl	80121dc <memset>
  if(hrtc->Instance==RTC)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a0e      	ldr	r2, [pc, #56]	; (800a3c8 <HAL_RTC_MspInit+0x54>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d115      	bne.n	800a3c0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a394:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a398:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800a39a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a39e:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a3a0:	f107 0308 	add.w	r3, r7, #8
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f004 f898 	bl	800e4da <HAL_RCCEx_PeriphCLKConfig>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800a3b0:	f7fc f96c 	bl	800668c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a3b4:	f7ff feb2 	bl	800a11c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800a3b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a3bc:	f7ff fef1 	bl	800a1a2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800a3c0:	bf00      	nop
 800a3c2:	3758      	adds	r7, #88	; 0x58
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	40002800 	.word	0x40002800

0800a3cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b088      	sub	sp, #32
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3d4:	f107 030c 	add.w	r3, r7, #12
 800a3d8:	2200      	movs	r2, #0
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	605a      	str	r2, [r3, #4]
 800a3de:	609a      	str	r2, [r3, #8]
 800a3e0:	60da      	str	r2, [r3, #12]
 800a3e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a30      	ldr	r2, [pc, #192]	; (800a4ac <HAL_SPI_MspInit+0xe0>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d118      	bne.n	800a420 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a3ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a3f2:	f7ff ff08 	bl	800a206 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3f6:	2001      	movs	r0, #1
 800a3f8:	f7ff fea1 	bl	800a13e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800a3fc:	23c2      	movs	r3, #194	; 0xc2
 800a3fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a400:	2302      	movs	r3, #2
 800a402:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a404:	2300      	movs	r3, #0
 800a406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a408:	2300      	movs	r3, #0
 800a40a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a40c:	2305      	movs	r3, #5
 800a40e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a410:	f107 030c 	add.w	r3, r7, #12
 800a414:	4619      	mov	r1, r3
 800a416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a41a:	f002 f9f1 	bl	800c800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800a41e:	e040      	b.n	800a4a2 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a22      	ldr	r2, [pc, #136]	; (800a4b0 <HAL_SPI_MspInit+0xe4>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d13b      	bne.n	800a4a2 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800a42a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800a42e:	f7ff feb8 	bl	800a1a2 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a432:	2004      	movs	r0, #4
 800a434:	f7ff fe83 	bl	800a13e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a438:	2001      	movs	r0, #1
 800a43a:	f7ff fe80 	bl	800a13e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800a43e:	2302      	movs	r3, #2
 800a440:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a442:	2302      	movs	r3, #2
 800a444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a44a:	2300      	movs	r3, #0
 800a44c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800a44e:	2303      	movs	r3, #3
 800a450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a452:	f107 030c 	add.w	r3, r7, #12
 800a456:	4619      	mov	r1, r3
 800a458:	4816      	ldr	r0, [pc, #88]	; (800a4b4 <HAL_SPI_MspInit+0xe8>)
 800a45a:	f002 f9d1 	bl	800c800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a45e:	2304      	movs	r3, #4
 800a460:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a462:	2302      	movs	r3, #2
 800a464:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a466:	2300      	movs	r3, #0
 800a468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a46a:	2300      	movs	r3, #0
 800a46c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a46e:	2305      	movs	r3, #5
 800a470:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a472:	f107 030c 	add.w	r3, r7, #12
 800a476:	4619      	mov	r1, r3
 800a478:	480e      	ldr	r0, [pc, #56]	; (800a4b4 <HAL_SPI_MspInit+0xe8>)
 800a47a:	f002 f9c1 	bl	800c800 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a47e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a482:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a484:	2302      	movs	r3, #2
 800a486:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a48c:	2300      	movs	r3, #0
 800a48e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a490:	2305      	movs	r3, #5
 800a492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a494:	f107 030c 	add.w	r3, r7, #12
 800a498:	4619      	mov	r1, r3
 800a49a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a49e:	f002 f9af 	bl	800c800 <HAL_GPIO_Init>
}
 800a4a2:	bf00      	nop
 800a4a4:	3720      	adds	r7, #32
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	40013000 	.word	0x40013000
 800a4b0:	40003800 	.word	0x40003800
 800a4b4:	48000800 	.word	0x48000800

0800a4b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b082      	sub	sp, #8
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a09      	ldr	r2, [pc, #36]	; (800a4ec <HAL_TIM_Base_MspInit+0x34>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d10b      	bne.n	800a4e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a4ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a4ce:	f7ff fe9a 	bl	800a206 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	2019      	movs	r0, #25
 800a4d8:	f001 fe83 	bl	800c1e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a4dc:	2019      	movs	r0, #25
 800a4de:	f001 fe9a 	bl	800c216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800a4e2:	bf00      	nop
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	40012c00 	.word	0x40012c00

0800a4f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b09c      	sub	sp, #112	; 0x70
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	605a      	str	r2, [r3, #4]
 800a502:	609a      	str	r2, [r3, #8]
 800a504:	60da      	str	r2, [r3, #12]
 800a506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a508:	f107 030c 	add.w	r3, r7, #12
 800a50c:	2250      	movs	r2, #80	; 0x50
 800a50e:	2100      	movs	r1, #0
 800a510:	4618      	mov	r0, r3
 800a512:	f007 fe63 	bl	80121dc <memset>
  if(hpcd->Instance==USB)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a1f      	ldr	r2, [pc, #124]	; (800a598 <HAL_PCD_MspInit+0xa8>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d136      	bne.n	800a58e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a520:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a524:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800a526:	2306      	movs	r3, #6
 800a528:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800a52a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a52e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800a530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a534:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800a536:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a53a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800a53c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a540:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a542:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a546:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a548:	f107 030c 	add.w	r3, r7, #12
 800a54c:	4618      	mov	r0, r3
 800a54e:	f003 ffc4 	bl	800e4da <HAL_RCCEx_PeriphCLKConfig>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800a558:	f7fc f898 	bl	800668c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a55c:	2001      	movs	r0, #1
 800a55e:	f7ff fdee 	bl	800a13e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a562:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a566:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a568:	2302      	movs	r3, #2
 800a56a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a56c:	2300      	movs	r3, #0
 800a56e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a570:	2300      	movs	r3, #0
 800a572:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800a574:	230a      	movs	r3, #10
 800a576:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a578:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a57c:	4619      	mov	r1, r3
 800a57e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a582:	f002 f93d 	bl	800c800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a586:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a58a:	f7ff fe0a 	bl	800a1a2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800a58e:	bf00      	nop
 800a590:	3770      	adds	r7, #112	; 0x70
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	40006800 	.word	0x40006800

0800a59c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a59c:	b480      	push	{r7}
 800a59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a5a0:	e7fe      	b.n	800a5a0 <NMI_Handler+0x4>

0800a5a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a5a6:	e7fe      	b.n	800a5a6 <HardFault_Handler+0x4>

0800a5a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a5ac:	e7fe      	b.n	800a5ac <MemManage_Handler+0x4>

0800a5ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a5b2:	e7fe      	b.n	800a5b2 <BusFault_Handler+0x4>

0800a5b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a5b8:	e7fe      	b.n	800a5b8 <UsageFault_Handler+0x4>

0800a5ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a5be:	bf00      	nop
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c6:	4770      	bx	lr

0800a5c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a5cc:	bf00      	nop
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a5da:	bf00      	nop
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a5e8:	f001 fcf4 	bl	800bfd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a5ec:	bf00      	nop
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800a5f4:	4b03      	ldr	r3, [pc, #12]	; (800a604 <EXTI0_IRQHandler+0x14>)
 800a5f6:	881b      	ldrh	r3, [r3, #0]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f002 fabb 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800a5fe:	bf00      	nop
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	20000cd6 	.word	0x20000cd6

0800a608 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800a60c:	4b03      	ldr	r3, [pc, #12]	; (800a61c <EXTI1_IRQHandler+0x14>)
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	4618      	mov	r0, r3
 800a612:	f002 faaf 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800a616:	bf00      	nop
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	20000cde 	.word	0x20000cde

0800a620 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800a624:	4b03      	ldr	r3, [pc, #12]	; (800a634 <EXTI4_IRQHandler+0x14>)
 800a626:	881b      	ldrh	r3, [r3, #0]
 800a628:	4618      	mov	r0, r3
 800a62a:	f002 faa3 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800a62e:	bf00      	nop
 800a630:	bd80      	pop	{r7, pc}
 800a632:	bf00      	nop
 800a634:	20000ccc 	.word	0x20000ccc

0800a638 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800a63c:	4b05      	ldr	r3, [pc, #20]	; (800a654 <EXTI9_5_IRQHandler+0x1c>)
 800a63e:	881b      	ldrh	r3, [r3, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f002 fa97 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800a646:	4b04      	ldr	r3, [pc, #16]	; (800a658 <EXTI9_5_IRQHandler+0x20>)
 800a648:	881b      	ldrh	r3, [r3, #0]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f002 fa92 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800a650:	bf00      	nop
 800a652:	bd80      	pop	{r7, pc}
 800a654:	20000c66 	.word	0x20000c66
 800a658:	20000c6e 	.word	0x20000c6e

0800a65c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a660:	4802      	ldr	r0, [pc, #8]	; (800a66c <TIM1_UP_TIM16_IRQHandler+0x10>)
 800a662:	f005 fa6b 	bl	800fb3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800a666:	bf00      	nop
 800a668:	bd80      	pop	{r7, pc}
 800a66a:	bf00      	nop
 800a66c:	200005d8 	.word	0x200005d8

0800a670 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a674:	4802      	ldr	r0, [pc, #8]	; (800a680 <USART1_IRQHandler+0x10>)
 800a676:	f006 fb33 	bl	8010ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a67a:	bf00      	nop
 800a67c:	bd80      	pop	{r7, pc}
 800a67e:	bf00      	nop
 800a680:	2000044c 	.word	0x2000044c

0800a684 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800a688:	4b0a      	ldr	r3, [pc, #40]	; (800a6b4 <EXTI15_10_IRQHandler+0x30>)
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f002 fa71 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800a692:	4b09      	ldr	r3, [pc, #36]	; (800a6b8 <EXTI15_10_IRQHandler+0x34>)
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	4618      	mov	r0, r3
 800a698:	f002 fa6c 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800a69c:	4b07      	ldr	r3, [pc, #28]	; (800a6bc <EXTI15_10_IRQHandler+0x38>)
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f002 fa67 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800a6a6:	4b06      	ldr	r3, [pc, #24]	; (800a6c0 <EXTI15_10_IRQHandler+0x3c>)
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f002 fa62 	bl	800cb74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800a6b0:	bf00      	nop
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20000c5e 	.word	0x20000c5e
 800a6b8:	20000c7c 	.word	0x20000c7c
 800a6bc:	20000c86 	.word	0x20000c86
 800a6c0:	20000c8e 	.word	0x20000c8e

0800a6c4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800a6c8:	f002 fa6c 	bl	800cba4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800a6cc:	bf00      	nop
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	af00      	add	r7, sp, #0
  return 1;
 800a6d4:	2301      	movs	r3, #1
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <_kill>:

int _kill(int pid, int sig)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a6ea:	f007 fc1d 	bl	8011f28 <__errno>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	2216      	movs	r2, #22
 800a6f2:	601a      	str	r2, [r3, #0]
  return -1;
 800a6f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3708      	adds	r7, #8
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <_exit>:

void _exit (int status)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a708:	f04f 31ff 	mov.w	r1, #4294967295
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff ffe7 	bl	800a6e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a712:	e7fe      	b.n	800a712 <_exit+0x12>

0800a714 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b086      	sub	sp, #24
 800a718:	af00      	add	r7, sp, #0
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a720:	2300      	movs	r3, #0
 800a722:	617b      	str	r3, [r7, #20]
 800a724:	e00a      	b.n	800a73c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a726:	f3af 8000 	nop.w
 800a72a:	4601      	mov	r1, r0
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	1c5a      	adds	r2, r3, #1
 800a730:	60ba      	str	r2, [r7, #8]
 800a732:	b2ca      	uxtb	r2, r1
 800a734:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	3301      	adds	r3, #1
 800a73a:	617b      	str	r3, [r7, #20]
 800a73c:	697a      	ldr	r2, [r7, #20]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	dbf0      	blt.n	800a726 <_read+0x12>
  }

  return len;
 800a744:	687b      	ldr	r3, [r7, #4]
}
 800a746:	4618      	mov	r0, r3
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b086      	sub	sp, #24
 800a752:	af00      	add	r7, sp, #0
 800a754:	60f8      	str	r0, [r7, #12]
 800a756:	60b9      	str	r1, [r7, #8]
 800a758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a75a:	2300      	movs	r3, #0
 800a75c:	617b      	str	r3, [r7, #20]
 800a75e:	e009      	b.n	800a774 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	60ba      	str	r2, [r7, #8]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	4618      	mov	r0, r3
 800a76a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	3301      	adds	r3, #1
 800a772:	617b      	str	r3, [r7, #20]
 800a774:	697a      	ldr	r2, [r7, #20]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	429a      	cmp	r2, r3
 800a77a:	dbf1      	blt.n	800a760 <_write+0x12>
  }
  return len;
 800a77c:	687b      	ldr	r3, [r7, #4]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <_close>:

int _close(int file)
{
 800a786:	b480      	push	{r7}
 800a788:	b083      	sub	sp, #12
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a78e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a792:	4618      	mov	r0, r3
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr

0800a79e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a79e:	b480      	push	{r7}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a7ae:	605a      	str	r2, [r3, #4]
  return 0;
 800a7b0:	2300      	movs	r3, #0
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr

0800a7be <_isatty>:

int _isatty(int file)
{
 800a7be:	b480      	push	{r7}
 800a7c0:	b083      	sub	sp, #12
 800a7c2:	af00      	add	r7, sp, #0
 800a7c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a7c6:	2301      	movs	r3, #1
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a7e0:	2300      	movs	r3, #0
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3714      	adds	r7, #20
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ec:	4770      	bx	lr
	...

0800a7f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a7f8:	4a14      	ldr	r2, [pc, #80]	; (800a84c <_sbrk+0x5c>)
 800a7fa:	4b15      	ldr	r3, [pc, #84]	; (800a850 <_sbrk+0x60>)
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a804:	4b13      	ldr	r3, [pc, #76]	; (800a854 <_sbrk+0x64>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d102      	bne.n	800a812 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a80c:	4b11      	ldr	r3, [pc, #68]	; (800a854 <_sbrk+0x64>)
 800a80e:	4a12      	ldr	r2, [pc, #72]	; (800a858 <_sbrk+0x68>)
 800a810:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a812:	4b10      	ldr	r3, [pc, #64]	; (800a854 <_sbrk+0x64>)
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	4413      	add	r3, r2
 800a81a:	693a      	ldr	r2, [r7, #16]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d207      	bcs.n	800a830 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a820:	f007 fb82 	bl	8011f28 <__errno>
 800a824:	4603      	mov	r3, r0
 800a826:	220c      	movs	r2, #12
 800a828:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a82a:	f04f 33ff 	mov.w	r3, #4294967295
 800a82e:	e009      	b.n	800a844 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a830:	4b08      	ldr	r3, [pc, #32]	; (800a854 <_sbrk+0x64>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a836:	4b07      	ldr	r3, [pc, #28]	; (800a854 <_sbrk+0x64>)
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4413      	add	r3, r2
 800a83e:	4a05      	ldr	r2, [pc, #20]	; (800a854 <_sbrk+0x64>)
 800a840:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a842:	68fb      	ldr	r3, [r7, #12]
}
 800a844:	4618      	mov	r0, r3
 800a846:	3718      	adds	r7, #24
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	20030000 	.word	0x20030000
 800a850:	00000400 	.word	0x00000400
 800a854:	2000a6bc 	.word	0x2000a6bc
 800a858:	2000a7b8 	.word	0x2000a7b8

0800a85c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a85c:	b480      	push	{r7}
 800a85e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800a860:	4b24      	ldr	r3, [pc, #144]	; (800a8f4 <SystemInit+0x98>)
 800a862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a866:	4a23      	ldr	r2, [pc, #140]	; (800a8f4 <SystemInit+0x98>)
 800a868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a86c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800a870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a87a:	f043 0301 	orr.w	r3, r3, #1
 800a87e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800a880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a884:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800a888:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800a88a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a894:	4b18      	ldr	r3, [pc, #96]	; (800a8f8 <SystemInit+0x9c>)
 800a896:	4013      	ands	r3, r2
 800a898:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800a89a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a89e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8a6:	f023 0305 	bic.w	r3, r3, #5
 800a8aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800a8ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a8b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8ba:	f023 0301 	bic.w	r3, r3, #1
 800a8be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800a8c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8c6:	4a0d      	ldr	r2, [pc, #52]	; (800a8fc <SystemInit+0xa0>)
 800a8c8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800a8ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8ce:	4a0b      	ldr	r2, [pc, #44]	; (800a8fc <SystemInit+0xa0>)
 800a8d0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a8d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8e0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a8e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	619a      	str	r2, [r3, #24]
}
 800a8ea:	bf00      	nop
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr
 800a8f4:	e000ed00 	.word	0xe000ed00
 800a8f8:	faf6fefb 	.word	0xfaf6fefb
 800a8fc:	22041000 	.word	0x22041000

0800a900 <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800a900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a902:	b08b      	sub	sp, #44	; 0x2c
 800a904:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800a906:	4a64      	ldr	r2, [pc, #400]	; (800aa98 <VCU_ReceiveMessages+0x198>)
 800a908:	2101      	movs	r1, #1
 800a90a:	2000      	movs	r0, #0
 800a90c:	f7f7 fe1a 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800a910:	e0b5      	b.n	800aa7e <VCU_ReceiveMessages+0x17e>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800a912:	2340      	movs	r3, #64	; 0x40
 800a914:	9300      	str	r3, [sp, #0]
 800a916:	4b61      	ldr	r3, [pc, #388]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a918:	4a61      	ldr	r2, [pc, #388]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800a91a:	2101      	movs	r1, #1
 800a91c:	2000      	movs	r0, #0
 800a91e:	f7f7 fc75 	bl	800220c <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_VERBOSE)) == (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800a922:	4b60      	ldr	r3, [pc, #384]	; (800aaa4 <VCU_ReceiveMessages+0x1a4>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	f003 030c 	and.w	r3, r3, #12
 800a92a:	2b0c      	cmp	r3, #12
 800a92c:	d12c      	bne.n	800a988 <VCU_ReceiveMessages+0x88>
 800a92e:	4b5c      	ldr	r3, [pc, #368]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a936:	b29b      	uxth	r3, r3
 800a938:	469c      	mov	ip, r3
 800a93a:	4b58      	ldr	r3, [pc, #352]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	469e      	mov	lr, r3
 800a940:	4b56      	ldr	r3, [pc, #344]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a942:	785b      	ldrb	r3, [r3, #1]
 800a944:	461a      	mov	r2, r3
 800a946:	4b55      	ldr	r3, [pc, #340]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a948:	789b      	ldrb	r3, [r3, #2]
 800a94a:	4619      	mov	r1, r3
 800a94c:	4b53      	ldr	r3, [pc, #332]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a94e:	78db      	ldrb	r3, [r3, #3]
 800a950:	4618      	mov	r0, r3
 800a952:	4b52      	ldr	r3, [pc, #328]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a954:	791b      	ldrb	r3, [r3, #4]
 800a956:	461c      	mov	r4, r3
 800a958:	4b50      	ldr	r3, [pc, #320]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a95a:	795b      	ldrb	r3, [r3, #5]
 800a95c:	461d      	mov	r5, r3
 800a95e:	4b4f      	ldr	r3, [pc, #316]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a960:	799b      	ldrb	r3, [r3, #6]
 800a962:	461e      	mov	r6, r3
 800a964:	4b4d      	ldr	r3, [pc, #308]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800a966:	79db      	ldrb	r3, [r3, #7]
 800a968:	9306      	str	r3, [sp, #24]
 800a96a:	9605      	str	r6, [sp, #20]
 800a96c:	9504      	str	r5, [sp, #16]
 800a96e:	9403      	str	r4, [sp, #12]
 800a970:	9002      	str	r0, [sp, #8]
 800a972:	9101      	str	r1, [sp, #4]
 800a974:	9200      	str	r2, [sp, #0]
 800a976:	4673      	mov	r3, lr
 800a978:	4662      	mov	r2, ip
 800a97a:	494b      	ldr	r1, [pc, #300]	; (800aaa8 <VCU_ReceiveMessages+0x1a8>)
 800a97c:	484b      	ldr	r0, [pc, #300]	; (800aaac <VCU_ReceiveMessages+0x1ac>)
 800a97e:	f008 fc3f 	bl	8013200 <siprintf>
 800a982:	484a      	ldr	r0, [pc, #296]	; (800aaac <VCU_ReceiveMessages+0x1ac>)
 800a984:	f7fa fcec 	bl	8005360 <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800a988:	4b45      	ldr	r3, [pc, #276]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800a98a:	881b      	ldrh	r3, [r3, #0]
 800a98c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a990:	b29b      	uxth	r3, r3
 800a992:	461a      	mov	r2, r3
 800a994:	4b46      	ldr	r3, [pc, #280]	; (800aab0 <VCU_ReceiveMessages+0x1b0>)
 800a996:	895b      	ldrh	r3, [r3, #10]
 800a998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d102      	bne.n	800a9a6 <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800a9a0:	f000 f8ea 	bl	800ab78 <VCU_ProcessVcuCommand>
 800a9a4:	e066      	b.n	800aa74 <VCU_ReceiveMessages+0x174>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800a9a6:	4b3e      	ldr	r3, [pc, #248]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	4b3f      	ldr	r3, [pc, #252]	; (800aab0 <VCU_ReceiveMessages+0x1b0>)
 800a9b4:	895b      	ldrh	r3, [r3, #10]
 800a9b6:	f203 4301 	addw	r3, r3, #1025	; 0x401
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d102      	bne.n	800a9c4 <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800a9be:	f000 f985 	bl	800accc <VCU_ProcessVcuTime>
 800a9c2:	e057      	b.n	800aa74 <VCU_ReceiveMessages+0x174>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800a9c4:	4b36      	ldr	r3, [pc, #216]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800a9c6:	881b      	ldrh	r3, [r3, #0]
 800a9c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4b37      	ldr	r3, [pc, #220]	; (800aab0 <VCU_ReceiveMessages+0x1b0>)
 800a9d2:	895b      	ldrh	r3, [r3, #10]
 800a9d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d102      	bne.n	800a9e2 <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800a9dc:	f000 f9c2 	bl	800ad64 <VCU_ProcessReadEeprom>
 800a9e0:	e048      	b.n	800aa74 <VCU_ReceiveMessages+0x174>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800a9e2:	4b2f      	ldr	r3, [pc, #188]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800a9e4:	881b      	ldrh	r3, [r3, #0]
 800a9e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	4b30      	ldr	r3, [pc, #192]	; (800aab0 <VCU_ReceiveMessages+0x1b0>)
 800a9f0:	895b      	ldrh	r3, [r3, #10]
 800a9f2:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d102      	bne.n	800aa00 <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800a9fa:	f000 fa6f 	bl	800aedc <VCU_ProcessWriteEeprom>
 800a9fe:	e039      	b.n	800aa74 <VCU_ReceiveMessages+0x174>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800aa00:	4b28      	ldr	r3, [pc, #160]	; (800aaa4 <VCU_ReceiveMessages+0x1a4>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	f003 0305 	and.w	r3, r3, #5
 800aa08:	2b05      	cmp	r3, #5
 800aa0a:	d133      	bne.n	800aa74 <VCU_ReceiveMessages+0x174>
 800aa0c:	4b24      	ldr	r3, [pc, #144]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	469c      	mov	ip, r3
 800aa18:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <VCU_ReceiveMessages+0x1a0>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800aa20:	469e      	mov	lr, r3
 800aa22:	4b1e      	ldr	r3, [pc, #120]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	461a      	mov	r2, r3
 800aa28:	4b1c      	ldr	r3, [pc, #112]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa2a:	785b      	ldrb	r3, [r3, #1]
 800aa2c:	4619      	mov	r1, r3
 800aa2e:	4b1b      	ldr	r3, [pc, #108]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa30:	789b      	ldrb	r3, [r3, #2]
 800aa32:	4618      	mov	r0, r3
 800aa34:	4b19      	ldr	r3, [pc, #100]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa36:	78db      	ldrb	r3, [r3, #3]
 800aa38:	461c      	mov	r4, r3
 800aa3a:	4b18      	ldr	r3, [pc, #96]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa3c:	791b      	ldrb	r3, [r3, #4]
 800aa3e:	461d      	mov	r5, r3
 800aa40:	4b16      	ldr	r3, [pc, #88]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa42:	795b      	ldrb	r3, [r3, #5]
 800aa44:	461e      	mov	r6, r3
 800aa46:	4b15      	ldr	r3, [pc, #84]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa48:	799b      	ldrb	r3, [r3, #6]
 800aa4a:	607b      	str	r3, [r7, #4]
 800aa4c:	4b13      	ldr	r3, [pc, #76]	; (800aa9c <VCU_ReceiveMessages+0x19c>)
 800aa4e:	79db      	ldrb	r3, [r3, #7]
 800aa50:	9307      	str	r3, [sp, #28]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	9306      	str	r3, [sp, #24]
 800aa56:	9605      	str	r6, [sp, #20]
 800aa58:	9504      	str	r5, [sp, #16]
 800aa5a:	9403      	str	r4, [sp, #12]
 800aa5c:	9002      	str	r0, [sp, #8]
 800aa5e:	9101      	str	r1, [sp, #4]
 800aa60:	9200      	str	r2, [sp, #0]
 800aa62:	4673      	mov	r3, lr
 800aa64:	4662      	mov	r2, ip
 800aa66:	4913      	ldr	r1, [pc, #76]	; (800aab4 <VCU_ReceiveMessages+0x1b4>)
 800aa68:	4810      	ldr	r0, [pc, #64]	; (800aaac <VCU_ReceiveMessages+0x1ac>)
 800aa6a:	f008 fbc9 	bl	8013200 <siprintf>
 800aa6e:	480f      	ldr	r0, [pc, #60]	; (800aaac <VCU_ReceiveMessages+0x1ac>)
 800aa70:	f7fa fc76 	bl	8005360 <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800aa74:	4a08      	ldr	r2, [pc, #32]	; (800aa98 <VCU_ReceiveMessages+0x198>)
 800aa76:	2101      	movs	r1, #1
 800aa78:	2000      	movs	r0, #0
 800aa7a:	f7f7 fd63 	bl	8002544 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800aa7e:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <VCU_ReceiveMessages+0x198>)
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	f003 0301 	and.w	r3, r3, #1
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f47f af43 	bne.w	800a912 <VCU_ReceiveMessages+0x12>
  }
}
 800aa8c:	bf00      	nop
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa96:	bf00      	nop
 800aa98:	2000a710 	.word	0x2000a710
 800aa9c:	2000a720 	.word	0x2000a720
 800aaa0:	2000a714 	.word	0x2000a714
 800aaa4:	2000000c 	.word	0x2000000c
 800aaa8:	080175cc 	.word	0x080175cc
 800aaac:	20000b64 	.word	0x20000b64
 800aab0:	2000a664 	.word	0x2000a664
 800aab4:	08017624 	.word	0x08017624

0800aab8 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af02      	add	r7, sp, #8
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800aac2:	2332      	movs	r3, #50	; 0x32
 800aac4:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	4a21      	ldr	r2, [pc, #132]	; (800ab50 <VCU_TransmitMessageQueue+0x98>)
 800aaca:	2102      	movs	r1, #2
 800aacc:	4618      	mov	r0, r3
 800aace:	f7f7 fd06 	bl	80024de <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800aad2:	7bfb      	ldrb	r3, [r7, #15]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d11a      	bne.n	800ab0e <VCU_TransmitMessageQueue+0x56>
      Nop();
 800aad8:	bf00      	nop
      Nop();
 800aada:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800aadc:	79f8      	ldrb	r0, [r7, #7]
 800aade:	4b1d      	ldr	r3, [pc, #116]	; (800ab54 <VCU_TransmitMessageQueue+0x9c>)
 800aae0:	4a1d      	ldr	r2, [pc, #116]	; (800ab58 <VCU_TransmitMessageQueue+0xa0>)
 800aae2:	491e      	ldr	r1, [pc, #120]	; (800ab5c <VCU_TransmitMessageQueue+0xa4>)
 800aae4:	f7f7 fdb5 	bl	8002652 <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800aae8:	4b1d      	ldr	r3, [pc, #116]	; (800ab60 <VCU_TransmitMessageQueue+0xa8>)
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	f003 0305 	and.w	r3, r3, #5
 800aaf0:	2b05      	cmp	r3, #5
 800aaf2:	d106      	bne.n	800ab02 <VCU_TransmitMessageQueue+0x4a>
 800aaf4:	491b      	ldr	r1, [pc, #108]	; (800ab64 <VCU_TransmitMessageQueue+0xac>)
 800aaf6:	481c      	ldr	r0, [pc, #112]	; (800ab68 <VCU_TransmitMessageQueue+0xb0>)
 800aaf8:	f008 fb82 	bl	8013200 <siprintf>
 800aafc:	481a      	ldr	r0, [pc, #104]	; (800ab68 <VCU_TransmitMessageQueue+0xb0>)
 800aafe:	f7fa fc2f 	bl	8005360 <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800ab02:	79fb      	ldrb	r3, [r7, #7]
 800ab04:	2102      	movs	r1, #2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f7f7 fa2c 	bl	8001f64 <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800ab0c:	e01c      	b.n	800ab48 <VCU_TransmitMessageQueue+0x90>
    }
    attempts--;
 800ab0e:	7bfb      	ldrb	r3, [r7, #15]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800ab14:	4b0e      	ldr	r3, [pc, #56]	; (800ab50 <VCU_TransmitMessageQueue+0x98>)
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	f003 0301 	and.w	r3, r3, #1
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0d2      	beq.n	800aac6 <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800ab20:	4b12      	ldr	r3, [pc, #72]	; (800ab6c <VCU_TransmitMessageQueue+0xb4>)
 800ab22:	791b      	ldrb	r3, [r3, #4]
 800ab24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7f8 fd9e 	bl	800366c <DRV_CANFDSPI_DlcToDataBytes>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73bb      	strb	r3, [r7, #14]

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800ab34:	7bbb      	ldrb	r3, [r7, #14]
 800ab36:	79f8      	ldrb	r0, [r7, #7]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	9201      	str	r2, [sp, #4]
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	4b0c      	ldr	r3, [pc, #48]	; (800ab70 <VCU_TransmitMessageQueue+0xb8>)
 800ab40:	4a0a      	ldr	r2, [pc, #40]	; (800ab6c <VCU_TransmitMessageQueue+0xb4>)
 800ab42:	2102      	movs	r1, #2
 800ab44:	f7f7 f91c 	bl	8001d80 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	2000a6c0 	.word	0x2000a6c0
 800ab54:	2000a762 	.word	0x2000a762
 800ab58:	2000a761 	.word	0x2000a761
 800ab5c:	2000a760 	.word	0x2000a760
 800ab60:	2000000c 	.word	0x2000000c
 800ab64:	08017690 	.word	0x08017690
 800ab68:	20000b64 	.word	0x20000b64
 800ab6c:	2000a6c4 	.word	0x2000a6c4
 800ab70:	2000a6d0 	.word	0x2000a6d0
 800ab74:	00000000 	.word	0x00000000

0800ab78 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800ab78:	b5b0      	push	{r4, r5, r7, lr}
 800ab7a:	b084      	sub	sp, #16
 800ab7c:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ab7e:	4b4a      	ldr	r3, [pc, #296]	; (800aca8 <VCU_ProcessVcuCommand+0x130>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a4a      	ldr	r2, [pc, #296]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800ab84:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ab86:	4b4a      	ldr	r3, [pc, #296]	; (800acb0 <VCU_ProcessVcuCommand+0x138>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8c:	4a47      	ldr	r2, [pc, #284]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800ab8e:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800ab90:	463b      	mov	r3, r7
 800ab92:	2208      	movs	r2, #8
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f007 fb20 	bl	80121dc <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800ab9c:	4a45      	ldr	r2, [pc, #276]	; (800acb4 <VCU_ProcessVcuCommand+0x13c>)
 800ab9e:	463b      	mov	r3, r7
 800aba0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aba4:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800aba8:	887a      	ldrh	r2, [r7, #2]
 800abaa:	4b40      	ldr	r3, [pc, #256]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800abac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50



  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800abb0:	4b3e      	ldr	r3, [pc, #248]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800abb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abb6:	783a      	ldrb	r2, [r7, #0]
 800abb8:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800abbc:	b2d2      	uxtb	r2, r2
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d03a      	beq.n	800ac38 <VCU_ProcessVcuCommand+0xc0>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800abc2:	783b      	ldrb	r3, [r7, #0]
 800abc4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	461a      	mov	r2, r3
 800abcc:	4b37      	ldr	r3, [pc, #220]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800abce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    switch (pack.vcuRequestedState) {
 800abd2:	4b36      	ldr	r3, [pc, #216]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800abd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abd8:	2b03      	cmp	r3, #3
 800abda:	d81b      	bhi.n	800ac14 <VCU_ProcessVcuCommand+0x9c>
 800abdc:	a201      	add	r2, pc, #4	; (adr r2, 800abe4 <VCU_ProcessVcuCommand+0x6c>)
 800abde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe2:	bf00      	nop
 800abe4:	0800ac3d 	.word	0x0800ac3d
 800abe8:	0800ac3d 	.word	0x0800ac3d
 800abec:	0800ac05 	.word	0x0800ac05
 800abf0:	0800abf5 	.word	0x0800abf5
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800abf4:	4b2d      	ldr	r3, [pc, #180]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800abf6:	2200      	movs	r2, #0
 800abf8:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800abfa:	4b2c      	ldr	r3, [pc, #176]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800abfc:	2200      	movs	r2, #0
 800abfe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800ac02:	e01e      	b.n	800ac42 <VCU_ProcessVcuCommand+0xca>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800ac04:	4b29      	ldr	r3, [pc, #164]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800ac06:	2200      	movs	r2, #0
 800ac08:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800ac0a:	4b28      	ldr	r3, [pc, #160]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800ac12:	e016      	b.n	800ac42 <VCU_ProcessVcuCommand+0xca>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800ac14:	4b28      	ldr	r3, [pc, #160]	; (800acb8 <VCU_ProcessVcuCommand+0x140>)
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	f003 0305 	and.w	r3, r3, #5
 800ac1c:	2b05      	cmp	r3, #5
 800ac1e:	d10f      	bne.n	800ac40 <VCU_ProcessVcuCommand+0xc8>
 800ac20:	4b22      	ldr	r3, [pc, #136]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800ac22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac26:	461a      	mov	r2, r3
 800ac28:	4924      	ldr	r1, [pc, #144]	; (800acbc <VCU_ProcessVcuCommand+0x144>)
 800ac2a:	4825      	ldr	r0, [pc, #148]	; (800acc0 <VCU_ProcessVcuCommand+0x148>)
 800ac2c:	f008 fae8 	bl	8013200 <siprintf>
 800ac30:	4823      	ldr	r0, [pc, #140]	; (800acc0 <VCU_ProcessVcuCommand+0x148>)
 800ac32:	f7fa fb95 	bl	8005360 <serialOut>
        break;
 800ac36:	e003      	b.n	800ac40 <VCU_ProcessVcuCommand+0xc8>
    }
  }
 800ac38:	bf00      	nop
 800ac3a:	e002      	b.n	800ac42 <VCU_ProcessVcuCommand+0xca>
        break;
 800ac3c:	bf00      	nop
 800ac3e:	e000      	b.n	800ac42 <VCU_ProcessVcuCommand+0xca>
        break;
 800ac40:	bf00      	nop
  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800ac42:	4b1d      	ldr	r3, [pc, #116]	; (800acb8 <VCU_ProcessVcuCommand+0x140>)
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	f003 0304 	and.w	r3, r3, #4
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d021      	beq.n	800ac92 <VCU_ProcessVcuCommand+0x11a>
 800ac4e:	4b1d      	ldr	r3, [pc, #116]	; (800acc4 <VCU_ProcessVcuCommand+0x14c>)
 800ac50:	881b      	ldrh	r3, [r3, #0]
 800ac52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	461c      	mov	r4, r3
 800ac5a:	4b14      	ldr	r3, [pc, #80]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800ac5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac60:	461d      	mov	r5, r3
 800ac62:	4b12      	ldr	r3, [pc, #72]	; (800acac <VCU_ProcessVcuCommand+0x134>)
 800ac64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7f5 fc3d 	bl	80004e8 <__aeabi_i2d>
 800ac6e:	a30c      	add	r3, pc, #48	; (adr r3, 800aca0 <VCU_ProcessVcuCommand+0x128>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	f7f5 fca2 	bl	80005bc <__aeabi_dmul>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	460b      	mov	r3, r1
 800ac7c:	e9cd 2300 	strd	r2, r3, [sp]
 800ac80:	462b      	mov	r3, r5
 800ac82:	4622      	mov	r2, r4
 800ac84:	4910      	ldr	r1, [pc, #64]	; (800acc8 <VCU_ProcessVcuCommand+0x150>)
 800ac86:	480e      	ldr	r0, [pc, #56]	; (800acc0 <VCU_ProcessVcuCommand+0x148>)
 800ac88:	f008 faba 	bl	8013200 <siprintf>
 800ac8c:	480c      	ldr	r0, [pc, #48]	; (800acc0 <VCU_ProcessVcuCommand+0x148>)
 800ac8e:	f7fa fb67 	bl	8005360 <serialOut>
}
 800ac92:	bf00      	nop
 800ac94:	3708      	adds	r7, #8
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bdb0      	pop	{r4, r5, r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	f3af 8000 	nop.w
 800aca0:	eb851eb8 	.word	0xeb851eb8
 800aca4:	3f8eb851 	.word	0x3f8eb851
 800aca8:	20000d20 	.word	0x20000d20
 800acac:	2000a664 	.word	0x2000a664
 800acb0:	200005d8 	.word	0x200005d8
 800acb4:	2000a720 	.word	0x2000a720
 800acb8:	2000000c 	.word	0x2000000c
 800acbc:	080176c0 	.word	0x080176c0
 800acc0:	20000b64 	.word	0x20000b64
 800acc4:	2000a6c4 	.word	0x2000a6c4
 800acc8:	080176e8 	.word	0x080176e8

0800accc <VCU_ProcessVcuTime>:

/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800acd2:	4b1c      	ldr	r3, [pc, #112]	; (800ad44 <VCU_ProcessVcuTime+0x78>)
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	f003 0304 	and.w	r3, r3, #4
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00c      	beq.n	800acf8 <VCU_ProcessVcuTime+0x2c>
 800acde:	4b1a      	ldr	r3, [pc, #104]	; (800ad48 <VCU_ProcessVcuTime+0x7c>)
 800ace0:	881b      	ldrh	r3, [r3, #0]
 800ace2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	461a      	mov	r2, r3
 800acea:	4918      	ldr	r1, [pc, #96]	; (800ad4c <VCU_ProcessVcuTime+0x80>)
 800acec:	4818      	ldr	r0, [pc, #96]	; (800ad50 <VCU_ProcessVcuTime+0x84>)
 800acee:	f008 fa87 	bl	8013200 <siprintf>
 800acf2:	4817      	ldr	r0, [pc, #92]	; (800ad50 <VCU_ProcessVcuTime+0x84>)
 800acf4:	f7fa fb34 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800acf8:	4b16      	ldr	r3, [pc, #88]	; (800ad54 <VCU_ProcessVcuTime+0x88>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a16      	ldr	r2, [pc, #88]	; (800ad58 <VCU_ProcessVcuTime+0x8c>)
 800acfe:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ad00:	4b16      	ldr	r3, [pc, #88]	; (800ad5c <VCU_ProcessVcuTime+0x90>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad06:	4a14      	ldr	r2, [pc, #80]	; (800ad58 <VCU_ProcessVcuTime+0x8c>)
 800ad08:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	2208      	movs	r2, #8
 800ad0e:	2100      	movs	r1, #0
 800ad10:	4618      	mov	r0, r3
 800ad12:	f007 fa63 	bl	80121dc <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800ad16:	463b      	mov	r3, r7
 800ad18:	2208      	movs	r2, #8
 800ad1a:	4911      	ldr	r1, [pc, #68]	; (800ad60 <VCU_ProcessVcuTime+0x94>)
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f007 fa4f 	bl	80121c0 <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800ad22:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad26:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800ad2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ad2e:	f7fa fb85 	bl	800543c <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <VCU_ProcessVcuTime+0x8c>)
 800ad34:	2201      	movs	r2, #1
 800ad36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

}
 800ad3a:	bf00      	nop
 800ad3c:	3710      	adds	r7, #16
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	2000000c 	.word	0x2000000c
 800ad48:	2000a6c4 	.word	0x2000a6c4
 800ad4c:	08017718 	.word	0x08017718
 800ad50:	20000b64 	.word	0x20000b64
 800ad54:	20000d20 	.word	0x20000d20
 800ad58:	2000a664 	.word	0x2000a664
 800ad5c:	200005d8 	.word	0x200005d8
 800ad60:	2000a720 	.word	0x2000a720

0800ad64 <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b086      	sub	sp, #24
 800ad68:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ad6e:	4b50      	ldr	r3, [pc, #320]	; (800aeb0 <VCU_ProcessReadEeprom+0x14c>)
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	f003 0304 	and.w	r3, r3, #4
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00c      	beq.n	800ad94 <VCU_ProcessReadEeprom+0x30>
 800ad7a:	4b4e      	ldr	r3, [pc, #312]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	461a      	mov	r2, r3
 800ad86:	494c      	ldr	r1, [pc, #304]	; (800aeb8 <VCU_ProcessReadEeprom+0x154>)
 800ad88:	484c      	ldr	r0, [pc, #304]	; (800aebc <VCU_ProcessReadEeprom+0x158>)
 800ad8a:	f008 fa39 	bl	8013200 <siprintf>
 800ad8e:	484b      	ldr	r0, [pc, #300]	; (800aebc <VCU_ProcessReadEeprom+0x158>)
 800ad90:	f7fa fae6 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ad94:	4b4a      	ldr	r3, [pc, #296]	; (800aec0 <VCU_ProcessReadEeprom+0x15c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4a4a      	ldr	r2, [pc, #296]	; (800aec4 <VCU_ProcessReadEeprom+0x160>)
 800ad9a:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ad9c:	4b4a      	ldr	r3, [pc, #296]	; (800aec8 <VCU_ProcessReadEeprom+0x164>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	4a48      	ldr	r2, [pc, #288]	; (800aec4 <VCU_ProcessReadEeprom+0x160>)
 800ada4:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800ada6:	f107 030c 	add.w	r3, r7, #12
 800adaa:	2208      	movs	r2, #8
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f007 fa14 	bl	80121dc <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800adb4:	4a45      	ldr	r2, [pc, #276]	; (800aecc <VCU_ProcessReadEeprom+0x168>)
 800adb6:	f107 030c 	add.w	r3, r7, #12
 800adba:	e892 0003 	ldmia.w	r2, {r0, r1}
 800adbe:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800adc2:	7b3b      	ldrb	r3, [r7, #12]
 800adc4:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800adc6:	463a      	mov	r2, r7
 800adc8:	8afb      	ldrh	r3, [r7, #22]
 800adca:	4611      	mov	r1, r2
 800adcc:	4618      	mov	r0, r3
 800adce:	f7f9 fa8d 	bl	80042ec <EE_ReadVariable32bits>
 800add2:	4603      	mov	r3, r0
 800add4:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800add6:	8abb      	ldrh	r3, [r7, #20]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d156      	bne.n	800ae8a <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f36f 231f 	bfc	r3, #8, #24
 800ade2:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800ade8:	8afb      	ldrh	r3, [r7, #22]
 800adea:	b2db      	uxtb	r3, r3
 800adec:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800adee:	4b31      	ldr	r3, [pc, #196]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800adf0:	2200      	movs	r2, #0
 800adf2:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800adf4:	4b2f      	ldr	r3, [pc, #188]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800adf6:	2200      	movs	r2, #0
 800adf8:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800adfa:	4b2e      	ldr	r3, [pc, #184]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800ae00:	4b33      	ldr	r3, [pc, #204]	; (800aed0 <VCU_ProcessReadEeprom+0x16c>)
 800ae02:	461a      	mov	r2, r3
 800ae04:	1d3b      	adds	r3, r7, #4
 800ae06:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ae0a:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800ae0e:	4b2d      	ldr	r3, [pc, #180]	; (800aec4 <VCU_ProcessReadEeprom+0x160>)
 800ae10:	895b      	ldrh	r3, [r3, #10]
 800ae12:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae1c:	b299      	uxth	r1, r3
 800ae1e:	4a25      	ldr	r2, [pc, #148]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ae20:	8813      	ldrh	r3, [r2, #0]
 800ae22:	f361 030a 	bfi	r3, r1, #0, #11
 800ae26:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800ae28:	4a22      	ldr	r2, [pc, #136]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ae2a:	6813      	ldr	r3, [r2, #0]
 800ae2c:	f36f 23dc 	bfc	r3, #11, #18
 800ae30:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ae32:	4a20      	ldr	r2, [pc, #128]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ae34:	7913      	ldrb	r3, [r2, #4]
 800ae36:	f36f 1386 	bfc	r3, #6, #1
 800ae3a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ae3c:	4a1d      	ldr	r2, [pc, #116]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ae3e:	7913      	ldrb	r3, [r2, #4]
 800ae40:	2108      	movs	r1, #8
 800ae42:	f361 0303 	bfi	r3, r1, #0, #4
 800ae46:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ae48:	4a1a      	ldr	r2, [pc, #104]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ae4a:	7913      	ldrb	r3, [r2, #4]
 800ae4c:	f36f 13c7 	bfc	r3, #7, #1
 800ae50:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ae52:	4a18      	ldr	r2, [pc, #96]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ae54:	7913      	ldrb	r3, [r2, #4]
 800ae56:	f36f 1304 	bfc	r3, #4, #1
 800ae5a:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ae5c:	4b14      	ldr	r3, [pc, #80]	; (800aeb0 <VCU_ProcessReadEeprom+0x14c>)
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00c      	beq.n	800ae82 <VCU_ProcessReadEeprom+0x11e>
 800ae68:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <VCU_ProcessReadEeprom+0x150>)
 800ae6a:	881b      	ldrh	r3, [r3, #0]
 800ae6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	4917      	ldr	r1, [pc, #92]	; (800aed4 <VCU_ProcessReadEeprom+0x170>)
 800ae76:	4811      	ldr	r0, [pc, #68]	; (800aebc <VCU_ProcessReadEeprom+0x158>)
 800ae78:	f008 f9c2 	bl	8013200 <siprintf>
 800ae7c:	480f      	ldr	r0, [pc, #60]	; (800aebc <VCU_ProcessReadEeprom+0x158>)
 800ae7e:	f7fa fa6f 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ae82:	2000      	movs	r0, #0
 800ae84:	f7ff fe18 	bl	800aab8 <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800ae88:	e00e      	b.n	800aea8 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800ae8a:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <VCU_ProcessReadEeprom+0x14c>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	f003 0301 	and.w	r3, r3, #1
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d008      	beq.n	800aea8 <VCU_ProcessReadEeprom+0x144>
 800ae96:	8abb      	ldrh	r3, [r7, #20]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	490f      	ldr	r1, [pc, #60]	; (800aed8 <VCU_ProcessReadEeprom+0x174>)
 800ae9c:	4807      	ldr	r0, [pc, #28]	; (800aebc <VCU_ProcessReadEeprom+0x158>)
 800ae9e:	f008 f9af 	bl	8013200 <siprintf>
 800aea2:	4806      	ldr	r0, [pc, #24]	; (800aebc <VCU_ProcessReadEeprom+0x158>)
 800aea4:	f7fa fa5c 	bl	8005360 <serialOut>
}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	2000000c 	.word	0x2000000c
 800aeb4:	2000a6c4 	.word	0x2000a6c4
 800aeb8:	08017730 	.word	0x08017730
 800aebc:	20000b64 	.word	0x20000b64
 800aec0:	20000d20 	.word	0x20000d20
 800aec4:	2000a664 	.word	0x2000a664
 800aec8:	200005d8 	.word	0x200005d8
 800aecc:	2000a720 	.word	0x2000a720
 800aed0:	2000a6d0 	.word	0x2000a6d0
 800aed4:	08017750 	.word	0x08017750
 800aed8:	08017770 	.word	0x08017770

0800aedc <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800aedc:	b580      	push	{r7, lr}
 800aede:	b086      	sub	sp, #24
 800aee0:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800aee2:	2300      	movs	r3, #0
 800aee4:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800aee6:	4b52      	ldr	r3, [pc, #328]	; (800b030 <VCU_ProcessWriteEeprom+0x154>)
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	f003 0304 	and.w	r3, r3, #4
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d00c      	beq.n	800af0c <VCU_ProcessWriteEeprom+0x30>
 800aef2:	4b50      	ldr	r3, [pc, #320]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	461a      	mov	r2, r3
 800aefe:	494e      	ldr	r1, [pc, #312]	; (800b038 <VCU_ProcessWriteEeprom+0x15c>)
 800af00:	484e      	ldr	r0, [pc, #312]	; (800b03c <VCU_ProcessWriteEeprom+0x160>)
 800af02:	f008 f97d 	bl	8013200 <siprintf>
 800af06:	484d      	ldr	r0, [pc, #308]	; (800b03c <VCU_ProcessWriteEeprom+0x160>)
 800af08:	f7fa fa2a 	bl	8005360 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800af0c:	4b4c      	ldr	r3, [pc, #304]	; (800b040 <VCU_ProcessWriteEeprom+0x164>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a4c      	ldr	r2, [pc, #304]	; (800b044 <VCU_ProcessWriteEeprom+0x168>)
 800af12:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800af14:	4b4c      	ldr	r3, [pc, #304]	; (800b048 <VCU_ProcessWriteEeprom+0x16c>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1a:	4a4a      	ldr	r2, [pc, #296]	; (800b044 <VCU_ProcessWriteEeprom+0x168>)
 800af1c:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800af1e:	f107 0308 	add.w	r3, r7, #8
 800af22:	2208      	movs	r2, #8
 800af24:	2100      	movs	r1, #0
 800af26:	4618      	mov	r0, r3
 800af28:	f007 f958 	bl	80121dc <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800af2c:	4a47      	ldr	r2, [pc, #284]	; (800b04c <VCU_ProcessWriteEeprom+0x170>)
 800af2e:	f107 0308 	add.w	r3, r7, #8
 800af32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800af36:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800af3a:	7a3b      	ldrb	r3, [r7, #8]
 800af3c:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800af42:	8a7b      	ldrh	r3, [r7, #18]
 800af44:	6979      	ldr	r1, [r7, #20]
 800af46:	4618      	mov	r0, r3
 800af48:	f7fa fb70 	bl	800562c <StoreEEPROM>
 800af4c:	4603      	mov	r3, r0
 800af4e:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800af50:	8a3b      	ldrh	r3, [r7, #16]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d156      	bne.n	800b004 <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	f36f 231f 	bfc	r3, #8, #24
 800af5c:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800af62:	8a7b      	ldrh	r3, [r7, #18]
 800af64:	b2db      	uxtb	r3, r3
 800af66:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800af68:	4b32      	ldr	r3, [pc, #200]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800af6a:	2200      	movs	r2, #0
 800af6c:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800af6e:	4b31      	ldr	r3, [pc, #196]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800af70:	2200      	movs	r2, #0
 800af72:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800af74:	4b2f      	ldr	r3, [pc, #188]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800af76:	2200      	movs	r2, #0
 800af78:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800af7a:	4b35      	ldr	r3, [pc, #212]	; (800b050 <VCU_ProcessWriteEeprom+0x174>)
 800af7c:	461a      	mov	r2, r3
 800af7e:	463b      	mov	r3, r7
 800af80:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af84:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800af88:	4b2e      	ldr	r3, [pc, #184]	; (800b044 <VCU_ProcessWriteEeprom+0x168>)
 800af8a:	895b      	ldrh	r3, [r3, #10]
 800af8c:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800af90:	b29b      	uxth	r3, r3
 800af92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af96:	b299      	uxth	r1, r3
 800af98:	4a26      	ldr	r2, [pc, #152]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800af9a:	8813      	ldrh	r3, [r2, #0]
 800af9c:	f361 030a 	bfi	r3, r1, #0, #11
 800afa0:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800afa2:	4a24      	ldr	r2, [pc, #144]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800afa4:	6813      	ldr	r3, [r2, #0]
 800afa6:	f36f 23dc 	bfc	r3, #11, #18
 800afaa:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800afac:	4a21      	ldr	r2, [pc, #132]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800afae:	7913      	ldrb	r3, [r2, #4]
 800afb0:	f36f 1386 	bfc	r3, #6, #1
 800afb4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800afb6:	4a1f      	ldr	r2, [pc, #124]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800afb8:	7913      	ldrb	r3, [r2, #4]
 800afba:	2108      	movs	r1, #8
 800afbc:	f361 0303 	bfi	r3, r1, #0, #4
 800afc0:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800afc2:	4a1c      	ldr	r2, [pc, #112]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800afc4:	7913      	ldrb	r3, [r2, #4]
 800afc6:	f36f 13c7 	bfc	r3, #7, #1
 800afca:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800afcc:	4a19      	ldr	r2, [pc, #100]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800afce:	7913      	ldrb	r3, [r2, #4]
 800afd0:	f36f 1304 	bfc	r3, #4, #1
 800afd4:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800afd6:	4b16      	ldr	r3, [pc, #88]	; (800b030 <VCU_ProcessWriteEeprom+0x154>)
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	f003 0304 	and.w	r3, r3, #4
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00c      	beq.n	800affc <VCU_ProcessWriteEeprom+0x120>
 800afe2:	4b14      	ldr	r3, [pc, #80]	; (800b034 <VCU_ProcessWriteEeprom+0x158>)
 800afe4:	881b      	ldrh	r3, [r3, #0]
 800afe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800afea:	b29b      	uxth	r3, r3
 800afec:	461a      	mov	r2, r3
 800afee:	4919      	ldr	r1, [pc, #100]	; (800b054 <VCU_ProcessWriteEeprom+0x178>)
 800aff0:	4812      	ldr	r0, [pc, #72]	; (800b03c <VCU_ProcessWriteEeprom+0x160>)
 800aff2:	f008 f905 	bl	8013200 <siprintf>
 800aff6:	4811      	ldr	r0, [pc, #68]	; (800b03c <VCU_ProcessWriteEeprom+0x160>)
 800aff8:	f7fa f9b2 	bl	8005360 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800affc:	2000      	movs	r0, #0
 800affe:	f7ff fd5b 	bl	800aab8 <VCU_TransmitMessageQueue>
 800b002:	e00e      	b.n	800b022 <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800b004:	4b0a      	ldr	r3, [pc, #40]	; (800b030 <VCU_ProcessWriteEeprom+0x154>)
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	f003 0301 	and.w	r3, r3, #1
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d008      	beq.n	800b022 <VCU_ProcessWriteEeprom+0x146>
 800b010:	8a3b      	ldrh	r3, [r7, #16]
 800b012:	461a      	mov	r2, r3
 800b014:	4910      	ldr	r1, [pc, #64]	; (800b058 <VCU_ProcessWriteEeprom+0x17c>)
 800b016:	4809      	ldr	r0, [pc, #36]	; (800b03c <VCU_ProcessWriteEeprom+0x160>)
 800b018:	f008 f8f2 	bl	8013200 <siprintf>
 800b01c:	4807      	ldr	r0, [pc, #28]	; (800b03c <VCU_ProcessWriteEeprom+0x160>)
 800b01e:	f7fa f99f 	bl	8005360 <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800b022:	f7fb fb43 	bl	80066ac <PCU_Initialize>
}
 800b026:	bf00      	nop
 800b028:	3718      	adds	r7, #24
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2000000c 	.word	0x2000000c
 800b034:	2000a6c4 	.word	0x2000a6c4
 800b038:	08017794 	.word	0x08017794
 800b03c:	20000b64 	.word	0x20000b64
 800b040:	20000d20 	.word	0x20000d20
 800b044:	2000a664 	.word	0x2000a664
 800b048:	200005d8 	.word	0x200005d8
 800b04c:	2000a720 	.word	0x2000a720
 800b050:	2000a6d0 	.word	0x2000a6d0
 800b054:	08017750 	.word	0x08017750
 800b058:	080177b4 	.word	0x080177b4

0800b05c <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800b05c:	b480      	push	{r7}
 800b05e:	b085      	sub	sp, #20
 800b060:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800b062:	4b16      	ldr	r3, [pc, #88]	; (800b0bc <VCU_TicksSinceLastMessage+0x60>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b068:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800b06a:	4b15      	ldr	r3, [pc, #84]	; (800b0c0 <VCU_TicksSinceLastMessage+0x64>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800b070:	4b14      	ldr	r3, [pc, #80]	; (800b0c4 <VCU_TicksSinceLastMessage+0x68>)
 800b072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b074:	687a      	ldr	r2, [r7, #4]
 800b076:	429a      	cmp	r2, r3
 800b078:	d105      	bne.n	800b086 <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800b07a:	4b12      	ldr	r3, [pc, #72]	; (800b0c4 <VCU_TicksSinceLastMessage+0x68>)
 800b07c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	e013      	b.n	800b0ae <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800b086:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <VCU_TicksSinceLastMessage+0x60>)
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	4b0e      	ldr	r3, [pc, #56]	; (800b0c4 <VCU_TicksSinceLastMessage+0x68>)
 800b08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b08e:	1ad2      	subs	r2, r2, r3
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <VCU_TicksSinceLastMessage+0x60>)
 800b092:	68db      	ldr	r3, [r3, #12]
 800b094:	3301      	adds	r3, #1
 800b096:	490b      	ldr	r1, [pc, #44]	; (800b0c4 <VCU_TicksSinceLastMessage+0x68>)
 800b098:	6c89      	ldr	r1, [r1, #72]	; 0x48
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	1a41      	subs	r1, r0, r1
 800b09e:	3901      	subs	r1, #1
 800b0a0:	fb01 f303 	mul.w	r3, r1, r3
 800b0a4:	441a      	add	r2, r3
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	200005d8 	.word	0x200005d8
 800b0c0:	20000d20 	.word	0x20000d20
 800b0c4:	2000a664 	.word	0x2000a664

0800b0c8 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b086      	sub	sp, #24
 800b0cc:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800b0ce:	f04f 0300 	mov.w	r3, #0
 800b0d2:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800b0da:	4b67      	ldr	r3, [pc, #412]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b0dc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f5 fa01 	bl	80004e8 <__aeabi_i2d>
 800b0e6:	f04f 0200 	mov.w	r2, #0
 800b0ea:	4b64      	ldr	r3, [pc, #400]	; (800b27c <VCU_TransmitBmsState+0x1b4>)
 800b0ec:	f7f5 fa66 	bl	80005bc <__aeabi_dmul>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	f04f 0300 	mov.w	r3, #0
 800b100:	f7f5 f8a6 	bl	8000250 <__adddf3>
 800b104:	4602      	mov	r2, r0
 800b106:	460b      	mov	r3, r1
 800b108:	4610      	mov	r0, r2
 800b10a:	4619      	mov	r1, r3
 800b10c:	f7f5 fd4e 	bl	8000bac <__aeabi_d2f>
 800b110:	4603      	mov	r3, r0
 800b112:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800b114:	6978      	ldr	r0, [r7, #20]
 800b116:	f7f5 f9f9 	bl	800050c <__aeabi_f2d>
 800b11a:	a355      	add	r3, pc, #340	; (adr r3, 800b270 <VCU_TransmitBmsState+0x1a8>)
 800b11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b120:	f7f5 fb76 	bl	8000810 <__aeabi_ddiv>
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4610      	mov	r0, r2
 800b12a:	4619      	mov	r1, r3
 800b12c:	f7f5 fd3e 	bl	8000bac <__aeabi_d2f>
 800b130:	4603      	mov	r3, r0
 800b132:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800b134:	edd7 7a04 	vldr	s15, [r7, #16]
 800b138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b13c:	edc7 7a01 	vstr	s15, [r7, #4]
 800b140:	793b      	ldrb	r3, [r7, #4]
 800b142:	b2da      	uxtb	r2, r3
 800b144:	893b      	ldrh	r3, [r7, #8]
 800b146:	f362 0389 	bfi	r3, r2, #2, #8
 800b14a:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800b14c:	4b4a      	ldr	r3, [pc, #296]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b14e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b152:	f003 0303 	and.w	r3, r3, #3
 800b156:	b2da      	uxtb	r2, r3
 800b158:	7a3b      	ldrb	r3, [r7, #8]
 800b15a:	f362 0301 	bfi	r3, r2, #0, #2
 800b15e:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800b160:	4b45      	ldr	r3, [pc, #276]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b162:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b166:	f003 0303 	and.w	r3, r3, #3
 800b16a:	b2da      	uxtb	r2, r3
 800b16c:	7a7b      	ldrb	r3, [r7, #9]
 800b16e:	f362 0383 	bfi	r3, r2, #2, #2
 800b172:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800b174:	4b40      	ldr	r3, [pc, #256]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b176:	7d9b      	ldrb	r3, [r3, #22]
 800b178:	f003 0301 	and.w	r3, r3, #1
 800b17c:	b2da      	uxtb	r2, r3
 800b17e:	7a7b      	ldrb	r3, [r7, #9]
 800b180:	f362 1304 	bfi	r3, r2, #4, #1
 800b184:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800b186:	4b3c      	ldr	r3, [pc, #240]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b188:	7d5b      	ldrb	r3, [r3, #21]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	b2da      	uxtb	r2, r3
 800b190:	7a7b      	ldrb	r3, [r7, #9]
 800b192:	f362 1345 	bfi	r3, r2, #5, #1
 800b196:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800b198:	4b37      	ldr	r3, [pc, #220]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b19a:	7ddb      	ldrb	r3, [r3, #23]
 800b19c:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800b19e:	4b36      	ldr	r3, [pc, #216]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b1a0:	7e1b      	ldrb	r3, [r3, #24]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800b1a6:	7a7b      	ldrb	r3, [r7, #9]
 800b1a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ac:	727b      	strb	r3, [r7, #9]
 800b1ae:	e003      	b.n	800b1b8 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800b1b0:	7a7b      	ldrb	r3, [r7, #9]
 800b1b2:	f36f 1386 	bfc	r3, #6, #1
 800b1b6:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800b1b8:	4b2f      	ldr	r3, [pc, #188]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b1ba:	7d1b      	ldrb	r3, [r3, #20]
 800b1bc:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800b1be:	7a7b      	ldrb	r3, [r7, #9]
 800b1c0:	f36f 13c7 	bfc	r3, #7, #1
 800b1c4:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b1ca:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b1d0:	4b2b      	ldr	r3, [pc, #172]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b1d6:	4b2a      	ldr	r3, [pc, #168]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800b1dc:	4b29      	ldr	r3, [pc, #164]	; (800b284 <VCU_TransmitBmsState+0x1bc>)
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f107 0308 	add.w	r3, r7, #8
 800b1e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b1e8:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b1ec:	4b22      	ldr	r3, [pc, #136]	; (800b278 <VCU_TransmitBmsState+0x1b0>)
 800b1ee:	895b      	ldrh	r3, [r3, #10]
 800b1f0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b1fa:	b299      	uxth	r1, r3
 800b1fc:	4a20      	ldr	r2, [pc, #128]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b1fe:	8813      	ldrh	r3, [r2, #0]
 800b200:	f361 030a 	bfi	r3, r1, #0, #11
 800b204:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b208:	6813      	ldr	r3, [r2, #0]
 800b20a:	f36f 23dc 	bfc	r3, #11, #18
 800b20e:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b210:	4a1b      	ldr	r2, [pc, #108]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b212:	7913      	ldrb	r3, [r2, #4]
 800b214:	f36f 1386 	bfc	r3, #6, #1
 800b218:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b21a:	4a19      	ldr	r2, [pc, #100]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b21c:	7913      	ldrb	r3, [r2, #4]
 800b21e:	2108      	movs	r1, #8
 800b220:	f361 0303 	bfi	r3, r1, #0, #4
 800b224:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b226:	4a16      	ldr	r2, [pc, #88]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b228:	7913      	ldrb	r3, [r2, #4]
 800b22a:	f36f 13c7 	bfc	r3, #7, #1
 800b22e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b230:	4a13      	ldr	r2, [pc, #76]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b232:	7913      	ldrb	r3, [r2, #4]
 800b234:	f36f 1304 	bfc	r3, #4, #1
 800b238:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b23a:	4b13      	ldr	r3, [pc, #76]	; (800b288 <VCU_TransmitBmsState+0x1c0>)
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 0304 	and.w	r3, r3, #4
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00c      	beq.n	800b260 <VCU_TransmitBmsState+0x198>
 800b246:	4b0e      	ldr	r3, [pc, #56]	; (800b280 <VCU_TransmitBmsState+0x1b8>)
 800b248:	881b      	ldrh	r3, [r3, #0]
 800b24a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b24e:	b29b      	uxth	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	490e      	ldr	r1, [pc, #56]	; (800b28c <VCU_TransmitBmsState+0x1c4>)
 800b254:	480e      	ldr	r0, [pc, #56]	; (800b290 <VCU_TransmitBmsState+0x1c8>)
 800b256:	f007 ffd3 	bl	8013200 <siprintf>
 800b25a:	480d      	ldr	r0, [pc, #52]	; (800b290 <VCU_TransmitBmsState+0x1c8>)
 800b25c:	f7fa f880 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b260:	2000      	movs	r0, #0
 800b262:	f7ff fc29 	bl	800aab8 <VCU_TransmitMessageQueue>
}
 800b266:	bf00      	nop
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
 800b26e:	bf00      	nop
 800b270:	9999999a 	.word	0x9999999a
 800b274:	3fd99999 	.word	0x3fd99999
 800b278:	2000a664 	.word	0x2000a664
 800b27c:	3fe00000 	.word	0x3fe00000
 800b280:	2000a6c4 	.word	0x2000a6c4
 800b284:	2000a6d0 	.word	0x2000a6d0
 800b288:	2000000c 	.word	0x2000000c
 800b28c:	080177d8 	.word	0x080177d8
 800b290:	20000b64 	.word	0x20000b64
 800b294:	00000000 	.word	0x00000000

0800b298 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b2a4:	f04f 0300 	mov.w	r3, #0
 800b2a8:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800b2aa:	4b65      	ldr	r3, [pc, #404]	; (800b440 <VCU_TransmitBmsData1+0x1a8>)
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7f5 f90a 	bl	80004c8 <__aeabi_ui2d>
 800b2b4:	a35e      	add	r3, pc, #376	; (adr r3, 800b430 <VCU_TransmitBmsData1+0x198>)
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	f7f5 f97f 	bl	80005bc <__aeabi_dmul>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f04f 0200 	mov.w	r2, #0
 800b2ca:	4b5e      	ldr	r3, [pc, #376]	; (800b444 <VCU_TransmitBmsData1+0x1ac>)
 800b2cc:	f7f4 ffbe 	bl	800024c <__aeabi_dsub>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4610      	mov	r0, r2
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	f7f5 fc68 	bl	8000bac <__aeabi_d2f>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f7f5 f913 	bl	800050c <__aeabi_f2d>
 800b2e6:	a352      	add	r3, pc, #328	; (adr r3, 800b430 <VCU_TransmitBmsData1+0x198>)
 800b2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ec:	f7f5 fa90 	bl	8000810 <__aeabi_ddiv>
 800b2f0:	4602      	mov	r2, r0
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	4610      	mov	r0, r2
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	f04f 0200 	mov.w	r2, #0
 800b2fc:	4b52      	ldr	r3, [pc, #328]	; (800b448 <VCU_TransmitBmsData1+0x1b0>)
 800b2fe:	f7f4 ffa7 	bl	8000250 <__adddf3>
 800b302:	4602      	mov	r2, r0
 800b304:	460b      	mov	r3, r1
 800b306:	4610      	mov	r0, r2
 800b308:	4619      	mov	r1, r3
 800b30a:	f7f5 fc4f 	bl	8000bac <__aeabi_d2f>
 800b30e:	4603      	mov	r3, r0
 800b310:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800b312:	edd7 7a02 	vldr	s15, [r7, #8]
 800b316:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b31a:	ee17 3a90 	vmov	r3, s15
 800b31e:	b29b      	uxth	r3, r3
 800b320:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800b322:	4b47      	ldr	r3, [pc, #284]	; (800b440 <VCU_TransmitBmsData1+0x1a8>)
 800b324:	899b      	ldrh	r3, [r3, #12]
 800b326:	4618      	mov	r0, r3
 800b328:	f7f5 f8de 	bl	80004e8 <__aeabi_i2d>
 800b32c:	a342      	add	r3, pc, #264	; (adr r3, 800b438 <VCU_TransmitBmsData1+0x1a0>)
 800b32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b332:	f7f5 f943 	bl	80005bc <__aeabi_dmul>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	4610      	mov	r0, r2
 800b33c:	4619      	mov	r1, r3
 800b33e:	f04f 0200 	mov.w	r2, #0
 800b342:	f04f 0300 	mov.w	r3, #0
 800b346:	f7f4 ff83 	bl	8000250 <__adddf3>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4610      	mov	r0, r2
 800b350:	4619      	mov	r1, r3
 800b352:	f7f5 fc2b 	bl	8000bac <__aeabi_d2f>
 800b356:	4603      	mov	r3, r0
 800b358:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f7f5 f8d6 	bl	800050c <__aeabi_f2d>
 800b360:	a333      	add	r3, pc, #204	; (adr r3, 800b430 <VCU_TransmitBmsData1+0x198>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	f7f5 fa53 	bl	8000810 <__aeabi_ddiv>
 800b36a:	4602      	mov	r2, r0
 800b36c:	460b      	mov	r3, r1
 800b36e:	4610      	mov	r0, r2
 800b370:	4619      	mov	r1, r3
 800b372:	f7f5 fc1b 	bl	8000bac <__aeabi_d2f>
 800b376:	4603      	mov	r3, r0
 800b378:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800b37a:	edd7 7a02 	vldr	s15, [r7, #8]
 800b37e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b382:	ee17 3a90 	vmov	r3, s15
 800b386:	b29b      	uxth	r3, r3
 800b388:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800b38a:	2300      	movs	r3, #0
 800b38c:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b38e:	4b2f      	ldr	r3, [pc, #188]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b390:	2200      	movs	r2, #0
 800b392:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b394:	4b2d      	ldr	r3, [pc, #180]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b396:	2200      	movs	r2, #0
 800b398:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b39a:	4b2c      	ldr	r3, [pc, #176]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800b3a0:	4b2b      	ldr	r3, [pc, #172]	; (800b450 <VCU_TransmitBmsData1+0x1b8>)
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	463b      	mov	r3, r7
 800b3a6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b3aa:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b3ae:	4b24      	ldr	r3, [pc, #144]	; (800b440 <VCU_TransmitBmsData1+0x1a8>)
 800b3b0:	895b      	ldrh	r3, [r3, #10]
 800b3b2:	f203 4321 	addw	r3, r3, #1057	; 0x421
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b3bc:	b299      	uxth	r1, r3
 800b3be:	4a23      	ldr	r2, [pc, #140]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b3c0:	8813      	ldrh	r3, [r2, #0]
 800b3c2:	f361 030a 	bfi	r3, r1, #0, #11
 800b3c6:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b3c8:	4a20      	ldr	r2, [pc, #128]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b3ca:	6813      	ldr	r3, [r2, #0]
 800b3cc:	f36f 23dc 	bfc	r3, #11, #18
 800b3d0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b3d2:	4a1e      	ldr	r2, [pc, #120]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b3d4:	7913      	ldrb	r3, [r2, #4]
 800b3d6:	f36f 1386 	bfc	r3, #6, #1
 800b3da:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b3dc:	4a1b      	ldr	r2, [pc, #108]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b3de:	7913      	ldrb	r3, [r2, #4]
 800b3e0:	2108      	movs	r1, #8
 800b3e2:	f361 0303 	bfi	r3, r1, #0, #4
 800b3e6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b3e8:	4a18      	ldr	r2, [pc, #96]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b3ea:	7913      	ldrb	r3, [r2, #4]
 800b3ec:	f36f 13c7 	bfc	r3, #7, #1
 800b3f0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b3f2:	4a16      	ldr	r2, [pc, #88]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b3f4:	7913      	ldrb	r3, [r2, #4]
 800b3f6:	f36f 1304 	bfc	r3, #4, #1
 800b3fa:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b3fc:	4b15      	ldr	r3, [pc, #84]	; (800b454 <VCU_TransmitBmsData1+0x1bc>)
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00c      	beq.n	800b422 <VCU_TransmitBmsData1+0x18a>
 800b408:	4b10      	ldr	r3, [pc, #64]	; (800b44c <VCU_TransmitBmsData1+0x1b4>)
 800b40a:	881b      	ldrh	r3, [r3, #0]
 800b40c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b410:	b29b      	uxth	r3, r3
 800b412:	461a      	mov	r2, r3
 800b414:	4910      	ldr	r1, [pc, #64]	; (800b458 <VCU_TransmitBmsData1+0x1c0>)
 800b416:	4811      	ldr	r0, [pc, #68]	; (800b45c <VCU_TransmitBmsData1+0x1c4>)
 800b418:	f007 fef2 	bl	8013200 <siprintf>
 800b41c:	480f      	ldr	r0, [pc, #60]	; (800b45c <VCU_TransmitBmsData1+0x1c4>)
 800b41e:	f7f9 ff9f 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b422:	2000      	movs	r0, #0
 800b424:	f7ff fb48 	bl	800aab8 <VCU_TransmitMessageQueue>
}
 800b428:	bf00      	nop
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	9999999a 	.word	0x9999999a
 800b434:	3fa99999 	.word	0x3fa99999
 800b438:	eb851eb8 	.word	0xeb851eb8
 800b43c:	3f8eb851 	.word	0x3f8eb851
 800b440:	2000a664 	.word	0x2000a664
 800b444:	40990000 	.word	0x40990000
 800b448:	40df4000 	.word	0x40df4000
 800b44c:	2000a6c4 	.word	0x2000a6c4
 800b450:	2000a6d0 	.word	0x2000a6d0
 800b454:	2000000c 	.word	0x2000000c
 800b458:	080177f0 	.word	0x080177f0
 800b45c:	20000b64 	.word	0x20000b64

0800b460 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b46c:	f04f 0300 	mov.w	r3, #0
 800b470:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800b472:	4b95      	ldr	r3, [pc, #596]	; (800b6c8 <VCU_TransmitBmsData2+0x268>)
 800b474:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b478:	4618      	mov	r0, r3
 800b47a:	f7f5 f835 	bl	80004e8 <__aeabi_i2d>
 800b47e:	f04f 0200 	mov.w	r2, #0
 800b482:	4b92      	ldr	r3, [pc, #584]	; (800b6cc <VCU_TransmitBmsData2+0x26c>)
 800b484:	f7f5 f89a 	bl	80005bc <__aeabi_dmul>
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4610      	mov	r0, r2
 800b48e:	4619      	mov	r1, r3
 800b490:	f04f 0200 	mov.w	r2, #0
 800b494:	f04f 0300 	mov.w	r3, #0
 800b498:	f7f4 feda 	bl	8000250 <__adddf3>
 800b49c:	4602      	mov	r2, r0
 800b49e:	460b      	mov	r3, r1
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	f7f5 fb82 	bl	8000bac <__aeabi_d2f>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f7f5 f82d 	bl	800050c <__aeabi_f2d>
 800b4b2:	a381      	add	r3, pc, #516	; (adr r3, 800b6b8 <VCU_TransmitBmsData2+0x258>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	f7f5 f9aa 	bl	8000810 <__aeabi_ddiv>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	f7f5 fb72 	bl	8000bac <__aeabi_d2f>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800b4cc:	edd7 7a02 	vldr	s15, [r7, #8]
 800b4d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4d4:	ee17 3a90 	vmov	r3, s15
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800b4dc:	4b7a      	ldr	r3, [pc, #488]	; (800b6c8 <VCU_TransmitBmsData2+0x268>)
 800b4de:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f7f5 f801 	bl	80004e8 <__aeabi_i2d>
 800b4e6:	a376      	add	r3, pc, #472	; (adr r3, 800b6c0 <VCU_TransmitBmsData2+0x260>)
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f5 f866 	bl	80005bc <__aeabi_dmul>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	f04f 0200 	mov.w	r2, #0
 800b4fc:	f04f 0300 	mov.w	r3, #0
 800b500:	f7f4 fea6 	bl	8000250 <__adddf3>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4610      	mov	r0, r2
 800b50a:	4619      	mov	r1, r3
 800b50c:	f7f5 fb4e 	bl	8000bac <__aeabi_d2f>
 800b510:	4603      	mov	r3, r0
 800b512:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f7f4 fff9 	bl	800050c <__aeabi_f2d>
 800b51a:	a369      	add	r3, pc, #420	; (adr r3, 800b6c0 <VCU_TransmitBmsData2+0x260>)
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f7f5 f976 	bl	8000810 <__aeabi_ddiv>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4610      	mov	r0, r2
 800b52a:	4619      	mov	r1, r3
 800b52c:	f7f5 fb3e 	bl	8000bac <__aeabi_d2f>
 800b530:	4603      	mov	r3, r0
 800b532:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800b534:	edd7 7a02 	vldr	s15, [r7, #8]
 800b538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b53c:	ee17 3a90 	vmov	r3, s15
 800b540:	b29b      	uxth	r3, r3
 800b542:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800b544:	4b60      	ldr	r3, [pc, #384]	; (800b6c8 <VCU_TransmitBmsData2+0x268>)
 800b546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f4 ffcd 	bl	80004e8 <__aeabi_i2d>
 800b54e:	a35c      	add	r3, pc, #368	; (adr r3, 800b6c0 <VCU_TransmitBmsData2+0x260>)
 800b550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b554:	f7f5 f832 	bl	80005bc <__aeabi_dmul>
 800b558:	4602      	mov	r2, r0
 800b55a:	460b      	mov	r3, r1
 800b55c:	4610      	mov	r0, r2
 800b55e:	4619      	mov	r1, r3
 800b560:	f04f 0200 	mov.w	r2, #0
 800b564:	f04f 0300 	mov.w	r3, #0
 800b568:	f7f4 fe72 	bl	8000250 <__adddf3>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4610      	mov	r0, r2
 800b572:	4619      	mov	r1, r3
 800b574:	f7f5 fb1a 	bl	8000bac <__aeabi_d2f>
 800b578:	4603      	mov	r3, r0
 800b57a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f7f4 ffc5 	bl	800050c <__aeabi_f2d>
 800b582:	a34f      	add	r3, pc, #316	; (adr r3, 800b6c0 <VCU_TransmitBmsData2+0x260>)
 800b584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b588:	f7f5 f942 	bl	8000810 <__aeabi_ddiv>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	4610      	mov	r0, r2
 800b592:	4619      	mov	r1, r3
 800b594:	f7f5 fb0a 	bl	8000bac <__aeabi_d2f>
 800b598:	4603      	mov	r3, r0
 800b59a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800b59c:	edd7 7a02 	vldr	s15, [r7, #8]
 800b5a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5a4:	ee17 3a90 	vmov	r3, s15
 800b5a8:	b29b      	uxth	r3, r3
 800b5aa:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800b5ac:	4b46      	ldr	r3, [pc, #280]	; (800b6c8 <VCU_TransmitBmsData2+0x268>)
 800b5ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7f4 ff99 	bl	80004e8 <__aeabi_i2d>
 800b5b6:	a342      	add	r3, pc, #264	; (adr r3, 800b6c0 <VCU_TransmitBmsData2+0x260>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	f7f4 fffe 	bl	80005bc <__aeabi_dmul>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	460b      	mov	r3, r1
 800b5c4:	4610      	mov	r0, r2
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	f04f 0200 	mov.w	r2, #0
 800b5cc:	f04f 0300 	mov.w	r3, #0
 800b5d0:	f7f4 fe3e 	bl	8000250 <__adddf3>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4619      	mov	r1, r3
 800b5dc:	f7f5 fae6 	bl	8000bac <__aeabi_d2f>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	f7f4 ff91 	bl	800050c <__aeabi_f2d>
 800b5ea:	a335      	add	r3, pc, #212	; (adr r3, 800b6c0 <VCU_TransmitBmsData2+0x260>)
 800b5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f0:	f7f5 f90e 	bl	8000810 <__aeabi_ddiv>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4610      	mov	r0, r2
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	f7f5 fad6 	bl	8000bac <__aeabi_d2f>
 800b600:	4603      	mov	r3, r0
 800b602:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800b604:	edd7 7a02 	vldr	s15, [r7, #8]
 800b608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b60c:	ee17 3a90 	vmov	r3, s15
 800b610:	b29b      	uxth	r3, r3
 800b612:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b614:	4b2e      	ldr	r3, [pc, #184]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b616:	2200      	movs	r2, #0
 800b618:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b61a:	4b2d      	ldr	r3, [pc, #180]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b620:	4b2b      	ldr	r3, [pc, #172]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b622:	2200      	movs	r2, #0
 800b624:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800b626:	4b2b      	ldr	r3, [pc, #172]	; (800b6d4 <VCU_TransmitBmsData2+0x274>)
 800b628:	461a      	mov	r2, r3
 800b62a:	463b      	mov	r3, r7
 800b62c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b630:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b634:	4b24      	ldr	r3, [pc, #144]	; (800b6c8 <VCU_TransmitBmsData2+0x268>)
 800b636:	895b      	ldrh	r3, [r3, #10]
 800b638:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b642:	b299      	uxth	r1, r3
 800b644:	4a22      	ldr	r2, [pc, #136]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b646:	8813      	ldrh	r3, [r2, #0]
 800b648:	f361 030a 	bfi	r3, r1, #0, #11
 800b64c:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800b64e:	4a20      	ldr	r2, [pc, #128]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b650:	6813      	ldr	r3, [r2, #0]
 800b652:	f36f 23dc 	bfc	r3, #11, #18
 800b656:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b658:	4a1d      	ldr	r2, [pc, #116]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b65a:	7913      	ldrb	r3, [r2, #4]
 800b65c:	f36f 1386 	bfc	r3, #6, #1
 800b660:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b662:	4a1b      	ldr	r2, [pc, #108]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b664:	7913      	ldrb	r3, [r2, #4]
 800b666:	2108      	movs	r1, #8
 800b668:	f361 0303 	bfi	r3, r1, #0, #4
 800b66c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b66e:	4a18      	ldr	r2, [pc, #96]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b670:	7913      	ldrb	r3, [r2, #4]
 800b672:	f36f 13c7 	bfc	r3, #7, #1
 800b676:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b678:	4a15      	ldr	r2, [pc, #84]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b67a:	7913      	ldrb	r3, [r2, #4]
 800b67c:	f36f 1304 	bfc	r3, #4, #1
 800b680:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b682:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <VCU_TransmitBmsData2+0x278>)
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f003 0304 	and.w	r3, r3, #4
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d00c      	beq.n	800b6a8 <VCU_TransmitBmsData2+0x248>
 800b68e:	4b10      	ldr	r3, [pc, #64]	; (800b6d0 <VCU_TransmitBmsData2+0x270>)
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b696:	b29b      	uxth	r3, r3
 800b698:	461a      	mov	r2, r3
 800b69a:	4910      	ldr	r1, [pc, #64]	; (800b6dc <VCU_TransmitBmsData2+0x27c>)
 800b69c:	4810      	ldr	r0, [pc, #64]	; (800b6e0 <VCU_TransmitBmsData2+0x280>)
 800b69e:	f007 fdaf 	bl	8013200 <siprintf>
 800b6a2:	480f      	ldr	r0, [pc, #60]	; (800b6e0 <VCU_TransmitBmsData2+0x280>)
 800b6a4:	f7f9 fe5c 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b6a8:	2000      	movs	r0, #0
 800b6aa:	f7ff fa05 	bl	800aab8 <VCU_TransmitMessageQueue>
}
 800b6ae:	bf00      	nop
 800b6b0:	3710      	adds	r7, #16
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	9999999a 	.word	0x9999999a
 800b6bc:	3f599999 	.word	0x3f599999
 800b6c0:	d2f1a9fc 	.word	0xd2f1a9fc
 800b6c4:	3f50624d 	.word	0x3f50624d
 800b6c8:	2000a664 	.word	0x2000a664
 800b6cc:	3fe00000 	.word	0x3fe00000
 800b6d0:	2000a6c4 	.word	0x2000a6c4
 800b6d4:	2000a6d0 	.word	0x2000a6d0
 800b6d8:	2000000c 	.word	0x2000000c
 800b6dc:	0801780c 	.word	0x0801780c
 800b6e0:	20000b64 	.word	0x20000b64
 800b6e4:	00000000 	.word	0x00000000

0800b6e8 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800b6ee:	f04f 0300 	mov.w	r3, #0
 800b6f2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b6f4:	f04f 0300 	mov.w	r3, #0
 800b6f8:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800b6fa:	4b89      	ldr	r3, [pc, #548]	; (800b920 <VCU_TransmitBmsData3+0x238>)
 800b6fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7f4 fef2 	bl	80004e8 <__aeabi_i2d>
 800b704:	a380      	add	r3, pc, #512	; (adr r3, 800b908 <VCU_TransmitBmsData3+0x220>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 ff57 	bl	80005bc <__aeabi_dmul>
 800b70e:	4602      	mov	r2, r0
 800b710:	460b      	mov	r3, r1
 800b712:	4610      	mov	r0, r2
 800b714:	4619      	mov	r1, r3
 800b716:	a37e      	add	r3, pc, #504	; (adr r3, 800b910 <VCU_TransmitBmsData3+0x228>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 fd96 	bl	800024c <__aeabi_dsub>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4610      	mov	r0, r2
 800b726:	4619      	mov	r1, r3
 800b728:	f7f5 fa40 	bl	8000bac <__aeabi_d2f>
 800b72c:	4603      	mov	r3, r0
 800b72e:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800b730:	68f8      	ldr	r0, [r7, #12]
 800b732:	f7f4 feeb 	bl	800050c <__aeabi_f2d>
 800b736:	f04f 0200 	mov.w	r2, #0
 800b73a:	4b7a      	ldr	r3, [pc, #488]	; (800b924 <VCU_TransmitBmsData3+0x23c>)
 800b73c:	f7f5 f868 	bl	8000810 <__aeabi_ddiv>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4610      	mov	r0, r2
 800b746:	4619      	mov	r1, r3
 800b748:	a373      	add	r3, pc, #460	; (adr r3, 800b918 <VCU_TransmitBmsData3+0x230>)
 800b74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74e:	f7f4 fd7f 	bl	8000250 <__adddf3>
 800b752:	4602      	mov	r2, r0
 800b754:	460b      	mov	r3, r1
 800b756:	4610      	mov	r0, r2
 800b758:	4619      	mov	r1, r3
 800b75a:	f7f5 fa27 	bl	8000bac <__aeabi_d2f>
 800b75e:	4603      	mov	r3, r0
 800b760:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800b762:	edd7 7a02 	vldr	s15, [r7, #8]
 800b766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b76a:	ee17 3a90 	vmov	r3, s15
 800b76e:	b29b      	uxth	r3, r3
 800b770:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800b772:	4b6b      	ldr	r3, [pc, #428]	; (800b920 <VCU_TransmitBmsData3+0x238>)
 800b774:	8bdb      	ldrh	r3, [r3, #30]
 800b776:	4618      	mov	r0, r3
 800b778:	f7f4 feb6 	bl	80004e8 <__aeabi_i2d>
 800b77c:	a362      	add	r3, pc, #392	; (adr r3, 800b908 <VCU_TransmitBmsData3+0x220>)
 800b77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b782:	f7f4 ff1b 	bl	80005bc <__aeabi_dmul>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4610      	mov	r0, r2
 800b78c:	4619      	mov	r1, r3
 800b78e:	a360      	add	r3, pc, #384	; (adr r3, 800b910 <VCU_TransmitBmsData3+0x228>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	f7f4 fd5a 	bl	800024c <__aeabi_dsub>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	4610      	mov	r0, r2
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f7f5 fa04 	bl	8000bac <__aeabi_d2f>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7f4 feaf 	bl	800050c <__aeabi_f2d>
 800b7ae:	f04f 0200 	mov.w	r2, #0
 800b7b2:	4b5c      	ldr	r3, [pc, #368]	; (800b924 <VCU_TransmitBmsData3+0x23c>)
 800b7b4:	f7f5 f82c 	bl	8000810 <__aeabi_ddiv>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	4610      	mov	r0, r2
 800b7be:	4619      	mov	r1, r3
 800b7c0:	a355      	add	r3, pc, #340	; (adr r3, 800b918 <VCU_TransmitBmsData3+0x230>)
 800b7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c6:	f7f4 fd43 	bl	8000250 <__adddf3>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	f7f5 f9eb 	bl	8000bac <__aeabi_d2f>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800b7da:	edd7 7a02 	vldr	s15, [r7, #8]
 800b7de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7e2:	ee17 3a90 	vmov	r3, s15
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800b7ea:	4b4d      	ldr	r3, [pc, #308]	; (800b920 <VCU_TransmitBmsData3+0x238>)
 800b7ec:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7f4 fe7a 	bl	80004e8 <__aeabi_i2d>
 800b7f4:	a344      	add	r3, pc, #272	; (adr r3, 800b908 <VCU_TransmitBmsData3+0x220>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	f7f4 fedf 	bl	80005bc <__aeabi_dmul>
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4610      	mov	r0, r2
 800b804:	4619      	mov	r1, r3
 800b806:	a342      	add	r3, pc, #264	; (adr r3, 800b910 <VCU_TransmitBmsData3+0x228>)
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f7f4 fd1e 	bl	800024c <__aeabi_dsub>
 800b810:	4602      	mov	r2, r0
 800b812:	460b      	mov	r3, r1
 800b814:	4610      	mov	r0, r2
 800b816:	4619      	mov	r1, r3
 800b818:	f7f5 f9c8 	bl	8000bac <__aeabi_d2f>
 800b81c:	4603      	mov	r3, r0
 800b81e:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800b820:	68f8      	ldr	r0, [r7, #12]
 800b822:	f7f4 fe73 	bl	800050c <__aeabi_f2d>
 800b826:	f04f 0200 	mov.w	r2, #0
 800b82a:	4b3e      	ldr	r3, [pc, #248]	; (800b924 <VCU_TransmitBmsData3+0x23c>)
 800b82c:	f7f4 fff0 	bl	8000810 <__aeabi_ddiv>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	4610      	mov	r0, r2
 800b836:	4619      	mov	r1, r3
 800b838:	a337      	add	r3, pc, #220	; (adr r3, 800b918 <VCU_TransmitBmsData3+0x230>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f7f4 fd07 	bl	8000250 <__adddf3>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	4610      	mov	r0, r2
 800b848:	4619      	mov	r1, r3
 800b84a:	f7f5 f9af 	bl	8000bac <__aeabi_d2f>
 800b84e:	4603      	mov	r3, r0
 800b850:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800b852:	edd7 7a02 	vldr	s15, [r7, #8]
 800b856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b85a:	ee17 3a90 	vmov	r3, s15
 800b85e:	b29b      	uxth	r3, r3
 800b860:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800b866:	4b30      	ldr	r3, [pc, #192]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800b86c:	4b2e      	ldr	r3, [pc, #184]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b86e:	2200      	movs	r2, #0
 800b870:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800b872:	4b2d      	ldr	r3, [pc, #180]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b874:	2200      	movs	r2, #0
 800b876:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800b878:	4b2c      	ldr	r3, [pc, #176]	; (800b92c <VCU_TransmitBmsData3+0x244>)
 800b87a:	461a      	mov	r2, r3
 800b87c:	463b      	mov	r3, r7
 800b87e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b882:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800b886:	4b26      	ldr	r3, [pc, #152]	; (800b920 <VCU_TransmitBmsData3+0x238>)
 800b888:	895b      	ldrh	r3, [r3, #10]
 800b88a:	f203 4323 	addw	r3, r3, #1059	; 0x423
 800b88e:	b29b      	uxth	r3, r3
 800b890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b894:	b299      	uxth	r1, r3
 800b896:	4a24      	ldr	r2, [pc, #144]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b898:	8813      	ldrh	r3, [r2, #0]
 800b89a:	f361 030a 	bfi	r3, r1, #0, #11
 800b89e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800b8a0:	4a21      	ldr	r2, [pc, #132]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b8a2:	6813      	ldr	r3, [r2, #0]
 800b8a4:	f36f 23dc 	bfc	r3, #11, #18
 800b8a8:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800b8aa:	4a1f      	ldr	r2, [pc, #124]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b8ac:	7913      	ldrb	r3, [r2, #4]
 800b8ae:	f36f 1386 	bfc	r3, #6, #1
 800b8b2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800b8b4:	4a1c      	ldr	r2, [pc, #112]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b8b6:	7913      	ldrb	r3, [r2, #4]
 800b8b8:	2108      	movs	r1, #8
 800b8ba:	f361 0303 	bfi	r3, r1, #0, #4
 800b8be:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800b8c0:	4a19      	ldr	r2, [pc, #100]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b8c2:	7913      	ldrb	r3, [r2, #4]
 800b8c4:	f36f 13c7 	bfc	r3, #7, #1
 800b8c8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800b8ca:	4a17      	ldr	r2, [pc, #92]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b8cc:	7913      	ldrb	r3, [r2, #4]
 800b8ce:	f36f 1304 	bfc	r3, #4, #1
 800b8d2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b8d4:	4b16      	ldr	r3, [pc, #88]	; (800b930 <VCU_TransmitBmsData3+0x248>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	f003 0304 	and.w	r3, r3, #4
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d00c      	beq.n	800b8fa <VCU_TransmitBmsData3+0x212>
 800b8e0:	4b11      	ldr	r3, [pc, #68]	; (800b928 <VCU_TransmitBmsData3+0x240>)
 800b8e2:	881b      	ldrh	r3, [r3, #0]
 800b8e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4911      	ldr	r1, [pc, #68]	; (800b934 <VCU_TransmitBmsData3+0x24c>)
 800b8ee:	4812      	ldr	r0, [pc, #72]	; (800b938 <VCU_TransmitBmsData3+0x250>)
 800b8f0:	f007 fc86 	bl	8013200 <siprintf>
 800b8f4:	4810      	ldr	r0, [pc, #64]	; (800b938 <VCU_TransmitBmsData3+0x250>)
 800b8f6:	f7f9 fd33 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	f7ff f8dc 	bl	800aab8 <VCU_TransmitMessageQueue>
}
 800b900:	bf00      	nop
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	47ae147b 	.word	0x47ae147b
 800b90c:	3f847ae1 	.word	0x3f847ae1
 800b910:	cccccccd 	.word	0xcccccccd
 800b914:	404baccc 	.word	0x404baccc
 800b918:	00000000 	.word	0x00000000
 800b91c:	40c11000 	.word	0x40c11000
 800b920:	2000a664 	.word	0x2000a664
 800b924:	3fa00000 	.word	0x3fa00000
 800b928:	2000a6c4 	.word	0x2000a6c4
 800b92c:	2000a6d0 	.word	0x2000a6d0
 800b930:	2000000c 	.word	0x2000000c
 800b934:	08017828 	.word	0x08017828
 800b938:	20000b64 	.word	0x20000b64
 800b93c:	00000000 	.word	0x00000000

0800b940 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800b946:	f04f 0300 	mov.w	r3, #0
 800b94a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800b94c:	f04f 0300 	mov.w	r3, #0
 800b950:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800b952:	4b83      	ldr	r3, [pc, #524]	; (800bb60 <VCU_TransmitBmsData5+0x220>)
 800b954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b956:	4618      	mov	r0, r3
 800b958:	f7f4 fdb6 	bl	80004c8 <__aeabi_ui2d>
 800b95c:	a37c      	add	r3, pc, #496	; (adr r3, 800bb50 <VCU_TransmitBmsData5+0x210>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f7f4 fe2b 	bl	80005bc <__aeabi_dmul>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4610      	mov	r0, r2
 800b96c:	4619      	mov	r1, r3
 800b96e:	f04f 0200 	mov.w	r2, #0
 800b972:	4b7c      	ldr	r3, [pc, #496]	; (800bb64 <VCU_TransmitBmsData5+0x224>)
 800b974:	f7f4 fc6a 	bl	800024c <__aeabi_dsub>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	4610      	mov	r0, r2
 800b97e:	4619      	mov	r1, r3
 800b980:	f7f5 f914 	bl	8000bac <__aeabi_d2f>
 800b984:	4603      	mov	r3, r0
 800b986:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f7f4 fdbf 	bl	800050c <__aeabi_f2d>
 800b98e:	a370      	add	r3, pc, #448	; (adr r3, 800bb50 <VCU_TransmitBmsData5+0x210>)
 800b990:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b994:	f7f4 ff3c 	bl	8000810 <__aeabi_ddiv>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	4610      	mov	r0, r2
 800b99e:	4619      	mov	r1, r3
 800b9a0:	f04f 0200 	mov.w	r2, #0
 800b9a4:	4b70      	ldr	r3, [pc, #448]	; (800bb68 <VCU_TransmitBmsData5+0x228>)
 800b9a6:	f7f4 fc53 	bl	8000250 <__adddf3>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	f7f5 f8fb 	bl	8000bac <__aeabi_d2f>
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800b9ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800b9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c2:	ee17 3a90 	vmov	r3, s15
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800b9ca:	4b65      	ldr	r3, [pc, #404]	; (800bb60 <VCU_TransmitBmsData5+0x220>)
 800b9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7f4 fd7a 	bl	80004c8 <__aeabi_ui2d>
 800b9d4:	a35e      	add	r3, pc, #376	; (adr r3, 800bb50 <VCU_TransmitBmsData5+0x210>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	f7f4 fdef 	bl	80005bc <__aeabi_dmul>
 800b9de:	4602      	mov	r2, r0
 800b9e0:	460b      	mov	r3, r1
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	f04f 0200 	mov.w	r2, #0
 800b9ea:	4b5e      	ldr	r3, [pc, #376]	; (800bb64 <VCU_TransmitBmsData5+0x224>)
 800b9ec:	f7f4 fc2e 	bl	800024c <__aeabi_dsub>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	460b      	mov	r3, r1
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	f7f5 f8d8 	bl	8000bac <__aeabi_d2f>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f7f4 fd83 	bl	800050c <__aeabi_f2d>
 800ba06:	a352      	add	r3, pc, #328	; (adr r3, 800bb50 <VCU_TransmitBmsData5+0x210>)
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	f7f4 ff00 	bl	8000810 <__aeabi_ddiv>
 800ba10:	4602      	mov	r2, r0
 800ba12:	460b      	mov	r3, r1
 800ba14:	4610      	mov	r0, r2
 800ba16:	4619      	mov	r1, r3
 800ba18:	f04f 0200 	mov.w	r2, #0
 800ba1c:	4b52      	ldr	r3, [pc, #328]	; (800bb68 <VCU_TransmitBmsData5+0x228>)
 800ba1e:	f7f4 fc17 	bl	8000250 <__adddf3>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4610      	mov	r0, r2
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f7f5 f8bf 	bl	8000bac <__aeabi_d2f>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800ba32:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba3a:	ee17 3a90 	vmov	r3, s15
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800ba42:	4b47      	ldr	r3, [pc, #284]	; (800bb60 <VCU_TransmitBmsData5+0x220>)
 800ba44:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7f4 fd4e 	bl	80004e8 <__aeabi_i2d>
 800ba4c:	a342      	add	r3, pc, #264	; (adr r3, 800bb58 <VCU_TransmitBmsData5+0x218>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fdb3 	bl	80005bc <__aeabi_dmul>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4610      	mov	r0, r2
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	f04f 0200 	mov.w	r2, #0
 800ba62:	f04f 0300 	mov.w	r3, #0
 800ba66:	f7f4 fbf3 	bl	8000250 <__adddf3>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	4610      	mov	r0, r2
 800ba70:	4619      	mov	r1, r3
 800ba72:	f7f5 f89b 	bl	8000bac <__aeabi_d2f>
 800ba76:	4603      	mov	r3, r0
 800ba78:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f7f4 fd46 	bl	800050c <__aeabi_f2d>
 800ba80:	a333      	add	r3, pc, #204	; (adr r3, 800bb50 <VCU_TransmitBmsData5+0x210>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	f7f4 fec3 	bl	8000810 <__aeabi_ddiv>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4610      	mov	r0, r2
 800ba90:	4619      	mov	r1, r3
 800ba92:	f7f5 f88b 	bl	8000bac <__aeabi_d2f>
 800ba96:	4603      	mov	r3, r0
 800ba98:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800ba9a:	edd7 7a02 	vldr	s15, [r7, #8]
 800ba9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baa2:	ee17 3a90 	vmov	r3, s15
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800baaa:	2300      	movs	r3, #0
 800baac:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800baae:	4b2f      	ldr	r3, [pc, #188]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bab4:	4b2d      	ldr	r3, [pc, #180]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800baba:	4b2c      	ldr	r3, [pc, #176]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800babc:	2200      	movs	r2, #0
 800babe:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800bac0:	4b2b      	ldr	r3, [pc, #172]	; (800bb70 <VCU_TransmitBmsData5+0x230>)
 800bac2:	461a      	mov	r2, r3
 800bac4:	463b      	mov	r3, r7
 800bac6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800baca:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bace:	4b24      	ldr	r3, [pc, #144]	; (800bb60 <VCU_TransmitBmsData5+0x220>)
 800bad0:	895b      	ldrh	r3, [r3, #10]
 800bad2:	f203 4325 	addw	r3, r3, #1061	; 0x425
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800badc:	b299      	uxth	r1, r3
 800bade:	4a23      	ldr	r2, [pc, #140]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800bae0:	8813      	ldrh	r3, [r2, #0]
 800bae2:	f361 030a 	bfi	r3, r1, #0, #11
 800bae6:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bae8:	4a20      	ldr	r2, [pc, #128]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800baea:	6813      	ldr	r3, [r2, #0]
 800baec:	f36f 23dc 	bfc	r3, #11, #18
 800baf0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800baf2:	4a1e      	ldr	r2, [pc, #120]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800baf4:	7913      	ldrb	r3, [r2, #4]
 800baf6:	f36f 1386 	bfc	r3, #6, #1
 800bafa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bafc:	4a1b      	ldr	r2, [pc, #108]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800bafe:	7913      	ldrb	r3, [r2, #4]
 800bb00:	2108      	movs	r1, #8
 800bb02:	f361 0303 	bfi	r3, r1, #0, #4
 800bb06:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bb08:	4a18      	ldr	r2, [pc, #96]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800bb0a:	7913      	ldrb	r3, [r2, #4]
 800bb0c:	f36f 13c7 	bfc	r3, #7, #1
 800bb10:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bb12:	4a16      	ldr	r2, [pc, #88]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800bb14:	7913      	ldrb	r3, [r2, #4]
 800bb16:	f36f 1304 	bfc	r3, #4, #1
 800bb1a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bb1c:	4b15      	ldr	r3, [pc, #84]	; (800bb74 <VCU_TransmitBmsData5+0x234>)
 800bb1e:	781b      	ldrb	r3, [r3, #0]
 800bb20:	f003 0304 	and.w	r3, r3, #4
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00c      	beq.n	800bb42 <VCU_TransmitBmsData5+0x202>
 800bb28:	4b10      	ldr	r3, [pc, #64]	; (800bb6c <VCU_TransmitBmsData5+0x22c>)
 800bb2a:	881b      	ldrh	r3, [r3, #0]
 800bb2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	461a      	mov	r2, r3
 800bb34:	4910      	ldr	r1, [pc, #64]	; (800bb78 <VCU_TransmitBmsData5+0x238>)
 800bb36:	4811      	ldr	r0, [pc, #68]	; (800bb7c <VCU_TransmitBmsData5+0x23c>)
 800bb38:	f007 fb62 	bl	8013200 <siprintf>
 800bb3c:	480f      	ldr	r0, [pc, #60]	; (800bb7c <VCU_TransmitBmsData5+0x23c>)
 800bb3e:	f7f9 fc0f 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bb42:	2000      	movs	r0, #0
 800bb44:	f7fe ffb8 	bl	800aab8 <VCU_TransmitMessageQueue>
}
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	9999999a 	.word	0x9999999a
 800bb54:	3fa99999 	.word	0x3fa99999
 800bb58:	eb851eb8 	.word	0xeb851eb8
 800bb5c:	3f8eb851 	.word	0x3f8eb851
 800bb60:	2000a664 	.word	0x2000a664
 800bb64:	40990000 	.word	0x40990000
 800bb68:	40df4000 	.word	0x40df4000
 800bb6c:	2000a6c4 	.word	0x2000a6c4
 800bb70:	2000a6d0 	.word	0x2000a6d0
 800bb74:	2000000c 	.word	0x2000000c
 800bb78:	08017844 	.word	0x08017844
 800bb7c:	20000b64 	.word	0x20000b64

0800bb80 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b082      	sub	sp, #8
 800bb84:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800bb86:	2300      	movs	r3, #0
 800bb88:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800bb8e:	4b2d      	ldr	r3, [pc, #180]	; (800bc44 <VCU_TransmitBmsData8+0xc4>)
 800bb90:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800bb94:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800bb96:	2300      	movs	r3, #0
 800bb98:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800bb9a:	4b2a      	ldr	r3, [pc, #168]	; (800bc44 <VCU_TransmitBmsData8+0xc4>)
 800bb9c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800bba0:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bba2:	4b29      	ldr	r3, [pc, #164]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bba8:	4b27      	ldr	r3, [pc, #156]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bbae:	4b26      	ldr	r3, [pc, #152]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800bbb4:	4b25      	ldr	r3, [pc, #148]	; (800bc4c <VCU_TransmitBmsData8+0xcc>)
 800bbb6:	461a      	mov	r2, r3
 800bbb8:	463b      	mov	r3, r7
 800bbba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bbbe:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bbc2:	4b20      	ldr	r3, [pc, #128]	; (800bc44 <VCU_TransmitBmsData8+0xc4>)
 800bbc4:	895b      	ldrh	r3, [r3, #10]
 800bbc6:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbd0:	b299      	uxth	r1, r3
 800bbd2:	4a1d      	ldr	r2, [pc, #116]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bbd4:	8813      	ldrh	r3, [r2, #0]
 800bbd6:	f361 030a 	bfi	r3, r1, #0, #11
 800bbda:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bbdc:	4a1a      	ldr	r2, [pc, #104]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bbde:	6813      	ldr	r3, [r2, #0]
 800bbe0:	f36f 23dc 	bfc	r3, #11, #18
 800bbe4:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bbe6:	4a18      	ldr	r2, [pc, #96]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bbe8:	7913      	ldrb	r3, [r2, #4]
 800bbea:	f36f 1386 	bfc	r3, #6, #1
 800bbee:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bbf0:	4a15      	ldr	r2, [pc, #84]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bbf2:	7913      	ldrb	r3, [r2, #4]
 800bbf4:	2108      	movs	r1, #8
 800bbf6:	f361 0303 	bfi	r3, r1, #0, #4
 800bbfa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bbfc:	4a12      	ldr	r2, [pc, #72]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bbfe:	7913      	ldrb	r3, [r2, #4]
 800bc00:	f36f 13c7 	bfc	r3, #7, #1
 800bc04:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bc06:	4a10      	ldr	r2, [pc, #64]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bc08:	7913      	ldrb	r3, [r2, #4]
 800bc0a:	f36f 1304 	bfc	r3, #4, #1
 800bc0e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bc10:	4b0f      	ldr	r3, [pc, #60]	; (800bc50 <VCU_TransmitBmsData8+0xd0>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d00c      	beq.n	800bc36 <VCU_TransmitBmsData8+0xb6>
 800bc1c:	4b0a      	ldr	r3, [pc, #40]	; (800bc48 <VCU_TransmitBmsData8+0xc8>)
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	461a      	mov	r2, r3
 800bc28:	490a      	ldr	r1, [pc, #40]	; (800bc54 <VCU_TransmitBmsData8+0xd4>)
 800bc2a:	480b      	ldr	r0, [pc, #44]	; (800bc58 <VCU_TransmitBmsData8+0xd8>)
 800bc2c:	f007 fae8 	bl	8013200 <siprintf>
 800bc30:	4809      	ldr	r0, [pc, #36]	; (800bc58 <VCU_TransmitBmsData8+0xd8>)
 800bc32:	f7f9 fb95 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bc36:	2000      	movs	r0, #0
 800bc38:	f7fe ff3e 	bl	800aab8 <VCU_TransmitMessageQueue>
}
 800bc3c:	bf00      	nop
 800bc3e:	3708      	adds	r7, #8
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	2000a664 	.word	0x2000a664
 800bc48:	2000a6c4 	.word	0x2000a6c4
 800bc4c:	2000a6d0 	.word	0x2000a6d0
 800bc50:	2000000c 	.word	0x2000000c
 800bc54:	08017860 	.word	0x08017860
 800bc58:	20000b64 	.word	0x20000b64

0800bc5c <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800bc66:	2300      	movs	r3, #0
 800bc68:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800bc6a:	4b2d      	ldr	r3, [pc, #180]	; (800bd20 <VCU_TransmitBmsData9+0xc4>)
 800bc6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bc70:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800bc72:	2300      	movs	r3, #0
 800bc74:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800bc76:	4b2a      	ldr	r3, [pc, #168]	; (800bd20 <VCU_TransmitBmsData9+0xc4>)
 800bc78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc7c:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bc7e:	4b29      	ldr	r3, [pc, #164]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bc84:	4b27      	ldr	r3, [pc, #156]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bc86:	2200      	movs	r2, #0
 800bc88:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bc8a:	4b26      	ldr	r3, [pc, #152]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800bc90:	4b25      	ldr	r3, [pc, #148]	; (800bd28 <VCU_TransmitBmsData9+0xcc>)
 800bc92:	461a      	mov	r2, r3
 800bc94:	463b      	mov	r3, r7
 800bc96:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bc9a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bc9e:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <VCU_TransmitBmsData9+0xc4>)
 800bca0:	895b      	ldrh	r3, [r3, #10]
 800bca2:	f203 4329 	addw	r3, r3, #1065	; 0x429
 800bca6:	b29b      	uxth	r3, r3
 800bca8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bcac:	b299      	uxth	r1, r3
 800bcae:	4a1d      	ldr	r2, [pc, #116]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bcb0:	8813      	ldrh	r3, [r2, #0]
 800bcb2:	f361 030a 	bfi	r3, r1, #0, #11
 800bcb6:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bcb8:	4a1a      	ldr	r2, [pc, #104]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bcba:	6813      	ldr	r3, [r2, #0]
 800bcbc:	f36f 23dc 	bfc	r3, #11, #18
 800bcc0:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bcc2:	4a18      	ldr	r2, [pc, #96]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bcc4:	7913      	ldrb	r3, [r2, #4]
 800bcc6:	f36f 1386 	bfc	r3, #6, #1
 800bcca:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bccc:	4a15      	ldr	r2, [pc, #84]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bcce:	7913      	ldrb	r3, [r2, #4]
 800bcd0:	2108      	movs	r1, #8
 800bcd2:	f361 0303 	bfi	r3, r1, #0, #4
 800bcd6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bcd8:	4a12      	ldr	r2, [pc, #72]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bcda:	7913      	ldrb	r3, [r2, #4]
 800bcdc:	f36f 13c7 	bfc	r3, #7, #1
 800bce0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bce2:	4a10      	ldr	r2, [pc, #64]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bce4:	7913      	ldrb	r3, [r2, #4]
 800bce6:	f36f 1304 	bfc	r3, #4, #1
 800bcea:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bcec:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <VCU_TransmitBmsData9+0xd0>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	f003 0304 	and.w	r3, r3, #4
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00c      	beq.n	800bd12 <VCU_TransmitBmsData9+0xb6>
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <VCU_TransmitBmsData9+0xc8>)
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	461a      	mov	r2, r3
 800bd04:	490a      	ldr	r1, [pc, #40]	; (800bd30 <VCU_TransmitBmsData9+0xd4>)
 800bd06:	480b      	ldr	r0, [pc, #44]	; (800bd34 <VCU_TransmitBmsData9+0xd8>)
 800bd08:	f007 fa7a 	bl	8013200 <siprintf>
 800bd0c:	4809      	ldr	r0, [pc, #36]	; (800bd34 <VCU_TransmitBmsData9+0xd8>)
 800bd0e:	f7f9 fb27 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bd12:	2000      	movs	r0, #0
 800bd14:	f7fe fed0 	bl	800aab8 <VCU_TransmitMessageQueue>

}
 800bd18:	bf00      	nop
 800bd1a:	3708      	adds	r7, #8
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	2000a664 	.word	0x2000a664
 800bd24:	2000a6c4 	.word	0x2000a6c4
 800bd28:	2000a6d0 	.word	0x2000a6d0
 800bd2c:	2000000c 	.word	0x2000000c
 800bd30:	0801787c 	.word	0x0801787c
 800bd34:	20000b64 	.word	0x20000b64

0800bd38 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b082      	sub	sp, #8
 800bd3c:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800bd46:	2300      	movs	r3, #0
 800bd48:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bd4a:	4b28      	ldr	r3, [pc, #160]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bd50:	4b26      	ldr	r3, [pc, #152]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bd56:	4b25      	ldr	r3, [pc, #148]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800bd5c:	4b24      	ldr	r3, [pc, #144]	; (800bdf0 <VCU_TransmitBmsData10+0xb8>)
 800bd5e:	461a      	mov	r2, r3
 800bd60:	463b      	mov	r3, r7
 800bd62:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd66:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bd6a:	4b22      	ldr	r3, [pc, #136]	; (800bdf4 <VCU_TransmitBmsData10+0xbc>)
 800bd6c:	895b      	ldrh	r3, [r3, #10]
 800bd6e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd78:	b299      	uxth	r1, r3
 800bd7a:	4a1c      	ldr	r2, [pc, #112]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bd7c:	8813      	ldrh	r3, [r2, #0]
 800bd7e:	f361 030a 	bfi	r3, r1, #0, #11
 800bd82:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bd84:	4a19      	ldr	r2, [pc, #100]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bd86:	6813      	ldr	r3, [r2, #0]
 800bd88:	f36f 23dc 	bfc	r3, #11, #18
 800bd8c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bd8e:	4a17      	ldr	r2, [pc, #92]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bd90:	7913      	ldrb	r3, [r2, #4]
 800bd92:	f36f 1386 	bfc	r3, #6, #1
 800bd96:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bd98:	4a14      	ldr	r2, [pc, #80]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bd9a:	7913      	ldrb	r3, [r2, #4]
 800bd9c:	2108      	movs	r1, #8
 800bd9e:	f361 0303 	bfi	r3, r1, #0, #4
 800bda2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bda4:	4a11      	ldr	r2, [pc, #68]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bda6:	7913      	ldrb	r3, [r2, #4]
 800bda8:	f36f 13c7 	bfc	r3, #7, #1
 800bdac:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bdae:	4a0f      	ldr	r2, [pc, #60]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bdb0:	7913      	ldrb	r3, [r2, #4]
 800bdb2:	f36f 1304 	bfc	r3, #4, #1
 800bdb6:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <VCU_TransmitBmsData10+0xc0>)
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	f003 0304 	and.w	r3, r3, #4
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00c      	beq.n	800bdde <VCU_TransmitBmsData10+0xa6>
 800bdc4:	4b09      	ldr	r3, [pc, #36]	; (800bdec <VCU_TransmitBmsData10+0xb4>)
 800bdc6:	881b      	ldrh	r3, [r3, #0]
 800bdc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	461a      	mov	r2, r3
 800bdd0:	490a      	ldr	r1, [pc, #40]	; (800bdfc <VCU_TransmitBmsData10+0xc4>)
 800bdd2:	480b      	ldr	r0, [pc, #44]	; (800be00 <VCU_TransmitBmsData10+0xc8>)
 800bdd4:	f007 fa14 	bl	8013200 <siprintf>
 800bdd8:	4809      	ldr	r0, [pc, #36]	; (800be00 <VCU_TransmitBmsData10+0xc8>)
 800bdda:	f7f9 fac1 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bdde:	2000      	movs	r0, #0
 800bde0:	f7fe fe6a 	bl	800aab8 <VCU_TransmitMessageQueue>

}
 800bde4:	bf00      	nop
 800bde6:	3708      	adds	r7, #8
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	2000a6c4 	.word	0x2000a6c4
 800bdf0:	2000a6d0 	.word	0x2000a6d0
 800bdf4:	2000a664 	.word	0x2000a664
 800bdf8:	2000000c 	.word	0x2000000c
 800bdfc:	08017898 	.word	0x08017898
 800be00:	20000b64 	.word	0x20000b64

0800be04 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800be04:	b580      	push	{r7, lr}
 800be06:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800be08:	4b23      	ldr	r3, [pc, #140]	; (800be98 <VCU_RequestTime+0x94>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800be0e:	4b22      	ldr	r3, [pc, #136]	; (800be98 <VCU_RequestTime+0x94>)
 800be10:	2200      	movs	r2, #0
 800be12:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800be14:	4b20      	ldr	r3, [pc, #128]	; (800be98 <VCU_RequestTime+0x94>)
 800be16:	2200      	movs	r2, #0
 800be18:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800be1a:	4b20      	ldr	r3, [pc, #128]	; (800be9c <VCU_RequestTime+0x98>)
 800be1c:	895b      	ldrh	r3, [r3, #10]
 800be1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800be22:	b29b      	uxth	r3, r3
 800be24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be28:	b299      	uxth	r1, r3
 800be2a:	4a1b      	ldr	r2, [pc, #108]	; (800be98 <VCU_RequestTime+0x94>)
 800be2c:	8813      	ldrh	r3, [r2, #0]
 800be2e:	f361 030a 	bfi	r3, r1, #0, #11
 800be32:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800be34:	4a18      	ldr	r2, [pc, #96]	; (800be98 <VCU_RequestTime+0x94>)
 800be36:	6813      	ldr	r3, [r2, #0]
 800be38:	f36f 23dc 	bfc	r3, #11, #18
 800be3c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800be3e:	4a16      	ldr	r2, [pc, #88]	; (800be98 <VCU_RequestTime+0x94>)
 800be40:	7913      	ldrb	r3, [r2, #4]
 800be42:	f36f 1386 	bfc	r3, #6, #1
 800be46:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800be48:	4a13      	ldr	r2, [pc, #76]	; (800be98 <VCU_RequestTime+0x94>)
 800be4a:	7913      	ldrb	r3, [r2, #4]
 800be4c:	2108      	movs	r1, #8
 800be4e:	f361 0303 	bfi	r3, r1, #0, #4
 800be52:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800be54:	4a10      	ldr	r2, [pc, #64]	; (800be98 <VCU_RequestTime+0x94>)
 800be56:	7913      	ldrb	r3, [r2, #4]
 800be58:	f36f 13c7 	bfc	r3, #7, #1
 800be5c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800be5e:	4a0e      	ldr	r2, [pc, #56]	; (800be98 <VCU_RequestTime+0x94>)
 800be60:	7913      	ldrb	r3, [r2, #4]
 800be62:	f36f 1304 	bfc	r3, #4, #1
 800be66:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800be68:	4b0d      	ldr	r3, [pc, #52]	; (800bea0 <VCU_RequestTime+0x9c>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 0304 	and.w	r3, r3, #4
 800be70:	2b00      	cmp	r3, #0
 800be72:	d00c      	beq.n	800be8e <VCU_RequestTime+0x8a>
 800be74:	4b08      	ldr	r3, [pc, #32]	; (800be98 <VCU_RequestTime+0x94>)
 800be76:	881b      	ldrh	r3, [r3, #0]
 800be78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	461a      	mov	r2, r3
 800be80:	4908      	ldr	r1, [pc, #32]	; (800bea4 <VCU_RequestTime+0xa0>)
 800be82:	4809      	ldr	r0, [pc, #36]	; (800bea8 <VCU_RequestTime+0xa4>)
 800be84:	f007 f9bc 	bl	8013200 <siprintf>
 800be88:	4807      	ldr	r0, [pc, #28]	; (800bea8 <VCU_RequestTime+0xa4>)
 800be8a:	f7f9 fa69 	bl	8005360 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800be8e:	2000      	movs	r0, #0
 800be90:	f7fe fe12 	bl	800aab8 <VCU_TransmitMessageQueue>

}
 800be94:	bf00      	nop
 800be96:	bd80      	pop	{r7, pc}
 800be98:	2000a6c4 	.word	0x2000a6c4
 800be9c:	2000a664 	.word	0x2000a664
 800bea0:	2000000c 	.word	0x2000000c
 800bea4:	080178b4 	.word	0x080178b4
 800bea8:	20000b64 	.word	0x20000b64

0800beac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800beac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800beae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800beb0:	3304      	adds	r3, #4

0800beb2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800beb2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800beb4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800beb6:	d3f9      	bcc.n	800beac <CopyDataInit>
  bx lr
 800beb8:	4770      	bx	lr

0800beba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800beba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800bebc:	3004      	adds	r0, #4

0800bebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800bebe:	4288      	cmp	r0, r1
  bcc FillZerobss
 800bec0:	d3fb      	bcc.n	800beba <FillZerobss>
  bx lr
 800bec2:	4770      	bx	lr

0800bec4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800bec4:	480c      	ldr	r0, [pc, #48]	; (800bef8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800bec6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800bec8:	f7fe fcc8 	bl	800a85c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800becc:	480b      	ldr	r0, [pc, #44]	; (800befc <LoopForever+0x6>)
 800bece:	490c      	ldr	r1, [pc, #48]	; (800bf00 <LoopForever+0xa>)
 800bed0:	4a0c      	ldr	r2, [pc, #48]	; (800bf04 <LoopForever+0xe>)
 800bed2:	2300      	movs	r3, #0
 800bed4:	f7ff ffed 	bl	800beb2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800bed8:	480b      	ldr	r0, [pc, #44]	; (800bf08 <LoopForever+0x12>)
 800beda:	490c      	ldr	r1, [pc, #48]	; (800bf0c <LoopForever+0x16>)
 800bedc:	4a0c      	ldr	r2, [pc, #48]	; (800bf10 <LoopForever+0x1a>)
 800bede:	2300      	movs	r3, #0
 800bee0:	f7ff ffe7 	bl	800beb2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800bee4:	480b      	ldr	r0, [pc, #44]	; (800bf14 <LoopForever+0x1e>)
 800bee6:	490c      	ldr	r1, [pc, #48]	; (800bf18 <LoopForever+0x22>)
 800bee8:	2300      	movs	r3, #0
 800beea:	f7ff ffe8 	bl	800bebe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800beee:	f006 f821 	bl	8011f34 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800bef2:	f7f9 fd9b 	bl	8005a2c <main>

0800bef6 <LoopForever>:

LoopForever:
  b LoopForever
 800bef6:	e7fe      	b.n	800bef6 <LoopForever>
  ldr   r0, =_estack
 800bef8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800befc:	20000008 	.word	0x20000008
 800bf00:	200002d0 	.word	0x200002d0
 800bf04:	08017f90 	.word	0x08017f90
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800bf08:	20030000 	.word	0x20030000
 800bf0c:	20030000 	.word	0x20030000
 800bf10:	08018258 	.word	0x08018258
  INIT_BSS _sbss, _ebss
 800bf14:	200002d0 	.word	0x200002d0
 800bf18:	2000a7b8 	.word	0x2000a7b8

0800bf1c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800bf1c:	e7fe      	b.n	800bf1c <ADC1_IRQHandler>
	...

0800bf20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bf26:	2300      	movs	r3, #0
 800bf28:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bf2a:	4b0c      	ldr	r3, [pc, #48]	; (800bf5c <HAL_Init+0x3c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a0b      	ldr	r2, [pc, #44]	; (800bf5c <HAL_Init+0x3c>)
 800bf30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf34:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bf36:	2003      	movs	r0, #3
 800bf38:	f000 f948 	bl	800c1cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bf3c:	200f      	movs	r0, #15
 800bf3e:	f000 f80f 	bl	800bf60 <HAL_InitTick>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d002      	beq.n	800bf4e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	71fb      	strb	r3, [r7, #7]
 800bf4c:	e001      	b.n	800bf52 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bf4e:	f7fe f973 	bl	800a238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bf52:	79fb      	ldrb	r3, [r7, #7]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	58004000 	.word	0x58004000

0800bf60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800bf6c:	4b17      	ldr	r3, [pc, #92]	; (800bfcc <HAL_InitTick+0x6c>)
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d024      	beq.n	800bfbe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800bf74:	f002 f820 	bl	800dfb8 <HAL_RCC_GetHCLKFreq>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <HAL_InitTick+0x6c>)
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bf84:	fbb3 f3f1 	udiv	r3, r3, r1
 800bf88:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f000 f950 	bl	800c232 <HAL_SYSTICK_Config>
 800bf92:	4603      	mov	r3, r0
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d10f      	bne.n	800bfb8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b0f      	cmp	r3, #15
 800bf9c:	d809      	bhi.n	800bfb2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa6:	f000 f91c 	bl	800c1e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bfaa:	4a09      	ldr	r2, [pc, #36]	; (800bfd0 <HAL_InitTick+0x70>)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6013      	str	r3, [r2, #0]
 800bfb0:	e007      	b.n	800bfc2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	73fb      	strb	r3, [r7, #15]
 800bfb6:	e004      	b.n	800bfc2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	73fb      	strb	r3, [r7, #15]
 800bfbc:	e001      	b.n	800bfc2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3710      	adds	r7, #16
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	2000001c 	.word	0x2000001c
 800bfd0:	20000018 	.word	0x20000018

0800bfd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bfd8:	4b06      	ldr	r3, [pc, #24]	; (800bff4 <HAL_IncTick+0x20>)
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	461a      	mov	r2, r3
 800bfde:	4b06      	ldr	r3, [pc, #24]	; (800bff8 <HAL_IncTick+0x24>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	4a04      	ldr	r2, [pc, #16]	; (800bff8 <HAL_IncTick+0x24>)
 800bfe6:	6013      	str	r3, [r2, #0]
}
 800bfe8:	bf00      	nop
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	2000001c 	.word	0x2000001c
 800bff8:	2000a764 	.word	0x2000a764

0800bffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bffc:	b480      	push	{r7}
 800bffe:	af00      	add	r7, sp, #0
  return uwTick;
 800c000:	4b03      	ldr	r3, [pc, #12]	; (800c010 <HAL_GetTick+0x14>)
 800c002:	681b      	ldr	r3, [r3, #0]
}
 800c004:	4618      	mov	r0, r3
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr
 800c00e:	bf00      	nop
 800c010:	2000a764 	.word	0x2000a764

0800c014 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800c014:	b480      	push	{r7}
 800c016:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800c018:	4b03      	ldr	r3, [pc, #12]	; (800c028 <HAL_GetTickPrio+0x14>)
 800c01a:	681b      	ldr	r3, [r3, #0]
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	20000018 	.word	0x20000018

0800c02c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c02c:	b480      	push	{r7}
 800c02e:	b085      	sub	sp, #20
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c03c:	4b0c      	ldr	r3, [pc, #48]	; (800c070 <__NVIC_SetPriorityGrouping+0x44>)
 800c03e:	68db      	ldr	r3, [r3, #12]
 800c040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c048:	4013      	ands	r3, r2
 800c04a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800c058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c05c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c05e:	4a04      	ldr	r2, [pc, #16]	; (800c070 <__NVIC_SetPriorityGrouping+0x44>)
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	60d3      	str	r3, [r2, #12]
}
 800c064:	bf00      	nop
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr
 800c070:	e000ed00 	.word	0xe000ed00

0800c074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800c074:	b480      	push	{r7}
 800c076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c078:	4b04      	ldr	r3, [pc, #16]	; (800c08c <__NVIC_GetPriorityGrouping+0x18>)
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	0a1b      	lsrs	r3, r3, #8
 800c07e:	f003 0307 	and.w	r3, r3, #7
}
 800c082:	4618      	mov	r0, r3
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	e000ed00 	.word	0xe000ed00

0800c090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	4603      	mov	r3, r0
 800c098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c09a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	db0b      	blt.n	800c0ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0a2:	79fb      	ldrb	r3, [r7, #7]
 800c0a4:	f003 021f 	and.w	r2, r3, #31
 800c0a8:	4907      	ldr	r1, [pc, #28]	; (800c0c8 <__NVIC_EnableIRQ+0x38>)
 800c0aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ae:	095b      	lsrs	r3, r3, #5
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	fa00 f202 	lsl.w	r2, r0, r2
 800c0b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800c0ba:	bf00      	nop
 800c0bc:	370c      	adds	r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	e000e100 	.word	0xe000e100

0800c0cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	6039      	str	r1, [r7, #0]
 800c0d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	db0a      	blt.n	800c0f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	b2da      	uxtb	r2, r3
 800c0e4:	490c      	ldr	r1, [pc, #48]	; (800c118 <__NVIC_SetPriority+0x4c>)
 800c0e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ea:	0112      	lsls	r2, r2, #4
 800c0ec:	b2d2      	uxtb	r2, r2
 800c0ee:	440b      	add	r3, r1
 800c0f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c0f4:	e00a      	b.n	800c10c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	4908      	ldr	r1, [pc, #32]	; (800c11c <__NVIC_SetPriority+0x50>)
 800c0fc:	79fb      	ldrb	r3, [r7, #7]
 800c0fe:	f003 030f 	and.w	r3, r3, #15
 800c102:	3b04      	subs	r3, #4
 800c104:	0112      	lsls	r2, r2, #4
 800c106:	b2d2      	uxtb	r2, r2
 800c108:	440b      	add	r3, r1
 800c10a:	761a      	strb	r2, [r3, #24]
}
 800c10c:	bf00      	nop
 800c10e:	370c      	adds	r7, #12
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	e000e100 	.word	0xe000e100
 800c11c:	e000ed00 	.word	0xe000ed00

0800c120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c120:	b480      	push	{r7}
 800c122:	b089      	sub	sp, #36	; 0x24
 800c124:	af00      	add	r7, sp, #0
 800c126:	60f8      	str	r0, [r7, #12]
 800c128:	60b9      	str	r1, [r7, #8]
 800c12a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f003 0307 	and.w	r3, r3, #7
 800c132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	f1c3 0307 	rsb	r3, r3, #7
 800c13a:	2b04      	cmp	r3, #4
 800c13c:	bf28      	it	cs
 800c13e:	2304      	movcs	r3, #4
 800c140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c142:	69fb      	ldr	r3, [r7, #28]
 800c144:	3304      	adds	r3, #4
 800c146:	2b06      	cmp	r3, #6
 800c148:	d902      	bls.n	800c150 <NVIC_EncodePriority+0x30>
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	3b03      	subs	r3, #3
 800c14e:	e000      	b.n	800c152 <NVIC_EncodePriority+0x32>
 800c150:	2300      	movs	r3, #0
 800c152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c154:	f04f 32ff 	mov.w	r2, #4294967295
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	fa02 f303 	lsl.w	r3, r2, r3
 800c15e:	43da      	mvns	r2, r3
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	401a      	ands	r2, r3
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c168:	f04f 31ff 	mov.w	r1, #4294967295
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	fa01 f303 	lsl.w	r3, r1, r3
 800c172:	43d9      	mvns	r1, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c178:	4313      	orrs	r3, r2
         );
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3724      	adds	r7, #36	; 0x24
 800c17e:	46bd      	mov	sp, r7
 800c180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c184:	4770      	bx	lr
	...

0800c188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3b01      	subs	r3, #1
 800c194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c198:	d301      	bcc.n	800c19e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c19a:	2301      	movs	r3, #1
 800c19c:	e00f      	b.n	800c1be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c19e:	4a0a      	ldr	r2, [pc, #40]	; (800c1c8 <SysTick_Config+0x40>)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c1a6:	210f      	movs	r1, #15
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ac:	f7ff ff8e 	bl	800c0cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c1b0:	4b05      	ldr	r3, [pc, #20]	; (800c1c8 <SysTick_Config+0x40>)
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c1b6:	4b04      	ldr	r3, [pc, #16]	; (800c1c8 <SysTick_Config+0x40>)
 800c1b8:	2207      	movs	r2, #7
 800c1ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3708      	adds	r7, #8
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	e000e010 	.word	0xe000e010

0800c1cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f7ff ff29 	bl	800c02c <__NVIC_SetPriorityGrouping>
}
 800c1da:	bf00      	nop
 800c1dc:	3708      	adds	r7, #8
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b086      	sub	sp, #24
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	60b9      	str	r1, [r7, #8]
 800c1ec:	607a      	str	r2, [r7, #4]
 800c1ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c1f0:	f7ff ff40 	bl	800c074 <__NVIC_GetPriorityGrouping>
 800c1f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1f6:	687a      	ldr	r2, [r7, #4]
 800c1f8:	68b9      	ldr	r1, [r7, #8]
 800c1fa:	6978      	ldr	r0, [r7, #20]
 800c1fc:	f7ff ff90 	bl	800c120 <NVIC_EncodePriority>
 800c200:	4602      	mov	r2, r0
 800c202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c206:	4611      	mov	r1, r2
 800c208:	4618      	mov	r0, r3
 800c20a:	f7ff ff5f 	bl	800c0cc <__NVIC_SetPriority>
}
 800c20e:	bf00      	nop
 800c210:	3718      	adds	r7, #24
 800c212:	46bd      	mov	sp, r7
 800c214:	bd80      	pop	{r7, pc}

0800c216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b082      	sub	sp, #8
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	4603      	mov	r3, r0
 800c21e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c224:	4618      	mov	r0, r3
 800c226:	f7ff ff33 	bl	800c090 <__NVIC_EnableIRQ>
}
 800c22a:	bf00      	nop
 800c22c:	3708      	adds	r7, #8
 800c22e:	46bd      	mov	sp, r7
 800c230:	bd80      	pop	{r7, pc}

0800c232 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c232:	b580      	push	{r7, lr}
 800c234:	b082      	sub	sp, #8
 800c236:	af00      	add	r7, sp, #0
 800c238:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7ff ffa4 	bl	800c188 <SysTick_Config>
 800c240:	4603      	mov	r3, r0
}
 800c242:	4618      	mov	r0, r3
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b083      	sub	sp, #12
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d101      	bne.n	800c25c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	e04f      	b.n	800c2fc <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b02      	cmp	r3, #2
 800c266:	d008      	beq.n	800c27a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2204      	movs	r2, #4
 800c26c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e040      	b.n	800c2fc <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 020e 	bic.w	r2, r2, #14
 800c288:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c298:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	681a      	ldr	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f022 0201 	bic.w	r2, r2, #1
 800c2a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ae:	f003 021c 	and.w	r2, r3, #28
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2b6:	2101      	movs	r1, #1
 800c2b8:	fa01 f202 	lsl.w	r2, r1, r2
 800c2bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c2c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d00c      	beq.n	800c2ea <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c2de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c2e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b084      	sub	sp, #16
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c310:	2300      	movs	r3, #0
 800c312:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b02      	cmp	r3, #2
 800c31e:	d005      	beq.n	800c32c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2204      	movs	r2, #4
 800c324:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	73fb      	strb	r3, [r7, #15]
 800c32a:	e047      	b.n	800c3bc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	681a      	ldr	r2, [r3, #0]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f022 020e 	bic.w	r2, r2, #14
 800c33a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f022 0201 	bic.w	r2, r2, #1
 800c34a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c356:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c35a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c360:	f003 021c 	and.w	r2, r3, #28
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c368:	2101      	movs	r1, #1
 800c36a:	fa01 f202 	lsl.w	r2, r1, r2
 800c36e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800c378:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00c      	beq.n	800c39c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c390:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c396:	687a      	ldr	r2, [r7, #4]
 800c398:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800c39a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	4798      	blx	r3
    }
  }
  return status;
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c3d6:	4b1c      	ldr	r3, [pc, #112]	; (800c448 <HAL_FLASH_Program+0x80>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d101      	bne.n	800c3e2 <HAL_FLASH_Program+0x1a>
 800c3de:	2302      	movs	r3, #2
 800c3e0:	e02d      	b.n	800c43e <HAL_FLASH_Program+0x76>
 800c3e2:	4b19      	ldr	r3, [pc, #100]	; (800c448 <HAL_FLASH_Program+0x80>)
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c3e8:	4b17      	ldr	r3, [pc, #92]	; (800c448 <HAL_FLASH_Program+0x80>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c3ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c3f2:	f000 f869 	bl	800c4c8 <FLASH_WaitForLastOperation>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d11a      	bne.n	800c436 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d105      	bne.n	800c412 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800c406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c40a:	68b8      	ldr	r0, [r7, #8]
 800c40c:	f000 f8cc 	bl	800c5a8 <FLASH_Program_DoubleWord>
 800c410:	e004      	b.n	800c41c <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	4619      	mov	r1, r3
 800c416:	68b8      	ldr	r0, [r7, #8]
 800c418:	f00a f8aa 	bl	8016570 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c41c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c420:	f000 f852 	bl	800c4c8 <FLASH_WaitForLastOperation>
 800c424:	4603      	mov	r3, r0
 800c426:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800c428:	4b08      	ldr	r3, [pc, #32]	; (800c44c <HAL_FLASH_Program+0x84>)
 800c42a:	695a      	ldr	r2, [r3, #20]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	43db      	mvns	r3, r3
 800c430:	4906      	ldr	r1, [pc, #24]	; (800c44c <HAL_FLASH_Program+0x84>)
 800c432:	4013      	ands	r3, r2
 800c434:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c436:	4b04      	ldr	r3, [pc, #16]	; (800c448 <HAL_FLASH_Program+0x80>)
 800c438:	2200      	movs	r2, #0
 800c43a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800c43c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	2000a768 	.word	0x2000a768
 800c44c:	58004000 	.word	0x58004000

0800c450 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c450:	b480      	push	{r7}
 800c452:	b083      	sub	sp, #12
 800c454:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c45a:	4b0b      	ldr	r3, [pc, #44]	; (800c488 <HAL_FLASH_Unlock+0x38>)
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	da0b      	bge.n	800c47a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c462:	4b09      	ldr	r3, [pc, #36]	; (800c488 <HAL_FLASH_Unlock+0x38>)
 800c464:	4a09      	ldr	r2, [pc, #36]	; (800c48c <HAL_FLASH_Unlock+0x3c>)
 800c466:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c468:	4b07      	ldr	r3, [pc, #28]	; (800c488 <HAL_FLASH_Unlock+0x38>)
 800c46a:	4a09      	ldr	r2, [pc, #36]	; (800c490 <HAL_FLASH_Unlock+0x40>)
 800c46c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c46e:	4b06      	ldr	r3, [pc, #24]	; (800c488 <HAL_FLASH_Unlock+0x38>)
 800c470:	695b      	ldr	r3, [r3, #20]
 800c472:	2b00      	cmp	r3, #0
 800c474:	da01      	bge.n	800c47a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800c476:	2301      	movs	r3, #1
 800c478:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800c47a:	79fb      	ldrb	r3, [r7, #7]
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr
 800c488:	58004000 	.word	0x58004000
 800c48c:	45670123 	.word	0x45670123
 800c490:	cdef89ab 	.word	0xcdef89ab

0800c494 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c49a:	2300      	movs	r3, #0
 800c49c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c49e:	4b09      	ldr	r3, [pc, #36]	; (800c4c4 <HAL_FLASH_Lock+0x30>)
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	4a08      	ldr	r2, [pc, #32]	; (800c4c4 <HAL_FLASH_Lock+0x30>)
 800c4a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4a8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800c4aa:	4b06      	ldr	r3, [pc, #24]	; (800c4c4 <HAL_FLASH_Lock+0x30>)
 800c4ac:	695b      	ldr	r3, [r3, #20]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	db01      	blt.n	800c4b6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr
 800c4c4:	58004000 	.word	0x58004000

0800c4c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800c4d0:	f7ff fd94 	bl	800bffc <HAL_GetTick>
 800c4d4:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c4d6:	e009      	b.n	800c4ec <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800c4d8:	f7ff fd90 	bl	800bffc <HAL_GetTick>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d801      	bhi.n	800c4ec <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800c4e8:	2303      	movs	r3, #3
 800c4ea:	e054      	b.n	800c596 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c4ec:	4b2c      	ldr	r3, [pc, #176]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c4ee:	691b      	ldr	r3, [r3, #16]
 800c4f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4f8:	d0ee      	beq.n	800c4d8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800c4fa:	4b29      	ldr	r3, [pc, #164]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f003 0301 	and.w	r3, r3, #1
 800c506:	2b00      	cmp	r3, #0
 800c508:	d002      	beq.n	800c510 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c50a:	4b25      	ldr	r3, [pc, #148]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c50c:	2201      	movs	r2, #1
 800c50e:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c516:	2b00      	cmp	r3, #0
 800c518:	d007      	beq.n	800c52a <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800c51a:	4b21      	ldr	r3, [pc, #132]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c51c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800c520:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c528:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800c530:	4013      	ands	r3, r2
 800c532:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d007      	beq.n	800c54e <FLASH_WaitForLastOperation+0x86>
 800c53e:	4b18      	ldr	r3, [pc, #96]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c540:	699a      	ldr	r2, [r3, #24]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c548:	4915      	ldr	r1, [pc, #84]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c54a:	4313      	orrs	r3, r2
 800c54c:	618b      	str	r3, [r1, #24]
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c554:	2b00      	cmp	r3, #0
 800c556:	d004      	beq.n	800c562 <FLASH_WaitForLastOperation+0x9a>
 800c558:	4a11      	ldr	r2, [pc, #68]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c560:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d00e      	beq.n	800c586 <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800c568:	4a0e      	ldr	r2, [pc, #56]	; (800c5a4 <FLASH_WaitForLastOperation+0xdc>)
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e011      	b.n	800c596 <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800c572:	f7ff fd43 	bl	800bffc <HAL_GetTick>
 800c576:	4602      	mov	r2, r0
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	1ad3      	subs	r3, r2, r3
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d801      	bhi.n	800c586 <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	e007      	b.n	800c596 <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800c586:	4b06      	ldr	r3, [pc, #24]	; (800c5a0 <FLASH_WaitForLastOperation+0xd8>)
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c58e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c592:	d0ee      	beq.n	800c572 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}
 800c59e:	bf00      	nop
 800c5a0:	58004000 	.word	0x58004000
 800c5a4:	2000a768 	.word	0x2000a768

0800c5a8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b085      	sub	sp, #20
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	60f8      	str	r0, [r7, #12]
 800c5b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c5b4:	4b0e      	ldr	r3, [pc, #56]	; (800c5f0 <FLASH_Program_DoubleWord+0x48>)
 800c5b6:	695b      	ldr	r3, [r3, #20]
 800c5b8:	4a0d      	ldr	r2, [pc, #52]	; (800c5f0 <FLASH_Program_DoubleWord+0x48>)
 800c5ba:	f043 0301 	orr.w	r3, r3, #1
 800c5be:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800c5c6:	f3bf 8f6f 	isb	sy
}
 800c5ca:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800c5cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c5d0:	f04f 0200 	mov.w	r2, #0
 800c5d4:	f04f 0300 	mov.w	r3, #0
 800c5d8:	000a      	movs	r2, r1
 800c5da:	2300      	movs	r3, #0
 800c5dc:	68f9      	ldr	r1, [r7, #12]
 800c5de:	3104      	adds	r1, #4
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	600b      	str	r3, [r1, #0]
}
 800c5e4:	bf00      	nop
 800c5e6:	3714      	adds	r7, #20
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	58004000 	.word	0x58004000

0800c5f4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c5fe:	4b24      	ldr	r3, [pc, #144]	; (800c690 <HAL_FLASHEx_Erase+0x9c>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d101      	bne.n	800c60a <HAL_FLASHEx_Erase+0x16>
 800c606:	2302      	movs	r3, #2
 800c608:	e03d      	b.n	800c686 <HAL_FLASHEx_Erase+0x92>
 800c60a:	4b21      	ldr	r3, [pc, #132]	; (800c690 <HAL_FLASHEx_Erase+0x9c>)
 800c60c:	2201      	movs	r2, #1
 800c60e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c610:	4b1f      	ldr	r3, [pc, #124]	; (800c690 <HAL_FLASHEx_Erase+0x9c>)
 800c612:	2200      	movs	r2, #0
 800c614:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c616:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c61a:	f7ff ff55 	bl	800c4c8 <FLASH_WaitForLastOperation>
 800c61e:	4603      	mov	r3, r0
 800c620:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c622:	7bfb      	ldrb	r3, [r7, #15]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d12a      	bne.n	800c67e <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d124      	bne.n	800c67a <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	f04f 32ff 	mov.w	r2, #4294967295
 800c636:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	60bb      	str	r3, [r7, #8]
 800c63e:	e012      	b.n	800c666 <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800c640:	68b8      	ldr	r0, [r7, #8]
 800c642:	f000 f869 	bl	800c718 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c64a:	f7ff ff3d 	bl	800c4c8 <FLASH_WaitForLastOperation>
 800c64e:	4603      	mov	r3, r0
 800c650:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800c652:	7bfb      	ldrb	r3, [r7, #15]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d003      	beq.n	800c660 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	601a      	str	r2, [r3, #0]
          break;
 800c65e:	e00a      	b.n	800c676 <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	3301      	adds	r3, #1
 800c664:	60bb      	str	r3, [r7, #8]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	685a      	ldr	r2, [r3, #4]
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	4413      	add	r3, r2
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	429a      	cmp	r2, r3
 800c674:	d3e4      	bcc.n	800c640 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800c676:	f000 f8b1 	bl	800c7dc <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c67a:	f000 f867 	bl	800c74c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c67e:	4b04      	ldr	r3, [pc, #16]	; (800c690 <HAL_FLASHEx_Erase+0x9c>)
 800c680:	2200      	movs	r2, #0
 800c682:	701a      	strb	r2, [r3, #0]

  return status;
 800c684:	7bfb      	ldrb	r3, [r7, #15]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	2000a768 	.word	0x2000a768

0800c694 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c69c:	4b1c      	ldr	r3, [pc, #112]	; (800c710 <HAL_FLASHEx_Erase_IT+0x7c>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d101      	bne.n	800c6a8 <HAL_FLASHEx_Erase_IT+0x14>
 800c6a4:	2302      	movs	r3, #2
 800c6a6:	e02e      	b.n	800c706 <HAL_FLASHEx_Erase_IT+0x72>
 800c6a8:	4b19      	ldr	r3, [pc, #100]	; (800c710 <HAL_FLASHEx_Erase_IT+0x7c>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c6ae:	4b18      	ldr	r3, [pc, #96]	; (800c710 <HAL_FLASHEx_Erase_IT+0x7c>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	4a15      	ldr	r2, [pc, #84]	; (800c710 <HAL_FLASHEx_Erase_IT+0x7c>)
 800c6ba:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800c6bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c6c0:	f7ff ff02 	bl	800c4c8 <FLASH_WaitForLastOperation>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800c6c8:	7bfb      	ldrb	r3, [r7, #15]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800c6ce:	4b10      	ldr	r3, [pc, #64]	; (800c710 <HAL_FLASHEx_Erase_IT+0x7c>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	701a      	strb	r2, [r3, #0]
 800c6d4:	e016      	b.n	800c704 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800c6d6:	4b0f      	ldr	r3, [pc, #60]	; (800c714 <HAL_FLASHEx_Erase_IT+0x80>)
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	4a0e      	ldr	r2, [pc, #56]	; (800c714 <HAL_FLASHEx_Erase_IT+0x80>)
 800c6dc:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800c6e0:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d10c      	bne.n	800c704 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	4a08      	ldr	r2, [pc, #32]	; (800c710 <HAL_FLASHEx_Erase_IT+0x7c>)
 800c6f0:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	4a06      	ldr	r2, [pc, #24]	; (800c710 <HAL_FLASHEx_Erase_IT+0x7c>)
 800c6f8:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f000 f80a 	bl	800c718 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800c704:	7bfb      	ldrb	r3, [r7, #15]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	2000a768 	.word	0x2000a768
 800c714:	58004000 	.word	0x58004000

0800c718 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800c720:	4b09      	ldr	r3, [pc, #36]	; (800c748 <FLASH_PageErase+0x30>)
 800c722:	695b      	ldr	r3, [r3, #20]
 800c724:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	4313      	orrs	r3, r2
 800c72e:	4a06      	ldr	r2, [pc, #24]	; (800c748 <FLASH_PageErase+0x30>)
 800c730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c734:	f043 0302 	orr.w	r3, r3, #2
 800c738:	6153      	str	r3, [r2, #20]
}
 800c73a:	bf00      	nop
 800c73c:	370c      	adds	r7, #12
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr
 800c746:	bf00      	nop
 800c748:	58004000 	.word	0x58004000

0800c74c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800c74c:	b480      	push	{r7}
 800c74e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800c750:	4b21      	ldr	r3, [pc, #132]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c75c:	d117      	bne.n	800c78e <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c75e:	4b1e      	ldr	r3, [pc, #120]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a1d      	ldr	r2, [pc, #116]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c768:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c76a:	4b1b      	ldr	r3, [pc, #108]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	4a1a      	ldr	r2, [pc, #104]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c774:	6013      	str	r3, [r2, #0]
 800c776:	4b18      	ldr	r3, [pc, #96]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a17      	ldr	r2, [pc, #92]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c77c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c780:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c782:	4b15      	ldr	r3, [pc, #84]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	4a14      	ldr	r2, [pc, #80]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c78c:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800c78e:	4b12      	ldr	r3, [pc, #72]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c79a:	d117      	bne.n	800c7cc <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800c79c:	4b0e      	ldr	r3, [pc, #56]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4a0d      	ldr	r2, [pc, #52]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c7a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7a6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c7a8:	4b0b      	ldr	r3, [pc, #44]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a0a      	ldr	r2, [pc, #40]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c7ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	4b08      	ldr	r3, [pc, #32]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	4a07      	ldr	r2, [pc, #28]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c7ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c7be:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c7c0:	4b05      	ldr	r3, [pc, #20]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a04      	ldr	r2, [pc, #16]	; (800c7d8 <FLASH_FlushCaches+0x8c>)
 800c7c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c7ca:	6013      	str	r3, [r2, #0]
  }
}
 800c7cc:	bf00      	nop
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	58004000 	.word	0x58004000

0800c7dc <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800c7e0:	4b06      	ldr	r3, [pc, #24]	; (800c7fc <FLASH_AcknowledgePageErase+0x20>)
 800c7e2:	695b      	ldr	r3, [r3, #20]
 800c7e4:	4a05      	ldr	r2, [pc, #20]	; (800c7fc <FLASH_AcknowledgePageErase+0x20>)
 800c7e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c7ea:	f023 0302 	bic.w	r3, r3, #2
 800c7ee:	6153      	str	r3, [r2, #20]
}
 800c7f0:	bf00      	nop
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr
 800c7fa:	bf00      	nop
 800c7fc:	58004000 	.word	0x58004000

0800c800 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c800:	b480      	push	{r7}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c80a:	2300      	movs	r3, #0
 800c80c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c80e:	e14c      	b.n	800caaa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	681a      	ldr	r2, [r3, #0]
 800c814:	2101      	movs	r1, #1
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	fa01 f303 	lsl.w	r3, r1, r3
 800c81c:	4013      	ands	r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f000 813e 	beq.w	800caa4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f003 0303 	and.w	r3, r3, #3
 800c830:	2b01      	cmp	r3, #1
 800c832:	d005      	beq.n	800c840 <HAL_GPIO_Init+0x40>
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	685b      	ldr	r3, [r3, #4]
 800c838:	f003 0303 	and.w	r3, r3, #3
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	d130      	bne.n	800c8a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	005b      	lsls	r3, r3, #1
 800c84a:	2203      	movs	r2, #3
 800c84c:	fa02 f303 	lsl.w	r3, r2, r3
 800c850:	43db      	mvns	r3, r3
 800c852:	693a      	ldr	r2, [r7, #16]
 800c854:	4013      	ands	r3, r2
 800c856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	68da      	ldr	r2, [r3, #12]
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	fa02 f303 	lsl.w	r3, r2, r3
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	4313      	orrs	r3, r2
 800c868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c876:	2201      	movs	r2, #1
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	fa02 f303 	lsl.w	r3, r2, r3
 800c87e:	43db      	mvns	r3, r3
 800c880:	693a      	ldr	r2, [r7, #16]
 800c882:	4013      	ands	r3, r2
 800c884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	091b      	lsrs	r3, r3, #4
 800c88c:	f003 0201 	and.w	r2, r3, #1
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	fa02 f303 	lsl.w	r3, r2, r3
 800c896:	693a      	ldr	r2, [r7, #16]
 800c898:	4313      	orrs	r3, r2
 800c89a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	693a      	ldr	r2, [r7, #16]
 800c8a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	685b      	ldr	r3, [r3, #4]
 800c8a6:	f003 0303 	and.w	r3, r3, #3
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d017      	beq.n	800c8de <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	005b      	lsls	r3, r3, #1
 800c8b8:	2203      	movs	r2, #3
 800c8ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c8be:	43db      	mvns	r3, r3
 800c8c0:	693a      	ldr	r2, [r7, #16]
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	689a      	ldr	r2, [r3, #8]
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c8d2:	693a      	ldr	r2, [r7, #16]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	693a      	ldr	r2, [r7, #16]
 800c8dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	685b      	ldr	r3, [r3, #4]
 800c8e2:	f003 0303 	and.w	r3, r3, #3
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d123      	bne.n	800c932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	08da      	lsrs	r2, r3, #3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	3208      	adds	r2, #8
 800c8f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	f003 0307 	and.w	r3, r3, #7
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	220f      	movs	r2, #15
 800c902:	fa02 f303 	lsl.w	r3, r2, r3
 800c906:	43db      	mvns	r3, r3
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	4013      	ands	r3, r2
 800c90c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	691a      	ldr	r2, [r3, #16]
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f003 0307 	and.w	r3, r3, #7
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	fa02 f303 	lsl.w	r3, r2, r3
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	4313      	orrs	r3, r2
 800c922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	08da      	lsrs	r2, r3, #3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	3208      	adds	r2, #8
 800c92c:	6939      	ldr	r1, [r7, #16]
 800c92e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	005b      	lsls	r3, r3, #1
 800c93c:	2203      	movs	r2, #3
 800c93e:	fa02 f303 	lsl.w	r3, r2, r3
 800c942:	43db      	mvns	r3, r3
 800c944:	693a      	ldr	r2, [r7, #16]
 800c946:	4013      	ands	r3, r2
 800c948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	685b      	ldr	r3, [r3, #4]
 800c94e:	f003 0203 	and.w	r2, r3, #3
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	fa02 f303 	lsl.w	r3, r2, r3
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	4313      	orrs	r3, r2
 800c95e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	693a      	ldr	r2, [r7, #16]
 800c964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f000 8098 	beq.w	800caa4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800c974:	4a54      	ldr	r2, [pc, #336]	; (800cac8 <HAL_GPIO_Init+0x2c8>)
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	089b      	lsrs	r3, r3, #2
 800c97a:	3302      	adds	r3, #2
 800c97c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	f003 0303 	and.w	r3, r3, #3
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	220f      	movs	r2, #15
 800c98c:	fa02 f303 	lsl.w	r3, r2, r3
 800c990:	43db      	mvns	r3, r3
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	4013      	ands	r3, r2
 800c996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c99e:	d019      	beq.n	800c9d4 <HAL_GPIO_Init+0x1d4>
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	4a4a      	ldr	r2, [pc, #296]	; (800cacc <HAL_GPIO_Init+0x2cc>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d013      	beq.n	800c9d0 <HAL_GPIO_Init+0x1d0>
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a49      	ldr	r2, [pc, #292]	; (800cad0 <HAL_GPIO_Init+0x2d0>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d00d      	beq.n	800c9cc <HAL_GPIO_Init+0x1cc>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	4a48      	ldr	r2, [pc, #288]	; (800cad4 <HAL_GPIO_Init+0x2d4>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d007      	beq.n	800c9c8 <HAL_GPIO_Init+0x1c8>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	4a47      	ldr	r2, [pc, #284]	; (800cad8 <HAL_GPIO_Init+0x2d8>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d101      	bne.n	800c9c4 <HAL_GPIO_Init+0x1c4>
 800c9c0:	2304      	movs	r3, #4
 800c9c2:	e008      	b.n	800c9d6 <HAL_GPIO_Init+0x1d6>
 800c9c4:	2307      	movs	r3, #7
 800c9c6:	e006      	b.n	800c9d6 <HAL_GPIO_Init+0x1d6>
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	e004      	b.n	800c9d6 <HAL_GPIO_Init+0x1d6>
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e002      	b.n	800c9d6 <HAL_GPIO_Init+0x1d6>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	e000      	b.n	800c9d6 <HAL_GPIO_Init+0x1d6>
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	697a      	ldr	r2, [r7, #20]
 800c9d8:	f002 0203 	and.w	r2, r2, #3
 800c9dc:	0092      	lsls	r2, r2, #2
 800c9de:	4093      	lsls	r3, r2
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c9e6:	4938      	ldr	r1, [pc, #224]	; (800cac8 <HAL_GPIO_Init+0x2c8>)
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	089b      	lsrs	r3, r3, #2
 800c9ec:	3302      	adds	r3, #2
 800c9ee:	693a      	ldr	r2, [r7, #16]
 800c9f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c9f4:	4b39      	ldr	r3, [pc, #228]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	43db      	mvns	r3, r3
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	4013      	ands	r3, r2
 800ca02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800ca10:	693a      	ldr	r2, [r7, #16]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800ca18:	4a30      	ldr	r2, [pc, #192]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ca1e:	4b2f      	ldr	r3, [pc, #188]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	43db      	mvns	r3, r3
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d003      	beq.n	800ca42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800ca3a:	693a      	ldr	r2, [r7, #16]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ca42:	4a26      	ldr	r2, [pc, #152]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ca48:	4b24      	ldr	r3, [pc, #144]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800ca4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ca4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	43db      	mvns	r3, r3
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	4013      	ands	r3, r2
 800ca58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d003      	beq.n	800ca6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ca6e:	4a1b      	ldr	r2, [pc, #108]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800ca76:	4b19      	ldr	r3, [pc, #100]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800ca78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	43db      	mvns	r3, r3
 800ca82:	693a      	ldr	r2, [r7, #16]
 800ca84:	4013      	ands	r3, r2
 800ca86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	685b      	ldr	r3, [r3, #4]
 800ca8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d003      	beq.n	800ca9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800ca94:	693a      	ldr	r2, [r7, #16]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800ca9c:	4a0f      	ldr	r2, [pc, #60]	; (800cadc <HAL_GPIO_Init+0x2dc>)
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800caa4:	697b      	ldr	r3, [r7, #20]
 800caa6:	3301      	adds	r3, #1
 800caa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	697b      	ldr	r3, [r7, #20]
 800cab0:	fa22 f303 	lsr.w	r3, r2, r3
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	f47f aeab 	bne.w	800c810 <HAL_GPIO_Init+0x10>
  }
}
 800caba:	bf00      	nop
 800cabc:	bf00      	nop
 800cabe:	371c      	adds	r7, #28
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr
 800cac8:	40010000 	.word	0x40010000
 800cacc:	48000400 	.word	0x48000400
 800cad0:	48000800 	.word	0x48000800
 800cad4:	48000c00 	.word	0x48000c00
 800cad8:	48001000 	.word	0x48001000
 800cadc:	58000800 	.word	0x58000800

0800cae0 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	460b      	mov	r3, r1
 800caea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	691a      	ldr	r2, [r3, #16]
 800caf0:	887b      	ldrh	r3, [r7, #2]
 800caf2:	4013      	ands	r3, r2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800caf8:	2301      	movs	r3, #1
 800cafa:	73fb      	strb	r3, [r7, #15]
 800cafc:	e001      	b.n	800cb02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cafe:	2300      	movs	r3, #0
 800cb00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3714      	adds	r7, #20
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	807b      	strh	r3, [r7, #2]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cb20:	787b      	ldrb	r3, [r7, #1]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d003      	beq.n	800cb2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cb26:	887a      	ldrh	r2, [r7, #2]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800cb2c:	e002      	b.n	800cb34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cb2e:	887a      	ldrh	r2, [r7, #2]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	629a      	str	r2, [r3, #40]	; 0x28
}
 800cb34:	bf00      	nop
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b085      	sub	sp, #20
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	460b      	mov	r3, r1
 800cb4a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800cb52:	887a      	ldrh	r2, [r7, #2]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4013      	ands	r3, r2
 800cb58:	041a      	lsls	r2, r3, #16
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	43d9      	mvns	r1, r3
 800cb5e:	887b      	ldrh	r3, [r7, #2]
 800cb60:	400b      	ands	r3, r1
 800cb62:	431a      	orrs	r2, r3
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	619a      	str	r2, [r3, #24]
}
 800cb68:	bf00      	nop
 800cb6a:	3714      	adds	r7, #20
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb72:	4770      	bx	lr

0800cb74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b082      	sub	sp, #8
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800cb7e:	4b08      	ldr	r3, [pc, #32]	; (800cba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cb80:	68da      	ldr	r2, [r3, #12]
 800cb82:	88fb      	ldrh	r3, [r7, #6]
 800cb84:	4013      	ands	r3, r2
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d006      	beq.n	800cb98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800cb8a:	4a05      	ldr	r2, [pc, #20]	; (800cba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800cb8c:	88fb      	ldrh	r3, [r7, #6]
 800cb8e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800cb90:	88fb      	ldrh	r3, [r7, #6]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7f8 fe0a 	bl	80057ac <HAL_GPIO_EXTI_Callback>
  }
}
 800cb98:	bf00      	nop
 800cb9a:	3708      	adds	r7, #8
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}
 800cba0:	58000800 	.word	0x58000800

0800cba4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800cbaa:	4b0a      	ldr	r3, [pc, #40]	; (800cbd4 <HAL_HSEM_IRQHandler+0x30>)
 800cbac:	68db      	ldr	r3, [r3, #12]
 800cbae:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800cbb0:	4b08      	ldr	r3, [pc, #32]	; (800cbd4 <HAL_HSEM_IRQHandler+0x30>)
 800cbb2:	681a      	ldr	r2, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	43db      	mvns	r3, r3
 800cbb8:	4906      	ldr	r1, [pc, #24]	; (800cbd4 <HAL_HSEM_IRQHandler+0x30>)
 800cbba:	4013      	ands	r3, r2
 800cbbc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800cbbe:	4a05      	ldr	r2, [pc, #20]	; (800cbd4 <HAL_HSEM_IRQHandler+0x30>)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 f807 	bl	800cbd8 <HAL_HSEM_FreeCallback>
}
 800cbca:	bf00      	nop
 800cbcc:	3708      	adds	r7, #8
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	58001500 	.word	0x58001500

0800cbd8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800cbec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbee:	b08b      	sub	sp, #44	; 0x2c
 800cbf0:	af06      	add	r7, sp, #24
 800cbf2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e0cb      	b.n	800cd96 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d106      	bne.n	800cc18 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2200      	movs	r2, #0
 800cc0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cc12:	6878      	ldr	r0, [r7, #4]
 800cc14:	f7fd fc6c 	bl	800a4f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2203      	movs	r2, #3
 800cc1c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f005 f943 	bl	8011eb0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	73fb      	strb	r3, [r7, #15]
 800cc2e:	e040      	b.n	800ccb2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cc30:	7bfb      	ldrb	r3, [r7, #15]
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	1c5a      	adds	r2, r3, #1
 800cc36:	4613      	mov	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4413      	add	r3, r2
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	440b      	add	r3, r1
 800cc40:	3301      	adds	r3, #1
 800cc42:	2201      	movs	r2, #1
 800cc44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800cc46:	7bfb      	ldrb	r3, [r7, #15]
 800cc48:	6879      	ldr	r1, [r7, #4]
 800cc4a:	1c5a      	adds	r2, r3, #1
 800cc4c:	4613      	mov	r3, r2
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	00db      	lsls	r3, r3, #3
 800cc54:	440b      	add	r3, r1
 800cc56:	7bfa      	ldrb	r2, [r7, #15]
 800cc58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cc5a:	7bfb      	ldrb	r3, [r7, #15]
 800cc5c:	6879      	ldr	r1, [r7, #4]
 800cc5e:	1c5a      	adds	r2, r3, #1
 800cc60:	4613      	mov	r3, r2
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	00db      	lsls	r3, r3, #3
 800cc68:	440b      	add	r3, r1
 800cc6a:	3303      	adds	r3, #3
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cc70:	7bfa      	ldrb	r2, [r7, #15]
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	00db      	lsls	r3, r3, #3
 800cc7c:	440b      	add	r3, r1
 800cc7e:	3338      	adds	r3, #56	; 0x38
 800cc80:	2200      	movs	r2, #0
 800cc82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cc84:	7bfa      	ldrb	r2, [r7, #15]
 800cc86:	6879      	ldr	r1, [r7, #4]
 800cc88:	4613      	mov	r3, r2
 800cc8a:	009b      	lsls	r3, r3, #2
 800cc8c:	4413      	add	r3, r2
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	440b      	add	r3, r1
 800cc92:	333c      	adds	r3, #60	; 0x3c
 800cc94:	2200      	movs	r2, #0
 800cc96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cc98:	7bfa      	ldrb	r2, [r7, #15]
 800cc9a:	6879      	ldr	r1, [r7, #4]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	4413      	add	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	440b      	add	r3, r1
 800cca6:	3340      	adds	r3, #64	; 0x40
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	3301      	adds	r3, #1
 800ccb0:	73fb      	strb	r3, [r7, #15]
 800ccb2:	7bfa      	ldrb	r2, [r7, #15]
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	685b      	ldr	r3, [r3, #4]
 800ccb8:	429a      	cmp	r2, r3
 800ccba:	d3b9      	bcc.n	800cc30 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	73fb      	strb	r3, [r7, #15]
 800ccc0:	e044      	b.n	800cd4c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ccc2:	7bfa      	ldrb	r2, [r7, #15]
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	4613      	mov	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	4413      	add	r3, r2
 800cccc:	00db      	lsls	r3, r3, #3
 800ccce:	440b      	add	r3, r1
 800ccd0:	f203 1369 	addw	r3, r3, #361	; 0x169
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ccd8:	7bfa      	ldrb	r2, [r7, #15]
 800ccda:	6879      	ldr	r1, [r7, #4]
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	440b      	add	r3, r1
 800cce6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ccea:	7bfa      	ldrb	r2, [r7, #15]
 800ccec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ccee:	7bfa      	ldrb	r2, [r7, #15]
 800ccf0:	6879      	ldr	r1, [r7, #4]
 800ccf2:	4613      	mov	r3, r2
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	4413      	add	r3, r2
 800ccf8:	00db      	lsls	r3, r3, #3
 800ccfa:	440b      	add	r3, r1
 800ccfc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800cd00:	2200      	movs	r2, #0
 800cd02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cd04:	7bfa      	ldrb	r2, [r7, #15]
 800cd06:	6879      	ldr	r1, [r7, #4]
 800cd08:	4613      	mov	r3, r2
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4413      	add	r3, r2
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	440b      	add	r3, r1
 800cd12:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800cd16:	2200      	movs	r2, #0
 800cd18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cd1a:	7bfa      	ldrb	r2, [r7, #15]
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	00db      	lsls	r3, r3, #3
 800cd26:	440b      	add	r3, r1
 800cd28:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cd30:	7bfa      	ldrb	r2, [r7, #15]
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	4613      	mov	r3, r2
 800cd36:	009b      	lsls	r3, r3, #2
 800cd38:	4413      	add	r3, r2
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	440b      	add	r3, r1
 800cd3e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800cd42:	2200      	movs	r2, #0
 800cd44:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	73fb      	strb	r3, [r7, #15]
 800cd4c:	7bfa      	ldrb	r2, [r7, #15]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d3b5      	bcc.n	800ccc2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	603b      	str	r3, [r7, #0]
 800cd5c:	687e      	ldr	r6, [r7, #4]
 800cd5e:	466d      	mov	r5, sp
 800cd60:	f106 0410 	add.w	r4, r6, #16
 800cd64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cd66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	602b      	str	r3, [r5, #0]
 800cd6c:	1d33      	adds	r3, r6, #4
 800cd6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd70:	6838      	ldr	r0, [r7, #0]
 800cd72:	f005 f8b8 	bl	8011ee6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	2201      	movs	r2, #1
 800cd82:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d102      	bne.n	800cd94 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f000 f805 	bl	800cd9e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cd94:	2300      	movs	r3, #0
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3714      	adds	r7, #20
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cd9e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cd9e:	b480      	push	{r7}
 800cda0:	b085      	sub	sp, #20
 800cda2:	af00      	add	r7, sp, #0
 800cda4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cdc2:	b29b      	uxth	r3, r3
 800cdc4:	f043 0301 	orr.w	r3, r3, #1
 800cdc8:	b29a      	uxth	r2, r3
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f043 0302 	orr.w	r3, r3, #2
 800cddc:	b29a      	uxth	r2, r3
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3714      	adds	r7, #20
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr

0800cdf2 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800cdf2:	b580      	push	{r7, lr}
 800cdf4:	b084      	sub	sp, #16
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d01d      	beq.n	800ce40 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	791b      	ldrb	r3, [r3, #4]
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d102      	bne.n	800ce14 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7fd fa9c 	bl	800a34c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2202      	movs	r2, #2
 800ce18:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	2201      	movs	r2, #1
 800ce20:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689a      	ldr	r2, [r3, #8]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 800ce30:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2200      	movs	r2, #0
 800ce36:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2201      	movs	r2, #1
 800ce3c:	711a      	strb	r2, [r3, #4]
 800ce3e:	e001      	b.n	800ce44 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ce50:	b480      	push	{r7}
 800ce52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce54:	4b05      	ldr	r3, [pc, #20]	; (800ce6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a04      	ldr	r2, [pc, #16]	; (800ce6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ce5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce5e:	6013      	str	r3, [r2, #0]
}
 800ce60:	bf00      	nop
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	58000400 	.word	0x58000400

0800ce70 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ce70:	b480      	push	{r7}
 800ce72:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800ce74:	4b04      	ldr	r3, [pc, #16]	; (800ce88 <HAL_PWREx_GetVoltageRange+0x18>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr
 800ce86:	bf00      	nop
 800ce88:	58000400 	.word	0x58000400

0800ce8c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800ce90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce9e:	d101      	bne.n	800cea4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800cea0:	2301      	movs	r3, #1
 800cea2:	e000      	b.n	800cea6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr

0800ceb0 <LL_RCC_HSE_Enable>:
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800ceb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cec2:	6013      	str	r3, [r2, #0]
}
 800cec4:	bf00      	nop
 800cec6:	46bd      	mov	sp, r7
 800cec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cecc:	4770      	bx	lr

0800cece <LL_RCC_HSE_Disable>:
{
 800cece:	b480      	push	{r7}
 800ced0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800ced2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cedc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cee0:	6013      	str	r3, [r2, #0]
}
 800cee2:	bf00      	nop
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <LL_RCC_HSE_IsReady>:
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800cef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cefa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cefe:	d101      	bne.n	800cf04 <LL_RCC_HSE_IsReady+0x18>
 800cf00:	2301      	movs	r3, #1
 800cf02:	e000      	b.n	800cf06 <LL_RCC_HSE_IsReady+0x1a>
 800cf04:	2300      	movs	r3, #0
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <LL_RCC_HSI_Enable>:
{
 800cf10:	b480      	push	{r7}
 800cf12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800cf14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cf1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf22:	6013      	str	r3, [r2, #0]
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr

0800cf2e <LL_RCC_HSI_Disable>:
{
 800cf2e:	b480      	push	{r7}
 800cf30:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800cf32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cf3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf40:	6013      	str	r3, [r2, #0]
}
 800cf42:	bf00      	nop
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <LL_RCC_HSI_IsReady>:
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800cf50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf5e:	d101      	bne.n	800cf64 <LL_RCC_HSI_IsReady+0x18>
 800cf60:	2301      	movs	r3, #1
 800cf62:	e000      	b.n	800cf66 <LL_RCC_HSI_IsReady+0x1a>
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <LL_RCC_HSI_SetCalibTrimming>:
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800cf78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	061b      	lsls	r3, r3, #24
 800cf86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cf8a:	4313      	orrs	r3, r2
 800cf8c:	604b      	str	r3, [r1, #4]
}
 800cf8e:	bf00      	nop
 800cf90:	370c      	adds	r7, #12
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr

0800cf9a <LL_RCC_HSI48_Enable>:
{
 800cf9a:	b480      	push	{r7}
 800cf9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cf9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cfaa:	f043 0301 	orr.w	r3, r3, #1
 800cfae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800cfb2:	bf00      	nop
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <LL_RCC_HSI48_Disable>:
{
 800cfbc:	b480      	push	{r7}
 800cfbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800cfc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cfcc:	f023 0301 	bic.w	r3, r3, #1
 800cfd0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800cfd4:	bf00      	nop
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfdc:	4770      	bx	lr

0800cfde <LL_RCC_HSI48_IsReady>:
{
 800cfde:	b480      	push	{r7}
 800cfe0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800cfe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cfe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cfea:	f003 0302 	and.w	r3, r3, #2
 800cfee:	2b02      	cmp	r3, #2
 800cff0:	d101      	bne.n	800cff6 <LL_RCC_HSI48_IsReady+0x18>
 800cff2:	2301      	movs	r3, #1
 800cff4:	e000      	b.n	800cff8 <LL_RCC_HSI48_IsReady+0x1a>
 800cff6:	2300      	movs	r3, #0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <LL_RCC_LSE_Enable>:
{
 800d002:	b480      	push	{r7}
 800d004:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d00a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d00e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d012:	f043 0301 	orr.w	r3, r3, #1
 800d016:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d01a:	bf00      	nop
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <LL_RCC_LSE_Disable>:
{
 800d024:	b480      	push	{r7}
 800d026:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d02c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d030:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d034:	f023 0301 	bic.w	r3, r3, #1
 800d038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d03c:	bf00      	nop
 800d03e:	46bd      	mov	sp, r7
 800d040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d044:	4770      	bx	lr

0800d046 <LL_RCC_LSE_EnableBypass>:
{
 800d046:	b480      	push	{r7}
 800d048:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d04a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d056:	f043 0304 	orr.w	r3, r3, #4
 800d05a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d05e:	bf00      	nop
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <LL_RCC_LSE_DisableBypass>:
{
 800d068:	b480      	push	{r7}
 800d06a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d06c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d074:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d078:	f023 0304 	bic.w	r3, r3, #4
 800d07c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800d080:	bf00      	nop
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <LL_RCC_LSE_IsReady>:
{
 800d08a:	b480      	push	{r7}
 800d08c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d08e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d096:	f003 0302 	and.w	r3, r3, #2
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	d101      	bne.n	800d0a2 <LL_RCC_LSE_IsReady+0x18>
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e000      	b.n	800d0a4 <LL_RCC_LSE_IsReady+0x1a>
 800d0a2:	2300      	movs	r3, #0
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <LL_RCC_LSI1_Enable>:
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d0b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d0be:	f043 0301 	orr.w	r3, r3, #1
 800d0c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800d0c6:	bf00      	nop
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <LL_RCC_LSI1_Disable>:
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d0d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d0e0:	f023 0301 	bic.w	r3, r3, #1
 800d0e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800d0e8:	bf00      	nop
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <LL_RCC_LSI1_IsReady>:
{
 800d0f2:	b480      	push	{r7}
 800d0f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800d0f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d0fe:	f003 0302 	and.w	r3, r3, #2
 800d102:	2b02      	cmp	r3, #2
 800d104:	d101      	bne.n	800d10a <LL_RCC_LSI1_IsReady+0x18>
 800d106:	2301      	movs	r3, #1
 800d108:	e000      	b.n	800d10c <LL_RCC_LSI1_IsReady+0x1a>
 800d10a:	2300      	movs	r3, #0
}
 800d10c:	4618      	mov	r0, r3
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <LL_RCC_LSI2_Enable>:
{
 800d116:	b480      	push	{r7}
 800d118:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d11a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d11e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d126:	f043 0304 	orr.w	r3, r3, #4
 800d12a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800d12e:	bf00      	nop
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <LL_RCC_LSI2_Disable>:
{
 800d138:	b480      	push	{r7}
 800d13a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d13c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d144:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d148:	f023 0304 	bic.w	r3, r3, #4
 800d14c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800d150:	bf00      	nop
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <LL_RCC_LSI2_IsReady>:
{
 800d15a:	b480      	push	{r7}
 800d15c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800d15e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d166:	f003 0308 	and.w	r3, r3, #8
 800d16a:	2b08      	cmp	r3, #8
 800d16c:	d101      	bne.n	800d172 <LL_RCC_LSI2_IsReady+0x18>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <LL_RCC_LSI2_IsReady+0x1a>
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <LL_RCC_LSI2_SetTrimming>:
{
 800d17e:	b480      	push	{r7}
 800d180:	b083      	sub	sp, #12
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800d186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d18e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	021b      	lsls	r3, r3, #8
 800d196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d19a:	4313      	orrs	r3, r2
 800d19c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800d1a0:	bf00      	nop
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <LL_RCC_MSI_Enable>:
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800d1b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d1ba:	f043 0301 	orr.w	r3, r3, #1
 800d1be:	6013      	str	r3, [r2, #0]
}
 800d1c0:	bf00      	nop
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr

0800d1ca <LL_RCC_MSI_Disable>:
{
 800d1ca:	b480      	push	{r7}
 800d1cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800d1ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d1d8:	f023 0301 	bic.w	r3, r3, #1
 800d1dc:	6013      	str	r3, [r2, #0]
}
 800d1de:	bf00      	nop
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <LL_RCC_MSI_IsReady>:
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800d1ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	f003 0302 	and.w	r3, r3, #2
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	d101      	bne.n	800d1fe <LL_RCC_MSI_IsReady+0x16>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e000      	b.n	800d200 <LL_RCC_MSI_IsReady+0x18>
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	46bd      	mov	sp, r7
 800d204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d208:	4770      	bx	lr

0800d20a <LL_RCC_MSI_SetRange>:
{
 800d20a:	b480      	push	{r7}
 800d20c:	b083      	sub	sp, #12
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800d212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d21c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	4313      	orrs	r3, r2
 800d224:	600b      	str	r3, [r1, #0]
}
 800d226:	bf00      	nop
 800d228:	370c      	adds	r7, #12
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <LL_RCC_MSI_GetRange>:
{
 800d232:	b480      	push	{r7}
 800d234:	b083      	sub	sp, #12
 800d236:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800d238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d242:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2bb0      	cmp	r3, #176	; 0xb0
 800d248:	d901      	bls.n	800d24e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800d24a:	23b0      	movs	r3, #176	; 0xb0
 800d24c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800d24e:	687b      	ldr	r3, [r7, #4]
}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <LL_RCC_MSI_SetCalibTrimming>:
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800d264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	021b      	lsls	r3, r3, #8
 800d272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d276:	4313      	orrs	r3, r2
 800d278:	604b      	str	r3, [r1, #4]
}
 800d27a:	bf00      	nop
 800d27c:	370c      	adds	r7, #12
 800d27e:	46bd      	mov	sp, r7
 800d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d284:	4770      	bx	lr

0800d286 <LL_RCC_SetSysClkSource>:
{
 800d286:	b480      	push	{r7}
 800d288:	b083      	sub	sp, #12
 800d28a:	af00      	add	r7, sp, #0
 800d28c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d28e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	f023 0203 	bic.w	r2, r3, #3
 800d298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	608b      	str	r3, [r1, #8]
}
 800d2a2:	bf00      	nop
 800d2a4:	370c      	adds	r7, #12
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ac:	4770      	bx	lr

0800d2ae <LL_RCC_GetSysClkSource>:
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d2b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	f003 030c 	and.w	r3, r3, #12
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c4:	4770      	bx	lr

0800d2c6 <LL_RCC_SetAHBPrescaler>:
{
 800d2c6:	b480      	push	{r7}
 800d2c8:	b083      	sub	sp, #12
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d2ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2d2:	689b      	ldr	r3, [r3, #8]
 800d2d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d2d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	608b      	str	r3, [r1, #8]
}
 800d2e2:	bf00      	nop
 800d2e4:	370c      	adds	r7, #12
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <LL_C2_RCC_SetAHBPrescaler>:
{
 800d2ee:	b480      	push	{r7}
 800d2f0:	b083      	sub	sp, #12
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800d2f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d2fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d2fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800d302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4313      	orrs	r3, r2
 800d30a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800d30e:	bf00      	nop
 800d310:	370c      	adds	r7, #12
 800d312:	46bd      	mov	sp, r7
 800d314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d318:	4770      	bx	lr

0800d31a <LL_RCC_SetAHB4Prescaler>:
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800d322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d326:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d32a:	f023 020f 	bic.w	r2, r3, #15
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	091b      	lsrs	r3, r3, #4
 800d332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d336:	4313      	orrs	r3, r2
 800d338:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800d33c:	bf00      	nop
 800d33e:	370c      	adds	r7, #12
 800d340:	46bd      	mov	sp, r7
 800d342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d346:	4770      	bx	lr

0800d348 <LL_RCC_SetAPB1Prescaler>:
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d354:	689b      	ldr	r3, [r3, #8]
 800d356:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d35a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	4313      	orrs	r3, r2
 800d362:	608b      	str	r3, [r1, #8]
}
 800d364:	bf00      	nop
 800d366:	370c      	adds	r7, #12
 800d368:	46bd      	mov	sp, r7
 800d36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36e:	4770      	bx	lr

0800d370 <LL_RCC_SetAPB2Prescaler>:
{
 800d370:	b480      	push	{r7}
 800d372:	b083      	sub	sp, #12
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d37c:	689b      	ldr	r3, [r3, #8]
 800d37e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800d382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	4313      	orrs	r3, r2
 800d38a:	608b      	str	r3, [r1, #8]
}
 800d38c:	bf00      	nop
 800d38e:	370c      	adds	r7, #12
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <LL_RCC_GetAHBPrescaler>:
{
 800d398:	b480      	push	{r7}
 800d39a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d39c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <LL_RCC_GetAHB4Prescaler>:
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800d3b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d3bc:	011b      	lsls	r3, r3, #4
 800d3be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ca:	4770      	bx	lr

0800d3cc <LL_RCC_GetAPB1Prescaler>:
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800d3d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3d4:	689b      	ldr	r3, [r3, #8]
 800d3d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <LL_RCC_GetAPB2Prescaler>:
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800d3e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800d400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d40a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d40e:	6013      	str	r3, [r2, #0]
}
 800d410:	bf00      	nop
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr

0800d41a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800d41a:	b480      	push	{r7}
 800d41c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800d41e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d42c:	6013      	str	r3, [r2, #0]
}
 800d42e:	bf00      	nop
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800d438:	b480      	push	{r7}
 800d43a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800d43c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d44a:	d101      	bne.n	800d450 <LL_RCC_PLL_IsReady+0x18>
 800d44c:	2301      	movs	r3, #1
 800d44e:	e000      	b.n	800d452 <LL_RCC_PLL_IsReady+0x1a>
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800d45c:	b480      	push	{r7}
 800d45e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	0a1b      	lsrs	r3, r3, #8
 800d468:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	46bd      	mov	sp, r7
 800d470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d474:	4770      	bx	lr

0800d476 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800d476:	b480      	push	{r7}
 800d478:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d47a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800d484:	4618      	mov	r0, r3
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800d48e:	b480      	push	{r7}
 800d490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d496:	68db      	ldr	r3, [r3, #12]
 800d498:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a4:	4770      	bx	lr

0800d4a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800d4a6:	b480      	push	{r7}
 800d4a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d4aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	f003 0303 	and.w	r3, r3, #3
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800d4c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4c6:	689b      	ldr	r3, [r3, #8]
 800d4c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4d0:	d101      	bne.n	800d4d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e000      	b.n	800d4d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800d4d6:	2300      	movs	r3, #0
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800d4e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d4ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d4f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d4f6:	d101      	bne.n	800d4fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800d4f8:	2301      	movs	r3, #1
 800d4fa:	e000      	b.n	800d4fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	46bd      	mov	sp, r7
 800d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800d508:	b480      	push	{r7}
 800d50a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800d50c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d510:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800d514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d51c:	d101      	bne.n	800d522 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800d51e:	2301      	movs	r3, #1
 800d520:	e000      	b.n	800d524 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800d522:	2300      	movs	r3, #0
}
 800d524:	4618      	mov	r0, r3
 800d526:	46bd      	mov	sp, r7
 800d528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52c:	4770      	bx	lr

0800d52e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800d52e:	b480      	push	{r7}
 800d530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800d532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d53c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d540:	d101      	bne.n	800d546 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800d546:	2300      	movs	r3, #0
}
 800d548:	4618      	mov	r0, r3
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800d552:	b480      	push	{r7}
 800d554:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800d556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d55a:	689b      	ldr	r3, [r3, #8]
 800d55c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d560:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d564:	d101      	bne.n	800d56a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800d566:	2301      	movs	r3, #1
 800d568:	e000      	b.n	800d56c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
	...

0800d578 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d578:	b590      	push	{r4, r7, lr}
 800d57a:	b08d      	sub	sp, #52	; 0x34
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d101      	bne.n	800d58a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d586:	2301      	movs	r3, #1
 800d588:	e363      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	f000 808d 	beq.w	800d6b2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d598:	f7ff fe89 	bl	800d2ae <LL_RCC_GetSysClkSource>
 800d59c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d59e:	f7ff ff82 	bl	800d4a6 <LL_RCC_PLL_GetMainSource>
 800d5a2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d005      	beq.n	800d5b6 <HAL_RCC_OscConfig+0x3e>
 800d5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ac:	2b0c      	cmp	r3, #12
 800d5ae:	d147      	bne.n	800d640 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800d5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b2:	2b01      	cmp	r3, #1
 800d5b4:	d144      	bne.n	800d640 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	69db      	ldr	r3, [r3, #28]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e347      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d5c6:	f7ff fe34 	bl	800d232 <LL_RCC_MSI_GetRange>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	429c      	cmp	r4, r3
 800d5ce:	d914      	bls.n	800d5fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f000 fd2f 	bl	800e038 <RCC_SetFlashLatencyFromMSIRange>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d001      	beq.n	800d5e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e336      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff fe0e 	bl	800d20a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff fe32 	bl	800d25c <LL_RCC_MSI_SetCalibTrimming>
 800d5f8:	e013      	b.n	800d622 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7ff fe03 	bl	800d20a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a1b      	ldr	r3, [r3, #32]
 800d608:	4618      	mov	r0, r3
 800d60a:	f7ff fe27 	bl	800d25c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d612:	4618      	mov	r0, r3
 800d614:	f000 fd10 	bl	800e038 <RCC_SetFlashLatencyFromMSIRange>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d001      	beq.n	800d622 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e317      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d622:	f000 fcc9 	bl	800dfb8 <HAL_RCC_GetHCLKFreq>
 800d626:	4603      	mov	r3, r0
 800d628:	4aa4      	ldr	r2, [pc, #656]	; (800d8bc <HAL_RCC_OscConfig+0x344>)
 800d62a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d62c:	4ba4      	ldr	r3, [pc, #656]	; (800d8c0 <HAL_RCC_OscConfig+0x348>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	4618      	mov	r0, r3
 800d632:	f7fe fc95 	bl	800bf60 <HAL_InitTick>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d039      	beq.n	800d6b0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800d63c:	2301      	movs	r3, #1
 800d63e:	e308      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d01e      	beq.n	800d686 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d648:	f7ff fdb0 	bl	800d1ac <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d64c:	f7fe fcd6 	bl	800bffc <HAL_GetTick>
 800d650:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800d652:	e008      	b.n	800d666 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d654:	f7fe fcd2 	bl	800bffc <HAL_GetTick>
 800d658:	4602      	mov	r2, r0
 800d65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65c:	1ad3      	subs	r3, r2, r3
 800d65e:	2b02      	cmp	r3, #2
 800d660:	d901      	bls.n	800d666 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d662:	2303      	movs	r3, #3
 800d664:	e2f5      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800d666:	f7ff fdbf 	bl	800d1e8 <LL_RCC_MSI_IsReady>
 800d66a:	4603      	mov	r3, r0
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d0f1      	beq.n	800d654 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d674:	4618      	mov	r0, r3
 800d676:	f7ff fdc8 	bl	800d20a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6a1b      	ldr	r3, [r3, #32]
 800d67e:	4618      	mov	r0, r3
 800d680:	f7ff fdec 	bl	800d25c <LL_RCC_MSI_SetCalibTrimming>
 800d684:	e015      	b.n	800d6b2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d686:	f7ff fda0 	bl	800d1ca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d68a:	f7fe fcb7 	bl	800bffc <HAL_GetTick>
 800d68e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800d690:	e008      	b.n	800d6a4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d692:	f7fe fcb3 	bl	800bffc <HAL_GetTick>
 800d696:	4602      	mov	r2, r0
 800d698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69a:	1ad3      	subs	r3, r2, r3
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d901      	bls.n	800d6a4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800d6a0:	2303      	movs	r3, #3
 800d6a2:	e2d6      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800d6a4:	f7ff fda0 	bl	800d1e8 <LL_RCC_MSI_IsReady>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d1f1      	bne.n	800d692 <HAL_RCC_OscConfig+0x11a>
 800d6ae:	e000      	b.n	800d6b2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d6b0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f003 0301 	and.w	r3, r3, #1
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d047      	beq.n	800d74e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d6be:	f7ff fdf6 	bl	800d2ae <LL_RCC_GetSysClkSource>
 800d6c2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d6c4:	f7ff feef 	bl	800d4a6 <LL_RCC_PLL_GetMainSource>
 800d6c8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d6ca:	6a3b      	ldr	r3, [r7, #32]
 800d6cc:	2b08      	cmp	r3, #8
 800d6ce:	d005      	beq.n	800d6dc <HAL_RCC_OscConfig+0x164>
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	2b0c      	cmp	r3, #12
 800d6d4:	d108      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800d6d6:	69fb      	ldr	r3, [r7, #28]
 800d6d8:	2b03      	cmp	r3, #3
 800d6da:	d105      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d134      	bne.n	800d74e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	e2b4      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6f0:	d102      	bne.n	800d6f8 <HAL_RCC_OscConfig+0x180>
 800d6f2:	f7ff fbdd 	bl	800ceb0 <LL_RCC_HSE_Enable>
 800d6f6:	e001      	b.n	800d6fc <HAL_RCC_OscConfig+0x184>
 800d6f8:	f7ff fbe9 	bl	800cece <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	685b      	ldr	r3, [r3, #4]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d012      	beq.n	800d72a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d704:	f7fe fc7a 	bl	800bffc <HAL_GetTick>
 800d708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800d70a:	e008      	b.n	800d71e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d70c:	f7fe fc76 	bl	800bffc <HAL_GetTick>
 800d710:	4602      	mov	r2, r0
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	1ad3      	subs	r3, r2, r3
 800d716:	2b64      	cmp	r3, #100	; 0x64
 800d718:	d901      	bls.n	800d71e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d71a:	2303      	movs	r3, #3
 800d71c:	e299      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800d71e:	f7ff fbe5 	bl	800ceec <LL_RCC_HSE_IsReady>
 800d722:	4603      	mov	r3, r0
 800d724:	2b00      	cmp	r3, #0
 800d726:	d0f1      	beq.n	800d70c <HAL_RCC_OscConfig+0x194>
 800d728:	e011      	b.n	800d74e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d72a:	f7fe fc67 	bl	800bffc <HAL_GetTick>
 800d72e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800d730:	e008      	b.n	800d744 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d732:	f7fe fc63 	bl	800bffc <HAL_GetTick>
 800d736:	4602      	mov	r2, r0
 800d738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d73a:	1ad3      	subs	r3, r2, r3
 800d73c:	2b64      	cmp	r3, #100	; 0x64
 800d73e:	d901      	bls.n	800d744 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800d740:	2303      	movs	r3, #3
 800d742:	e286      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800d744:	f7ff fbd2 	bl	800ceec <LL_RCC_HSE_IsReady>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1f1      	bne.n	800d732 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 0302 	and.w	r3, r3, #2
 800d756:	2b00      	cmp	r3, #0
 800d758:	d04c      	beq.n	800d7f4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d75a:	f7ff fda8 	bl	800d2ae <LL_RCC_GetSysClkSource>
 800d75e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d760:	f7ff fea1 	bl	800d4a6 <LL_RCC_PLL_GetMainSource>
 800d764:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800d766:	69bb      	ldr	r3, [r7, #24]
 800d768:	2b04      	cmp	r3, #4
 800d76a:	d005      	beq.n	800d778 <HAL_RCC_OscConfig+0x200>
 800d76c:	69bb      	ldr	r3, [r7, #24]
 800d76e:	2b0c      	cmp	r3, #12
 800d770:	d10e      	bne.n	800d790 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	2b02      	cmp	r3, #2
 800d776:	d10b      	bne.n	800d790 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	68db      	ldr	r3, [r3, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800d780:	2301      	movs	r3, #1
 800d782:	e266      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	691b      	ldr	r3, [r3, #16]
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff fbf1 	bl	800cf70 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800d78e:	e031      	b.n	800d7f4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68db      	ldr	r3, [r3, #12]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d019      	beq.n	800d7cc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d798:	f7ff fbba 	bl	800cf10 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d79c:	f7fe fc2e 	bl	800bffc <HAL_GetTick>
 800d7a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800d7a2:	e008      	b.n	800d7b6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d7a4:	f7fe fc2a 	bl	800bffc <HAL_GetTick>
 800d7a8:	4602      	mov	r2, r0
 800d7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	2b02      	cmp	r3, #2
 800d7b0:	d901      	bls.n	800d7b6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	e24d      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800d7b6:	f7ff fbc9 	bl	800cf4c <LL_RCC_HSI_IsReady>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d0f1      	beq.n	800d7a4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	691b      	ldr	r3, [r3, #16]
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f7ff fbd3 	bl	800cf70 <LL_RCC_HSI_SetCalibTrimming>
 800d7ca:	e013      	b.n	800d7f4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d7cc:	f7ff fbaf 	bl	800cf2e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7d0:	f7fe fc14 	bl	800bffc <HAL_GetTick>
 800d7d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800d7d6:	e008      	b.n	800d7ea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d7d8:	f7fe fc10 	bl	800bffc <HAL_GetTick>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	1ad3      	subs	r3, r2, r3
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d901      	bls.n	800d7ea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e233      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800d7ea:	f7ff fbaf 	bl	800cf4c <LL_RCC_HSI_IsReady>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d1f1      	bne.n	800d7d8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	f003 0308 	and.w	r3, r3, #8
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d106      	bne.n	800d80e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800d808:	2b00      	cmp	r3, #0
 800d80a:	f000 80a3 	beq.w	800d954 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d076      	beq.n	800d904 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f003 0310 	and.w	r3, r3, #16
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d046      	beq.n	800d8b0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800d822:	f7ff fc66 	bl	800d0f2 <LL_RCC_LSI1_IsReady>
 800d826:	4603      	mov	r3, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d113      	bne.n	800d854 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800d82c:	f7ff fc3f 	bl	800d0ae <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d830:	f7fe fbe4 	bl	800bffc <HAL_GetTick>
 800d834:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d836:	e008      	b.n	800d84a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d838:	f7fe fbe0 	bl	800bffc <HAL_GetTick>
 800d83c:	4602      	mov	r2, r0
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	1ad3      	subs	r3, r2, r3
 800d842:	2b02      	cmp	r3, #2
 800d844:	d901      	bls.n	800d84a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800d846:	2303      	movs	r3, #3
 800d848:	e203      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800d84a:	f7ff fc52 	bl	800d0f2 <LL_RCC_LSI1_IsReady>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0f1      	beq.n	800d838 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800d854:	f7ff fc5f 	bl	800d116 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d858:	f7fe fbd0 	bl	800bffc <HAL_GetTick>
 800d85c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d85e:	e008      	b.n	800d872 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d860:	f7fe fbcc 	bl	800bffc <HAL_GetTick>
 800d864:	4602      	mov	r2, r0
 800d866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d868:	1ad3      	subs	r3, r2, r3
 800d86a:	2b03      	cmp	r3, #3
 800d86c:	d901      	bls.n	800d872 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800d86e:	2303      	movs	r3, #3
 800d870:	e1ef      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800d872:	f7ff fc72 	bl	800d15a <LL_RCC_LSI2_IsReady>
 800d876:	4603      	mov	r3, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d0f1      	beq.n	800d860 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	699b      	ldr	r3, [r3, #24]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff fc7c 	bl	800d17e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800d886:	f7ff fc23 	bl	800d0d0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d88a:	f7fe fbb7 	bl	800bffc <HAL_GetTick>
 800d88e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d890:	e008      	b.n	800d8a4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d892:	f7fe fbb3 	bl	800bffc <HAL_GetTick>
 800d896:	4602      	mov	r2, r0
 800d898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	d901      	bls.n	800d8a4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e1d6      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800d8a4:	f7ff fc25 	bl	800d0f2 <LL_RCC_LSI1_IsReady>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1f1      	bne.n	800d892 <HAL_RCC_OscConfig+0x31a>
 800d8ae:	e051      	b.n	800d954 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800d8b0:	f7ff fbfd 	bl	800d0ae <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b4:	f7fe fba2 	bl	800bffc <HAL_GetTick>
 800d8b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d8ba:	e00c      	b.n	800d8d6 <HAL_RCC_OscConfig+0x35e>
 800d8bc:	20000014 	.word	0x20000014
 800d8c0:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d8c4:	f7fe fb9a 	bl	800bffc <HAL_GetTick>
 800d8c8:	4602      	mov	r2, r0
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8cc:	1ad3      	subs	r3, r2, r3
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d901      	bls.n	800d8d6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	e1bd      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800d8d6:	f7ff fc0c 	bl	800d0f2 <LL_RCC_LSI1_IsReady>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d0f1      	beq.n	800d8c4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800d8e0:	f7ff fc2a 	bl	800d138 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d8e4:	e008      	b.n	800d8f8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d8e6:	f7fe fb89 	bl	800bffc <HAL_GetTick>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	1ad3      	subs	r3, r2, r3
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d901      	bls.n	800d8f8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800d8f4:	2303      	movs	r3, #3
 800d8f6:	e1ac      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800d8f8:	f7ff fc2f 	bl	800d15a <LL_RCC_LSI2_IsReady>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d1f1      	bne.n	800d8e6 <HAL_RCC_OscConfig+0x36e>
 800d902:	e027      	b.n	800d954 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800d904:	f7ff fc18 	bl	800d138 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d908:	f7fe fb78 	bl	800bffc <HAL_GetTick>
 800d90c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d90e:	e008      	b.n	800d922 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800d910:	f7fe fb74 	bl	800bffc <HAL_GetTick>
 800d914:	4602      	mov	r2, r0
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	1ad3      	subs	r3, r2, r3
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d901      	bls.n	800d922 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800d91e:	2303      	movs	r3, #3
 800d920:	e197      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800d922:	f7ff fc1a 	bl	800d15a <LL_RCC_LSI2_IsReady>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d1f1      	bne.n	800d910 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800d92c:	f7ff fbd0 	bl	800d0d0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d930:	f7fe fb64 	bl	800bffc <HAL_GetTick>
 800d934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d936:	e008      	b.n	800d94a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800d938:	f7fe fb60 	bl	800bffc <HAL_GetTick>
 800d93c:	4602      	mov	r2, r0
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	1ad3      	subs	r3, r2, r3
 800d942:	2b02      	cmp	r3, #2
 800d944:	d901      	bls.n	800d94a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800d946:	2303      	movs	r3, #3
 800d948:	e183      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800d94a:	f7ff fbd2 	bl	800d0f2 <LL_RCC_LSI1_IsReady>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1f1      	bne.n	800d938 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f003 0304 	and.w	r3, r3, #4
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d05b      	beq.n	800da18 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d960:	4ba7      	ldr	r3, [pc, #668]	; (800dc00 <HAL_RCC_OscConfig+0x688>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d114      	bne.n	800d996 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800d96c:	f7ff fa70 	bl	800ce50 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d970:	f7fe fb44 	bl	800bffc <HAL_GetTick>
 800d974:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d976:	e008      	b.n	800d98a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d978:	f7fe fb40 	bl	800bffc <HAL_GetTick>
 800d97c:	4602      	mov	r2, r0
 800d97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	2b02      	cmp	r3, #2
 800d984:	d901      	bls.n	800d98a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800d986:	2303      	movs	r3, #3
 800d988:	e163      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d98a:	4b9d      	ldr	r3, [pc, #628]	; (800dc00 <HAL_RCC_OscConfig+0x688>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d992:	2b00      	cmp	r3, #0
 800d994:	d0f0      	beq.n	800d978 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	689b      	ldr	r3, [r3, #8]
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d102      	bne.n	800d9a4 <HAL_RCC_OscConfig+0x42c>
 800d99e:	f7ff fb30 	bl	800d002 <LL_RCC_LSE_Enable>
 800d9a2:	e00c      	b.n	800d9be <HAL_RCC_OscConfig+0x446>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	2b05      	cmp	r3, #5
 800d9aa:	d104      	bne.n	800d9b6 <HAL_RCC_OscConfig+0x43e>
 800d9ac:	f7ff fb4b 	bl	800d046 <LL_RCC_LSE_EnableBypass>
 800d9b0:	f7ff fb27 	bl	800d002 <LL_RCC_LSE_Enable>
 800d9b4:	e003      	b.n	800d9be <HAL_RCC_OscConfig+0x446>
 800d9b6:	f7ff fb35 	bl	800d024 <LL_RCC_LSE_Disable>
 800d9ba:	f7ff fb55 	bl	800d068 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	689b      	ldr	r3, [r3, #8]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d014      	beq.n	800d9f0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9c6:	f7fe fb19 	bl	800bffc <HAL_GetTick>
 800d9ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800d9cc:	e00a      	b.n	800d9e4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9ce:	f7fe fb15 	bl	800bffc <HAL_GetTick>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d901      	bls.n	800d9e4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800d9e0:	2303      	movs	r3, #3
 800d9e2:	e136      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800d9e4:	f7ff fb51 	bl	800d08a <LL_RCC_LSE_IsReady>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d0ef      	beq.n	800d9ce <HAL_RCC_OscConfig+0x456>
 800d9ee:	e013      	b.n	800da18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9f0:	f7fe fb04 	bl	800bffc <HAL_GetTick>
 800d9f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800d9f6:	e00a      	b.n	800da0e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9f8:	f7fe fb00 	bl	800bffc <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	f241 3288 	movw	r2, #5000	; 0x1388
 800da06:	4293      	cmp	r3, r2
 800da08:	d901      	bls.n	800da0e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e121      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800da0e:	f7ff fb3c 	bl	800d08a <LL_RCC_LSE_IsReady>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1ef      	bne.n	800d9f8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da20:	2b00      	cmp	r3, #0
 800da22:	d02c      	beq.n	800da7e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d014      	beq.n	800da56 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800da2c:	f7ff fab5 	bl	800cf9a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da30:	f7fe fae4 	bl	800bffc <HAL_GetTick>
 800da34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800da36:	e008      	b.n	800da4a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800da38:	f7fe fae0 	bl	800bffc <HAL_GetTick>
 800da3c:	4602      	mov	r2, r0
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	1ad3      	subs	r3, r2, r3
 800da42:	2b02      	cmp	r3, #2
 800da44:	d901      	bls.n	800da4a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800da46:	2303      	movs	r3, #3
 800da48:	e103      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800da4a:	f7ff fac8 	bl	800cfde <LL_RCC_HSI48_IsReady>
 800da4e:	4603      	mov	r3, r0
 800da50:	2b00      	cmp	r3, #0
 800da52:	d0f1      	beq.n	800da38 <HAL_RCC_OscConfig+0x4c0>
 800da54:	e013      	b.n	800da7e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800da56:	f7ff fab1 	bl	800cfbc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da5a:	f7fe facf 	bl	800bffc <HAL_GetTick>
 800da5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800da60:	e008      	b.n	800da74 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800da62:	f7fe facb 	bl	800bffc <HAL_GetTick>
 800da66:	4602      	mov	r2, r0
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	d901      	bls.n	800da74 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800da70:	2303      	movs	r3, #3
 800da72:	e0ee      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800da74:	f7ff fab3 	bl	800cfde <LL_RCC_HSI48_IsReady>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d1f1      	bne.n	800da62 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da82:	2b00      	cmp	r3, #0
 800da84:	f000 80e4 	beq.w	800dc50 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da88:	f7ff fc11 	bl	800d2ae <LL_RCC_GetSysClkSource>
 800da8c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800da8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800da92:	68db      	ldr	r3, [r3, #12]
 800da94:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	f040 80b4 	bne.w	800dc08 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f003 0203 	and.w	r2, r3, #3
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daaa:	429a      	cmp	r2, r3
 800daac:	d123      	bne.n	800daf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dab8:	429a      	cmp	r2, r3
 800daba:	d11c      	bne.n	800daf6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	0a1b      	lsrs	r3, r3, #8
 800dac0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dac8:	429a      	cmp	r2, r3
 800daca:	d114      	bne.n	800daf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d10d      	bne.n	800daf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d106      	bne.n	800daf6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d05d      	beq.n	800dbb2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800daf6:	693b      	ldr	r3, [r7, #16]
 800daf8:	2b0c      	cmp	r3, #12
 800dafa:	d058      	beq.n	800dbae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800dafc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800db0a:	2301      	movs	r3, #1
 800db0c:	e0a1      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800db0e:	f7ff fc84 	bl	800d41a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800db12:	f7fe fa73 	bl	800bffc <HAL_GetTick>
 800db16:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db18:	e008      	b.n	800db2c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db1a:	f7fe fa6f 	bl	800bffc <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	2b02      	cmp	r3, #2
 800db26:	d901      	bls.n	800db2c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800db28:	2303      	movs	r3, #3
 800db2a:	e092      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800db2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db36:	2b00      	cmp	r3, #0
 800db38:	d1ef      	bne.n	800db1a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800db3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db3e:	68da      	ldr	r2, [r3, #12]
 800db40:	4b30      	ldr	r3, [pc, #192]	; (800dc04 <HAL_RCC_OscConfig+0x68c>)
 800db42:	4013      	ands	r3, r2
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800db48:	687a      	ldr	r2, [r7, #4]
 800db4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800db4c:	4311      	orrs	r1, r2
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800db52:	0212      	lsls	r2, r2, #8
 800db54:	4311      	orrs	r1, r2
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800db5a:	4311      	orrs	r1, r2
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800db60:	4311      	orrs	r1, r2
 800db62:	687a      	ldr	r2, [r7, #4]
 800db64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800db66:	430a      	orrs	r2, r1
 800db68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800db6c:	4313      	orrs	r3, r2
 800db6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800db70:	f7ff fc44 	bl	800d3fc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800db74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800db7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800db84:	f7fe fa3a 	bl	800bffc <HAL_GetTick>
 800db88:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db8a:	e008      	b.n	800db9e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db8c:	f7fe fa36 	bl	800bffc <HAL_GetTick>
 800db90:	4602      	mov	r2, r0
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	1ad3      	subs	r3, r2, r3
 800db96:	2b02      	cmp	r3, #2
 800db98:	d901      	bls.n	800db9e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800db9a:	2303      	movs	r3, #3
 800db9c:	e059      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800db9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d0ef      	beq.n	800db8c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dbac:	e050      	b.n	800dc50 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800dbae:	2301      	movs	r3, #1
 800dbb0:	e04f      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d147      	bne.n	800dc50 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800dbc0:	f7ff fc1c 	bl	800d3fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800dbc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800dbce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dbd4:	f7fe fa12 	bl	800bffc <HAL_GetTick>
 800dbd8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbda:	e008      	b.n	800dbee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dbdc:	f7fe fa0e 	bl	800bffc <HAL_GetTick>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	d901      	bls.n	800dbee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800dbea:	2303      	movs	r3, #3
 800dbec:	e031      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dbee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d0ef      	beq.n	800dbdc <HAL_RCC_OscConfig+0x664>
 800dbfc:	e028      	b.n	800dc50 <HAL_RCC_OscConfig+0x6d8>
 800dbfe:	bf00      	nop
 800dc00:	58000400 	.word	0x58000400
 800dc04:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	2b0c      	cmp	r3, #12
 800dc0c:	d01e      	beq.n	800dc4c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dc0e:	f7ff fc04 	bl	800d41a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc12:	f7fe f9f3 	bl	800bffc <HAL_GetTick>
 800dc16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dc18:	e008      	b.n	800dc2c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dc1a:	f7fe f9ef 	bl	800bffc <HAL_GetTick>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc22:	1ad3      	subs	r3, r2, r3
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d901      	bls.n	800dc2c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800dc28:	2303      	movs	r3, #3
 800dc2a:	e012      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dc2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d1ef      	bne.n	800dc1a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800dc3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800dc3e:	68da      	ldr	r2, [r3, #12]
 800dc40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800dc44:	4b05      	ldr	r3, [pc, #20]	; (800dc5c <HAL_RCC_OscConfig+0x6e4>)
 800dc46:	4013      	ands	r3, r2
 800dc48:	60cb      	str	r3, [r1, #12]
 800dc4a:	e001      	b.n	800dc50 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e000      	b.n	800dc52 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800dc50:	2300      	movs	r3, #0
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3734      	adds	r7, #52	; 0x34
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd90      	pop	{r4, r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	eefefffc 	.word	0xeefefffc

0800dc60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d101      	bne.n	800dc74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800dc70:	2301      	movs	r3, #1
 800dc72:	e12d      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dc74:	4b98      	ldr	r3, [pc, #608]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	f003 0307 	and.w	r3, r3, #7
 800dc7c:	683a      	ldr	r2, [r7, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d91b      	bls.n	800dcba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dc82:	4b95      	ldr	r3, [pc, #596]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f023 0207 	bic.w	r2, r3, #7
 800dc8a:	4993      	ldr	r1, [pc, #588]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc92:	f7fe f9b3 	bl	800bffc <HAL_GetTick>
 800dc96:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dc98:	e008      	b.n	800dcac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800dc9a:	f7fe f9af 	bl	800bffc <HAL_GetTick>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	2b02      	cmp	r3, #2
 800dca6:	d901      	bls.n	800dcac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800dca8:	2303      	movs	r3, #3
 800dcaa:	e111      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcac:	4b8a      	ldr	r3, [pc, #552]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 0307 	and.w	r3, r3, #7
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d1ef      	bne.n	800dc9a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	f003 0302 	and.w	r3, r3, #2
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d016      	beq.n	800dcf4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	4618      	mov	r0, r3
 800dccc:	f7ff fafb 	bl	800d2c6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dcd0:	f7fe f994 	bl	800bffc <HAL_GetTick>
 800dcd4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800dcd6:	e008      	b.n	800dcea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dcd8:	f7fe f990 	bl	800bffc <HAL_GetTick>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d901      	bls.n	800dcea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800dce6:	2303      	movs	r3, #3
 800dce8:	e0f2      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800dcea:	f7ff fbe8 	bl	800d4be <LL_RCC_IsActiveFlag_HPRE>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d0f1      	beq.n	800dcd8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 0320 	and.w	r3, r3, #32
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d016      	beq.n	800dd2e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	695b      	ldr	r3, [r3, #20]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f7ff faf2 	bl	800d2ee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dd0a:	f7fe f977 	bl	800bffc <HAL_GetTick>
 800dd0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800dd10:	e008      	b.n	800dd24 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dd12:	f7fe f973 	bl	800bffc <HAL_GetTick>
 800dd16:	4602      	mov	r2, r0
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	1ad3      	subs	r3, r2, r3
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	d901      	bls.n	800dd24 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800dd20:	2303      	movs	r3, #3
 800dd22:	e0d5      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800dd24:	f7ff fbdd 	bl	800d4e2 <LL_RCC_IsActiveFlag_C2HPRE>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d0f1      	beq.n	800dd12 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d016      	beq.n	800dd68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	699b      	ldr	r3, [r3, #24]
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7ff faeb 	bl	800d31a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dd44:	f7fe f95a 	bl	800bffc <HAL_GetTick>
 800dd48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800dd4a:	e008      	b.n	800dd5e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dd4c:	f7fe f956 	bl	800bffc <HAL_GetTick>
 800dd50:	4602      	mov	r2, r0
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	1ad3      	subs	r3, r2, r3
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	d901      	bls.n	800dd5e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800dd5a:	2303      	movs	r3, #3
 800dd5c:	e0b8      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800dd5e:	f7ff fbd3 	bl	800d508 <LL_RCC_IsActiveFlag_SHDHPRE>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d0f1      	beq.n	800dd4c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	f003 0304 	and.w	r3, r3, #4
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d016      	beq.n	800dda2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	68db      	ldr	r3, [r3, #12]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7ff fae5 	bl	800d348 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dd7e:	f7fe f93d 	bl	800bffc <HAL_GetTick>
 800dd82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800dd84:	e008      	b.n	800dd98 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dd86:	f7fe f939 	bl	800bffc <HAL_GetTick>
 800dd8a:	4602      	mov	r2, r0
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	1ad3      	subs	r3, r2, r3
 800dd90:	2b02      	cmp	r3, #2
 800dd92:	d901      	bls.n	800dd98 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800dd94:	2303      	movs	r3, #3
 800dd96:	e09b      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800dd98:	f7ff fbc9 	bl	800d52e <LL_RCC_IsActiveFlag_PPRE1>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d0f1      	beq.n	800dd86 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	f003 0308 	and.w	r3, r3, #8
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d017      	beq.n	800ddde <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	00db      	lsls	r3, r3, #3
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	f7ff fadb 	bl	800d370 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800ddba:	f7fe f91f 	bl	800bffc <HAL_GetTick>
 800ddbe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ddc0:	e008      	b.n	800ddd4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800ddc2:	f7fe f91b 	bl	800bffc <HAL_GetTick>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	1ad3      	subs	r3, r2, r3
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	d901      	bls.n	800ddd4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800ddd0:	2303      	movs	r3, #3
 800ddd2:	e07d      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800ddd4:	f7ff fbbd 	bl	800d552 <LL_RCC_IsActiveFlag_PPRE2>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d0f1      	beq.n	800ddc2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f003 0301 	and.w	r3, r3, #1
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d043      	beq.n	800de72 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	685b      	ldr	r3, [r3, #4]
 800ddee:	2b02      	cmp	r3, #2
 800ddf0:	d106      	bne.n	800de00 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800ddf2:	f7ff f87b 	bl	800ceec <LL_RCC_HSE_IsReady>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d11e      	bne.n	800de3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e067      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	685b      	ldr	r3, [r3, #4]
 800de04:	2b03      	cmp	r3, #3
 800de06:	d106      	bne.n	800de16 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800de08:	f7ff fb16 	bl	800d438 <LL_RCC_PLL_IsReady>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d113      	bne.n	800de3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800de12:	2301      	movs	r3, #1
 800de14:	e05c      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d106      	bne.n	800de2c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800de1e:	f7ff f9e3 	bl	800d1e8 <LL_RCC_MSI_IsReady>
 800de22:	4603      	mov	r3, r0
 800de24:	2b00      	cmp	r3, #0
 800de26:	d108      	bne.n	800de3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800de28:	2301      	movs	r3, #1
 800de2a:	e051      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800de2c:	f7ff f88e 	bl	800cf4c <LL_RCC_HSI_IsReady>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d101      	bne.n	800de3a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800de36:	2301      	movs	r3, #1
 800de38:	e04a      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	4618      	mov	r0, r3
 800de40:	f7ff fa21 	bl	800d286 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de44:	f7fe f8da 	bl	800bffc <HAL_GetTick>
 800de48:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de4a:	e00a      	b.n	800de62 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800de4c:	f7fe f8d6 	bl	800bffc <HAL_GetTick>
 800de50:	4602      	mov	r2, r0
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	1ad3      	subs	r3, r2, r3
 800de56:	f241 3288 	movw	r2, #5000	; 0x1388
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d901      	bls.n	800de62 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800de5e:	2303      	movs	r3, #3
 800de60:	e036      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800de62:	f7ff fa24 	bl	800d2ae <LL_RCC_GetSysClkSource>
 800de66:	4602      	mov	r2, r0
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	429a      	cmp	r2, r3
 800de70:	d1ec      	bne.n	800de4c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800de72:	4b19      	ldr	r3, [pc, #100]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f003 0307 	and.w	r3, r3, #7
 800de7a:	683a      	ldr	r2, [r7, #0]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d21b      	bcs.n	800deb8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800de80:	4b15      	ldr	r3, [pc, #84]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f023 0207 	bic.w	r2, r3, #7
 800de88:	4913      	ldr	r1, [pc, #76]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	4313      	orrs	r3, r2
 800de8e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de90:	f7fe f8b4 	bl	800bffc <HAL_GetTick>
 800de94:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800de96:	e008      	b.n	800deaa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800de98:	f7fe f8b0 	bl	800bffc <HAL_GetTick>
 800de9c:	4602      	mov	r2, r0
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d901      	bls.n	800deaa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e012      	b.n	800ded0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800deaa:	4b0b      	ldr	r3, [pc, #44]	; (800ded8 <HAL_RCC_ClockConfig+0x278>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f003 0307 	and.w	r3, r3, #7
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d1ef      	bne.n	800de98 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800deb8:	f000 f87e 	bl	800dfb8 <HAL_RCC_GetHCLKFreq>
 800debc:	4603      	mov	r3, r0
 800debe:	4a07      	ldr	r2, [pc, #28]	; (800dedc <HAL_RCC_ClockConfig+0x27c>)
 800dec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800dec2:	f7fe f8a7 	bl	800c014 <HAL_GetTickPrio>
 800dec6:	4603      	mov	r3, r0
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fe f849 	bl	800bf60 <HAL_InitTick>
 800dece:	4603      	mov	r3, r0
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	58004000 	.word	0x58004000
 800dedc:	20000014 	.word	0x20000014

0800dee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dee0:	b590      	push	{r4, r7, lr}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dee6:	f7ff f9e2 	bl	800d2ae <LL_RCC_GetSysClkSource>
 800deea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d10a      	bne.n	800df08 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800def2:	f7ff f99e 	bl	800d232 <LL_RCC_MSI_GetRange>
 800def6:	4603      	mov	r3, r0
 800def8:	091b      	lsrs	r3, r3, #4
 800defa:	f003 030f 	and.w	r3, r3, #15
 800defe:	4a2b      	ldr	r2, [pc, #172]	; (800dfac <HAL_RCC_GetSysClockFreq+0xcc>)
 800df00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df04:	60fb      	str	r3, [r7, #12]
 800df06:	e04b      	b.n	800dfa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2b04      	cmp	r3, #4
 800df0c:	d102      	bne.n	800df14 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800df0e:	4b28      	ldr	r3, [pc, #160]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	e045      	b.n	800dfa0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2b08      	cmp	r3, #8
 800df18:	d10a      	bne.n	800df30 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800df1a:	f7fe ffb7 	bl	800ce8c <LL_RCC_HSE_IsEnabledDiv2>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b01      	cmp	r3, #1
 800df22:	d102      	bne.n	800df2a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800df24:	4b22      	ldr	r3, [pc, #136]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800df26:	60fb      	str	r3, [r7, #12]
 800df28:	e03a      	b.n	800dfa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800df2a:	4b22      	ldr	r3, [pc, #136]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800df2c:	60fb      	str	r3, [r7, #12]
 800df2e:	e037      	b.n	800dfa0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800df30:	f7ff fab9 	bl	800d4a6 <LL_RCC_PLL_GetMainSource>
 800df34:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d003      	beq.n	800df44 <HAL_RCC_GetSysClockFreq+0x64>
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d003      	beq.n	800df4a <HAL_RCC_GetSysClockFreq+0x6a>
 800df42:	e00d      	b.n	800df60 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800df44:	4b1a      	ldr	r3, [pc, #104]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800df46:	60bb      	str	r3, [r7, #8]
        break;
 800df48:	e015      	b.n	800df76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800df4a:	f7fe ff9f 	bl	800ce8c <LL_RCC_HSE_IsEnabledDiv2>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b01      	cmp	r3, #1
 800df52:	d102      	bne.n	800df5a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800df54:	4b16      	ldr	r3, [pc, #88]	; (800dfb0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800df56:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800df58:	e00d      	b.n	800df76 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800df5a:	4b16      	ldr	r3, [pc, #88]	; (800dfb4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800df5c:	60bb      	str	r3, [r7, #8]
        break;
 800df5e:	e00a      	b.n	800df76 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800df60:	f7ff f967 	bl	800d232 <LL_RCC_MSI_GetRange>
 800df64:	4603      	mov	r3, r0
 800df66:	091b      	lsrs	r3, r3, #4
 800df68:	f003 030f 	and.w	r3, r3, #15
 800df6c:	4a0f      	ldr	r2, [pc, #60]	; (800dfac <HAL_RCC_GetSysClockFreq+0xcc>)
 800df6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df72:	60bb      	str	r3, [r7, #8]
        break;
 800df74:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800df76:	f7ff fa71 	bl	800d45c <LL_RCC_PLL_GetN>
 800df7a:	4602      	mov	r2, r0
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	fb03 f402 	mul.w	r4, r3, r2
 800df82:	f7ff fa84 	bl	800d48e <LL_RCC_PLL_GetDivider>
 800df86:	4603      	mov	r3, r0
 800df88:	091b      	lsrs	r3, r3, #4
 800df8a:	3301      	adds	r3, #1
 800df8c:	fbb4 f4f3 	udiv	r4, r4, r3
 800df90:	f7ff fa71 	bl	800d476 <LL_RCC_PLL_GetR>
 800df94:	4603      	mov	r3, r0
 800df96:	0f5b      	lsrs	r3, r3, #29
 800df98:	3301      	adds	r3, #1
 800df9a:	fbb4 f3f3 	udiv	r3, r4, r3
 800df9e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3714      	adds	r7, #20
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd90      	pop	{r4, r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	0801796c 	.word	0x0801796c
 800dfb0:	00f42400 	.word	0x00f42400
 800dfb4:	01e84800 	.word	0x01e84800

0800dfb8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dfb8:	b598      	push	{r3, r4, r7, lr}
 800dfba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800dfbc:	f7ff ff90 	bl	800dee0 <HAL_RCC_GetSysClockFreq>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	f7ff f9e9 	bl	800d398 <LL_RCC_GetAHBPrescaler>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	091b      	lsrs	r3, r3, #4
 800dfca:	f003 030f 	and.w	r3, r3, #15
 800dfce:	4a03      	ldr	r2, [pc, #12]	; (800dfdc <HAL_RCC_GetHCLKFreq+0x24>)
 800dfd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfd4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	bd98      	pop	{r3, r4, r7, pc}
 800dfdc:	0801790c 	.word	0x0801790c

0800dfe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dfe0:	b598      	push	{r3, r4, r7, lr}
 800dfe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800dfe4:	f7ff ffe8 	bl	800dfb8 <HAL_RCC_GetHCLKFreq>
 800dfe8:	4604      	mov	r4, r0
 800dfea:	f7ff f9ef 	bl	800d3cc <LL_RCC_GetAPB1Prescaler>
 800dfee:	4603      	mov	r3, r0
 800dff0:	0a1b      	lsrs	r3, r3, #8
 800dff2:	f003 0307 	and.w	r3, r3, #7
 800dff6:	4a04      	ldr	r2, [pc, #16]	; (800e008 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dffc:	f003 031f 	and.w	r3, r3, #31
 800e000:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e004:	4618      	mov	r0, r3
 800e006:	bd98      	pop	{r3, r4, r7, pc}
 800e008:	0801794c 	.word	0x0801794c

0800e00c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e00c:	b598      	push	{r3, r4, r7, lr}
 800e00e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800e010:	f7ff ffd2 	bl	800dfb8 <HAL_RCC_GetHCLKFreq>
 800e014:	4604      	mov	r4, r0
 800e016:	f7ff f9e5 	bl	800d3e4 <LL_RCC_GetAPB2Prescaler>
 800e01a:	4603      	mov	r3, r0
 800e01c:	0adb      	lsrs	r3, r3, #11
 800e01e:	f003 0307 	and.w	r3, r3, #7
 800e022:	4a04      	ldr	r2, [pc, #16]	; (800e034 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e028:	f003 031f 	and.w	r3, r3, #31
 800e02c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e030:	4618      	mov	r0, r3
 800e032:	bd98      	pop	{r3, r4, r7, pc}
 800e034:	0801794c 	.word	0x0801794c

0800e038 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800e038:	b590      	push	{r4, r7, lr}
 800e03a:	b085      	sub	sp, #20
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2bb0      	cmp	r3, #176	; 0xb0
 800e044:	d903      	bls.n	800e04e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800e046:	4b15      	ldr	r3, [pc, #84]	; (800e09c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	e007      	b.n	800e05e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	091b      	lsrs	r3, r3, #4
 800e052:	f003 030f 	and.w	r3, r3, #15
 800e056:	4a11      	ldr	r2, [pc, #68]	; (800e09c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e05c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800e05e:	f7ff f9a7 	bl	800d3b0 <LL_RCC_GetAHB4Prescaler>
 800e062:	4603      	mov	r3, r0
 800e064:	091b      	lsrs	r3, r3, #4
 800e066:	f003 030f 	and.w	r3, r3, #15
 800e06a:	4a0d      	ldr	r2, [pc, #52]	; (800e0a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800e06c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	fbb2 f3f3 	udiv	r3, r2, r3
 800e076:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	4a0a      	ldr	r2, [pc, #40]	; (800e0a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800e07c:	fba2 2303 	umull	r2, r3, r2, r3
 800e080:	0c9c      	lsrs	r4, r3, #18
 800e082:	f7fe fef5 	bl	800ce70 <HAL_PWREx_GetVoltageRange>
 800e086:	4603      	mov	r3, r0
 800e088:	4619      	mov	r1, r3
 800e08a:	4620      	mov	r0, r4
 800e08c:	f000 f80c 	bl	800e0a8 <RCC_SetFlashLatency>
 800e090:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800e092:	4618      	mov	r0, r3
 800e094:	3714      	adds	r7, #20
 800e096:	46bd      	mov	sp, r7
 800e098:	bd90      	pop	{r4, r7, pc}
 800e09a:	bf00      	nop
 800e09c:	0801796c 	.word	0x0801796c
 800e0a0:	0801790c 	.word	0x0801790c
 800e0a4:	431bde83 	.word	0x431bde83

0800e0a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800e0a8:	b590      	push	{r4, r7, lr}
 800e0aa:	b093      	sub	sp, #76	; 0x4c
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800e0b2:	4b37      	ldr	r3, [pc, #220]	; (800e190 <RCC_SetFlashLatency+0xe8>)
 800e0b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800e0be:	4a35      	ldr	r2, [pc, #212]	; (800e194 <RCC_SetFlashLatency+0xec>)
 800e0c0:	f107 031c 	add.w	r3, r7, #28
 800e0c4:	ca07      	ldmia	r2, {r0, r1, r2}
 800e0c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800e0ca:	4b33      	ldr	r3, [pc, #204]	; (800e198 <RCC_SetFlashLatency+0xf0>)
 800e0cc:	f107 040c 	add.w	r4, r7, #12
 800e0d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0e0:	d11a      	bne.n	800e118 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	643b      	str	r3, [r7, #64]	; 0x40
 800e0e6:	e013      	b.n	800e110 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800e0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	3348      	adds	r3, #72	; 0x48
 800e0ee:	443b      	add	r3, r7
 800e0f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d807      	bhi.n	800e10a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	3348      	adds	r3, #72	; 0x48
 800e100:	443b      	add	r3, r7
 800e102:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e106:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800e108:	e020      	b.n	800e14c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e10c:	3301      	adds	r3, #1
 800e10e:	643b      	str	r3, [r7, #64]	; 0x40
 800e110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e112:	2b03      	cmp	r3, #3
 800e114:	d9e8      	bls.n	800e0e8 <RCC_SetFlashLatency+0x40>
 800e116:	e019      	b.n	800e14c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e118:	2300      	movs	r3, #0
 800e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e11c:	e013      	b.n	800e146 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800e11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	3348      	adds	r3, #72	; 0x48
 800e124:	443b      	add	r3, r7
 800e126:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	429a      	cmp	r2, r3
 800e12e:	d807      	bhi.n	800e140 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	3348      	adds	r3, #72	; 0x48
 800e136:	443b      	add	r3, r7
 800e138:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e13c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800e13e:	e005      	b.n	800e14c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e142:	3301      	adds	r3, #1
 800e144:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e148:	2b02      	cmp	r3, #2
 800e14a:	d9e8      	bls.n	800e11e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800e14c:	4b13      	ldr	r3, [pc, #76]	; (800e19c <RCC_SetFlashLatency+0xf4>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f023 0207 	bic.w	r2, r3, #7
 800e154:	4911      	ldr	r1, [pc, #68]	; (800e19c <RCC_SetFlashLatency+0xf4>)
 800e156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e158:	4313      	orrs	r3, r2
 800e15a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e15c:	f7fd ff4e 	bl	800bffc <HAL_GetTick>
 800e160:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e162:	e008      	b.n	800e176 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e164:	f7fd ff4a 	bl	800bffc <HAL_GetTick>
 800e168:	4602      	mov	r2, r0
 800e16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d901      	bls.n	800e176 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800e172:	2303      	movs	r3, #3
 800e174:	e007      	b.n	800e186 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e176:	4b09      	ldr	r3, [pc, #36]	; (800e19c <RCC_SetFlashLatency+0xf4>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f003 0307 	and.w	r3, r3, #7
 800e17e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e180:	429a      	cmp	r2, r3
 800e182:	d1ef      	bne.n	800e164 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	374c      	adds	r7, #76	; 0x4c
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd90      	pop	{r4, r7, pc}
 800e18e:	bf00      	nop
 800e190:	080178d4 	.word	0x080178d4
 800e194:	080178e4 	.word	0x080178e4
 800e198:	080178f0 	.word	0x080178f0
 800e19c:	58004000 	.word	0x58004000

0800e1a0 <LL_RCC_LSE_IsEnabled>:
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800e1a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1ac:	f003 0301 	and.w	r3, r3, #1
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d101      	bne.n	800e1b8 <LL_RCC_LSE_IsEnabled+0x18>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e000      	b.n	800e1ba <LL_RCC_LSE_IsEnabled+0x1a>
 800e1b8:	2300      	movs	r3, #0
}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <LL_RCC_LSE_IsReady>:
{
 800e1c4:	b480      	push	{r7}
 800e1c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e1c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1d0:	f003 0302 	and.w	r3, r3, #2
 800e1d4:	2b02      	cmp	r3, #2
 800e1d6:	d101      	bne.n	800e1dc <LL_RCC_LSE_IsReady+0x18>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e000      	b.n	800e1de <LL_RCC_LSE_IsReady+0x1a>
 800e1dc:	2300      	movs	r3, #0
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <LL_RCC_SetRFWKPClockSource>:
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800e1f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e1f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e1f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e1fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4313      	orrs	r3, r2
 800e204:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800e208:	bf00      	nop
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <LL_RCC_SetSMPSClockSource>:
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800e21c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e222:	f023 0203 	bic.w	r2, r3, #3
 800e226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	4313      	orrs	r3, r2
 800e22e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e230:	bf00      	nop
 800e232:	370c      	adds	r7, #12
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr

0800e23c <LL_RCC_SetSMPSPrescaler>:
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800e244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e24e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	4313      	orrs	r3, r2
 800e256:	624b      	str	r3, [r1, #36]	; 0x24
}
 800e258:	bf00      	nop
 800e25a:	370c      	adds	r7, #12
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <LL_RCC_SetUSARTClockSource>:
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800e26c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e274:	f023 0203 	bic.w	r2, r3, #3
 800e278:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4313      	orrs	r3, r2
 800e280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e284:	bf00      	nop
 800e286:	370c      	adds	r7, #12
 800e288:	46bd      	mov	sp, r7
 800e28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e28e:	4770      	bx	lr

0800e290 <LL_RCC_SetLPUARTClockSource>:
{
 800e290:	b480      	push	{r7}
 800e292:	b083      	sub	sp, #12
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800e298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e2a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e2a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e2b0:	bf00      	nop
 800e2b2:	370c      	adds	r7, #12
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr

0800e2bc <LL_RCC_SetI2CClockSource>:
{
 800e2bc:	b480      	push	{r7}
 800e2be:	b083      	sub	sp, #12
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800e2c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e2c8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	091b      	lsrs	r3, r3, #4
 800e2d0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800e2d4:	43db      	mvns	r3, r3
 800e2d6:	401a      	ands	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	011b      	lsls	r3, r3, #4
 800e2dc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800e2e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e2e4:	4313      	orrs	r3, r2
 800e2e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e2ea:	bf00      	nop
 800e2ec:	370c      	adds	r7, #12
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f4:	4770      	bx	lr

0800e2f6 <LL_RCC_SetLPTIMClockSource>:
{
 800e2f6:	b480      	push	{r7}
 800e2f8:	b083      	sub	sp, #12
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800e2fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e302:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	0c1b      	lsrs	r3, r3, #16
 800e30a:	041b      	lsls	r3, r3, #16
 800e30c:	43db      	mvns	r3, r3
 800e30e:	401a      	ands	r2, r3
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	041b      	lsls	r3, r3, #16
 800e314:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e318:	4313      	orrs	r3, r2
 800e31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e31e:	bf00      	nop
 800e320:	370c      	adds	r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e328:	4770      	bx	lr

0800e32a <LL_RCC_SetSAIClockSource>:
{
 800e32a:	b480      	push	{r7}
 800e32c:	b083      	sub	sp, #12
 800e32e:	af00      	add	r7, sp, #0
 800e330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800e332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e33a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e33e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	4313      	orrs	r3, r2
 800e346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e34a:	bf00      	nop
 800e34c:	370c      	adds	r7, #12
 800e34e:	46bd      	mov	sp, r7
 800e350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e354:	4770      	bx	lr

0800e356 <LL_RCC_SetRNGClockSource>:
{
 800e356:	b480      	push	{r7}
 800e358:	b083      	sub	sp, #12
 800e35a:	af00      	add	r7, sp, #0
 800e35c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800e35e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e366:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800e36a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	4313      	orrs	r3, r2
 800e372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e376:	bf00      	nop
 800e378:	370c      	adds	r7, #12
 800e37a:	46bd      	mov	sp, r7
 800e37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e380:	4770      	bx	lr

0800e382 <LL_RCC_SetCLK48ClockSource>:
{
 800e382:	b480      	push	{r7}
 800e384:	b083      	sub	sp, #12
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800e38a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800e396:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	4313      	orrs	r3, r2
 800e39e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e3a2:	bf00      	nop
 800e3a4:	370c      	adds	r7, #12
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ac:	4770      	bx	lr

0800e3ae <LL_RCC_SetUSBClockSource>:
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b082      	sub	sp, #8
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f7ff ffe3 	bl	800e382 <LL_RCC_SetCLK48ClockSource>
}
 800e3bc:	bf00      	nop
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <LL_RCC_SetADCClockSource>:
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b083      	sub	sp, #12
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800e3cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e3d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e3d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	4313      	orrs	r3, r2
 800e3e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800e3e4:	bf00      	nop
 800e3e6:	370c      	adds	r7, #12
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <LL_RCC_SetRTCClockSource>:
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b083      	sub	sp, #12
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800e3f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4313      	orrs	r3, r2
 800e40c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800e410:	bf00      	nop
 800e412:	370c      	adds	r7, #12
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <LL_RCC_GetRTCClockSource>:
{
 800e41c:	b480      	push	{r7}
 800e41e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800e420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e428:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr

0800e436 <LL_RCC_ForceBackupDomainReset>:
{
 800e436:	b480      	push	{r7}
 800e438:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e43a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e44a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e44e:	bf00      	nop
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <LL_RCC_ReleaseBackupDomainReset>:
{
 800e458:	b480      	push	{r7}
 800e45a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e45c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e468:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e46c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e470:	bf00      	nop
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr

0800e47a <LL_RCC_PLLSAI1_Enable>:
{
 800e47a:	b480      	push	{r7}
 800e47c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e47e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e488:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e48c:	6013      	str	r3, [r2, #0]
}
 800e48e:	bf00      	nop
 800e490:	46bd      	mov	sp, r7
 800e492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e496:	4770      	bx	lr

0800e498 <LL_RCC_PLLSAI1_Disable>:
{
 800e498:	b480      	push	{r7}
 800e49a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e49c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e4a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e4aa:	6013      	str	r3, [r2, #0]
}
 800e4ac:	bf00      	nop
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b4:	4770      	bx	lr

0800e4b6 <LL_RCC_PLLSAI1_IsReady>:
{
 800e4b6:	b480      	push	{r7}
 800e4b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800e4ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e4c8:	d101      	bne.n	800e4ce <LL_RCC_PLLSAI1_IsReady+0x18>
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	e000      	b.n	800e4d0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800e4ce:	2300      	movs	r3, #0
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b088      	sub	sp, #32
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d034      	beq.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e4fe:	d021      	beq.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800e504:	d81b      	bhi.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e506:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e50a:	d01d      	beq.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800e50c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e510:	d815      	bhi.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e512:	2b00      	cmp	r3, #0
 800e514:	d00b      	beq.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800e516:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e51a:	d110      	bne.n	800e53e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800e51c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e52a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800e52c:	e00d      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	3304      	adds	r3, #4
 800e532:	4618      	mov	r0, r3
 800e534:	f000 f947 	bl	800e7c6 <RCCEx_PLLSAI1_ConfigNP>
 800e538:	4603      	mov	r3, r0
 800e53a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e53c:	e005      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800e53e:	2301      	movs	r3, #1
 800e540:	77fb      	strb	r3, [r7, #31]
        break;
 800e542:	e002      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e544:	bf00      	nop
 800e546:	e000      	b.n	800e54a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e548:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e54a:	7ffb      	ldrb	r3, [r7, #31]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d105      	bne.n	800e55c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e554:	4618      	mov	r0, r3
 800e556:	f7ff fee8 	bl	800e32a <LL_RCC_SetSAIClockSource>
 800e55a:	e001      	b.n	800e560 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e55c:	7ffb      	ldrb	r3, [r7, #31]
 800e55e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d046      	beq.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800e56c:	f7ff ff56 	bl	800e41c <LL_RCC_GetRTCClockSource>
 800e570:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e576:	69ba      	ldr	r2, [r7, #24]
 800e578:	429a      	cmp	r2, r3
 800e57a:	d03c      	beq.n	800e5f6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e57c:	f7fe fc68 	bl	800ce50 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d105      	bne.n	800e592 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7ff ff30 	bl	800e3f0 <LL_RCC_SetRTCClockSource>
 800e590:	e02e      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800e592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e59a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800e59c:	f7ff ff4b 	bl	800e436 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800e5a0:	f7ff ff5a 	bl	800e458 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800e5a4:	697b      	ldr	r3, [r7, #20]
 800e5a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800e5b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800e5bc:	f7ff fdf0 	bl	800e1a0 <LL_RCC_LSE_IsEnabled>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d114      	bne.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e5c6:	f7fd fd19 	bl	800bffc <HAL_GetTick>
 800e5ca:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800e5cc:	e00b      	b.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e5ce:	f7fd fd15 	bl	800bffc <HAL_GetTick>
 800e5d2:	4602      	mov	r2, r0
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d902      	bls.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800e5e0:	2303      	movs	r3, #3
 800e5e2:	77fb      	strb	r3, [r7, #31]
              break;
 800e5e4:	e004      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800e5e6:	f7ff fded 	bl	800e1c4 <LL_RCC_LSE_IsReady>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b01      	cmp	r3, #1
 800e5ee:	d1ee      	bne.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800e5f0:	7ffb      	ldrb	r3, [r7, #31]
 800e5f2:	77bb      	strb	r3, [r7, #30]
 800e5f4:	e001      	b.n	800e5fa <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5f6:	7ffb      	ldrb	r3, [r7, #31]
 800e5f8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f003 0301 	and.w	r3, r3, #1
 800e602:	2b00      	cmp	r3, #0
 800e604:	d004      	beq.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff fe2a 	bl	800e264 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f003 0302 	and.w	r3, r3, #2
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d004      	beq.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	69db      	ldr	r3, [r3, #28]
 800e620:	4618      	mov	r0, r3
 800e622:	f7ff fe35 	bl	800e290 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f003 0310 	and.w	r3, r3, #16
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d004      	beq.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e636:	4618      	mov	r0, r3
 800e638:	f7ff fe5d 	bl	800e2f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f003 0320 	and.w	r3, r3, #32
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fe52 	bl	800e2f6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	f003 0304 	and.w	r3, r3, #4
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d004      	beq.n	800e668 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	6a1b      	ldr	r3, [r3, #32]
 800e662:	4618      	mov	r0, r3
 800e664:	f7ff fe2a 	bl	800e2bc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f003 0308 	and.w	r3, r3, #8
 800e670:	2b00      	cmp	r3, #0
 800e672:	d004      	beq.n	800e67e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e678:	4618      	mov	r0, r3
 800e67a:	f7ff fe1f 	bl	800e2bc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e686:	2b00      	cmp	r3, #0
 800e688:	d022      	beq.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e68e:	4618      	mov	r0, r3
 800e690:	f7ff fe8d 	bl	800e3ae <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e698:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e69c:	d107      	bne.n	800e6ae <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800e69e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6a2:	68db      	ldr	r3, [r3, #12]
 800e6a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e6a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e6ac:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e6b6:	d10b      	bne.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	3304      	adds	r3, #4
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 f8dd 	bl	800e87c <RCCEx_PLLSAI1_ConfigNQ>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e6c6:	7ffb      	ldrb	r3, [r7, #31]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d001      	beq.n	800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800e6cc:	7ffb      	ldrb	r3, [r7, #31]
 800e6ce:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d02b      	beq.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6e4:	d008      	beq.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e6ee:	d003      	beq.n	800e6f8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d105      	bne.n	800e704 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff fe2a 	bl	800e356 <LL_RCC_SetRNGClockSource>
 800e702:	e00a      	b.n	800e71a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e70c:	60fb      	str	r3, [r7, #12]
 800e70e:	2000      	movs	r0, #0
 800e710:	f7ff fe21 	bl	800e356 <LL_RCC_SetRNGClockSource>
 800e714:	68f8      	ldr	r0, [r7, #12]
 800e716:	f7ff fe34 	bl	800e382 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e71e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800e722:	d107      	bne.n	800e734 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800e724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e728:	68db      	ldr	r3, [r3, #12]
 800e72a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e72e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e732:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d022      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e744:	4618      	mov	r0, r3
 800e746:	f7ff fe3d 	bl	800e3c4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e74e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e752:	d107      	bne.n	800e764 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e75e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e762:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e768:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e76c:	d10b      	bne.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	3304      	adds	r3, #4
 800e772:	4618      	mov	r0, r3
 800e774:	f000 f8dd 	bl	800e932 <RCCEx_PLLSAI1_ConfigNR>
 800e778:	4603      	mov	r3, r0
 800e77a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e77c:	7ffb      	ldrb	r3, [r7, #31]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800e782:	7ffb      	ldrb	r3, [r7, #31]
 800e784:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d004      	beq.n	800e79c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e796:	4618      	mov	r0, r3
 800e798:	f7ff fd26 	bl	800e1e8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d009      	beq.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f7ff fd45 	bl	800e23c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff fd2c 	bl	800e214 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800e7bc:	7fbb      	ldrb	r3, [r7, #30]
}
 800e7be:	4618      	mov	r0, r3
 800e7c0:	3720      	adds	r7, #32
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}

0800e7c6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e7c6:	b580      	push	{r7, lr}
 800e7c8:	b084      	sub	sp, #16
 800e7ca:	af00      	add	r7, sp, #0
 800e7cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e7d2:	f7ff fe61 	bl	800e498 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e7d6:	f7fd fc11 	bl	800bffc <HAL_GetTick>
 800e7da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e7dc:	e009      	b.n	800e7f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e7de:	f7fd fc0d 	bl	800bffc <HAL_GetTick>
 800e7e2:	4602      	mov	r2, r0
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	1ad3      	subs	r3, r2, r3
 800e7e8:	2b02      	cmp	r3, #2
 800e7ea:	d902      	bls.n	800e7f2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800e7ec:	2303      	movs	r3, #3
 800e7ee:	73fb      	strb	r3, [r7, #15]
      break;
 800e7f0:	e004      	b.n	800e7fc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e7f2:	f7ff fe60 	bl	800e4b6 <LL_RCC_PLLSAI1_IsReady>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1f0      	bne.n	800e7de <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800e7fc:	7bfb      	ldrb	r3, [r7, #15]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d137      	bne.n	800e872 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	021b      	lsls	r3, r3, #8
 800e812:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e816:	4313      	orrs	r3, r2
 800e818:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800e81a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e82c:	4313      	orrs	r3, r2
 800e82e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e830:	f7ff fe23 	bl	800e47a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e834:	f7fd fbe2 	bl	800bffc <HAL_GetTick>
 800e838:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e83a:	e009      	b.n	800e850 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e83c:	f7fd fbde 	bl	800bffc <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b02      	cmp	r3, #2
 800e848:	d902      	bls.n	800e850 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	73fb      	strb	r3, [r7, #15]
        break;
 800e84e:	e004      	b.n	800e85a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e850:	f7ff fe31 	bl	800e4b6 <LL_RCC_PLLSAI1_IsReady>
 800e854:	4603      	mov	r3, r0
 800e856:	2b01      	cmp	r3, #1
 800e858:	d1f0      	bne.n	800e83c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800e85a:	7bfb      	ldrb	r3, [r7, #15]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d108      	bne.n	800e872 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e864:	691a      	ldr	r2, [r3, #16]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	691b      	ldr	r3, [r3, #16]
 800e86a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e86e:	4313      	orrs	r3, r2
 800e870:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e872:	7bfb      	ldrb	r3, [r7, #15]
}
 800e874:	4618      	mov	r0, r3
 800e876:	3710      	adds	r7, #16
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e884:	2300      	movs	r3, #0
 800e886:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e888:	f7ff fe06 	bl	800e498 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e88c:	f7fd fbb6 	bl	800bffc <HAL_GetTick>
 800e890:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e892:	e009      	b.n	800e8a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e894:	f7fd fbb2 	bl	800bffc <HAL_GetTick>
 800e898:	4602      	mov	r2, r0
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	1ad3      	subs	r3, r2, r3
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d902      	bls.n	800e8a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800e8a2:	2303      	movs	r3, #3
 800e8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e8a6:	e004      	b.n	800e8b2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e8a8:	f7ff fe05 	bl	800e4b6 <LL_RCC_PLLSAI1_IsReady>
 800e8ac:	4603      	mov	r3, r0
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1f0      	bne.n	800e894 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800e8b2:	7bfb      	ldrb	r3, [r7, #15]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d137      	bne.n	800e928 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e8b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	021b      	lsls	r3, r3, #8
 800e8c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800e8d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8d4:	691b      	ldr	r3, [r3, #16]
 800e8d6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e8e2:	4313      	orrs	r3, r2
 800e8e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e8e6:	f7ff fdc8 	bl	800e47a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e8ea:	f7fd fb87 	bl	800bffc <HAL_GetTick>
 800e8ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e8f0:	e009      	b.n	800e906 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e8f2:	f7fd fb83 	bl	800bffc <HAL_GetTick>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d902      	bls.n	800e906 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800e900:	2303      	movs	r3, #3
 800e902:	73fb      	strb	r3, [r7, #15]
        break;
 800e904:	e004      	b.n	800e910 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e906:	f7ff fdd6 	bl	800e4b6 <LL_RCC_PLLSAI1_IsReady>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d1f0      	bne.n	800e8f2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800e910:	7bfb      	ldrb	r3, [r7, #15]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d108      	bne.n	800e928 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e91a:	691a      	ldr	r2, [r3, #16]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e924:	4313      	orrs	r3, r2
 800e926:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e928:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b084      	sub	sp, #16
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800e93e:	f7ff fdab 	bl	800e498 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e942:	f7fd fb5b 	bl	800bffc <HAL_GetTick>
 800e946:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e948:	e009      	b.n	800e95e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e94a:	f7fd fb57 	bl	800bffc <HAL_GetTick>
 800e94e:	4602      	mov	r2, r0
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	2b02      	cmp	r3, #2
 800e956:	d902      	bls.n	800e95e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800e958:	2303      	movs	r3, #3
 800e95a:	73fb      	strb	r3, [r7, #15]
      break;
 800e95c:	e004      	b.n	800e968 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800e95e:	f7ff fdaa 	bl	800e4b6 <LL_RCC_PLLSAI1_IsReady>
 800e962:	4603      	mov	r3, r0
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1f0      	bne.n	800e94a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d137      	bne.n	800e9de <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800e96e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e972:	691b      	ldr	r3, [r3, #16]
 800e974:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	021b      	lsls	r3, r3, #8
 800e97e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e982:	4313      	orrs	r3, r2
 800e984:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800e986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68db      	ldr	r3, [r3, #12]
 800e994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e998:	4313      	orrs	r3, r2
 800e99a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800e99c:	f7ff fd6d 	bl	800e47a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e9a0:	f7fd fb2c 	bl	800bffc <HAL_GetTick>
 800e9a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e9a6:	e009      	b.n	800e9bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800e9a8:	f7fd fb28 	bl	800bffc <HAL_GetTick>
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	1ad3      	subs	r3, r2, r3
 800e9b2:	2b02      	cmp	r3, #2
 800e9b4:	d902      	bls.n	800e9bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800e9b6:	2303      	movs	r3, #3
 800e9b8:	73fb      	strb	r3, [r7, #15]
        break;
 800e9ba:	e004      	b.n	800e9c6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800e9bc:	f7ff fd7b 	bl	800e4b6 <LL_RCC_PLLSAI1_IsReady>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b01      	cmp	r3, #1
 800e9c4:	d1f0      	bne.n	800e9a8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800e9c6:	7bfb      	ldrb	r3, [r7, #15]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d108      	bne.n	800e9de <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800e9cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e9d0:	691a      	ldr	r2, [r3, #16]
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	691b      	ldr	r3, [r3, #16]
 800e9d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d101      	bne.n	800e9fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e09f      	b.n	800eb3a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d106      	bne.n	800ea14 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ea0e:	6878      	ldr	r0, [r7, #4]
 800ea10:	f7fb fcb0 	bl	800a374 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2202      	movs	r2, #2
 800ea18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ea1c:	4b49      	ldr	r3, [pc, #292]	; (800eb44 <HAL_RTC_Init+0x15c>)
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	f003 0310 	and.w	r3, r3, #16
 800ea24:	2b10      	cmp	r3, #16
 800ea26:	d07e      	beq.n	800eb26 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	22ca      	movs	r2, #202	; 0xca
 800ea2e:	625a      	str	r2, [r3, #36]	; 0x24
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2253      	movs	r2, #83	; 0x53
 800ea36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 fac6 	bl	800efca <RTC_EnterInitMode>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00a      	beq.n	800ea5a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	22ff      	movs	r2, #255	; 0xff
 800ea4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2204      	movs	r2, #4
 800ea50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800ea54:	2301      	movs	r3, #1
 800ea56:	73fb      	strb	r3, [r7, #15]
 800ea58:	e067      	b.n	800eb2a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	6812      	ldr	r2, [r2, #0]
 800ea64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ea68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea6c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	6899      	ldr	r1, [r3, #8]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	691b      	ldr	r3, [r3, #16]
 800ea7c:	431a      	orrs	r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	699b      	ldr	r3, [r3, #24]
 800ea82:	431a      	orrs	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	430a      	orrs	r2, r1
 800ea8a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	68d2      	ldr	r2, [r2, #12]
 800ea94:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	6919      	ldr	r1, [r3, #16]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	041a      	lsls	r2, r3, #16
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	430a      	orrs	r2, r1
 800eaa8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	68da      	ldr	r2, [r3, #12]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eab8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f022 0203 	bic.w	r2, r2, #3
 800eac8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	69da      	ldr	r2, [r3, #28]
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	695b      	ldr	r3, [r3, #20]
 800ead8:	431a      	orrs	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	f003 0320 	and.w	r3, r3, #32
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d113      	bne.n	800eb18 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 fa44 	bl	800ef7e <HAL_RTC_WaitForSynchro>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00d      	beq.n	800eb18 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	22ff      	movs	r2, #255	; 0xff
 800eb02:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2204      	movs	r2, #4
 800eb08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	e010      	b.n	800eb3a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	22ff      	movs	r2, #255	; 0xff
 800eb1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800eb20:	2300      	movs	r3, #0
 800eb22:	73fb      	strb	r3, [r7, #15]
 800eb24:	e001      	b.n	800eb2a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800eb26:	2300      	movs	r3, #0
 800eb28:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800eb2a:	7bfb      	ldrb	r3, [r7, #15]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d103      	bne.n	800eb38 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2201      	movs	r2, #1
 800eb34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800eb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	3710      	adds	r7, #16
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd80      	pop	{r7, pc}
 800eb42:	bf00      	nop
 800eb44:	40002800 	.word	0x40002800

0800eb48 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800eb48:	b590      	push	{r4, r7, lr}
 800eb4a:	b087      	sub	sp, #28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60f8      	str	r0, [r7, #12]
 800eb50:	60b9      	str	r1, [r7, #8]
 800eb52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eb5a:	2b01      	cmp	r3, #1
 800eb5c:	d101      	bne.n	800eb62 <HAL_RTC_SetTime+0x1a>
 800eb5e:	2302      	movs	r3, #2
 800eb60:	e0b2      	b.n	800ecc8 <HAL_RTC_SetTime+0x180>
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2201      	movs	r2, #1
 800eb66:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2202      	movs	r2, #2
 800eb6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d126      	bne.n	800ebc6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	689b      	ldr	r3, [r3, #8]
 800eb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d102      	bne.n	800eb8c <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	781b      	ldrb	r3, [r3, #0]
 800eb90:	4618      	mov	r0, r3
 800eb92:	f000 fa44 	bl	800f01e <RTC_ByteToBcd2>
 800eb96:	4603      	mov	r3, r0
 800eb98:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	785b      	ldrb	r3, [r3, #1]
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f000 fa3d 	bl	800f01e <RTC_ByteToBcd2>
 800eba4:	4603      	mov	r3, r0
 800eba6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800eba8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	789b      	ldrb	r3, [r3, #2]
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 fa35 	bl	800f01e <RTC_ByteToBcd2>
 800ebb4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800ebb6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	78db      	ldrb	r3, [r3, #3]
 800ebbe:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	617b      	str	r3, [r7, #20]
 800ebc4:	e018      	b.n	800ebf8 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d102      	bne.n	800ebda <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	785b      	ldrb	r3, [r3, #1]
 800ebe4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ebe6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800ebe8:	68ba      	ldr	r2, [r7, #8]
 800ebea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800ebec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	78db      	ldrb	r3, [r3, #3]
 800ebf2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	22ca      	movs	r2, #202	; 0xca
 800ebfe:	625a      	str	r2, [r3, #36]	; 0x24
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	2253      	movs	r2, #83	; 0x53
 800ec06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ec08:	68f8      	ldr	r0, [r7, #12]
 800ec0a:	f000 f9de 	bl	800efca <RTC_EnterInitMode>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d00d      	beq.n	800ec30 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	22ff      	movs	r2, #255	; 0xff
 800ec1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2204      	movs	r2, #4
 800ec20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	e04b      	b.n	800ecc8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681a      	ldr	r2, [r3, #0]
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ec3a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ec3e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	689a      	ldr	r2, [r3, #8]
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ec4e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6899      	ldr	r1, [r3, #8]
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	68da      	ldr	r2, [r3, #12]
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	431a      	orrs	r2, r3
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	430a      	orrs	r2, r1
 800ec66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	68da      	ldr	r2, [r3, #12]
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ec76:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	689b      	ldr	r3, [r3, #8]
 800ec7e:	f003 0320 	and.w	r3, r3, #32
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d113      	bne.n	800ecae <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ec86:	68f8      	ldr	r0, [r7, #12]
 800ec88:	f000 f979 	bl	800ef7e <HAL_RTC_WaitForSynchro>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00d      	beq.n	800ecae <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	22ff      	movs	r2, #255	; 0xff
 800ec98:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2204      	movs	r2, #4
 800ec9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e00c      	b.n	800ecc8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	22ff      	movs	r2, #255	; 0xff
 800ecb4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800ecc6:	2300      	movs	r3, #0
  }
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	371c      	adds	r7, #28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd90      	pop	{r4, r7, pc}

0800ecd0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	60f8      	str	r0, [r7, #12]
 800ecd8:	60b9      	str	r1, [r7, #8]
 800ecda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	691b      	ldr	r3, [r3, #16]
 800ecec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ecfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ed02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	0c1b      	lsrs	r3, r3, #16
 800ed08:	b2db      	uxtb	r3, r3
 800ed0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed0e:	b2da      	uxtb	r2, r3
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	0a1b      	lsrs	r3, r3, #8
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed1e:	b2da      	uxtb	r2, r3
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed2c:	b2da      	uxtb	r2, r3
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	0c1b      	lsrs	r3, r3, #16
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed3c:	b2da      	uxtb	r2, r3
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d11a      	bne.n	800ed7e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f000 f986 	bl	800f05e <RTC_Bcd2ToByte>
 800ed52:	4603      	mov	r3, r0
 800ed54:	461a      	mov	r2, r3
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	785b      	ldrb	r3, [r3, #1]
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f000 f97d 	bl	800f05e <RTC_Bcd2ToByte>
 800ed64:	4603      	mov	r3, r0
 800ed66:	461a      	mov	r2, r3
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	789b      	ldrb	r3, [r3, #2]
 800ed70:	4618      	mov	r0, r3
 800ed72:	f000 f974 	bl	800f05e <RTC_Bcd2ToByte>
 800ed76:	4603      	mov	r3, r0
 800ed78:	461a      	mov	r2, r3
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ed7e:	2300      	movs	r3, #0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3718      	adds	r7, #24
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ed88:	b590      	push	{r4, r7, lr}
 800ed8a:	b087      	sub	sp, #28
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ed9a:	2b01      	cmp	r3, #1
 800ed9c:	d101      	bne.n	800eda2 <HAL_RTC_SetDate+0x1a>
 800ed9e:	2302      	movs	r3, #2
 800eda0:	e09c      	b.n	800eedc <HAL_RTC_SetDate+0x154>
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2201      	movs	r2, #1
 800eda6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2202      	movs	r2, #2
 800edae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10e      	bne.n	800edd6 <HAL_RTC_SetDate+0x4e>
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	785b      	ldrb	r3, [r3, #1]
 800edbc:	f003 0310 	and.w	r3, r3, #16
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d008      	beq.n	800edd6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	785b      	ldrb	r3, [r3, #1]
 800edc8:	f023 0310 	bic.w	r3, r3, #16
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	330a      	adds	r3, #10
 800edd0:	b2da      	uxtb	r2, r3
 800edd2:	68bb      	ldr	r3, [r7, #8]
 800edd4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d11c      	bne.n	800ee16 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800eddc:	68bb      	ldr	r3, [r7, #8]
 800edde:	78db      	ldrb	r3, [r3, #3]
 800ede0:	4618      	mov	r0, r3
 800ede2:	f000 f91c 	bl	800f01e <RTC_ByteToBcd2>
 800ede6:	4603      	mov	r3, r0
 800ede8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	785b      	ldrb	r3, [r3, #1]
 800edee:	4618      	mov	r0, r3
 800edf0:	f000 f915 	bl	800f01e <RTC_ByteToBcd2>
 800edf4:	4603      	mov	r3, r0
 800edf6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800edf8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	789b      	ldrb	r3, [r3, #2]
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 f90d 	bl	800f01e <RTC_ByteToBcd2>
 800ee04:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ee06:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ee10:	4313      	orrs	r3, r2
 800ee12:	617b      	str	r3, [r7, #20]
 800ee14:	e00e      	b.n	800ee34 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ee16:	68bb      	ldr	r3, [r7, #8]
 800ee18:	78db      	ldrb	r3, [r3, #3]
 800ee1a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	785b      	ldrb	r3, [r3, #1]
 800ee20:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ee22:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ee24:	68ba      	ldr	r2, [r7, #8]
 800ee26:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ee28:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	781b      	ldrb	r3, [r3, #0]
 800ee2e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ee30:	4313      	orrs	r3, r2
 800ee32:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	22ca      	movs	r2, #202	; 0xca
 800ee3a:	625a      	str	r2, [r3, #36]	; 0x24
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2253      	movs	r2, #83	; 0x53
 800ee42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ee44:	68f8      	ldr	r0, [r7, #12]
 800ee46:	f000 f8c0 	bl	800efca <RTC_EnterInitMode>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d00d      	beq.n	800ee6c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	22ff      	movs	r2, #255	; 0xff
 800ee56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2204      	movs	r2, #4
 800ee5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	2200      	movs	r2, #0
 800ee64:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	e037      	b.n	800eedc <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ee76:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ee7a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	68da      	ldr	r2, [r3, #12]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ee8a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	689b      	ldr	r3, [r3, #8]
 800ee92:	f003 0320 	and.w	r3, r3, #32
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d113      	bne.n	800eec2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ee9a:	68f8      	ldr	r0, [r7, #12]
 800ee9c:	f000 f86f 	bl	800ef7e <HAL_RTC_WaitForSynchro>
 800eea0:	4603      	mov	r3, r0
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d00d      	beq.n	800eec2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	22ff      	movs	r2, #255	; 0xff
 800eeac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	2204      	movs	r2, #4
 800eeb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800eebe:	2301      	movs	r3, #1
 800eec0:	e00c      	b.n	800eedc <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	22ff      	movs	r2, #255	; 0xff
 800eec8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	2201      	movs	r2, #1
 800eece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2200      	movs	r2, #0
 800eed6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800eeda:	2300      	movs	r3, #0
  }
}
 800eedc:	4618      	mov	r0, r3
 800eede:	371c      	adds	r7, #28
 800eee0:	46bd      	mov	sp, r7
 800eee2:	bd90      	pop	{r4, r7, pc}

0800eee4 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b086      	sub	sp, #24
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	60f8      	str	r0, [r7, #12]
 800eeec:	60b9      	str	r1, [r7, #8]
 800eeee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800eefa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eefe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	0c1b      	lsrs	r3, r3, #16
 800ef04:	b2da      	uxtb	r2, r3
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	0a1b      	lsrs	r3, r3, #8
 800ef0e:	b2db      	uxtb	r3, r3
 800ef10:	f003 031f 	and.w	r3, r3, #31
 800ef14:	b2da      	uxtb	r2, r3
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ef1a:	697b      	ldr	r3, [r7, #20]
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef22:	b2da      	uxtb	r2, r3
 800ef24:	68bb      	ldr	r3, [r7, #8]
 800ef26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	0b5b      	lsrs	r3, r3, #13
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	f003 0307 	and.w	r3, r3, #7
 800ef32:	b2da      	uxtb	r2, r3
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d11a      	bne.n	800ef74 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	78db      	ldrb	r3, [r3, #3]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f000 f88b 	bl	800f05e <RTC_Bcd2ToByte>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	461a      	mov	r2, r3
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 f882 	bl	800f05e <RTC_Bcd2ToByte>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	789b      	ldrb	r3, [r3, #2]
 800ef66:	4618      	mov	r0, r3
 800ef68:	f000 f879 	bl	800f05e <RTC_Bcd2ToByte>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	461a      	mov	r2, r3
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ef74:	2300      	movs	r3, #0
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3718      	adds	r7, #24
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b084      	sub	sp, #16
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	68da      	ldr	r2, [r3, #12]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ef94:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ef96:	f7fd f831 	bl	800bffc <HAL_GetTick>
 800ef9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ef9c:	e009      	b.n	800efb2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ef9e:	f7fd f82d 	bl	800bffc <HAL_GetTick>
 800efa2:	4602      	mov	r2, r0
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	1ad3      	subs	r3, r2, r3
 800efa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800efac:	d901      	bls.n	800efb2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e007      	b.n	800efc2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	68db      	ldr	r3, [r3, #12]
 800efb8:	f003 0320 	and.w	r3, r3, #32
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d0ee      	beq.n	800ef9e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800efc0:	2300      	movs	r3, #0
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}

0800efca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b084      	sub	sp, #16
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d119      	bne.n	800f014 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f04f 32ff 	mov.w	r2, #4294967295
 800efe8:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800efea:	f7fd f807 	bl	800bffc <HAL_GetTick>
 800efee:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800eff0:	e009      	b.n	800f006 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800eff2:	f7fd f803 	bl	800bffc <HAL_GetTick>
 800eff6:	4602      	mov	r2, r0
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	1ad3      	subs	r3, r2, r3
 800effc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f000:	d901      	bls.n	800f006 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800f002:	2303      	movs	r3, #3
 800f004:	e007      	b.n	800f016 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	68db      	ldr	r3, [r3, #12]
 800f00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f010:	2b00      	cmp	r3, #0
 800f012:	d0ee      	beq.n	800eff2 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800f014:	2300      	movs	r3, #0
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}

0800f01e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800f01e:	b480      	push	{r7}
 800f020:	b085      	sub	sp, #20
 800f022:	af00      	add	r7, sp, #0
 800f024:	4603      	mov	r3, r0
 800f026:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800f028:	2300      	movs	r3, #0
 800f02a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800f02c:	79fb      	ldrb	r3, [r7, #7]
 800f02e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800f030:	e005      	b.n	800f03e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	3301      	adds	r3, #1
 800f036:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800f038:	7afb      	ldrb	r3, [r7, #11]
 800f03a:	3b0a      	subs	r3, #10
 800f03c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800f03e:	7afb      	ldrb	r3, [r7, #11]
 800f040:	2b09      	cmp	r3, #9
 800f042:	d8f6      	bhi.n	800f032 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	b2db      	uxtb	r3, r3
 800f048:	011b      	lsls	r3, r3, #4
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	7afb      	ldrb	r3, [r7, #11]
 800f04e:	4313      	orrs	r3, r2
 800f050:	b2db      	uxtb	r3, r3
}
 800f052:	4618      	mov	r0, r3
 800f054:	3714      	adds	r7, #20
 800f056:	46bd      	mov	sp, r7
 800f058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05c:	4770      	bx	lr

0800f05e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800f05e:	b480      	push	{r7}
 800f060:	b085      	sub	sp, #20
 800f062:	af00      	add	r7, sp, #0
 800f064:	4603      	mov	r3, r0
 800f066:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800f068:	79fb      	ldrb	r3, [r7, #7]
 800f06a:	091b      	lsrs	r3, r3, #4
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	461a      	mov	r2, r3
 800f070:	4613      	mov	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	005b      	lsls	r3, r3, #1
 800f078:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	b2da      	uxtb	r2, r3
 800f07e:	79fb      	ldrb	r3, [r7, #7]
 800f080:	f003 030f 	and.w	r3, r3, #15
 800f084:	b2db      	uxtb	r3, r3
 800f086:	4413      	add	r3, r2
 800f088:	b2db      	uxtb	r3, r3
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3714      	adds	r7, #20
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr

0800f096 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800f096:	b480      	push	{r7}
 800f098:	b087      	sub	sp, #28
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	60f8      	str	r0, [r7, #12]
 800f09e:	60b9      	str	r1, [r7, #8]
 800f0a0:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	3350      	adds	r3, #80	; 0x50
 800f0a8:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	4413      	add	r3, r2
 800f0b2:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	687a      	ldr	r2, [r7, #4]
 800f0b8:	601a      	str	r2, [r3, #0]
}
 800f0ba:	bf00      	nop
 800f0bc:	371c      	adds	r7, #28
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d101      	bne.n	800f0d8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	e095      	b.n	800f204 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d108      	bne.n	800f0f2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	685b      	ldr	r3, [r3, #4]
 800f0e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f0e8:	d009      	beq.n	800f0fe <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	61da      	str	r2, [r3, #28]
 800f0f0:	e005      	b.n	800f0fe <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f10a:	b2db      	uxtb	r3, r3
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d106      	bne.n	800f11e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f7fb f957 	bl	800a3cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	2202      	movs	r2, #2
 800f122:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f134:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	68db      	ldr	r3, [r3, #12]
 800f13a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f13e:	d902      	bls.n	800f146 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f140:	2300      	movs	r3, #0
 800f142:	60fb      	str	r3, [r7, #12]
 800f144:	e002      	b.n	800f14c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f14a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800f154:	d007      	beq.n	800f166 <HAL_SPI_Init+0xa0>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f15e:	d002      	beq.n	800f166 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	689b      	ldr	r3, [r3, #8]
 800f172:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800f176:	431a      	orrs	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	691b      	ldr	r3, [r3, #16]
 800f17c:	f003 0302 	and.w	r3, r3, #2
 800f180:	431a      	orrs	r2, r3
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	695b      	ldr	r3, [r3, #20]
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	431a      	orrs	r2, r3
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	699b      	ldr	r3, [r3, #24]
 800f190:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f194:	431a      	orrs	r2, r3
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	69db      	ldr	r3, [r3, #28]
 800f19a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f19e:	431a      	orrs	r2, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1a8:	ea42 0103 	orr.w	r1, r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	430a      	orrs	r2, r1
 800f1ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	699b      	ldr	r3, [r3, #24]
 800f1c0:	0c1b      	lsrs	r3, r3, #16
 800f1c2:	f003 0204 	and.w	r2, r3, #4
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1ca:	f003 0310 	and.w	r3, r3, #16
 800f1ce:	431a      	orrs	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1d4:	f003 0308 	and.w	r3, r3, #8
 800f1d8:	431a      	orrs	r2, r3
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f1e2:	ea42 0103 	orr.w	r1, r2, r3
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	430a      	orrs	r2, r1
 800f1f2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2201      	movs	r2, #1
 800f1fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800f202:	2300      	movs	r3, #0
}
 800f204:	4618      	mov	r0, r3
 800f206:	3710      	adds	r7, #16
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}

0800f20c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b08a      	sub	sp, #40	; 0x28
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	607a      	str	r2, [r7, #4]
 800f218:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f21a:	2301      	movs	r3, #1
 800f21c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f21e:	2300      	movs	r3, #0
 800f220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f22a:	2b01      	cmp	r3, #1
 800f22c:	d101      	bne.n	800f232 <HAL_SPI_TransmitReceive+0x26>
 800f22e:	2302      	movs	r3, #2
 800f230:	e1fb      	b.n	800f62a <HAL_SPI_TransmitReceive+0x41e>
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	2201      	movs	r2, #1
 800f236:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f23a:	f7fc fedf 	bl	800bffc <HAL_GetTick>
 800f23e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f246:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f24e:	887b      	ldrh	r3, [r7, #2]
 800f250:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f252:	887b      	ldrh	r3, [r7, #2]
 800f254:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f256:	7efb      	ldrb	r3, [r7, #27]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d00e      	beq.n	800f27a <HAL_SPI_TransmitReceive+0x6e>
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f262:	d106      	bne.n	800f272 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	689b      	ldr	r3, [r3, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d102      	bne.n	800f272 <HAL_SPI_TransmitReceive+0x66>
 800f26c:	7efb      	ldrb	r3, [r7, #27]
 800f26e:	2b04      	cmp	r3, #4
 800f270:	d003      	beq.n	800f27a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f272:	2302      	movs	r3, #2
 800f274:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f278:	e1cd      	b.n	800f616 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d005      	beq.n	800f28c <HAL_SPI_TransmitReceive+0x80>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <HAL_SPI_TransmitReceive+0x80>
 800f286:	887b      	ldrh	r3, [r7, #2]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d103      	bne.n	800f294 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f292:	e1c0      	b.n	800f616 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	2b04      	cmp	r3, #4
 800f29e:	d003      	beq.n	800f2a8 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2205      	movs	r2, #5
 800f2a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	887a      	ldrh	r2, [r7, #2]
 800f2b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	887a      	ldrh	r2, [r7, #2]
 800f2c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	68ba      	ldr	r2, [r7, #8]
 800f2c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	887a      	ldrh	r2, [r7, #2]
 800f2ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	887a      	ldrh	r2, [r7, #2]
 800f2d4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2200      	movs	r2, #0
 800f2da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f2ea:	d802      	bhi.n	800f2f2 <HAL_SPI_TransmitReceive+0xe6>
 800f2ec:	8a3b      	ldrh	r3, [r7, #16]
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d908      	bls.n	800f304 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	685a      	ldr	r2, [r3, #4]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f300:	605a      	str	r2, [r3, #4]
 800f302:	e007      	b.n	800f314 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	685a      	ldr	r2, [r3, #4]
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f312:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f31e:	2b40      	cmp	r3, #64	; 0x40
 800f320:	d007      	beq.n	800f332 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f330:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f33a:	d97c      	bls.n	800f436 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <HAL_SPI_TransmitReceive+0x13e>
 800f344:	8a7b      	ldrh	r3, [r7, #18]
 800f346:	2b01      	cmp	r3, #1
 800f348:	d169      	bne.n	800f41e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f34e:	881a      	ldrh	r2, [r3, #0]
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f35a:	1c9a      	adds	r2, r3, #2
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f364:	b29b      	uxth	r3, r3
 800f366:	3b01      	subs	r3, #1
 800f368:	b29a      	uxth	r2, r3
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f36e:	e056      	b.n	800f41e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	689b      	ldr	r3, [r3, #8]
 800f376:	f003 0302 	and.w	r3, r3, #2
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	d11b      	bne.n	800f3b6 <HAL_SPI_TransmitReceive+0x1aa>
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f382:	b29b      	uxth	r3, r3
 800f384:	2b00      	cmp	r3, #0
 800f386:	d016      	beq.n	800f3b6 <HAL_SPI_TransmitReceive+0x1aa>
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d113      	bne.n	800f3b6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f392:	881a      	ldrh	r2, [r3, #0]
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f39e:	1c9a      	adds	r2, r3, #2
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	b29a      	uxth	r2, r3
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	689b      	ldr	r3, [r3, #8]
 800f3bc:	f003 0301 	and.w	r3, r3, #1
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d11c      	bne.n	800f3fe <HAL_SPI_TransmitReceive+0x1f2>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3ca:	b29b      	uxth	r3, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d016      	beq.n	800f3fe <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	68da      	ldr	r2, [r3, #12]
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3da:	b292      	uxth	r2, r2
 800f3dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3e2:	1c9a      	adds	r2, r3, #2
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f3ee:	b29b      	uxth	r3, r3
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	b29a      	uxth	r2, r3
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f3fa:	2301      	movs	r3, #1
 800f3fc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f3fe:	f7fc fdfd 	bl	800bffc <HAL_GetTick>
 800f402:	4602      	mov	r2, r0
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d807      	bhi.n	800f41e <HAL_SPI_TransmitReceive+0x212>
 800f40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f414:	d003      	beq.n	800f41e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f416:	2303      	movs	r3, #3
 800f418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f41c:	e0fb      	b.n	800f616 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f422:	b29b      	uxth	r3, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1a3      	bne.n	800f370 <HAL_SPI_TransmitReceive+0x164>
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f42e:	b29b      	uxth	r3, r3
 800f430:	2b00      	cmp	r3, #0
 800f432:	d19d      	bne.n	800f370 <HAL_SPI_TransmitReceive+0x164>
 800f434:	e0df      	b.n	800f5f6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	685b      	ldr	r3, [r3, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d003      	beq.n	800f446 <HAL_SPI_TransmitReceive+0x23a>
 800f43e:	8a7b      	ldrh	r3, [r7, #18]
 800f440:	2b01      	cmp	r3, #1
 800f442:	f040 80cb 	bne.w	800f5dc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	2b01      	cmp	r3, #1
 800f44e:	d912      	bls.n	800f476 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f454:	881a      	ldrh	r2, [r3, #0]
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f460:	1c9a      	adds	r2, r3, #2
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	3b02      	subs	r3, #2
 800f46e:	b29a      	uxth	r2, r3
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f474:	e0b2      	b.n	800f5dc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	330c      	adds	r3, #12
 800f480:	7812      	ldrb	r2, [r2, #0]
 800f482:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f488:	1c5a      	adds	r2, r3, #1
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f492:	b29b      	uxth	r3, r3
 800f494:	3b01      	subs	r3, #1
 800f496:	b29a      	uxth	r2, r3
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f49c:	e09e      	b.n	800f5dc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	689b      	ldr	r3, [r3, #8]
 800f4a4:	f003 0302 	and.w	r3, r3, #2
 800f4a8:	2b02      	cmp	r3, #2
 800f4aa:	d134      	bne.n	800f516 <HAL_SPI_TransmitReceive+0x30a>
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d02f      	beq.n	800f516 <HAL_SPI_TransmitReceive+0x30a>
 800f4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b8:	2b01      	cmp	r3, #1
 800f4ba:	d12c      	bne.n	800f516 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	2b01      	cmp	r3, #1
 800f4c4:	d912      	bls.n	800f4ec <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4ca:	881a      	ldrh	r2, [r3, #0]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d6:	1c9a      	adds	r2, r3, #2
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4e0:	b29b      	uxth	r3, r3
 800f4e2:	3b02      	subs	r3, #2
 800f4e4:	b29a      	uxth	r2, r3
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f4ea:	e012      	b.n	800f512 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	330c      	adds	r3, #12
 800f4f6:	7812      	ldrb	r2, [r2, #0]
 800f4f8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fe:	1c5a      	adds	r2, r3, #1
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f508:	b29b      	uxth	r3, r3
 800f50a:	3b01      	subs	r3, #1
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f512:	2300      	movs	r3, #0
 800f514:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	f003 0301 	and.w	r3, r3, #1
 800f520:	2b01      	cmp	r3, #1
 800f522:	d148      	bne.n	800f5b6 <HAL_SPI_TransmitReceive+0x3aa>
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d042      	beq.n	800f5b6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f536:	b29b      	uxth	r3, r3
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d923      	bls.n	800f584 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	68da      	ldr	r2, [r3, #12]
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f546:	b292      	uxth	r2, r2
 800f548:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f54e:	1c9a      	adds	r2, r3, #2
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	3b02      	subs	r3, #2
 800f55e:	b29a      	uxth	r2, r3
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f56c:	b29b      	uxth	r3, r3
 800f56e:	2b01      	cmp	r3, #1
 800f570:	d81f      	bhi.n	800f5b2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	685a      	ldr	r2, [r3, #4]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f580:	605a      	str	r2, [r3, #4]
 800f582:	e016      	b.n	800f5b2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f103 020c 	add.w	r2, r3, #12
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f590:	7812      	ldrb	r2, [r2, #0]
 800f592:	b2d2      	uxtb	r2, r2
 800f594:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f59a:	1c5a      	adds	r2, r3, #1
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f5b6:	f7fc fd21 	bl	800bffc <HAL_GetTick>
 800f5ba:	4602      	mov	r2, r0
 800f5bc:	69fb      	ldr	r3, [r7, #28]
 800f5be:	1ad3      	subs	r3, r2, r3
 800f5c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d803      	bhi.n	800f5ce <HAL_SPI_TransmitReceive+0x3c2>
 800f5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5cc:	d102      	bne.n	800f5d4 <HAL_SPI_TransmitReceive+0x3c8>
 800f5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d103      	bne.n	800f5dc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800f5d4:	2303      	movs	r3, #3
 800f5d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f5da:	e01c      	b.n	800f616 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	f47f af5b 	bne.w	800f49e <HAL_SPI_TransmitReceive+0x292>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	f47f af54 	bne.w	800f49e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f5f6:	69fa      	ldr	r2, [r7, #28]
 800f5f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f000 f938 	bl	800f870 <SPI_EndRxTxTransaction>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	d006      	beq.n	800f614 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	2220      	movs	r2, #32
 800f610:	661a      	str	r2, [r3, #96]	; 0x60
 800f612:	e000      	b.n	800f616 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800f614:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	2201      	movs	r2, #1
 800f61a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2200      	movs	r2, #0
 800f622:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3728      	adds	r7, #40	; 0x28
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
	...

0800f634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
 800f63a:	60f8      	str	r0, [r7, #12]
 800f63c:	60b9      	str	r1, [r7, #8]
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	4613      	mov	r3, r2
 800f642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f644:	f7fc fcda 	bl	800bffc <HAL_GetTick>
 800f648:	4602      	mov	r2, r0
 800f64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64c:	1a9b      	subs	r3, r3, r2
 800f64e:	683a      	ldr	r2, [r7, #0]
 800f650:	4413      	add	r3, r2
 800f652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f654:	f7fc fcd2 	bl	800bffc <HAL_GetTick>
 800f658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f65a:	4b39      	ldr	r3, [pc, #228]	; (800f740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	015b      	lsls	r3, r3, #5
 800f660:	0d1b      	lsrs	r3, r3, #20
 800f662:	69fa      	ldr	r2, [r7, #28]
 800f664:	fb02 f303 	mul.w	r3, r2, r3
 800f668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f66a:	e054      	b.n	800f716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f672:	d050      	beq.n	800f716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f674:	f7fc fcc2 	bl	800bffc <HAL_GetTick>
 800f678:	4602      	mov	r2, r0
 800f67a:	69bb      	ldr	r3, [r7, #24]
 800f67c:	1ad3      	subs	r3, r2, r3
 800f67e:	69fa      	ldr	r2, [r7, #28]
 800f680:	429a      	cmp	r2, r3
 800f682:	d902      	bls.n	800f68a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d13d      	bne.n	800f706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	685a      	ldr	r2, [r3, #4]
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f6a2:	d111      	bne.n	800f6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	689b      	ldr	r3, [r3, #8]
 800f6a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6ac:	d004      	beq.n	800f6b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6b6:	d107      	bne.n	800f6c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	681a      	ldr	r2, [r3, #0]
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f6d0:	d10f      	bne.n	800f6f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f6e0:	601a      	str	r2, [r3, #0]
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	681a      	ldr	r2, [r3, #0]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f6f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	2201      	movs	r2, #1
 800f6f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f702:	2303      	movs	r3, #3
 800f704:	e017      	b.n	800f736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d101      	bne.n	800f710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f70c:	2300      	movs	r3, #0
 800f70e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f710:	697b      	ldr	r3, [r7, #20]
 800f712:	3b01      	subs	r3, #1
 800f714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	689a      	ldr	r2, [r3, #8]
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	4013      	ands	r3, r2
 800f720:	68ba      	ldr	r2, [r7, #8]
 800f722:	429a      	cmp	r2, r3
 800f724:	bf0c      	ite	eq
 800f726:	2301      	moveq	r3, #1
 800f728:	2300      	movne	r3, #0
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	461a      	mov	r2, r3
 800f72e:	79fb      	ldrb	r3, [r7, #7]
 800f730:	429a      	cmp	r2, r3
 800f732:	d19b      	bne.n	800f66c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f734:	2300      	movs	r3, #0
}
 800f736:	4618      	mov	r0, r3
 800f738:	3720      	adds	r7, #32
 800f73a:	46bd      	mov	sp, r7
 800f73c:	bd80      	pop	{r7, pc}
 800f73e:	bf00      	nop
 800f740:	20000014 	.word	0x20000014

0800f744 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b08a      	sub	sp, #40	; 0x28
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	607a      	str	r2, [r7, #4]
 800f750:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f752:	2300      	movs	r3, #0
 800f754:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f756:	f7fc fc51 	bl	800bffc <HAL_GetTick>
 800f75a:	4602      	mov	r2, r0
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	1a9b      	subs	r3, r3, r2
 800f760:	683a      	ldr	r2, [r7, #0]
 800f762:	4413      	add	r3, r2
 800f764:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f766:	f7fc fc49 	bl	800bffc <HAL_GetTick>
 800f76a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	330c      	adds	r3, #12
 800f772:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f774:	4b3d      	ldr	r3, [pc, #244]	; (800f86c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f776:	681a      	ldr	r2, [r3, #0]
 800f778:	4613      	mov	r3, r2
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	4413      	add	r3, r2
 800f77e:	00da      	lsls	r2, r3, #3
 800f780:	1ad3      	subs	r3, r2, r3
 800f782:	0d1b      	lsrs	r3, r3, #20
 800f784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f786:	fb02 f303 	mul.w	r3, r2, r3
 800f78a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f78c:	e060      	b.n	800f850 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f794:	d107      	bne.n	800f7a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d104      	bne.n	800f7a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f79c:	69fb      	ldr	r3, [r7, #28]
 800f79e:	781b      	ldrb	r3, [r3, #0]
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f7a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7ac:	d050      	beq.n	800f850 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f7ae:	f7fc fc25 	bl	800bffc <HAL_GetTick>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	6a3b      	ldr	r3, [r7, #32]
 800f7b6:	1ad3      	subs	r3, r2, r3
 800f7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d902      	bls.n	800f7c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d13d      	bne.n	800f840 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	685a      	ldr	r2, [r3, #4]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f7d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f7dc:	d111      	bne.n	800f802 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f7e6:	d004      	beq.n	800f7f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	689b      	ldr	r3, [r3, #8]
 800f7ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f7f0:	d107      	bne.n	800f802 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f800:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f80a:	d10f      	bne.n	800f82c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f81a:	601a      	str	r2, [r3, #0]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f82a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2201      	movs	r2, #1
 800f830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2200      	movs	r2, #0
 800f838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f83c:	2303      	movs	r3, #3
 800f83e:	e010      	b.n	800f862 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d101      	bne.n	800f84a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f846:	2300      	movs	r3, #0
 800f848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	3b01      	subs	r3, #1
 800f84e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	689a      	ldr	r2, [r3, #8]
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	4013      	ands	r3, r2
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d196      	bne.n	800f78e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3728      	adds	r7, #40	; 0x28
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}
 800f86a:	bf00      	nop
 800f86c:	20000014 	.word	0x20000014

0800f870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af02      	add	r7, sp, #8
 800f876:	60f8      	str	r0, [r7, #12]
 800f878:	60b9      	str	r1, [r7, #8]
 800f87a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	9300      	str	r3, [sp, #0]
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2200      	movs	r2, #0
 800f884:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f888:	68f8      	ldr	r0, [r7, #12]
 800f88a:	f7ff ff5b 	bl	800f744 <SPI_WaitFifoStateUntilTimeout>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d007      	beq.n	800f8a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f898:	f043 0220 	orr.w	r2, r3, #32
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f8a0:	2303      	movs	r3, #3
 800f8a2:	e027      	b.n	800f8f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	2180      	movs	r1, #128	; 0x80
 800f8ae:	68f8      	ldr	r0, [r7, #12]
 800f8b0:	f7ff fec0 	bl	800f634 <SPI_WaitFlagStateUntilTimeout>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d007      	beq.n	800f8ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8be:	f043 0220 	orr.w	r2, r3, #32
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f8c6:	2303      	movs	r3, #3
 800f8c8:	e014      	b.n	800f8f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	9300      	str	r3, [sp, #0]
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f7ff ff34 	bl	800f744 <SPI_WaitFifoStateUntilTimeout>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d007      	beq.n	800f8f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f8e6:	f043 0220 	orr.w	r2, r3, #32
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f8ee:	2303      	movs	r3, #3
 800f8f0:	e000      	b.n	800f8f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f8f2:	2300      	movs	r3, #0
}
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	3710      	adds	r7, #16
 800f8f8:	46bd      	mov	sp, r7
 800f8fa:	bd80      	pop	{r7, pc}

0800f8fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d101      	bne.n	800f90e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f90a:	2301      	movs	r3, #1
 800f90c:	e054      	b.n	800f9b8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f914:	b2db      	uxtb	r3, r3
 800f916:	2b00      	cmp	r3, #0
 800f918:	d111      	bne.n	800f93e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2200      	movs	r2, #0
 800f91e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 ff68 	bl	80107f8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d102      	bne.n	800f936 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4a23      	ldr	r2, [pc, #140]	; (800f9c0 <HAL_TIM_Base_Init+0xc4>)
 800f934:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2202      	movs	r2, #2
 800f942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	3304      	adds	r3, #4
 800f94e:	4619      	mov	r1, r3
 800f950:	4610      	mov	r0, r2
 800f952:	f000 fbd3 	bl	80100fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2201      	movs	r2, #1
 800f95a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	2201      	movs	r2, #1
 800f962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2201      	movs	r2, #1
 800f96a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2201      	movs	r2, #1
 800f972:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2201      	movs	r2, #1
 800f97a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	2201      	movs	r2, #1
 800f982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2201      	movs	r2, #1
 800f98a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2201      	movs	r2, #1
 800f992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	2201      	movs	r2, #1
 800f99a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	2201      	movs	r2, #1
 800f9a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f9b6:	2300      	movs	r3, #0
}
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	3708      	adds	r7, #8
 800f9bc:	46bd      	mov	sp, r7
 800f9be:	bd80      	pop	{r7, pc}
 800f9c0:	0800a4b9 	.word	0x0800a4b9

0800f9c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f9c4:	b480      	push	{r7}
 800f9c6:	b085      	sub	sp, #20
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d001      	beq.n	800f9dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e036      	b.n	800fa4a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2202      	movs	r2, #2
 800f9e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	68da      	ldr	r2, [r3, #12]
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f042 0201 	orr.w	r2, r2, #1
 800f9f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4a17      	ldr	r2, [pc, #92]	; (800fa58 <HAL_TIM_Base_Start_IT+0x94>)
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	d004      	beq.n	800fa08 <HAL_TIM_Base_Start_IT+0x44>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa06:	d115      	bne.n	800fa34 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	689a      	ldr	r2, [r3, #8]
 800fa0e:	4b13      	ldr	r3, [pc, #76]	; (800fa5c <HAL_TIM_Base_Start_IT+0x98>)
 800fa10:	4013      	ands	r3, r2
 800fa12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2b06      	cmp	r3, #6
 800fa18:	d015      	beq.n	800fa46 <HAL_TIM_Base_Start_IT+0x82>
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa20:	d011      	beq.n	800fa46 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	681a      	ldr	r2, [r3, #0]
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	f042 0201 	orr.w	r2, r2, #1
 800fa30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa32:	e008      	b.n	800fa46 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681a      	ldr	r2, [r3, #0]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	f042 0201 	orr.w	r2, r2, #1
 800fa42:	601a      	str	r2, [r3, #0]
 800fa44:	e000      	b.n	800fa48 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3714      	adds	r7, #20
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr
 800fa56:	bf00      	nop
 800fa58:	40012c00 	.word	0x40012c00
 800fa5c:	00010007 	.word	0x00010007

0800fa60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d101      	bne.n	800fa72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800fa6e:	2301      	movs	r3, #1
 800fa70:	e054      	b.n	800fb1c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa78:	b2db      	uxtb	r3, r3
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d111      	bne.n	800faa2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800fa86:	6878      	ldr	r0, [r7, #4]
 800fa88:	f000 feb6 	bl	80107f8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d102      	bne.n	800fa9a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	4a23      	ldr	r2, [pc, #140]	; (800fb24 <HAL_TIM_OC_Init+0xc4>)
 800fa98:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	2202      	movs	r2, #2
 800faa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	3304      	adds	r3, #4
 800fab2:	4619      	mov	r1, r3
 800fab4:	4610      	mov	r0, r2
 800fab6:	f000 fb21 	bl	80100fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2201      	movs	r2, #1
 800fabe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2201      	movs	r2, #1
 800fac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2201      	movs	r2, #1
 800face:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	2201      	movs	r2, #1
 800fade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2201      	movs	r2, #1
 800fae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2201      	movs	r2, #1
 800faee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2201      	movs	r2, #1
 800faf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2201      	movs	r2, #1
 800fafe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	2201      	movs	r2, #1
 800fb06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	2201      	movs	r2, #1
 800fb0e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	2201      	movs	r2, #1
 800fb16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb1a:	2300      	movs	r3, #0
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3708      	adds	r7, #8
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bd80      	pop	{r7, pc}
 800fb24:	0800fb29 	.word	0x0800fb29

0800fb28 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800fb28:	b480      	push	{r7}
 800fb2a:	b083      	sub	sp, #12
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800fb30:	bf00      	nop
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	f003 0302 	and.w	r3, r3, #2
 800fb4e:	2b02      	cmp	r3, #2
 800fb50:	d128      	bne.n	800fba4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	68db      	ldr	r3, [r3, #12]
 800fb58:	f003 0302 	and.w	r3, r3, #2
 800fb5c:	2b02      	cmp	r3, #2
 800fb5e:	d121      	bne.n	800fba4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	f06f 0202 	mvn.w	r2, #2
 800fb68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	2201      	movs	r2, #1
 800fb6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	699b      	ldr	r3, [r3, #24]
 800fb76:	f003 0303 	and.w	r3, r3, #3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d005      	beq.n	800fb8a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	4798      	blx	r3
 800fb88:	e009      	b.n	800fb9e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2200      	movs	r2, #0
 800fba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	691b      	ldr	r3, [r3, #16]
 800fbaa:	f003 0304 	and.w	r3, r3, #4
 800fbae:	2b04      	cmp	r3, #4
 800fbb0:	d128      	bne.n	800fc04 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	f003 0304 	and.w	r3, r3, #4
 800fbbc:	2b04      	cmp	r3, #4
 800fbbe:	d121      	bne.n	800fc04 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f06f 0204 	mvn.w	r2, #4
 800fbc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2202      	movs	r2, #2
 800fbce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d005      	beq.n	800fbea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	4798      	blx	r3
 800fbe8:	e009      	b.n	800fbfe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fbf0:	6878      	ldr	r0, [r7, #4]
 800fbf2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2200      	movs	r2, #0
 800fc02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	691b      	ldr	r3, [r3, #16]
 800fc0a:	f003 0308 	and.w	r3, r3, #8
 800fc0e:	2b08      	cmp	r3, #8
 800fc10:	d128      	bne.n	800fc64 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	f003 0308 	and.w	r3, r3, #8
 800fc1c:	2b08      	cmp	r3, #8
 800fc1e:	d121      	bne.n	800fc64 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f06f 0208 	mvn.w	r2, #8
 800fc28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2204      	movs	r2, #4
 800fc2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	69db      	ldr	r3, [r3, #28]
 800fc36:	f003 0303 	and.w	r3, r3, #3
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d005      	beq.n	800fc4a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	4798      	blx	r3
 800fc48:	e009      	b.n	800fc5e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	691b      	ldr	r3, [r3, #16]
 800fc6a:	f003 0310 	and.w	r3, r3, #16
 800fc6e:	2b10      	cmp	r3, #16
 800fc70:	d128      	bne.n	800fcc4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	f003 0310 	and.w	r3, r3, #16
 800fc7c:	2b10      	cmp	r3, #16
 800fc7e:	d121      	bne.n	800fcc4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f06f 0210 	mvn.w	r2, #16
 800fc88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2208      	movs	r2, #8
 800fc8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	69db      	ldr	r3, [r3, #28]
 800fc96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d005      	beq.n	800fcaa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	4798      	blx	r3
 800fca8:	e009      	b.n	800fcbe <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	691b      	ldr	r3, [r3, #16]
 800fcca:	f003 0301 	and.w	r3, r3, #1
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d110      	bne.n	800fcf4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	68db      	ldr	r3, [r3, #12]
 800fcd8:	f003 0301 	and.w	r3, r3, #1
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d109      	bne.n	800fcf4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f06f 0201 	mvn.w	r2, #1
 800fce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	691b      	ldr	r3, [r3, #16]
 800fcfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcfe:	2b80      	cmp	r3, #128	; 0x80
 800fd00:	d110      	bne.n	800fd24 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	68db      	ldr	r3, [r3, #12]
 800fd08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd0c:	2b80      	cmp	r3, #128	; 0x80
 800fd0e:	d109      	bne.n	800fd24 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fd18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	691b      	ldr	r3, [r3, #16]
 800fd2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fd32:	d110      	bne.n	800fd56 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68db      	ldr	r3, [r3, #12]
 800fd3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd3e:	2b80      	cmp	r3, #128	; 0x80
 800fd40:	d109      	bne.n	800fd56 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fd4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800fd52:	6878      	ldr	r0, [r7, #4]
 800fd54:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	691b      	ldr	r3, [r3, #16]
 800fd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd60:	2b40      	cmp	r3, #64	; 0x40
 800fd62:	d110      	bne.n	800fd86 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	68db      	ldr	r3, [r3, #12]
 800fd6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd6e:	2b40      	cmp	r3, #64	; 0x40
 800fd70:	d109      	bne.n	800fd86 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fd7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	691b      	ldr	r3, [r3, #16]
 800fd8c:	f003 0320 	and.w	r3, r3, #32
 800fd90:	2b20      	cmp	r3, #32
 800fd92:	d110      	bne.n	800fdb6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	f003 0320 	and.w	r3, r3, #32
 800fd9e:	2b20      	cmp	r3, #32
 800fda0:	d109      	bne.n	800fdb6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f06f 0220 	mvn.w	r2, #32
 800fdaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fdb6:	bf00      	nop
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
	...

0800fdc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b086      	sub	sp, #24
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	60f8      	str	r0, [r7, #12]
 800fdc8:	60b9      	str	r1, [r7, #8]
 800fdca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d101      	bne.n	800fdde <HAL_TIM_OC_ConfigChannel+0x1e>
 800fdda:	2302      	movs	r3, #2
 800fddc:	e066      	b.n	800feac <HAL_TIM_OC_ConfigChannel+0xec>
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	2201      	movs	r2, #1
 800fde2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2b14      	cmp	r3, #20
 800fdea:	d857      	bhi.n	800fe9c <HAL_TIM_OC_ConfigChannel+0xdc>
 800fdec:	a201      	add	r2, pc, #4	; (adr r2, 800fdf4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800fdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdf2:	bf00      	nop
 800fdf4:	0800fe49 	.word	0x0800fe49
 800fdf8:	0800fe9d 	.word	0x0800fe9d
 800fdfc:	0800fe9d 	.word	0x0800fe9d
 800fe00:	0800fe9d 	.word	0x0800fe9d
 800fe04:	0800fe57 	.word	0x0800fe57
 800fe08:	0800fe9d 	.word	0x0800fe9d
 800fe0c:	0800fe9d 	.word	0x0800fe9d
 800fe10:	0800fe9d 	.word	0x0800fe9d
 800fe14:	0800fe65 	.word	0x0800fe65
 800fe18:	0800fe9d 	.word	0x0800fe9d
 800fe1c:	0800fe9d 	.word	0x0800fe9d
 800fe20:	0800fe9d 	.word	0x0800fe9d
 800fe24:	0800fe73 	.word	0x0800fe73
 800fe28:	0800fe9d 	.word	0x0800fe9d
 800fe2c:	0800fe9d 	.word	0x0800fe9d
 800fe30:	0800fe9d 	.word	0x0800fe9d
 800fe34:	0800fe81 	.word	0x0800fe81
 800fe38:	0800fe9d 	.word	0x0800fe9d
 800fe3c:	0800fe9d 	.word	0x0800fe9d
 800fe40:	0800fe9d 	.word	0x0800fe9d
 800fe44:	0800fe8f 	.word	0x0800fe8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	68b9      	ldr	r1, [r7, #8]
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f000 f9b8 	bl	80101c4 <TIM_OC1_SetConfig>
      break;
 800fe54:	e025      	b.n	800fea2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	68b9      	ldr	r1, [r7, #8]
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f000 fa2d 	bl	80102bc <TIM_OC2_SetConfig>
      break;
 800fe62:	e01e      	b.n	800fea2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	68b9      	ldr	r1, [r7, #8]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f000 faa0 	bl	80103b0 <TIM_OC3_SetConfig>
      break;
 800fe70:	e017      	b.n	800fea2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	68b9      	ldr	r1, [r7, #8]
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f000 fb11 	bl	80104a0 <TIM_OC4_SetConfig>
      break;
 800fe7e:	e010      	b.n	800fea2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68b9      	ldr	r1, [r7, #8]
 800fe86:	4618      	mov	r0, r3
 800fe88:	f000 fb68 	bl	801055c <TIM_OC5_SetConfig>
      break;
 800fe8c:	e009      	b.n	800fea2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	68b9      	ldr	r1, [r7, #8]
 800fe94:	4618      	mov	r0, r3
 800fe96:	f000 fbb9 	bl	801060c <TIM_OC6_SetConfig>
      break;
 800fe9a:	e002      	b.n	800fea2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	75fb      	strb	r3, [r7, #23]
      break;
 800fea0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	2200      	movs	r2, #0
 800fea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800feaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800feac:	4618      	mov	r0, r3
 800feae:	3718      	adds	r7, #24
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800febe:	2300      	movs	r3, #0
 800fec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fec8:	2b01      	cmp	r3, #1
 800feca:	d101      	bne.n	800fed0 <HAL_TIM_ConfigClockSource+0x1c>
 800fecc:	2302      	movs	r3, #2
 800fece:	e0b6      	b.n	801003e <HAL_TIM_ConfigClockSource+0x18a>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2201      	movs	r2, #1
 800fed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2202      	movs	r2, #2
 800fedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	689b      	ldr	r3, [r3, #8]
 800fee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800feee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800fef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800fefa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	68ba      	ldr	r2, [r7, #8]
 800ff02:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff0c:	d03e      	beq.n	800ff8c <HAL_TIM_ConfigClockSource+0xd8>
 800ff0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff12:	f200 8087 	bhi.w	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff1a:	f000 8086 	beq.w	801002a <HAL_TIM_ConfigClockSource+0x176>
 800ff1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff22:	d87f      	bhi.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff24:	2b70      	cmp	r3, #112	; 0x70
 800ff26:	d01a      	beq.n	800ff5e <HAL_TIM_ConfigClockSource+0xaa>
 800ff28:	2b70      	cmp	r3, #112	; 0x70
 800ff2a:	d87b      	bhi.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff2c:	2b60      	cmp	r3, #96	; 0x60
 800ff2e:	d050      	beq.n	800ffd2 <HAL_TIM_ConfigClockSource+0x11e>
 800ff30:	2b60      	cmp	r3, #96	; 0x60
 800ff32:	d877      	bhi.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff34:	2b50      	cmp	r3, #80	; 0x50
 800ff36:	d03c      	beq.n	800ffb2 <HAL_TIM_ConfigClockSource+0xfe>
 800ff38:	2b50      	cmp	r3, #80	; 0x50
 800ff3a:	d873      	bhi.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff3c:	2b40      	cmp	r3, #64	; 0x40
 800ff3e:	d058      	beq.n	800fff2 <HAL_TIM_ConfigClockSource+0x13e>
 800ff40:	2b40      	cmp	r3, #64	; 0x40
 800ff42:	d86f      	bhi.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff44:	2b30      	cmp	r3, #48	; 0x30
 800ff46:	d064      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x15e>
 800ff48:	2b30      	cmp	r3, #48	; 0x30
 800ff4a:	d86b      	bhi.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff4c:	2b20      	cmp	r3, #32
 800ff4e:	d060      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x15e>
 800ff50:	2b20      	cmp	r3, #32
 800ff52:	d867      	bhi.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d05c      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x15e>
 800ff58:	2b10      	cmp	r3, #16
 800ff5a:	d05a      	beq.n	8010012 <HAL_TIM_ConfigClockSource+0x15e>
 800ff5c:	e062      	b.n	8010024 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	6899      	ldr	r1, [r3, #8]
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	685a      	ldr	r2, [r3, #4]
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	f000 fc23 	bl	80107b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	689b      	ldr	r3, [r3, #8]
 800ff78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ff80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	609a      	str	r2, [r3, #8]
      break;
 800ff8a:	e04f      	b.n	801002c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6818      	ldr	r0, [r3, #0]
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	6899      	ldr	r1, [r3, #8]
 800ff94:	683b      	ldr	r3, [r7, #0]
 800ff96:	685a      	ldr	r2, [r3, #4]
 800ff98:	683b      	ldr	r3, [r7, #0]
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	f000 fc0c 	bl	80107b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	689a      	ldr	r2, [r3, #8]
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ffae:	609a      	str	r2, [r3, #8]
      break;
 800ffb0:	e03c      	b.n	801002c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	6818      	ldr	r0, [r3, #0]
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	6859      	ldr	r1, [r3, #4]
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	68db      	ldr	r3, [r3, #12]
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	f000 fb7e 	bl	80106c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	2150      	movs	r1, #80	; 0x50
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f000 fbd7 	bl	801077e <TIM_ITRx_SetConfig>
      break;
 800ffd0:	e02c      	b.n	801002c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	6818      	ldr	r0, [r3, #0]
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	6859      	ldr	r1, [r3, #4]
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	f000 fb9d 	bl	801071e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2160      	movs	r1, #96	; 0x60
 800ffea:	4618      	mov	r0, r3
 800ffec:	f000 fbc7 	bl	801077e <TIM_ITRx_SetConfig>
      break;
 800fff0:	e01c      	b.n	801002c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6818      	ldr	r0, [r3, #0]
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	6859      	ldr	r1, [r3, #4]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	68db      	ldr	r3, [r3, #12]
 800fffe:	461a      	mov	r2, r3
 8010000:	f000 fb5e 	bl	80106c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	2140      	movs	r1, #64	; 0x40
 801000a:	4618      	mov	r0, r3
 801000c:	f000 fbb7 	bl	801077e <TIM_ITRx_SetConfig>
      break;
 8010010:	e00c      	b.n	801002c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	683b      	ldr	r3, [r7, #0]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4619      	mov	r1, r3
 801001c:	4610      	mov	r0, r2
 801001e:	f000 fbae 	bl	801077e <TIM_ITRx_SetConfig>
      break;
 8010022:	e003      	b.n	801002c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8010024:	2301      	movs	r3, #1
 8010026:	73fb      	strb	r3, [r7, #15]
      break;
 8010028:	e000      	b.n	801002c <HAL_TIM_ConfigClockSource+0x178>
      break;
 801002a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2201      	movs	r2, #1
 8010030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2200      	movs	r2, #0
 8010038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801003c:	7bfb      	ldrb	r3, [r7, #15]
}
 801003e:	4618      	mov	r0, r3
 8010040:	3710      	adds	r7, #16
 8010042:	46bd      	mov	sp, r7
 8010044:	bd80      	pop	{r7, pc}

08010046 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010046:	b480      	push	{r7}
 8010048:	b083      	sub	sp, #12
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 801004e:	bf00      	nop
 8010050:	370c      	adds	r7, #12
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr

0801005a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801005a:	b480      	push	{r7}
 801005c:	b083      	sub	sp, #12
 801005e:	af00      	add	r7, sp, #0
 8010060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010062:	bf00      	nop
 8010064:	370c      	adds	r7, #12
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr

0801006e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801006e:	b480      	push	{r7}
 8010070:	b083      	sub	sp, #12
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010076:	bf00      	nop
 8010078:	370c      	adds	r7, #12
 801007a:	46bd      	mov	sp, r7
 801007c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010080:	4770      	bx	lr

08010082 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010082:	b480      	push	{r7}
 8010084:	b083      	sub	sp, #12
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 801008a:	bf00      	nop
 801008c:	370c      	adds	r7, #12
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr

08010096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010096:	b480      	push	{r7}
 8010098:	b083      	sub	sp, #12
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801009e:	bf00      	nop
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80100aa:	b480      	push	{r7}
 80100ac:	b083      	sub	sp, #12
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80100b2:	bf00      	nop
 80100b4:	370c      	adds	r7, #12
 80100b6:	46bd      	mov	sp, r7
 80100b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100bc:	4770      	bx	lr

080100be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100be:	b480      	push	{r7}
 80100c0:	b083      	sub	sp, #12
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100c6:	bf00      	nop
 80100c8:	370c      	adds	r7, #12
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr

080100d2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80100d2:	b480      	push	{r7}
 80100d4:	b083      	sub	sp, #12
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80100da:	bf00      	nop
 80100dc:	370c      	adds	r7, #12
 80100de:	46bd      	mov	sp, r7
 80100e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e4:	4770      	bx	lr

080100e6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80100e6:	b480      	push	{r7}
 80100e8:	b083      	sub	sp, #12
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80100ee:	bf00      	nop
 80100f0:	370c      	adds	r7, #12
 80100f2:	46bd      	mov	sp, r7
 80100f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f8:	4770      	bx	lr
	...

080100fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b085      	sub	sp, #20
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	4a2a      	ldr	r2, [pc, #168]	; (80101b8 <TIM_Base_SetConfig+0xbc>)
 8010110:	4293      	cmp	r3, r2
 8010112:	d003      	beq.n	801011c <TIM_Base_SetConfig+0x20>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801011a:	d108      	bne.n	801012e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010122:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	68fa      	ldr	r2, [r7, #12]
 801012a:	4313      	orrs	r3, r2
 801012c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	4a21      	ldr	r2, [pc, #132]	; (80101b8 <TIM_Base_SetConfig+0xbc>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d00b      	beq.n	801014e <TIM_Base_SetConfig+0x52>
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801013c:	d007      	beq.n	801014e <TIM_Base_SetConfig+0x52>
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	4a1e      	ldr	r2, [pc, #120]	; (80101bc <TIM_Base_SetConfig+0xc0>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d003      	beq.n	801014e <TIM_Base_SetConfig+0x52>
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	4a1d      	ldr	r2, [pc, #116]	; (80101c0 <TIM_Base_SetConfig+0xc4>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d108      	bne.n	8010160 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	4313      	orrs	r3, r2
 801015e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	695b      	ldr	r3, [r3, #20]
 801016a:	4313      	orrs	r3, r2
 801016c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	689a      	ldr	r2, [r3, #8]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	4a0c      	ldr	r2, [pc, #48]	; (80101b8 <TIM_Base_SetConfig+0xbc>)
 8010188:	4293      	cmp	r3, r2
 801018a:	d007      	beq.n	801019c <TIM_Base_SetConfig+0xa0>
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	4a0b      	ldr	r2, [pc, #44]	; (80101bc <TIM_Base_SetConfig+0xc0>)
 8010190:	4293      	cmp	r3, r2
 8010192:	d003      	beq.n	801019c <TIM_Base_SetConfig+0xa0>
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	4a0a      	ldr	r2, [pc, #40]	; (80101c0 <TIM_Base_SetConfig+0xc4>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d103      	bne.n	80101a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	691a      	ldr	r2, [r3, #16]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2201      	movs	r2, #1
 80101a8:	615a      	str	r2, [r3, #20]
}
 80101aa:	bf00      	nop
 80101ac:	3714      	adds	r7, #20
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr
 80101b6:	bf00      	nop
 80101b8:	40012c00 	.word	0x40012c00
 80101bc:	40014400 	.word	0x40014400
 80101c0:	40014800 	.word	0x40014800

080101c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80101c4:	b480      	push	{r7}
 80101c6:	b087      	sub	sp, #28
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	6a1b      	ldr	r3, [r3, #32]
 80101d2:	f023 0201 	bic.w	r2, r3, #1
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6a1b      	ldr	r3, [r3, #32]
 80101de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	685b      	ldr	r3, [r3, #4]
 80101e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	699b      	ldr	r3, [r3, #24]
 80101ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80101f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	f023 0303 	bic.w	r3, r3, #3
 80101fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	4313      	orrs	r3, r2
 8010208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801020a:	697b      	ldr	r3, [r7, #20]
 801020c:	f023 0302 	bic.w	r3, r3, #2
 8010210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	689b      	ldr	r3, [r3, #8]
 8010216:	697a      	ldr	r2, [r7, #20]
 8010218:	4313      	orrs	r3, r2
 801021a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	4a24      	ldr	r2, [pc, #144]	; (80102b0 <TIM_OC1_SetConfig+0xec>)
 8010220:	4293      	cmp	r3, r2
 8010222:	d007      	beq.n	8010234 <TIM_OC1_SetConfig+0x70>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4a23      	ldr	r2, [pc, #140]	; (80102b4 <TIM_OC1_SetConfig+0xf0>)
 8010228:	4293      	cmp	r3, r2
 801022a:	d003      	beq.n	8010234 <TIM_OC1_SetConfig+0x70>
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	4a22      	ldr	r2, [pc, #136]	; (80102b8 <TIM_OC1_SetConfig+0xf4>)
 8010230:	4293      	cmp	r3, r2
 8010232:	d10c      	bne.n	801024e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	f023 0308 	bic.w	r3, r3, #8
 801023a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	68db      	ldr	r3, [r3, #12]
 8010240:	697a      	ldr	r2, [r7, #20]
 8010242:	4313      	orrs	r3, r2
 8010244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010246:	697b      	ldr	r3, [r7, #20]
 8010248:	f023 0304 	bic.w	r3, r3, #4
 801024c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	4a17      	ldr	r2, [pc, #92]	; (80102b0 <TIM_OC1_SetConfig+0xec>)
 8010252:	4293      	cmp	r3, r2
 8010254:	d007      	beq.n	8010266 <TIM_OC1_SetConfig+0xa2>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	4a17      	ldr	r2, [pc, #92]	; (80102b8 <TIM_OC1_SetConfig+0xf4>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d003      	beq.n	8010266 <TIM_OC1_SetConfig+0xa2>
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	4a14      	ldr	r2, [pc, #80]	; (80102b4 <TIM_OC1_SetConfig+0xf0>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d111      	bne.n	801028a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801026c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010274:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	695b      	ldr	r3, [r3, #20]
 801027a:	693a      	ldr	r2, [r7, #16]
 801027c:	4313      	orrs	r3, r2
 801027e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	699b      	ldr	r3, [r3, #24]
 8010284:	693a      	ldr	r2, [r7, #16]
 8010286:	4313      	orrs	r3, r2
 8010288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	693a      	ldr	r2, [r7, #16]
 801028e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	68fa      	ldr	r2, [r7, #12]
 8010294:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	685a      	ldr	r2, [r3, #4]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	697a      	ldr	r2, [r7, #20]
 80102a2:	621a      	str	r2, [r3, #32]
}
 80102a4:	bf00      	nop
 80102a6:	371c      	adds	r7, #28
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr
 80102b0:	40012c00 	.word	0x40012c00
 80102b4:	40014800 	.word	0x40014800
 80102b8:	40014400 	.word	0x40014400

080102bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80102bc:	b480      	push	{r7}
 80102be:	b087      	sub	sp, #28
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6a1b      	ldr	r3, [r3, #32]
 80102ca:	f023 0210 	bic.w	r2, r3, #16
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	6a1b      	ldr	r3, [r3, #32]
 80102d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	699b      	ldr	r3, [r3, #24]
 80102e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80102ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80102f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80102f8:	683b      	ldr	r3, [r7, #0]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	021b      	lsls	r3, r3, #8
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	4313      	orrs	r3, r2
 8010302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	f023 0320 	bic.w	r3, r3, #32
 801030a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	689b      	ldr	r3, [r3, #8]
 8010310:	011b      	lsls	r3, r3, #4
 8010312:	697a      	ldr	r2, [r7, #20]
 8010314:	4313      	orrs	r3, r2
 8010316:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	4a22      	ldr	r2, [pc, #136]	; (80103a4 <TIM_OC2_SetConfig+0xe8>)
 801031c:	4293      	cmp	r3, r2
 801031e:	d10d      	bne.n	801033c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	011b      	lsls	r3, r3, #4
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	4313      	orrs	r3, r2
 8010332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801033a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	4a19      	ldr	r2, [pc, #100]	; (80103a4 <TIM_OC2_SetConfig+0xe8>)
 8010340:	4293      	cmp	r3, r2
 8010342:	d007      	beq.n	8010354 <TIM_OC2_SetConfig+0x98>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	4a18      	ldr	r2, [pc, #96]	; (80103a8 <TIM_OC2_SetConfig+0xec>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d003      	beq.n	8010354 <TIM_OC2_SetConfig+0x98>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	4a17      	ldr	r2, [pc, #92]	; (80103ac <TIM_OC2_SetConfig+0xf0>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d113      	bne.n	801037c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801035a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	695b      	ldr	r3, [r3, #20]
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	693a      	ldr	r2, [r7, #16]
 801036c:	4313      	orrs	r3, r2
 801036e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	699b      	ldr	r3, [r3, #24]
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	693a      	ldr	r2, [r7, #16]
 8010378:	4313      	orrs	r3, r2
 801037a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	693a      	ldr	r2, [r7, #16]
 8010380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	68fa      	ldr	r2, [r7, #12]
 8010386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	697a      	ldr	r2, [r7, #20]
 8010394:	621a      	str	r2, [r3, #32]
}
 8010396:	bf00      	nop
 8010398:	371c      	adds	r7, #28
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	40012c00 	.word	0x40012c00
 80103a8:	40014400 	.word	0x40014400
 80103ac:	40014800 	.word	0x40014800

080103b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b087      	sub	sp, #28
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	6078      	str	r0, [r7, #4]
 80103b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a1b      	ldr	r3, [r3, #32]
 80103be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	6a1b      	ldr	r3, [r3, #32]
 80103ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	69db      	ldr	r3, [r3, #28]
 80103d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80103d8:	68fb      	ldr	r3, [r7, #12]
 80103da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80103de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	f023 0303 	bic.w	r3, r3, #3
 80103ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	68fa      	ldr	r2, [r7, #12]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80103fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	021b      	lsls	r3, r3, #8
 8010404:	697a      	ldr	r2, [r7, #20]
 8010406:	4313      	orrs	r3, r2
 8010408:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4a21      	ldr	r2, [pc, #132]	; (8010494 <TIM_OC3_SetConfig+0xe4>)
 801040e:	4293      	cmp	r3, r2
 8010410:	d10d      	bne.n	801042e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010418:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	68db      	ldr	r3, [r3, #12]
 801041e:	021b      	lsls	r3, r3, #8
 8010420:	697a      	ldr	r2, [r7, #20]
 8010422:	4313      	orrs	r3, r2
 8010424:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801042c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4a18      	ldr	r2, [pc, #96]	; (8010494 <TIM_OC3_SetConfig+0xe4>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d007      	beq.n	8010446 <TIM_OC3_SetConfig+0x96>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	4a17      	ldr	r2, [pc, #92]	; (8010498 <TIM_OC3_SetConfig+0xe8>)
 801043a:	4293      	cmp	r3, r2
 801043c:	d003      	beq.n	8010446 <TIM_OC3_SetConfig+0x96>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4a16      	ldr	r2, [pc, #88]	; (801049c <TIM_OC3_SetConfig+0xec>)
 8010442:	4293      	cmp	r3, r2
 8010444:	d113      	bne.n	801046e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801044c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010454:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	695b      	ldr	r3, [r3, #20]
 801045a:	011b      	lsls	r3, r3, #4
 801045c:	693a      	ldr	r2, [r7, #16]
 801045e:	4313      	orrs	r3, r2
 8010460:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	699b      	ldr	r3, [r3, #24]
 8010466:	011b      	lsls	r3, r3, #4
 8010468:	693a      	ldr	r2, [r7, #16]
 801046a:	4313      	orrs	r3, r2
 801046c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	693a      	ldr	r2, [r7, #16]
 8010472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	68fa      	ldr	r2, [r7, #12]
 8010478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	685a      	ldr	r2, [r3, #4]
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	697a      	ldr	r2, [r7, #20]
 8010486:	621a      	str	r2, [r3, #32]
}
 8010488:	bf00      	nop
 801048a:	371c      	adds	r7, #28
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr
 8010494:	40012c00 	.word	0x40012c00
 8010498:	40014400 	.word	0x40014400
 801049c:	40014800 	.word	0x40014800

080104a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b087      	sub	sp, #28
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6a1b      	ldr	r3, [r3, #32]
 80104ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	6a1b      	ldr	r3, [r3, #32]
 80104ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	685b      	ldr	r3, [r3, #4]
 80104c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	69db      	ldr	r3, [r3, #28]
 80104c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80104ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80104d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80104da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	021b      	lsls	r3, r3, #8
 80104e2:	68fa      	ldr	r2, [r7, #12]
 80104e4:	4313      	orrs	r3, r2
 80104e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80104ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	689b      	ldr	r3, [r3, #8]
 80104f4:	031b      	lsls	r3, r3, #12
 80104f6:	693a      	ldr	r2, [r7, #16]
 80104f8:	4313      	orrs	r3, r2
 80104fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	4a14      	ldr	r2, [pc, #80]	; (8010550 <TIM_OC4_SetConfig+0xb0>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d007      	beq.n	8010514 <TIM_OC4_SetConfig+0x74>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	4a13      	ldr	r2, [pc, #76]	; (8010554 <TIM_OC4_SetConfig+0xb4>)
 8010508:	4293      	cmp	r3, r2
 801050a:	d003      	beq.n	8010514 <TIM_OC4_SetConfig+0x74>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	4a12      	ldr	r2, [pc, #72]	; (8010558 <TIM_OC4_SetConfig+0xb8>)
 8010510:	4293      	cmp	r3, r2
 8010512:	d109      	bne.n	8010528 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801051a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	695b      	ldr	r3, [r3, #20]
 8010520:	019b      	lsls	r3, r3, #6
 8010522:	697a      	ldr	r2, [r7, #20]
 8010524:	4313      	orrs	r3, r2
 8010526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	697a      	ldr	r2, [r7, #20]
 801052c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010534:	683b      	ldr	r3, [r7, #0]
 8010536:	685a      	ldr	r2, [r3, #4]
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	621a      	str	r2, [r3, #32]
}
 8010542:	bf00      	nop
 8010544:	371c      	adds	r7, #28
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	40012c00 	.word	0x40012c00
 8010554:	40014400 	.word	0x40014400
 8010558:	40014800 	.word	0x40014800

0801055c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801055c:	b480      	push	{r7}
 801055e:	b087      	sub	sp, #28
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
 8010564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6a1b      	ldr	r3, [r3, #32]
 801056a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	6a1b      	ldr	r3, [r3, #32]
 8010576:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801058a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801058e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010590:	683b      	ldr	r3, [r7, #0]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68fa      	ldr	r2, [r7, #12]
 8010596:	4313      	orrs	r3, r2
 8010598:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80105a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	689b      	ldr	r3, [r3, #8]
 80105a6:	041b      	lsls	r3, r3, #16
 80105a8:	693a      	ldr	r2, [r7, #16]
 80105aa:	4313      	orrs	r3, r2
 80105ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	4a13      	ldr	r2, [pc, #76]	; (8010600 <TIM_OC5_SetConfig+0xa4>)
 80105b2:	4293      	cmp	r3, r2
 80105b4:	d007      	beq.n	80105c6 <TIM_OC5_SetConfig+0x6a>
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	4a12      	ldr	r2, [pc, #72]	; (8010604 <TIM_OC5_SetConfig+0xa8>)
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d003      	beq.n	80105c6 <TIM_OC5_SetConfig+0x6a>
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	4a11      	ldr	r2, [pc, #68]	; (8010608 <TIM_OC5_SetConfig+0xac>)
 80105c2:	4293      	cmp	r3, r2
 80105c4:	d109      	bne.n	80105da <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80105cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	695b      	ldr	r3, [r3, #20]
 80105d2:	021b      	lsls	r3, r3, #8
 80105d4:	697a      	ldr	r2, [r7, #20]
 80105d6:	4313      	orrs	r3, r2
 80105d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	697a      	ldr	r2, [r7, #20]
 80105de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	68fa      	ldr	r2, [r7, #12]
 80105e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	685a      	ldr	r2, [r3, #4]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	693a      	ldr	r2, [r7, #16]
 80105f2:	621a      	str	r2, [r3, #32]
}
 80105f4:	bf00      	nop
 80105f6:	371c      	adds	r7, #28
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr
 8010600:	40012c00 	.word	0x40012c00
 8010604:	40014400 	.word	0x40014400
 8010608:	40014800 	.word	0x40014800

0801060c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801060c:	b480      	push	{r7}
 801060e:	b087      	sub	sp, #28
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
 8010614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	6a1b      	ldr	r3, [r3, #32]
 801061a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	6a1b      	ldr	r3, [r3, #32]
 8010626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	685b      	ldr	r3, [r3, #4]
 801062c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801063a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801063e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	021b      	lsls	r3, r3, #8
 8010646:	68fa      	ldr	r2, [r7, #12]
 8010648:	4313      	orrs	r3, r2
 801064a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801064c:	693b      	ldr	r3, [r7, #16]
 801064e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010652:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	051b      	lsls	r3, r3, #20
 801065a:	693a      	ldr	r2, [r7, #16]
 801065c:	4313      	orrs	r3, r2
 801065e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	4a14      	ldr	r2, [pc, #80]	; (80106b4 <TIM_OC6_SetConfig+0xa8>)
 8010664:	4293      	cmp	r3, r2
 8010666:	d007      	beq.n	8010678 <TIM_OC6_SetConfig+0x6c>
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	4a13      	ldr	r2, [pc, #76]	; (80106b8 <TIM_OC6_SetConfig+0xac>)
 801066c:	4293      	cmp	r3, r2
 801066e:	d003      	beq.n	8010678 <TIM_OC6_SetConfig+0x6c>
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	4a12      	ldr	r2, [pc, #72]	; (80106bc <TIM_OC6_SetConfig+0xb0>)
 8010674:	4293      	cmp	r3, r2
 8010676:	d109      	bne.n	801068c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801067e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	695b      	ldr	r3, [r3, #20]
 8010684:	029b      	lsls	r3, r3, #10
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	4313      	orrs	r3, r2
 801068a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	697a      	ldr	r2, [r7, #20]
 8010690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	685a      	ldr	r2, [r3, #4]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	621a      	str	r2, [r3, #32]
}
 80106a6:	bf00      	nop
 80106a8:	371c      	adds	r7, #28
 80106aa:	46bd      	mov	sp, r7
 80106ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b0:	4770      	bx	lr
 80106b2:	bf00      	nop
 80106b4:	40012c00 	.word	0x40012c00
 80106b8:	40014400 	.word	0x40014400
 80106bc:	40014800 	.word	0x40014800

080106c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b087      	sub	sp, #28
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	60f8      	str	r0, [r7, #12]
 80106c8:	60b9      	str	r1, [r7, #8]
 80106ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6a1b      	ldr	r3, [r3, #32]
 80106d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	6a1b      	ldr	r3, [r3, #32]
 80106d6:	f023 0201 	bic.w	r2, r3, #1
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	699b      	ldr	r3, [r3, #24]
 80106e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80106e4:	693b      	ldr	r3, [r7, #16]
 80106e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80106ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	011b      	lsls	r3, r3, #4
 80106f0:	693a      	ldr	r2, [r7, #16]
 80106f2:	4313      	orrs	r3, r2
 80106f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	f023 030a 	bic.w	r3, r3, #10
 80106fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80106fe:	697a      	ldr	r2, [r7, #20]
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	4313      	orrs	r3, r2
 8010704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	693a      	ldr	r2, [r7, #16]
 801070a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	697a      	ldr	r2, [r7, #20]
 8010710:	621a      	str	r2, [r3, #32]
}
 8010712:	bf00      	nop
 8010714:	371c      	adds	r7, #28
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr

0801071e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801071e:	b480      	push	{r7}
 8010720:	b087      	sub	sp, #28
 8010722:	af00      	add	r7, sp, #0
 8010724:	60f8      	str	r0, [r7, #12]
 8010726:	60b9      	str	r1, [r7, #8]
 8010728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	f023 0210 	bic.w	r2, r3, #16
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	699b      	ldr	r3, [r3, #24]
 801073a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	6a1b      	ldr	r3, [r3, #32]
 8010740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	031b      	lsls	r3, r3, #12
 801074e:	697a      	ldr	r2, [r7, #20]
 8010750:	4313      	orrs	r3, r2
 8010752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801075a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	011b      	lsls	r3, r3, #4
 8010760:	693a      	ldr	r2, [r7, #16]
 8010762:	4313      	orrs	r3, r2
 8010764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	697a      	ldr	r2, [r7, #20]
 801076a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	693a      	ldr	r2, [r7, #16]
 8010770:	621a      	str	r2, [r3, #32]
}
 8010772:	bf00      	nop
 8010774:	371c      	adds	r7, #28
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr

0801077e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801077e:	b480      	push	{r7}
 8010780:	b085      	sub	sp, #20
 8010782:	af00      	add	r7, sp, #0
 8010784:	6078      	str	r0, [r7, #4]
 8010786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8010794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801079a:	683a      	ldr	r2, [r7, #0]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	4313      	orrs	r3, r2
 80107a0:	f043 0307 	orr.w	r3, r3, #7
 80107a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	68fa      	ldr	r2, [r7, #12]
 80107aa:	609a      	str	r2, [r3, #8]
}
 80107ac:	bf00      	nop
 80107ae:	3714      	adds	r7, #20
 80107b0:	46bd      	mov	sp, r7
 80107b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b6:	4770      	bx	lr

080107b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b087      	sub	sp, #28
 80107bc:	af00      	add	r7, sp, #0
 80107be:	60f8      	str	r0, [r7, #12]
 80107c0:	60b9      	str	r1, [r7, #8]
 80107c2:	607a      	str	r2, [r7, #4]
 80107c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80107d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	021a      	lsls	r2, r3, #8
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	431a      	orrs	r2, r3
 80107dc:	68bb      	ldr	r3, [r7, #8]
 80107de:	4313      	orrs	r3, r2
 80107e0:	697a      	ldr	r2, [r7, #20]
 80107e2:	4313      	orrs	r3, r2
 80107e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	697a      	ldr	r2, [r7, #20]
 80107ea:	609a      	str	r2, [r3, #8]
}
 80107ec:	bf00      	nop
 80107ee:	371c      	adds	r7, #28
 80107f0:	46bd      	mov	sp, r7
 80107f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107f6:	4770      	bx	lr

080107f8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	4a1e      	ldr	r2, [pc, #120]	; (801087c <TIM_ResetCallback+0x84>)
 8010804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	4a1d      	ldr	r2, [pc, #116]	; (8010880 <TIM_ResetCallback+0x88>)
 801080c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	4a1c      	ldr	r2, [pc, #112]	; (8010884 <TIM_ResetCallback+0x8c>)
 8010814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	4a1b      	ldr	r2, [pc, #108]	; (8010888 <TIM_ResetCallback+0x90>)
 801081c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4a1a      	ldr	r2, [pc, #104]	; (801088c <TIM_ResetCallback+0x94>)
 8010824:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	4a19      	ldr	r2, [pc, #100]	; (8010890 <TIM_ResetCallback+0x98>)
 801082c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	4a18      	ldr	r2, [pc, #96]	; (8010894 <TIM_ResetCallback+0x9c>)
 8010834:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	4a17      	ldr	r2, [pc, #92]	; (8010898 <TIM_ResetCallback+0xa0>)
 801083c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	4a16      	ldr	r2, [pc, #88]	; (801089c <TIM_ResetCallback+0xa4>)
 8010844:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	4a15      	ldr	r2, [pc, #84]	; (80108a0 <TIM_ResetCallback+0xa8>)
 801084c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	4a14      	ldr	r2, [pc, #80]	; (80108a4 <TIM_ResetCallback+0xac>)
 8010854:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	4a13      	ldr	r2, [pc, #76]	; (80108a8 <TIM_ResetCallback+0xb0>)
 801085c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	4a12      	ldr	r2, [pc, #72]	; (80108ac <TIM_ResetCallback+0xb4>)
 8010864:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	4a11      	ldr	r2, [pc, #68]	; (80108b0 <TIM_ResetCallback+0xb8>)
 801086c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8010870:	bf00      	nop
 8010872:	370c      	adds	r7, #12
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	080058c9 	.word	0x080058c9
 8010880:	08010047 	.word	0x08010047
 8010884:	080100bf 	.word	0x080100bf
 8010888:	080100d3 	.word	0x080100d3
 801088c:	0801006f 	.word	0x0801006f
 8010890:	08010083 	.word	0x08010083
 8010894:	0801005b 	.word	0x0801005b
 8010898:	08010097 	.word	0x08010097
 801089c:	080100ab 	.word	0x080100ab
 80108a0:	080100e7 	.word	0x080100e7
 80108a4:	08010a95 	.word	0x08010a95
 80108a8:	08010aa9 	.word	0x08010aa9
 80108ac:	08010abd 	.word	0x08010abd
 80108b0:	08010ad1 	.word	0x08010ad1

080108b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80108c4:	2b01      	cmp	r3, #1
 80108c6:	d101      	bne.n	80108cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80108c8:	2302      	movs	r3, #2
 80108ca:	e04a      	b.n	8010962 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2201      	movs	r2, #1
 80108d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2202      	movs	r2, #2
 80108d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	685b      	ldr	r3, [r3, #4]
 80108e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	689b      	ldr	r3, [r3, #8]
 80108ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4a1f      	ldr	r2, [pc, #124]	; (8010970 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80108f2:	4293      	cmp	r3, r2
 80108f4:	d108      	bne.n	8010908 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80108fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	685b      	ldr	r3, [r3, #4]
 8010902:	68fa      	ldr	r2, [r7, #12]
 8010904:	4313      	orrs	r3, r2
 8010906:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801090e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	68fa      	ldr	r2, [r7, #12]
 8010916:	4313      	orrs	r3, r2
 8010918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	68fa      	ldr	r2, [r7, #12]
 8010920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	4a12      	ldr	r2, [pc, #72]	; (8010970 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8010928:	4293      	cmp	r3, r2
 801092a:	d004      	beq.n	8010936 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010934:	d10c      	bne.n	8010950 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010936:	68bb      	ldr	r3, [r7, #8]
 8010938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801093c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	68ba      	ldr	r2, [r7, #8]
 8010944:	4313      	orrs	r3, r2
 8010946:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	68ba      	ldr	r2, [r7, #8]
 801094e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2201      	movs	r2, #1
 8010954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	2200      	movs	r2, #0
 801095c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010960:	2300      	movs	r3, #0
}
 8010962:	4618      	mov	r0, r3
 8010964:	3714      	adds	r7, #20
 8010966:	46bd      	mov	sp, r7
 8010968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop
 8010970:	40012c00 	.word	0x40012c00

08010974 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801097e:	2300      	movs	r3, #0
 8010980:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010988:	2b01      	cmp	r3, #1
 801098a:	d101      	bne.n	8010990 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801098c:	2302      	movs	r3, #2
 801098e:	e078      	b.n	8010a82 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2201      	movs	r2, #1
 8010994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	4313      	orrs	r3, r2
 80109a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	4313      	orrs	r3, r2
 80109b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	4313      	orrs	r3, r2
 80109c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	4313      	orrs	r3, r2
 80109ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	691b      	ldr	r3, [r3, #16]
 80109da:	4313      	orrs	r3, r2
 80109dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	695b      	ldr	r3, [r3, #20]
 80109e8:	4313      	orrs	r3, r2
 80109ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109f6:	4313      	orrs	r3, r2
 80109f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	699b      	ldr	r3, [r3, #24]
 8010a04:	041b      	lsls	r3, r3, #16
 8010a06:	4313      	orrs	r3, r2
 8010a08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4a20      	ldr	r2, [pc, #128]	; (8010a90 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d106      	bne.n	8010a22 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8010a1a:	683b      	ldr	r3, [r7, #0]
 8010a1c:	69db      	ldr	r3, [r3, #28]
 8010a1e:	4313      	orrs	r3, r2
 8010a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	4a1a      	ldr	r2, [pc, #104]	; (8010a90 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d121      	bne.n	8010a70 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010a32:	683b      	ldr	r3, [r7, #0]
 8010a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a36:	051b      	lsls	r3, r3, #20
 8010a38:	4313      	orrs	r3, r2
 8010a3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010a42:	683b      	ldr	r3, [r7, #0]
 8010a44:	6a1b      	ldr	r3, [r3, #32]
 8010a46:	4313      	orrs	r3, r2
 8010a48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010a50:	683b      	ldr	r3, [r7, #0]
 8010a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a54:	4313      	orrs	r3, r2
 8010a56:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	4a0c      	ldr	r2, [pc, #48]	; (8010a90 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d106      	bne.n	8010a70 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a6c:	4313      	orrs	r3, r2
 8010a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	68fa      	ldr	r2, [r7, #12]
 8010a76:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010a80:	2300      	movs	r3, #0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	3714      	adds	r7, #20
 8010a86:	46bd      	mov	sp, r7
 8010a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	40012c00 	.word	0x40012c00

08010a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010a9c:	bf00      	nop
 8010a9e:	370c      	adds	r7, #12
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa6:	4770      	bx	lr

08010aa8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b083      	sub	sp, #12
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8010ab0:	bf00      	nop
 8010ab2:	370c      	adds	r7, #12
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aba:	4770      	bx	lr

08010abc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b083      	sub	sp, #12
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010ac4:	bf00      	nop
 8010ac6:	370c      	adds	r7, #12
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr

08010ad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010ad8:	bf00      	nop
 8010ada:	370c      	adds	r7, #12
 8010adc:	46bd      	mov	sp, r7
 8010ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae2:	4770      	bx	lr

08010ae4 <LL_RCC_GetUSARTClockSource>:
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	b083      	sub	sp, #12
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8010aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010af0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4013      	ands	r3, r2
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	370c      	adds	r7, #12
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <LL_RCC_GetLPUARTClockSource>:
{
 8010b04:	b480      	push	{r7}
 8010b06:	b083      	sub	sp, #12
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8010b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010b10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	4013      	ands	r3, r2
}
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d101      	bne.n	8010b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b32:	2301      	movs	r3, #1
 8010b34:	e042      	b.n	8010bbc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b3c:	2b00      	cmp	r3, #0
 8010b3e:	d106      	bne.n	8010b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2200      	movs	r2, #0
 8010b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f7f9 fb85 	bl	800a258 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	2224      	movs	r2, #36	; 0x24
 8010b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f022 0201 	bic.w	r2, r2, #1
 8010b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f000 fbfe 	bl	8011368 <UART_SetConfig>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2b01      	cmp	r3, #1
 8010b70:	d101      	bne.n	8010b76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010b72:	2301      	movs	r3, #1
 8010b74:	e022      	b.n	8010bbc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d002      	beq.n	8010b84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 fe1a 	bl	80117b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	685a      	ldr	r2, [r3, #4]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	689a      	ldr	r2, [r3, #8]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	681b      	ldr	r3, [r3, #0]
 8010b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	681a      	ldr	r2, [r3, #0]
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	f042 0201 	orr.w	r2, r2, #1
 8010bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f000 fea1 	bl	80118fc <UART_CheckIdleState>
 8010bba:	4603      	mov	r3, r0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010bc4:	b580      	push	{r7, lr}
 8010bc6:	b08a      	sub	sp, #40	; 0x28
 8010bc8:	af02      	add	r7, sp, #8
 8010bca:	60f8      	str	r0, [r7, #12]
 8010bcc:	60b9      	str	r1, [r7, #8]
 8010bce:	603b      	str	r3, [r7, #0]
 8010bd0:	4613      	mov	r3, r2
 8010bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bda:	2b20      	cmp	r3, #32
 8010bdc:	d17b      	bne.n	8010cd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d002      	beq.n	8010bea <HAL_UART_Transmit+0x26>
 8010be4:	88fb      	ldrh	r3, [r7, #6]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d101      	bne.n	8010bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8010bea:	2301      	movs	r3, #1
 8010bec:	e074      	b.n	8010cd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	2221      	movs	r2, #33	; 0x21
 8010bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010bfe:	f7fb f9fd 	bl	800bffc <HAL_GetTick>
 8010c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	88fa      	ldrh	r2, [r7, #6]
 8010c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	88fa      	ldrh	r2, [r7, #6]
 8010c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	689b      	ldr	r3, [r3, #8]
 8010c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c1c:	d108      	bne.n	8010c30 <HAL_UART_Transmit+0x6c>
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	691b      	ldr	r3, [r3, #16]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d104      	bne.n	8010c30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010c26:	2300      	movs	r3, #0
 8010c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	61bb      	str	r3, [r7, #24]
 8010c2e:	e003      	b.n	8010c38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010c34:	2300      	movs	r3, #0
 8010c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010c38:	e030      	b.n	8010c9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	9300      	str	r3, [sp, #0]
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	2200      	movs	r2, #0
 8010c42:	2180      	movs	r1, #128	; 0x80
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f000 ff03 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d005      	beq.n	8010c5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2220      	movs	r2, #32
 8010c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8010c58:	2303      	movs	r3, #3
 8010c5a:	e03d      	b.n	8010cd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d10b      	bne.n	8010c7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010c62:	69bb      	ldr	r3, [r7, #24]
 8010c64:	881b      	ldrh	r3, [r3, #0]
 8010c66:	461a      	mov	r2, r3
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8010c72:	69bb      	ldr	r3, [r7, #24]
 8010c74:	3302      	adds	r3, #2
 8010c76:	61bb      	str	r3, [r7, #24]
 8010c78:	e007      	b.n	8010c8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010c7a:	69fb      	ldr	r3, [r7, #28]
 8010c7c:	781a      	ldrb	r2, [r3, #0]
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8010c84:	69fb      	ldr	r3, [r7, #28]
 8010c86:	3301      	adds	r3, #1
 8010c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	3b01      	subs	r3, #1
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8010ca2:	b29b      	uxth	r3, r3
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d1c8      	bne.n	8010c3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	2140      	movs	r1, #64	; 0x40
 8010cb2:	68f8      	ldr	r0, [r7, #12]
 8010cb4:	f000 fecc 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d005      	beq.n	8010cca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2220      	movs	r2, #32
 8010cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8010cc6:	2303      	movs	r3, #3
 8010cc8:	e006      	b.n	8010cd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	2220      	movs	r2, #32
 8010cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	e000      	b.n	8010cd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8010cd6:	2302      	movs	r3, #2
  }
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3720      	adds	r7, #32
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b0ba      	sub	sp, #232	; 0xe8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	69db      	ldr	r3, [r3, #28]
 8010cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	681b      	ldr	r3, [r3, #0]
 8010d00:	689b      	ldr	r3, [r3, #8]
 8010d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010d06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010d0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8010d0e:	4013      	ands	r3, r2
 8010d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8010d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d11b      	bne.n	8010d54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d20:	f003 0320 	and.w	r3, r3, #32
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d015      	beq.n	8010d54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d2c:	f003 0320 	and.w	r3, r3, #32
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d105      	bne.n	8010d40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d009      	beq.n	8010d54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 82e3 	beq.w	8011310 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	4798      	blx	r3
      }
      return;
 8010d52:	e2dd      	b.n	8011310 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010d54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f000 8123 	beq.w	8010fa4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010d5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010d62:	4b8d      	ldr	r3, [pc, #564]	; (8010f98 <HAL_UART_IRQHandler+0x2b8>)
 8010d64:	4013      	ands	r3, r2
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010d6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010d6e:	4b8b      	ldr	r3, [pc, #556]	; (8010f9c <HAL_UART_IRQHandler+0x2bc>)
 8010d70:	4013      	ands	r3, r2
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f000 8116 	beq.w	8010fa4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d7c:	f003 0301 	and.w	r3, r3, #1
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d011      	beq.n	8010da8 <HAL_UART_IRQHandler+0xc8>
 8010d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00b      	beq.n	8010da8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	2201      	movs	r2, #1
 8010d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d9e:	f043 0201 	orr.w	r2, r3, #1
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010dac:	f003 0302 	and.w	r3, r3, #2
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d011      	beq.n	8010dd8 <HAL_UART_IRQHandler+0xf8>
 8010db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010db8:	f003 0301 	and.w	r3, r3, #1
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d00b      	beq.n	8010dd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	2202      	movs	r2, #2
 8010dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dce:	f043 0204 	orr.w	r2, r3, #4
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ddc:	f003 0304 	and.w	r3, r3, #4
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d011      	beq.n	8010e08 <HAL_UART_IRQHandler+0x128>
 8010de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010de8:	f003 0301 	and.w	r3, r3, #1
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d00b      	beq.n	8010e08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2204      	movs	r2, #4
 8010df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dfe:	f043 0202 	orr.w	r2, r3, #2
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e0c:	f003 0308 	and.w	r3, r3, #8
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d017      	beq.n	8010e44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e18:	f003 0320 	and.w	r3, r3, #32
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d105      	bne.n	8010e2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010e20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010e24:	4b5c      	ldr	r3, [pc, #368]	; (8010f98 <HAL_UART_IRQHandler+0x2b8>)
 8010e26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d00b      	beq.n	8010e44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2208      	movs	r2, #8
 8010e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e3a:	f043 0208 	orr.w	r2, r3, #8
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d012      	beq.n	8010e76 <HAL_UART_IRQHandler+0x196>
 8010e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d00c      	beq.n	8010e76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e6c:	f043 0220 	orr.w	r2, r3, #32
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f000 8249 	beq.w	8011314 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e86:	f003 0320 	and.w	r3, r3, #32
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d013      	beq.n	8010eb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e92:	f003 0320 	and.w	r3, r3, #32
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d105      	bne.n	8010ea6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d007      	beq.n	8010eb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d003      	beq.n	8010eb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eca:	2b40      	cmp	r3, #64	; 0x40
 8010ecc:	d005      	beq.n	8010eda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8010ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d054      	beq.n	8010f84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f000 fe1f 	bl	8011b1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	689b      	ldr	r3, [r3, #8]
 8010ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010eea:	2b40      	cmp	r3, #64	; 0x40
 8010eec:	d146      	bne.n	8010f7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	3308      	adds	r3, #8
 8010ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010efc:	e853 3f00 	ldrex	r3, [r3]
 8010f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	3308      	adds	r3, #8
 8010f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010f2a:	e841 2300 	strex	r3, r2, [r1]
 8010f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d1d9      	bne.n	8010eee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d017      	beq.n	8010f74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f4a:	4a15      	ldr	r2, [pc, #84]	; (8010fa0 <HAL_UART_IRQHandler+0x2c0>)
 8010f4c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7fb f9d7 	bl	800c308 <HAL_DMA_Abort_IT>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d019      	beq.n	8010f94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8010f6e:	4610      	mov	r0, r2
 8010f70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f72:	e00f      	b.n	8010f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f000 f9e1 	bl	801133c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f7a:	e00b      	b.n	8010f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010f7c:	6878      	ldr	r0, [r7, #4]
 8010f7e:	f000 f9dd 	bl	801133c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f82:	e007      	b.n	8010f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 f9d9 	bl	801133c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010f92:	e1bf      	b.n	8011314 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010f94:	bf00      	nop
    return;
 8010f96:	e1bd      	b.n	8011314 <HAL_UART_IRQHandler+0x634>
 8010f98:	10000001 	.word	0x10000001
 8010f9c:	04000120 	.word	0x04000120
 8010fa0:	08011beb 	.word	0x08011beb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fa8:	2b01      	cmp	r3, #1
 8010faa:	f040 8153 	bne.w	8011254 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8010fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010fb2:	f003 0310 	and.w	r3, r3, #16
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	f000 814c 	beq.w	8011254 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010fc0:	f003 0310 	and.w	r3, r3, #16
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	f000 8145 	beq.w	8011254 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2210      	movs	r2, #16
 8010fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	689b      	ldr	r3, [r3, #8]
 8010fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fdc:	2b40      	cmp	r3, #64	; 0x40
 8010fde:	f040 80bb 	bne.w	8011158 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010ff0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	f000 818f 	beq.w	8011318 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011000:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011004:	429a      	cmp	r2, r3
 8011006:	f080 8187 	bcs.w	8011318 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011010:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f003 0320 	and.w	r3, r3, #32
 8011022:	2b00      	cmp	r3, #0
 8011024:	f040 8087 	bne.w	8011136 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011034:	e853 3f00 	ldrex	r3, [r3]
 8011038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801103c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	461a      	mov	r2, r3
 801104e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011052:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011056:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801105a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801105e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011062:	e841 2300 	strex	r3, r2, [r1]
 8011066:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801106a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1da      	bne.n	8011028 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	3308      	adds	r3, #8
 8011078:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801107a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801107c:	e853 3f00 	ldrex	r3, [r3]
 8011080:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011084:	f023 0301 	bic.w	r3, r3, #1
 8011088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	3308      	adds	r3, #8
 8011092:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011096:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801109a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801109e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80110a2:	e841 2300 	strex	r3, r2, [r1]
 80110a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80110a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d1e1      	bne.n	8011072 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	3308      	adds	r3, #8
 80110b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80110b8:	e853 3f00 	ldrex	r3, [r3]
 80110bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80110be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80110c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80110c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	3308      	adds	r3, #8
 80110ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80110d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80110d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80110d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80110da:	e841 2300 	strex	r3, r2, [r1]
 80110de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80110e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1e3      	bne.n	80110ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2220      	movs	r2, #32
 80110ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2200      	movs	r2, #0
 80110f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110fc:	e853 3f00 	ldrex	r3, [r3]
 8011100:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011104:	f023 0310 	bic.w	r3, r3, #16
 8011108:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	461a      	mov	r2, r3
 8011112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011116:	65bb      	str	r3, [r7, #88]	; 0x58
 8011118:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801111a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801111c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801111e:	e841 2300 	strex	r3, r2, [r1]
 8011122:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011126:	2b00      	cmp	r3, #0
 8011128:	d1e4      	bne.n	80110f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011130:	4618      	mov	r0, r3
 8011132:	f7fb f88a 	bl	800c24a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	2202      	movs	r2, #2
 801113a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011148:	b29b      	uxth	r3, r3
 801114a:	1ad3      	subs	r3, r2, r3
 801114c:	b29b      	uxth	r3, r3
 801114e:	4619      	mov	r1, r3
 8011150:	6878      	ldr	r0, [r7, #4]
 8011152:	f000 f8fd 	bl	8011350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011156:	e0df      	b.n	8011318 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011164:	b29b      	uxth	r3, r3
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011172:	b29b      	uxth	r3, r3
 8011174:	2b00      	cmp	r3, #0
 8011176:	f000 80d1 	beq.w	801131c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801117a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801117e:	2b00      	cmp	r3, #0
 8011180:	f000 80cc 	beq.w	801131c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801118c:	e853 3f00 	ldrex	r3, [r3]
 8011190:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011194:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011198:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	461a      	mov	r2, r3
 80111a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111a6:	647b      	str	r3, [r7, #68]	; 0x44
 80111a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80111ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111ae:	e841 2300 	strex	r3, r2, [r1]
 80111b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80111b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1e4      	bne.n	8011184 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	3308      	adds	r3, #8
 80111c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111c4:	e853 3f00 	ldrex	r3, [r3]
 80111c8:	623b      	str	r3, [r7, #32]
   return(result);
 80111ca:	6a3b      	ldr	r3, [r7, #32]
 80111cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80111d0:	f023 0301 	bic.w	r3, r3, #1
 80111d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	3308      	adds	r3, #8
 80111de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80111e2:	633a      	str	r2, [r7, #48]	; 0x30
 80111e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111ea:	e841 2300 	strex	r3, r2, [r1]
 80111ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80111f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d1e1      	bne.n	80111ba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2220      	movs	r2, #32
 80111fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2200      	movs	r2, #0
 8011202:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011210:	693b      	ldr	r3, [r7, #16]
 8011212:	e853 3f00 	ldrex	r3, [r3]
 8011216:	60fb      	str	r3, [r7, #12]
   return(result);
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	f023 0310 	bic.w	r3, r3, #16
 801121e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	461a      	mov	r2, r3
 8011228:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801122c:	61fb      	str	r3, [r7, #28]
 801122e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011230:	69b9      	ldr	r1, [r7, #24]
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	e841 2300 	strex	r3, r2, [r1]
 8011238:	617b      	str	r3, [r7, #20]
   return(result);
 801123a:	697b      	ldr	r3, [r7, #20]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1e4      	bne.n	801120a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	2202      	movs	r2, #2
 8011244:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011246:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801124a:	4619      	mov	r1, r3
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	f000 f87f 	bl	8011350 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011252:	e063      	b.n	801131c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801125c:	2b00      	cmp	r3, #0
 801125e:	d00e      	beq.n	801127e <HAL_UART_IRQHandler+0x59e>
 8011260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011268:	2b00      	cmp	r3, #0
 801126a:	d008      	beq.n	801127e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011276:	6878      	ldr	r0, [r7, #4]
 8011278:	f000 fcf8 	bl	8011c6c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801127c:	e051      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801127e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011286:	2b00      	cmp	r3, #0
 8011288:	d014      	beq.n	80112b4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801128a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011292:	2b00      	cmp	r3, #0
 8011294:	d105      	bne.n	80112a2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011296:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801129a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d008      	beq.n	80112b4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d03a      	beq.n	8011320 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	4798      	blx	r3
    }
    return;
 80112b2:	e035      	b.n	8011320 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80112b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d009      	beq.n	80112d4 <HAL_UART_IRQHandler+0x5f4>
 80112c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d003      	beq.n	80112d4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f000 fca2 	bl	8011c16 <UART_EndTransmit_IT>
    return;
 80112d2:	e026      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80112d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d009      	beq.n	80112f4 <HAL_UART_IRQHandler+0x614>
 80112e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80112e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d003      	beq.n	80112f4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fcd1 	bl	8011c94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80112f2:	e016      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80112f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80112f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d010      	beq.n	8011322 <HAL_UART_IRQHandler+0x642>
 8011300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011304:	2b00      	cmp	r3, #0
 8011306:	da0c      	bge.n	8011322 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011308:	6878      	ldr	r0, [r7, #4]
 801130a:	f000 fcb9 	bl	8011c80 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801130e:	e008      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
      return;
 8011310:	bf00      	nop
 8011312:	e006      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
    return;
 8011314:	bf00      	nop
 8011316:	e004      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
      return;
 8011318:	bf00      	nop
 801131a:	e002      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
      return;
 801131c:	bf00      	nop
 801131e:	e000      	b.n	8011322 <HAL_UART_IRQHandler+0x642>
    return;
 8011320:	bf00      	nop
  }
}
 8011322:	37e8      	adds	r7, #232	; 0xe8
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}

08011328 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011328:	b480      	push	{r7}
 801132a:	b083      	sub	sp, #12
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011330:	bf00      	nop
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011344:	bf00      	nop
 8011346:	370c      	adds	r7, #12
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr

08011350 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011350:	b480      	push	{r7}
 8011352:	b083      	sub	sp, #12
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	460b      	mov	r3, r1
 801135a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801135c:	bf00      	nop
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr

08011368 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801136c:	b08c      	sub	sp, #48	; 0x30
 801136e:	af00      	add	r7, sp, #0
 8011370:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011372:	2300      	movs	r3, #0
 8011374:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	689a      	ldr	r2, [r3, #8]
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	691b      	ldr	r3, [r3, #16]
 8011380:	431a      	orrs	r2, r3
 8011382:	697b      	ldr	r3, [r7, #20]
 8011384:	695b      	ldr	r3, [r3, #20]
 8011386:	431a      	orrs	r2, r3
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	69db      	ldr	r3, [r3, #28]
 801138c:	4313      	orrs	r3, r2
 801138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011390:	697b      	ldr	r3, [r7, #20]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	4baf      	ldr	r3, [pc, #700]	; (8011654 <UART_SetConfig+0x2ec>)
 8011398:	4013      	ands	r3, r2
 801139a:	697a      	ldr	r2, [r7, #20]
 801139c:	6812      	ldr	r2, [r2, #0]
 801139e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113a0:	430b      	orrs	r3, r1
 80113a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80113a4:	697b      	ldr	r3, [r7, #20]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	685b      	ldr	r3, [r3, #4]
 80113aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	68da      	ldr	r2, [r3, #12]
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	430a      	orrs	r2, r1
 80113b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	699b      	ldr	r3, [r3, #24]
 80113be:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	4aa4      	ldr	r2, [pc, #656]	; (8011658 <UART_SetConfig+0x2f0>)
 80113c6:	4293      	cmp	r3, r2
 80113c8:	d004      	beq.n	80113d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	6a1b      	ldr	r3, [r3, #32]
 80113ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80113d0:	4313      	orrs	r3, r2
 80113d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80113de:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80113e2:	697a      	ldr	r2, [r7, #20]
 80113e4:	6812      	ldr	r2, [r2, #0]
 80113e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80113e8:	430b      	orrs	r3, r1
 80113ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113f2:	f023 010f 	bic.w	r1, r3, #15
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	681b      	ldr	r3, [r3, #0]
 80113fe:	430a      	orrs	r2, r1
 8011400:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	4a95      	ldr	r2, [pc, #596]	; (801165c <UART_SetConfig+0x2f4>)
 8011408:	4293      	cmp	r3, r2
 801140a:	d125      	bne.n	8011458 <UART_SetConfig+0xf0>
 801140c:	2003      	movs	r0, #3
 801140e:	f7ff fb69 	bl	8010ae4 <LL_RCC_GetUSARTClockSource>
 8011412:	4603      	mov	r3, r0
 8011414:	2b03      	cmp	r3, #3
 8011416:	d81b      	bhi.n	8011450 <UART_SetConfig+0xe8>
 8011418:	a201      	add	r2, pc, #4	; (adr r2, 8011420 <UART_SetConfig+0xb8>)
 801141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801141e:	bf00      	nop
 8011420:	08011431 	.word	0x08011431
 8011424:	08011441 	.word	0x08011441
 8011428:	08011439 	.word	0x08011439
 801142c:	08011449 	.word	0x08011449
 8011430:	2301      	movs	r3, #1
 8011432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011436:	e042      	b.n	80114be <UART_SetConfig+0x156>
 8011438:	2302      	movs	r3, #2
 801143a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801143e:	e03e      	b.n	80114be <UART_SetConfig+0x156>
 8011440:	2304      	movs	r3, #4
 8011442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011446:	e03a      	b.n	80114be <UART_SetConfig+0x156>
 8011448:	2308      	movs	r3, #8
 801144a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801144e:	e036      	b.n	80114be <UART_SetConfig+0x156>
 8011450:	2310      	movs	r3, #16
 8011452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011456:	e032      	b.n	80114be <UART_SetConfig+0x156>
 8011458:	697b      	ldr	r3, [r7, #20]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	4a7e      	ldr	r2, [pc, #504]	; (8011658 <UART_SetConfig+0x2f0>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d12a      	bne.n	80114b8 <UART_SetConfig+0x150>
 8011462:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8011466:	f7ff fb4d 	bl	8010b04 <LL_RCC_GetLPUARTClockSource>
 801146a:	4603      	mov	r3, r0
 801146c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011470:	d01a      	beq.n	80114a8 <UART_SetConfig+0x140>
 8011472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011476:	d81b      	bhi.n	80114b0 <UART_SetConfig+0x148>
 8011478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801147c:	d00c      	beq.n	8011498 <UART_SetConfig+0x130>
 801147e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011482:	d815      	bhi.n	80114b0 <UART_SetConfig+0x148>
 8011484:	2b00      	cmp	r3, #0
 8011486:	d003      	beq.n	8011490 <UART_SetConfig+0x128>
 8011488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801148c:	d008      	beq.n	80114a0 <UART_SetConfig+0x138>
 801148e:	e00f      	b.n	80114b0 <UART_SetConfig+0x148>
 8011490:	2300      	movs	r3, #0
 8011492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011496:	e012      	b.n	80114be <UART_SetConfig+0x156>
 8011498:	2302      	movs	r3, #2
 801149a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801149e:	e00e      	b.n	80114be <UART_SetConfig+0x156>
 80114a0:	2304      	movs	r3, #4
 80114a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114a6:	e00a      	b.n	80114be <UART_SetConfig+0x156>
 80114a8:	2308      	movs	r3, #8
 80114aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114ae:	e006      	b.n	80114be <UART_SetConfig+0x156>
 80114b0:	2310      	movs	r3, #16
 80114b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80114b6:	e002      	b.n	80114be <UART_SetConfig+0x156>
 80114b8:	2310      	movs	r3, #16
 80114ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	4a65      	ldr	r2, [pc, #404]	; (8011658 <UART_SetConfig+0x2f0>)
 80114c4:	4293      	cmp	r3, r2
 80114c6:	f040 8097 	bne.w	80115f8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80114ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80114ce:	2b08      	cmp	r3, #8
 80114d0:	d823      	bhi.n	801151a <UART_SetConfig+0x1b2>
 80114d2:	a201      	add	r2, pc, #4	; (adr r2, 80114d8 <UART_SetConfig+0x170>)
 80114d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d8:	080114fd 	.word	0x080114fd
 80114dc:	0801151b 	.word	0x0801151b
 80114e0:	08011505 	.word	0x08011505
 80114e4:	0801151b 	.word	0x0801151b
 80114e8:	0801150b 	.word	0x0801150b
 80114ec:	0801151b 	.word	0x0801151b
 80114f0:	0801151b 	.word	0x0801151b
 80114f4:	0801151b 	.word	0x0801151b
 80114f8:	08011513 	.word	0x08011513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80114fc:	f7fc fd70 	bl	800dfe0 <HAL_RCC_GetPCLK1Freq>
 8011500:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011502:	e010      	b.n	8011526 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011504:	4b56      	ldr	r3, [pc, #344]	; (8011660 <UART_SetConfig+0x2f8>)
 8011506:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011508:	e00d      	b.n	8011526 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801150a:	f7fc fce9 	bl	800dee0 <HAL_RCC_GetSysClockFreq>
 801150e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011510:	e009      	b.n	8011526 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011516:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011518:	e005      	b.n	8011526 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 801151a:	2300      	movs	r3, #0
 801151c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801151e:	2301      	movs	r3, #1
 8011520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011528:	2b00      	cmp	r3, #0
 801152a:	f000 812b 	beq.w	8011784 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011532:	4a4c      	ldr	r2, [pc, #304]	; (8011664 <UART_SetConfig+0x2fc>)
 8011534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011538:	461a      	mov	r2, r3
 801153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801153c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011540:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011542:	697b      	ldr	r3, [r7, #20]
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	4613      	mov	r3, r2
 8011548:	005b      	lsls	r3, r3, #1
 801154a:	4413      	add	r3, r2
 801154c:	69ba      	ldr	r2, [r7, #24]
 801154e:	429a      	cmp	r2, r3
 8011550:	d305      	bcc.n	801155e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011558:	69ba      	ldr	r2, [r7, #24]
 801155a:	429a      	cmp	r2, r3
 801155c:	d903      	bls.n	8011566 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801155e:	2301      	movs	r3, #1
 8011560:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8011564:	e10e      	b.n	8011784 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011568:	2200      	movs	r2, #0
 801156a:	60bb      	str	r3, [r7, #8]
 801156c:	60fa      	str	r2, [r7, #12]
 801156e:	697b      	ldr	r3, [r7, #20]
 8011570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011572:	4a3c      	ldr	r2, [pc, #240]	; (8011664 <UART_SetConfig+0x2fc>)
 8011574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011578:	b29b      	uxth	r3, r3
 801157a:	2200      	movs	r2, #0
 801157c:	603b      	str	r3, [r7, #0]
 801157e:	607a      	str	r2, [r7, #4]
 8011580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011584:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011588:	f7ef fbb0 	bl	8000cec <__aeabi_uldivmod>
 801158c:	4602      	mov	r2, r0
 801158e:	460b      	mov	r3, r1
 8011590:	4610      	mov	r0, r2
 8011592:	4619      	mov	r1, r3
 8011594:	f04f 0200 	mov.w	r2, #0
 8011598:	f04f 0300 	mov.w	r3, #0
 801159c:	020b      	lsls	r3, r1, #8
 801159e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80115a2:	0202      	lsls	r2, r0, #8
 80115a4:	6979      	ldr	r1, [r7, #20]
 80115a6:	6849      	ldr	r1, [r1, #4]
 80115a8:	0849      	lsrs	r1, r1, #1
 80115aa:	2000      	movs	r0, #0
 80115ac:	460c      	mov	r4, r1
 80115ae:	4605      	mov	r5, r0
 80115b0:	eb12 0804 	adds.w	r8, r2, r4
 80115b4:	eb43 0905 	adc.w	r9, r3, r5
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	469a      	mov	sl, r3
 80115c0:	4693      	mov	fp, r2
 80115c2:	4652      	mov	r2, sl
 80115c4:	465b      	mov	r3, fp
 80115c6:	4640      	mov	r0, r8
 80115c8:	4649      	mov	r1, r9
 80115ca:	f7ef fb8f 	bl	8000cec <__aeabi_uldivmod>
 80115ce:	4602      	mov	r2, r0
 80115d0:	460b      	mov	r3, r1
 80115d2:	4613      	mov	r3, r2
 80115d4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115dc:	d308      	bcc.n	80115f0 <UART_SetConfig+0x288>
 80115de:	6a3b      	ldr	r3, [r7, #32]
 80115e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115e4:	d204      	bcs.n	80115f0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	6a3a      	ldr	r2, [r7, #32]
 80115ec:	60da      	str	r2, [r3, #12]
 80115ee:	e0c9      	b.n	8011784 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80115f0:	2301      	movs	r3, #1
 80115f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80115f6:	e0c5      	b.n	8011784 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	69db      	ldr	r3, [r3, #28]
 80115fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011600:	d16d      	bne.n	80116de <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8011602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011606:	3b01      	subs	r3, #1
 8011608:	2b07      	cmp	r3, #7
 801160a:	d82d      	bhi.n	8011668 <UART_SetConfig+0x300>
 801160c:	a201      	add	r2, pc, #4	; (adr r2, 8011614 <UART_SetConfig+0x2ac>)
 801160e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011612:	bf00      	nop
 8011614:	08011635 	.word	0x08011635
 8011618:	0801163d 	.word	0x0801163d
 801161c:	08011669 	.word	0x08011669
 8011620:	08011643 	.word	0x08011643
 8011624:	08011669 	.word	0x08011669
 8011628:	08011669 	.word	0x08011669
 801162c:	08011669 	.word	0x08011669
 8011630:	0801164b 	.word	0x0801164b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011634:	f7fc fcea 	bl	800e00c <HAL_RCC_GetPCLK2Freq>
 8011638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801163a:	e01b      	b.n	8011674 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801163c:	4b08      	ldr	r3, [pc, #32]	; (8011660 <UART_SetConfig+0x2f8>)
 801163e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011640:	e018      	b.n	8011674 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011642:	f7fc fc4d 	bl	800dee0 <HAL_RCC_GetSysClockFreq>
 8011646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011648:	e014      	b.n	8011674 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801164a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801164e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011650:	e010      	b.n	8011674 <UART_SetConfig+0x30c>
 8011652:	bf00      	nop
 8011654:	cfff69f3 	.word	0xcfff69f3
 8011658:	40008000 	.word	0x40008000
 801165c:	40013800 	.word	0x40013800
 8011660:	00f42400 	.word	0x00f42400
 8011664:	080179ac 	.word	0x080179ac
      default:
        pclk = 0U;
 8011668:	2300      	movs	r3, #0
 801166a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801166c:	2301      	movs	r3, #1
 801166e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011672:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011676:	2b00      	cmp	r3, #0
 8011678:	f000 8084 	beq.w	8011784 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011680:	4a4b      	ldr	r2, [pc, #300]	; (80117b0 <UART_SetConfig+0x448>)
 8011682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011686:	461a      	mov	r2, r3
 8011688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168a:	fbb3 f3f2 	udiv	r3, r3, r2
 801168e:	005a      	lsls	r2, r3, #1
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	085b      	lsrs	r3, r3, #1
 8011696:	441a      	add	r2, r3
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80116a0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116a2:	6a3b      	ldr	r3, [r7, #32]
 80116a4:	2b0f      	cmp	r3, #15
 80116a6:	d916      	bls.n	80116d6 <UART_SetConfig+0x36e>
 80116a8:	6a3b      	ldr	r3, [r7, #32]
 80116aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116ae:	d212      	bcs.n	80116d6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80116b0:	6a3b      	ldr	r3, [r7, #32]
 80116b2:	b29b      	uxth	r3, r3
 80116b4:	f023 030f 	bic.w	r3, r3, #15
 80116b8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80116ba:	6a3b      	ldr	r3, [r7, #32]
 80116bc:	085b      	lsrs	r3, r3, #1
 80116be:	b29b      	uxth	r3, r3
 80116c0:	f003 0307 	and.w	r3, r3, #7
 80116c4:	b29a      	uxth	r2, r3
 80116c6:	8bfb      	ldrh	r3, [r7, #30]
 80116c8:	4313      	orrs	r3, r2
 80116ca:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	8bfa      	ldrh	r2, [r7, #30]
 80116d2:	60da      	str	r2, [r3, #12]
 80116d4:	e056      	b.n	8011784 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80116dc:	e052      	b.n	8011784 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80116de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80116e2:	3b01      	subs	r3, #1
 80116e4:	2b07      	cmp	r3, #7
 80116e6:	d822      	bhi.n	801172e <UART_SetConfig+0x3c6>
 80116e8:	a201      	add	r2, pc, #4	; (adr r2, 80116f0 <UART_SetConfig+0x388>)
 80116ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ee:	bf00      	nop
 80116f0:	08011711 	.word	0x08011711
 80116f4:	08011719 	.word	0x08011719
 80116f8:	0801172f 	.word	0x0801172f
 80116fc:	0801171f 	.word	0x0801171f
 8011700:	0801172f 	.word	0x0801172f
 8011704:	0801172f 	.word	0x0801172f
 8011708:	0801172f 	.word	0x0801172f
 801170c:	08011727 	.word	0x08011727
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011710:	f7fc fc7c 	bl	800e00c <HAL_RCC_GetPCLK2Freq>
 8011714:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011716:	e010      	b.n	801173a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011718:	4b26      	ldr	r3, [pc, #152]	; (80117b4 <UART_SetConfig+0x44c>)
 801171a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801171c:	e00d      	b.n	801173a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801171e:	f7fc fbdf 	bl	800dee0 <HAL_RCC_GetSysClockFreq>
 8011722:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011724:	e009      	b.n	801173a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801172a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801172c:	e005      	b.n	801173a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 801172e:	2300      	movs	r3, #0
 8011730:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011732:	2301      	movs	r3, #1
 8011734:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8011738:	bf00      	nop
    }

    if (pclk != 0U)
 801173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801173c:	2b00      	cmp	r3, #0
 801173e:	d021      	beq.n	8011784 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011744:	4a1a      	ldr	r2, [pc, #104]	; (80117b0 <UART_SetConfig+0x448>)
 8011746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801174a:	461a      	mov	r2, r3
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	085b      	lsrs	r3, r3, #1
 8011758:	441a      	add	r2, r3
 801175a:	697b      	ldr	r3, [r7, #20]
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011762:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011764:	6a3b      	ldr	r3, [r7, #32]
 8011766:	2b0f      	cmp	r3, #15
 8011768:	d909      	bls.n	801177e <UART_SetConfig+0x416>
 801176a:	6a3b      	ldr	r3, [r7, #32]
 801176c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011770:	d205      	bcs.n	801177e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011772:	6a3b      	ldr	r3, [r7, #32]
 8011774:	b29a      	uxth	r2, r3
 8011776:	697b      	ldr	r3, [r7, #20]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	60da      	str	r2, [r3, #12]
 801177c:	e002      	b.n	8011784 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 801177e:	2301      	movs	r3, #1
 8011780:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011784:	697b      	ldr	r3, [r7, #20]
 8011786:	2201      	movs	r2, #1
 8011788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801178c:	697b      	ldr	r3, [r7, #20]
 801178e:	2201      	movs	r2, #1
 8011790:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	2200      	movs	r2, #0
 8011798:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	2200      	movs	r2, #0
 801179e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80117a0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80117a4:	4618      	mov	r0, r3
 80117a6:	3730      	adds	r7, #48	; 0x30
 80117a8:	46bd      	mov	sp, r7
 80117aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80117ae:	bf00      	nop
 80117b0:	080179ac 	.word	0x080179ac
 80117b4:	00f42400 	.word	0x00f42400

080117b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80117b8:	b480      	push	{r7}
 80117ba:	b083      	sub	sp, #12
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117c4:	f003 0301 	and.w	r3, r3, #1
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d00a      	beq.n	80117e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	430a      	orrs	r2, r1
 80117e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117e6:	f003 0302 	and.w	r3, r3, #2
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00a      	beq.n	8011804 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	685b      	ldr	r3, [r3, #4]
 80117f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	430a      	orrs	r2, r1
 8011802:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011808:	f003 0304 	and.w	r3, r3, #4
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00a      	beq.n	8011826 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	430a      	orrs	r2, r1
 8011824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801182a:	f003 0308 	and.w	r3, r3, #8
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00a      	beq.n	8011848 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	430a      	orrs	r2, r1
 8011846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801184c:	f003 0310 	and.w	r3, r3, #16
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00a      	beq.n	801186a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	689b      	ldr	r3, [r3, #8]
 801185a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	430a      	orrs	r2, r1
 8011868:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801186e:	f003 0320 	and.w	r3, r3, #32
 8011872:	2b00      	cmp	r3, #0
 8011874:	d00a      	beq.n	801188c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	689b      	ldr	r3, [r3, #8]
 801187c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	430a      	orrs	r2, r1
 801188a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011894:	2b00      	cmp	r3, #0
 8011896:	d01a      	beq.n	80118ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	430a      	orrs	r2, r1
 80118ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118b6:	d10a      	bne.n	80118ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	430a      	orrs	r2, r1
 80118cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00a      	beq.n	80118f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	430a      	orrs	r2, r1
 80118ee:	605a      	str	r2, [r3, #4]
  }
}
 80118f0:	bf00      	nop
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr

080118fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80118fc:	b580      	push	{r7, lr}
 80118fe:	b098      	sub	sp, #96	; 0x60
 8011900:	af02      	add	r7, sp, #8
 8011902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	2200      	movs	r2, #0
 8011908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801190c:	f7fa fb76 	bl	800bffc <HAL_GetTick>
 8011910:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	f003 0308 	and.w	r3, r3, #8
 801191c:	2b08      	cmp	r3, #8
 801191e:	d12f      	bne.n	8011980 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011924:	9300      	str	r3, [sp, #0]
 8011926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011928:	2200      	movs	r2, #0
 801192a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f000 f88e 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 8011934:	4603      	mov	r3, r0
 8011936:	2b00      	cmp	r3, #0
 8011938:	d022      	beq.n	8011980 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011942:	e853 3f00 	ldrex	r3, [r3]
 8011946:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801194e:	653b      	str	r3, [r7, #80]	; 0x50
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	461a      	mov	r2, r3
 8011956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011958:	647b      	str	r3, [r7, #68]	; 0x44
 801195a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801195c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801195e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011960:	e841 2300 	strex	r3, r2, [r1]
 8011964:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011968:	2b00      	cmp	r3, #0
 801196a:	d1e6      	bne.n	801193a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2220      	movs	r2, #32
 8011970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801197c:	2303      	movs	r3, #3
 801197e:	e063      	b.n	8011a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	f003 0304 	and.w	r3, r3, #4
 801198a:	2b04      	cmp	r3, #4
 801198c:	d149      	bne.n	8011a22 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801198e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011992:	9300      	str	r3, [sp, #0]
 8011994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011996:	2200      	movs	r2, #0
 8011998:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801199c:	6878      	ldr	r0, [r7, #4]
 801199e:	f000 f857 	bl	8011a50 <UART_WaitOnFlagUntilTimeout>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d03c      	beq.n	8011a22 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b0:	e853 3f00 	ldrex	r3, [r3]
 80119b4:	623b      	str	r3, [r7, #32]
   return(result);
 80119b6:	6a3b      	ldr	r3, [r7, #32]
 80119b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	461a      	mov	r2, r3
 80119c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119c6:	633b      	str	r3, [r7, #48]	; 0x30
 80119c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80119cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119ce:	e841 2300 	strex	r3, r2, [r1]
 80119d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80119d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d1e6      	bne.n	80119a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	3308      	adds	r3, #8
 80119e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	e853 3f00 	ldrex	r3, [r3]
 80119e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f023 0301 	bic.w	r3, r3, #1
 80119f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	3308      	adds	r3, #8
 80119f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80119fa:	61fa      	str	r2, [r7, #28]
 80119fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119fe:	69b9      	ldr	r1, [r7, #24]
 8011a00:	69fa      	ldr	r2, [r7, #28]
 8011a02:	e841 2300 	strex	r3, r2, [r1]
 8011a06:	617b      	str	r3, [r7, #20]
   return(result);
 8011a08:	697b      	ldr	r3, [r7, #20]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d1e5      	bne.n	80119da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2220      	movs	r2, #32
 8011a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a1e:	2303      	movs	r3, #3
 8011a20:	e012      	b.n	8011a48 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2220      	movs	r2, #32
 8011a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	2220      	movs	r2, #32
 8011a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2200      	movs	r2, #0
 8011a36:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2200      	movs	r2, #0
 8011a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011a46:	2300      	movs	r3, #0
}
 8011a48:	4618      	mov	r0, r3
 8011a4a:	3758      	adds	r7, #88	; 0x58
 8011a4c:	46bd      	mov	sp, r7
 8011a4e:	bd80      	pop	{r7, pc}

08011a50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	60f8      	str	r0, [r7, #12]
 8011a58:	60b9      	str	r1, [r7, #8]
 8011a5a:	603b      	str	r3, [r7, #0]
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a60:	e049      	b.n	8011af6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011a62:	69bb      	ldr	r3, [r7, #24]
 8011a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a68:	d045      	beq.n	8011af6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011a6a:	f7fa fac7 	bl	800bffc <HAL_GetTick>
 8011a6e:	4602      	mov	r2, r0
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	1ad3      	subs	r3, r2, r3
 8011a74:	69ba      	ldr	r2, [r7, #24]
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d302      	bcc.n	8011a80 <UART_WaitOnFlagUntilTimeout+0x30>
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d101      	bne.n	8011a84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011a80:	2303      	movs	r3, #3
 8011a82:	e048      	b.n	8011b16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	f003 0304 	and.w	r3, r3, #4
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d031      	beq.n	8011af6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	69db      	ldr	r3, [r3, #28]
 8011a98:	f003 0308 	and.w	r3, r3, #8
 8011a9c:	2b08      	cmp	r3, #8
 8011a9e:	d110      	bne.n	8011ac2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	2208      	movs	r2, #8
 8011aa6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011aa8:	68f8      	ldr	r0, [r7, #12]
 8011aaa:	f000 f838 	bl	8011b1e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2208      	movs	r2, #8
 8011ab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	e029      	b.n	8011b16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	69db      	ldr	r3, [r3, #28]
 8011ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ad0:	d111      	bne.n	8011af6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011adc:	68f8      	ldr	r0, [r7, #12]
 8011ade:	f000 f81e 	bl	8011b1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	2220      	movs	r2, #32
 8011ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	2200      	movs	r2, #0
 8011aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011af2:	2303      	movs	r3, #3
 8011af4:	e00f      	b.n	8011b16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	69da      	ldr	r2, [r3, #28]
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	4013      	ands	r3, r2
 8011b00:	68ba      	ldr	r2, [r7, #8]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	bf0c      	ite	eq
 8011b06:	2301      	moveq	r3, #1
 8011b08:	2300      	movne	r3, #0
 8011b0a:	b2db      	uxtb	r3, r3
 8011b0c:	461a      	mov	r2, r3
 8011b0e:	79fb      	ldrb	r3, [r7, #7]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d0a6      	beq.n	8011a62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b14:	2300      	movs	r3, #0
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3710      	adds	r7, #16
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011b1e:	b480      	push	{r7}
 8011b20:	b095      	sub	sp, #84	; 0x54
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b2e:	e853 3f00 	ldrex	r3, [r3]
 8011b32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	461a      	mov	r2, r3
 8011b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b44:	643b      	str	r3, [r7, #64]	; 0x40
 8011b46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011b4c:	e841 2300 	strex	r3, r2, [r1]
 8011b50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d1e6      	bne.n	8011b26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	3308      	adds	r3, #8
 8011b5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b60:	6a3b      	ldr	r3, [r7, #32]
 8011b62:	e853 3f00 	ldrex	r3, [r3]
 8011b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b68:	69fb      	ldr	r3, [r7, #28]
 8011b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011b6e:	f023 0301 	bic.w	r3, r3, #1
 8011b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	3308      	adds	r3, #8
 8011b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b84:	e841 2300 	strex	r3, r2, [r1]
 8011b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d1e3      	bne.n	8011b58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b94:	2b01      	cmp	r3, #1
 8011b96:	d118      	bne.n	8011bca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	e853 3f00 	ldrex	r3, [r3]
 8011ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	f023 0310 	bic.w	r3, r3, #16
 8011bac:	647b      	str	r3, [r7, #68]	; 0x44
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bb6:	61bb      	str	r3, [r7, #24]
 8011bb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bba:	6979      	ldr	r1, [r7, #20]
 8011bbc:	69ba      	ldr	r2, [r7, #24]
 8011bbe:	e841 2300 	strex	r3, r2, [r1]
 8011bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8011bc4:	693b      	ldr	r3, [r7, #16]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d1e6      	bne.n	8011b98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	2220      	movs	r2, #32
 8011bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	2200      	movs	r2, #0
 8011bdc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011bde:	bf00      	nop
 8011be0:	3754      	adds	r7, #84	; 0x54
 8011be2:	46bd      	mov	sp, r7
 8011be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be8:	4770      	bx	lr

08011bea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b084      	sub	sp, #16
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011bf6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2200      	movs	r2, #0
 8011c04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c08:	68f8      	ldr	r0, [r7, #12]
 8011c0a:	f7ff fb97 	bl	801133c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c0e:	bf00      	nop
 8011c10:	3710      	adds	r7, #16
 8011c12:	46bd      	mov	sp, r7
 8011c14:	bd80      	pop	{r7, pc}

08011c16 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011c16:	b580      	push	{r7, lr}
 8011c18:	b088      	sub	sp, #32
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	e853 3f00 	ldrex	r3, [r3]
 8011c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c32:	61fb      	str	r3, [r7, #28]
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	461a      	mov	r2, r3
 8011c3a:	69fb      	ldr	r3, [r7, #28]
 8011c3c:	61bb      	str	r3, [r7, #24]
 8011c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c40:	6979      	ldr	r1, [r7, #20]
 8011c42:	69ba      	ldr	r2, [r7, #24]
 8011c44:	e841 2300 	strex	r3, r2, [r1]
 8011c48:	613b      	str	r3, [r7, #16]
   return(result);
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d1e6      	bne.n	8011c1e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2220      	movs	r2, #32
 8011c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f7ff fb62 	bl	8011328 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c64:	bf00      	nop
 8011c66:	3720      	adds	r7, #32
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011c74:	bf00      	nop
 8011c76:	370c      	adds	r7, #12
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c7e:	4770      	bx	lr

08011c80 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011c88:	bf00      	nop
 8011c8a:	370c      	adds	r7, #12
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr

08011c94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011c9c:	bf00      	nop
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011cb6:	2b01      	cmp	r3, #1
 8011cb8:	d101      	bne.n	8011cbe <HAL_UARTEx_DisableFifoMode+0x16>
 8011cba:	2302      	movs	r3, #2
 8011cbc:	e027      	b.n	8011d0e <HAL_UARTEx_DisableFifoMode+0x66>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2224      	movs	r2, #36	; 0x24
 8011cca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	681b      	ldr	r3, [r3, #0]
 8011cd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	681b      	ldr	r3, [r3, #0]
 8011cda:	681a      	ldr	r2, [r3, #0]
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f022 0201 	bic.w	r2, r2, #1
 8011ce4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011cec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	681b      	ldr	r3, [r3, #0]
 8011cf8:	68fa      	ldr	r2, [r7, #12]
 8011cfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2220      	movs	r2, #32
 8011d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	2200      	movs	r2, #0
 8011d08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d0c:	2300      	movs	r3, #0
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3714      	adds	r7, #20
 8011d12:	46bd      	mov	sp, r7
 8011d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d18:	4770      	bx	lr

08011d1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d1a:	b580      	push	{r7, lr}
 8011d1c:	b084      	sub	sp, #16
 8011d1e:	af00      	add	r7, sp, #0
 8011d20:	6078      	str	r0, [r7, #4]
 8011d22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d2a:	2b01      	cmp	r3, #1
 8011d2c:	d101      	bne.n	8011d32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d2e:	2302      	movs	r3, #2
 8011d30:	e02d      	b.n	8011d8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2201      	movs	r2, #1
 8011d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2224      	movs	r2, #36	; 0x24
 8011d3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f022 0201 	bic.w	r2, r2, #1
 8011d58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	689b      	ldr	r3, [r3, #8]
 8011d60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	683a      	ldr	r2, [r7, #0]
 8011d6a:	430a      	orrs	r2, r1
 8011d6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 f850 	bl	8011e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	68fa      	ldr	r2, [r7, #12]
 8011d7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2220      	movs	r2, #32
 8011d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d8c:	2300      	movs	r3, #0
}
 8011d8e:	4618      	mov	r0, r3
 8011d90:	3710      	adds	r7, #16
 8011d92:	46bd      	mov	sp, r7
 8011d94:	bd80      	pop	{r7, pc}

08011d96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b084      	sub	sp, #16
 8011d9a:	af00      	add	r7, sp, #0
 8011d9c:	6078      	str	r0, [r7, #4]
 8011d9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011da6:	2b01      	cmp	r3, #1
 8011da8:	d101      	bne.n	8011dae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011daa:	2302      	movs	r3, #2
 8011dac:	e02d      	b.n	8011e0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2201      	movs	r2, #1
 8011db2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	2224      	movs	r2, #36	; 0x24
 8011dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	681a      	ldr	r2, [r3, #0]
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	f022 0201 	bic.w	r2, r2, #1
 8011dd4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	683a      	ldr	r2, [r7, #0]
 8011de6:	430a      	orrs	r2, r1
 8011de8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dea:	6878      	ldr	r0, [r7, #4]
 8011dec:	f000 f812 	bl	8011e14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	68fa      	ldr	r2, [r7, #12]
 8011df6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2220      	movs	r2, #32
 8011dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2200      	movs	r2, #0
 8011e04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e08:	2300      	movs	r3, #0
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	3710      	adds	r7, #16
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd80      	pop	{r7, pc}
	...

08011e14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b085      	sub	sp, #20
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d108      	bne.n	8011e36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e34:	e031      	b.n	8011e9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e36:	2308      	movs	r3, #8
 8011e38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e3a:	2308      	movs	r3, #8
 8011e3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	689b      	ldr	r3, [r3, #8]
 8011e44:	0e5b      	lsrs	r3, r3, #25
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	f003 0307 	and.w	r3, r3, #7
 8011e4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	689b      	ldr	r3, [r3, #8]
 8011e54:	0f5b      	lsrs	r3, r3, #29
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	f003 0307 	and.w	r3, r3, #7
 8011e5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e5e:	7bbb      	ldrb	r3, [r7, #14]
 8011e60:	7b3a      	ldrb	r2, [r7, #12]
 8011e62:	4911      	ldr	r1, [pc, #68]	; (8011ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8011e64:	5c8a      	ldrb	r2, [r1, r2]
 8011e66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011e6a:	7b3a      	ldrb	r2, [r7, #12]
 8011e6c:	490f      	ldr	r1, [pc, #60]	; (8011eac <UARTEx_SetNbDataToProcess+0x98>)
 8011e6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e70:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e74:	b29a      	uxth	r2, r3
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e7c:	7bfb      	ldrb	r3, [r7, #15]
 8011e7e:	7b7a      	ldrb	r2, [r7, #13]
 8011e80:	4909      	ldr	r1, [pc, #36]	; (8011ea8 <UARTEx_SetNbDataToProcess+0x94>)
 8011e82:	5c8a      	ldrb	r2, [r1, r2]
 8011e84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011e88:	7b7a      	ldrb	r2, [r7, #13]
 8011e8a:	4908      	ldr	r1, [pc, #32]	; (8011eac <UARTEx_SetNbDataToProcess+0x98>)
 8011e8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011e8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011e92:	b29a      	uxth	r2, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011e9a:	bf00      	nop
 8011e9c:	3714      	adds	r7, #20
 8011e9e:	46bd      	mov	sp, r7
 8011ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea4:	4770      	bx	lr
 8011ea6:	bf00      	nop
 8011ea8:	080179c4 	.word	0x080179c4
 8011eac:	080179cc 	.word	0x080179cc

08011eb0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011eb0:	b480      	push	{r7}
 8011eb2:	b085      	sub	sp, #20
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011eb8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8011ebc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	b29b      	uxth	r3, r3
 8011eca:	43db      	mvns	r3, r3
 8011ecc:	b29b      	uxth	r3, r3
 8011ece:	4013      	ands	r3, r2
 8011ed0:	b29a      	uxth	r2, r3
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8011ed8:	2300      	movs	r3, #0
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3714      	adds	r7, #20
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr

08011ee6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	b480      	push	{r7}
 8011eea:	b083      	sub	sp, #12
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	f107 0014 	add.w	r0, r7, #20
 8011ef4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2201      	movs	r2, #1
 8011efc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2200      	movs	r2, #0
 8011f14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8011f18:	2300      	movs	r3, #0
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	370c      	adds	r7, #12
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f24:	b004      	add	sp, #16
 8011f26:	4770      	bx	lr

08011f28 <__errno>:
 8011f28:	4b01      	ldr	r3, [pc, #4]	; (8011f30 <__errno+0x8>)
 8011f2a:	6818      	ldr	r0, [r3, #0]
 8011f2c:	4770      	bx	lr
 8011f2e:	bf00      	nop
 8011f30:	20000020 	.word	0x20000020

08011f34 <__libc_init_array>:
 8011f34:	b570      	push	{r4, r5, r6, lr}
 8011f36:	4d0d      	ldr	r5, [pc, #52]	; (8011f6c <__libc_init_array+0x38>)
 8011f38:	4c0d      	ldr	r4, [pc, #52]	; (8011f70 <__libc_init_array+0x3c>)
 8011f3a:	1b64      	subs	r4, r4, r5
 8011f3c:	10a4      	asrs	r4, r4, #2
 8011f3e:	2600      	movs	r6, #0
 8011f40:	42a6      	cmp	r6, r4
 8011f42:	d109      	bne.n	8011f58 <__libc_init_array+0x24>
 8011f44:	4d0b      	ldr	r5, [pc, #44]	; (8011f74 <__libc_init_array+0x40>)
 8011f46:	4c0c      	ldr	r4, [pc, #48]	; (8011f78 <__libc_init_array+0x44>)
 8011f48:	f004 fb06 	bl	8016558 <_init>
 8011f4c:	1b64      	subs	r4, r4, r5
 8011f4e:	10a4      	asrs	r4, r4, #2
 8011f50:	2600      	movs	r6, #0
 8011f52:	42a6      	cmp	r6, r4
 8011f54:	d105      	bne.n	8011f62 <__libc_init_array+0x2e>
 8011f56:	bd70      	pop	{r4, r5, r6, pc}
 8011f58:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f5c:	4798      	blx	r3
 8011f5e:	3601      	adds	r6, #1
 8011f60:	e7ee      	b.n	8011f40 <__libc_init_array+0xc>
 8011f62:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f66:	4798      	blx	r3
 8011f68:	3601      	adds	r6, #1
 8011f6a:	e7f2      	b.n	8011f52 <__libc_init_array+0x1e>
 8011f6c:	08017f88 	.word	0x08017f88
 8011f70:	08017f88 	.word	0x08017f88
 8011f74:	08017f88 	.word	0x08017f88
 8011f78:	08017f8c 	.word	0x08017f8c

08011f7c <localtime>:
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	4b0b      	ldr	r3, [pc, #44]	; (8011fac <localtime+0x30>)
 8011f80:	681d      	ldr	r5, [r3, #0]
 8011f82:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8011f84:	4604      	mov	r4, r0
 8011f86:	b953      	cbnz	r3, 8011f9e <localtime+0x22>
 8011f88:	2024      	movs	r0, #36	; 0x24
 8011f8a:	f000 f909 	bl	80121a0 <malloc>
 8011f8e:	4602      	mov	r2, r0
 8011f90:	63e8      	str	r0, [r5, #60]	; 0x3c
 8011f92:	b920      	cbnz	r0, 8011f9e <localtime+0x22>
 8011f94:	4b06      	ldr	r3, [pc, #24]	; (8011fb0 <localtime+0x34>)
 8011f96:	4807      	ldr	r0, [pc, #28]	; (8011fb4 <localtime+0x38>)
 8011f98:	2132      	movs	r1, #50	; 0x32
 8011f9a:	f001 fb8d 	bl	80136b8 <__assert_func>
 8011f9e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011fa6:	f000 b807 	b.w	8011fb8 <localtime_r>
 8011faa:	bf00      	nop
 8011fac:	20000020 	.word	0x20000020
 8011fb0:	080179d8 	.word	0x080179d8
 8011fb4:	080179ef 	.word	0x080179ef

08011fb8 <localtime_r>:
 8011fb8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8011fbc:	4680      	mov	r8, r0
 8011fbe:	9101      	str	r1, [sp, #4]
 8011fc0:	f002 fa7e 	bl	80144c0 <__gettzinfo>
 8011fc4:	9901      	ldr	r1, [sp, #4]
 8011fc6:	4605      	mov	r5, r0
 8011fc8:	4640      	mov	r0, r8
 8011fca:	f002 fa7d 	bl	80144c8 <gmtime_r>
 8011fce:	6943      	ldr	r3, [r0, #20]
 8011fd0:	0799      	lsls	r1, r3, #30
 8011fd2:	4604      	mov	r4, r0
 8011fd4:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8011fd8:	d105      	bne.n	8011fe6 <localtime_r+0x2e>
 8011fda:	2264      	movs	r2, #100	; 0x64
 8011fdc:	fb97 f3f2 	sdiv	r3, r7, r2
 8011fe0:	fb02 7313 	mls	r3, r2, r3, r7
 8011fe4:	bb73      	cbnz	r3, 8012044 <localtime_r+0x8c>
 8011fe6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011fea:	fb97 f6f3 	sdiv	r6, r7, r3
 8011fee:	fb03 7616 	mls	r6, r3, r6, r7
 8011ff2:	fab6 f386 	clz	r3, r6
 8011ff6:	095b      	lsrs	r3, r3, #5
 8011ff8:	4e67      	ldr	r6, [pc, #412]	; (8012198 <localtime_r+0x1e0>)
 8011ffa:	2230      	movs	r2, #48	; 0x30
 8011ffc:	fb02 6603 	mla	r6, r2, r3, r6
 8012000:	f001 f9c8 	bl	8013394 <__tz_lock>
 8012004:	f001 f9d2 	bl	80133ac <_tzset_unlocked>
 8012008:	4b64      	ldr	r3, [pc, #400]	; (801219c <localtime_r+0x1e4>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	b34b      	cbz	r3, 8012062 <localtime_r+0xaa>
 801200e:	686b      	ldr	r3, [r5, #4]
 8012010:	42bb      	cmp	r3, r7
 8012012:	d119      	bne.n	8012048 <localtime_r+0x90>
 8012014:	682f      	ldr	r7, [r5, #0]
 8012016:	e9d8 2300 	ldrd	r2, r3, [r8]
 801201a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 801201e:	b9df      	cbnz	r7, 8012058 <localtime_r+0xa0>
 8012020:	4282      	cmp	r2, r0
 8012022:	eb73 0101 	sbcs.w	r1, r3, r1
 8012026:	da23      	bge.n	8012070 <localtime_r+0xb8>
 8012028:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 801202c:	4282      	cmp	r2, r0
 801202e:	eb73 0701 	sbcs.w	r7, r3, r1
 8012032:	bfb4      	ite	lt
 8012034:	2701      	movlt	r7, #1
 8012036:	2700      	movge	r7, #0
 8012038:	4282      	cmp	r2, r0
 801203a:	418b      	sbcs	r3, r1
 801203c:	6227      	str	r7, [r4, #32]
 801203e:	db19      	blt.n	8012074 <localtime_r+0xbc>
 8012040:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8012042:	e018      	b.n	8012076 <localtime_r+0xbe>
 8012044:	2301      	movs	r3, #1
 8012046:	e7d7      	b.n	8011ff8 <localtime_r+0x40>
 8012048:	4638      	mov	r0, r7
 801204a:	f001 f8f9 	bl	8013240 <__tzcalc_limits>
 801204e:	2800      	cmp	r0, #0
 8012050:	d1e0      	bne.n	8012014 <localtime_r+0x5c>
 8012052:	f04f 33ff 	mov.w	r3, #4294967295
 8012056:	e004      	b.n	8012062 <localtime_r+0xaa>
 8012058:	4282      	cmp	r2, r0
 801205a:	eb73 0101 	sbcs.w	r1, r3, r1
 801205e:	da02      	bge.n	8012066 <localtime_r+0xae>
 8012060:	2300      	movs	r3, #0
 8012062:	6223      	str	r3, [r4, #32]
 8012064:	e7ec      	b.n	8012040 <localtime_r+0x88>
 8012066:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 801206a:	4282      	cmp	r2, r0
 801206c:	418b      	sbcs	r3, r1
 801206e:	daf7      	bge.n	8012060 <localtime_r+0xa8>
 8012070:	2301      	movs	r3, #1
 8012072:	6223      	str	r3, [r4, #32]
 8012074:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8012076:	6861      	ldr	r1, [r4, #4]
 8012078:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 801207c:	203c      	movs	r0, #60	; 0x3c
 801207e:	fb93 f5f2 	sdiv	r5, r3, r2
 8012082:	fb02 3315 	mls	r3, r2, r5, r3
 8012086:	fb93 f2f0 	sdiv	r2, r3, r0
 801208a:	fb00 3012 	mls	r0, r0, r2, r3
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	1a89      	subs	r1, r1, r2
 8012092:	68a2      	ldr	r2, [r4, #8]
 8012094:	6061      	str	r1, [r4, #4]
 8012096:	1a1b      	subs	r3, r3, r0
 8012098:	1b52      	subs	r2, r2, r5
 801209a:	2b3b      	cmp	r3, #59	; 0x3b
 801209c:	6023      	str	r3, [r4, #0]
 801209e:	60a2      	str	r2, [r4, #8]
 80120a0:	dd35      	ble.n	801210e <localtime_r+0x156>
 80120a2:	3101      	adds	r1, #1
 80120a4:	6061      	str	r1, [r4, #4]
 80120a6:	3b3c      	subs	r3, #60	; 0x3c
 80120a8:	6023      	str	r3, [r4, #0]
 80120aa:	6863      	ldr	r3, [r4, #4]
 80120ac:	2b3b      	cmp	r3, #59	; 0x3b
 80120ae:	dd34      	ble.n	801211a <localtime_r+0x162>
 80120b0:	3201      	adds	r2, #1
 80120b2:	60a2      	str	r2, [r4, #8]
 80120b4:	3b3c      	subs	r3, #60	; 0x3c
 80120b6:	6063      	str	r3, [r4, #4]
 80120b8:	68a3      	ldr	r3, [r4, #8]
 80120ba:	2b17      	cmp	r3, #23
 80120bc:	dd33      	ble.n	8012126 <localtime_r+0x16e>
 80120be:	69e2      	ldr	r2, [r4, #28]
 80120c0:	3201      	adds	r2, #1
 80120c2:	61e2      	str	r2, [r4, #28]
 80120c4:	69a2      	ldr	r2, [r4, #24]
 80120c6:	3201      	adds	r2, #1
 80120c8:	2a06      	cmp	r2, #6
 80120ca:	bfc8      	it	gt
 80120cc:	2200      	movgt	r2, #0
 80120ce:	61a2      	str	r2, [r4, #24]
 80120d0:	68e2      	ldr	r2, [r4, #12]
 80120d2:	3b18      	subs	r3, #24
 80120d4:	3201      	adds	r2, #1
 80120d6:	60a3      	str	r3, [r4, #8]
 80120d8:	6923      	ldr	r3, [r4, #16]
 80120da:	60e2      	str	r2, [r4, #12]
 80120dc:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 80120e0:	428a      	cmp	r2, r1
 80120e2:	dd0e      	ble.n	8012102 <localtime_r+0x14a>
 80120e4:	2b0b      	cmp	r3, #11
 80120e6:	eba2 0201 	sub.w	r2, r2, r1
 80120ea:	60e2      	str	r2, [r4, #12]
 80120ec:	f103 0201 	add.w	r2, r3, #1
 80120f0:	bf09      	itett	eq
 80120f2:	6963      	ldreq	r3, [r4, #20]
 80120f4:	6122      	strne	r2, [r4, #16]
 80120f6:	2200      	moveq	r2, #0
 80120f8:	3301      	addeq	r3, #1
 80120fa:	bf02      	ittt	eq
 80120fc:	6122      	streq	r2, [r4, #16]
 80120fe:	6163      	streq	r3, [r4, #20]
 8012100:	61e2      	streq	r2, [r4, #28]
 8012102:	f001 f94d 	bl	80133a0 <__tz_unlock>
 8012106:	4620      	mov	r0, r4
 8012108:	b002      	add	sp, #8
 801210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801210e:	2b00      	cmp	r3, #0
 8012110:	dacb      	bge.n	80120aa <localtime_r+0xf2>
 8012112:	3901      	subs	r1, #1
 8012114:	6061      	str	r1, [r4, #4]
 8012116:	333c      	adds	r3, #60	; 0x3c
 8012118:	e7c6      	b.n	80120a8 <localtime_r+0xf0>
 801211a:	2b00      	cmp	r3, #0
 801211c:	dacc      	bge.n	80120b8 <localtime_r+0x100>
 801211e:	3a01      	subs	r2, #1
 8012120:	60a2      	str	r2, [r4, #8]
 8012122:	333c      	adds	r3, #60	; 0x3c
 8012124:	e7c7      	b.n	80120b6 <localtime_r+0xfe>
 8012126:	2b00      	cmp	r3, #0
 8012128:	daeb      	bge.n	8012102 <localtime_r+0x14a>
 801212a:	69e2      	ldr	r2, [r4, #28]
 801212c:	3a01      	subs	r2, #1
 801212e:	61e2      	str	r2, [r4, #28]
 8012130:	69a2      	ldr	r2, [r4, #24]
 8012132:	3a01      	subs	r2, #1
 8012134:	bf48      	it	mi
 8012136:	2206      	movmi	r2, #6
 8012138:	61a2      	str	r2, [r4, #24]
 801213a:	68e2      	ldr	r2, [r4, #12]
 801213c:	3318      	adds	r3, #24
 801213e:	3a01      	subs	r2, #1
 8012140:	60e2      	str	r2, [r4, #12]
 8012142:	60a3      	str	r3, [r4, #8]
 8012144:	2a00      	cmp	r2, #0
 8012146:	d1dc      	bne.n	8012102 <localtime_r+0x14a>
 8012148:	6923      	ldr	r3, [r4, #16]
 801214a:	3b01      	subs	r3, #1
 801214c:	d405      	bmi.n	801215a <localtime_r+0x1a2>
 801214e:	6123      	str	r3, [r4, #16]
 8012150:	6923      	ldr	r3, [r4, #16]
 8012152:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8012156:	60e3      	str	r3, [r4, #12]
 8012158:	e7d3      	b.n	8012102 <localtime_r+0x14a>
 801215a:	230b      	movs	r3, #11
 801215c:	6123      	str	r3, [r4, #16]
 801215e:	6963      	ldr	r3, [r4, #20]
 8012160:	1e5a      	subs	r2, r3, #1
 8012162:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8012166:	6162      	str	r2, [r4, #20]
 8012168:	079a      	lsls	r2, r3, #30
 801216a:	d105      	bne.n	8012178 <localtime_r+0x1c0>
 801216c:	2164      	movs	r1, #100	; 0x64
 801216e:	fb93 f2f1 	sdiv	r2, r3, r1
 8012172:	fb01 3212 	mls	r2, r1, r2, r3
 8012176:	b962      	cbnz	r2, 8012192 <localtime_r+0x1da>
 8012178:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801217c:	fb93 f1f2 	sdiv	r1, r3, r2
 8012180:	fb02 3311 	mls	r3, r2, r1, r3
 8012184:	fab3 f383 	clz	r3, r3
 8012188:	095b      	lsrs	r3, r3, #5
 801218a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801218e:	61e3      	str	r3, [r4, #28]
 8012190:	e7de      	b.n	8012150 <localtime_r+0x198>
 8012192:	2301      	movs	r3, #1
 8012194:	e7f9      	b.n	801218a <localtime_r+0x1d2>
 8012196:	bf00      	nop
 8012198:	08017aac 	.word	0x08017aac
 801219c:	2000a7a4 	.word	0x2000a7a4

080121a0 <malloc>:
 80121a0:	4b02      	ldr	r3, [pc, #8]	; (80121ac <malloc+0xc>)
 80121a2:	4601      	mov	r1, r0
 80121a4:	6818      	ldr	r0, [r3, #0]
 80121a6:	f000 baff 	b.w	80127a8 <_malloc_r>
 80121aa:	bf00      	nop
 80121ac:	20000020 	.word	0x20000020

080121b0 <free>:
 80121b0:	4b02      	ldr	r3, [pc, #8]	; (80121bc <free+0xc>)
 80121b2:	4601      	mov	r1, r0
 80121b4:	6818      	ldr	r0, [r3, #0]
 80121b6:	f000 ba8b 	b.w	80126d0 <_free_r>
 80121ba:	bf00      	nop
 80121bc:	20000020 	.word	0x20000020

080121c0 <memcpy>:
 80121c0:	440a      	add	r2, r1
 80121c2:	4291      	cmp	r1, r2
 80121c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80121c8:	d100      	bne.n	80121cc <memcpy+0xc>
 80121ca:	4770      	bx	lr
 80121cc:	b510      	push	{r4, lr}
 80121ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121d6:	4291      	cmp	r1, r2
 80121d8:	d1f9      	bne.n	80121ce <memcpy+0xe>
 80121da:	bd10      	pop	{r4, pc}

080121dc <memset>:
 80121dc:	4402      	add	r2, r0
 80121de:	4603      	mov	r3, r0
 80121e0:	4293      	cmp	r3, r2
 80121e2:	d100      	bne.n	80121e6 <memset+0xa>
 80121e4:	4770      	bx	lr
 80121e6:	f803 1b01 	strb.w	r1, [r3], #1
 80121ea:	e7f9      	b.n	80121e0 <memset+0x4>

080121ec <validate_structure>:
 80121ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121ee:	6801      	ldr	r1, [r0, #0]
 80121f0:	293b      	cmp	r1, #59	; 0x3b
 80121f2:	4604      	mov	r4, r0
 80121f4:	d911      	bls.n	801221a <validate_structure+0x2e>
 80121f6:	223c      	movs	r2, #60	; 0x3c
 80121f8:	4668      	mov	r0, sp
 80121fa:	f001 fa7b 	bl	80136f4 <div>
 80121fe:	9a01      	ldr	r2, [sp, #4]
 8012200:	6863      	ldr	r3, [r4, #4]
 8012202:	9900      	ldr	r1, [sp, #0]
 8012204:	2a00      	cmp	r2, #0
 8012206:	440b      	add	r3, r1
 8012208:	6063      	str	r3, [r4, #4]
 801220a:	bfbb      	ittet	lt
 801220c:	323c      	addlt	r2, #60	; 0x3c
 801220e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012212:	6022      	strge	r2, [r4, #0]
 8012214:	6022      	strlt	r2, [r4, #0]
 8012216:	bfb8      	it	lt
 8012218:	6063      	strlt	r3, [r4, #4]
 801221a:	6861      	ldr	r1, [r4, #4]
 801221c:	293b      	cmp	r1, #59	; 0x3b
 801221e:	d911      	bls.n	8012244 <validate_structure+0x58>
 8012220:	223c      	movs	r2, #60	; 0x3c
 8012222:	4668      	mov	r0, sp
 8012224:	f001 fa66 	bl	80136f4 <div>
 8012228:	9a01      	ldr	r2, [sp, #4]
 801222a:	68a3      	ldr	r3, [r4, #8]
 801222c:	9900      	ldr	r1, [sp, #0]
 801222e:	2a00      	cmp	r2, #0
 8012230:	440b      	add	r3, r1
 8012232:	60a3      	str	r3, [r4, #8]
 8012234:	bfbb      	ittet	lt
 8012236:	323c      	addlt	r2, #60	; 0x3c
 8012238:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801223c:	6062      	strge	r2, [r4, #4]
 801223e:	6062      	strlt	r2, [r4, #4]
 8012240:	bfb8      	it	lt
 8012242:	60a3      	strlt	r3, [r4, #8]
 8012244:	68a1      	ldr	r1, [r4, #8]
 8012246:	2917      	cmp	r1, #23
 8012248:	d911      	bls.n	801226e <validate_structure+0x82>
 801224a:	2218      	movs	r2, #24
 801224c:	4668      	mov	r0, sp
 801224e:	f001 fa51 	bl	80136f4 <div>
 8012252:	9a01      	ldr	r2, [sp, #4]
 8012254:	68e3      	ldr	r3, [r4, #12]
 8012256:	9900      	ldr	r1, [sp, #0]
 8012258:	2a00      	cmp	r2, #0
 801225a:	440b      	add	r3, r1
 801225c:	60e3      	str	r3, [r4, #12]
 801225e:	bfbb      	ittet	lt
 8012260:	3218      	addlt	r2, #24
 8012262:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012266:	60a2      	strge	r2, [r4, #8]
 8012268:	60a2      	strlt	r2, [r4, #8]
 801226a:	bfb8      	it	lt
 801226c:	60e3      	strlt	r3, [r4, #12]
 801226e:	6921      	ldr	r1, [r4, #16]
 8012270:	290b      	cmp	r1, #11
 8012272:	d911      	bls.n	8012298 <validate_structure+0xac>
 8012274:	220c      	movs	r2, #12
 8012276:	4668      	mov	r0, sp
 8012278:	f001 fa3c 	bl	80136f4 <div>
 801227c:	9a01      	ldr	r2, [sp, #4]
 801227e:	6963      	ldr	r3, [r4, #20]
 8012280:	9900      	ldr	r1, [sp, #0]
 8012282:	2a00      	cmp	r2, #0
 8012284:	440b      	add	r3, r1
 8012286:	6163      	str	r3, [r4, #20]
 8012288:	bfbb      	ittet	lt
 801228a:	320c      	addlt	r2, #12
 801228c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8012290:	6122      	strge	r2, [r4, #16]
 8012292:	6122      	strlt	r2, [r4, #16]
 8012294:	bfb8      	it	lt
 8012296:	6163      	strlt	r3, [r4, #20]
 8012298:	6963      	ldr	r3, [r4, #20]
 801229a:	0798      	lsls	r0, r3, #30
 801229c:	d120      	bne.n	80122e0 <validate_structure+0xf4>
 801229e:	2164      	movs	r1, #100	; 0x64
 80122a0:	fb93 f2f1 	sdiv	r2, r3, r1
 80122a4:	fb01 3212 	mls	r2, r1, r2, r3
 80122a8:	b9e2      	cbnz	r2, 80122e4 <validate_structure+0xf8>
 80122aa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80122ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80122b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80122b6:	fb02 3311 	mls	r3, r2, r1, r3
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	bf14      	ite	ne
 80122be:	231c      	movne	r3, #28
 80122c0:	231d      	moveq	r3, #29
 80122c2:	68e2      	ldr	r2, [r4, #12]
 80122c4:	2a00      	cmp	r2, #0
 80122c6:	dc0f      	bgt.n	80122e8 <validate_structure+0xfc>
 80122c8:	4f33      	ldr	r7, [pc, #204]	; (8012398 <validate_structure+0x1ac>)
 80122ca:	260b      	movs	r6, #11
 80122cc:	2064      	movs	r0, #100	; 0x64
 80122ce:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80122d2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80122d6:	f1bc 0f00 	cmp.w	ip, #0
 80122da:	dd31      	ble.n	8012340 <validate_structure+0x154>
 80122dc:	b003      	add	sp, #12
 80122de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122e0:	231c      	movs	r3, #28
 80122e2:	e7ee      	b.n	80122c2 <validate_structure+0xd6>
 80122e4:	231d      	movs	r3, #29
 80122e6:	e7ec      	b.n	80122c2 <validate_structure+0xd6>
 80122e8:	4e2b      	ldr	r6, [pc, #172]	; (8012398 <validate_structure+0x1ac>)
 80122ea:	2700      	movs	r7, #0
 80122ec:	2064      	movs	r0, #100	; 0x64
 80122ee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80122f2:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 80122f6:	2a01      	cmp	r2, #1
 80122f8:	bf14      	ite	ne
 80122fa:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 80122fe:	469c      	moveq	ip, r3
 8012300:	4561      	cmp	r1, ip
 8012302:	ddeb      	ble.n	80122dc <validate_structure+0xf0>
 8012304:	3201      	adds	r2, #1
 8012306:	eba1 010c 	sub.w	r1, r1, ip
 801230a:	2a0c      	cmp	r2, #12
 801230c:	60e1      	str	r1, [r4, #12]
 801230e:	6122      	str	r2, [r4, #16]
 8012310:	d1ef      	bne.n	80122f2 <validate_structure+0x106>
 8012312:	6963      	ldr	r3, [r4, #20]
 8012314:	1c5a      	adds	r2, r3, #1
 8012316:	0791      	lsls	r1, r2, #30
 8012318:	e9c4 7204 	strd	r7, r2, [r4, #16]
 801231c:	d137      	bne.n	801238e <validate_structure+0x1a2>
 801231e:	fb92 f1f0 	sdiv	r1, r2, r0
 8012322:	fb00 2211 	mls	r2, r0, r1, r2
 8012326:	2a00      	cmp	r2, #0
 8012328:	d133      	bne.n	8012392 <validate_structure+0x1a6>
 801232a:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 801232e:	fb93 f2f5 	sdiv	r2, r3, r5
 8012332:	fb05 3312 	mls	r3, r5, r2, r3
 8012336:	2b00      	cmp	r3, #0
 8012338:	bf14      	ite	ne
 801233a:	231c      	movne	r3, #28
 801233c:	231d      	moveq	r3, #29
 801233e:	e7d8      	b.n	80122f2 <validate_structure+0x106>
 8012340:	6921      	ldr	r1, [r4, #16]
 8012342:	3901      	subs	r1, #1
 8012344:	6121      	str	r1, [r4, #16]
 8012346:	3101      	adds	r1, #1
 8012348:	d114      	bne.n	8012374 <validate_structure+0x188>
 801234a:	6963      	ldr	r3, [r4, #20]
 801234c:	1e5a      	subs	r2, r3, #1
 801234e:	0791      	lsls	r1, r2, #30
 8012350:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8012354:	d117      	bne.n	8012386 <validate_structure+0x19a>
 8012356:	fb92 f1f0 	sdiv	r1, r2, r0
 801235a:	fb00 2211 	mls	r2, r0, r1, r2
 801235e:	b9a2      	cbnz	r2, 801238a <validate_structure+0x19e>
 8012360:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8012364:	fb93 f2f5 	sdiv	r2, r3, r5
 8012368:	fb05 3312 	mls	r3, r5, r2, r3
 801236c:	2b00      	cmp	r3, #0
 801236e:	bf14      	ite	ne
 8012370:	231c      	movne	r3, #28
 8012372:	231d      	moveq	r3, #29
 8012374:	6922      	ldr	r2, [r4, #16]
 8012376:	2a01      	cmp	r2, #1
 8012378:	bf14      	ite	ne
 801237a:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 801237e:	461a      	moveq	r2, r3
 8012380:	4462      	add	r2, ip
 8012382:	60e2      	str	r2, [r4, #12]
 8012384:	e7a5      	b.n	80122d2 <validate_structure+0xe6>
 8012386:	231c      	movs	r3, #28
 8012388:	e7f4      	b.n	8012374 <validate_structure+0x188>
 801238a:	231d      	movs	r3, #29
 801238c:	e7f2      	b.n	8012374 <validate_structure+0x188>
 801238e:	231c      	movs	r3, #28
 8012390:	e7af      	b.n	80122f2 <validate_structure+0x106>
 8012392:	231d      	movs	r3, #29
 8012394:	e7ad      	b.n	80122f2 <validate_structure+0x106>
 8012396:	bf00      	nop
 8012398:	08017a4c 	.word	0x08017a4c

0801239c <mktime>:
 801239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a0:	b085      	sub	sp, #20
 80123a2:	4607      	mov	r7, r0
 80123a4:	f002 f88c 	bl	80144c0 <__gettzinfo>
 80123a8:	4681      	mov	r9, r0
 80123aa:	4638      	mov	r0, r7
 80123ac:	f7ff ff1e 	bl	80121ec <validate_structure>
 80123b0:	e9d7 4000 	ldrd	r4, r0, [r7]
 80123b4:	233c      	movs	r3, #60	; 0x3c
 80123b6:	fb03 4400 	mla	r4, r3, r0, r4
 80123ba:	68b8      	ldr	r0, [r7, #8]
 80123bc:	4abc      	ldr	r2, [pc, #752]	; (80126b0 <mktime+0x314>)
 80123be:	697e      	ldr	r6, [r7, #20]
 80123c0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80123c4:	fb03 4400 	mla	r4, r3, r0, r4
 80123c8:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80123cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80123d0:	3d01      	subs	r5, #1
 80123d2:	2b01      	cmp	r3, #1
 80123d4:	4415      	add	r5, r2
 80123d6:	dd11      	ble.n	80123fc <mktime+0x60>
 80123d8:	07b1      	lsls	r1, r6, #30
 80123da:	d10f      	bne.n	80123fc <mktime+0x60>
 80123dc:	2264      	movs	r2, #100	; 0x64
 80123de:	fb96 f3f2 	sdiv	r3, r6, r2
 80123e2:	fb02 6313 	mls	r3, r2, r3, r6
 80123e6:	b943      	cbnz	r3, 80123fa <mktime+0x5e>
 80123e8:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80123ec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80123f0:	fb93 f1f2 	sdiv	r1, r3, r2
 80123f4:	fb02 3311 	mls	r3, r2, r1, r3
 80123f8:	b903      	cbnz	r3, 80123fc <mktime+0x60>
 80123fa:	3501      	adds	r5, #1
 80123fc:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8012400:	3310      	adds	r3, #16
 8012402:	f644 6220 	movw	r2, #20000	; 0x4e20
 8012406:	4293      	cmp	r3, r2
 8012408:	61fd      	str	r5, [r7, #28]
 801240a:	f200 815d 	bhi.w	80126c8 <mktime+0x32c>
 801240e:	2e46      	cmp	r6, #70	; 0x46
 8012410:	dd71      	ble.n	80124f6 <mktime+0x15a>
 8012412:	2346      	movs	r3, #70	; 0x46
 8012414:	f240 1c6d 	movw	ip, #365	; 0x16d
 8012418:	2164      	movs	r1, #100	; 0x64
 801241a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 801241e:	079a      	lsls	r2, r3, #30
 8012420:	d163      	bne.n	80124ea <mktime+0x14e>
 8012422:	fb93 f2f1 	sdiv	r2, r3, r1
 8012426:	fb01 3212 	mls	r2, r1, r2, r3
 801242a:	2a00      	cmp	r2, #0
 801242c:	d160      	bne.n	80124f0 <mktime+0x154>
 801242e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012432:	fb92 fef0 	sdiv	lr, r2, r0
 8012436:	fb00 221e 	mls	r2, r0, lr, r2
 801243a:	2a00      	cmp	r2, #0
 801243c:	bf14      	ite	ne
 801243e:	4662      	movne	r2, ip
 8012440:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012444:	3301      	adds	r3, #1
 8012446:	429e      	cmp	r6, r3
 8012448:	4415      	add	r5, r2
 801244a:	d1e8      	bne.n	801241e <mktime+0x82>
 801244c:	4b99      	ldr	r3, [pc, #612]	; (80126b4 <mktime+0x318>)
 801244e:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8012452:	fbc5 4803 	smlal	r4, r8, r5, r3
 8012456:	f000 ff9d 	bl	8013394 <__tz_lock>
 801245a:	f000 ffa7 	bl	80133ac <_tzset_unlocked>
 801245e:	4b96      	ldr	r3, [pc, #600]	; (80126b8 <mktime+0x31c>)
 8012460:	f8d3 b000 	ldr.w	fp, [r3]
 8012464:	f1bb 0f00 	cmp.w	fp, #0
 8012468:	d039      	beq.n	80124de <mktime+0x142>
 801246a:	f8d7 b020 	ldr.w	fp, [r7, #32]
 801246e:	6978      	ldr	r0, [r7, #20]
 8012470:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8012474:	f1bb 0f01 	cmp.w	fp, #1
 8012478:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 801247c:	46da      	mov	sl, fp
 801247e:	bfa8      	it	ge
 8012480:	f04f 0a01 	movge.w	sl, #1
 8012484:	4283      	cmp	r3, r0
 8012486:	d178      	bne.n	801257a <mktime+0x1de>
 8012488:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 801248c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012490:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8012494:	1a5b      	subs	r3, r3, r1
 8012496:	9302      	str	r3, [sp, #8]
 8012498:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 801249c:	9303      	str	r3, [sp, #12]
 801249e:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80124a2:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80124a6:	9301      	str	r3, [sp, #4]
 80124a8:	ebb3 0c02 	subs.w	ip, r3, r2
 80124ac:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80124b0:	4564      	cmp	r4, ip
 80124b2:	eb78 0300 	sbcs.w	r3, r8, r0
 80124b6:	da66      	bge.n	8012586 <mktime+0x1ea>
 80124b8:	f8d9 3000 	ldr.w	r3, [r9]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d06f      	beq.n	80125a0 <mktime+0x204>
 80124c0:	9b02      	ldr	r3, [sp, #8]
 80124c2:	429c      	cmp	r4, r3
 80124c4:	9b03      	ldr	r3, [sp, #12]
 80124c6:	eb78 0303 	sbcs.w	r3, r8, r3
 80124ca:	db03      	blt.n	80124d4 <mktime+0x138>
 80124cc:	4564      	cmp	r4, ip
 80124ce:	eb78 0300 	sbcs.w	r3, r8, r0
 80124d2:	db6b      	blt.n	80125ac <mktime+0x210>
 80124d4:	f1bb 0f00 	cmp.w	fp, #0
 80124d8:	f04f 0b00 	mov.w	fp, #0
 80124dc:	da6b      	bge.n	80125b6 <mktime+0x21a>
 80124de:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 80124e2:	190c      	adds	r4, r1, r4
 80124e4:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 80124e8:	e0a9      	b.n	801263e <mktime+0x2a2>
 80124ea:	f240 126d 	movw	r2, #365	; 0x16d
 80124ee:	e7a9      	b.n	8012444 <mktime+0xa8>
 80124f0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80124f4:	e7a6      	b.n	8012444 <mktime+0xa8>
 80124f6:	d0a9      	beq.n	801244c <mktime+0xb0>
 80124f8:	2345      	movs	r3, #69	; 0x45
 80124fa:	f240 1c6d 	movw	ip, #365	; 0x16d
 80124fe:	2164      	movs	r1, #100	; 0x64
 8012500:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8012504:	e012      	b.n	801252c <mktime+0x190>
 8012506:	bb62      	cbnz	r2, 8012562 <mktime+0x1c6>
 8012508:	fb93 f2f1 	sdiv	r2, r3, r1
 801250c:	fb01 3212 	mls	r2, r1, r2, r3
 8012510:	bb52      	cbnz	r2, 8012568 <mktime+0x1cc>
 8012512:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8012516:	fb92 fef0 	sdiv	lr, r2, r0
 801251a:	fb00 221e 	mls	r2, r0, lr, r2
 801251e:	2a00      	cmp	r2, #0
 8012520:	bf14      	ite	ne
 8012522:	4662      	movne	r2, ip
 8012524:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8012528:	1aad      	subs	r5, r5, r2
 801252a:	3b01      	subs	r3, #1
 801252c:	429e      	cmp	r6, r3
 801252e:	f003 0203 	and.w	r2, r3, #3
 8012532:	dbe8      	blt.n	8012506 <mktime+0x16a>
 8012534:	b9da      	cbnz	r2, 801256e <mktime+0x1d2>
 8012536:	2264      	movs	r2, #100	; 0x64
 8012538:	fb96 f3f2 	sdiv	r3, r6, r2
 801253c:	fb02 6313 	mls	r3, r2, r3, r6
 8012540:	b9c3      	cbnz	r3, 8012574 <mktime+0x1d8>
 8012542:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8012546:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801254a:	fb93 f1f2 	sdiv	r1, r3, r2
 801254e:	fb02 3311 	mls	r3, r2, r1, r3
 8012552:	2b00      	cmp	r3, #0
 8012554:	f240 136d 	movw	r3, #365	; 0x16d
 8012558:	bf08      	it	eq
 801255a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 801255e:	1aed      	subs	r5, r5, r3
 8012560:	e774      	b.n	801244c <mktime+0xb0>
 8012562:	f240 126d 	movw	r2, #365	; 0x16d
 8012566:	e7df      	b.n	8012528 <mktime+0x18c>
 8012568:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801256c:	e7dc      	b.n	8012528 <mktime+0x18c>
 801256e:	f240 136d 	movw	r3, #365	; 0x16d
 8012572:	e7f4      	b.n	801255e <mktime+0x1c2>
 8012574:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8012578:	e7f1      	b.n	801255e <mktime+0x1c2>
 801257a:	f000 fe61 	bl	8013240 <__tzcalc_limits>
 801257e:	2800      	cmp	r0, #0
 8012580:	d182      	bne.n	8012488 <mktime+0xec>
 8012582:	46d3      	mov	fp, sl
 8012584:	e050      	b.n	8012628 <mktime+0x28c>
 8012586:	9b01      	ldr	r3, [sp, #4]
 8012588:	1a5b      	subs	r3, r3, r1
 801258a:	9301      	str	r3, [sp, #4]
 801258c:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8012590:	eb6e 0e03 	sbc.w	lr, lr, r3
 8012594:	9b01      	ldr	r3, [sp, #4]
 8012596:	429c      	cmp	r4, r3
 8012598:	eb78 030e 	sbcs.w	r3, r8, lr
 801259c:	dbf1      	blt.n	8012582 <mktime+0x1e6>
 801259e:	e78b      	b.n	80124b8 <mktime+0x11c>
 80125a0:	9b02      	ldr	r3, [sp, #8]
 80125a2:	429c      	cmp	r4, r3
 80125a4:	9b03      	ldr	r3, [sp, #12]
 80125a6:	eb78 0303 	sbcs.w	r3, r8, r3
 80125aa:	db8f      	blt.n	80124cc <mktime+0x130>
 80125ac:	f1bb 0f00 	cmp.w	fp, #0
 80125b0:	db3e      	blt.n	8012630 <mktime+0x294>
 80125b2:	f04f 0b01 	mov.w	fp, #1
 80125b6:	ea8a 0a0b 	eor.w	sl, sl, fp
 80125ba:	f1ba 0f01 	cmp.w	sl, #1
 80125be:	d133      	bne.n	8012628 <mktime+0x28c>
 80125c0:	f1bb 0f00 	cmp.w	fp, #0
 80125c4:	d04e      	beq.n	8012664 <mktime+0x2c8>
 80125c6:	1a52      	subs	r2, r2, r1
 80125c8:	683b      	ldr	r3, [r7, #0]
 80125ca:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80125ce:	4413      	add	r3, r2
 80125d0:	1914      	adds	r4, r2, r4
 80125d2:	603b      	str	r3, [r7, #0]
 80125d4:	4638      	mov	r0, r7
 80125d6:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80125da:	f7ff fe07 	bl	80121ec <validate_structure>
 80125de:	68fa      	ldr	r2, [r7, #12]
 80125e0:	ebb2 020a 	subs.w	r2, r2, sl
 80125e4:	d020      	beq.n	8012628 <mktime+0x28c>
 80125e6:	2a01      	cmp	r2, #1
 80125e8:	dc3e      	bgt.n	8012668 <mktime+0x2cc>
 80125ea:	1c90      	adds	r0, r2, #2
 80125ec:	bfd8      	it	le
 80125ee:	2201      	movle	r2, #1
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	18d3      	adds	r3, r2, r3
 80125f4:	4415      	add	r5, r2
 80125f6:	d540      	bpl.n	801267a <mktime+0x2de>
 80125f8:	1e73      	subs	r3, r6, #1
 80125fa:	0799      	lsls	r1, r3, #30
 80125fc:	d137      	bne.n	801266e <mktime+0x2d2>
 80125fe:	2264      	movs	r2, #100	; 0x64
 8012600:	fb93 f1f2 	sdiv	r1, r3, r2
 8012604:	fb02 3311 	mls	r3, r2, r1, r3
 8012608:	bba3      	cbnz	r3, 8012674 <mktime+0x2d8>
 801260a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801260e:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8012612:	fb96 f2f3 	sdiv	r2, r6, r3
 8012616:	fb03 6612 	mls	r6, r3, r2, r6
 801261a:	2e00      	cmp	r6, #0
 801261c:	f240 136d 	movw	r3, #365	; 0x16d
 8012620:	bf18      	it	ne
 8012622:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8012626:	61fb      	str	r3, [r7, #28]
 8012628:	f1bb 0f01 	cmp.w	fp, #1
 801262c:	f47f af57 	bne.w	80124de <mktime+0x142>
 8012630:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8012634:	190c      	adds	r4, r1, r4
 8012636:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 801263a:	f04f 0b01 	mov.w	fp, #1
 801263e:	f000 feaf 	bl	80133a0 <__tz_unlock>
 8012642:	3504      	adds	r5, #4
 8012644:	2307      	movs	r3, #7
 8012646:	fb95 f3f3 	sdiv	r3, r5, r3
 801264a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801264e:	1aed      	subs	r5, r5, r3
 8012650:	bf48      	it	mi
 8012652:	3507      	addmi	r5, #7
 8012654:	f8c7 b020 	str.w	fp, [r7, #32]
 8012658:	61bd      	str	r5, [r7, #24]
 801265a:	4620      	mov	r0, r4
 801265c:	4641      	mov	r1, r8
 801265e:	b005      	add	sp, #20
 8012660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012664:	1a8a      	subs	r2, r1, r2
 8012666:	e7af      	b.n	80125c8 <mktime+0x22c>
 8012668:	f04f 32ff 	mov.w	r2, #4294967295
 801266c:	e7c0      	b.n	80125f0 <mktime+0x254>
 801266e:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8012672:	e7d8      	b.n	8012626 <mktime+0x28a>
 8012674:	f240 136d 	movw	r3, #365	; 0x16d
 8012678:	e7d5      	b.n	8012626 <mktime+0x28a>
 801267a:	07b2      	lsls	r2, r6, #30
 801267c:	d11e      	bne.n	80126bc <mktime+0x320>
 801267e:	2164      	movs	r1, #100	; 0x64
 8012680:	fb96 f2f1 	sdiv	r2, r6, r1
 8012684:	fb01 6212 	mls	r2, r1, r2, r6
 8012688:	b9da      	cbnz	r2, 80126c2 <mktime+0x326>
 801268a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801268e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8012692:	fb96 f1f2 	sdiv	r1, r6, r2
 8012696:	fb02 6611 	mls	r6, r2, r1, r6
 801269a:	2e00      	cmp	r6, #0
 801269c:	f240 126d 	movw	r2, #365	; 0x16d
 80126a0:	bf08      	it	eq
 80126a2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80126a6:	4293      	cmp	r3, r2
 80126a8:	bfa8      	it	ge
 80126aa:	1a9b      	subge	r3, r3, r2
 80126ac:	e7bb      	b.n	8012626 <mktime+0x28a>
 80126ae:	bf00      	nop
 80126b0:	08017a7c 	.word	0x08017a7c
 80126b4:	00015180 	.word	0x00015180
 80126b8:	2000a7a4 	.word	0x2000a7a4
 80126bc:	f240 126d 	movw	r2, #365	; 0x16d
 80126c0:	e7f1      	b.n	80126a6 <mktime+0x30a>
 80126c2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80126c6:	e7ee      	b.n	80126a6 <mktime+0x30a>
 80126c8:	f04f 34ff 	mov.w	r4, #4294967295
 80126cc:	46a0      	mov	r8, r4
 80126ce:	e7c4      	b.n	801265a <mktime+0x2be>

080126d0 <_free_r>:
 80126d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80126d2:	2900      	cmp	r1, #0
 80126d4:	d044      	beq.n	8012760 <_free_r+0x90>
 80126d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80126da:	9001      	str	r0, [sp, #4]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	f1a1 0404 	sub.w	r4, r1, #4
 80126e2:	bfb8      	it	lt
 80126e4:	18e4      	addlt	r4, r4, r3
 80126e6:	f001 ffa5 	bl	8014634 <__malloc_lock>
 80126ea:	4a1e      	ldr	r2, [pc, #120]	; (8012764 <_free_r+0x94>)
 80126ec:	9801      	ldr	r0, [sp, #4]
 80126ee:	6813      	ldr	r3, [r2, #0]
 80126f0:	b933      	cbnz	r3, 8012700 <_free_r+0x30>
 80126f2:	6063      	str	r3, [r4, #4]
 80126f4:	6014      	str	r4, [r2, #0]
 80126f6:	b003      	add	sp, #12
 80126f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126fc:	f001 bfa0 	b.w	8014640 <__malloc_unlock>
 8012700:	42a3      	cmp	r3, r4
 8012702:	d908      	bls.n	8012716 <_free_r+0x46>
 8012704:	6825      	ldr	r5, [r4, #0]
 8012706:	1961      	adds	r1, r4, r5
 8012708:	428b      	cmp	r3, r1
 801270a:	bf01      	itttt	eq
 801270c:	6819      	ldreq	r1, [r3, #0]
 801270e:	685b      	ldreq	r3, [r3, #4]
 8012710:	1949      	addeq	r1, r1, r5
 8012712:	6021      	streq	r1, [r4, #0]
 8012714:	e7ed      	b.n	80126f2 <_free_r+0x22>
 8012716:	461a      	mov	r2, r3
 8012718:	685b      	ldr	r3, [r3, #4]
 801271a:	b10b      	cbz	r3, 8012720 <_free_r+0x50>
 801271c:	42a3      	cmp	r3, r4
 801271e:	d9fa      	bls.n	8012716 <_free_r+0x46>
 8012720:	6811      	ldr	r1, [r2, #0]
 8012722:	1855      	adds	r5, r2, r1
 8012724:	42a5      	cmp	r5, r4
 8012726:	d10b      	bne.n	8012740 <_free_r+0x70>
 8012728:	6824      	ldr	r4, [r4, #0]
 801272a:	4421      	add	r1, r4
 801272c:	1854      	adds	r4, r2, r1
 801272e:	42a3      	cmp	r3, r4
 8012730:	6011      	str	r1, [r2, #0]
 8012732:	d1e0      	bne.n	80126f6 <_free_r+0x26>
 8012734:	681c      	ldr	r4, [r3, #0]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	6053      	str	r3, [r2, #4]
 801273a:	4421      	add	r1, r4
 801273c:	6011      	str	r1, [r2, #0]
 801273e:	e7da      	b.n	80126f6 <_free_r+0x26>
 8012740:	d902      	bls.n	8012748 <_free_r+0x78>
 8012742:	230c      	movs	r3, #12
 8012744:	6003      	str	r3, [r0, #0]
 8012746:	e7d6      	b.n	80126f6 <_free_r+0x26>
 8012748:	6825      	ldr	r5, [r4, #0]
 801274a:	1961      	adds	r1, r4, r5
 801274c:	428b      	cmp	r3, r1
 801274e:	bf04      	itt	eq
 8012750:	6819      	ldreq	r1, [r3, #0]
 8012752:	685b      	ldreq	r3, [r3, #4]
 8012754:	6063      	str	r3, [r4, #4]
 8012756:	bf04      	itt	eq
 8012758:	1949      	addeq	r1, r1, r5
 801275a:	6021      	streq	r1, [r4, #0]
 801275c:	6054      	str	r4, [r2, #4]
 801275e:	e7ca      	b.n	80126f6 <_free_r+0x26>
 8012760:	b003      	add	sp, #12
 8012762:	bd30      	pop	{r4, r5, pc}
 8012764:	2000a780 	.word	0x2000a780

08012768 <sbrk_aligned>:
 8012768:	b570      	push	{r4, r5, r6, lr}
 801276a:	4e0e      	ldr	r6, [pc, #56]	; (80127a4 <sbrk_aligned+0x3c>)
 801276c:	460c      	mov	r4, r1
 801276e:	6831      	ldr	r1, [r6, #0]
 8012770:	4605      	mov	r5, r0
 8012772:	b911      	cbnz	r1, 801277a <sbrk_aligned+0x12>
 8012774:	f000 fd34 	bl	80131e0 <_sbrk_r>
 8012778:	6030      	str	r0, [r6, #0]
 801277a:	4621      	mov	r1, r4
 801277c:	4628      	mov	r0, r5
 801277e:	f000 fd2f 	bl	80131e0 <_sbrk_r>
 8012782:	1c43      	adds	r3, r0, #1
 8012784:	d00a      	beq.n	801279c <sbrk_aligned+0x34>
 8012786:	1cc4      	adds	r4, r0, #3
 8012788:	f024 0403 	bic.w	r4, r4, #3
 801278c:	42a0      	cmp	r0, r4
 801278e:	d007      	beq.n	80127a0 <sbrk_aligned+0x38>
 8012790:	1a21      	subs	r1, r4, r0
 8012792:	4628      	mov	r0, r5
 8012794:	f000 fd24 	bl	80131e0 <_sbrk_r>
 8012798:	3001      	adds	r0, #1
 801279a:	d101      	bne.n	80127a0 <sbrk_aligned+0x38>
 801279c:	f04f 34ff 	mov.w	r4, #4294967295
 80127a0:	4620      	mov	r0, r4
 80127a2:	bd70      	pop	{r4, r5, r6, pc}
 80127a4:	2000a784 	.word	0x2000a784

080127a8 <_malloc_r>:
 80127a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127ac:	1ccd      	adds	r5, r1, #3
 80127ae:	f025 0503 	bic.w	r5, r5, #3
 80127b2:	3508      	adds	r5, #8
 80127b4:	2d0c      	cmp	r5, #12
 80127b6:	bf38      	it	cc
 80127b8:	250c      	movcc	r5, #12
 80127ba:	2d00      	cmp	r5, #0
 80127bc:	4607      	mov	r7, r0
 80127be:	db01      	blt.n	80127c4 <_malloc_r+0x1c>
 80127c0:	42a9      	cmp	r1, r5
 80127c2:	d905      	bls.n	80127d0 <_malloc_r+0x28>
 80127c4:	230c      	movs	r3, #12
 80127c6:	603b      	str	r3, [r7, #0]
 80127c8:	2600      	movs	r6, #0
 80127ca:	4630      	mov	r0, r6
 80127cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127d0:	4e2e      	ldr	r6, [pc, #184]	; (801288c <_malloc_r+0xe4>)
 80127d2:	f001 ff2f 	bl	8014634 <__malloc_lock>
 80127d6:	6833      	ldr	r3, [r6, #0]
 80127d8:	461c      	mov	r4, r3
 80127da:	bb34      	cbnz	r4, 801282a <_malloc_r+0x82>
 80127dc:	4629      	mov	r1, r5
 80127de:	4638      	mov	r0, r7
 80127e0:	f7ff ffc2 	bl	8012768 <sbrk_aligned>
 80127e4:	1c43      	adds	r3, r0, #1
 80127e6:	4604      	mov	r4, r0
 80127e8:	d14d      	bne.n	8012886 <_malloc_r+0xde>
 80127ea:	6834      	ldr	r4, [r6, #0]
 80127ec:	4626      	mov	r6, r4
 80127ee:	2e00      	cmp	r6, #0
 80127f0:	d140      	bne.n	8012874 <_malloc_r+0xcc>
 80127f2:	6823      	ldr	r3, [r4, #0]
 80127f4:	4631      	mov	r1, r6
 80127f6:	4638      	mov	r0, r7
 80127f8:	eb04 0803 	add.w	r8, r4, r3
 80127fc:	f000 fcf0 	bl	80131e0 <_sbrk_r>
 8012800:	4580      	cmp	r8, r0
 8012802:	d13a      	bne.n	801287a <_malloc_r+0xd2>
 8012804:	6821      	ldr	r1, [r4, #0]
 8012806:	3503      	adds	r5, #3
 8012808:	1a6d      	subs	r5, r5, r1
 801280a:	f025 0503 	bic.w	r5, r5, #3
 801280e:	3508      	adds	r5, #8
 8012810:	2d0c      	cmp	r5, #12
 8012812:	bf38      	it	cc
 8012814:	250c      	movcc	r5, #12
 8012816:	4629      	mov	r1, r5
 8012818:	4638      	mov	r0, r7
 801281a:	f7ff ffa5 	bl	8012768 <sbrk_aligned>
 801281e:	3001      	adds	r0, #1
 8012820:	d02b      	beq.n	801287a <_malloc_r+0xd2>
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	442b      	add	r3, r5
 8012826:	6023      	str	r3, [r4, #0]
 8012828:	e00e      	b.n	8012848 <_malloc_r+0xa0>
 801282a:	6822      	ldr	r2, [r4, #0]
 801282c:	1b52      	subs	r2, r2, r5
 801282e:	d41e      	bmi.n	801286e <_malloc_r+0xc6>
 8012830:	2a0b      	cmp	r2, #11
 8012832:	d916      	bls.n	8012862 <_malloc_r+0xba>
 8012834:	1961      	adds	r1, r4, r5
 8012836:	42a3      	cmp	r3, r4
 8012838:	6025      	str	r5, [r4, #0]
 801283a:	bf18      	it	ne
 801283c:	6059      	strne	r1, [r3, #4]
 801283e:	6863      	ldr	r3, [r4, #4]
 8012840:	bf08      	it	eq
 8012842:	6031      	streq	r1, [r6, #0]
 8012844:	5162      	str	r2, [r4, r5]
 8012846:	604b      	str	r3, [r1, #4]
 8012848:	4638      	mov	r0, r7
 801284a:	f104 060b 	add.w	r6, r4, #11
 801284e:	f001 fef7 	bl	8014640 <__malloc_unlock>
 8012852:	f026 0607 	bic.w	r6, r6, #7
 8012856:	1d23      	adds	r3, r4, #4
 8012858:	1af2      	subs	r2, r6, r3
 801285a:	d0b6      	beq.n	80127ca <_malloc_r+0x22>
 801285c:	1b9b      	subs	r3, r3, r6
 801285e:	50a3      	str	r3, [r4, r2]
 8012860:	e7b3      	b.n	80127ca <_malloc_r+0x22>
 8012862:	6862      	ldr	r2, [r4, #4]
 8012864:	42a3      	cmp	r3, r4
 8012866:	bf0c      	ite	eq
 8012868:	6032      	streq	r2, [r6, #0]
 801286a:	605a      	strne	r2, [r3, #4]
 801286c:	e7ec      	b.n	8012848 <_malloc_r+0xa0>
 801286e:	4623      	mov	r3, r4
 8012870:	6864      	ldr	r4, [r4, #4]
 8012872:	e7b2      	b.n	80127da <_malloc_r+0x32>
 8012874:	4634      	mov	r4, r6
 8012876:	6876      	ldr	r6, [r6, #4]
 8012878:	e7b9      	b.n	80127ee <_malloc_r+0x46>
 801287a:	230c      	movs	r3, #12
 801287c:	603b      	str	r3, [r7, #0]
 801287e:	4638      	mov	r0, r7
 8012880:	f001 fede 	bl	8014640 <__malloc_unlock>
 8012884:	e7a1      	b.n	80127ca <_malloc_r+0x22>
 8012886:	6025      	str	r5, [r4, #0]
 8012888:	e7de      	b.n	8012848 <_malloc_r+0xa0>
 801288a:	bf00      	nop
 801288c:	2000a780 	.word	0x2000a780

08012890 <__cvt>:
 8012890:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012894:	ec55 4b10 	vmov	r4, r5, d0
 8012898:	2d00      	cmp	r5, #0
 801289a:	460e      	mov	r6, r1
 801289c:	4619      	mov	r1, r3
 801289e:	462b      	mov	r3, r5
 80128a0:	bfbb      	ittet	lt
 80128a2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80128a6:	461d      	movlt	r5, r3
 80128a8:	2300      	movge	r3, #0
 80128aa:	232d      	movlt	r3, #45	; 0x2d
 80128ac:	700b      	strb	r3, [r1, #0]
 80128ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128b0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80128b4:	4691      	mov	r9, r2
 80128b6:	f023 0820 	bic.w	r8, r3, #32
 80128ba:	bfbc      	itt	lt
 80128bc:	4622      	movlt	r2, r4
 80128be:	4614      	movlt	r4, r2
 80128c0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80128c4:	d005      	beq.n	80128d2 <__cvt+0x42>
 80128c6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80128ca:	d100      	bne.n	80128ce <__cvt+0x3e>
 80128cc:	3601      	adds	r6, #1
 80128ce:	2102      	movs	r1, #2
 80128d0:	e000      	b.n	80128d4 <__cvt+0x44>
 80128d2:	2103      	movs	r1, #3
 80128d4:	ab03      	add	r3, sp, #12
 80128d6:	9301      	str	r3, [sp, #4]
 80128d8:	ab02      	add	r3, sp, #8
 80128da:	9300      	str	r3, [sp, #0]
 80128dc:	ec45 4b10 	vmov	d0, r4, r5
 80128e0:	4653      	mov	r3, sl
 80128e2:	4632      	mov	r2, r6
 80128e4:	f000 ffa8 	bl	8013838 <_dtoa_r>
 80128e8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80128ec:	4607      	mov	r7, r0
 80128ee:	d102      	bne.n	80128f6 <__cvt+0x66>
 80128f0:	f019 0f01 	tst.w	r9, #1
 80128f4:	d022      	beq.n	801293c <__cvt+0xac>
 80128f6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80128fa:	eb07 0906 	add.w	r9, r7, r6
 80128fe:	d110      	bne.n	8012922 <__cvt+0x92>
 8012900:	783b      	ldrb	r3, [r7, #0]
 8012902:	2b30      	cmp	r3, #48	; 0x30
 8012904:	d10a      	bne.n	801291c <__cvt+0x8c>
 8012906:	2200      	movs	r2, #0
 8012908:	2300      	movs	r3, #0
 801290a:	4620      	mov	r0, r4
 801290c:	4629      	mov	r1, r5
 801290e:	f7ee f8bd 	bl	8000a8c <__aeabi_dcmpeq>
 8012912:	b918      	cbnz	r0, 801291c <__cvt+0x8c>
 8012914:	f1c6 0601 	rsb	r6, r6, #1
 8012918:	f8ca 6000 	str.w	r6, [sl]
 801291c:	f8da 3000 	ldr.w	r3, [sl]
 8012920:	4499      	add	r9, r3
 8012922:	2200      	movs	r2, #0
 8012924:	2300      	movs	r3, #0
 8012926:	4620      	mov	r0, r4
 8012928:	4629      	mov	r1, r5
 801292a:	f7ee f8af 	bl	8000a8c <__aeabi_dcmpeq>
 801292e:	b108      	cbz	r0, 8012934 <__cvt+0xa4>
 8012930:	f8cd 900c 	str.w	r9, [sp, #12]
 8012934:	2230      	movs	r2, #48	; 0x30
 8012936:	9b03      	ldr	r3, [sp, #12]
 8012938:	454b      	cmp	r3, r9
 801293a:	d307      	bcc.n	801294c <__cvt+0xbc>
 801293c:	9b03      	ldr	r3, [sp, #12]
 801293e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012940:	1bdb      	subs	r3, r3, r7
 8012942:	4638      	mov	r0, r7
 8012944:	6013      	str	r3, [r2, #0]
 8012946:	b004      	add	sp, #16
 8012948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801294c:	1c59      	adds	r1, r3, #1
 801294e:	9103      	str	r1, [sp, #12]
 8012950:	701a      	strb	r2, [r3, #0]
 8012952:	e7f0      	b.n	8012936 <__cvt+0xa6>

08012954 <__exponent>:
 8012954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012956:	4603      	mov	r3, r0
 8012958:	2900      	cmp	r1, #0
 801295a:	bfb8      	it	lt
 801295c:	4249      	neglt	r1, r1
 801295e:	f803 2b02 	strb.w	r2, [r3], #2
 8012962:	bfb4      	ite	lt
 8012964:	222d      	movlt	r2, #45	; 0x2d
 8012966:	222b      	movge	r2, #43	; 0x2b
 8012968:	2909      	cmp	r1, #9
 801296a:	7042      	strb	r2, [r0, #1]
 801296c:	dd2a      	ble.n	80129c4 <__exponent+0x70>
 801296e:	f10d 0407 	add.w	r4, sp, #7
 8012972:	46a4      	mov	ip, r4
 8012974:	270a      	movs	r7, #10
 8012976:	46a6      	mov	lr, r4
 8012978:	460a      	mov	r2, r1
 801297a:	fb91 f6f7 	sdiv	r6, r1, r7
 801297e:	fb07 1516 	mls	r5, r7, r6, r1
 8012982:	3530      	adds	r5, #48	; 0x30
 8012984:	2a63      	cmp	r2, #99	; 0x63
 8012986:	f104 34ff 	add.w	r4, r4, #4294967295
 801298a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801298e:	4631      	mov	r1, r6
 8012990:	dcf1      	bgt.n	8012976 <__exponent+0x22>
 8012992:	3130      	adds	r1, #48	; 0x30
 8012994:	f1ae 0502 	sub.w	r5, lr, #2
 8012998:	f804 1c01 	strb.w	r1, [r4, #-1]
 801299c:	1c44      	adds	r4, r0, #1
 801299e:	4629      	mov	r1, r5
 80129a0:	4561      	cmp	r1, ip
 80129a2:	d30a      	bcc.n	80129ba <__exponent+0x66>
 80129a4:	f10d 0209 	add.w	r2, sp, #9
 80129a8:	eba2 020e 	sub.w	r2, r2, lr
 80129ac:	4565      	cmp	r5, ip
 80129ae:	bf88      	it	hi
 80129b0:	2200      	movhi	r2, #0
 80129b2:	4413      	add	r3, r2
 80129b4:	1a18      	subs	r0, r3, r0
 80129b6:	b003      	add	sp, #12
 80129b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80129be:	f804 2f01 	strb.w	r2, [r4, #1]!
 80129c2:	e7ed      	b.n	80129a0 <__exponent+0x4c>
 80129c4:	2330      	movs	r3, #48	; 0x30
 80129c6:	3130      	adds	r1, #48	; 0x30
 80129c8:	7083      	strb	r3, [r0, #2]
 80129ca:	70c1      	strb	r1, [r0, #3]
 80129cc:	1d03      	adds	r3, r0, #4
 80129ce:	e7f1      	b.n	80129b4 <__exponent+0x60>

080129d0 <_printf_float>:
 80129d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d4:	ed2d 8b02 	vpush	{d8}
 80129d8:	b08d      	sub	sp, #52	; 0x34
 80129da:	460c      	mov	r4, r1
 80129dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80129e0:	4616      	mov	r6, r2
 80129e2:	461f      	mov	r7, r3
 80129e4:	4605      	mov	r5, r0
 80129e6:	f001 fe1b 	bl	8014620 <_localeconv_r>
 80129ea:	f8d0 a000 	ldr.w	sl, [r0]
 80129ee:	4650      	mov	r0, sl
 80129f0:	f7ed fbc6 	bl	8000180 <strlen>
 80129f4:	2300      	movs	r3, #0
 80129f6:	930a      	str	r3, [sp, #40]	; 0x28
 80129f8:	6823      	ldr	r3, [r4, #0]
 80129fa:	9305      	str	r3, [sp, #20]
 80129fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012a00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012a04:	3307      	adds	r3, #7
 8012a06:	f023 0307 	bic.w	r3, r3, #7
 8012a0a:	f103 0208 	add.w	r2, r3, #8
 8012a0e:	f8c8 2000 	str.w	r2, [r8]
 8012a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012a1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012a1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012a22:	9307      	str	r3, [sp, #28]
 8012a24:	f8cd 8018 	str.w	r8, [sp, #24]
 8012a28:	ee08 0a10 	vmov	s16, r0
 8012a2c:	4b9f      	ldr	r3, [pc, #636]	; (8012cac <_printf_float+0x2dc>)
 8012a2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a32:	f04f 32ff 	mov.w	r2, #4294967295
 8012a36:	f7ee f85b 	bl	8000af0 <__aeabi_dcmpun>
 8012a3a:	bb88      	cbnz	r0, 8012aa0 <_printf_float+0xd0>
 8012a3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012a40:	4b9a      	ldr	r3, [pc, #616]	; (8012cac <_printf_float+0x2dc>)
 8012a42:	f04f 32ff 	mov.w	r2, #4294967295
 8012a46:	f7ee f835 	bl	8000ab4 <__aeabi_dcmple>
 8012a4a:	bb48      	cbnz	r0, 8012aa0 <_printf_float+0xd0>
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	2300      	movs	r3, #0
 8012a50:	4640      	mov	r0, r8
 8012a52:	4649      	mov	r1, r9
 8012a54:	f7ee f824 	bl	8000aa0 <__aeabi_dcmplt>
 8012a58:	b110      	cbz	r0, 8012a60 <_printf_float+0x90>
 8012a5a:	232d      	movs	r3, #45	; 0x2d
 8012a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012a60:	4b93      	ldr	r3, [pc, #588]	; (8012cb0 <_printf_float+0x2e0>)
 8012a62:	4894      	ldr	r0, [pc, #592]	; (8012cb4 <_printf_float+0x2e4>)
 8012a64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012a68:	bf94      	ite	ls
 8012a6a:	4698      	movls	r8, r3
 8012a6c:	4680      	movhi	r8, r0
 8012a6e:	2303      	movs	r3, #3
 8012a70:	6123      	str	r3, [r4, #16]
 8012a72:	9b05      	ldr	r3, [sp, #20]
 8012a74:	f023 0204 	bic.w	r2, r3, #4
 8012a78:	6022      	str	r2, [r4, #0]
 8012a7a:	f04f 0900 	mov.w	r9, #0
 8012a7e:	9700      	str	r7, [sp, #0]
 8012a80:	4633      	mov	r3, r6
 8012a82:	aa0b      	add	r2, sp, #44	; 0x2c
 8012a84:	4621      	mov	r1, r4
 8012a86:	4628      	mov	r0, r5
 8012a88:	f000 f9d8 	bl	8012e3c <_printf_common>
 8012a8c:	3001      	adds	r0, #1
 8012a8e:	f040 8090 	bne.w	8012bb2 <_printf_float+0x1e2>
 8012a92:	f04f 30ff 	mov.w	r0, #4294967295
 8012a96:	b00d      	add	sp, #52	; 0x34
 8012a98:	ecbd 8b02 	vpop	{d8}
 8012a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa0:	4642      	mov	r2, r8
 8012aa2:	464b      	mov	r3, r9
 8012aa4:	4640      	mov	r0, r8
 8012aa6:	4649      	mov	r1, r9
 8012aa8:	f7ee f822 	bl	8000af0 <__aeabi_dcmpun>
 8012aac:	b140      	cbz	r0, 8012ac0 <_printf_float+0xf0>
 8012aae:	464b      	mov	r3, r9
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	bfbc      	itt	lt
 8012ab4:	232d      	movlt	r3, #45	; 0x2d
 8012ab6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012aba:	487f      	ldr	r0, [pc, #508]	; (8012cb8 <_printf_float+0x2e8>)
 8012abc:	4b7f      	ldr	r3, [pc, #508]	; (8012cbc <_printf_float+0x2ec>)
 8012abe:	e7d1      	b.n	8012a64 <_printf_float+0x94>
 8012ac0:	6863      	ldr	r3, [r4, #4]
 8012ac2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012ac6:	9206      	str	r2, [sp, #24]
 8012ac8:	1c5a      	adds	r2, r3, #1
 8012aca:	d13f      	bne.n	8012b4c <_printf_float+0x17c>
 8012acc:	2306      	movs	r3, #6
 8012ace:	6063      	str	r3, [r4, #4]
 8012ad0:	9b05      	ldr	r3, [sp, #20]
 8012ad2:	6861      	ldr	r1, [r4, #4]
 8012ad4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012ad8:	2300      	movs	r3, #0
 8012ada:	9303      	str	r3, [sp, #12]
 8012adc:	ab0a      	add	r3, sp, #40	; 0x28
 8012ade:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012ae2:	ab09      	add	r3, sp, #36	; 0x24
 8012ae4:	ec49 8b10 	vmov	d0, r8, r9
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	6022      	str	r2, [r4, #0]
 8012aec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012af0:	4628      	mov	r0, r5
 8012af2:	f7ff fecd 	bl	8012890 <__cvt>
 8012af6:	9b06      	ldr	r3, [sp, #24]
 8012af8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012afa:	2b47      	cmp	r3, #71	; 0x47
 8012afc:	4680      	mov	r8, r0
 8012afe:	d108      	bne.n	8012b12 <_printf_float+0x142>
 8012b00:	1cc8      	adds	r0, r1, #3
 8012b02:	db02      	blt.n	8012b0a <_printf_float+0x13a>
 8012b04:	6863      	ldr	r3, [r4, #4]
 8012b06:	4299      	cmp	r1, r3
 8012b08:	dd41      	ble.n	8012b8e <_printf_float+0x1be>
 8012b0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8012b0e:	fa5f fb8b 	uxtb.w	fp, fp
 8012b12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012b16:	d820      	bhi.n	8012b5a <_printf_float+0x18a>
 8012b18:	3901      	subs	r1, #1
 8012b1a:	465a      	mov	r2, fp
 8012b1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012b20:	9109      	str	r1, [sp, #36]	; 0x24
 8012b22:	f7ff ff17 	bl	8012954 <__exponent>
 8012b26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b28:	1813      	adds	r3, r2, r0
 8012b2a:	2a01      	cmp	r2, #1
 8012b2c:	4681      	mov	r9, r0
 8012b2e:	6123      	str	r3, [r4, #16]
 8012b30:	dc02      	bgt.n	8012b38 <_printf_float+0x168>
 8012b32:	6822      	ldr	r2, [r4, #0]
 8012b34:	07d2      	lsls	r2, r2, #31
 8012b36:	d501      	bpl.n	8012b3c <_printf_float+0x16c>
 8012b38:	3301      	adds	r3, #1
 8012b3a:	6123      	str	r3, [r4, #16]
 8012b3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d09c      	beq.n	8012a7e <_printf_float+0xae>
 8012b44:	232d      	movs	r3, #45	; 0x2d
 8012b46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012b4a:	e798      	b.n	8012a7e <_printf_float+0xae>
 8012b4c:	9a06      	ldr	r2, [sp, #24]
 8012b4e:	2a47      	cmp	r2, #71	; 0x47
 8012b50:	d1be      	bne.n	8012ad0 <_printf_float+0x100>
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d1bc      	bne.n	8012ad0 <_printf_float+0x100>
 8012b56:	2301      	movs	r3, #1
 8012b58:	e7b9      	b.n	8012ace <_printf_float+0xfe>
 8012b5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012b5e:	d118      	bne.n	8012b92 <_printf_float+0x1c2>
 8012b60:	2900      	cmp	r1, #0
 8012b62:	6863      	ldr	r3, [r4, #4]
 8012b64:	dd0b      	ble.n	8012b7e <_printf_float+0x1ae>
 8012b66:	6121      	str	r1, [r4, #16]
 8012b68:	b913      	cbnz	r3, 8012b70 <_printf_float+0x1a0>
 8012b6a:	6822      	ldr	r2, [r4, #0]
 8012b6c:	07d0      	lsls	r0, r2, #31
 8012b6e:	d502      	bpl.n	8012b76 <_printf_float+0x1a6>
 8012b70:	3301      	adds	r3, #1
 8012b72:	440b      	add	r3, r1
 8012b74:	6123      	str	r3, [r4, #16]
 8012b76:	65a1      	str	r1, [r4, #88]	; 0x58
 8012b78:	f04f 0900 	mov.w	r9, #0
 8012b7c:	e7de      	b.n	8012b3c <_printf_float+0x16c>
 8012b7e:	b913      	cbnz	r3, 8012b86 <_printf_float+0x1b6>
 8012b80:	6822      	ldr	r2, [r4, #0]
 8012b82:	07d2      	lsls	r2, r2, #31
 8012b84:	d501      	bpl.n	8012b8a <_printf_float+0x1ba>
 8012b86:	3302      	adds	r3, #2
 8012b88:	e7f4      	b.n	8012b74 <_printf_float+0x1a4>
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	e7f2      	b.n	8012b74 <_printf_float+0x1a4>
 8012b8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b94:	4299      	cmp	r1, r3
 8012b96:	db05      	blt.n	8012ba4 <_printf_float+0x1d4>
 8012b98:	6823      	ldr	r3, [r4, #0]
 8012b9a:	6121      	str	r1, [r4, #16]
 8012b9c:	07d8      	lsls	r0, r3, #31
 8012b9e:	d5ea      	bpl.n	8012b76 <_printf_float+0x1a6>
 8012ba0:	1c4b      	adds	r3, r1, #1
 8012ba2:	e7e7      	b.n	8012b74 <_printf_float+0x1a4>
 8012ba4:	2900      	cmp	r1, #0
 8012ba6:	bfd4      	ite	le
 8012ba8:	f1c1 0202 	rsble	r2, r1, #2
 8012bac:	2201      	movgt	r2, #1
 8012bae:	4413      	add	r3, r2
 8012bb0:	e7e0      	b.n	8012b74 <_printf_float+0x1a4>
 8012bb2:	6823      	ldr	r3, [r4, #0]
 8012bb4:	055a      	lsls	r2, r3, #21
 8012bb6:	d407      	bmi.n	8012bc8 <_printf_float+0x1f8>
 8012bb8:	6923      	ldr	r3, [r4, #16]
 8012bba:	4642      	mov	r2, r8
 8012bbc:	4631      	mov	r1, r6
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	47b8      	blx	r7
 8012bc2:	3001      	adds	r0, #1
 8012bc4:	d12c      	bne.n	8012c20 <_printf_float+0x250>
 8012bc6:	e764      	b.n	8012a92 <_printf_float+0xc2>
 8012bc8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012bcc:	f240 80e0 	bls.w	8012d90 <_printf_float+0x3c0>
 8012bd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	f7ed ff58 	bl	8000a8c <__aeabi_dcmpeq>
 8012bdc:	2800      	cmp	r0, #0
 8012bde:	d034      	beq.n	8012c4a <_printf_float+0x27a>
 8012be0:	4a37      	ldr	r2, [pc, #220]	; (8012cc0 <_printf_float+0x2f0>)
 8012be2:	2301      	movs	r3, #1
 8012be4:	4631      	mov	r1, r6
 8012be6:	4628      	mov	r0, r5
 8012be8:	47b8      	blx	r7
 8012bea:	3001      	adds	r0, #1
 8012bec:	f43f af51 	beq.w	8012a92 <_printf_float+0xc2>
 8012bf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	db02      	blt.n	8012bfe <_printf_float+0x22e>
 8012bf8:	6823      	ldr	r3, [r4, #0]
 8012bfa:	07d8      	lsls	r0, r3, #31
 8012bfc:	d510      	bpl.n	8012c20 <_printf_float+0x250>
 8012bfe:	ee18 3a10 	vmov	r3, s16
 8012c02:	4652      	mov	r2, sl
 8012c04:	4631      	mov	r1, r6
 8012c06:	4628      	mov	r0, r5
 8012c08:	47b8      	blx	r7
 8012c0a:	3001      	adds	r0, #1
 8012c0c:	f43f af41 	beq.w	8012a92 <_printf_float+0xc2>
 8012c10:	f04f 0800 	mov.w	r8, #0
 8012c14:	f104 091a 	add.w	r9, r4, #26
 8012c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c1a:	3b01      	subs	r3, #1
 8012c1c:	4543      	cmp	r3, r8
 8012c1e:	dc09      	bgt.n	8012c34 <_printf_float+0x264>
 8012c20:	6823      	ldr	r3, [r4, #0]
 8012c22:	079b      	lsls	r3, r3, #30
 8012c24:	f100 8105 	bmi.w	8012e32 <_printf_float+0x462>
 8012c28:	68e0      	ldr	r0, [r4, #12]
 8012c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c2c:	4298      	cmp	r0, r3
 8012c2e:	bfb8      	it	lt
 8012c30:	4618      	movlt	r0, r3
 8012c32:	e730      	b.n	8012a96 <_printf_float+0xc6>
 8012c34:	2301      	movs	r3, #1
 8012c36:	464a      	mov	r2, r9
 8012c38:	4631      	mov	r1, r6
 8012c3a:	4628      	mov	r0, r5
 8012c3c:	47b8      	blx	r7
 8012c3e:	3001      	adds	r0, #1
 8012c40:	f43f af27 	beq.w	8012a92 <_printf_float+0xc2>
 8012c44:	f108 0801 	add.w	r8, r8, #1
 8012c48:	e7e6      	b.n	8012c18 <_printf_float+0x248>
 8012c4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	dc39      	bgt.n	8012cc4 <_printf_float+0x2f4>
 8012c50:	4a1b      	ldr	r2, [pc, #108]	; (8012cc0 <_printf_float+0x2f0>)
 8012c52:	2301      	movs	r3, #1
 8012c54:	4631      	mov	r1, r6
 8012c56:	4628      	mov	r0, r5
 8012c58:	47b8      	blx	r7
 8012c5a:	3001      	adds	r0, #1
 8012c5c:	f43f af19 	beq.w	8012a92 <_printf_float+0xc2>
 8012c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012c64:	4313      	orrs	r3, r2
 8012c66:	d102      	bne.n	8012c6e <_printf_float+0x29e>
 8012c68:	6823      	ldr	r3, [r4, #0]
 8012c6a:	07d9      	lsls	r1, r3, #31
 8012c6c:	d5d8      	bpl.n	8012c20 <_printf_float+0x250>
 8012c6e:	ee18 3a10 	vmov	r3, s16
 8012c72:	4652      	mov	r2, sl
 8012c74:	4631      	mov	r1, r6
 8012c76:	4628      	mov	r0, r5
 8012c78:	47b8      	blx	r7
 8012c7a:	3001      	adds	r0, #1
 8012c7c:	f43f af09 	beq.w	8012a92 <_printf_float+0xc2>
 8012c80:	f04f 0900 	mov.w	r9, #0
 8012c84:	f104 0a1a 	add.w	sl, r4, #26
 8012c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c8a:	425b      	negs	r3, r3
 8012c8c:	454b      	cmp	r3, r9
 8012c8e:	dc01      	bgt.n	8012c94 <_printf_float+0x2c4>
 8012c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c92:	e792      	b.n	8012bba <_printf_float+0x1ea>
 8012c94:	2301      	movs	r3, #1
 8012c96:	4652      	mov	r2, sl
 8012c98:	4631      	mov	r1, r6
 8012c9a:	4628      	mov	r0, r5
 8012c9c:	47b8      	blx	r7
 8012c9e:	3001      	adds	r0, #1
 8012ca0:	f43f aef7 	beq.w	8012a92 <_printf_float+0xc2>
 8012ca4:	f109 0901 	add.w	r9, r9, #1
 8012ca8:	e7ee      	b.n	8012c88 <_printf_float+0x2b8>
 8012caa:	bf00      	nop
 8012cac:	7fefffff 	.word	0x7fefffff
 8012cb0:	08017b0c 	.word	0x08017b0c
 8012cb4:	08017b10 	.word	0x08017b10
 8012cb8:	08017b18 	.word	0x08017b18
 8012cbc:	08017b14 	.word	0x08017b14
 8012cc0:	08017f66 	.word	0x08017f66
 8012cc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	bfa8      	it	ge
 8012ccc:	461a      	movge	r2, r3
 8012cce:	2a00      	cmp	r2, #0
 8012cd0:	4691      	mov	r9, r2
 8012cd2:	dc37      	bgt.n	8012d44 <_printf_float+0x374>
 8012cd4:	f04f 0b00 	mov.w	fp, #0
 8012cd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012cdc:	f104 021a 	add.w	r2, r4, #26
 8012ce0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ce2:	9305      	str	r3, [sp, #20]
 8012ce4:	eba3 0309 	sub.w	r3, r3, r9
 8012ce8:	455b      	cmp	r3, fp
 8012cea:	dc33      	bgt.n	8012d54 <_printf_float+0x384>
 8012cec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012cf0:	429a      	cmp	r2, r3
 8012cf2:	db3b      	blt.n	8012d6c <_printf_float+0x39c>
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	07da      	lsls	r2, r3, #31
 8012cf8:	d438      	bmi.n	8012d6c <_printf_float+0x39c>
 8012cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cfc:	9a05      	ldr	r2, [sp, #20]
 8012cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d00:	1a9a      	subs	r2, r3, r2
 8012d02:	eba3 0901 	sub.w	r9, r3, r1
 8012d06:	4591      	cmp	r9, r2
 8012d08:	bfa8      	it	ge
 8012d0a:	4691      	movge	r9, r2
 8012d0c:	f1b9 0f00 	cmp.w	r9, #0
 8012d10:	dc35      	bgt.n	8012d7e <_printf_float+0x3ae>
 8012d12:	f04f 0800 	mov.w	r8, #0
 8012d16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012d1a:	f104 0a1a 	add.w	sl, r4, #26
 8012d1e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012d22:	1a9b      	subs	r3, r3, r2
 8012d24:	eba3 0309 	sub.w	r3, r3, r9
 8012d28:	4543      	cmp	r3, r8
 8012d2a:	f77f af79 	ble.w	8012c20 <_printf_float+0x250>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	4652      	mov	r2, sl
 8012d32:	4631      	mov	r1, r6
 8012d34:	4628      	mov	r0, r5
 8012d36:	47b8      	blx	r7
 8012d38:	3001      	adds	r0, #1
 8012d3a:	f43f aeaa 	beq.w	8012a92 <_printf_float+0xc2>
 8012d3e:	f108 0801 	add.w	r8, r8, #1
 8012d42:	e7ec      	b.n	8012d1e <_printf_float+0x34e>
 8012d44:	4613      	mov	r3, r2
 8012d46:	4631      	mov	r1, r6
 8012d48:	4642      	mov	r2, r8
 8012d4a:	4628      	mov	r0, r5
 8012d4c:	47b8      	blx	r7
 8012d4e:	3001      	adds	r0, #1
 8012d50:	d1c0      	bne.n	8012cd4 <_printf_float+0x304>
 8012d52:	e69e      	b.n	8012a92 <_printf_float+0xc2>
 8012d54:	2301      	movs	r3, #1
 8012d56:	4631      	mov	r1, r6
 8012d58:	4628      	mov	r0, r5
 8012d5a:	9205      	str	r2, [sp, #20]
 8012d5c:	47b8      	blx	r7
 8012d5e:	3001      	adds	r0, #1
 8012d60:	f43f ae97 	beq.w	8012a92 <_printf_float+0xc2>
 8012d64:	9a05      	ldr	r2, [sp, #20]
 8012d66:	f10b 0b01 	add.w	fp, fp, #1
 8012d6a:	e7b9      	b.n	8012ce0 <_printf_float+0x310>
 8012d6c:	ee18 3a10 	vmov	r3, s16
 8012d70:	4652      	mov	r2, sl
 8012d72:	4631      	mov	r1, r6
 8012d74:	4628      	mov	r0, r5
 8012d76:	47b8      	blx	r7
 8012d78:	3001      	adds	r0, #1
 8012d7a:	d1be      	bne.n	8012cfa <_printf_float+0x32a>
 8012d7c:	e689      	b.n	8012a92 <_printf_float+0xc2>
 8012d7e:	9a05      	ldr	r2, [sp, #20]
 8012d80:	464b      	mov	r3, r9
 8012d82:	4442      	add	r2, r8
 8012d84:	4631      	mov	r1, r6
 8012d86:	4628      	mov	r0, r5
 8012d88:	47b8      	blx	r7
 8012d8a:	3001      	adds	r0, #1
 8012d8c:	d1c1      	bne.n	8012d12 <_printf_float+0x342>
 8012d8e:	e680      	b.n	8012a92 <_printf_float+0xc2>
 8012d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012d92:	2a01      	cmp	r2, #1
 8012d94:	dc01      	bgt.n	8012d9a <_printf_float+0x3ca>
 8012d96:	07db      	lsls	r3, r3, #31
 8012d98:	d538      	bpl.n	8012e0c <_printf_float+0x43c>
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	4642      	mov	r2, r8
 8012d9e:	4631      	mov	r1, r6
 8012da0:	4628      	mov	r0, r5
 8012da2:	47b8      	blx	r7
 8012da4:	3001      	adds	r0, #1
 8012da6:	f43f ae74 	beq.w	8012a92 <_printf_float+0xc2>
 8012daa:	ee18 3a10 	vmov	r3, s16
 8012dae:	4652      	mov	r2, sl
 8012db0:	4631      	mov	r1, r6
 8012db2:	4628      	mov	r0, r5
 8012db4:	47b8      	blx	r7
 8012db6:	3001      	adds	r0, #1
 8012db8:	f43f ae6b 	beq.w	8012a92 <_printf_float+0xc2>
 8012dbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	f7ed fe62 	bl	8000a8c <__aeabi_dcmpeq>
 8012dc8:	b9d8      	cbnz	r0, 8012e02 <_printf_float+0x432>
 8012dca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dcc:	f108 0201 	add.w	r2, r8, #1
 8012dd0:	3b01      	subs	r3, #1
 8012dd2:	4631      	mov	r1, r6
 8012dd4:	4628      	mov	r0, r5
 8012dd6:	47b8      	blx	r7
 8012dd8:	3001      	adds	r0, #1
 8012dda:	d10e      	bne.n	8012dfa <_printf_float+0x42a>
 8012ddc:	e659      	b.n	8012a92 <_printf_float+0xc2>
 8012dde:	2301      	movs	r3, #1
 8012de0:	4652      	mov	r2, sl
 8012de2:	4631      	mov	r1, r6
 8012de4:	4628      	mov	r0, r5
 8012de6:	47b8      	blx	r7
 8012de8:	3001      	adds	r0, #1
 8012dea:	f43f ae52 	beq.w	8012a92 <_printf_float+0xc2>
 8012dee:	f108 0801 	add.w	r8, r8, #1
 8012df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012df4:	3b01      	subs	r3, #1
 8012df6:	4543      	cmp	r3, r8
 8012df8:	dcf1      	bgt.n	8012dde <_printf_float+0x40e>
 8012dfa:	464b      	mov	r3, r9
 8012dfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012e00:	e6dc      	b.n	8012bbc <_printf_float+0x1ec>
 8012e02:	f04f 0800 	mov.w	r8, #0
 8012e06:	f104 0a1a 	add.w	sl, r4, #26
 8012e0a:	e7f2      	b.n	8012df2 <_printf_float+0x422>
 8012e0c:	2301      	movs	r3, #1
 8012e0e:	4642      	mov	r2, r8
 8012e10:	e7df      	b.n	8012dd2 <_printf_float+0x402>
 8012e12:	2301      	movs	r3, #1
 8012e14:	464a      	mov	r2, r9
 8012e16:	4631      	mov	r1, r6
 8012e18:	4628      	mov	r0, r5
 8012e1a:	47b8      	blx	r7
 8012e1c:	3001      	adds	r0, #1
 8012e1e:	f43f ae38 	beq.w	8012a92 <_printf_float+0xc2>
 8012e22:	f108 0801 	add.w	r8, r8, #1
 8012e26:	68e3      	ldr	r3, [r4, #12]
 8012e28:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012e2a:	1a5b      	subs	r3, r3, r1
 8012e2c:	4543      	cmp	r3, r8
 8012e2e:	dcf0      	bgt.n	8012e12 <_printf_float+0x442>
 8012e30:	e6fa      	b.n	8012c28 <_printf_float+0x258>
 8012e32:	f04f 0800 	mov.w	r8, #0
 8012e36:	f104 0919 	add.w	r9, r4, #25
 8012e3a:	e7f4      	b.n	8012e26 <_printf_float+0x456>

08012e3c <_printf_common>:
 8012e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e40:	4616      	mov	r6, r2
 8012e42:	4699      	mov	r9, r3
 8012e44:	688a      	ldr	r2, [r1, #8]
 8012e46:	690b      	ldr	r3, [r1, #16]
 8012e48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012e4c:	4293      	cmp	r3, r2
 8012e4e:	bfb8      	it	lt
 8012e50:	4613      	movlt	r3, r2
 8012e52:	6033      	str	r3, [r6, #0]
 8012e54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012e58:	4607      	mov	r7, r0
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	b10a      	cbz	r2, 8012e62 <_printf_common+0x26>
 8012e5e:	3301      	adds	r3, #1
 8012e60:	6033      	str	r3, [r6, #0]
 8012e62:	6823      	ldr	r3, [r4, #0]
 8012e64:	0699      	lsls	r1, r3, #26
 8012e66:	bf42      	ittt	mi
 8012e68:	6833      	ldrmi	r3, [r6, #0]
 8012e6a:	3302      	addmi	r3, #2
 8012e6c:	6033      	strmi	r3, [r6, #0]
 8012e6e:	6825      	ldr	r5, [r4, #0]
 8012e70:	f015 0506 	ands.w	r5, r5, #6
 8012e74:	d106      	bne.n	8012e84 <_printf_common+0x48>
 8012e76:	f104 0a19 	add.w	sl, r4, #25
 8012e7a:	68e3      	ldr	r3, [r4, #12]
 8012e7c:	6832      	ldr	r2, [r6, #0]
 8012e7e:	1a9b      	subs	r3, r3, r2
 8012e80:	42ab      	cmp	r3, r5
 8012e82:	dc26      	bgt.n	8012ed2 <_printf_common+0x96>
 8012e84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012e88:	1e13      	subs	r3, r2, #0
 8012e8a:	6822      	ldr	r2, [r4, #0]
 8012e8c:	bf18      	it	ne
 8012e8e:	2301      	movne	r3, #1
 8012e90:	0692      	lsls	r2, r2, #26
 8012e92:	d42b      	bmi.n	8012eec <_printf_common+0xb0>
 8012e94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012e98:	4649      	mov	r1, r9
 8012e9a:	4638      	mov	r0, r7
 8012e9c:	47c0      	blx	r8
 8012e9e:	3001      	adds	r0, #1
 8012ea0:	d01e      	beq.n	8012ee0 <_printf_common+0xa4>
 8012ea2:	6823      	ldr	r3, [r4, #0]
 8012ea4:	68e5      	ldr	r5, [r4, #12]
 8012ea6:	6832      	ldr	r2, [r6, #0]
 8012ea8:	f003 0306 	and.w	r3, r3, #6
 8012eac:	2b04      	cmp	r3, #4
 8012eae:	bf08      	it	eq
 8012eb0:	1aad      	subeq	r5, r5, r2
 8012eb2:	68a3      	ldr	r3, [r4, #8]
 8012eb4:	6922      	ldr	r2, [r4, #16]
 8012eb6:	bf0c      	ite	eq
 8012eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ebc:	2500      	movne	r5, #0
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	bfc4      	itt	gt
 8012ec2:	1a9b      	subgt	r3, r3, r2
 8012ec4:	18ed      	addgt	r5, r5, r3
 8012ec6:	2600      	movs	r6, #0
 8012ec8:	341a      	adds	r4, #26
 8012eca:	42b5      	cmp	r5, r6
 8012ecc:	d11a      	bne.n	8012f04 <_printf_common+0xc8>
 8012ece:	2000      	movs	r0, #0
 8012ed0:	e008      	b.n	8012ee4 <_printf_common+0xa8>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	4652      	mov	r2, sl
 8012ed6:	4649      	mov	r1, r9
 8012ed8:	4638      	mov	r0, r7
 8012eda:	47c0      	blx	r8
 8012edc:	3001      	adds	r0, #1
 8012ede:	d103      	bne.n	8012ee8 <_printf_common+0xac>
 8012ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8012ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ee8:	3501      	adds	r5, #1
 8012eea:	e7c6      	b.n	8012e7a <_printf_common+0x3e>
 8012eec:	18e1      	adds	r1, r4, r3
 8012eee:	1c5a      	adds	r2, r3, #1
 8012ef0:	2030      	movs	r0, #48	; 0x30
 8012ef2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012ef6:	4422      	add	r2, r4
 8012ef8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012efc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012f00:	3302      	adds	r3, #2
 8012f02:	e7c7      	b.n	8012e94 <_printf_common+0x58>
 8012f04:	2301      	movs	r3, #1
 8012f06:	4622      	mov	r2, r4
 8012f08:	4649      	mov	r1, r9
 8012f0a:	4638      	mov	r0, r7
 8012f0c:	47c0      	blx	r8
 8012f0e:	3001      	adds	r0, #1
 8012f10:	d0e6      	beq.n	8012ee0 <_printf_common+0xa4>
 8012f12:	3601      	adds	r6, #1
 8012f14:	e7d9      	b.n	8012eca <_printf_common+0x8e>
	...

08012f18 <_printf_i>:
 8012f18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012f1c:	7e0f      	ldrb	r7, [r1, #24]
 8012f1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012f20:	2f78      	cmp	r7, #120	; 0x78
 8012f22:	4691      	mov	r9, r2
 8012f24:	4680      	mov	r8, r0
 8012f26:	460c      	mov	r4, r1
 8012f28:	469a      	mov	sl, r3
 8012f2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012f2e:	d807      	bhi.n	8012f40 <_printf_i+0x28>
 8012f30:	2f62      	cmp	r7, #98	; 0x62
 8012f32:	d80a      	bhi.n	8012f4a <_printf_i+0x32>
 8012f34:	2f00      	cmp	r7, #0
 8012f36:	f000 80d8 	beq.w	80130ea <_printf_i+0x1d2>
 8012f3a:	2f58      	cmp	r7, #88	; 0x58
 8012f3c:	f000 80a3 	beq.w	8013086 <_printf_i+0x16e>
 8012f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012f48:	e03a      	b.n	8012fc0 <_printf_i+0xa8>
 8012f4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012f4e:	2b15      	cmp	r3, #21
 8012f50:	d8f6      	bhi.n	8012f40 <_printf_i+0x28>
 8012f52:	a101      	add	r1, pc, #4	; (adr r1, 8012f58 <_printf_i+0x40>)
 8012f54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012f58:	08012fb1 	.word	0x08012fb1
 8012f5c:	08012fc5 	.word	0x08012fc5
 8012f60:	08012f41 	.word	0x08012f41
 8012f64:	08012f41 	.word	0x08012f41
 8012f68:	08012f41 	.word	0x08012f41
 8012f6c:	08012f41 	.word	0x08012f41
 8012f70:	08012fc5 	.word	0x08012fc5
 8012f74:	08012f41 	.word	0x08012f41
 8012f78:	08012f41 	.word	0x08012f41
 8012f7c:	08012f41 	.word	0x08012f41
 8012f80:	08012f41 	.word	0x08012f41
 8012f84:	080130d1 	.word	0x080130d1
 8012f88:	08012ff5 	.word	0x08012ff5
 8012f8c:	080130b3 	.word	0x080130b3
 8012f90:	08012f41 	.word	0x08012f41
 8012f94:	08012f41 	.word	0x08012f41
 8012f98:	080130f3 	.word	0x080130f3
 8012f9c:	08012f41 	.word	0x08012f41
 8012fa0:	08012ff5 	.word	0x08012ff5
 8012fa4:	08012f41 	.word	0x08012f41
 8012fa8:	08012f41 	.word	0x08012f41
 8012fac:	080130bb 	.word	0x080130bb
 8012fb0:	682b      	ldr	r3, [r5, #0]
 8012fb2:	1d1a      	adds	r2, r3, #4
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	602a      	str	r2, [r5, #0]
 8012fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012fbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	e0a3      	b.n	801310c <_printf_i+0x1f4>
 8012fc4:	6820      	ldr	r0, [r4, #0]
 8012fc6:	6829      	ldr	r1, [r5, #0]
 8012fc8:	0606      	lsls	r6, r0, #24
 8012fca:	f101 0304 	add.w	r3, r1, #4
 8012fce:	d50a      	bpl.n	8012fe6 <_printf_i+0xce>
 8012fd0:	680e      	ldr	r6, [r1, #0]
 8012fd2:	602b      	str	r3, [r5, #0]
 8012fd4:	2e00      	cmp	r6, #0
 8012fd6:	da03      	bge.n	8012fe0 <_printf_i+0xc8>
 8012fd8:	232d      	movs	r3, #45	; 0x2d
 8012fda:	4276      	negs	r6, r6
 8012fdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fe0:	485e      	ldr	r0, [pc, #376]	; (801315c <_printf_i+0x244>)
 8012fe2:	230a      	movs	r3, #10
 8012fe4:	e019      	b.n	801301a <_printf_i+0x102>
 8012fe6:	680e      	ldr	r6, [r1, #0]
 8012fe8:	602b      	str	r3, [r5, #0]
 8012fea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012fee:	bf18      	it	ne
 8012ff0:	b236      	sxthne	r6, r6
 8012ff2:	e7ef      	b.n	8012fd4 <_printf_i+0xbc>
 8012ff4:	682b      	ldr	r3, [r5, #0]
 8012ff6:	6820      	ldr	r0, [r4, #0]
 8012ff8:	1d19      	adds	r1, r3, #4
 8012ffa:	6029      	str	r1, [r5, #0]
 8012ffc:	0601      	lsls	r1, r0, #24
 8012ffe:	d501      	bpl.n	8013004 <_printf_i+0xec>
 8013000:	681e      	ldr	r6, [r3, #0]
 8013002:	e002      	b.n	801300a <_printf_i+0xf2>
 8013004:	0646      	lsls	r6, r0, #25
 8013006:	d5fb      	bpl.n	8013000 <_printf_i+0xe8>
 8013008:	881e      	ldrh	r6, [r3, #0]
 801300a:	4854      	ldr	r0, [pc, #336]	; (801315c <_printf_i+0x244>)
 801300c:	2f6f      	cmp	r7, #111	; 0x6f
 801300e:	bf0c      	ite	eq
 8013010:	2308      	moveq	r3, #8
 8013012:	230a      	movne	r3, #10
 8013014:	2100      	movs	r1, #0
 8013016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801301a:	6865      	ldr	r5, [r4, #4]
 801301c:	60a5      	str	r5, [r4, #8]
 801301e:	2d00      	cmp	r5, #0
 8013020:	bfa2      	ittt	ge
 8013022:	6821      	ldrge	r1, [r4, #0]
 8013024:	f021 0104 	bicge.w	r1, r1, #4
 8013028:	6021      	strge	r1, [r4, #0]
 801302a:	b90e      	cbnz	r6, 8013030 <_printf_i+0x118>
 801302c:	2d00      	cmp	r5, #0
 801302e:	d04d      	beq.n	80130cc <_printf_i+0x1b4>
 8013030:	4615      	mov	r5, r2
 8013032:	fbb6 f1f3 	udiv	r1, r6, r3
 8013036:	fb03 6711 	mls	r7, r3, r1, r6
 801303a:	5dc7      	ldrb	r7, [r0, r7]
 801303c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013040:	4637      	mov	r7, r6
 8013042:	42bb      	cmp	r3, r7
 8013044:	460e      	mov	r6, r1
 8013046:	d9f4      	bls.n	8013032 <_printf_i+0x11a>
 8013048:	2b08      	cmp	r3, #8
 801304a:	d10b      	bne.n	8013064 <_printf_i+0x14c>
 801304c:	6823      	ldr	r3, [r4, #0]
 801304e:	07de      	lsls	r6, r3, #31
 8013050:	d508      	bpl.n	8013064 <_printf_i+0x14c>
 8013052:	6923      	ldr	r3, [r4, #16]
 8013054:	6861      	ldr	r1, [r4, #4]
 8013056:	4299      	cmp	r1, r3
 8013058:	bfde      	ittt	le
 801305a:	2330      	movle	r3, #48	; 0x30
 801305c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013060:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013064:	1b52      	subs	r2, r2, r5
 8013066:	6122      	str	r2, [r4, #16]
 8013068:	f8cd a000 	str.w	sl, [sp]
 801306c:	464b      	mov	r3, r9
 801306e:	aa03      	add	r2, sp, #12
 8013070:	4621      	mov	r1, r4
 8013072:	4640      	mov	r0, r8
 8013074:	f7ff fee2 	bl	8012e3c <_printf_common>
 8013078:	3001      	adds	r0, #1
 801307a:	d14c      	bne.n	8013116 <_printf_i+0x1fe>
 801307c:	f04f 30ff 	mov.w	r0, #4294967295
 8013080:	b004      	add	sp, #16
 8013082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013086:	4835      	ldr	r0, [pc, #212]	; (801315c <_printf_i+0x244>)
 8013088:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801308c:	6829      	ldr	r1, [r5, #0]
 801308e:	6823      	ldr	r3, [r4, #0]
 8013090:	f851 6b04 	ldr.w	r6, [r1], #4
 8013094:	6029      	str	r1, [r5, #0]
 8013096:	061d      	lsls	r5, r3, #24
 8013098:	d514      	bpl.n	80130c4 <_printf_i+0x1ac>
 801309a:	07df      	lsls	r7, r3, #31
 801309c:	bf44      	itt	mi
 801309e:	f043 0320 	orrmi.w	r3, r3, #32
 80130a2:	6023      	strmi	r3, [r4, #0]
 80130a4:	b91e      	cbnz	r6, 80130ae <_printf_i+0x196>
 80130a6:	6823      	ldr	r3, [r4, #0]
 80130a8:	f023 0320 	bic.w	r3, r3, #32
 80130ac:	6023      	str	r3, [r4, #0]
 80130ae:	2310      	movs	r3, #16
 80130b0:	e7b0      	b.n	8013014 <_printf_i+0xfc>
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	f043 0320 	orr.w	r3, r3, #32
 80130b8:	6023      	str	r3, [r4, #0]
 80130ba:	2378      	movs	r3, #120	; 0x78
 80130bc:	4828      	ldr	r0, [pc, #160]	; (8013160 <_printf_i+0x248>)
 80130be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80130c2:	e7e3      	b.n	801308c <_printf_i+0x174>
 80130c4:	0659      	lsls	r1, r3, #25
 80130c6:	bf48      	it	mi
 80130c8:	b2b6      	uxthmi	r6, r6
 80130ca:	e7e6      	b.n	801309a <_printf_i+0x182>
 80130cc:	4615      	mov	r5, r2
 80130ce:	e7bb      	b.n	8013048 <_printf_i+0x130>
 80130d0:	682b      	ldr	r3, [r5, #0]
 80130d2:	6826      	ldr	r6, [r4, #0]
 80130d4:	6961      	ldr	r1, [r4, #20]
 80130d6:	1d18      	adds	r0, r3, #4
 80130d8:	6028      	str	r0, [r5, #0]
 80130da:	0635      	lsls	r5, r6, #24
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	d501      	bpl.n	80130e4 <_printf_i+0x1cc>
 80130e0:	6019      	str	r1, [r3, #0]
 80130e2:	e002      	b.n	80130ea <_printf_i+0x1d2>
 80130e4:	0670      	lsls	r0, r6, #25
 80130e6:	d5fb      	bpl.n	80130e0 <_printf_i+0x1c8>
 80130e8:	8019      	strh	r1, [r3, #0]
 80130ea:	2300      	movs	r3, #0
 80130ec:	6123      	str	r3, [r4, #16]
 80130ee:	4615      	mov	r5, r2
 80130f0:	e7ba      	b.n	8013068 <_printf_i+0x150>
 80130f2:	682b      	ldr	r3, [r5, #0]
 80130f4:	1d1a      	adds	r2, r3, #4
 80130f6:	602a      	str	r2, [r5, #0]
 80130f8:	681d      	ldr	r5, [r3, #0]
 80130fa:	6862      	ldr	r2, [r4, #4]
 80130fc:	2100      	movs	r1, #0
 80130fe:	4628      	mov	r0, r5
 8013100:	f7ed f846 	bl	8000190 <memchr>
 8013104:	b108      	cbz	r0, 801310a <_printf_i+0x1f2>
 8013106:	1b40      	subs	r0, r0, r5
 8013108:	6060      	str	r0, [r4, #4]
 801310a:	6863      	ldr	r3, [r4, #4]
 801310c:	6123      	str	r3, [r4, #16]
 801310e:	2300      	movs	r3, #0
 8013110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013114:	e7a8      	b.n	8013068 <_printf_i+0x150>
 8013116:	6923      	ldr	r3, [r4, #16]
 8013118:	462a      	mov	r2, r5
 801311a:	4649      	mov	r1, r9
 801311c:	4640      	mov	r0, r8
 801311e:	47d0      	blx	sl
 8013120:	3001      	adds	r0, #1
 8013122:	d0ab      	beq.n	801307c <_printf_i+0x164>
 8013124:	6823      	ldr	r3, [r4, #0]
 8013126:	079b      	lsls	r3, r3, #30
 8013128:	d413      	bmi.n	8013152 <_printf_i+0x23a>
 801312a:	68e0      	ldr	r0, [r4, #12]
 801312c:	9b03      	ldr	r3, [sp, #12]
 801312e:	4298      	cmp	r0, r3
 8013130:	bfb8      	it	lt
 8013132:	4618      	movlt	r0, r3
 8013134:	e7a4      	b.n	8013080 <_printf_i+0x168>
 8013136:	2301      	movs	r3, #1
 8013138:	4632      	mov	r2, r6
 801313a:	4649      	mov	r1, r9
 801313c:	4640      	mov	r0, r8
 801313e:	47d0      	blx	sl
 8013140:	3001      	adds	r0, #1
 8013142:	d09b      	beq.n	801307c <_printf_i+0x164>
 8013144:	3501      	adds	r5, #1
 8013146:	68e3      	ldr	r3, [r4, #12]
 8013148:	9903      	ldr	r1, [sp, #12]
 801314a:	1a5b      	subs	r3, r3, r1
 801314c:	42ab      	cmp	r3, r5
 801314e:	dcf2      	bgt.n	8013136 <_printf_i+0x21e>
 8013150:	e7eb      	b.n	801312a <_printf_i+0x212>
 8013152:	2500      	movs	r5, #0
 8013154:	f104 0619 	add.w	r6, r4, #25
 8013158:	e7f5      	b.n	8013146 <_printf_i+0x22e>
 801315a:	bf00      	nop
 801315c:	08017b1c 	.word	0x08017b1c
 8013160:	08017b2d 	.word	0x08017b2d

08013164 <rand>:
 8013164:	4b16      	ldr	r3, [pc, #88]	; (80131c0 <rand+0x5c>)
 8013166:	b510      	push	{r4, lr}
 8013168:	681c      	ldr	r4, [r3, #0]
 801316a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801316c:	b9b3      	cbnz	r3, 801319c <rand+0x38>
 801316e:	2018      	movs	r0, #24
 8013170:	f7ff f816 	bl	80121a0 <malloc>
 8013174:	63a0      	str	r0, [r4, #56]	; 0x38
 8013176:	b928      	cbnz	r0, 8013184 <rand+0x20>
 8013178:	4602      	mov	r2, r0
 801317a:	4b12      	ldr	r3, [pc, #72]	; (80131c4 <rand+0x60>)
 801317c:	4812      	ldr	r0, [pc, #72]	; (80131c8 <rand+0x64>)
 801317e:	214e      	movs	r1, #78	; 0x4e
 8013180:	f000 fa9a 	bl	80136b8 <__assert_func>
 8013184:	4a11      	ldr	r2, [pc, #68]	; (80131cc <rand+0x68>)
 8013186:	4b12      	ldr	r3, [pc, #72]	; (80131d0 <rand+0x6c>)
 8013188:	e9c0 2300 	strd	r2, r3, [r0]
 801318c:	4b11      	ldr	r3, [pc, #68]	; (80131d4 <rand+0x70>)
 801318e:	6083      	str	r3, [r0, #8]
 8013190:	230b      	movs	r3, #11
 8013192:	8183      	strh	r3, [r0, #12]
 8013194:	2201      	movs	r2, #1
 8013196:	2300      	movs	r3, #0
 8013198:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801319c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801319e:	4a0e      	ldr	r2, [pc, #56]	; (80131d8 <rand+0x74>)
 80131a0:	6920      	ldr	r0, [r4, #16]
 80131a2:	6963      	ldr	r3, [r4, #20]
 80131a4:	490d      	ldr	r1, [pc, #52]	; (80131dc <rand+0x78>)
 80131a6:	4342      	muls	r2, r0
 80131a8:	fb01 2203 	mla	r2, r1, r3, r2
 80131ac:	fba0 0101 	umull	r0, r1, r0, r1
 80131b0:	1c43      	adds	r3, r0, #1
 80131b2:	eb42 0001 	adc.w	r0, r2, r1
 80131b6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80131ba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80131be:	bd10      	pop	{r4, pc}
 80131c0:	20000020 	.word	0x20000020
 80131c4:	080179d8 	.word	0x080179d8
 80131c8:	08017b3e 	.word	0x08017b3e
 80131cc:	abcd330e 	.word	0xabcd330e
 80131d0:	e66d1234 	.word	0xe66d1234
 80131d4:	0005deec 	.word	0x0005deec
 80131d8:	5851f42d 	.word	0x5851f42d
 80131dc:	4c957f2d 	.word	0x4c957f2d

080131e0 <_sbrk_r>:
 80131e0:	b538      	push	{r3, r4, r5, lr}
 80131e2:	4d06      	ldr	r5, [pc, #24]	; (80131fc <_sbrk_r+0x1c>)
 80131e4:	2300      	movs	r3, #0
 80131e6:	4604      	mov	r4, r0
 80131e8:	4608      	mov	r0, r1
 80131ea:	602b      	str	r3, [r5, #0]
 80131ec:	f7f7 fb00 	bl	800a7f0 <_sbrk>
 80131f0:	1c43      	adds	r3, r0, #1
 80131f2:	d102      	bne.n	80131fa <_sbrk_r+0x1a>
 80131f4:	682b      	ldr	r3, [r5, #0]
 80131f6:	b103      	cbz	r3, 80131fa <_sbrk_r+0x1a>
 80131f8:	6023      	str	r3, [r4, #0]
 80131fa:	bd38      	pop	{r3, r4, r5, pc}
 80131fc:	2000a7b4 	.word	0x2000a7b4

08013200 <siprintf>:
 8013200:	b40e      	push	{r1, r2, r3}
 8013202:	b500      	push	{lr}
 8013204:	b09c      	sub	sp, #112	; 0x70
 8013206:	ab1d      	add	r3, sp, #116	; 0x74
 8013208:	9002      	str	r0, [sp, #8]
 801320a:	9006      	str	r0, [sp, #24]
 801320c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013210:	4809      	ldr	r0, [pc, #36]	; (8013238 <siprintf+0x38>)
 8013212:	9107      	str	r1, [sp, #28]
 8013214:	9104      	str	r1, [sp, #16]
 8013216:	4909      	ldr	r1, [pc, #36]	; (801323c <siprintf+0x3c>)
 8013218:	f853 2b04 	ldr.w	r2, [r3], #4
 801321c:	9105      	str	r1, [sp, #20]
 801321e:	6800      	ldr	r0, [r0, #0]
 8013220:	9301      	str	r3, [sp, #4]
 8013222:	a902      	add	r1, sp, #8
 8013224:	f001 fe08 	bl	8014e38 <_svfiprintf_r>
 8013228:	9b02      	ldr	r3, [sp, #8]
 801322a:	2200      	movs	r2, #0
 801322c:	701a      	strb	r2, [r3, #0]
 801322e:	b01c      	add	sp, #112	; 0x70
 8013230:	f85d eb04 	ldr.w	lr, [sp], #4
 8013234:	b003      	add	sp, #12
 8013236:	4770      	bx	lr
 8013238:	20000020 	.word	0x20000020
 801323c:	ffff0208 	.word	0xffff0208

08013240 <__tzcalc_limits>:
 8013240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013244:	4605      	mov	r5, r0
 8013246:	f001 f93b 	bl	80144c0 <__gettzinfo>
 801324a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 801324e:	429d      	cmp	r5, r3
 8013250:	f340 8099 	ble.w	8013386 <__tzcalc_limits+0x146>
 8013254:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8013258:	18ac      	adds	r4, r5, r2
 801325a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 801325e:	f240 126d 	movw	r2, #365	; 0x16d
 8013262:	10a4      	asrs	r4, r4, #2
 8013264:	fb02 4403 	mla	r4, r2, r3, r4
 8013268:	f06f 0263 	mvn.w	r2, #99	; 0x63
 801326c:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8013270:	fb93 f3f2 	sdiv	r3, r3, r2
 8013274:	441c      	add	r4, r3
 8013276:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801327a:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 801327e:	fb95 fcf3 	sdiv	ip, r5, r3
 8013282:	fb03 5c1c 	mls	ip, r3, ip, r5
 8013286:	186a      	adds	r2, r5, r1
 8013288:	fabc f68c 	clz	r6, ip
 801328c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013290:	f005 0303 	and.w	r3, r5, #3
 8013294:	4414      	add	r4, r2
 8013296:	2264      	movs	r2, #100	; 0x64
 8013298:	6045      	str	r5, [r0, #4]
 801329a:	fb95 f7f2 	sdiv	r7, r5, r2
 801329e:	0976      	lsrs	r6, r6, #5
 80132a0:	fb02 5717 	mls	r7, r2, r7, r5
 80132a4:	4601      	mov	r1, r0
 80132a6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80132aa:	9300      	str	r3, [sp, #0]
 80132ac:	f04f 0a07 	mov.w	sl, #7
 80132b0:	7a0d      	ldrb	r5, [r1, #8]
 80132b2:	694b      	ldr	r3, [r1, #20]
 80132b4:	2d4a      	cmp	r5, #74	; 0x4a
 80132b6:	d12d      	bne.n	8013314 <__tzcalc_limits+0xd4>
 80132b8:	9a00      	ldr	r2, [sp, #0]
 80132ba:	eb04 0e03 	add.w	lr, r4, r3
 80132be:	b902      	cbnz	r2, 80132c2 <__tzcalc_limits+0x82>
 80132c0:	b917      	cbnz	r7, 80132c8 <__tzcalc_limits+0x88>
 80132c2:	f1bc 0f00 	cmp.w	ip, #0
 80132c6:	d123      	bne.n	8013310 <__tzcalc_limits+0xd0>
 80132c8:	2b3b      	cmp	r3, #59	; 0x3b
 80132ca:	bfd4      	ite	le
 80132cc:	2300      	movle	r3, #0
 80132ce:	2301      	movgt	r3, #1
 80132d0:	4473      	add	r3, lr
 80132d2:	3b01      	subs	r3, #1
 80132d4:	698d      	ldr	r5, [r1, #24]
 80132d6:	4a2d      	ldr	r2, [pc, #180]	; (801338c <__tzcalc_limits+0x14c>)
 80132d8:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80132dc:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80132e0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80132e2:	18ed      	adds	r5, r5, r3
 80132e4:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80132e8:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80132ec:	3128      	adds	r1, #40	; 0x28
 80132ee:	458b      	cmp	fp, r1
 80132f0:	d1de      	bne.n	80132b0 <__tzcalc_limits+0x70>
 80132f2:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80132f6:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80132fa:	428c      	cmp	r4, r1
 80132fc:	eb72 0303 	sbcs.w	r3, r2, r3
 8013300:	bfb4      	ite	lt
 8013302:	2301      	movlt	r3, #1
 8013304:	2300      	movge	r3, #0
 8013306:	6003      	str	r3, [r0, #0]
 8013308:	2001      	movs	r0, #1
 801330a:	b003      	add	sp, #12
 801330c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013310:	2300      	movs	r3, #0
 8013312:	e7dd      	b.n	80132d0 <__tzcalc_limits+0x90>
 8013314:	2d44      	cmp	r5, #68	; 0x44
 8013316:	d101      	bne.n	801331c <__tzcalc_limits+0xdc>
 8013318:	4423      	add	r3, r4
 801331a:	e7db      	b.n	80132d4 <__tzcalc_limits+0x94>
 801331c:	9a00      	ldr	r2, [sp, #0]
 801331e:	bb62      	cbnz	r2, 801337a <__tzcalc_limits+0x13a>
 8013320:	2f00      	cmp	r7, #0
 8013322:	bf0c      	ite	eq
 8013324:	4635      	moveq	r5, r6
 8013326:	2501      	movne	r5, #1
 8013328:	68ca      	ldr	r2, [r1, #12]
 801332a:	9201      	str	r2, [sp, #4]
 801332c:	4a18      	ldr	r2, [pc, #96]	; (8013390 <__tzcalc_limits+0x150>)
 801332e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8013332:	fb09 2505 	mla	r5, r9, r5, r2
 8013336:	46a6      	mov	lr, r4
 8013338:	f04f 0800 	mov.w	r8, #0
 801333c:	3d04      	subs	r5, #4
 801333e:	9a01      	ldr	r2, [sp, #4]
 8013340:	f108 0801 	add.w	r8, r8, #1
 8013344:	4542      	cmp	r2, r8
 8013346:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 801334a:	dc18      	bgt.n	801337e <__tzcalc_limits+0x13e>
 801334c:	f10e 0504 	add.w	r5, lr, #4
 8013350:	fb95 f8fa 	sdiv	r8, r5, sl
 8013354:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8013358:	eba5 0808 	sub.w	r8, r5, r8
 801335c:	ebb3 0808 	subs.w	r8, r3, r8
 8013360:	690b      	ldr	r3, [r1, #16]
 8013362:	f103 33ff 	add.w	r3, r3, #4294967295
 8013366:	bf48      	it	mi
 8013368:	f108 0807 	addmi.w	r8, r8, #7
 801336c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013370:	4443      	add	r3, r8
 8013372:	454b      	cmp	r3, r9
 8013374:	da05      	bge.n	8013382 <__tzcalc_limits+0x142>
 8013376:	4473      	add	r3, lr
 8013378:	e7ac      	b.n	80132d4 <__tzcalc_limits+0x94>
 801337a:	4635      	mov	r5, r6
 801337c:	e7d4      	b.n	8013328 <__tzcalc_limits+0xe8>
 801337e:	44ce      	add	lr, r9
 8013380:	e7dd      	b.n	801333e <__tzcalc_limits+0xfe>
 8013382:	3b07      	subs	r3, #7
 8013384:	e7f5      	b.n	8013372 <__tzcalc_limits+0x132>
 8013386:	2000      	movs	r0, #0
 8013388:	e7bf      	b.n	801330a <__tzcalc_limits+0xca>
 801338a:	bf00      	nop
 801338c:	00015180 	.word	0x00015180
 8013390:	08017aac 	.word	0x08017aac

08013394 <__tz_lock>:
 8013394:	4801      	ldr	r0, [pc, #4]	; (801339c <__tz_lock+0x8>)
 8013396:	f001 b948 	b.w	801462a <__retarget_lock_acquire>
 801339a:	bf00      	nop
 801339c:	2000a7b0 	.word	0x2000a7b0

080133a0 <__tz_unlock>:
 80133a0:	4801      	ldr	r0, [pc, #4]	; (80133a8 <__tz_unlock+0x8>)
 80133a2:	f001 b944 	b.w	801462e <__retarget_lock_release>
 80133a6:	bf00      	nop
 80133a8:	2000a7b0 	.word	0x2000a7b0

080133ac <_tzset_unlocked>:
 80133ac:	4b01      	ldr	r3, [pc, #4]	; (80133b4 <_tzset_unlocked+0x8>)
 80133ae:	6818      	ldr	r0, [r3, #0]
 80133b0:	f000 b802 	b.w	80133b8 <_tzset_unlocked_r>
 80133b4:	20000020 	.word	0x20000020

080133b8 <_tzset_unlocked_r>:
 80133b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133bc:	b08d      	sub	sp, #52	; 0x34
 80133be:	4607      	mov	r7, r0
 80133c0:	f001 f87e 	bl	80144c0 <__gettzinfo>
 80133c4:	49b0      	ldr	r1, [pc, #704]	; (8013688 <_tzset_unlocked_r+0x2d0>)
 80133c6:	4eb1      	ldr	r6, [pc, #708]	; (801368c <_tzset_unlocked_r+0x2d4>)
 80133c8:	4605      	mov	r5, r0
 80133ca:	4638      	mov	r0, r7
 80133cc:	f001 f870 	bl	80144b0 <_getenv_r>
 80133d0:	4604      	mov	r4, r0
 80133d2:	b970      	cbnz	r0, 80133f2 <_tzset_unlocked_r+0x3a>
 80133d4:	4bae      	ldr	r3, [pc, #696]	; (8013690 <_tzset_unlocked_r+0x2d8>)
 80133d6:	4aaf      	ldr	r2, [pc, #700]	; (8013694 <_tzset_unlocked_r+0x2dc>)
 80133d8:	6018      	str	r0, [r3, #0]
 80133da:	4baf      	ldr	r3, [pc, #700]	; (8013698 <_tzset_unlocked_r+0x2e0>)
 80133dc:	6018      	str	r0, [r3, #0]
 80133de:	4baf      	ldr	r3, [pc, #700]	; (801369c <_tzset_unlocked_r+0x2e4>)
 80133e0:	6830      	ldr	r0, [r6, #0]
 80133e2:	e9c3 2200 	strd	r2, r2, [r3]
 80133e6:	f7fe fee3 	bl	80121b0 <free>
 80133ea:	6034      	str	r4, [r6, #0]
 80133ec:	b00d      	add	sp, #52	; 0x34
 80133ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f2:	6831      	ldr	r1, [r6, #0]
 80133f4:	2900      	cmp	r1, #0
 80133f6:	d162      	bne.n	80134be <_tzset_unlocked_r+0x106>
 80133f8:	6830      	ldr	r0, [r6, #0]
 80133fa:	f7fe fed9 	bl	80121b0 <free>
 80133fe:	4620      	mov	r0, r4
 8013400:	f7ec febe 	bl	8000180 <strlen>
 8013404:	1c41      	adds	r1, r0, #1
 8013406:	4638      	mov	r0, r7
 8013408:	f7ff f9ce 	bl	80127a8 <_malloc_r>
 801340c:	6030      	str	r0, [r6, #0]
 801340e:	2800      	cmp	r0, #0
 8013410:	d15a      	bne.n	80134c8 <_tzset_unlocked_r+0x110>
 8013412:	7823      	ldrb	r3, [r4, #0]
 8013414:	4aa2      	ldr	r2, [pc, #648]	; (80136a0 <_tzset_unlocked_r+0x2e8>)
 8013416:	49a3      	ldr	r1, [pc, #652]	; (80136a4 <_tzset_unlocked_r+0x2ec>)
 8013418:	2b3a      	cmp	r3, #58	; 0x3a
 801341a:	bf08      	it	eq
 801341c:	3401      	addeq	r4, #1
 801341e:	ae0a      	add	r6, sp, #40	; 0x28
 8013420:	4633      	mov	r3, r6
 8013422:	4620      	mov	r0, r4
 8013424:	f001 ff62 	bl	80152ec <siscanf>
 8013428:	2800      	cmp	r0, #0
 801342a:	dddf      	ble.n	80133ec <_tzset_unlocked_r+0x34>
 801342c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801342e:	18e7      	adds	r7, r4, r3
 8013430:	5ce3      	ldrb	r3, [r4, r3]
 8013432:	2b2d      	cmp	r3, #45	; 0x2d
 8013434:	d14c      	bne.n	80134d0 <_tzset_unlocked_r+0x118>
 8013436:	3701      	adds	r7, #1
 8013438:	f04f 38ff 	mov.w	r8, #4294967295
 801343c:	f10d 0a20 	add.w	sl, sp, #32
 8013440:	f10d 0b1e 	add.w	fp, sp, #30
 8013444:	2400      	movs	r4, #0
 8013446:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 801344a:	4997      	ldr	r1, [pc, #604]	; (80136a8 <_tzset_unlocked_r+0x2f0>)
 801344c:	9603      	str	r6, [sp, #12]
 801344e:	f8cd b000 	str.w	fp, [sp]
 8013452:	4633      	mov	r3, r6
 8013454:	aa07      	add	r2, sp, #28
 8013456:	4638      	mov	r0, r7
 8013458:	f8ad 401e 	strh.w	r4, [sp, #30]
 801345c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8013460:	f001 ff44 	bl	80152ec <siscanf>
 8013464:	42a0      	cmp	r0, r4
 8013466:	ddc1      	ble.n	80133ec <_tzset_unlocked_r+0x34>
 8013468:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801346c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013470:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80136b4 <_tzset_unlocked_r+0x2fc>
 8013474:	213c      	movs	r1, #60	; 0x3c
 8013476:	fb01 3302 	mla	r3, r1, r2, r3
 801347a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801347e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013482:	fb01 3302 	mla	r3, r1, r2, r3
 8013486:	fb08 f303 	mul.w	r3, r8, r3
 801348a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 801369c <_tzset_unlocked_r+0x2e4>
 801348e:	62ab      	str	r3, [r5, #40]	; 0x28
 8013490:	4b83      	ldr	r3, [pc, #524]	; (80136a0 <_tzset_unlocked_r+0x2e8>)
 8013492:	f8c8 3000 	str.w	r3, [r8]
 8013496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013498:	4982      	ldr	r1, [pc, #520]	; (80136a4 <_tzset_unlocked_r+0x2ec>)
 801349a:	441f      	add	r7, r3
 801349c:	464a      	mov	r2, r9
 801349e:	4633      	mov	r3, r6
 80134a0:	4638      	mov	r0, r7
 80134a2:	f001 ff23 	bl	80152ec <siscanf>
 80134a6:	42a0      	cmp	r0, r4
 80134a8:	dc18      	bgt.n	80134dc <_tzset_unlocked_r+0x124>
 80134aa:	f8d8 3000 	ldr.w	r3, [r8]
 80134ae:	f8c8 3004 	str.w	r3, [r8, #4]
 80134b2:	4b77      	ldr	r3, [pc, #476]	; (8013690 <_tzset_unlocked_r+0x2d8>)
 80134b4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80134b6:	601a      	str	r2, [r3, #0]
 80134b8:	4b77      	ldr	r3, [pc, #476]	; (8013698 <_tzset_unlocked_r+0x2e0>)
 80134ba:	601c      	str	r4, [r3, #0]
 80134bc:	e796      	b.n	80133ec <_tzset_unlocked_r+0x34>
 80134be:	f7ec feb7 	bl	8000230 <strcmp>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	d198      	bne.n	80133f8 <_tzset_unlocked_r+0x40>
 80134c6:	e791      	b.n	80133ec <_tzset_unlocked_r+0x34>
 80134c8:	4621      	mov	r1, r4
 80134ca:	f001 ff80 	bl	80153ce <strcpy>
 80134ce:	e7a0      	b.n	8013412 <_tzset_unlocked_r+0x5a>
 80134d0:	2b2b      	cmp	r3, #43	; 0x2b
 80134d2:	bf08      	it	eq
 80134d4:	3701      	addeq	r7, #1
 80134d6:	f04f 0801 	mov.w	r8, #1
 80134da:	e7af      	b.n	801343c <_tzset_unlocked_r+0x84>
 80134dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134de:	f8c8 9004 	str.w	r9, [r8, #4]
 80134e2:	18fc      	adds	r4, r7, r3
 80134e4:	5cfb      	ldrb	r3, [r7, r3]
 80134e6:	2b2d      	cmp	r3, #45	; 0x2d
 80134e8:	f040 808b 	bne.w	8013602 <_tzset_unlocked_r+0x24a>
 80134ec:	3401      	adds	r4, #1
 80134ee:	f04f 37ff 	mov.w	r7, #4294967295
 80134f2:	2300      	movs	r3, #0
 80134f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 80134f8:	f8ad 301e 	strh.w	r3, [sp, #30]
 80134fc:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013500:	930a      	str	r3, [sp, #40]	; 0x28
 8013502:	e9cd a602 	strd	sl, r6, [sp, #8]
 8013506:	e9cd b600 	strd	fp, r6, [sp]
 801350a:	4967      	ldr	r1, [pc, #412]	; (80136a8 <_tzset_unlocked_r+0x2f0>)
 801350c:	4633      	mov	r3, r6
 801350e:	aa07      	add	r2, sp, #28
 8013510:	4620      	mov	r0, r4
 8013512:	f001 feeb 	bl	80152ec <siscanf>
 8013516:	2800      	cmp	r0, #0
 8013518:	dc78      	bgt.n	801360c <_tzset_unlocked_r+0x254>
 801351a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 801351c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013520:	652b      	str	r3, [r5, #80]	; 0x50
 8013522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013524:	462f      	mov	r7, r5
 8013526:	441c      	add	r4, r3
 8013528:	f04f 0900 	mov.w	r9, #0
 801352c:	7823      	ldrb	r3, [r4, #0]
 801352e:	2b2c      	cmp	r3, #44	; 0x2c
 8013530:	bf08      	it	eq
 8013532:	3401      	addeq	r4, #1
 8013534:	f894 8000 	ldrb.w	r8, [r4]
 8013538:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 801353c:	d178      	bne.n	8013630 <_tzset_unlocked_r+0x278>
 801353e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8013542:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8013546:	ab09      	add	r3, sp, #36	; 0x24
 8013548:	9300      	str	r3, [sp, #0]
 801354a:	4958      	ldr	r1, [pc, #352]	; (80136ac <_tzset_unlocked_r+0x2f4>)
 801354c:	9603      	str	r6, [sp, #12]
 801354e:	4633      	mov	r3, r6
 8013550:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8013554:	4620      	mov	r0, r4
 8013556:	f001 fec9 	bl	80152ec <siscanf>
 801355a:	2803      	cmp	r0, #3
 801355c:	f47f af46 	bne.w	80133ec <_tzset_unlocked_r+0x34>
 8013560:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8013564:	1e4b      	subs	r3, r1, #1
 8013566:	2b0b      	cmp	r3, #11
 8013568:	f63f af40 	bhi.w	80133ec <_tzset_unlocked_r+0x34>
 801356c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8013570:	1e53      	subs	r3, r2, #1
 8013572:	2b04      	cmp	r3, #4
 8013574:	f63f af3a 	bhi.w	80133ec <_tzset_unlocked_r+0x34>
 8013578:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 801357c:	2b06      	cmp	r3, #6
 801357e:	f63f af35 	bhi.w	80133ec <_tzset_unlocked_r+0x34>
 8013582:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8013586:	f887 8008 	strb.w	r8, [r7, #8]
 801358a:	617b      	str	r3, [r7, #20]
 801358c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801358e:	eb04 0803 	add.w	r8, r4, r3
 8013592:	2302      	movs	r3, #2
 8013594:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013598:	2300      	movs	r3, #0
 801359a:	f8ad 301e 	strh.w	r3, [sp, #30]
 801359e:	f8ad 3020 	strh.w	r3, [sp, #32]
 80135a2:	930a      	str	r3, [sp, #40]	; 0x28
 80135a4:	f898 3000 	ldrb.w	r3, [r8]
 80135a8:	2b2f      	cmp	r3, #47	; 0x2f
 80135aa:	d109      	bne.n	80135c0 <_tzset_unlocked_r+0x208>
 80135ac:	e9cd a602 	strd	sl, r6, [sp, #8]
 80135b0:	e9cd b600 	strd	fp, r6, [sp]
 80135b4:	493e      	ldr	r1, [pc, #248]	; (80136b0 <_tzset_unlocked_r+0x2f8>)
 80135b6:	4633      	mov	r3, r6
 80135b8:	aa07      	add	r2, sp, #28
 80135ba:	4640      	mov	r0, r8
 80135bc:	f001 fe96 	bl	80152ec <siscanf>
 80135c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80135c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80135c8:	213c      	movs	r1, #60	; 0x3c
 80135ca:	fb01 3302 	mla	r3, r1, r2, r3
 80135ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80135d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80135d6:	fb01 3302 	mla	r3, r1, r2, r3
 80135da:	61bb      	str	r3, [r7, #24]
 80135dc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80135de:	3728      	adds	r7, #40	; 0x28
 80135e0:	4444      	add	r4, r8
 80135e2:	f1b9 0f00 	cmp.w	r9, #0
 80135e6:	d020      	beq.n	801362a <_tzset_unlocked_r+0x272>
 80135e8:	6868      	ldr	r0, [r5, #4]
 80135ea:	f7ff fe29 	bl	8013240 <__tzcalc_limits>
 80135ee:	4b28      	ldr	r3, [pc, #160]	; (8013690 <_tzset_unlocked_r+0x2d8>)
 80135f0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80135f6:	1a9b      	subs	r3, r3, r2
 80135f8:	4a27      	ldr	r2, [pc, #156]	; (8013698 <_tzset_unlocked_r+0x2e0>)
 80135fa:	bf18      	it	ne
 80135fc:	2301      	movne	r3, #1
 80135fe:	6013      	str	r3, [r2, #0]
 8013600:	e6f4      	b.n	80133ec <_tzset_unlocked_r+0x34>
 8013602:	2b2b      	cmp	r3, #43	; 0x2b
 8013604:	bf08      	it	eq
 8013606:	3401      	addeq	r4, #1
 8013608:	2701      	movs	r7, #1
 801360a:	e772      	b.n	80134f2 <_tzset_unlocked_r+0x13a>
 801360c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013610:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013614:	213c      	movs	r1, #60	; 0x3c
 8013616:	fb01 3302 	mla	r3, r1, r2, r3
 801361a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801361e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8013622:	fb01 3302 	mla	r3, r1, r2, r3
 8013626:	437b      	muls	r3, r7
 8013628:	e77a      	b.n	8013520 <_tzset_unlocked_r+0x168>
 801362a:	f04f 0901 	mov.w	r9, #1
 801362e:	e77d      	b.n	801352c <_tzset_unlocked_r+0x174>
 8013630:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8013634:	bf06      	itte	eq
 8013636:	3401      	addeq	r4, #1
 8013638:	4643      	moveq	r3, r8
 801363a:	2344      	movne	r3, #68	; 0x44
 801363c:	220a      	movs	r2, #10
 801363e:	a90b      	add	r1, sp, #44	; 0x2c
 8013640:	4620      	mov	r0, r4
 8013642:	9305      	str	r3, [sp, #20]
 8013644:	f001 ff54 	bl	80154f0 <strtoul>
 8013648:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 801364c:	9b05      	ldr	r3, [sp, #20]
 801364e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8013652:	45a0      	cmp	r8, r4
 8013654:	d114      	bne.n	8013680 <_tzset_unlocked_r+0x2c8>
 8013656:	234d      	movs	r3, #77	; 0x4d
 8013658:	f1b9 0f00 	cmp.w	r9, #0
 801365c:	d107      	bne.n	801366e <_tzset_unlocked_r+0x2b6>
 801365e:	722b      	strb	r3, [r5, #8]
 8013660:	2103      	movs	r1, #3
 8013662:	2302      	movs	r3, #2
 8013664:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8013668:	f8c5 9014 	str.w	r9, [r5, #20]
 801366c:	e791      	b.n	8013592 <_tzset_unlocked_r+0x1da>
 801366e:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8013672:	220b      	movs	r2, #11
 8013674:	2301      	movs	r3, #1
 8013676:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 801367a:	2300      	movs	r3, #0
 801367c:	63eb      	str	r3, [r5, #60]	; 0x3c
 801367e:	e788      	b.n	8013592 <_tzset_unlocked_r+0x1da>
 8013680:	b280      	uxth	r0, r0
 8013682:	723b      	strb	r3, [r7, #8]
 8013684:	6178      	str	r0, [r7, #20]
 8013686:	e784      	b.n	8013592 <_tzset_unlocked_r+0x1da>
 8013688:	08017b99 	.word	0x08017b99
 801368c:	2000a7a0 	.word	0x2000a7a0
 8013690:	2000a7a8 	.word	0x2000a7a8
 8013694:	08017b9c 	.word	0x08017b9c
 8013698:	2000a7a4 	.word	0x2000a7a4
 801369c:	20000084 	.word	0x20000084
 80136a0:	2000a793 	.word	0x2000a793
 80136a4:	08017ba0 	.word	0x08017ba0
 80136a8:	08017bc3 	.word	0x08017bc3
 80136ac:	08017baf 	.word	0x08017baf
 80136b0:	08017bc2 	.word	0x08017bc2
 80136b4:	2000a788 	.word	0x2000a788

080136b8 <__assert_func>:
 80136b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136ba:	4614      	mov	r4, r2
 80136bc:	461a      	mov	r2, r3
 80136be:	4b09      	ldr	r3, [pc, #36]	; (80136e4 <__assert_func+0x2c>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	4605      	mov	r5, r0
 80136c4:	68d8      	ldr	r0, [r3, #12]
 80136c6:	b14c      	cbz	r4, 80136dc <__assert_func+0x24>
 80136c8:	4b07      	ldr	r3, [pc, #28]	; (80136e8 <__assert_func+0x30>)
 80136ca:	9100      	str	r1, [sp, #0]
 80136cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80136d0:	4906      	ldr	r1, [pc, #24]	; (80136ec <__assert_func+0x34>)
 80136d2:	462b      	mov	r3, r5
 80136d4:	f000 fe9e 	bl	8014414 <fiprintf>
 80136d8:	f001 ffe6 	bl	80156a8 <abort>
 80136dc:	4b04      	ldr	r3, [pc, #16]	; (80136f0 <__assert_func+0x38>)
 80136de:	461c      	mov	r4, r3
 80136e0:	e7f3      	b.n	80136ca <__assert_func+0x12>
 80136e2:	bf00      	nop
 80136e4:	20000020 	.word	0x20000020
 80136e8:	08017bd5 	.word	0x08017bd5
 80136ec:	08017be2 	.word	0x08017be2
 80136f0:	08017c10 	.word	0x08017c10

080136f4 <div>:
 80136f4:	2900      	cmp	r1, #0
 80136f6:	b510      	push	{r4, lr}
 80136f8:	fb91 f4f2 	sdiv	r4, r1, r2
 80136fc:	fb02 1314 	mls	r3, r2, r4, r1
 8013700:	db06      	blt.n	8013710 <div+0x1c>
 8013702:	2b00      	cmp	r3, #0
 8013704:	da01      	bge.n	801370a <div+0x16>
 8013706:	3401      	adds	r4, #1
 8013708:	1a9b      	subs	r3, r3, r2
 801370a:	e9c0 4300 	strd	r4, r3, [r0]
 801370e:	bd10      	pop	{r4, pc}
 8013710:	2b00      	cmp	r3, #0
 8013712:	bfc4      	itt	gt
 8013714:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8013718:	189b      	addgt	r3, r3, r2
 801371a:	e7f6      	b.n	801370a <div+0x16>

0801371c <quorem>:
 801371c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013720:	6903      	ldr	r3, [r0, #16]
 8013722:	690c      	ldr	r4, [r1, #16]
 8013724:	42a3      	cmp	r3, r4
 8013726:	4607      	mov	r7, r0
 8013728:	f2c0 8081 	blt.w	801382e <quorem+0x112>
 801372c:	3c01      	subs	r4, #1
 801372e:	f101 0814 	add.w	r8, r1, #20
 8013732:	f100 0514 	add.w	r5, r0, #20
 8013736:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801373a:	9301      	str	r3, [sp, #4]
 801373c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013740:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013744:	3301      	adds	r3, #1
 8013746:	429a      	cmp	r2, r3
 8013748:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801374c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013750:	fbb2 f6f3 	udiv	r6, r2, r3
 8013754:	d331      	bcc.n	80137ba <quorem+0x9e>
 8013756:	f04f 0e00 	mov.w	lr, #0
 801375a:	4640      	mov	r0, r8
 801375c:	46ac      	mov	ip, r5
 801375e:	46f2      	mov	sl, lr
 8013760:	f850 2b04 	ldr.w	r2, [r0], #4
 8013764:	b293      	uxth	r3, r2
 8013766:	fb06 e303 	mla	r3, r6, r3, lr
 801376a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801376e:	b29b      	uxth	r3, r3
 8013770:	ebaa 0303 	sub.w	r3, sl, r3
 8013774:	f8dc a000 	ldr.w	sl, [ip]
 8013778:	0c12      	lsrs	r2, r2, #16
 801377a:	fa13 f38a 	uxtah	r3, r3, sl
 801377e:	fb06 e202 	mla	r2, r6, r2, lr
 8013782:	9300      	str	r3, [sp, #0]
 8013784:	9b00      	ldr	r3, [sp, #0]
 8013786:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801378a:	b292      	uxth	r2, r2
 801378c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013790:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013794:	f8bd 3000 	ldrh.w	r3, [sp]
 8013798:	4581      	cmp	r9, r0
 801379a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801379e:	f84c 3b04 	str.w	r3, [ip], #4
 80137a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80137a6:	d2db      	bcs.n	8013760 <quorem+0x44>
 80137a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80137ac:	b92b      	cbnz	r3, 80137ba <quorem+0x9e>
 80137ae:	9b01      	ldr	r3, [sp, #4]
 80137b0:	3b04      	subs	r3, #4
 80137b2:	429d      	cmp	r5, r3
 80137b4:	461a      	mov	r2, r3
 80137b6:	d32e      	bcc.n	8013816 <quorem+0xfa>
 80137b8:	613c      	str	r4, [r7, #16]
 80137ba:	4638      	mov	r0, r7
 80137bc:	f001 f9c8 	bl	8014b50 <__mcmp>
 80137c0:	2800      	cmp	r0, #0
 80137c2:	db24      	blt.n	801380e <quorem+0xf2>
 80137c4:	3601      	adds	r6, #1
 80137c6:	4628      	mov	r0, r5
 80137c8:	f04f 0c00 	mov.w	ip, #0
 80137cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80137d0:	f8d0 e000 	ldr.w	lr, [r0]
 80137d4:	b293      	uxth	r3, r2
 80137d6:	ebac 0303 	sub.w	r3, ip, r3
 80137da:	0c12      	lsrs	r2, r2, #16
 80137dc:	fa13 f38e 	uxtah	r3, r3, lr
 80137e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80137e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137ee:	45c1      	cmp	r9, r8
 80137f0:	f840 3b04 	str.w	r3, [r0], #4
 80137f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80137f8:	d2e8      	bcs.n	80137cc <quorem+0xb0>
 80137fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013802:	b922      	cbnz	r2, 801380e <quorem+0xf2>
 8013804:	3b04      	subs	r3, #4
 8013806:	429d      	cmp	r5, r3
 8013808:	461a      	mov	r2, r3
 801380a:	d30a      	bcc.n	8013822 <quorem+0x106>
 801380c:	613c      	str	r4, [r7, #16]
 801380e:	4630      	mov	r0, r6
 8013810:	b003      	add	sp, #12
 8013812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013816:	6812      	ldr	r2, [r2, #0]
 8013818:	3b04      	subs	r3, #4
 801381a:	2a00      	cmp	r2, #0
 801381c:	d1cc      	bne.n	80137b8 <quorem+0x9c>
 801381e:	3c01      	subs	r4, #1
 8013820:	e7c7      	b.n	80137b2 <quorem+0x96>
 8013822:	6812      	ldr	r2, [r2, #0]
 8013824:	3b04      	subs	r3, #4
 8013826:	2a00      	cmp	r2, #0
 8013828:	d1f0      	bne.n	801380c <quorem+0xf0>
 801382a:	3c01      	subs	r4, #1
 801382c:	e7eb      	b.n	8013806 <quorem+0xea>
 801382e:	2000      	movs	r0, #0
 8013830:	e7ee      	b.n	8013810 <quorem+0xf4>
 8013832:	0000      	movs	r0, r0
 8013834:	0000      	movs	r0, r0
	...

08013838 <_dtoa_r>:
 8013838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801383c:	ed2d 8b04 	vpush	{d8-d9}
 8013840:	ec57 6b10 	vmov	r6, r7, d0
 8013844:	b093      	sub	sp, #76	; 0x4c
 8013846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013848:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801384c:	9106      	str	r1, [sp, #24]
 801384e:	ee10 aa10 	vmov	sl, s0
 8013852:	4604      	mov	r4, r0
 8013854:	9209      	str	r2, [sp, #36]	; 0x24
 8013856:	930c      	str	r3, [sp, #48]	; 0x30
 8013858:	46bb      	mov	fp, r7
 801385a:	b975      	cbnz	r5, 801387a <_dtoa_r+0x42>
 801385c:	2010      	movs	r0, #16
 801385e:	f7fe fc9f 	bl	80121a0 <malloc>
 8013862:	4602      	mov	r2, r0
 8013864:	6260      	str	r0, [r4, #36]	; 0x24
 8013866:	b920      	cbnz	r0, 8013872 <_dtoa_r+0x3a>
 8013868:	4ba7      	ldr	r3, [pc, #668]	; (8013b08 <_dtoa_r+0x2d0>)
 801386a:	21ea      	movs	r1, #234	; 0xea
 801386c:	48a7      	ldr	r0, [pc, #668]	; (8013b0c <_dtoa_r+0x2d4>)
 801386e:	f7ff ff23 	bl	80136b8 <__assert_func>
 8013872:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013876:	6005      	str	r5, [r0, #0]
 8013878:	60c5      	str	r5, [r0, #12]
 801387a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801387c:	6819      	ldr	r1, [r3, #0]
 801387e:	b151      	cbz	r1, 8013896 <_dtoa_r+0x5e>
 8013880:	685a      	ldr	r2, [r3, #4]
 8013882:	604a      	str	r2, [r1, #4]
 8013884:	2301      	movs	r3, #1
 8013886:	4093      	lsls	r3, r2
 8013888:	608b      	str	r3, [r1, #8]
 801388a:	4620      	mov	r0, r4
 801388c:	f000 ff1e 	bl	80146cc <_Bfree>
 8013890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013892:	2200      	movs	r2, #0
 8013894:	601a      	str	r2, [r3, #0]
 8013896:	1e3b      	subs	r3, r7, #0
 8013898:	bfaa      	itet	ge
 801389a:	2300      	movge	r3, #0
 801389c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80138a0:	f8c8 3000 	strge.w	r3, [r8]
 80138a4:	4b9a      	ldr	r3, [pc, #616]	; (8013b10 <_dtoa_r+0x2d8>)
 80138a6:	bfbc      	itt	lt
 80138a8:	2201      	movlt	r2, #1
 80138aa:	f8c8 2000 	strlt.w	r2, [r8]
 80138ae:	ea33 030b 	bics.w	r3, r3, fp
 80138b2:	d11b      	bne.n	80138ec <_dtoa_r+0xb4>
 80138b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80138ba:	6013      	str	r3, [r2, #0]
 80138bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80138c0:	4333      	orrs	r3, r6
 80138c2:	f000 8592 	beq.w	80143ea <_dtoa_r+0xbb2>
 80138c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80138c8:	b963      	cbnz	r3, 80138e4 <_dtoa_r+0xac>
 80138ca:	4b92      	ldr	r3, [pc, #584]	; (8013b14 <_dtoa_r+0x2dc>)
 80138cc:	e022      	b.n	8013914 <_dtoa_r+0xdc>
 80138ce:	4b92      	ldr	r3, [pc, #584]	; (8013b18 <_dtoa_r+0x2e0>)
 80138d0:	9301      	str	r3, [sp, #4]
 80138d2:	3308      	adds	r3, #8
 80138d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80138d6:	6013      	str	r3, [r2, #0]
 80138d8:	9801      	ldr	r0, [sp, #4]
 80138da:	b013      	add	sp, #76	; 0x4c
 80138dc:	ecbd 8b04 	vpop	{d8-d9}
 80138e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e4:	4b8b      	ldr	r3, [pc, #556]	; (8013b14 <_dtoa_r+0x2dc>)
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	3303      	adds	r3, #3
 80138ea:	e7f3      	b.n	80138d4 <_dtoa_r+0x9c>
 80138ec:	2200      	movs	r2, #0
 80138ee:	2300      	movs	r3, #0
 80138f0:	4650      	mov	r0, sl
 80138f2:	4659      	mov	r1, fp
 80138f4:	f7ed f8ca 	bl	8000a8c <__aeabi_dcmpeq>
 80138f8:	ec4b ab19 	vmov	d9, sl, fp
 80138fc:	4680      	mov	r8, r0
 80138fe:	b158      	cbz	r0, 8013918 <_dtoa_r+0xe0>
 8013900:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013902:	2301      	movs	r3, #1
 8013904:	6013      	str	r3, [r2, #0]
 8013906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013908:	2b00      	cmp	r3, #0
 801390a:	f000 856b 	beq.w	80143e4 <_dtoa_r+0xbac>
 801390e:	4883      	ldr	r0, [pc, #524]	; (8013b1c <_dtoa_r+0x2e4>)
 8013910:	6018      	str	r0, [r3, #0]
 8013912:	1e43      	subs	r3, r0, #1
 8013914:	9301      	str	r3, [sp, #4]
 8013916:	e7df      	b.n	80138d8 <_dtoa_r+0xa0>
 8013918:	ec4b ab10 	vmov	d0, sl, fp
 801391c:	aa10      	add	r2, sp, #64	; 0x40
 801391e:	a911      	add	r1, sp, #68	; 0x44
 8013920:	4620      	mov	r0, r4
 8013922:	f001 f9bb 	bl	8014c9c <__d2b>
 8013926:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801392a:	ee08 0a10 	vmov	s16, r0
 801392e:	2d00      	cmp	r5, #0
 8013930:	f000 8084 	beq.w	8013a3c <_dtoa_r+0x204>
 8013934:	ee19 3a90 	vmov	r3, s19
 8013938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801393c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013940:	4656      	mov	r6, sl
 8013942:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013946:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801394a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801394e:	4b74      	ldr	r3, [pc, #464]	; (8013b20 <_dtoa_r+0x2e8>)
 8013950:	2200      	movs	r2, #0
 8013952:	4630      	mov	r0, r6
 8013954:	4639      	mov	r1, r7
 8013956:	f7ec fc79 	bl	800024c <__aeabi_dsub>
 801395a:	a365      	add	r3, pc, #404	; (adr r3, 8013af0 <_dtoa_r+0x2b8>)
 801395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013960:	f7ec fe2c 	bl	80005bc <__aeabi_dmul>
 8013964:	a364      	add	r3, pc, #400	; (adr r3, 8013af8 <_dtoa_r+0x2c0>)
 8013966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396a:	f7ec fc71 	bl	8000250 <__adddf3>
 801396e:	4606      	mov	r6, r0
 8013970:	4628      	mov	r0, r5
 8013972:	460f      	mov	r7, r1
 8013974:	f7ec fdb8 	bl	80004e8 <__aeabi_i2d>
 8013978:	a361      	add	r3, pc, #388	; (adr r3, 8013b00 <_dtoa_r+0x2c8>)
 801397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801397e:	f7ec fe1d 	bl	80005bc <__aeabi_dmul>
 8013982:	4602      	mov	r2, r0
 8013984:	460b      	mov	r3, r1
 8013986:	4630      	mov	r0, r6
 8013988:	4639      	mov	r1, r7
 801398a:	f7ec fc61 	bl	8000250 <__adddf3>
 801398e:	4606      	mov	r6, r0
 8013990:	460f      	mov	r7, r1
 8013992:	f7ed f8c3 	bl	8000b1c <__aeabi_d2iz>
 8013996:	2200      	movs	r2, #0
 8013998:	9000      	str	r0, [sp, #0]
 801399a:	2300      	movs	r3, #0
 801399c:	4630      	mov	r0, r6
 801399e:	4639      	mov	r1, r7
 80139a0:	f7ed f87e 	bl	8000aa0 <__aeabi_dcmplt>
 80139a4:	b150      	cbz	r0, 80139bc <_dtoa_r+0x184>
 80139a6:	9800      	ldr	r0, [sp, #0]
 80139a8:	f7ec fd9e 	bl	80004e8 <__aeabi_i2d>
 80139ac:	4632      	mov	r2, r6
 80139ae:	463b      	mov	r3, r7
 80139b0:	f7ed f86c 	bl	8000a8c <__aeabi_dcmpeq>
 80139b4:	b910      	cbnz	r0, 80139bc <_dtoa_r+0x184>
 80139b6:	9b00      	ldr	r3, [sp, #0]
 80139b8:	3b01      	subs	r3, #1
 80139ba:	9300      	str	r3, [sp, #0]
 80139bc:	9b00      	ldr	r3, [sp, #0]
 80139be:	2b16      	cmp	r3, #22
 80139c0:	d85a      	bhi.n	8013a78 <_dtoa_r+0x240>
 80139c2:	9a00      	ldr	r2, [sp, #0]
 80139c4:	4b57      	ldr	r3, [pc, #348]	; (8013b24 <_dtoa_r+0x2ec>)
 80139c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80139ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139ce:	ec51 0b19 	vmov	r0, r1, d9
 80139d2:	f7ed f865 	bl	8000aa0 <__aeabi_dcmplt>
 80139d6:	2800      	cmp	r0, #0
 80139d8:	d050      	beq.n	8013a7c <_dtoa_r+0x244>
 80139da:	9b00      	ldr	r3, [sp, #0]
 80139dc:	3b01      	subs	r3, #1
 80139de:	9300      	str	r3, [sp, #0]
 80139e0:	2300      	movs	r3, #0
 80139e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80139e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80139e6:	1b5d      	subs	r5, r3, r5
 80139e8:	1e6b      	subs	r3, r5, #1
 80139ea:	9305      	str	r3, [sp, #20]
 80139ec:	bf45      	ittet	mi
 80139ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80139f2:	9304      	strmi	r3, [sp, #16]
 80139f4:	2300      	movpl	r3, #0
 80139f6:	2300      	movmi	r3, #0
 80139f8:	bf4c      	ite	mi
 80139fa:	9305      	strmi	r3, [sp, #20]
 80139fc:	9304      	strpl	r3, [sp, #16]
 80139fe:	9b00      	ldr	r3, [sp, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	db3d      	blt.n	8013a80 <_dtoa_r+0x248>
 8013a04:	9b05      	ldr	r3, [sp, #20]
 8013a06:	9a00      	ldr	r2, [sp, #0]
 8013a08:	920a      	str	r2, [sp, #40]	; 0x28
 8013a0a:	4413      	add	r3, r2
 8013a0c:	9305      	str	r3, [sp, #20]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	9307      	str	r3, [sp, #28]
 8013a12:	9b06      	ldr	r3, [sp, #24]
 8013a14:	2b09      	cmp	r3, #9
 8013a16:	f200 8089 	bhi.w	8013b2c <_dtoa_r+0x2f4>
 8013a1a:	2b05      	cmp	r3, #5
 8013a1c:	bfc4      	itt	gt
 8013a1e:	3b04      	subgt	r3, #4
 8013a20:	9306      	strgt	r3, [sp, #24]
 8013a22:	9b06      	ldr	r3, [sp, #24]
 8013a24:	f1a3 0302 	sub.w	r3, r3, #2
 8013a28:	bfcc      	ite	gt
 8013a2a:	2500      	movgt	r5, #0
 8013a2c:	2501      	movle	r5, #1
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	f200 8087 	bhi.w	8013b42 <_dtoa_r+0x30a>
 8013a34:	e8df f003 	tbb	[pc, r3]
 8013a38:	59383a2d 	.word	0x59383a2d
 8013a3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013a40:	441d      	add	r5, r3
 8013a42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013a46:	2b20      	cmp	r3, #32
 8013a48:	bfc1      	itttt	gt
 8013a4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013a4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013a52:	fa0b f303 	lslgt.w	r3, fp, r3
 8013a56:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013a5a:	bfda      	itte	le
 8013a5c:	f1c3 0320 	rsble	r3, r3, #32
 8013a60:	fa06 f003 	lslle.w	r0, r6, r3
 8013a64:	4318      	orrgt	r0, r3
 8013a66:	f7ec fd2f 	bl	80004c8 <__aeabi_ui2d>
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	4606      	mov	r6, r0
 8013a6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013a72:	3d01      	subs	r5, #1
 8013a74:	930e      	str	r3, [sp, #56]	; 0x38
 8013a76:	e76a      	b.n	801394e <_dtoa_r+0x116>
 8013a78:	2301      	movs	r3, #1
 8013a7a:	e7b2      	b.n	80139e2 <_dtoa_r+0x1aa>
 8013a7c:	900b      	str	r0, [sp, #44]	; 0x2c
 8013a7e:	e7b1      	b.n	80139e4 <_dtoa_r+0x1ac>
 8013a80:	9b04      	ldr	r3, [sp, #16]
 8013a82:	9a00      	ldr	r2, [sp, #0]
 8013a84:	1a9b      	subs	r3, r3, r2
 8013a86:	9304      	str	r3, [sp, #16]
 8013a88:	4253      	negs	r3, r2
 8013a8a:	9307      	str	r3, [sp, #28]
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8013a90:	e7bf      	b.n	8013a12 <_dtoa_r+0x1da>
 8013a92:	2300      	movs	r3, #0
 8013a94:	9308      	str	r3, [sp, #32]
 8013a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	dc55      	bgt.n	8013b48 <_dtoa_r+0x310>
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	9209      	str	r2, [sp, #36]	; 0x24
 8013aa6:	e00c      	b.n	8013ac2 <_dtoa_r+0x28a>
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	e7f3      	b.n	8013a94 <_dtoa_r+0x25c>
 8013aac:	2300      	movs	r3, #0
 8013aae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ab0:	9308      	str	r3, [sp, #32]
 8013ab2:	9b00      	ldr	r3, [sp, #0]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	9302      	str	r3, [sp, #8]
 8013ab8:	3301      	adds	r3, #1
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	9303      	str	r3, [sp, #12]
 8013abe:	bfb8      	it	lt
 8013ac0:	2301      	movlt	r3, #1
 8013ac2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013ac4:	2200      	movs	r2, #0
 8013ac6:	6042      	str	r2, [r0, #4]
 8013ac8:	2204      	movs	r2, #4
 8013aca:	f102 0614 	add.w	r6, r2, #20
 8013ace:	429e      	cmp	r6, r3
 8013ad0:	6841      	ldr	r1, [r0, #4]
 8013ad2:	d93d      	bls.n	8013b50 <_dtoa_r+0x318>
 8013ad4:	4620      	mov	r0, r4
 8013ad6:	f000 fdb9 	bl	801464c <_Balloc>
 8013ada:	9001      	str	r0, [sp, #4]
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d13b      	bne.n	8013b58 <_dtoa_r+0x320>
 8013ae0:	4b11      	ldr	r3, [pc, #68]	; (8013b28 <_dtoa_r+0x2f0>)
 8013ae2:	4602      	mov	r2, r0
 8013ae4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013ae8:	e6c0      	b.n	801386c <_dtoa_r+0x34>
 8013aea:	2301      	movs	r3, #1
 8013aec:	e7df      	b.n	8013aae <_dtoa_r+0x276>
 8013aee:	bf00      	nop
 8013af0:	636f4361 	.word	0x636f4361
 8013af4:	3fd287a7 	.word	0x3fd287a7
 8013af8:	8b60c8b3 	.word	0x8b60c8b3
 8013afc:	3fc68a28 	.word	0x3fc68a28
 8013b00:	509f79fb 	.word	0x509f79fb
 8013b04:	3fd34413 	.word	0x3fd34413
 8013b08:	080179d8 	.word	0x080179d8
 8013b0c:	08017c1e 	.word	0x08017c1e
 8013b10:	7ff00000 	.word	0x7ff00000
 8013b14:	08017c1a 	.word	0x08017c1a
 8013b18:	08017c11 	.word	0x08017c11
 8013b1c:	08017f67 	.word	0x08017f67
 8013b20:	3ff80000 	.word	0x3ff80000
 8013b24:	08017d10 	.word	0x08017d10
 8013b28:	08017c79 	.word	0x08017c79
 8013b2c:	2501      	movs	r5, #1
 8013b2e:	2300      	movs	r3, #0
 8013b30:	9306      	str	r3, [sp, #24]
 8013b32:	9508      	str	r5, [sp, #32]
 8013b34:	f04f 33ff 	mov.w	r3, #4294967295
 8013b38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	2312      	movs	r3, #18
 8013b40:	e7b0      	b.n	8013aa4 <_dtoa_r+0x26c>
 8013b42:	2301      	movs	r3, #1
 8013b44:	9308      	str	r3, [sp, #32]
 8013b46:	e7f5      	b.n	8013b34 <_dtoa_r+0x2fc>
 8013b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013b4e:	e7b8      	b.n	8013ac2 <_dtoa_r+0x28a>
 8013b50:	3101      	adds	r1, #1
 8013b52:	6041      	str	r1, [r0, #4]
 8013b54:	0052      	lsls	r2, r2, #1
 8013b56:	e7b8      	b.n	8013aca <_dtoa_r+0x292>
 8013b58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b5a:	9a01      	ldr	r2, [sp, #4]
 8013b5c:	601a      	str	r2, [r3, #0]
 8013b5e:	9b03      	ldr	r3, [sp, #12]
 8013b60:	2b0e      	cmp	r3, #14
 8013b62:	f200 809d 	bhi.w	8013ca0 <_dtoa_r+0x468>
 8013b66:	2d00      	cmp	r5, #0
 8013b68:	f000 809a 	beq.w	8013ca0 <_dtoa_r+0x468>
 8013b6c:	9b00      	ldr	r3, [sp, #0]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	dd32      	ble.n	8013bd8 <_dtoa_r+0x3a0>
 8013b72:	4ab7      	ldr	r2, [pc, #732]	; (8013e50 <_dtoa_r+0x618>)
 8013b74:	f003 030f 	and.w	r3, r3, #15
 8013b78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013b7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013b80:	9b00      	ldr	r3, [sp, #0]
 8013b82:	05d8      	lsls	r0, r3, #23
 8013b84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013b88:	d516      	bpl.n	8013bb8 <_dtoa_r+0x380>
 8013b8a:	4bb2      	ldr	r3, [pc, #712]	; (8013e54 <_dtoa_r+0x61c>)
 8013b8c:	ec51 0b19 	vmov	r0, r1, d9
 8013b90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013b94:	f7ec fe3c 	bl	8000810 <__aeabi_ddiv>
 8013b98:	f007 070f 	and.w	r7, r7, #15
 8013b9c:	4682      	mov	sl, r0
 8013b9e:	468b      	mov	fp, r1
 8013ba0:	2503      	movs	r5, #3
 8013ba2:	4eac      	ldr	r6, [pc, #688]	; (8013e54 <_dtoa_r+0x61c>)
 8013ba4:	b957      	cbnz	r7, 8013bbc <_dtoa_r+0x384>
 8013ba6:	4642      	mov	r2, r8
 8013ba8:	464b      	mov	r3, r9
 8013baa:	4650      	mov	r0, sl
 8013bac:	4659      	mov	r1, fp
 8013bae:	f7ec fe2f 	bl	8000810 <__aeabi_ddiv>
 8013bb2:	4682      	mov	sl, r0
 8013bb4:	468b      	mov	fp, r1
 8013bb6:	e028      	b.n	8013c0a <_dtoa_r+0x3d2>
 8013bb8:	2502      	movs	r5, #2
 8013bba:	e7f2      	b.n	8013ba2 <_dtoa_r+0x36a>
 8013bbc:	07f9      	lsls	r1, r7, #31
 8013bbe:	d508      	bpl.n	8013bd2 <_dtoa_r+0x39a>
 8013bc0:	4640      	mov	r0, r8
 8013bc2:	4649      	mov	r1, r9
 8013bc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013bc8:	f7ec fcf8 	bl	80005bc <__aeabi_dmul>
 8013bcc:	3501      	adds	r5, #1
 8013bce:	4680      	mov	r8, r0
 8013bd0:	4689      	mov	r9, r1
 8013bd2:	107f      	asrs	r7, r7, #1
 8013bd4:	3608      	adds	r6, #8
 8013bd6:	e7e5      	b.n	8013ba4 <_dtoa_r+0x36c>
 8013bd8:	f000 809b 	beq.w	8013d12 <_dtoa_r+0x4da>
 8013bdc:	9b00      	ldr	r3, [sp, #0]
 8013bde:	4f9d      	ldr	r7, [pc, #628]	; (8013e54 <_dtoa_r+0x61c>)
 8013be0:	425e      	negs	r6, r3
 8013be2:	4b9b      	ldr	r3, [pc, #620]	; (8013e50 <_dtoa_r+0x618>)
 8013be4:	f006 020f 	and.w	r2, r6, #15
 8013be8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bf0:	ec51 0b19 	vmov	r0, r1, d9
 8013bf4:	f7ec fce2 	bl	80005bc <__aeabi_dmul>
 8013bf8:	1136      	asrs	r6, r6, #4
 8013bfa:	4682      	mov	sl, r0
 8013bfc:	468b      	mov	fp, r1
 8013bfe:	2300      	movs	r3, #0
 8013c00:	2502      	movs	r5, #2
 8013c02:	2e00      	cmp	r6, #0
 8013c04:	d17a      	bne.n	8013cfc <_dtoa_r+0x4c4>
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d1d3      	bne.n	8013bb2 <_dtoa_r+0x37a>
 8013c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	f000 8082 	beq.w	8013d16 <_dtoa_r+0x4de>
 8013c12:	4b91      	ldr	r3, [pc, #580]	; (8013e58 <_dtoa_r+0x620>)
 8013c14:	2200      	movs	r2, #0
 8013c16:	4650      	mov	r0, sl
 8013c18:	4659      	mov	r1, fp
 8013c1a:	f7ec ff41 	bl	8000aa0 <__aeabi_dcmplt>
 8013c1e:	2800      	cmp	r0, #0
 8013c20:	d079      	beq.n	8013d16 <_dtoa_r+0x4de>
 8013c22:	9b03      	ldr	r3, [sp, #12]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d076      	beq.n	8013d16 <_dtoa_r+0x4de>
 8013c28:	9b02      	ldr	r3, [sp, #8]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	dd36      	ble.n	8013c9c <_dtoa_r+0x464>
 8013c2e:	9b00      	ldr	r3, [sp, #0]
 8013c30:	4650      	mov	r0, sl
 8013c32:	4659      	mov	r1, fp
 8013c34:	1e5f      	subs	r7, r3, #1
 8013c36:	2200      	movs	r2, #0
 8013c38:	4b88      	ldr	r3, [pc, #544]	; (8013e5c <_dtoa_r+0x624>)
 8013c3a:	f7ec fcbf 	bl	80005bc <__aeabi_dmul>
 8013c3e:	9e02      	ldr	r6, [sp, #8]
 8013c40:	4682      	mov	sl, r0
 8013c42:	468b      	mov	fp, r1
 8013c44:	3501      	adds	r5, #1
 8013c46:	4628      	mov	r0, r5
 8013c48:	f7ec fc4e 	bl	80004e8 <__aeabi_i2d>
 8013c4c:	4652      	mov	r2, sl
 8013c4e:	465b      	mov	r3, fp
 8013c50:	f7ec fcb4 	bl	80005bc <__aeabi_dmul>
 8013c54:	4b82      	ldr	r3, [pc, #520]	; (8013e60 <_dtoa_r+0x628>)
 8013c56:	2200      	movs	r2, #0
 8013c58:	f7ec fafa 	bl	8000250 <__adddf3>
 8013c5c:	46d0      	mov	r8, sl
 8013c5e:	46d9      	mov	r9, fp
 8013c60:	4682      	mov	sl, r0
 8013c62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013c66:	2e00      	cmp	r6, #0
 8013c68:	d158      	bne.n	8013d1c <_dtoa_r+0x4e4>
 8013c6a:	4b7e      	ldr	r3, [pc, #504]	; (8013e64 <_dtoa_r+0x62c>)
 8013c6c:	2200      	movs	r2, #0
 8013c6e:	4640      	mov	r0, r8
 8013c70:	4649      	mov	r1, r9
 8013c72:	f7ec faeb 	bl	800024c <__aeabi_dsub>
 8013c76:	4652      	mov	r2, sl
 8013c78:	465b      	mov	r3, fp
 8013c7a:	4680      	mov	r8, r0
 8013c7c:	4689      	mov	r9, r1
 8013c7e:	f7ec ff2d 	bl	8000adc <__aeabi_dcmpgt>
 8013c82:	2800      	cmp	r0, #0
 8013c84:	f040 8295 	bne.w	80141b2 <_dtoa_r+0x97a>
 8013c88:	4652      	mov	r2, sl
 8013c8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013c8e:	4640      	mov	r0, r8
 8013c90:	4649      	mov	r1, r9
 8013c92:	f7ec ff05 	bl	8000aa0 <__aeabi_dcmplt>
 8013c96:	2800      	cmp	r0, #0
 8013c98:	f040 8289 	bne.w	80141ae <_dtoa_r+0x976>
 8013c9c:	ec5b ab19 	vmov	sl, fp, d9
 8013ca0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	f2c0 8148 	blt.w	8013f38 <_dtoa_r+0x700>
 8013ca8:	9a00      	ldr	r2, [sp, #0]
 8013caa:	2a0e      	cmp	r2, #14
 8013cac:	f300 8144 	bgt.w	8013f38 <_dtoa_r+0x700>
 8013cb0:	4b67      	ldr	r3, [pc, #412]	; (8013e50 <_dtoa_r+0x618>)
 8013cb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013cb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f280 80d5 	bge.w	8013e6c <_dtoa_r+0x634>
 8013cc2:	9b03      	ldr	r3, [sp, #12]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	f300 80d1 	bgt.w	8013e6c <_dtoa_r+0x634>
 8013cca:	f040 826f 	bne.w	80141ac <_dtoa_r+0x974>
 8013cce:	4b65      	ldr	r3, [pc, #404]	; (8013e64 <_dtoa_r+0x62c>)
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	4640      	mov	r0, r8
 8013cd4:	4649      	mov	r1, r9
 8013cd6:	f7ec fc71 	bl	80005bc <__aeabi_dmul>
 8013cda:	4652      	mov	r2, sl
 8013cdc:	465b      	mov	r3, fp
 8013cde:	f7ec fef3 	bl	8000ac8 <__aeabi_dcmpge>
 8013ce2:	9e03      	ldr	r6, [sp, #12]
 8013ce4:	4637      	mov	r7, r6
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	f040 8245 	bne.w	8014176 <_dtoa_r+0x93e>
 8013cec:	9d01      	ldr	r5, [sp, #4]
 8013cee:	2331      	movs	r3, #49	; 0x31
 8013cf0:	f805 3b01 	strb.w	r3, [r5], #1
 8013cf4:	9b00      	ldr	r3, [sp, #0]
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	9300      	str	r3, [sp, #0]
 8013cfa:	e240      	b.n	801417e <_dtoa_r+0x946>
 8013cfc:	07f2      	lsls	r2, r6, #31
 8013cfe:	d505      	bpl.n	8013d0c <_dtoa_r+0x4d4>
 8013d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d04:	f7ec fc5a 	bl	80005bc <__aeabi_dmul>
 8013d08:	3501      	adds	r5, #1
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	1076      	asrs	r6, r6, #1
 8013d0e:	3708      	adds	r7, #8
 8013d10:	e777      	b.n	8013c02 <_dtoa_r+0x3ca>
 8013d12:	2502      	movs	r5, #2
 8013d14:	e779      	b.n	8013c0a <_dtoa_r+0x3d2>
 8013d16:	9f00      	ldr	r7, [sp, #0]
 8013d18:	9e03      	ldr	r6, [sp, #12]
 8013d1a:	e794      	b.n	8013c46 <_dtoa_r+0x40e>
 8013d1c:	9901      	ldr	r1, [sp, #4]
 8013d1e:	4b4c      	ldr	r3, [pc, #304]	; (8013e50 <_dtoa_r+0x618>)
 8013d20:	4431      	add	r1, r6
 8013d22:	910d      	str	r1, [sp, #52]	; 0x34
 8013d24:	9908      	ldr	r1, [sp, #32]
 8013d26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013d2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013d2e:	2900      	cmp	r1, #0
 8013d30:	d043      	beq.n	8013dba <_dtoa_r+0x582>
 8013d32:	494d      	ldr	r1, [pc, #308]	; (8013e68 <_dtoa_r+0x630>)
 8013d34:	2000      	movs	r0, #0
 8013d36:	f7ec fd6b 	bl	8000810 <__aeabi_ddiv>
 8013d3a:	4652      	mov	r2, sl
 8013d3c:	465b      	mov	r3, fp
 8013d3e:	f7ec fa85 	bl	800024c <__aeabi_dsub>
 8013d42:	9d01      	ldr	r5, [sp, #4]
 8013d44:	4682      	mov	sl, r0
 8013d46:	468b      	mov	fp, r1
 8013d48:	4649      	mov	r1, r9
 8013d4a:	4640      	mov	r0, r8
 8013d4c:	f7ec fee6 	bl	8000b1c <__aeabi_d2iz>
 8013d50:	4606      	mov	r6, r0
 8013d52:	f7ec fbc9 	bl	80004e8 <__aeabi_i2d>
 8013d56:	4602      	mov	r2, r0
 8013d58:	460b      	mov	r3, r1
 8013d5a:	4640      	mov	r0, r8
 8013d5c:	4649      	mov	r1, r9
 8013d5e:	f7ec fa75 	bl	800024c <__aeabi_dsub>
 8013d62:	3630      	adds	r6, #48	; 0x30
 8013d64:	f805 6b01 	strb.w	r6, [r5], #1
 8013d68:	4652      	mov	r2, sl
 8013d6a:	465b      	mov	r3, fp
 8013d6c:	4680      	mov	r8, r0
 8013d6e:	4689      	mov	r9, r1
 8013d70:	f7ec fe96 	bl	8000aa0 <__aeabi_dcmplt>
 8013d74:	2800      	cmp	r0, #0
 8013d76:	d163      	bne.n	8013e40 <_dtoa_r+0x608>
 8013d78:	4642      	mov	r2, r8
 8013d7a:	464b      	mov	r3, r9
 8013d7c:	4936      	ldr	r1, [pc, #216]	; (8013e58 <_dtoa_r+0x620>)
 8013d7e:	2000      	movs	r0, #0
 8013d80:	f7ec fa64 	bl	800024c <__aeabi_dsub>
 8013d84:	4652      	mov	r2, sl
 8013d86:	465b      	mov	r3, fp
 8013d88:	f7ec fe8a 	bl	8000aa0 <__aeabi_dcmplt>
 8013d8c:	2800      	cmp	r0, #0
 8013d8e:	f040 80b5 	bne.w	8013efc <_dtoa_r+0x6c4>
 8013d92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d94:	429d      	cmp	r5, r3
 8013d96:	d081      	beq.n	8013c9c <_dtoa_r+0x464>
 8013d98:	4b30      	ldr	r3, [pc, #192]	; (8013e5c <_dtoa_r+0x624>)
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	4650      	mov	r0, sl
 8013d9e:	4659      	mov	r1, fp
 8013da0:	f7ec fc0c 	bl	80005bc <__aeabi_dmul>
 8013da4:	4b2d      	ldr	r3, [pc, #180]	; (8013e5c <_dtoa_r+0x624>)
 8013da6:	4682      	mov	sl, r0
 8013da8:	468b      	mov	fp, r1
 8013daa:	4640      	mov	r0, r8
 8013dac:	4649      	mov	r1, r9
 8013dae:	2200      	movs	r2, #0
 8013db0:	f7ec fc04 	bl	80005bc <__aeabi_dmul>
 8013db4:	4680      	mov	r8, r0
 8013db6:	4689      	mov	r9, r1
 8013db8:	e7c6      	b.n	8013d48 <_dtoa_r+0x510>
 8013dba:	4650      	mov	r0, sl
 8013dbc:	4659      	mov	r1, fp
 8013dbe:	f7ec fbfd 	bl	80005bc <__aeabi_dmul>
 8013dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dc4:	9d01      	ldr	r5, [sp, #4]
 8013dc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8013dc8:	4682      	mov	sl, r0
 8013dca:	468b      	mov	fp, r1
 8013dcc:	4649      	mov	r1, r9
 8013dce:	4640      	mov	r0, r8
 8013dd0:	f7ec fea4 	bl	8000b1c <__aeabi_d2iz>
 8013dd4:	4606      	mov	r6, r0
 8013dd6:	f7ec fb87 	bl	80004e8 <__aeabi_i2d>
 8013dda:	3630      	adds	r6, #48	; 0x30
 8013ddc:	4602      	mov	r2, r0
 8013dde:	460b      	mov	r3, r1
 8013de0:	4640      	mov	r0, r8
 8013de2:	4649      	mov	r1, r9
 8013de4:	f7ec fa32 	bl	800024c <__aeabi_dsub>
 8013de8:	f805 6b01 	strb.w	r6, [r5], #1
 8013dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013dee:	429d      	cmp	r5, r3
 8013df0:	4680      	mov	r8, r0
 8013df2:	4689      	mov	r9, r1
 8013df4:	f04f 0200 	mov.w	r2, #0
 8013df8:	d124      	bne.n	8013e44 <_dtoa_r+0x60c>
 8013dfa:	4b1b      	ldr	r3, [pc, #108]	; (8013e68 <_dtoa_r+0x630>)
 8013dfc:	4650      	mov	r0, sl
 8013dfe:	4659      	mov	r1, fp
 8013e00:	f7ec fa26 	bl	8000250 <__adddf3>
 8013e04:	4602      	mov	r2, r0
 8013e06:	460b      	mov	r3, r1
 8013e08:	4640      	mov	r0, r8
 8013e0a:	4649      	mov	r1, r9
 8013e0c:	f7ec fe66 	bl	8000adc <__aeabi_dcmpgt>
 8013e10:	2800      	cmp	r0, #0
 8013e12:	d173      	bne.n	8013efc <_dtoa_r+0x6c4>
 8013e14:	4652      	mov	r2, sl
 8013e16:	465b      	mov	r3, fp
 8013e18:	4913      	ldr	r1, [pc, #76]	; (8013e68 <_dtoa_r+0x630>)
 8013e1a:	2000      	movs	r0, #0
 8013e1c:	f7ec fa16 	bl	800024c <__aeabi_dsub>
 8013e20:	4602      	mov	r2, r0
 8013e22:	460b      	mov	r3, r1
 8013e24:	4640      	mov	r0, r8
 8013e26:	4649      	mov	r1, r9
 8013e28:	f7ec fe3a 	bl	8000aa0 <__aeabi_dcmplt>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	f43f af35 	beq.w	8013c9c <_dtoa_r+0x464>
 8013e32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013e34:	1e6b      	subs	r3, r5, #1
 8013e36:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013e3c:	2b30      	cmp	r3, #48	; 0x30
 8013e3e:	d0f8      	beq.n	8013e32 <_dtoa_r+0x5fa>
 8013e40:	9700      	str	r7, [sp, #0]
 8013e42:	e049      	b.n	8013ed8 <_dtoa_r+0x6a0>
 8013e44:	4b05      	ldr	r3, [pc, #20]	; (8013e5c <_dtoa_r+0x624>)
 8013e46:	f7ec fbb9 	bl	80005bc <__aeabi_dmul>
 8013e4a:	4680      	mov	r8, r0
 8013e4c:	4689      	mov	r9, r1
 8013e4e:	e7bd      	b.n	8013dcc <_dtoa_r+0x594>
 8013e50:	08017d10 	.word	0x08017d10
 8013e54:	08017ce8 	.word	0x08017ce8
 8013e58:	3ff00000 	.word	0x3ff00000
 8013e5c:	40240000 	.word	0x40240000
 8013e60:	401c0000 	.word	0x401c0000
 8013e64:	40140000 	.word	0x40140000
 8013e68:	3fe00000 	.word	0x3fe00000
 8013e6c:	9d01      	ldr	r5, [sp, #4]
 8013e6e:	4656      	mov	r6, sl
 8013e70:	465f      	mov	r7, fp
 8013e72:	4642      	mov	r2, r8
 8013e74:	464b      	mov	r3, r9
 8013e76:	4630      	mov	r0, r6
 8013e78:	4639      	mov	r1, r7
 8013e7a:	f7ec fcc9 	bl	8000810 <__aeabi_ddiv>
 8013e7e:	f7ec fe4d 	bl	8000b1c <__aeabi_d2iz>
 8013e82:	4682      	mov	sl, r0
 8013e84:	f7ec fb30 	bl	80004e8 <__aeabi_i2d>
 8013e88:	4642      	mov	r2, r8
 8013e8a:	464b      	mov	r3, r9
 8013e8c:	f7ec fb96 	bl	80005bc <__aeabi_dmul>
 8013e90:	4602      	mov	r2, r0
 8013e92:	460b      	mov	r3, r1
 8013e94:	4630      	mov	r0, r6
 8013e96:	4639      	mov	r1, r7
 8013e98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013e9c:	f7ec f9d6 	bl	800024c <__aeabi_dsub>
 8013ea0:	f805 6b01 	strb.w	r6, [r5], #1
 8013ea4:	9e01      	ldr	r6, [sp, #4]
 8013ea6:	9f03      	ldr	r7, [sp, #12]
 8013ea8:	1bae      	subs	r6, r5, r6
 8013eaa:	42b7      	cmp	r7, r6
 8013eac:	4602      	mov	r2, r0
 8013eae:	460b      	mov	r3, r1
 8013eb0:	d135      	bne.n	8013f1e <_dtoa_r+0x6e6>
 8013eb2:	f7ec f9cd 	bl	8000250 <__adddf3>
 8013eb6:	4642      	mov	r2, r8
 8013eb8:	464b      	mov	r3, r9
 8013eba:	4606      	mov	r6, r0
 8013ebc:	460f      	mov	r7, r1
 8013ebe:	f7ec fe0d 	bl	8000adc <__aeabi_dcmpgt>
 8013ec2:	b9d0      	cbnz	r0, 8013efa <_dtoa_r+0x6c2>
 8013ec4:	4642      	mov	r2, r8
 8013ec6:	464b      	mov	r3, r9
 8013ec8:	4630      	mov	r0, r6
 8013eca:	4639      	mov	r1, r7
 8013ecc:	f7ec fdde 	bl	8000a8c <__aeabi_dcmpeq>
 8013ed0:	b110      	cbz	r0, 8013ed8 <_dtoa_r+0x6a0>
 8013ed2:	f01a 0f01 	tst.w	sl, #1
 8013ed6:	d110      	bne.n	8013efa <_dtoa_r+0x6c2>
 8013ed8:	4620      	mov	r0, r4
 8013eda:	ee18 1a10 	vmov	r1, s16
 8013ede:	f000 fbf5 	bl	80146cc <_Bfree>
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	9800      	ldr	r0, [sp, #0]
 8013ee6:	702b      	strb	r3, [r5, #0]
 8013ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013eea:	3001      	adds	r0, #1
 8013eec:	6018      	str	r0, [r3, #0]
 8013eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f43f acf1 	beq.w	80138d8 <_dtoa_r+0xa0>
 8013ef6:	601d      	str	r5, [r3, #0]
 8013ef8:	e4ee      	b.n	80138d8 <_dtoa_r+0xa0>
 8013efa:	9f00      	ldr	r7, [sp, #0]
 8013efc:	462b      	mov	r3, r5
 8013efe:	461d      	mov	r5, r3
 8013f00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f04:	2a39      	cmp	r2, #57	; 0x39
 8013f06:	d106      	bne.n	8013f16 <_dtoa_r+0x6de>
 8013f08:	9a01      	ldr	r2, [sp, #4]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d1f7      	bne.n	8013efe <_dtoa_r+0x6c6>
 8013f0e:	9901      	ldr	r1, [sp, #4]
 8013f10:	2230      	movs	r2, #48	; 0x30
 8013f12:	3701      	adds	r7, #1
 8013f14:	700a      	strb	r2, [r1, #0]
 8013f16:	781a      	ldrb	r2, [r3, #0]
 8013f18:	3201      	adds	r2, #1
 8013f1a:	701a      	strb	r2, [r3, #0]
 8013f1c:	e790      	b.n	8013e40 <_dtoa_r+0x608>
 8013f1e:	4ba6      	ldr	r3, [pc, #664]	; (80141b8 <_dtoa_r+0x980>)
 8013f20:	2200      	movs	r2, #0
 8013f22:	f7ec fb4b 	bl	80005bc <__aeabi_dmul>
 8013f26:	2200      	movs	r2, #0
 8013f28:	2300      	movs	r3, #0
 8013f2a:	4606      	mov	r6, r0
 8013f2c:	460f      	mov	r7, r1
 8013f2e:	f7ec fdad 	bl	8000a8c <__aeabi_dcmpeq>
 8013f32:	2800      	cmp	r0, #0
 8013f34:	d09d      	beq.n	8013e72 <_dtoa_r+0x63a>
 8013f36:	e7cf      	b.n	8013ed8 <_dtoa_r+0x6a0>
 8013f38:	9a08      	ldr	r2, [sp, #32]
 8013f3a:	2a00      	cmp	r2, #0
 8013f3c:	f000 80d7 	beq.w	80140ee <_dtoa_r+0x8b6>
 8013f40:	9a06      	ldr	r2, [sp, #24]
 8013f42:	2a01      	cmp	r2, #1
 8013f44:	f300 80ba 	bgt.w	80140bc <_dtoa_r+0x884>
 8013f48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f4a:	2a00      	cmp	r2, #0
 8013f4c:	f000 80b2 	beq.w	80140b4 <_dtoa_r+0x87c>
 8013f50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013f54:	9e07      	ldr	r6, [sp, #28]
 8013f56:	9d04      	ldr	r5, [sp, #16]
 8013f58:	9a04      	ldr	r2, [sp, #16]
 8013f5a:	441a      	add	r2, r3
 8013f5c:	9204      	str	r2, [sp, #16]
 8013f5e:	9a05      	ldr	r2, [sp, #20]
 8013f60:	2101      	movs	r1, #1
 8013f62:	441a      	add	r2, r3
 8013f64:	4620      	mov	r0, r4
 8013f66:	9205      	str	r2, [sp, #20]
 8013f68:	f000 fc68 	bl	801483c <__i2b>
 8013f6c:	4607      	mov	r7, r0
 8013f6e:	2d00      	cmp	r5, #0
 8013f70:	dd0c      	ble.n	8013f8c <_dtoa_r+0x754>
 8013f72:	9b05      	ldr	r3, [sp, #20]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	dd09      	ble.n	8013f8c <_dtoa_r+0x754>
 8013f78:	42ab      	cmp	r3, r5
 8013f7a:	9a04      	ldr	r2, [sp, #16]
 8013f7c:	bfa8      	it	ge
 8013f7e:	462b      	movge	r3, r5
 8013f80:	1ad2      	subs	r2, r2, r3
 8013f82:	9204      	str	r2, [sp, #16]
 8013f84:	9a05      	ldr	r2, [sp, #20]
 8013f86:	1aed      	subs	r5, r5, r3
 8013f88:	1ad3      	subs	r3, r2, r3
 8013f8a:	9305      	str	r3, [sp, #20]
 8013f8c:	9b07      	ldr	r3, [sp, #28]
 8013f8e:	b31b      	cbz	r3, 8013fd8 <_dtoa_r+0x7a0>
 8013f90:	9b08      	ldr	r3, [sp, #32]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	f000 80af 	beq.w	80140f6 <_dtoa_r+0x8be>
 8013f98:	2e00      	cmp	r6, #0
 8013f9a:	dd13      	ble.n	8013fc4 <_dtoa_r+0x78c>
 8013f9c:	4639      	mov	r1, r7
 8013f9e:	4632      	mov	r2, r6
 8013fa0:	4620      	mov	r0, r4
 8013fa2:	f000 fd0b 	bl	80149bc <__pow5mult>
 8013fa6:	ee18 2a10 	vmov	r2, s16
 8013faa:	4601      	mov	r1, r0
 8013fac:	4607      	mov	r7, r0
 8013fae:	4620      	mov	r0, r4
 8013fb0:	f000 fc5a 	bl	8014868 <__multiply>
 8013fb4:	ee18 1a10 	vmov	r1, s16
 8013fb8:	4680      	mov	r8, r0
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f000 fb86 	bl	80146cc <_Bfree>
 8013fc0:	ee08 8a10 	vmov	s16, r8
 8013fc4:	9b07      	ldr	r3, [sp, #28]
 8013fc6:	1b9a      	subs	r2, r3, r6
 8013fc8:	d006      	beq.n	8013fd8 <_dtoa_r+0x7a0>
 8013fca:	ee18 1a10 	vmov	r1, s16
 8013fce:	4620      	mov	r0, r4
 8013fd0:	f000 fcf4 	bl	80149bc <__pow5mult>
 8013fd4:	ee08 0a10 	vmov	s16, r0
 8013fd8:	2101      	movs	r1, #1
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f000 fc2e 	bl	801483c <__i2b>
 8013fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	4606      	mov	r6, r0
 8013fe6:	f340 8088 	ble.w	80140fa <_dtoa_r+0x8c2>
 8013fea:	461a      	mov	r2, r3
 8013fec:	4601      	mov	r1, r0
 8013fee:	4620      	mov	r0, r4
 8013ff0:	f000 fce4 	bl	80149bc <__pow5mult>
 8013ff4:	9b06      	ldr	r3, [sp, #24]
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	4606      	mov	r6, r0
 8013ffa:	f340 8081 	ble.w	8014100 <_dtoa_r+0x8c8>
 8013ffe:	f04f 0800 	mov.w	r8, #0
 8014002:	6933      	ldr	r3, [r6, #16]
 8014004:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014008:	6918      	ldr	r0, [r3, #16]
 801400a:	f000 fbc7 	bl	801479c <__hi0bits>
 801400e:	f1c0 0020 	rsb	r0, r0, #32
 8014012:	9b05      	ldr	r3, [sp, #20]
 8014014:	4418      	add	r0, r3
 8014016:	f010 001f 	ands.w	r0, r0, #31
 801401a:	f000 8092 	beq.w	8014142 <_dtoa_r+0x90a>
 801401e:	f1c0 0320 	rsb	r3, r0, #32
 8014022:	2b04      	cmp	r3, #4
 8014024:	f340 808a 	ble.w	801413c <_dtoa_r+0x904>
 8014028:	f1c0 001c 	rsb	r0, r0, #28
 801402c:	9b04      	ldr	r3, [sp, #16]
 801402e:	4403      	add	r3, r0
 8014030:	9304      	str	r3, [sp, #16]
 8014032:	9b05      	ldr	r3, [sp, #20]
 8014034:	4403      	add	r3, r0
 8014036:	4405      	add	r5, r0
 8014038:	9305      	str	r3, [sp, #20]
 801403a:	9b04      	ldr	r3, [sp, #16]
 801403c:	2b00      	cmp	r3, #0
 801403e:	dd07      	ble.n	8014050 <_dtoa_r+0x818>
 8014040:	ee18 1a10 	vmov	r1, s16
 8014044:	461a      	mov	r2, r3
 8014046:	4620      	mov	r0, r4
 8014048:	f000 fd12 	bl	8014a70 <__lshift>
 801404c:	ee08 0a10 	vmov	s16, r0
 8014050:	9b05      	ldr	r3, [sp, #20]
 8014052:	2b00      	cmp	r3, #0
 8014054:	dd05      	ble.n	8014062 <_dtoa_r+0x82a>
 8014056:	4631      	mov	r1, r6
 8014058:	461a      	mov	r2, r3
 801405a:	4620      	mov	r0, r4
 801405c:	f000 fd08 	bl	8014a70 <__lshift>
 8014060:	4606      	mov	r6, r0
 8014062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014064:	2b00      	cmp	r3, #0
 8014066:	d06e      	beq.n	8014146 <_dtoa_r+0x90e>
 8014068:	ee18 0a10 	vmov	r0, s16
 801406c:	4631      	mov	r1, r6
 801406e:	f000 fd6f 	bl	8014b50 <__mcmp>
 8014072:	2800      	cmp	r0, #0
 8014074:	da67      	bge.n	8014146 <_dtoa_r+0x90e>
 8014076:	9b00      	ldr	r3, [sp, #0]
 8014078:	3b01      	subs	r3, #1
 801407a:	ee18 1a10 	vmov	r1, s16
 801407e:	9300      	str	r3, [sp, #0]
 8014080:	220a      	movs	r2, #10
 8014082:	2300      	movs	r3, #0
 8014084:	4620      	mov	r0, r4
 8014086:	f000 fb43 	bl	8014710 <__multadd>
 801408a:	9b08      	ldr	r3, [sp, #32]
 801408c:	ee08 0a10 	vmov	s16, r0
 8014090:	2b00      	cmp	r3, #0
 8014092:	f000 81b1 	beq.w	80143f8 <_dtoa_r+0xbc0>
 8014096:	2300      	movs	r3, #0
 8014098:	4639      	mov	r1, r7
 801409a:	220a      	movs	r2, #10
 801409c:	4620      	mov	r0, r4
 801409e:	f000 fb37 	bl	8014710 <__multadd>
 80140a2:	9b02      	ldr	r3, [sp, #8]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	4607      	mov	r7, r0
 80140a8:	f300 808e 	bgt.w	80141c8 <_dtoa_r+0x990>
 80140ac:	9b06      	ldr	r3, [sp, #24]
 80140ae:	2b02      	cmp	r3, #2
 80140b0:	dc51      	bgt.n	8014156 <_dtoa_r+0x91e>
 80140b2:	e089      	b.n	80141c8 <_dtoa_r+0x990>
 80140b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80140ba:	e74b      	b.n	8013f54 <_dtoa_r+0x71c>
 80140bc:	9b03      	ldr	r3, [sp, #12]
 80140be:	1e5e      	subs	r6, r3, #1
 80140c0:	9b07      	ldr	r3, [sp, #28]
 80140c2:	42b3      	cmp	r3, r6
 80140c4:	bfbf      	itttt	lt
 80140c6:	9b07      	ldrlt	r3, [sp, #28]
 80140c8:	9607      	strlt	r6, [sp, #28]
 80140ca:	1af2      	sublt	r2, r6, r3
 80140cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80140ce:	bfb6      	itet	lt
 80140d0:	189b      	addlt	r3, r3, r2
 80140d2:	1b9e      	subge	r6, r3, r6
 80140d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80140d6:	9b03      	ldr	r3, [sp, #12]
 80140d8:	bfb8      	it	lt
 80140da:	2600      	movlt	r6, #0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	bfb7      	itett	lt
 80140e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80140e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80140e8:	1a9d      	sublt	r5, r3, r2
 80140ea:	2300      	movlt	r3, #0
 80140ec:	e734      	b.n	8013f58 <_dtoa_r+0x720>
 80140ee:	9e07      	ldr	r6, [sp, #28]
 80140f0:	9d04      	ldr	r5, [sp, #16]
 80140f2:	9f08      	ldr	r7, [sp, #32]
 80140f4:	e73b      	b.n	8013f6e <_dtoa_r+0x736>
 80140f6:	9a07      	ldr	r2, [sp, #28]
 80140f8:	e767      	b.n	8013fca <_dtoa_r+0x792>
 80140fa:	9b06      	ldr	r3, [sp, #24]
 80140fc:	2b01      	cmp	r3, #1
 80140fe:	dc18      	bgt.n	8014132 <_dtoa_r+0x8fa>
 8014100:	f1ba 0f00 	cmp.w	sl, #0
 8014104:	d115      	bne.n	8014132 <_dtoa_r+0x8fa>
 8014106:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801410a:	b993      	cbnz	r3, 8014132 <_dtoa_r+0x8fa>
 801410c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014110:	0d1b      	lsrs	r3, r3, #20
 8014112:	051b      	lsls	r3, r3, #20
 8014114:	b183      	cbz	r3, 8014138 <_dtoa_r+0x900>
 8014116:	9b04      	ldr	r3, [sp, #16]
 8014118:	3301      	adds	r3, #1
 801411a:	9304      	str	r3, [sp, #16]
 801411c:	9b05      	ldr	r3, [sp, #20]
 801411e:	3301      	adds	r3, #1
 8014120:	9305      	str	r3, [sp, #20]
 8014122:	f04f 0801 	mov.w	r8, #1
 8014126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014128:	2b00      	cmp	r3, #0
 801412a:	f47f af6a 	bne.w	8014002 <_dtoa_r+0x7ca>
 801412e:	2001      	movs	r0, #1
 8014130:	e76f      	b.n	8014012 <_dtoa_r+0x7da>
 8014132:	f04f 0800 	mov.w	r8, #0
 8014136:	e7f6      	b.n	8014126 <_dtoa_r+0x8ee>
 8014138:	4698      	mov	r8, r3
 801413a:	e7f4      	b.n	8014126 <_dtoa_r+0x8ee>
 801413c:	f43f af7d 	beq.w	801403a <_dtoa_r+0x802>
 8014140:	4618      	mov	r0, r3
 8014142:	301c      	adds	r0, #28
 8014144:	e772      	b.n	801402c <_dtoa_r+0x7f4>
 8014146:	9b03      	ldr	r3, [sp, #12]
 8014148:	2b00      	cmp	r3, #0
 801414a:	dc37      	bgt.n	80141bc <_dtoa_r+0x984>
 801414c:	9b06      	ldr	r3, [sp, #24]
 801414e:	2b02      	cmp	r3, #2
 8014150:	dd34      	ble.n	80141bc <_dtoa_r+0x984>
 8014152:	9b03      	ldr	r3, [sp, #12]
 8014154:	9302      	str	r3, [sp, #8]
 8014156:	9b02      	ldr	r3, [sp, #8]
 8014158:	b96b      	cbnz	r3, 8014176 <_dtoa_r+0x93e>
 801415a:	4631      	mov	r1, r6
 801415c:	2205      	movs	r2, #5
 801415e:	4620      	mov	r0, r4
 8014160:	f000 fad6 	bl	8014710 <__multadd>
 8014164:	4601      	mov	r1, r0
 8014166:	4606      	mov	r6, r0
 8014168:	ee18 0a10 	vmov	r0, s16
 801416c:	f000 fcf0 	bl	8014b50 <__mcmp>
 8014170:	2800      	cmp	r0, #0
 8014172:	f73f adbb 	bgt.w	8013cec <_dtoa_r+0x4b4>
 8014176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014178:	9d01      	ldr	r5, [sp, #4]
 801417a:	43db      	mvns	r3, r3
 801417c:	9300      	str	r3, [sp, #0]
 801417e:	f04f 0800 	mov.w	r8, #0
 8014182:	4631      	mov	r1, r6
 8014184:	4620      	mov	r0, r4
 8014186:	f000 faa1 	bl	80146cc <_Bfree>
 801418a:	2f00      	cmp	r7, #0
 801418c:	f43f aea4 	beq.w	8013ed8 <_dtoa_r+0x6a0>
 8014190:	f1b8 0f00 	cmp.w	r8, #0
 8014194:	d005      	beq.n	80141a2 <_dtoa_r+0x96a>
 8014196:	45b8      	cmp	r8, r7
 8014198:	d003      	beq.n	80141a2 <_dtoa_r+0x96a>
 801419a:	4641      	mov	r1, r8
 801419c:	4620      	mov	r0, r4
 801419e:	f000 fa95 	bl	80146cc <_Bfree>
 80141a2:	4639      	mov	r1, r7
 80141a4:	4620      	mov	r0, r4
 80141a6:	f000 fa91 	bl	80146cc <_Bfree>
 80141aa:	e695      	b.n	8013ed8 <_dtoa_r+0x6a0>
 80141ac:	2600      	movs	r6, #0
 80141ae:	4637      	mov	r7, r6
 80141b0:	e7e1      	b.n	8014176 <_dtoa_r+0x93e>
 80141b2:	9700      	str	r7, [sp, #0]
 80141b4:	4637      	mov	r7, r6
 80141b6:	e599      	b.n	8013cec <_dtoa_r+0x4b4>
 80141b8:	40240000 	.word	0x40240000
 80141bc:	9b08      	ldr	r3, [sp, #32]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	f000 80ca 	beq.w	8014358 <_dtoa_r+0xb20>
 80141c4:	9b03      	ldr	r3, [sp, #12]
 80141c6:	9302      	str	r3, [sp, #8]
 80141c8:	2d00      	cmp	r5, #0
 80141ca:	dd05      	ble.n	80141d8 <_dtoa_r+0x9a0>
 80141cc:	4639      	mov	r1, r7
 80141ce:	462a      	mov	r2, r5
 80141d0:	4620      	mov	r0, r4
 80141d2:	f000 fc4d 	bl	8014a70 <__lshift>
 80141d6:	4607      	mov	r7, r0
 80141d8:	f1b8 0f00 	cmp.w	r8, #0
 80141dc:	d05b      	beq.n	8014296 <_dtoa_r+0xa5e>
 80141de:	6879      	ldr	r1, [r7, #4]
 80141e0:	4620      	mov	r0, r4
 80141e2:	f000 fa33 	bl	801464c <_Balloc>
 80141e6:	4605      	mov	r5, r0
 80141e8:	b928      	cbnz	r0, 80141f6 <_dtoa_r+0x9be>
 80141ea:	4b87      	ldr	r3, [pc, #540]	; (8014408 <_dtoa_r+0xbd0>)
 80141ec:	4602      	mov	r2, r0
 80141ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80141f2:	f7ff bb3b 	b.w	801386c <_dtoa_r+0x34>
 80141f6:	693a      	ldr	r2, [r7, #16]
 80141f8:	3202      	adds	r2, #2
 80141fa:	0092      	lsls	r2, r2, #2
 80141fc:	f107 010c 	add.w	r1, r7, #12
 8014200:	300c      	adds	r0, #12
 8014202:	f7fd ffdd 	bl	80121c0 <memcpy>
 8014206:	2201      	movs	r2, #1
 8014208:	4629      	mov	r1, r5
 801420a:	4620      	mov	r0, r4
 801420c:	f000 fc30 	bl	8014a70 <__lshift>
 8014210:	9b01      	ldr	r3, [sp, #4]
 8014212:	f103 0901 	add.w	r9, r3, #1
 8014216:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801421a:	4413      	add	r3, r2
 801421c:	9305      	str	r3, [sp, #20]
 801421e:	f00a 0301 	and.w	r3, sl, #1
 8014222:	46b8      	mov	r8, r7
 8014224:	9304      	str	r3, [sp, #16]
 8014226:	4607      	mov	r7, r0
 8014228:	4631      	mov	r1, r6
 801422a:	ee18 0a10 	vmov	r0, s16
 801422e:	f7ff fa75 	bl	801371c <quorem>
 8014232:	4641      	mov	r1, r8
 8014234:	9002      	str	r0, [sp, #8]
 8014236:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801423a:	ee18 0a10 	vmov	r0, s16
 801423e:	f000 fc87 	bl	8014b50 <__mcmp>
 8014242:	463a      	mov	r2, r7
 8014244:	9003      	str	r0, [sp, #12]
 8014246:	4631      	mov	r1, r6
 8014248:	4620      	mov	r0, r4
 801424a:	f000 fc9d 	bl	8014b88 <__mdiff>
 801424e:	68c2      	ldr	r2, [r0, #12]
 8014250:	f109 3bff 	add.w	fp, r9, #4294967295
 8014254:	4605      	mov	r5, r0
 8014256:	bb02      	cbnz	r2, 801429a <_dtoa_r+0xa62>
 8014258:	4601      	mov	r1, r0
 801425a:	ee18 0a10 	vmov	r0, s16
 801425e:	f000 fc77 	bl	8014b50 <__mcmp>
 8014262:	4602      	mov	r2, r0
 8014264:	4629      	mov	r1, r5
 8014266:	4620      	mov	r0, r4
 8014268:	9207      	str	r2, [sp, #28]
 801426a:	f000 fa2f 	bl	80146cc <_Bfree>
 801426e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014272:	ea43 0102 	orr.w	r1, r3, r2
 8014276:	9b04      	ldr	r3, [sp, #16]
 8014278:	430b      	orrs	r3, r1
 801427a:	464d      	mov	r5, r9
 801427c:	d10f      	bne.n	801429e <_dtoa_r+0xa66>
 801427e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014282:	d02a      	beq.n	80142da <_dtoa_r+0xaa2>
 8014284:	9b03      	ldr	r3, [sp, #12]
 8014286:	2b00      	cmp	r3, #0
 8014288:	dd02      	ble.n	8014290 <_dtoa_r+0xa58>
 801428a:	9b02      	ldr	r3, [sp, #8]
 801428c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014290:	f88b a000 	strb.w	sl, [fp]
 8014294:	e775      	b.n	8014182 <_dtoa_r+0x94a>
 8014296:	4638      	mov	r0, r7
 8014298:	e7ba      	b.n	8014210 <_dtoa_r+0x9d8>
 801429a:	2201      	movs	r2, #1
 801429c:	e7e2      	b.n	8014264 <_dtoa_r+0xa2c>
 801429e:	9b03      	ldr	r3, [sp, #12]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	db04      	blt.n	80142ae <_dtoa_r+0xa76>
 80142a4:	9906      	ldr	r1, [sp, #24]
 80142a6:	430b      	orrs	r3, r1
 80142a8:	9904      	ldr	r1, [sp, #16]
 80142aa:	430b      	orrs	r3, r1
 80142ac:	d122      	bne.n	80142f4 <_dtoa_r+0xabc>
 80142ae:	2a00      	cmp	r2, #0
 80142b0:	ddee      	ble.n	8014290 <_dtoa_r+0xa58>
 80142b2:	ee18 1a10 	vmov	r1, s16
 80142b6:	2201      	movs	r2, #1
 80142b8:	4620      	mov	r0, r4
 80142ba:	f000 fbd9 	bl	8014a70 <__lshift>
 80142be:	4631      	mov	r1, r6
 80142c0:	ee08 0a10 	vmov	s16, r0
 80142c4:	f000 fc44 	bl	8014b50 <__mcmp>
 80142c8:	2800      	cmp	r0, #0
 80142ca:	dc03      	bgt.n	80142d4 <_dtoa_r+0xa9c>
 80142cc:	d1e0      	bne.n	8014290 <_dtoa_r+0xa58>
 80142ce:	f01a 0f01 	tst.w	sl, #1
 80142d2:	d0dd      	beq.n	8014290 <_dtoa_r+0xa58>
 80142d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80142d8:	d1d7      	bne.n	801428a <_dtoa_r+0xa52>
 80142da:	2339      	movs	r3, #57	; 0x39
 80142dc:	f88b 3000 	strb.w	r3, [fp]
 80142e0:	462b      	mov	r3, r5
 80142e2:	461d      	mov	r5, r3
 80142e4:	3b01      	subs	r3, #1
 80142e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80142ea:	2a39      	cmp	r2, #57	; 0x39
 80142ec:	d071      	beq.n	80143d2 <_dtoa_r+0xb9a>
 80142ee:	3201      	adds	r2, #1
 80142f0:	701a      	strb	r2, [r3, #0]
 80142f2:	e746      	b.n	8014182 <_dtoa_r+0x94a>
 80142f4:	2a00      	cmp	r2, #0
 80142f6:	dd07      	ble.n	8014308 <_dtoa_r+0xad0>
 80142f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80142fc:	d0ed      	beq.n	80142da <_dtoa_r+0xaa2>
 80142fe:	f10a 0301 	add.w	r3, sl, #1
 8014302:	f88b 3000 	strb.w	r3, [fp]
 8014306:	e73c      	b.n	8014182 <_dtoa_r+0x94a>
 8014308:	9b05      	ldr	r3, [sp, #20]
 801430a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801430e:	4599      	cmp	r9, r3
 8014310:	d047      	beq.n	80143a2 <_dtoa_r+0xb6a>
 8014312:	ee18 1a10 	vmov	r1, s16
 8014316:	2300      	movs	r3, #0
 8014318:	220a      	movs	r2, #10
 801431a:	4620      	mov	r0, r4
 801431c:	f000 f9f8 	bl	8014710 <__multadd>
 8014320:	45b8      	cmp	r8, r7
 8014322:	ee08 0a10 	vmov	s16, r0
 8014326:	f04f 0300 	mov.w	r3, #0
 801432a:	f04f 020a 	mov.w	r2, #10
 801432e:	4641      	mov	r1, r8
 8014330:	4620      	mov	r0, r4
 8014332:	d106      	bne.n	8014342 <_dtoa_r+0xb0a>
 8014334:	f000 f9ec 	bl	8014710 <__multadd>
 8014338:	4680      	mov	r8, r0
 801433a:	4607      	mov	r7, r0
 801433c:	f109 0901 	add.w	r9, r9, #1
 8014340:	e772      	b.n	8014228 <_dtoa_r+0x9f0>
 8014342:	f000 f9e5 	bl	8014710 <__multadd>
 8014346:	4639      	mov	r1, r7
 8014348:	4680      	mov	r8, r0
 801434a:	2300      	movs	r3, #0
 801434c:	220a      	movs	r2, #10
 801434e:	4620      	mov	r0, r4
 8014350:	f000 f9de 	bl	8014710 <__multadd>
 8014354:	4607      	mov	r7, r0
 8014356:	e7f1      	b.n	801433c <_dtoa_r+0xb04>
 8014358:	9b03      	ldr	r3, [sp, #12]
 801435a:	9302      	str	r3, [sp, #8]
 801435c:	9d01      	ldr	r5, [sp, #4]
 801435e:	ee18 0a10 	vmov	r0, s16
 8014362:	4631      	mov	r1, r6
 8014364:	f7ff f9da 	bl	801371c <quorem>
 8014368:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801436c:	9b01      	ldr	r3, [sp, #4]
 801436e:	f805 ab01 	strb.w	sl, [r5], #1
 8014372:	1aea      	subs	r2, r5, r3
 8014374:	9b02      	ldr	r3, [sp, #8]
 8014376:	4293      	cmp	r3, r2
 8014378:	dd09      	ble.n	801438e <_dtoa_r+0xb56>
 801437a:	ee18 1a10 	vmov	r1, s16
 801437e:	2300      	movs	r3, #0
 8014380:	220a      	movs	r2, #10
 8014382:	4620      	mov	r0, r4
 8014384:	f000 f9c4 	bl	8014710 <__multadd>
 8014388:	ee08 0a10 	vmov	s16, r0
 801438c:	e7e7      	b.n	801435e <_dtoa_r+0xb26>
 801438e:	9b02      	ldr	r3, [sp, #8]
 8014390:	2b00      	cmp	r3, #0
 8014392:	bfc8      	it	gt
 8014394:	461d      	movgt	r5, r3
 8014396:	9b01      	ldr	r3, [sp, #4]
 8014398:	bfd8      	it	le
 801439a:	2501      	movle	r5, #1
 801439c:	441d      	add	r5, r3
 801439e:	f04f 0800 	mov.w	r8, #0
 80143a2:	ee18 1a10 	vmov	r1, s16
 80143a6:	2201      	movs	r2, #1
 80143a8:	4620      	mov	r0, r4
 80143aa:	f000 fb61 	bl	8014a70 <__lshift>
 80143ae:	4631      	mov	r1, r6
 80143b0:	ee08 0a10 	vmov	s16, r0
 80143b4:	f000 fbcc 	bl	8014b50 <__mcmp>
 80143b8:	2800      	cmp	r0, #0
 80143ba:	dc91      	bgt.n	80142e0 <_dtoa_r+0xaa8>
 80143bc:	d102      	bne.n	80143c4 <_dtoa_r+0xb8c>
 80143be:	f01a 0f01 	tst.w	sl, #1
 80143c2:	d18d      	bne.n	80142e0 <_dtoa_r+0xaa8>
 80143c4:	462b      	mov	r3, r5
 80143c6:	461d      	mov	r5, r3
 80143c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143cc:	2a30      	cmp	r2, #48	; 0x30
 80143ce:	d0fa      	beq.n	80143c6 <_dtoa_r+0xb8e>
 80143d0:	e6d7      	b.n	8014182 <_dtoa_r+0x94a>
 80143d2:	9a01      	ldr	r2, [sp, #4]
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d184      	bne.n	80142e2 <_dtoa_r+0xaaa>
 80143d8:	9b00      	ldr	r3, [sp, #0]
 80143da:	3301      	adds	r3, #1
 80143dc:	9300      	str	r3, [sp, #0]
 80143de:	2331      	movs	r3, #49	; 0x31
 80143e0:	7013      	strb	r3, [r2, #0]
 80143e2:	e6ce      	b.n	8014182 <_dtoa_r+0x94a>
 80143e4:	4b09      	ldr	r3, [pc, #36]	; (801440c <_dtoa_r+0xbd4>)
 80143e6:	f7ff ba95 	b.w	8013914 <_dtoa_r+0xdc>
 80143ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	f47f aa6e 	bne.w	80138ce <_dtoa_r+0x96>
 80143f2:	4b07      	ldr	r3, [pc, #28]	; (8014410 <_dtoa_r+0xbd8>)
 80143f4:	f7ff ba8e 	b.w	8013914 <_dtoa_r+0xdc>
 80143f8:	9b02      	ldr	r3, [sp, #8]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	dcae      	bgt.n	801435c <_dtoa_r+0xb24>
 80143fe:	9b06      	ldr	r3, [sp, #24]
 8014400:	2b02      	cmp	r3, #2
 8014402:	f73f aea8 	bgt.w	8014156 <_dtoa_r+0x91e>
 8014406:	e7a9      	b.n	801435c <_dtoa_r+0xb24>
 8014408:	08017c79 	.word	0x08017c79
 801440c:	08017f66 	.word	0x08017f66
 8014410:	08017c11 	.word	0x08017c11

08014414 <fiprintf>:
 8014414:	b40e      	push	{r1, r2, r3}
 8014416:	b503      	push	{r0, r1, lr}
 8014418:	4601      	mov	r1, r0
 801441a:	ab03      	add	r3, sp, #12
 801441c:	4805      	ldr	r0, [pc, #20]	; (8014434 <fiprintf+0x20>)
 801441e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014422:	6800      	ldr	r0, [r0, #0]
 8014424:	9301      	str	r3, [sp, #4]
 8014426:	f000 fe31 	bl	801508c <_vfiprintf_r>
 801442a:	b002      	add	sp, #8
 801442c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014430:	b003      	add	sp, #12
 8014432:	4770      	bx	lr
 8014434:	20000020 	.word	0x20000020

08014438 <_findenv_r>:
 8014438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801443c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 80144ac <_findenv_r+0x74>
 8014440:	4607      	mov	r7, r0
 8014442:	4689      	mov	r9, r1
 8014444:	4616      	mov	r6, r2
 8014446:	f001 f947 	bl	80156d8 <__env_lock>
 801444a:	f8da 4000 	ldr.w	r4, [sl]
 801444e:	b134      	cbz	r4, 801445e <_findenv_r+0x26>
 8014450:	464b      	mov	r3, r9
 8014452:	4698      	mov	r8, r3
 8014454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014458:	b13a      	cbz	r2, 801446a <_findenv_r+0x32>
 801445a:	2a3d      	cmp	r2, #61	; 0x3d
 801445c:	d1f9      	bne.n	8014452 <_findenv_r+0x1a>
 801445e:	4638      	mov	r0, r7
 8014460:	f001 f940 	bl	80156e4 <__env_unlock>
 8014464:	2000      	movs	r0, #0
 8014466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801446a:	eba8 0809 	sub.w	r8, r8, r9
 801446e:	46a3      	mov	fp, r4
 8014470:	f854 0b04 	ldr.w	r0, [r4], #4
 8014474:	2800      	cmp	r0, #0
 8014476:	d0f2      	beq.n	801445e <_findenv_r+0x26>
 8014478:	4642      	mov	r2, r8
 801447a:	4649      	mov	r1, r9
 801447c:	f000 ffaf 	bl	80153de <strncmp>
 8014480:	2800      	cmp	r0, #0
 8014482:	d1f4      	bne.n	801446e <_findenv_r+0x36>
 8014484:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8014488:	eb03 0508 	add.w	r5, r3, r8
 801448c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8014490:	2b3d      	cmp	r3, #61	; 0x3d
 8014492:	d1ec      	bne.n	801446e <_findenv_r+0x36>
 8014494:	f8da 3000 	ldr.w	r3, [sl]
 8014498:	ebab 0303 	sub.w	r3, fp, r3
 801449c:	109b      	asrs	r3, r3, #2
 801449e:	4638      	mov	r0, r7
 80144a0:	6033      	str	r3, [r6, #0]
 80144a2:	f001 f91f 	bl	80156e4 <__env_unlock>
 80144a6:	1c68      	adds	r0, r5, #1
 80144a8:	e7dd      	b.n	8014466 <_findenv_r+0x2e>
 80144aa:	bf00      	nop
 80144ac:	20000010 	.word	0x20000010

080144b0 <_getenv_r>:
 80144b0:	b507      	push	{r0, r1, r2, lr}
 80144b2:	aa01      	add	r2, sp, #4
 80144b4:	f7ff ffc0 	bl	8014438 <_findenv_r>
 80144b8:	b003      	add	sp, #12
 80144ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080144c0 <__gettzinfo>:
 80144c0:	4800      	ldr	r0, [pc, #0]	; (80144c4 <__gettzinfo+0x4>)
 80144c2:	4770      	bx	lr
 80144c4:	20000090 	.word	0x20000090

080144c8 <gmtime_r>:
 80144c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80144cc:	e9d0 6700 	ldrd	r6, r7, [r0]
 80144d0:	460c      	mov	r4, r1
 80144d2:	4a4f      	ldr	r2, [pc, #316]	; (8014610 <gmtime_r+0x148>)
 80144d4:	2300      	movs	r3, #0
 80144d6:	4630      	mov	r0, r6
 80144d8:	4639      	mov	r1, r7
 80144da:	f7ec fbb7 	bl	8000c4c <__aeabi_ldivmod>
 80144de:	4639      	mov	r1, r7
 80144e0:	4605      	mov	r5, r0
 80144e2:	4a4b      	ldr	r2, [pc, #300]	; (8014610 <gmtime_r+0x148>)
 80144e4:	4630      	mov	r0, r6
 80144e6:	2300      	movs	r3, #0
 80144e8:	f7ec fbb0 	bl	8000c4c <__aeabi_ldivmod>
 80144ec:	2a00      	cmp	r2, #0
 80144ee:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 80144f2:	bfb7      	itett	lt
 80144f4:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80144f8:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 80144fc:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8014500:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8014504:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8014508:	fbb2 f1f0 	udiv	r1, r2, r0
 801450c:	fb00 2211 	mls	r2, r0, r1, r2
 8014510:	203c      	movs	r0, #60	; 0x3c
 8014512:	60a1      	str	r1, [r4, #8]
 8014514:	fbb2 f1f0 	udiv	r1, r2, r0
 8014518:	fb00 2211 	mls	r2, r0, r1, r2
 801451c:	6061      	str	r1, [r4, #4]
 801451e:	6022      	str	r2, [r4, #0]
 8014520:	2107      	movs	r1, #7
 8014522:	1cda      	adds	r2, r3, #3
 8014524:	fb92 f1f1 	sdiv	r1, r2, r1
 8014528:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801452c:	1a52      	subs	r2, r2, r1
 801452e:	bf48      	it	mi
 8014530:	3207      	addmi	r2, #7
 8014532:	4d38      	ldr	r5, [pc, #224]	; (8014614 <gmtime_r+0x14c>)
 8014534:	4838      	ldr	r0, [pc, #224]	; (8014618 <gmtime_r+0x150>)
 8014536:	61a2      	str	r2, [r4, #24]
 8014538:	2b00      	cmp	r3, #0
 801453a:	bfb7      	itett	lt
 801453c:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8014540:	fb93 f5f5 	sdivge	r5, r3, r5
 8014544:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 8014548:	fb92 f5f5 	sdivlt	r5, r2, r5
 801454c:	fb00 3005 	mla	r0, r0, r5, r3
 8014550:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8014554:	fbb0 f2f2 	udiv	r2, r0, r2
 8014558:	4402      	add	r2, r0
 801455a:	f240 53b4 	movw	r3, #1460	; 0x5b4
 801455e:	fbb0 f1f3 	udiv	r1, r0, r3
 8014562:	1a52      	subs	r2, r2, r1
 8014564:	f240 1c6d 	movw	ip, #365	; 0x16d
 8014568:	492c      	ldr	r1, [pc, #176]	; (801461c <gmtime_r+0x154>)
 801456a:	fbb0 f1f1 	udiv	r1, r0, r1
 801456e:	2764      	movs	r7, #100	; 0x64
 8014570:	1a52      	subs	r2, r2, r1
 8014572:	fbb2 f1fc 	udiv	r1, r2, ip
 8014576:	fbb2 f3f3 	udiv	r3, r2, r3
 801457a:	fbb1 f6f7 	udiv	r6, r1, r7
 801457e:	1af3      	subs	r3, r6, r3
 8014580:	4403      	add	r3, r0
 8014582:	fb0c 3311 	mls	r3, ip, r1, r3
 8014586:	2299      	movs	r2, #153	; 0x99
 8014588:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 801458c:	f10e 0e02 	add.w	lr, lr, #2
 8014590:	f103 0c01 	add.w	ip, r3, #1
 8014594:	fbbe f0f2 	udiv	r0, lr, r2
 8014598:	4342      	muls	r2, r0
 801459a:	3202      	adds	r2, #2
 801459c:	f04f 0805 	mov.w	r8, #5
 80145a0:	fbb2 f2f8 	udiv	r2, r2, r8
 80145a4:	ebac 0c02 	sub.w	ip, ip, r2
 80145a8:	f240 52f9 	movw	r2, #1529	; 0x5f9
 80145ac:	4596      	cmp	lr, r2
 80145ae:	bf94      	ite	ls
 80145b0:	2202      	movls	r2, #2
 80145b2:	f06f 0209 	mvnhi.w	r2, #9
 80145b6:	4410      	add	r0, r2
 80145b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80145bc:	fb02 1505 	mla	r5, r2, r5, r1
 80145c0:	2801      	cmp	r0, #1
 80145c2:	bf98      	it	ls
 80145c4:	3501      	addls	r5, #1
 80145c6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80145ca:	d30d      	bcc.n	80145e8 <gmtime_r+0x120>
 80145cc:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80145d0:	61e3      	str	r3, [r4, #28]
 80145d2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80145d6:	2300      	movs	r3, #0
 80145d8:	e9c4 0504 	strd	r0, r5, [r4, #16]
 80145dc:	f8c4 c00c 	str.w	ip, [r4, #12]
 80145e0:	6223      	str	r3, [r4, #32]
 80145e2:	4620      	mov	r0, r4
 80145e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145e8:	078a      	lsls	r2, r1, #30
 80145ea:	d102      	bne.n	80145f2 <gmtime_r+0x12a>
 80145ec:	fb07 1616 	mls	r6, r7, r6, r1
 80145f0:	b95e      	cbnz	r6, 801460a <gmtime_r+0x142>
 80145f2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80145f6:	fbb1 f6f2 	udiv	r6, r1, r2
 80145fa:	fb02 1216 	mls	r2, r2, r6, r1
 80145fe:	fab2 f282 	clz	r2, r2
 8014602:	0952      	lsrs	r2, r2, #5
 8014604:	333b      	adds	r3, #59	; 0x3b
 8014606:	4413      	add	r3, r2
 8014608:	e7e2      	b.n	80145d0 <gmtime_r+0x108>
 801460a:	2201      	movs	r2, #1
 801460c:	e7fa      	b.n	8014604 <gmtime_r+0x13c>
 801460e:	bf00      	nop
 8014610:	00015180 	.word	0x00015180
 8014614:	00023ab1 	.word	0x00023ab1
 8014618:	fffdc54f 	.word	0xfffdc54f
 801461c:	00023ab0 	.word	0x00023ab0

08014620 <_localeconv_r>:
 8014620:	4800      	ldr	r0, [pc, #0]	; (8014624 <_localeconv_r+0x4>)
 8014622:	4770      	bx	lr
 8014624:	200001d8 	.word	0x200001d8

08014628 <__retarget_lock_init_recursive>:
 8014628:	4770      	bx	lr

0801462a <__retarget_lock_acquire>:
 801462a:	4770      	bx	lr

0801462c <__retarget_lock_acquire_recursive>:
 801462c:	4770      	bx	lr

0801462e <__retarget_lock_release>:
 801462e:	4770      	bx	lr

08014630 <__retarget_lock_release_recursive>:
 8014630:	4770      	bx	lr
	...

08014634 <__malloc_lock>:
 8014634:	4801      	ldr	r0, [pc, #4]	; (801463c <__malloc_lock+0x8>)
 8014636:	f7ff bff9 	b.w	801462c <__retarget_lock_acquire_recursive>
 801463a:	bf00      	nop
 801463c:	2000a7ad 	.word	0x2000a7ad

08014640 <__malloc_unlock>:
 8014640:	4801      	ldr	r0, [pc, #4]	; (8014648 <__malloc_unlock+0x8>)
 8014642:	f7ff bff5 	b.w	8014630 <__retarget_lock_release_recursive>
 8014646:	bf00      	nop
 8014648:	2000a7ad 	.word	0x2000a7ad

0801464c <_Balloc>:
 801464c:	b570      	push	{r4, r5, r6, lr}
 801464e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014650:	4604      	mov	r4, r0
 8014652:	460d      	mov	r5, r1
 8014654:	b976      	cbnz	r6, 8014674 <_Balloc+0x28>
 8014656:	2010      	movs	r0, #16
 8014658:	f7fd fda2 	bl	80121a0 <malloc>
 801465c:	4602      	mov	r2, r0
 801465e:	6260      	str	r0, [r4, #36]	; 0x24
 8014660:	b920      	cbnz	r0, 801466c <_Balloc+0x20>
 8014662:	4b18      	ldr	r3, [pc, #96]	; (80146c4 <_Balloc+0x78>)
 8014664:	4818      	ldr	r0, [pc, #96]	; (80146c8 <_Balloc+0x7c>)
 8014666:	2166      	movs	r1, #102	; 0x66
 8014668:	f7ff f826 	bl	80136b8 <__assert_func>
 801466c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014670:	6006      	str	r6, [r0, #0]
 8014672:	60c6      	str	r6, [r0, #12]
 8014674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014676:	68f3      	ldr	r3, [r6, #12]
 8014678:	b183      	cbz	r3, 801469c <_Balloc+0x50>
 801467a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801467c:	68db      	ldr	r3, [r3, #12]
 801467e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014682:	b9b8      	cbnz	r0, 80146b4 <_Balloc+0x68>
 8014684:	2101      	movs	r1, #1
 8014686:	fa01 f605 	lsl.w	r6, r1, r5
 801468a:	1d72      	adds	r2, r6, #5
 801468c:	0092      	lsls	r2, r2, #2
 801468e:	4620      	mov	r0, r4
 8014690:	f000 fb60 	bl	8014d54 <_calloc_r>
 8014694:	b160      	cbz	r0, 80146b0 <_Balloc+0x64>
 8014696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801469a:	e00e      	b.n	80146ba <_Balloc+0x6e>
 801469c:	2221      	movs	r2, #33	; 0x21
 801469e:	2104      	movs	r1, #4
 80146a0:	4620      	mov	r0, r4
 80146a2:	f000 fb57 	bl	8014d54 <_calloc_r>
 80146a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146a8:	60f0      	str	r0, [r6, #12]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d1e4      	bne.n	801467a <_Balloc+0x2e>
 80146b0:	2000      	movs	r0, #0
 80146b2:	bd70      	pop	{r4, r5, r6, pc}
 80146b4:	6802      	ldr	r2, [r0, #0]
 80146b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80146ba:	2300      	movs	r3, #0
 80146bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80146c0:	e7f7      	b.n	80146b2 <_Balloc+0x66>
 80146c2:	bf00      	nop
 80146c4:	080179d8 	.word	0x080179d8
 80146c8:	08017c8a 	.word	0x08017c8a

080146cc <_Bfree>:
 80146cc:	b570      	push	{r4, r5, r6, lr}
 80146ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80146d0:	4605      	mov	r5, r0
 80146d2:	460c      	mov	r4, r1
 80146d4:	b976      	cbnz	r6, 80146f4 <_Bfree+0x28>
 80146d6:	2010      	movs	r0, #16
 80146d8:	f7fd fd62 	bl	80121a0 <malloc>
 80146dc:	4602      	mov	r2, r0
 80146de:	6268      	str	r0, [r5, #36]	; 0x24
 80146e0:	b920      	cbnz	r0, 80146ec <_Bfree+0x20>
 80146e2:	4b09      	ldr	r3, [pc, #36]	; (8014708 <_Bfree+0x3c>)
 80146e4:	4809      	ldr	r0, [pc, #36]	; (801470c <_Bfree+0x40>)
 80146e6:	218a      	movs	r1, #138	; 0x8a
 80146e8:	f7fe ffe6 	bl	80136b8 <__assert_func>
 80146ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80146f0:	6006      	str	r6, [r0, #0]
 80146f2:	60c6      	str	r6, [r0, #12]
 80146f4:	b13c      	cbz	r4, 8014706 <_Bfree+0x3a>
 80146f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80146f8:	6862      	ldr	r2, [r4, #4]
 80146fa:	68db      	ldr	r3, [r3, #12]
 80146fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014700:	6021      	str	r1, [r4, #0]
 8014702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014706:	bd70      	pop	{r4, r5, r6, pc}
 8014708:	080179d8 	.word	0x080179d8
 801470c:	08017c8a 	.word	0x08017c8a

08014710 <__multadd>:
 8014710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014714:	690d      	ldr	r5, [r1, #16]
 8014716:	4607      	mov	r7, r0
 8014718:	460c      	mov	r4, r1
 801471a:	461e      	mov	r6, r3
 801471c:	f101 0c14 	add.w	ip, r1, #20
 8014720:	2000      	movs	r0, #0
 8014722:	f8dc 3000 	ldr.w	r3, [ip]
 8014726:	b299      	uxth	r1, r3
 8014728:	fb02 6101 	mla	r1, r2, r1, r6
 801472c:	0c1e      	lsrs	r6, r3, #16
 801472e:	0c0b      	lsrs	r3, r1, #16
 8014730:	fb02 3306 	mla	r3, r2, r6, r3
 8014734:	b289      	uxth	r1, r1
 8014736:	3001      	adds	r0, #1
 8014738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801473c:	4285      	cmp	r5, r0
 801473e:	f84c 1b04 	str.w	r1, [ip], #4
 8014742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014746:	dcec      	bgt.n	8014722 <__multadd+0x12>
 8014748:	b30e      	cbz	r6, 801478e <__multadd+0x7e>
 801474a:	68a3      	ldr	r3, [r4, #8]
 801474c:	42ab      	cmp	r3, r5
 801474e:	dc19      	bgt.n	8014784 <__multadd+0x74>
 8014750:	6861      	ldr	r1, [r4, #4]
 8014752:	4638      	mov	r0, r7
 8014754:	3101      	adds	r1, #1
 8014756:	f7ff ff79 	bl	801464c <_Balloc>
 801475a:	4680      	mov	r8, r0
 801475c:	b928      	cbnz	r0, 801476a <__multadd+0x5a>
 801475e:	4602      	mov	r2, r0
 8014760:	4b0c      	ldr	r3, [pc, #48]	; (8014794 <__multadd+0x84>)
 8014762:	480d      	ldr	r0, [pc, #52]	; (8014798 <__multadd+0x88>)
 8014764:	21b5      	movs	r1, #181	; 0xb5
 8014766:	f7fe ffa7 	bl	80136b8 <__assert_func>
 801476a:	6922      	ldr	r2, [r4, #16]
 801476c:	3202      	adds	r2, #2
 801476e:	f104 010c 	add.w	r1, r4, #12
 8014772:	0092      	lsls	r2, r2, #2
 8014774:	300c      	adds	r0, #12
 8014776:	f7fd fd23 	bl	80121c0 <memcpy>
 801477a:	4621      	mov	r1, r4
 801477c:	4638      	mov	r0, r7
 801477e:	f7ff ffa5 	bl	80146cc <_Bfree>
 8014782:	4644      	mov	r4, r8
 8014784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014788:	3501      	adds	r5, #1
 801478a:	615e      	str	r6, [r3, #20]
 801478c:	6125      	str	r5, [r4, #16]
 801478e:	4620      	mov	r0, r4
 8014790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014794:	08017c79 	.word	0x08017c79
 8014798:	08017c8a 	.word	0x08017c8a

0801479c <__hi0bits>:
 801479c:	0c03      	lsrs	r3, r0, #16
 801479e:	041b      	lsls	r3, r3, #16
 80147a0:	b9d3      	cbnz	r3, 80147d8 <__hi0bits+0x3c>
 80147a2:	0400      	lsls	r0, r0, #16
 80147a4:	2310      	movs	r3, #16
 80147a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80147aa:	bf04      	itt	eq
 80147ac:	0200      	lsleq	r0, r0, #8
 80147ae:	3308      	addeq	r3, #8
 80147b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80147b4:	bf04      	itt	eq
 80147b6:	0100      	lsleq	r0, r0, #4
 80147b8:	3304      	addeq	r3, #4
 80147ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80147be:	bf04      	itt	eq
 80147c0:	0080      	lsleq	r0, r0, #2
 80147c2:	3302      	addeq	r3, #2
 80147c4:	2800      	cmp	r0, #0
 80147c6:	db05      	blt.n	80147d4 <__hi0bits+0x38>
 80147c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80147cc:	f103 0301 	add.w	r3, r3, #1
 80147d0:	bf08      	it	eq
 80147d2:	2320      	moveq	r3, #32
 80147d4:	4618      	mov	r0, r3
 80147d6:	4770      	bx	lr
 80147d8:	2300      	movs	r3, #0
 80147da:	e7e4      	b.n	80147a6 <__hi0bits+0xa>

080147dc <__lo0bits>:
 80147dc:	6803      	ldr	r3, [r0, #0]
 80147de:	f013 0207 	ands.w	r2, r3, #7
 80147e2:	4601      	mov	r1, r0
 80147e4:	d00b      	beq.n	80147fe <__lo0bits+0x22>
 80147e6:	07da      	lsls	r2, r3, #31
 80147e8:	d423      	bmi.n	8014832 <__lo0bits+0x56>
 80147ea:	0798      	lsls	r0, r3, #30
 80147ec:	bf49      	itett	mi
 80147ee:	085b      	lsrmi	r3, r3, #1
 80147f0:	089b      	lsrpl	r3, r3, #2
 80147f2:	2001      	movmi	r0, #1
 80147f4:	600b      	strmi	r3, [r1, #0]
 80147f6:	bf5c      	itt	pl
 80147f8:	600b      	strpl	r3, [r1, #0]
 80147fa:	2002      	movpl	r0, #2
 80147fc:	4770      	bx	lr
 80147fe:	b298      	uxth	r0, r3
 8014800:	b9a8      	cbnz	r0, 801482e <__lo0bits+0x52>
 8014802:	0c1b      	lsrs	r3, r3, #16
 8014804:	2010      	movs	r0, #16
 8014806:	b2da      	uxtb	r2, r3
 8014808:	b90a      	cbnz	r2, 801480e <__lo0bits+0x32>
 801480a:	3008      	adds	r0, #8
 801480c:	0a1b      	lsrs	r3, r3, #8
 801480e:	071a      	lsls	r2, r3, #28
 8014810:	bf04      	itt	eq
 8014812:	091b      	lsreq	r3, r3, #4
 8014814:	3004      	addeq	r0, #4
 8014816:	079a      	lsls	r2, r3, #30
 8014818:	bf04      	itt	eq
 801481a:	089b      	lsreq	r3, r3, #2
 801481c:	3002      	addeq	r0, #2
 801481e:	07da      	lsls	r2, r3, #31
 8014820:	d403      	bmi.n	801482a <__lo0bits+0x4e>
 8014822:	085b      	lsrs	r3, r3, #1
 8014824:	f100 0001 	add.w	r0, r0, #1
 8014828:	d005      	beq.n	8014836 <__lo0bits+0x5a>
 801482a:	600b      	str	r3, [r1, #0]
 801482c:	4770      	bx	lr
 801482e:	4610      	mov	r0, r2
 8014830:	e7e9      	b.n	8014806 <__lo0bits+0x2a>
 8014832:	2000      	movs	r0, #0
 8014834:	4770      	bx	lr
 8014836:	2020      	movs	r0, #32
 8014838:	4770      	bx	lr
	...

0801483c <__i2b>:
 801483c:	b510      	push	{r4, lr}
 801483e:	460c      	mov	r4, r1
 8014840:	2101      	movs	r1, #1
 8014842:	f7ff ff03 	bl	801464c <_Balloc>
 8014846:	4602      	mov	r2, r0
 8014848:	b928      	cbnz	r0, 8014856 <__i2b+0x1a>
 801484a:	4b05      	ldr	r3, [pc, #20]	; (8014860 <__i2b+0x24>)
 801484c:	4805      	ldr	r0, [pc, #20]	; (8014864 <__i2b+0x28>)
 801484e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014852:	f7fe ff31 	bl	80136b8 <__assert_func>
 8014856:	2301      	movs	r3, #1
 8014858:	6144      	str	r4, [r0, #20]
 801485a:	6103      	str	r3, [r0, #16]
 801485c:	bd10      	pop	{r4, pc}
 801485e:	bf00      	nop
 8014860:	08017c79 	.word	0x08017c79
 8014864:	08017c8a 	.word	0x08017c8a

08014868 <__multiply>:
 8014868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801486c:	4691      	mov	r9, r2
 801486e:	690a      	ldr	r2, [r1, #16]
 8014870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014874:	429a      	cmp	r2, r3
 8014876:	bfb8      	it	lt
 8014878:	460b      	movlt	r3, r1
 801487a:	460c      	mov	r4, r1
 801487c:	bfbc      	itt	lt
 801487e:	464c      	movlt	r4, r9
 8014880:	4699      	movlt	r9, r3
 8014882:	6927      	ldr	r7, [r4, #16]
 8014884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014888:	68a3      	ldr	r3, [r4, #8]
 801488a:	6861      	ldr	r1, [r4, #4]
 801488c:	eb07 060a 	add.w	r6, r7, sl
 8014890:	42b3      	cmp	r3, r6
 8014892:	b085      	sub	sp, #20
 8014894:	bfb8      	it	lt
 8014896:	3101      	addlt	r1, #1
 8014898:	f7ff fed8 	bl	801464c <_Balloc>
 801489c:	b930      	cbnz	r0, 80148ac <__multiply+0x44>
 801489e:	4602      	mov	r2, r0
 80148a0:	4b44      	ldr	r3, [pc, #272]	; (80149b4 <__multiply+0x14c>)
 80148a2:	4845      	ldr	r0, [pc, #276]	; (80149b8 <__multiply+0x150>)
 80148a4:	f240 115d 	movw	r1, #349	; 0x15d
 80148a8:	f7fe ff06 	bl	80136b8 <__assert_func>
 80148ac:	f100 0514 	add.w	r5, r0, #20
 80148b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80148b4:	462b      	mov	r3, r5
 80148b6:	2200      	movs	r2, #0
 80148b8:	4543      	cmp	r3, r8
 80148ba:	d321      	bcc.n	8014900 <__multiply+0x98>
 80148bc:	f104 0314 	add.w	r3, r4, #20
 80148c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80148c4:	f109 0314 	add.w	r3, r9, #20
 80148c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80148cc:	9202      	str	r2, [sp, #8]
 80148ce:	1b3a      	subs	r2, r7, r4
 80148d0:	3a15      	subs	r2, #21
 80148d2:	f022 0203 	bic.w	r2, r2, #3
 80148d6:	3204      	adds	r2, #4
 80148d8:	f104 0115 	add.w	r1, r4, #21
 80148dc:	428f      	cmp	r7, r1
 80148de:	bf38      	it	cc
 80148e0:	2204      	movcc	r2, #4
 80148e2:	9201      	str	r2, [sp, #4]
 80148e4:	9a02      	ldr	r2, [sp, #8]
 80148e6:	9303      	str	r3, [sp, #12]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d80c      	bhi.n	8014906 <__multiply+0x9e>
 80148ec:	2e00      	cmp	r6, #0
 80148ee:	dd03      	ble.n	80148f8 <__multiply+0x90>
 80148f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d05a      	beq.n	80149ae <__multiply+0x146>
 80148f8:	6106      	str	r6, [r0, #16]
 80148fa:	b005      	add	sp, #20
 80148fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014900:	f843 2b04 	str.w	r2, [r3], #4
 8014904:	e7d8      	b.n	80148b8 <__multiply+0x50>
 8014906:	f8b3 a000 	ldrh.w	sl, [r3]
 801490a:	f1ba 0f00 	cmp.w	sl, #0
 801490e:	d024      	beq.n	801495a <__multiply+0xf2>
 8014910:	f104 0e14 	add.w	lr, r4, #20
 8014914:	46a9      	mov	r9, r5
 8014916:	f04f 0c00 	mov.w	ip, #0
 801491a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801491e:	f8d9 1000 	ldr.w	r1, [r9]
 8014922:	fa1f fb82 	uxth.w	fp, r2
 8014926:	b289      	uxth	r1, r1
 8014928:	fb0a 110b 	mla	r1, sl, fp, r1
 801492c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014930:	f8d9 2000 	ldr.w	r2, [r9]
 8014934:	4461      	add	r1, ip
 8014936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801493a:	fb0a c20b 	mla	r2, sl, fp, ip
 801493e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014942:	b289      	uxth	r1, r1
 8014944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014948:	4577      	cmp	r7, lr
 801494a:	f849 1b04 	str.w	r1, [r9], #4
 801494e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014952:	d8e2      	bhi.n	801491a <__multiply+0xb2>
 8014954:	9a01      	ldr	r2, [sp, #4]
 8014956:	f845 c002 	str.w	ip, [r5, r2]
 801495a:	9a03      	ldr	r2, [sp, #12]
 801495c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014960:	3304      	adds	r3, #4
 8014962:	f1b9 0f00 	cmp.w	r9, #0
 8014966:	d020      	beq.n	80149aa <__multiply+0x142>
 8014968:	6829      	ldr	r1, [r5, #0]
 801496a:	f104 0c14 	add.w	ip, r4, #20
 801496e:	46ae      	mov	lr, r5
 8014970:	f04f 0a00 	mov.w	sl, #0
 8014974:	f8bc b000 	ldrh.w	fp, [ip]
 8014978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801497c:	fb09 220b 	mla	r2, r9, fp, r2
 8014980:	4492      	add	sl, r2
 8014982:	b289      	uxth	r1, r1
 8014984:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8014988:	f84e 1b04 	str.w	r1, [lr], #4
 801498c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014990:	f8be 1000 	ldrh.w	r1, [lr]
 8014994:	0c12      	lsrs	r2, r2, #16
 8014996:	fb09 1102 	mla	r1, r9, r2, r1
 801499a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801499e:	4567      	cmp	r7, ip
 80149a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80149a4:	d8e6      	bhi.n	8014974 <__multiply+0x10c>
 80149a6:	9a01      	ldr	r2, [sp, #4]
 80149a8:	50a9      	str	r1, [r5, r2]
 80149aa:	3504      	adds	r5, #4
 80149ac:	e79a      	b.n	80148e4 <__multiply+0x7c>
 80149ae:	3e01      	subs	r6, #1
 80149b0:	e79c      	b.n	80148ec <__multiply+0x84>
 80149b2:	bf00      	nop
 80149b4:	08017c79 	.word	0x08017c79
 80149b8:	08017c8a 	.word	0x08017c8a

080149bc <__pow5mult>:
 80149bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149c0:	4615      	mov	r5, r2
 80149c2:	f012 0203 	ands.w	r2, r2, #3
 80149c6:	4606      	mov	r6, r0
 80149c8:	460f      	mov	r7, r1
 80149ca:	d007      	beq.n	80149dc <__pow5mult+0x20>
 80149cc:	4c25      	ldr	r4, [pc, #148]	; (8014a64 <__pow5mult+0xa8>)
 80149ce:	3a01      	subs	r2, #1
 80149d0:	2300      	movs	r3, #0
 80149d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80149d6:	f7ff fe9b 	bl	8014710 <__multadd>
 80149da:	4607      	mov	r7, r0
 80149dc:	10ad      	asrs	r5, r5, #2
 80149de:	d03d      	beq.n	8014a5c <__pow5mult+0xa0>
 80149e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80149e2:	b97c      	cbnz	r4, 8014a04 <__pow5mult+0x48>
 80149e4:	2010      	movs	r0, #16
 80149e6:	f7fd fbdb 	bl	80121a0 <malloc>
 80149ea:	4602      	mov	r2, r0
 80149ec:	6270      	str	r0, [r6, #36]	; 0x24
 80149ee:	b928      	cbnz	r0, 80149fc <__pow5mult+0x40>
 80149f0:	4b1d      	ldr	r3, [pc, #116]	; (8014a68 <__pow5mult+0xac>)
 80149f2:	481e      	ldr	r0, [pc, #120]	; (8014a6c <__pow5mult+0xb0>)
 80149f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80149f8:	f7fe fe5e 	bl	80136b8 <__assert_func>
 80149fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014a00:	6004      	str	r4, [r0, #0]
 8014a02:	60c4      	str	r4, [r0, #12]
 8014a04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014a0c:	b94c      	cbnz	r4, 8014a22 <__pow5mult+0x66>
 8014a0e:	f240 2171 	movw	r1, #625	; 0x271
 8014a12:	4630      	mov	r0, r6
 8014a14:	f7ff ff12 	bl	801483c <__i2b>
 8014a18:	2300      	movs	r3, #0
 8014a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8014a1e:	4604      	mov	r4, r0
 8014a20:	6003      	str	r3, [r0, #0]
 8014a22:	f04f 0900 	mov.w	r9, #0
 8014a26:	07eb      	lsls	r3, r5, #31
 8014a28:	d50a      	bpl.n	8014a40 <__pow5mult+0x84>
 8014a2a:	4639      	mov	r1, r7
 8014a2c:	4622      	mov	r2, r4
 8014a2e:	4630      	mov	r0, r6
 8014a30:	f7ff ff1a 	bl	8014868 <__multiply>
 8014a34:	4639      	mov	r1, r7
 8014a36:	4680      	mov	r8, r0
 8014a38:	4630      	mov	r0, r6
 8014a3a:	f7ff fe47 	bl	80146cc <_Bfree>
 8014a3e:	4647      	mov	r7, r8
 8014a40:	106d      	asrs	r5, r5, #1
 8014a42:	d00b      	beq.n	8014a5c <__pow5mult+0xa0>
 8014a44:	6820      	ldr	r0, [r4, #0]
 8014a46:	b938      	cbnz	r0, 8014a58 <__pow5mult+0x9c>
 8014a48:	4622      	mov	r2, r4
 8014a4a:	4621      	mov	r1, r4
 8014a4c:	4630      	mov	r0, r6
 8014a4e:	f7ff ff0b 	bl	8014868 <__multiply>
 8014a52:	6020      	str	r0, [r4, #0]
 8014a54:	f8c0 9000 	str.w	r9, [r0]
 8014a58:	4604      	mov	r4, r0
 8014a5a:	e7e4      	b.n	8014a26 <__pow5mult+0x6a>
 8014a5c:	4638      	mov	r0, r7
 8014a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a62:	bf00      	nop
 8014a64:	08017dd8 	.word	0x08017dd8
 8014a68:	080179d8 	.word	0x080179d8
 8014a6c:	08017c8a 	.word	0x08017c8a

08014a70 <__lshift>:
 8014a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a74:	460c      	mov	r4, r1
 8014a76:	6849      	ldr	r1, [r1, #4]
 8014a78:	6923      	ldr	r3, [r4, #16]
 8014a7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014a7e:	68a3      	ldr	r3, [r4, #8]
 8014a80:	4607      	mov	r7, r0
 8014a82:	4691      	mov	r9, r2
 8014a84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014a88:	f108 0601 	add.w	r6, r8, #1
 8014a8c:	42b3      	cmp	r3, r6
 8014a8e:	db0b      	blt.n	8014aa8 <__lshift+0x38>
 8014a90:	4638      	mov	r0, r7
 8014a92:	f7ff fddb 	bl	801464c <_Balloc>
 8014a96:	4605      	mov	r5, r0
 8014a98:	b948      	cbnz	r0, 8014aae <__lshift+0x3e>
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	4b2a      	ldr	r3, [pc, #168]	; (8014b48 <__lshift+0xd8>)
 8014a9e:	482b      	ldr	r0, [pc, #172]	; (8014b4c <__lshift+0xdc>)
 8014aa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014aa4:	f7fe fe08 	bl	80136b8 <__assert_func>
 8014aa8:	3101      	adds	r1, #1
 8014aaa:	005b      	lsls	r3, r3, #1
 8014aac:	e7ee      	b.n	8014a8c <__lshift+0x1c>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	f100 0114 	add.w	r1, r0, #20
 8014ab4:	f100 0210 	add.w	r2, r0, #16
 8014ab8:	4618      	mov	r0, r3
 8014aba:	4553      	cmp	r3, sl
 8014abc:	db37      	blt.n	8014b2e <__lshift+0xbe>
 8014abe:	6920      	ldr	r0, [r4, #16]
 8014ac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014ac4:	f104 0314 	add.w	r3, r4, #20
 8014ac8:	f019 091f 	ands.w	r9, r9, #31
 8014acc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014ad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014ad4:	d02f      	beq.n	8014b36 <__lshift+0xc6>
 8014ad6:	f1c9 0e20 	rsb	lr, r9, #32
 8014ada:	468a      	mov	sl, r1
 8014adc:	f04f 0c00 	mov.w	ip, #0
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	fa02 f209 	lsl.w	r2, r2, r9
 8014ae6:	ea42 020c 	orr.w	r2, r2, ip
 8014aea:	f84a 2b04 	str.w	r2, [sl], #4
 8014aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8014af2:	4298      	cmp	r0, r3
 8014af4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014af8:	d8f2      	bhi.n	8014ae0 <__lshift+0x70>
 8014afa:	1b03      	subs	r3, r0, r4
 8014afc:	3b15      	subs	r3, #21
 8014afe:	f023 0303 	bic.w	r3, r3, #3
 8014b02:	3304      	adds	r3, #4
 8014b04:	f104 0215 	add.w	r2, r4, #21
 8014b08:	4290      	cmp	r0, r2
 8014b0a:	bf38      	it	cc
 8014b0c:	2304      	movcc	r3, #4
 8014b0e:	f841 c003 	str.w	ip, [r1, r3]
 8014b12:	f1bc 0f00 	cmp.w	ip, #0
 8014b16:	d001      	beq.n	8014b1c <__lshift+0xac>
 8014b18:	f108 0602 	add.w	r6, r8, #2
 8014b1c:	3e01      	subs	r6, #1
 8014b1e:	4638      	mov	r0, r7
 8014b20:	612e      	str	r6, [r5, #16]
 8014b22:	4621      	mov	r1, r4
 8014b24:	f7ff fdd2 	bl	80146cc <_Bfree>
 8014b28:	4628      	mov	r0, r5
 8014b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8014b32:	3301      	adds	r3, #1
 8014b34:	e7c1      	b.n	8014aba <__lshift+0x4a>
 8014b36:	3904      	subs	r1, #4
 8014b38:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8014b40:	4298      	cmp	r0, r3
 8014b42:	d8f9      	bhi.n	8014b38 <__lshift+0xc8>
 8014b44:	e7ea      	b.n	8014b1c <__lshift+0xac>
 8014b46:	bf00      	nop
 8014b48:	08017c79 	.word	0x08017c79
 8014b4c:	08017c8a 	.word	0x08017c8a

08014b50 <__mcmp>:
 8014b50:	b530      	push	{r4, r5, lr}
 8014b52:	6902      	ldr	r2, [r0, #16]
 8014b54:	690c      	ldr	r4, [r1, #16]
 8014b56:	1b12      	subs	r2, r2, r4
 8014b58:	d10e      	bne.n	8014b78 <__mcmp+0x28>
 8014b5a:	f100 0314 	add.w	r3, r0, #20
 8014b5e:	3114      	adds	r1, #20
 8014b60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014b64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014b68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014b6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014b70:	42a5      	cmp	r5, r4
 8014b72:	d003      	beq.n	8014b7c <__mcmp+0x2c>
 8014b74:	d305      	bcc.n	8014b82 <__mcmp+0x32>
 8014b76:	2201      	movs	r2, #1
 8014b78:	4610      	mov	r0, r2
 8014b7a:	bd30      	pop	{r4, r5, pc}
 8014b7c:	4283      	cmp	r3, r0
 8014b7e:	d3f3      	bcc.n	8014b68 <__mcmp+0x18>
 8014b80:	e7fa      	b.n	8014b78 <__mcmp+0x28>
 8014b82:	f04f 32ff 	mov.w	r2, #4294967295
 8014b86:	e7f7      	b.n	8014b78 <__mcmp+0x28>

08014b88 <__mdiff>:
 8014b88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	4606      	mov	r6, r0
 8014b90:	4611      	mov	r1, r2
 8014b92:	4620      	mov	r0, r4
 8014b94:	4690      	mov	r8, r2
 8014b96:	f7ff ffdb 	bl	8014b50 <__mcmp>
 8014b9a:	1e05      	subs	r5, r0, #0
 8014b9c:	d110      	bne.n	8014bc0 <__mdiff+0x38>
 8014b9e:	4629      	mov	r1, r5
 8014ba0:	4630      	mov	r0, r6
 8014ba2:	f7ff fd53 	bl	801464c <_Balloc>
 8014ba6:	b930      	cbnz	r0, 8014bb6 <__mdiff+0x2e>
 8014ba8:	4b3a      	ldr	r3, [pc, #232]	; (8014c94 <__mdiff+0x10c>)
 8014baa:	4602      	mov	r2, r0
 8014bac:	f240 2132 	movw	r1, #562	; 0x232
 8014bb0:	4839      	ldr	r0, [pc, #228]	; (8014c98 <__mdiff+0x110>)
 8014bb2:	f7fe fd81 	bl	80136b8 <__assert_func>
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc0:	bfa4      	itt	ge
 8014bc2:	4643      	movge	r3, r8
 8014bc4:	46a0      	movge	r8, r4
 8014bc6:	4630      	mov	r0, r6
 8014bc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014bcc:	bfa6      	itte	ge
 8014bce:	461c      	movge	r4, r3
 8014bd0:	2500      	movge	r5, #0
 8014bd2:	2501      	movlt	r5, #1
 8014bd4:	f7ff fd3a 	bl	801464c <_Balloc>
 8014bd8:	b920      	cbnz	r0, 8014be4 <__mdiff+0x5c>
 8014bda:	4b2e      	ldr	r3, [pc, #184]	; (8014c94 <__mdiff+0x10c>)
 8014bdc:	4602      	mov	r2, r0
 8014bde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014be2:	e7e5      	b.n	8014bb0 <__mdiff+0x28>
 8014be4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014be8:	6926      	ldr	r6, [r4, #16]
 8014bea:	60c5      	str	r5, [r0, #12]
 8014bec:	f104 0914 	add.w	r9, r4, #20
 8014bf0:	f108 0514 	add.w	r5, r8, #20
 8014bf4:	f100 0e14 	add.w	lr, r0, #20
 8014bf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014bfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014c00:	f108 0210 	add.w	r2, r8, #16
 8014c04:	46f2      	mov	sl, lr
 8014c06:	2100      	movs	r1, #0
 8014c08:	f859 3b04 	ldr.w	r3, [r9], #4
 8014c0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014c10:	fa1f f883 	uxth.w	r8, r3
 8014c14:	fa11 f18b 	uxtah	r1, r1, fp
 8014c18:	0c1b      	lsrs	r3, r3, #16
 8014c1a:	eba1 0808 	sub.w	r8, r1, r8
 8014c1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014c22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014c26:	fa1f f888 	uxth.w	r8, r8
 8014c2a:	1419      	asrs	r1, r3, #16
 8014c2c:	454e      	cmp	r6, r9
 8014c2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014c32:	f84a 3b04 	str.w	r3, [sl], #4
 8014c36:	d8e7      	bhi.n	8014c08 <__mdiff+0x80>
 8014c38:	1b33      	subs	r3, r6, r4
 8014c3a:	3b15      	subs	r3, #21
 8014c3c:	f023 0303 	bic.w	r3, r3, #3
 8014c40:	3304      	adds	r3, #4
 8014c42:	3415      	adds	r4, #21
 8014c44:	42a6      	cmp	r6, r4
 8014c46:	bf38      	it	cc
 8014c48:	2304      	movcc	r3, #4
 8014c4a:	441d      	add	r5, r3
 8014c4c:	4473      	add	r3, lr
 8014c4e:	469e      	mov	lr, r3
 8014c50:	462e      	mov	r6, r5
 8014c52:	4566      	cmp	r6, ip
 8014c54:	d30e      	bcc.n	8014c74 <__mdiff+0xec>
 8014c56:	f10c 0203 	add.w	r2, ip, #3
 8014c5a:	1b52      	subs	r2, r2, r5
 8014c5c:	f022 0203 	bic.w	r2, r2, #3
 8014c60:	3d03      	subs	r5, #3
 8014c62:	45ac      	cmp	ip, r5
 8014c64:	bf38      	it	cc
 8014c66:	2200      	movcc	r2, #0
 8014c68:	441a      	add	r2, r3
 8014c6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014c6e:	b17b      	cbz	r3, 8014c90 <__mdiff+0x108>
 8014c70:	6107      	str	r7, [r0, #16]
 8014c72:	e7a3      	b.n	8014bbc <__mdiff+0x34>
 8014c74:	f856 8b04 	ldr.w	r8, [r6], #4
 8014c78:	fa11 f288 	uxtah	r2, r1, r8
 8014c7c:	1414      	asrs	r4, r2, #16
 8014c7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014c82:	b292      	uxth	r2, r2
 8014c84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8014c88:	f84e 2b04 	str.w	r2, [lr], #4
 8014c8c:	1421      	asrs	r1, r4, #16
 8014c8e:	e7e0      	b.n	8014c52 <__mdiff+0xca>
 8014c90:	3f01      	subs	r7, #1
 8014c92:	e7ea      	b.n	8014c6a <__mdiff+0xe2>
 8014c94:	08017c79 	.word	0x08017c79
 8014c98:	08017c8a 	.word	0x08017c8a

08014c9c <__d2b>:
 8014c9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014ca0:	4689      	mov	r9, r1
 8014ca2:	2101      	movs	r1, #1
 8014ca4:	ec57 6b10 	vmov	r6, r7, d0
 8014ca8:	4690      	mov	r8, r2
 8014caa:	f7ff fccf 	bl	801464c <_Balloc>
 8014cae:	4604      	mov	r4, r0
 8014cb0:	b930      	cbnz	r0, 8014cc0 <__d2b+0x24>
 8014cb2:	4602      	mov	r2, r0
 8014cb4:	4b25      	ldr	r3, [pc, #148]	; (8014d4c <__d2b+0xb0>)
 8014cb6:	4826      	ldr	r0, [pc, #152]	; (8014d50 <__d2b+0xb4>)
 8014cb8:	f240 310a 	movw	r1, #778	; 0x30a
 8014cbc:	f7fe fcfc 	bl	80136b8 <__assert_func>
 8014cc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014cc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014cc8:	bb35      	cbnz	r5, 8014d18 <__d2b+0x7c>
 8014cca:	2e00      	cmp	r6, #0
 8014ccc:	9301      	str	r3, [sp, #4]
 8014cce:	d028      	beq.n	8014d22 <__d2b+0x86>
 8014cd0:	4668      	mov	r0, sp
 8014cd2:	9600      	str	r6, [sp, #0]
 8014cd4:	f7ff fd82 	bl	80147dc <__lo0bits>
 8014cd8:	9900      	ldr	r1, [sp, #0]
 8014cda:	b300      	cbz	r0, 8014d1e <__d2b+0x82>
 8014cdc:	9a01      	ldr	r2, [sp, #4]
 8014cde:	f1c0 0320 	rsb	r3, r0, #32
 8014ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8014ce6:	430b      	orrs	r3, r1
 8014ce8:	40c2      	lsrs	r2, r0
 8014cea:	6163      	str	r3, [r4, #20]
 8014cec:	9201      	str	r2, [sp, #4]
 8014cee:	9b01      	ldr	r3, [sp, #4]
 8014cf0:	61a3      	str	r3, [r4, #24]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	bf14      	ite	ne
 8014cf6:	2202      	movne	r2, #2
 8014cf8:	2201      	moveq	r2, #1
 8014cfa:	6122      	str	r2, [r4, #16]
 8014cfc:	b1d5      	cbz	r5, 8014d34 <__d2b+0x98>
 8014cfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014d02:	4405      	add	r5, r0
 8014d04:	f8c9 5000 	str.w	r5, [r9]
 8014d08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014d0c:	f8c8 0000 	str.w	r0, [r8]
 8014d10:	4620      	mov	r0, r4
 8014d12:	b003      	add	sp, #12
 8014d14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d1c:	e7d5      	b.n	8014cca <__d2b+0x2e>
 8014d1e:	6161      	str	r1, [r4, #20]
 8014d20:	e7e5      	b.n	8014cee <__d2b+0x52>
 8014d22:	a801      	add	r0, sp, #4
 8014d24:	f7ff fd5a 	bl	80147dc <__lo0bits>
 8014d28:	9b01      	ldr	r3, [sp, #4]
 8014d2a:	6163      	str	r3, [r4, #20]
 8014d2c:	2201      	movs	r2, #1
 8014d2e:	6122      	str	r2, [r4, #16]
 8014d30:	3020      	adds	r0, #32
 8014d32:	e7e3      	b.n	8014cfc <__d2b+0x60>
 8014d34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014d38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014d3c:	f8c9 0000 	str.w	r0, [r9]
 8014d40:	6918      	ldr	r0, [r3, #16]
 8014d42:	f7ff fd2b 	bl	801479c <__hi0bits>
 8014d46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014d4a:	e7df      	b.n	8014d0c <__d2b+0x70>
 8014d4c:	08017c79 	.word	0x08017c79
 8014d50:	08017c8a 	.word	0x08017c8a

08014d54 <_calloc_r>:
 8014d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014d56:	fba1 2402 	umull	r2, r4, r1, r2
 8014d5a:	b94c      	cbnz	r4, 8014d70 <_calloc_r+0x1c>
 8014d5c:	4611      	mov	r1, r2
 8014d5e:	9201      	str	r2, [sp, #4]
 8014d60:	f7fd fd22 	bl	80127a8 <_malloc_r>
 8014d64:	9a01      	ldr	r2, [sp, #4]
 8014d66:	4605      	mov	r5, r0
 8014d68:	b930      	cbnz	r0, 8014d78 <_calloc_r+0x24>
 8014d6a:	4628      	mov	r0, r5
 8014d6c:	b003      	add	sp, #12
 8014d6e:	bd30      	pop	{r4, r5, pc}
 8014d70:	220c      	movs	r2, #12
 8014d72:	6002      	str	r2, [r0, #0]
 8014d74:	2500      	movs	r5, #0
 8014d76:	e7f8      	b.n	8014d6a <_calloc_r+0x16>
 8014d78:	4621      	mov	r1, r4
 8014d7a:	f7fd fa2f 	bl	80121dc <memset>
 8014d7e:	e7f4      	b.n	8014d6a <_calloc_r+0x16>

08014d80 <__ssputs_r>:
 8014d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d84:	688e      	ldr	r6, [r1, #8]
 8014d86:	429e      	cmp	r6, r3
 8014d88:	4682      	mov	sl, r0
 8014d8a:	460c      	mov	r4, r1
 8014d8c:	4690      	mov	r8, r2
 8014d8e:	461f      	mov	r7, r3
 8014d90:	d838      	bhi.n	8014e04 <__ssputs_r+0x84>
 8014d92:	898a      	ldrh	r2, [r1, #12]
 8014d94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014d98:	d032      	beq.n	8014e00 <__ssputs_r+0x80>
 8014d9a:	6825      	ldr	r5, [r4, #0]
 8014d9c:	6909      	ldr	r1, [r1, #16]
 8014d9e:	eba5 0901 	sub.w	r9, r5, r1
 8014da2:	6965      	ldr	r5, [r4, #20]
 8014da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014dac:	3301      	adds	r3, #1
 8014dae:	444b      	add	r3, r9
 8014db0:	106d      	asrs	r5, r5, #1
 8014db2:	429d      	cmp	r5, r3
 8014db4:	bf38      	it	cc
 8014db6:	461d      	movcc	r5, r3
 8014db8:	0553      	lsls	r3, r2, #21
 8014dba:	d531      	bpl.n	8014e20 <__ssputs_r+0xa0>
 8014dbc:	4629      	mov	r1, r5
 8014dbe:	f7fd fcf3 	bl	80127a8 <_malloc_r>
 8014dc2:	4606      	mov	r6, r0
 8014dc4:	b950      	cbnz	r0, 8014ddc <__ssputs_r+0x5c>
 8014dc6:	230c      	movs	r3, #12
 8014dc8:	f8ca 3000 	str.w	r3, [sl]
 8014dcc:	89a3      	ldrh	r3, [r4, #12]
 8014dce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dd2:	81a3      	strh	r3, [r4, #12]
 8014dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8014dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ddc:	6921      	ldr	r1, [r4, #16]
 8014dde:	464a      	mov	r2, r9
 8014de0:	f7fd f9ee 	bl	80121c0 <memcpy>
 8014de4:	89a3      	ldrh	r3, [r4, #12]
 8014de6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014dee:	81a3      	strh	r3, [r4, #12]
 8014df0:	6126      	str	r6, [r4, #16]
 8014df2:	6165      	str	r5, [r4, #20]
 8014df4:	444e      	add	r6, r9
 8014df6:	eba5 0509 	sub.w	r5, r5, r9
 8014dfa:	6026      	str	r6, [r4, #0]
 8014dfc:	60a5      	str	r5, [r4, #8]
 8014dfe:	463e      	mov	r6, r7
 8014e00:	42be      	cmp	r6, r7
 8014e02:	d900      	bls.n	8014e06 <__ssputs_r+0x86>
 8014e04:	463e      	mov	r6, r7
 8014e06:	6820      	ldr	r0, [r4, #0]
 8014e08:	4632      	mov	r2, r6
 8014e0a:	4641      	mov	r1, r8
 8014e0c:	f000 feb2 	bl	8015b74 <memmove>
 8014e10:	68a3      	ldr	r3, [r4, #8]
 8014e12:	1b9b      	subs	r3, r3, r6
 8014e14:	60a3      	str	r3, [r4, #8]
 8014e16:	6823      	ldr	r3, [r4, #0]
 8014e18:	4433      	add	r3, r6
 8014e1a:	6023      	str	r3, [r4, #0]
 8014e1c:	2000      	movs	r0, #0
 8014e1e:	e7db      	b.n	8014dd8 <__ssputs_r+0x58>
 8014e20:	462a      	mov	r2, r5
 8014e22:	f000 fec1 	bl	8015ba8 <_realloc_r>
 8014e26:	4606      	mov	r6, r0
 8014e28:	2800      	cmp	r0, #0
 8014e2a:	d1e1      	bne.n	8014df0 <__ssputs_r+0x70>
 8014e2c:	6921      	ldr	r1, [r4, #16]
 8014e2e:	4650      	mov	r0, sl
 8014e30:	f7fd fc4e 	bl	80126d0 <_free_r>
 8014e34:	e7c7      	b.n	8014dc6 <__ssputs_r+0x46>
	...

08014e38 <_svfiprintf_r>:
 8014e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e3c:	4698      	mov	r8, r3
 8014e3e:	898b      	ldrh	r3, [r1, #12]
 8014e40:	061b      	lsls	r3, r3, #24
 8014e42:	b09d      	sub	sp, #116	; 0x74
 8014e44:	4607      	mov	r7, r0
 8014e46:	460d      	mov	r5, r1
 8014e48:	4614      	mov	r4, r2
 8014e4a:	d50e      	bpl.n	8014e6a <_svfiprintf_r+0x32>
 8014e4c:	690b      	ldr	r3, [r1, #16]
 8014e4e:	b963      	cbnz	r3, 8014e6a <_svfiprintf_r+0x32>
 8014e50:	2140      	movs	r1, #64	; 0x40
 8014e52:	f7fd fca9 	bl	80127a8 <_malloc_r>
 8014e56:	6028      	str	r0, [r5, #0]
 8014e58:	6128      	str	r0, [r5, #16]
 8014e5a:	b920      	cbnz	r0, 8014e66 <_svfiprintf_r+0x2e>
 8014e5c:	230c      	movs	r3, #12
 8014e5e:	603b      	str	r3, [r7, #0]
 8014e60:	f04f 30ff 	mov.w	r0, #4294967295
 8014e64:	e0d1      	b.n	801500a <_svfiprintf_r+0x1d2>
 8014e66:	2340      	movs	r3, #64	; 0x40
 8014e68:	616b      	str	r3, [r5, #20]
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e6e:	2320      	movs	r3, #32
 8014e70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8014e78:	2330      	movs	r3, #48	; 0x30
 8014e7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015024 <_svfiprintf_r+0x1ec>
 8014e7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014e82:	f04f 0901 	mov.w	r9, #1
 8014e86:	4623      	mov	r3, r4
 8014e88:	469a      	mov	sl, r3
 8014e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e8e:	b10a      	cbz	r2, 8014e94 <_svfiprintf_r+0x5c>
 8014e90:	2a25      	cmp	r2, #37	; 0x25
 8014e92:	d1f9      	bne.n	8014e88 <_svfiprintf_r+0x50>
 8014e94:	ebba 0b04 	subs.w	fp, sl, r4
 8014e98:	d00b      	beq.n	8014eb2 <_svfiprintf_r+0x7a>
 8014e9a:	465b      	mov	r3, fp
 8014e9c:	4622      	mov	r2, r4
 8014e9e:	4629      	mov	r1, r5
 8014ea0:	4638      	mov	r0, r7
 8014ea2:	f7ff ff6d 	bl	8014d80 <__ssputs_r>
 8014ea6:	3001      	adds	r0, #1
 8014ea8:	f000 80aa 	beq.w	8015000 <_svfiprintf_r+0x1c8>
 8014eac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014eae:	445a      	add	r2, fp
 8014eb0:	9209      	str	r2, [sp, #36]	; 0x24
 8014eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	f000 80a2 	beq.w	8015000 <_svfiprintf_r+0x1c8>
 8014ebc:	2300      	movs	r3, #0
 8014ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8014ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ec6:	f10a 0a01 	add.w	sl, sl, #1
 8014eca:	9304      	str	r3, [sp, #16]
 8014ecc:	9307      	str	r3, [sp, #28]
 8014ece:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ed2:	931a      	str	r3, [sp, #104]	; 0x68
 8014ed4:	4654      	mov	r4, sl
 8014ed6:	2205      	movs	r2, #5
 8014ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014edc:	4851      	ldr	r0, [pc, #324]	; (8015024 <_svfiprintf_r+0x1ec>)
 8014ede:	f7eb f957 	bl	8000190 <memchr>
 8014ee2:	9a04      	ldr	r2, [sp, #16]
 8014ee4:	b9d8      	cbnz	r0, 8014f1e <_svfiprintf_r+0xe6>
 8014ee6:	06d0      	lsls	r0, r2, #27
 8014ee8:	bf44      	itt	mi
 8014eea:	2320      	movmi	r3, #32
 8014eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014ef0:	0711      	lsls	r1, r2, #28
 8014ef2:	bf44      	itt	mi
 8014ef4:	232b      	movmi	r3, #43	; 0x2b
 8014ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014efa:	f89a 3000 	ldrb.w	r3, [sl]
 8014efe:	2b2a      	cmp	r3, #42	; 0x2a
 8014f00:	d015      	beq.n	8014f2e <_svfiprintf_r+0xf6>
 8014f02:	9a07      	ldr	r2, [sp, #28]
 8014f04:	4654      	mov	r4, sl
 8014f06:	2000      	movs	r0, #0
 8014f08:	f04f 0c0a 	mov.w	ip, #10
 8014f0c:	4621      	mov	r1, r4
 8014f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f12:	3b30      	subs	r3, #48	; 0x30
 8014f14:	2b09      	cmp	r3, #9
 8014f16:	d94e      	bls.n	8014fb6 <_svfiprintf_r+0x17e>
 8014f18:	b1b0      	cbz	r0, 8014f48 <_svfiprintf_r+0x110>
 8014f1a:	9207      	str	r2, [sp, #28]
 8014f1c:	e014      	b.n	8014f48 <_svfiprintf_r+0x110>
 8014f1e:	eba0 0308 	sub.w	r3, r0, r8
 8014f22:	fa09 f303 	lsl.w	r3, r9, r3
 8014f26:	4313      	orrs	r3, r2
 8014f28:	9304      	str	r3, [sp, #16]
 8014f2a:	46a2      	mov	sl, r4
 8014f2c:	e7d2      	b.n	8014ed4 <_svfiprintf_r+0x9c>
 8014f2e:	9b03      	ldr	r3, [sp, #12]
 8014f30:	1d19      	adds	r1, r3, #4
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	9103      	str	r1, [sp, #12]
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	bfbb      	ittet	lt
 8014f3a:	425b      	neglt	r3, r3
 8014f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8014f40:	9307      	strge	r3, [sp, #28]
 8014f42:	9307      	strlt	r3, [sp, #28]
 8014f44:	bfb8      	it	lt
 8014f46:	9204      	strlt	r2, [sp, #16]
 8014f48:	7823      	ldrb	r3, [r4, #0]
 8014f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8014f4c:	d10c      	bne.n	8014f68 <_svfiprintf_r+0x130>
 8014f4e:	7863      	ldrb	r3, [r4, #1]
 8014f50:	2b2a      	cmp	r3, #42	; 0x2a
 8014f52:	d135      	bne.n	8014fc0 <_svfiprintf_r+0x188>
 8014f54:	9b03      	ldr	r3, [sp, #12]
 8014f56:	1d1a      	adds	r2, r3, #4
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	9203      	str	r2, [sp, #12]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	bfb8      	it	lt
 8014f60:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f64:	3402      	adds	r4, #2
 8014f66:	9305      	str	r3, [sp, #20]
 8014f68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015034 <_svfiprintf_r+0x1fc>
 8014f6c:	7821      	ldrb	r1, [r4, #0]
 8014f6e:	2203      	movs	r2, #3
 8014f70:	4650      	mov	r0, sl
 8014f72:	f7eb f90d 	bl	8000190 <memchr>
 8014f76:	b140      	cbz	r0, 8014f8a <_svfiprintf_r+0x152>
 8014f78:	2340      	movs	r3, #64	; 0x40
 8014f7a:	eba0 000a 	sub.w	r0, r0, sl
 8014f7e:	fa03 f000 	lsl.w	r0, r3, r0
 8014f82:	9b04      	ldr	r3, [sp, #16]
 8014f84:	4303      	orrs	r3, r0
 8014f86:	3401      	adds	r4, #1
 8014f88:	9304      	str	r3, [sp, #16]
 8014f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f8e:	4826      	ldr	r0, [pc, #152]	; (8015028 <_svfiprintf_r+0x1f0>)
 8014f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f94:	2206      	movs	r2, #6
 8014f96:	f7eb f8fb 	bl	8000190 <memchr>
 8014f9a:	2800      	cmp	r0, #0
 8014f9c:	d038      	beq.n	8015010 <_svfiprintf_r+0x1d8>
 8014f9e:	4b23      	ldr	r3, [pc, #140]	; (801502c <_svfiprintf_r+0x1f4>)
 8014fa0:	bb1b      	cbnz	r3, 8014fea <_svfiprintf_r+0x1b2>
 8014fa2:	9b03      	ldr	r3, [sp, #12]
 8014fa4:	3307      	adds	r3, #7
 8014fa6:	f023 0307 	bic.w	r3, r3, #7
 8014faa:	3308      	adds	r3, #8
 8014fac:	9303      	str	r3, [sp, #12]
 8014fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fb0:	4433      	add	r3, r6
 8014fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8014fb4:	e767      	b.n	8014e86 <_svfiprintf_r+0x4e>
 8014fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014fba:	460c      	mov	r4, r1
 8014fbc:	2001      	movs	r0, #1
 8014fbe:	e7a5      	b.n	8014f0c <_svfiprintf_r+0xd4>
 8014fc0:	2300      	movs	r3, #0
 8014fc2:	3401      	adds	r4, #1
 8014fc4:	9305      	str	r3, [sp, #20]
 8014fc6:	4619      	mov	r1, r3
 8014fc8:	f04f 0c0a 	mov.w	ip, #10
 8014fcc:	4620      	mov	r0, r4
 8014fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014fd2:	3a30      	subs	r2, #48	; 0x30
 8014fd4:	2a09      	cmp	r2, #9
 8014fd6:	d903      	bls.n	8014fe0 <_svfiprintf_r+0x1a8>
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d0c5      	beq.n	8014f68 <_svfiprintf_r+0x130>
 8014fdc:	9105      	str	r1, [sp, #20]
 8014fde:	e7c3      	b.n	8014f68 <_svfiprintf_r+0x130>
 8014fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8014fe4:	4604      	mov	r4, r0
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e7f0      	b.n	8014fcc <_svfiprintf_r+0x194>
 8014fea:	ab03      	add	r3, sp, #12
 8014fec:	9300      	str	r3, [sp, #0]
 8014fee:	462a      	mov	r2, r5
 8014ff0:	4b0f      	ldr	r3, [pc, #60]	; (8015030 <_svfiprintf_r+0x1f8>)
 8014ff2:	a904      	add	r1, sp, #16
 8014ff4:	4638      	mov	r0, r7
 8014ff6:	f7fd fceb 	bl	80129d0 <_printf_float>
 8014ffa:	1c42      	adds	r2, r0, #1
 8014ffc:	4606      	mov	r6, r0
 8014ffe:	d1d6      	bne.n	8014fae <_svfiprintf_r+0x176>
 8015000:	89ab      	ldrh	r3, [r5, #12]
 8015002:	065b      	lsls	r3, r3, #25
 8015004:	f53f af2c 	bmi.w	8014e60 <_svfiprintf_r+0x28>
 8015008:	9809      	ldr	r0, [sp, #36]	; 0x24
 801500a:	b01d      	add	sp, #116	; 0x74
 801500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015010:	ab03      	add	r3, sp, #12
 8015012:	9300      	str	r3, [sp, #0]
 8015014:	462a      	mov	r2, r5
 8015016:	4b06      	ldr	r3, [pc, #24]	; (8015030 <_svfiprintf_r+0x1f8>)
 8015018:	a904      	add	r1, sp, #16
 801501a:	4638      	mov	r0, r7
 801501c:	f7fd ff7c 	bl	8012f18 <_printf_i>
 8015020:	e7eb      	b.n	8014ffa <_svfiprintf_r+0x1c2>
 8015022:	bf00      	nop
 8015024:	08017de4 	.word	0x08017de4
 8015028:	08017dee 	.word	0x08017dee
 801502c:	080129d1 	.word	0x080129d1
 8015030:	08014d81 	.word	0x08014d81
 8015034:	08017dea 	.word	0x08017dea

08015038 <__sfputc_r>:
 8015038:	6893      	ldr	r3, [r2, #8]
 801503a:	3b01      	subs	r3, #1
 801503c:	2b00      	cmp	r3, #0
 801503e:	b410      	push	{r4}
 8015040:	6093      	str	r3, [r2, #8]
 8015042:	da08      	bge.n	8015056 <__sfputc_r+0x1e>
 8015044:	6994      	ldr	r4, [r2, #24]
 8015046:	42a3      	cmp	r3, r4
 8015048:	db01      	blt.n	801504e <__sfputc_r+0x16>
 801504a:	290a      	cmp	r1, #10
 801504c:	d103      	bne.n	8015056 <__sfputc_r+0x1e>
 801504e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015052:	f000 ba57 	b.w	8015504 <__swbuf_r>
 8015056:	6813      	ldr	r3, [r2, #0]
 8015058:	1c58      	adds	r0, r3, #1
 801505a:	6010      	str	r0, [r2, #0]
 801505c:	7019      	strb	r1, [r3, #0]
 801505e:	4608      	mov	r0, r1
 8015060:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015064:	4770      	bx	lr

08015066 <__sfputs_r>:
 8015066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015068:	4606      	mov	r6, r0
 801506a:	460f      	mov	r7, r1
 801506c:	4614      	mov	r4, r2
 801506e:	18d5      	adds	r5, r2, r3
 8015070:	42ac      	cmp	r4, r5
 8015072:	d101      	bne.n	8015078 <__sfputs_r+0x12>
 8015074:	2000      	movs	r0, #0
 8015076:	e007      	b.n	8015088 <__sfputs_r+0x22>
 8015078:	f814 1b01 	ldrb.w	r1, [r4], #1
 801507c:	463a      	mov	r2, r7
 801507e:	4630      	mov	r0, r6
 8015080:	f7ff ffda 	bl	8015038 <__sfputc_r>
 8015084:	1c43      	adds	r3, r0, #1
 8015086:	d1f3      	bne.n	8015070 <__sfputs_r+0xa>
 8015088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801508c <_vfiprintf_r>:
 801508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015090:	460d      	mov	r5, r1
 8015092:	b09d      	sub	sp, #116	; 0x74
 8015094:	4614      	mov	r4, r2
 8015096:	4698      	mov	r8, r3
 8015098:	4606      	mov	r6, r0
 801509a:	b118      	cbz	r0, 80150a4 <_vfiprintf_r+0x18>
 801509c:	6983      	ldr	r3, [r0, #24]
 801509e:	b90b      	cbnz	r3, 80150a4 <_vfiprintf_r+0x18>
 80150a0:	f000 fc40 	bl	8015924 <__sinit>
 80150a4:	4b89      	ldr	r3, [pc, #548]	; (80152cc <_vfiprintf_r+0x240>)
 80150a6:	429d      	cmp	r5, r3
 80150a8:	d11b      	bne.n	80150e2 <_vfiprintf_r+0x56>
 80150aa:	6875      	ldr	r5, [r6, #4]
 80150ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150ae:	07d9      	lsls	r1, r3, #31
 80150b0:	d405      	bmi.n	80150be <_vfiprintf_r+0x32>
 80150b2:	89ab      	ldrh	r3, [r5, #12]
 80150b4:	059a      	lsls	r2, r3, #22
 80150b6:	d402      	bmi.n	80150be <_vfiprintf_r+0x32>
 80150b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150ba:	f7ff fab7 	bl	801462c <__retarget_lock_acquire_recursive>
 80150be:	89ab      	ldrh	r3, [r5, #12]
 80150c0:	071b      	lsls	r3, r3, #28
 80150c2:	d501      	bpl.n	80150c8 <_vfiprintf_r+0x3c>
 80150c4:	692b      	ldr	r3, [r5, #16]
 80150c6:	b9eb      	cbnz	r3, 8015104 <_vfiprintf_r+0x78>
 80150c8:	4629      	mov	r1, r5
 80150ca:	4630      	mov	r0, r6
 80150cc:	f000 fa7e 	bl	80155cc <__swsetup_r>
 80150d0:	b1c0      	cbz	r0, 8015104 <_vfiprintf_r+0x78>
 80150d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80150d4:	07dc      	lsls	r4, r3, #31
 80150d6:	d50e      	bpl.n	80150f6 <_vfiprintf_r+0x6a>
 80150d8:	f04f 30ff 	mov.w	r0, #4294967295
 80150dc:	b01d      	add	sp, #116	; 0x74
 80150de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e2:	4b7b      	ldr	r3, [pc, #492]	; (80152d0 <_vfiprintf_r+0x244>)
 80150e4:	429d      	cmp	r5, r3
 80150e6:	d101      	bne.n	80150ec <_vfiprintf_r+0x60>
 80150e8:	68b5      	ldr	r5, [r6, #8]
 80150ea:	e7df      	b.n	80150ac <_vfiprintf_r+0x20>
 80150ec:	4b79      	ldr	r3, [pc, #484]	; (80152d4 <_vfiprintf_r+0x248>)
 80150ee:	429d      	cmp	r5, r3
 80150f0:	bf08      	it	eq
 80150f2:	68f5      	ldreq	r5, [r6, #12]
 80150f4:	e7da      	b.n	80150ac <_vfiprintf_r+0x20>
 80150f6:	89ab      	ldrh	r3, [r5, #12]
 80150f8:	0598      	lsls	r0, r3, #22
 80150fa:	d4ed      	bmi.n	80150d8 <_vfiprintf_r+0x4c>
 80150fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80150fe:	f7ff fa97 	bl	8014630 <__retarget_lock_release_recursive>
 8015102:	e7e9      	b.n	80150d8 <_vfiprintf_r+0x4c>
 8015104:	2300      	movs	r3, #0
 8015106:	9309      	str	r3, [sp, #36]	; 0x24
 8015108:	2320      	movs	r3, #32
 801510a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801510e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015112:	2330      	movs	r3, #48	; 0x30
 8015114:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80152d8 <_vfiprintf_r+0x24c>
 8015118:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801511c:	f04f 0901 	mov.w	r9, #1
 8015120:	4623      	mov	r3, r4
 8015122:	469a      	mov	sl, r3
 8015124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015128:	b10a      	cbz	r2, 801512e <_vfiprintf_r+0xa2>
 801512a:	2a25      	cmp	r2, #37	; 0x25
 801512c:	d1f9      	bne.n	8015122 <_vfiprintf_r+0x96>
 801512e:	ebba 0b04 	subs.w	fp, sl, r4
 8015132:	d00b      	beq.n	801514c <_vfiprintf_r+0xc0>
 8015134:	465b      	mov	r3, fp
 8015136:	4622      	mov	r2, r4
 8015138:	4629      	mov	r1, r5
 801513a:	4630      	mov	r0, r6
 801513c:	f7ff ff93 	bl	8015066 <__sfputs_r>
 8015140:	3001      	adds	r0, #1
 8015142:	f000 80aa 	beq.w	801529a <_vfiprintf_r+0x20e>
 8015146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015148:	445a      	add	r2, fp
 801514a:	9209      	str	r2, [sp, #36]	; 0x24
 801514c:	f89a 3000 	ldrb.w	r3, [sl]
 8015150:	2b00      	cmp	r3, #0
 8015152:	f000 80a2 	beq.w	801529a <_vfiprintf_r+0x20e>
 8015156:	2300      	movs	r3, #0
 8015158:	f04f 32ff 	mov.w	r2, #4294967295
 801515c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015160:	f10a 0a01 	add.w	sl, sl, #1
 8015164:	9304      	str	r3, [sp, #16]
 8015166:	9307      	str	r3, [sp, #28]
 8015168:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801516c:	931a      	str	r3, [sp, #104]	; 0x68
 801516e:	4654      	mov	r4, sl
 8015170:	2205      	movs	r2, #5
 8015172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015176:	4858      	ldr	r0, [pc, #352]	; (80152d8 <_vfiprintf_r+0x24c>)
 8015178:	f7eb f80a 	bl	8000190 <memchr>
 801517c:	9a04      	ldr	r2, [sp, #16]
 801517e:	b9d8      	cbnz	r0, 80151b8 <_vfiprintf_r+0x12c>
 8015180:	06d1      	lsls	r1, r2, #27
 8015182:	bf44      	itt	mi
 8015184:	2320      	movmi	r3, #32
 8015186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801518a:	0713      	lsls	r3, r2, #28
 801518c:	bf44      	itt	mi
 801518e:	232b      	movmi	r3, #43	; 0x2b
 8015190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015194:	f89a 3000 	ldrb.w	r3, [sl]
 8015198:	2b2a      	cmp	r3, #42	; 0x2a
 801519a:	d015      	beq.n	80151c8 <_vfiprintf_r+0x13c>
 801519c:	9a07      	ldr	r2, [sp, #28]
 801519e:	4654      	mov	r4, sl
 80151a0:	2000      	movs	r0, #0
 80151a2:	f04f 0c0a 	mov.w	ip, #10
 80151a6:	4621      	mov	r1, r4
 80151a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80151ac:	3b30      	subs	r3, #48	; 0x30
 80151ae:	2b09      	cmp	r3, #9
 80151b0:	d94e      	bls.n	8015250 <_vfiprintf_r+0x1c4>
 80151b2:	b1b0      	cbz	r0, 80151e2 <_vfiprintf_r+0x156>
 80151b4:	9207      	str	r2, [sp, #28]
 80151b6:	e014      	b.n	80151e2 <_vfiprintf_r+0x156>
 80151b8:	eba0 0308 	sub.w	r3, r0, r8
 80151bc:	fa09 f303 	lsl.w	r3, r9, r3
 80151c0:	4313      	orrs	r3, r2
 80151c2:	9304      	str	r3, [sp, #16]
 80151c4:	46a2      	mov	sl, r4
 80151c6:	e7d2      	b.n	801516e <_vfiprintf_r+0xe2>
 80151c8:	9b03      	ldr	r3, [sp, #12]
 80151ca:	1d19      	adds	r1, r3, #4
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	9103      	str	r1, [sp, #12]
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	bfbb      	ittet	lt
 80151d4:	425b      	neglt	r3, r3
 80151d6:	f042 0202 	orrlt.w	r2, r2, #2
 80151da:	9307      	strge	r3, [sp, #28]
 80151dc:	9307      	strlt	r3, [sp, #28]
 80151de:	bfb8      	it	lt
 80151e0:	9204      	strlt	r2, [sp, #16]
 80151e2:	7823      	ldrb	r3, [r4, #0]
 80151e4:	2b2e      	cmp	r3, #46	; 0x2e
 80151e6:	d10c      	bne.n	8015202 <_vfiprintf_r+0x176>
 80151e8:	7863      	ldrb	r3, [r4, #1]
 80151ea:	2b2a      	cmp	r3, #42	; 0x2a
 80151ec:	d135      	bne.n	801525a <_vfiprintf_r+0x1ce>
 80151ee:	9b03      	ldr	r3, [sp, #12]
 80151f0:	1d1a      	adds	r2, r3, #4
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	9203      	str	r2, [sp, #12]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	bfb8      	it	lt
 80151fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80151fe:	3402      	adds	r4, #2
 8015200:	9305      	str	r3, [sp, #20]
 8015202:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80152e8 <_vfiprintf_r+0x25c>
 8015206:	7821      	ldrb	r1, [r4, #0]
 8015208:	2203      	movs	r2, #3
 801520a:	4650      	mov	r0, sl
 801520c:	f7ea ffc0 	bl	8000190 <memchr>
 8015210:	b140      	cbz	r0, 8015224 <_vfiprintf_r+0x198>
 8015212:	2340      	movs	r3, #64	; 0x40
 8015214:	eba0 000a 	sub.w	r0, r0, sl
 8015218:	fa03 f000 	lsl.w	r0, r3, r0
 801521c:	9b04      	ldr	r3, [sp, #16]
 801521e:	4303      	orrs	r3, r0
 8015220:	3401      	adds	r4, #1
 8015222:	9304      	str	r3, [sp, #16]
 8015224:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015228:	482c      	ldr	r0, [pc, #176]	; (80152dc <_vfiprintf_r+0x250>)
 801522a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801522e:	2206      	movs	r2, #6
 8015230:	f7ea ffae 	bl	8000190 <memchr>
 8015234:	2800      	cmp	r0, #0
 8015236:	d03f      	beq.n	80152b8 <_vfiprintf_r+0x22c>
 8015238:	4b29      	ldr	r3, [pc, #164]	; (80152e0 <_vfiprintf_r+0x254>)
 801523a:	bb1b      	cbnz	r3, 8015284 <_vfiprintf_r+0x1f8>
 801523c:	9b03      	ldr	r3, [sp, #12]
 801523e:	3307      	adds	r3, #7
 8015240:	f023 0307 	bic.w	r3, r3, #7
 8015244:	3308      	adds	r3, #8
 8015246:	9303      	str	r3, [sp, #12]
 8015248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801524a:	443b      	add	r3, r7
 801524c:	9309      	str	r3, [sp, #36]	; 0x24
 801524e:	e767      	b.n	8015120 <_vfiprintf_r+0x94>
 8015250:	fb0c 3202 	mla	r2, ip, r2, r3
 8015254:	460c      	mov	r4, r1
 8015256:	2001      	movs	r0, #1
 8015258:	e7a5      	b.n	80151a6 <_vfiprintf_r+0x11a>
 801525a:	2300      	movs	r3, #0
 801525c:	3401      	adds	r4, #1
 801525e:	9305      	str	r3, [sp, #20]
 8015260:	4619      	mov	r1, r3
 8015262:	f04f 0c0a 	mov.w	ip, #10
 8015266:	4620      	mov	r0, r4
 8015268:	f810 2b01 	ldrb.w	r2, [r0], #1
 801526c:	3a30      	subs	r2, #48	; 0x30
 801526e:	2a09      	cmp	r2, #9
 8015270:	d903      	bls.n	801527a <_vfiprintf_r+0x1ee>
 8015272:	2b00      	cmp	r3, #0
 8015274:	d0c5      	beq.n	8015202 <_vfiprintf_r+0x176>
 8015276:	9105      	str	r1, [sp, #20]
 8015278:	e7c3      	b.n	8015202 <_vfiprintf_r+0x176>
 801527a:	fb0c 2101 	mla	r1, ip, r1, r2
 801527e:	4604      	mov	r4, r0
 8015280:	2301      	movs	r3, #1
 8015282:	e7f0      	b.n	8015266 <_vfiprintf_r+0x1da>
 8015284:	ab03      	add	r3, sp, #12
 8015286:	9300      	str	r3, [sp, #0]
 8015288:	462a      	mov	r2, r5
 801528a:	4b16      	ldr	r3, [pc, #88]	; (80152e4 <_vfiprintf_r+0x258>)
 801528c:	a904      	add	r1, sp, #16
 801528e:	4630      	mov	r0, r6
 8015290:	f7fd fb9e 	bl	80129d0 <_printf_float>
 8015294:	4607      	mov	r7, r0
 8015296:	1c78      	adds	r0, r7, #1
 8015298:	d1d6      	bne.n	8015248 <_vfiprintf_r+0x1bc>
 801529a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801529c:	07d9      	lsls	r1, r3, #31
 801529e:	d405      	bmi.n	80152ac <_vfiprintf_r+0x220>
 80152a0:	89ab      	ldrh	r3, [r5, #12]
 80152a2:	059a      	lsls	r2, r3, #22
 80152a4:	d402      	bmi.n	80152ac <_vfiprintf_r+0x220>
 80152a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80152a8:	f7ff f9c2 	bl	8014630 <__retarget_lock_release_recursive>
 80152ac:	89ab      	ldrh	r3, [r5, #12]
 80152ae:	065b      	lsls	r3, r3, #25
 80152b0:	f53f af12 	bmi.w	80150d8 <_vfiprintf_r+0x4c>
 80152b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80152b6:	e711      	b.n	80150dc <_vfiprintf_r+0x50>
 80152b8:	ab03      	add	r3, sp, #12
 80152ba:	9300      	str	r3, [sp, #0]
 80152bc:	462a      	mov	r2, r5
 80152be:	4b09      	ldr	r3, [pc, #36]	; (80152e4 <_vfiprintf_r+0x258>)
 80152c0:	a904      	add	r1, sp, #16
 80152c2:	4630      	mov	r0, r6
 80152c4:	f7fd fe28 	bl	8012f18 <_printf_i>
 80152c8:	e7e4      	b.n	8015294 <_vfiprintf_r+0x208>
 80152ca:	bf00      	nop
 80152cc:	08017f18 	.word	0x08017f18
 80152d0:	08017f38 	.word	0x08017f38
 80152d4:	08017ef8 	.word	0x08017ef8
 80152d8:	08017de4 	.word	0x08017de4
 80152dc:	08017dee 	.word	0x08017dee
 80152e0:	080129d1 	.word	0x080129d1
 80152e4:	08015067 	.word	0x08015067
 80152e8:	08017dea 	.word	0x08017dea

080152ec <siscanf>:
 80152ec:	b40e      	push	{r1, r2, r3}
 80152ee:	b510      	push	{r4, lr}
 80152f0:	b09f      	sub	sp, #124	; 0x7c
 80152f2:	ac21      	add	r4, sp, #132	; 0x84
 80152f4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80152f8:	f854 2b04 	ldr.w	r2, [r4], #4
 80152fc:	9201      	str	r2, [sp, #4]
 80152fe:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015302:	9004      	str	r0, [sp, #16]
 8015304:	9008      	str	r0, [sp, #32]
 8015306:	f7ea ff3b 	bl	8000180 <strlen>
 801530a:	4b0c      	ldr	r3, [pc, #48]	; (801533c <siscanf+0x50>)
 801530c:	9005      	str	r0, [sp, #20]
 801530e:	9009      	str	r0, [sp, #36]	; 0x24
 8015310:	930d      	str	r3, [sp, #52]	; 0x34
 8015312:	480b      	ldr	r0, [pc, #44]	; (8015340 <siscanf+0x54>)
 8015314:	9a01      	ldr	r2, [sp, #4]
 8015316:	6800      	ldr	r0, [r0, #0]
 8015318:	9403      	str	r4, [sp, #12]
 801531a:	2300      	movs	r3, #0
 801531c:	9311      	str	r3, [sp, #68]	; 0x44
 801531e:	9316      	str	r3, [sp, #88]	; 0x58
 8015320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015324:	f8ad 301e 	strh.w	r3, [sp, #30]
 8015328:	a904      	add	r1, sp, #16
 801532a:	4623      	mov	r3, r4
 801532c:	f000 fcc6 	bl	8015cbc <__ssvfiscanf_r>
 8015330:	b01f      	add	sp, #124	; 0x7c
 8015332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015336:	b003      	add	sp, #12
 8015338:	4770      	bx	lr
 801533a:	bf00      	nop
 801533c:	08015367 	.word	0x08015367
 8015340:	20000020 	.word	0x20000020

08015344 <__sread>:
 8015344:	b510      	push	{r4, lr}
 8015346:	460c      	mov	r4, r1
 8015348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801534c:	f000 ff80 	bl	8016250 <_read_r>
 8015350:	2800      	cmp	r0, #0
 8015352:	bfab      	itete	ge
 8015354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015356:	89a3      	ldrhlt	r3, [r4, #12]
 8015358:	181b      	addge	r3, r3, r0
 801535a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801535e:	bfac      	ite	ge
 8015360:	6563      	strge	r3, [r4, #84]	; 0x54
 8015362:	81a3      	strhlt	r3, [r4, #12]
 8015364:	bd10      	pop	{r4, pc}

08015366 <__seofread>:
 8015366:	2000      	movs	r0, #0
 8015368:	4770      	bx	lr

0801536a <__swrite>:
 801536a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536e:	461f      	mov	r7, r3
 8015370:	898b      	ldrh	r3, [r1, #12]
 8015372:	05db      	lsls	r3, r3, #23
 8015374:	4605      	mov	r5, r0
 8015376:	460c      	mov	r4, r1
 8015378:	4616      	mov	r6, r2
 801537a:	d505      	bpl.n	8015388 <__swrite+0x1e>
 801537c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015380:	2302      	movs	r3, #2
 8015382:	2200      	movs	r2, #0
 8015384:	f000 fb6c 	bl	8015a60 <_lseek_r>
 8015388:	89a3      	ldrh	r3, [r4, #12]
 801538a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801538e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015392:	81a3      	strh	r3, [r4, #12]
 8015394:	4632      	mov	r2, r6
 8015396:	463b      	mov	r3, r7
 8015398:	4628      	mov	r0, r5
 801539a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801539e:	f000 b903 	b.w	80155a8 <_write_r>

080153a2 <__sseek>:
 80153a2:	b510      	push	{r4, lr}
 80153a4:	460c      	mov	r4, r1
 80153a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153aa:	f000 fb59 	bl	8015a60 <_lseek_r>
 80153ae:	1c43      	adds	r3, r0, #1
 80153b0:	89a3      	ldrh	r3, [r4, #12]
 80153b2:	bf15      	itete	ne
 80153b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80153b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153be:	81a3      	strheq	r3, [r4, #12]
 80153c0:	bf18      	it	ne
 80153c2:	81a3      	strhne	r3, [r4, #12]
 80153c4:	bd10      	pop	{r4, pc}

080153c6 <__sclose>:
 80153c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153ca:	f000 b975 	b.w	80156b8 <_close_r>

080153ce <strcpy>:
 80153ce:	4603      	mov	r3, r0
 80153d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80153d4:	f803 2b01 	strb.w	r2, [r3], #1
 80153d8:	2a00      	cmp	r2, #0
 80153da:	d1f9      	bne.n	80153d0 <strcpy+0x2>
 80153dc:	4770      	bx	lr

080153de <strncmp>:
 80153de:	b510      	push	{r4, lr}
 80153e0:	b17a      	cbz	r2, 8015402 <strncmp+0x24>
 80153e2:	4603      	mov	r3, r0
 80153e4:	3901      	subs	r1, #1
 80153e6:	1884      	adds	r4, r0, r2
 80153e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80153ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80153f0:	4290      	cmp	r0, r2
 80153f2:	d101      	bne.n	80153f8 <strncmp+0x1a>
 80153f4:	42a3      	cmp	r3, r4
 80153f6:	d101      	bne.n	80153fc <strncmp+0x1e>
 80153f8:	1a80      	subs	r0, r0, r2
 80153fa:	bd10      	pop	{r4, pc}
 80153fc:	2800      	cmp	r0, #0
 80153fe:	d1f3      	bne.n	80153e8 <strncmp+0xa>
 8015400:	e7fa      	b.n	80153f8 <strncmp+0x1a>
 8015402:	4610      	mov	r0, r2
 8015404:	e7f9      	b.n	80153fa <strncmp+0x1c>
	...

08015408 <_strtoul_l.constprop.0>:
 8015408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801540c:	4f36      	ldr	r7, [pc, #216]	; (80154e8 <_strtoul_l.constprop.0+0xe0>)
 801540e:	4686      	mov	lr, r0
 8015410:	460d      	mov	r5, r1
 8015412:	4628      	mov	r0, r5
 8015414:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015418:	5de6      	ldrb	r6, [r4, r7]
 801541a:	f016 0608 	ands.w	r6, r6, #8
 801541e:	d1f8      	bne.n	8015412 <_strtoul_l.constprop.0+0xa>
 8015420:	2c2d      	cmp	r4, #45	; 0x2d
 8015422:	d12f      	bne.n	8015484 <_strtoul_l.constprop.0+0x7c>
 8015424:	782c      	ldrb	r4, [r5, #0]
 8015426:	2601      	movs	r6, #1
 8015428:	1c85      	adds	r5, r0, #2
 801542a:	2b00      	cmp	r3, #0
 801542c:	d057      	beq.n	80154de <_strtoul_l.constprop.0+0xd6>
 801542e:	2b10      	cmp	r3, #16
 8015430:	d109      	bne.n	8015446 <_strtoul_l.constprop.0+0x3e>
 8015432:	2c30      	cmp	r4, #48	; 0x30
 8015434:	d107      	bne.n	8015446 <_strtoul_l.constprop.0+0x3e>
 8015436:	7828      	ldrb	r0, [r5, #0]
 8015438:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801543c:	2858      	cmp	r0, #88	; 0x58
 801543e:	d149      	bne.n	80154d4 <_strtoul_l.constprop.0+0xcc>
 8015440:	786c      	ldrb	r4, [r5, #1]
 8015442:	2310      	movs	r3, #16
 8015444:	3502      	adds	r5, #2
 8015446:	f04f 38ff 	mov.w	r8, #4294967295
 801544a:	2700      	movs	r7, #0
 801544c:	fbb8 f8f3 	udiv	r8, r8, r3
 8015450:	fb03 f908 	mul.w	r9, r3, r8
 8015454:	ea6f 0909 	mvn.w	r9, r9
 8015458:	4638      	mov	r0, r7
 801545a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801545e:	f1bc 0f09 	cmp.w	ip, #9
 8015462:	d814      	bhi.n	801548e <_strtoul_l.constprop.0+0x86>
 8015464:	4664      	mov	r4, ip
 8015466:	42a3      	cmp	r3, r4
 8015468:	dd22      	ble.n	80154b0 <_strtoul_l.constprop.0+0xa8>
 801546a:	2f00      	cmp	r7, #0
 801546c:	db1d      	blt.n	80154aa <_strtoul_l.constprop.0+0xa2>
 801546e:	4580      	cmp	r8, r0
 8015470:	d31b      	bcc.n	80154aa <_strtoul_l.constprop.0+0xa2>
 8015472:	d101      	bne.n	8015478 <_strtoul_l.constprop.0+0x70>
 8015474:	45a1      	cmp	r9, r4
 8015476:	db18      	blt.n	80154aa <_strtoul_l.constprop.0+0xa2>
 8015478:	fb00 4003 	mla	r0, r0, r3, r4
 801547c:	2701      	movs	r7, #1
 801547e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015482:	e7ea      	b.n	801545a <_strtoul_l.constprop.0+0x52>
 8015484:	2c2b      	cmp	r4, #43	; 0x2b
 8015486:	bf04      	itt	eq
 8015488:	782c      	ldrbeq	r4, [r5, #0]
 801548a:	1c85      	addeq	r5, r0, #2
 801548c:	e7cd      	b.n	801542a <_strtoul_l.constprop.0+0x22>
 801548e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015492:	f1bc 0f19 	cmp.w	ip, #25
 8015496:	d801      	bhi.n	801549c <_strtoul_l.constprop.0+0x94>
 8015498:	3c37      	subs	r4, #55	; 0x37
 801549a:	e7e4      	b.n	8015466 <_strtoul_l.constprop.0+0x5e>
 801549c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80154a0:	f1bc 0f19 	cmp.w	ip, #25
 80154a4:	d804      	bhi.n	80154b0 <_strtoul_l.constprop.0+0xa8>
 80154a6:	3c57      	subs	r4, #87	; 0x57
 80154a8:	e7dd      	b.n	8015466 <_strtoul_l.constprop.0+0x5e>
 80154aa:	f04f 37ff 	mov.w	r7, #4294967295
 80154ae:	e7e6      	b.n	801547e <_strtoul_l.constprop.0+0x76>
 80154b0:	2f00      	cmp	r7, #0
 80154b2:	da07      	bge.n	80154c4 <_strtoul_l.constprop.0+0xbc>
 80154b4:	2322      	movs	r3, #34	; 0x22
 80154b6:	f8ce 3000 	str.w	r3, [lr]
 80154ba:	f04f 30ff 	mov.w	r0, #4294967295
 80154be:	b932      	cbnz	r2, 80154ce <_strtoul_l.constprop.0+0xc6>
 80154c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80154c4:	b106      	cbz	r6, 80154c8 <_strtoul_l.constprop.0+0xc0>
 80154c6:	4240      	negs	r0, r0
 80154c8:	2a00      	cmp	r2, #0
 80154ca:	d0f9      	beq.n	80154c0 <_strtoul_l.constprop.0+0xb8>
 80154cc:	b107      	cbz	r7, 80154d0 <_strtoul_l.constprop.0+0xc8>
 80154ce:	1e69      	subs	r1, r5, #1
 80154d0:	6011      	str	r1, [r2, #0]
 80154d2:	e7f5      	b.n	80154c0 <_strtoul_l.constprop.0+0xb8>
 80154d4:	2430      	movs	r4, #48	; 0x30
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d1b5      	bne.n	8015446 <_strtoul_l.constprop.0+0x3e>
 80154da:	2308      	movs	r3, #8
 80154dc:	e7b3      	b.n	8015446 <_strtoul_l.constprop.0+0x3e>
 80154de:	2c30      	cmp	r4, #48	; 0x30
 80154e0:	d0a9      	beq.n	8015436 <_strtoul_l.constprop.0+0x2e>
 80154e2:	230a      	movs	r3, #10
 80154e4:	e7af      	b.n	8015446 <_strtoul_l.constprop.0+0x3e>
 80154e6:	bf00      	nop
 80154e8:	08017df6 	.word	0x08017df6

080154ec <_strtoul_r>:
 80154ec:	f7ff bf8c 	b.w	8015408 <_strtoul_l.constprop.0>

080154f0 <strtoul>:
 80154f0:	4613      	mov	r3, r2
 80154f2:	460a      	mov	r2, r1
 80154f4:	4601      	mov	r1, r0
 80154f6:	4802      	ldr	r0, [pc, #8]	; (8015500 <strtoul+0x10>)
 80154f8:	6800      	ldr	r0, [r0, #0]
 80154fa:	f7ff bf85 	b.w	8015408 <_strtoul_l.constprop.0>
 80154fe:	bf00      	nop
 8015500:	20000020 	.word	0x20000020

08015504 <__swbuf_r>:
 8015504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015506:	460e      	mov	r6, r1
 8015508:	4614      	mov	r4, r2
 801550a:	4605      	mov	r5, r0
 801550c:	b118      	cbz	r0, 8015516 <__swbuf_r+0x12>
 801550e:	6983      	ldr	r3, [r0, #24]
 8015510:	b90b      	cbnz	r3, 8015516 <__swbuf_r+0x12>
 8015512:	f000 fa07 	bl	8015924 <__sinit>
 8015516:	4b21      	ldr	r3, [pc, #132]	; (801559c <__swbuf_r+0x98>)
 8015518:	429c      	cmp	r4, r3
 801551a:	d12b      	bne.n	8015574 <__swbuf_r+0x70>
 801551c:	686c      	ldr	r4, [r5, #4]
 801551e:	69a3      	ldr	r3, [r4, #24]
 8015520:	60a3      	str	r3, [r4, #8]
 8015522:	89a3      	ldrh	r3, [r4, #12]
 8015524:	071a      	lsls	r2, r3, #28
 8015526:	d52f      	bpl.n	8015588 <__swbuf_r+0x84>
 8015528:	6923      	ldr	r3, [r4, #16]
 801552a:	b36b      	cbz	r3, 8015588 <__swbuf_r+0x84>
 801552c:	6923      	ldr	r3, [r4, #16]
 801552e:	6820      	ldr	r0, [r4, #0]
 8015530:	1ac0      	subs	r0, r0, r3
 8015532:	6963      	ldr	r3, [r4, #20]
 8015534:	b2f6      	uxtb	r6, r6
 8015536:	4283      	cmp	r3, r0
 8015538:	4637      	mov	r7, r6
 801553a:	dc04      	bgt.n	8015546 <__swbuf_r+0x42>
 801553c:	4621      	mov	r1, r4
 801553e:	4628      	mov	r0, r5
 8015540:	f000 f95c 	bl	80157fc <_fflush_r>
 8015544:	bb30      	cbnz	r0, 8015594 <__swbuf_r+0x90>
 8015546:	68a3      	ldr	r3, [r4, #8]
 8015548:	3b01      	subs	r3, #1
 801554a:	60a3      	str	r3, [r4, #8]
 801554c:	6823      	ldr	r3, [r4, #0]
 801554e:	1c5a      	adds	r2, r3, #1
 8015550:	6022      	str	r2, [r4, #0]
 8015552:	701e      	strb	r6, [r3, #0]
 8015554:	6963      	ldr	r3, [r4, #20]
 8015556:	3001      	adds	r0, #1
 8015558:	4283      	cmp	r3, r0
 801555a:	d004      	beq.n	8015566 <__swbuf_r+0x62>
 801555c:	89a3      	ldrh	r3, [r4, #12]
 801555e:	07db      	lsls	r3, r3, #31
 8015560:	d506      	bpl.n	8015570 <__swbuf_r+0x6c>
 8015562:	2e0a      	cmp	r6, #10
 8015564:	d104      	bne.n	8015570 <__swbuf_r+0x6c>
 8015566:	4621      	mov	r1, r4
 8015568:	4628      	mov	r0, r5
 801556a:	f000 f947 	bl	80157fc <_fflush_r>
 801556e:	b988      	cbnz	r0, 8015594 <__swbuf_r+0x90>
 8015570:	4638      	mov	r0, r7
 8015572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015574:	4b0a      	ldr	r3, [pc, #40]	; (80155a0 <__swbuf_r+0x9c>)
 8015576:	429c      	cmp	r4, r3
 8015578:	d101      	bne.n	801557e <__swbuf_r+0x7a>
 801557a:	68ac      	ldr	r4, [r5, #8]
 801557c:	e7cf      	b.n	801551e <__swbuf_r+0x1a>
 801557e:	4b09      	ldr	r3, [pc, #36]	; (80155a4 <__swbuf_r+0xa0>)
 8015580:	429c      	cmp	r4, r3
 8015582:	bf08      	it	eq
 8015584:	68ec      	ldreq	r4, [r5, #12]
 8015586:	e7ca      	b.n	801551e <__swbuf_r+0x1a>
 8015588:	4621      	mov	r1, r4
 801558a:	4628      	mov	r0, r5
 801558c:	f000 f81e 	bl	80155cc <__swsetup_r>
 8015590:	2800      	cmp	r0, #0
 8015592:	d0cb      	beq.n	801552c <__swbuf_r+0x28>
 8015594:	f04f 37ff 	mov.w	r7, #4294967295
 8015598:	e7ea      	b.n	8015570 <__swbuf_r+0x6c>
 801559a:	bf00      	nop
 801559c:	08017f18 	.word	0x08017f18
 80155a0:	08017f38 	.word	0x08017f38
 80155a4:	08017ef8 	.word	0x08017ef8

080155a8 <_write_r>:
 80155a8:	b538      	push	{r3, r4, r5, lr}
 80155aa:	4d07      	ldr	r5, [pc, #28]	; (80155c8 <_write_r+0x20>)
 80155ac:	4604      	mov	r4, r0
 80155ae:	4608      	mov	r0, r1
 80155b0:	4611      	mov	r1, r2
 80155b2:	2200      	movs	r2, #0
 80155b4:	602a      	str	r2, [r5, #0]
 80155b6:	461a      	mov	r2, r3
 80155b8:	f7f5 f8c9 	bl	800a74e <_write>
 80155bc:	1c43      	adds	r3, r0, #1
 80155be:	d102      	bne.n	80155c6 <_write_r+0x1e>
 80155c0:	682b      	ldr	r3, [r5, #0]
 80155c2:	b103      	cbz	r3, 80155c6 <_write_r+0x1e>
 80155c4:	6023      	str	r3, [r4, #0]
 80155c6:	bd38      	pop	{r3, r4, r5, pc}
 80155c8:	2000a7b4 	.word	0x2000a7b4

080155cc <__swsetup_r>:
 80155cc:	4b32      	ldr	r3, [pc, #200]	; (8015698 <__swsetup_r+0xcc>)
 80155ce:	b570      	push	{r4, r5, r6, lr}
 80155d0:	681d      	ldr	r5, [r3, #0]
 80155d2:	4606      	mov	r6, r0
 80155d4:	460c      	mov	r4, r1
 80155d6:	b125      	cbz	r5, 80155e2 <__swsetup_r+0x16>
 80155d8:	69ab      	ldr	r3, [r5, #24]
 80155da:	b913      	cbnz	r3, 80155e2 <__swsetup_r+0x16>
 80155dc:	4628      	mov	r0, r5
 80155de:	f000 f9a1 	bl	8015924 <__sinit>
 80155e2:	4b2e      	ldr	r3, [pc, #184]	; (801569c <__swsetup_r+0xd0>)
 80155e4:	429c      	cmp	r4, r3
 80155e6:	d10f      	bne.n	8015608 <__swsetup_r+0x3c>
 80155e8:	686c      	ldr	r4, [r5, #4]
 80155ea:	89a3      	ldrh	r3, [r4, #12]
 80155ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80155f0:	0719      	lsls	r1, r3, #28
 80155f2:	d42c      	bmi.n	801564e <__swsetup_r+0x82>
 80155f4:	06dd      	lsls	r5, r3, #27
 80155f6:	d411      	bmi.n	801561c <__swsetup_r+0x50>
 80155f8:	2309      	movs	r3, #9
 80155fa:	6033      	str	r3, [r6, #0]
 80155fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015600:	81a3      	strh	r3, [r4, #12]
 8015602:	f04f 30ff 	mov.w	r0, #4294967295
 8015606:	e03e      	b.n	8015686 <__swsetup_r+0xba>
 8015608:	4b25      	ldr	r3, [pc, #148]	; (80156a0 <__swsetup_r+0xd4>)
 801560a:	429c      	cmp	r4, r3
 801560c:	d101      	bne.n	8015612 <__swsetup_r+0x46>
 801560e:	68ac      	ldr	r4, [r5, #8]
 8015610:	e7eb      	b.n	80155ea <__swsetup_r+0x1e>
 8015612:	4b24      	ldr	r3, [pc, #144]	; (80156a4 <__swsetup_r+0xd8>)
 8015614:	429c      	cmp	r4, r3
 8015616:	bf08      	it	eq
 8015618:	68ec      	ldreq	r4, [r5, #12]
 801561a:	e7e6      	b.n	80155ea <__swsetup_r+0x1e>
 801561c:	0758      	lsls	r0, r3, #29
 801561e:	d512      	bpl.n	8015646 <__swsetup_r+0x7a>
 8015620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015622:	b141      	cbz	r1, 8015636 <__swsetup_r+0x6a>
 8015624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015628:	4299      	cmp	r1, r3
 801562a:	d002      	beq.n	8015632 <__swsetup_r+0x66>
 801562c:	4630      	mov	r0, r6
 801562e:	f7fd f84f 	bl	80126d0 <_free_r>
 8015632:	2300      	movs	r3, #0
 8015634:	6363      	str	r3, [r4, #52]	; 0x34
 8015636:	89a3      	ldrh	r3, [r4, #12]
 8015638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801563c:	81a3      	strh	r3, [r4, #12]
 801563e:	2300      	movs	r3, #0
 8015640:	6063      	str	r3, [r4, #4]
 8015642:	6923      	ldr	r3, [r4, #16]
 8015644:	6023      	str	r3, [r4, #0]
 8015646:	89a3      	ldrh	r3, [r4, #12]
 8015648:	f043 0308 	orr.w	r3, r3, #8
 801564c:	81a3      	strh	r3, [r4, #12]
 801564e:	6923      	ldr	r3, [r4, #16]
 8015650:	b94b      	cbnz	r3, 8015666 <__swsetup_r+0x9a>
 8015652:	89a3      	ldrh	r3, [r4, #12]
 8015654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801565c:	d003      	beq.n	8015666 <__swsetup_r+0x9a>
 801565e:	4621      	mov	r1, r4
 8015660:	4630      	mov	r0, r6
 8015662:	f000 fa35 	bl	8015ad0 <__smakebuf_r>
 8015666:	89a0      	ldrh	r0, [r4, #12]
 8015668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801566c:	f010 0301 	ands.w	r3, r0, #1
 8015670:	d00a      	beq.n	8015688 <__swsetup_r+0xbc>
 8015672:	2300      	movs	r3, #0
 8015674:	60a3      	str	r3, [r4, #8]
 8015676:	6963      	ldr	r3, [r4, #20]
 8015678:	425b      	negs	r3, r3
 801567a:	61a3      	str	r3, [r4, #24]
 801567c:	6923      	ldr	r3, [r4, #16]
 801567e:	b943      	cbnz	r3, 8015692 <__swsetup_r+0xc6>
 8015680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015684:	d1ba      	bne.n	80155fc <__swsetup_r+0x30>
 8015686:	bd70      	pop	{r4, r5, r6, pc}
 8015688:	0781      	lsls	r1, r0, #30
 801568a:	bf58      	it	pl
 801568c:	6963      	ldrpl	r3, [r4, #20]
 801568e:	60a3      	str	r3, [r4, #8]
 8015690:	e7f4      	b.n	801567c <__swsetup_r+0xb0>
 8015692:	2000      	movs	r0, #0
 8015694:	e7f7      	b.n	8015686 <__swsetup_r+0xba>
 8015696:	bf00      	nop
 8015698:	20000020 	.word	0x20000020
 801569c:	08017f18 	.word	0x08017f18
 80156a0:	08017f38 	.word	0x08017f38
 80156a4:	08017ef8 	.word	0x08017ef8

080156a8 <abort>:
 80156a8:	b508      	push	{r3, lr}
 80156aa:	2006      	movs	r0, #6
 80156ac:	f000 fe42 	bl	8016334 <raise>
 80156b0:	2001      	movs	r0, #1
 80156b2:	f7f5 f825 	bl	800a700 <_exit>
	...

080156b8 <_close_r>:
 80156b8:	b538      	push	{r3, r4, r5, lr}
 80156ba:	4d06      	ldr	r5, [pc, #24]	; (80156d4 <_close_r+0x1c>)
 80156bc:	2300      	movs	r3, #0
 80156be:	4604      	mov	r4, r0
 80156c0:	4608      	mov	r0, r1
 80156c2:	602b      	str	r3, [r5, #0]
 80156c4:	f7f5 f85f 	bl	800a786 <_close>
 80156c8:	1c43      	adds	r3, r0, #1
 80156ca:	d102      	bne.n	80156d2 <_close_r+0x1a>
 80156cc:	682b      	ldr	r3, [r5, #0]
 80156ce:	b103      	cbz	r3, 80156d2 <_close_r+0x1a>
 80156d0:	6023      	str	r3, [r4, #0]
 80156d2:	bd38      	pop	{r3, r4, r5, pc}
 80156d4:	2000a7b4 	.word	0x2000a7b4

080156d8 <__env_lock>:
 80156d8:	4801      	ldr	r0, [pc, #4]	; (80156e0 <__env_lock+0x8>)
 80156da:	f7fe bfa7 	b.w	801462c <__retarget_lock_acquire_recursive>
 80156de:	bf00      	nop
 80156e0:	2000a7ac 	.word	0x2000a7ac

080156e4 <__env_unlock>:
 80156e4:	4801      	ldr	r0, [pc, #4]	; (80156ec <__env_unlock+0x8>)
 80156e6:	f7fe bfa3 	b.w	8014630 <__retarget_lock_release_recursive>
 80156ea:	bf00      	nop
 80156ec:	2000a7ac 	.word	0x2000a7ac

080156f0 <__sflush_r>:
 80156f0:	898a      	ldrh	r2, [r1, #12]
 80156f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156f6:	4605      	mov	r5, r0
 80156f8:	0710      	lsls	r0, r2, #28
 80156fa:	460c      	mov	r4, r1
 80156fc:	d458      	bmi.n	80157b0 <__sflush_r+0xc0>
 80156fe:	684b      	ldr	r3, [r1, #4]
 8015700:	2b00      	cmp	r3, #0
 8015702:	dc05      	bgt.n	8015710 <__sflush_r+0x20>
 8015704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015706:	2b00      	cmp	r3, #0
 8015708:	dc02      	bgt.n	8015710 <__sflush_r+0x20>
 801570a:	2000      	movs	r0, #0
 801570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015712:	2e00      	cmp	r6, #0
 8015714:	d0f9      	beq.n	801570a <__sflush_r+0x1a>
 8015716:	2300      	movs	r3, #0
 8015718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801571c:	682f      	ldr	r7, [r5, #0]
 801571e:	602b      	str	r3, [r5, #0]
 8015720:	d032      	beq.n	8015788 <__sflush_r+0x98>
 8015722:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015724:	89a3      	ldrh	r3, [r4, #12]
 8015726:	075a      	lsls	r2, r3, #29
 8015728:	d505      	bpl.n	8015736 <__sflush_r+0x46>
 801572a:	6863      	ldr	r3, [r4, #4]
 801572c:	1ac0      	subs	r0, r0, r3
 801572e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015730:	b10b      	cbz	r3, 8015736 <__sflush_r+0x46>
 8015732:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015734:	1ac0      	subs	r0, r0, r3
 8015736:	2300      	movs	r3, #0
 8015738:	4602      	mov	r2, r0
 801573a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801573c:	6a21      	ldr	r1, [r4, #32]
 801573e:	4628      	mov	r0, r5
 8015740:	47b0      	blx	r6
 8015742:	1c43      	adds	r3, r0, #1
 8015744:	89a3      	ldrh	r3, [r4, #12]
 8015746:	d106      	bne.n	8015756 <__sflush_r+0x66>
 8015748:	6829      	ldr	r1, [r5, #0]
 801574a:	291d      	cmp	r1, #29
 801574c:	d82c      	bhi.n	80157a8 <__sflush_r+0xb8>
 801574e:	4a2a      	ldr	r2, [pc, #168]	; (80157f8 <__sflush_r+0x108>)
 8015750:	40ca      	lsrs	r2, r1
 8015752:	07d6      	lsls	r6, r2, #31
 8015754:	d528      	bpl.n	80157a8 <__sflush_r+0xb8>
 8015756:	2200      	movs	r2, #0
 8015758:	6062      	str	r2, [r4, #4]
 801575a:	04d9      	lsls	r1, r3, #19
 801575c:	6922      	ldr	r2, [r4, #16]
 801575e:	6022      	str	r2, [r4, #0]
 8015760:	d504      	bpl.n	801576c <__sflush_r+0x7c>
 8015762:	1c42      	adds	r2, r0, #1
 8015764:	d101      	bne.n	801576a <__sflush_r+0x7a>
 8015766:	682b      	ldr	r3, [r5, #0]
 8015768:	b903      	cbnz	r3, 801576c <__sflush_r+0x7c>
 801576a:	6560      	str	r0, [r4, #84]	; 0x54
 801576c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801576e:	602f      	str	r7, [r5, #0]
 8015770:	2900      	cmp	r1, #0
 8015772:	d0ca      	beq.n	801570a <__sflush_r+0x1a>
 8015774:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015778:	4299      	cmp	r1, r3
 801577a:	d002      	beq.n	8015782 <__sflush_r+0x92>
 801577c:	4628      	mov	r0, r5
 801577e:	f7fc ffa7 	bl	80126d0 <_free_r>
 8015782:	2000      	movs	r0, #0
 8015784:	6360      	str	r0, [r4, #52]	; 0x34
 8015786:	e7c1      	b.n	801570c <__sflush_r+0x1c>
 8015788:	6a21      	ldr	r1, [r4, #32]
 801578a:	2301      	movs	r3, #1
 801578c:	4628      	mov	r0, r5
 801578e:	47b0      	blx	r6
 8015790:	1c41      	adds	r1, r0, #1
 8015792:	d1c7      	bne.n	8015724 <__sflush_r+0x34>
 8015794:	682b      	ldr	r3, [r5, #0]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d0c4      	beq.n	8015724 <__sflush_r+0x34>
 801579a:	2b1d      	cmp	r3, #29
 801579c:	d001      	beq.n	80157a2 <__sflush_r+0xb2>
 801579e:	2b16      	cmp	r3, #22
 80157a0:	d101      	bne.n	80157a6 <__sflush_r+0xb6>
 80157a2:	602f      	str	r7, [r5, #0]
 80157a4:	e7b1      	b.n	801570a <__sflush_r+0x1a>
 80157a6:	89a3      	ldrh	r3, [r4, #12]
 80157a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157ac:	81a3      	strh	r3, [r4, #12]
 80157ae:	e7ad      	b.n	801570c <__sflush_r+0x1c>
 80157b0:	690f      	ldr	r7, [r1, #16]
 80157b2:	2f00      	cmp	r7, #0
 80157b4:	d0a9      	beq.n	801570a <__sflush_r+0x1a>
 80157b6:	0793      	lsls	r3, r2, #30
 80157b8:	680e      	ldr	r6, [r1, #0]
 80157ba:	bf08      	it	eq
 80157bc:	694b      	ldreq	r3, [r1, #20]
 80157be:	600f      	str	r7, [r1, #0]
 80157c0:	bf18      	it	ne
 80157c2:	2300      	movne	r3, #0
 80157c4:	eba6 0807 	sub.w	r8, r6, r7
 80157c8:	608b      	str	r3, [r1, #8]
 80157ca:	f1b8 0f00 	cmp.w	r8, #0
 80157ce:	dd9c      	ble.n	801570a <__sflush_r+0x1a>
 80157d0:	6a21      	ldr	r1, [r4, #32]
 80157d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157d4:	4643      	mov	r3, r8
 80157d6:	463a      	mov	r2, r7
 80157d8:	4628      	mov	r0, r5
 80157da:	47b0      	blx	r6
 80157dc:	2800      	cmp	r0, #0
 80157de:	dc06      	bgt.n	80157ee <__sflush_r+0xfe>
 80157e0:	89a3      	ldrh	r3, [r4, #12]
 80157e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157e6:	81a3      	strh	r3, [r4, #12]
 80157e8:	f04f 30ff 	mov.w	r0, #4294967295
 80157ec:	e78e      	b.n	801570c <__sflush_r+0x1c>
 80157ee:	4407      	add	r7, r0
 80157f0:	eba8 0800 	sub.w	r8, r8, r0
 80157f4:	e7e9      	b.n	80157ca <__sflush_r+0xda>
 80157f6:	bf00      	nop
 80157f8:	20400001 	.word	0x20400001

080157fc <_fflush_r>:
 80157fc:	b538      	push	{r3, r4, r5, lr}
 80157fe:	690b      	ldr	r3, [r1, #16]
 8015800:	4605      	mov	r5, r0
 8015802:	460c      	mov	r4, r1
 8015804:	b913      	cbnz	r3, 801580c <_fflush_r+0x10>
 8015806:	2500      	movs	r5, #0
 8015808:	4628      	mov	r0, r5
 801580a:	bd38      	pop	{r3, r4, r5, pc}
 801580c:	b118      	cbz	r0, 8015816 <_fflush_r+0x1a>
 801580e:	6983      	ldr	r3, [r0, #24]
 8015810:	b90b      	cbnz	r3, 8015816 <_fflush_r+0x1a>
 8015812:	f000 f887 	bl	8015924 <__sinit>
 8015816:	4b14      	ldr	r3, [pc, #80]	; (8015868 <_fflush_r+0x6c>)
 8015818:	429c      	cmp	r4, r3
 801581a:	d11b      	bne.n	8015854 <_fflush_r+0x58>
 801581c:	686c      	ldr	r4, [r5, #4]
 801581e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015822:	2b00      	cmp	r3, #0
 8015824:	d0ef      	beq.n	8015806 <_fflush_r+0xa>
 8015826:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015828:	07d0      	lsls	r0, r2, #31
 801582a:	d404      	bmi.n	8015836 <_fflush_r+0x3a>
 801582c:	0599      	lsls	r1, r3, #22
 801582e:	d402      	bmi.n	8015836 <_fflush_r+0x3a>
 8015830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015832:	f7fe fefb 	bl	801462c <__retarget_lock_acquire_recursive>
 8015836:	4628      	mov	r0, r5
 8015838:	4621      	mov	r1, r4
 801583a:	f7ff ff59 	bl	80156f0 <__sflush_r>
 801583e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015840:	07da      	lsls	r2, r3, #31
 8015842:	4605      	mov	r5, r0
 8015844:	d4e0      	bmi.n	8015808 <_fflush_r+0xc>
 8015846:	89a3      	ldrh	r3, [r4, #12]
 8015848:	059b      	lsls	r3, r3, #22
 801584a:	d4dd      	bmi.n	8015808 <_fflush_r+0xc>
 801584c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801584e:	f7fe feef 	bl	8014630 <__retarget_lock_release_recursive>
 8015852:	e7d9      	b.n	8015808 <_fflush_r+0xc>
 8015854:	4b05      	ldr	r3, [pc, #20]	; (801586c <_fflush_r+0x70>)
 8015856:	429c      	cmp	r4, r3
 8015858:	d101      	bne.n	801585e <_fflush_r+0x62>
 801585a:	68ac      	ldr	r4, [r5, #8]
 801585c:	e7df      	b.n	801581e <_fflush_r+0x22>
 801585e:	4b04      	ldr	r3, [pc, #16]	; (8015870 <_fflush_r+0x74>)
 8015860:	429c      	cmp	r4, r3
 8015862:	bf08      	it	eq
 8015864:	68ec      	ldreq	r4, [r5, #12]
 8015866:	e7da      	b.n	801581e <_fflush_r+0x22>
 8015868:	08017f18 	.word	0x08017f18
 801586c:	08017f38 	.word	0x08017f38
 8015870:	08017ef8 	.word	0x08017ef8

08015874 <std>:
 8015874:	2300      	movs	r3, #0
 8015876:	b510      	push	{r4, lr}
 8015878:	4604      	mov	r4, r0
 801587a:	e9c0 3300 	strd	r3, r3, [r0]
 801587e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015882:	6083      	str	r3, [r0, #8]
 8015884:	8181      	strh	r1, [r0, #12]
 8015886:	6643      	str	r3, [r0, #100]	; 0x64
 8015888:	81c2      	strh	r2, [r0, #14]
 801588a:	6183      	str	r3, [r0, #24]
 801588c:	4619      	mov	r1, r3
 801588e:	2208      	movs	r2, #8
 8015890:	305c      	adds	r0, #92	; 0x5c
 8015892:	f7fc fca3 	bl	80121dc <memset>
 8015896:	4b05      	ldr	r3, [pc, #20]	; (80158ac <std+0x38>)
 8015898:	6263      	str	r3, [r4, #36]	; 0x24
 801589a:	4b05      	ldr	r3, [pc, #20]	; (80158b0 <std+0x3c>)
 801589c:	62a3      	str	r3, [r4, #40]	; 0x28
 801589e:	4b05      	ldr	r3, [pc, #20]	; (80158b4 <std+0x40>)
 80158a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80158a2:	4b05      	ldr	r3, [pc, #20]	; (80158b8 <std+0x44>)
 80158a4:	6224      	str	r4, [r4, #32]
 80158a6:	6323      	str	r3, [r4, #48]	; 0x30
 80158a8:	bd10      	pop	{r4, pc}
 80158aa:	bf00      	nop
 80158ac:	08015345 	.word	0x08015345
 80158b0:	0801536b 	.word	0x0801536b
 80158b4:	080153a3 	.word	0x080153a3
 80158b8:	080153c7 	.word	0x080153c7

080158bc <_cleanup_r>:
 80158bc:	4901      	ldr	r1, [pc, #4]	; (80158c4 <_cleanup_r+0x8>)
 80158be:	f000 b8af 	b.w	8015a20 <_fwalk_reent>
 80158c2:	bf00      	nop
 80158c4:	080157fd 	.word	0x080157fd

080158c8 <__sfmoreglue>:
 80158c8:	b570      	push	{r4, r5, r6, lr}
 80158ca:	2268      	movs	r2, #104	; 0x68
 80158cc:	1e4d      	subs	r5, r1, #1
 80158ce:	4355      	muls	r5, r2
 80158d0:	460e      	mov	r6, r1
 80158d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80158d6:	f7fc ff67 	bl	80127a8 <_malloc_r>
 80158da:	4604      	mov	r4, r0
 80158dc:	b140      	cbz	r0, 80158f0 <__sfmoreglue+0x28>
 80158de:	2100      	movs	r1, #0
 80158e0:	e9c0 1600 	strd	r1, r6, [r0]
 80158e4:	300c      	adds	r0, #12
 80158e6:	60a0      	str	r0, [r4, #8]
 80158e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80158ec:	f7fc fc76 	bl	80121dc <memset>
 80158f0:	4620      	mov	r0, r4
 80158f2:	bd70      	pop	{r4, r5, r6, pc}

080158f4 <__sfp_lock_acquire>:
 80158f4:	4801      	ldr	r0, [pc, #4]	; (80158fc <__sfp_lock_acquire+0x8>)
 80158f6:	f7fe be99 	b.w	801462c <__retarget_lock_acquire_recursive>
 80158fa:	bf00      	nop
 80158fc:	2000a7ae 	.word	0x2000a7ae

08015900 <__sfp_lock_release>:
 8015900:	4801      	ldr	r0, [pc, #4]	; (8015908 <__sfp_lock_release+0x8>)
 8015902:	f7fe be95 	b.w	8014630 <__retarget_lock_release_recursive>
 8015906:	bf00      	nop
 8015908:	2000a7ae 	.word	0x2000a7ae

0801590c <__sinit_lock_acquire>:
 801590c:	4801      	ldr	r0, [pc, #4]	; (8015914 <__sinit_lock_acquire+0x8>)
 801590e:	f7fe be8d 	b.w	801462c <__retarget_lock_acquire_recursive>
 8015912:	bf00      	nop
 8015914:	2000a7af 	.word	0x2000a7af

08015918 <__sinit_lock_release>:
 8015918:	4801      	ldr	r0, [pc, #4]	; (8015920 <__sinit_lock_release+0x8>)
 801591a:	f7fe be89 	b.w	8014630 <__retarget_lock_release_recursive>
 801591e:	bf00      	nop
 8015920:	2000a7af 	.word	0x2000a7af

08015924 <__sinit>:
 8015924:	b510      	push	{r4, lr}
 8015926:	4604      	mov	r4, r0
 8015928:	f7ff fff0 	bl	801590c <__sinit_lock_acquire>
 801592c:	69a3      	ldr	r3, [r4, #24]
 801592e:	b11b      	cbz	r3, 8015938 <__sinit+0x14>
 8015930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015934:	f7ff bff0 	b.w	8015918 <__sinit_lock_release>
 8015938:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801593c:	6523      	str	r3, [r4, #80]	; 0x50
 801593e:	4b13      	ldr	r3, [pc, #76]	; (801598c <__sinit+0x68>)
 8015940:	4a13      	ldr	r2, [pc, #76]	; (8015990 <__sinit+0x6c>)
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	62a2      	str	r2, [r4, #40]	; 0x28
 8015946:	42a3      	cmp	r3, r4
 8015948:	bf04      	itt	eq
 801594a:	2301      	moveq	r3, #1
 801594c:	61a3      	streq	r3, [r4, #24]
 801594e:	4620      	mov	r0, r4
 8015950:	f000 f820 	bl	8015994 <__sfp>
 8015954:	6060      	str	r0, [r4, #4]
 8015956:	4620      	mov	r0, r4
 8015958:	f000 f81c 	bl	8015994 <__sfp>
 801595c:	60a0      	str	r0, [r4, #8]
 801595e:	4620      	mov	r0, r4
 8015960:	f000 f818 	bl	8015994 <__sfp>
 8015964:	2200      	movs	r2, #0
 8015966:	60e0      	str	r0, [r4, #12]
 8015968:	2104      	movs	r1, #4
 801596a:	6860      	ldr	r0, [r4, #4]
 801596c:	f7ff ff82 	bl	8015874 <std>
 8015970:	68a0      	ldr	r0, [r4, #8]
 8015972:	2201      	movs	r2, #1
 8015974:	2109      	movs	r1, #9
 8015976:	f7ff ff7d 	bl	8015874 <std>
 801597a:	68e0      	ldr	r0, [r4, #12]
 801597c:	2202      	movs	r2, #2
 801597e:	2112      	movs	r1, #18
 8015980:	f7ff ff78 	bl	8015874 <std>
 8015984:	2301      	movs	r3, #1
 8015986:	61a3      	str	r3, [r4, #24]
 8015988:	e7d2      	b.n	8015930 <__sinit+0xc>
 801598a:	bf00      	nop
 801598c:	080179d4 	.word	0x080179d4
 8015990:	080158bd 	.word	0x080158bd

08015994 <__sfp>:
 8015994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015996:	4607      	mov	r7, r0
 8015998:	f7ff ffac 	bl	80158f4 <__sfp_lock_acquire>
 801599c:	4b1e      	ldr	r3, [pc, #120]	; (8015a18 <__sfp+0x84>)
 801599e:	681e      	ldr	r6, [r3, #0]
 80159a0:	69b3      	ldr	r3, [r6, #24]
 80159a2:	b913      	cbnz	r3, 80159aa <__sfp+0x16>
 80159a4:	4630      	mov	r0, r6
 80159a6:	f7ff ffbd 	bl	8015924 <__sinit>
 80159aa:	3648      	adds	r6, #72	; 0x48
 80159ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80159b0:	3b01      	subs	r3, #1
 80159b2:	d503      	bpl.n	80159bc <__sfp+0x28>
 80159b4:	6833      	ldr	r3, [r6, #0]
 80159b6:	b30b      	cbz	r3, 80159fc <__sfp+0x68>
 80159b8:	6836      	ldr	r6, [r6, #0]
 80159ba:	e7f7      	b.n	80159ac <__sfp+0x18>
 80159bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80159c0:	b9d5      	cbnz	r5, 80159f8 <__sfp+0x64>
 80159c2:	4b16      	ldr	r3, [pc, #88]	; (8015a1c <__sfp+0x88>)
 80159c4:	60e3      	str	r3, [r4, #12]
 80159c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80159ca:	6665      	str	r5, [r4, #100]	; 0x64
 80159cc:	f7fe fe2c 	bl	8014628 <__retarget_lock_init_recursive>
 80159d0:	f7ff ff96 	bl	8015900 <__sfp_lock_release>
 80159d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80159d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80159dc:	6025      	str	r5, [r4, #0]
 80159de:	61a5      	str	r5, [r4, #24]
 80159e0:	2208      	movs	r2, #8
 80159e2:	4629      	mov	r1, r5
 80159e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80159e8:	f7fc fbf8 	bl	80121dc <memset>
 80159ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80159f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80159f4:	4620      	mov	r0, r4
 80159f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159f8:	3468      	adds	r4, #104	; 0x68
 80159fa:	e7d9      	b.n	80159b0 <__sfp+0x1c>
 80159fc:	2104      	movs	r1, #4
 80159fe:	4638      	mov	r0, r7
 8015a00:	f7ff ff62 	bl	80158c8 <__sfmoreglue>
 8015a04:	4604      	mov	r4, r0
 8015a06:	6030      	str	r0, [r6, #0]
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	d1d5      	bne.n	80159b8 <__sfp+0x24>
 8015a0c:	f7ff ff78 	bl	8015900 <__sfp_lock_release>
 8015a10:	230c      	movs	r3, #12
 8015a12:	603b      	str	r3, [r7, #0]
 8015a14:	e7ee      	b.n	80159f4 <__sfp+0x60>
 8015a16:	bf00      	nop
 8015a18:	080179d4 	.word	0x080179d4
 8015a1c:	ffff0001 	.word	0xffff0001

08015a20 <_fwalk_reent>:
 8015a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a24:	4606      	mov	r6, r0
 8015a26:	4688      	mov	r8, r1
 8015a28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015a2c:	2700      	movs	r7, #0
 8015a2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a32:	f1b9 0901 	subs.w	r9, r9, #1
 8015a36:	d505      	bpl.n	8015a44 <_fwalk_reent+0x24>
 8015a38:	6824      	ldr	r4, [r4, #0]
 8015a3a:	2c00      	cmp	r4, #0
 8015a3c:	d1f7      	bne.n	8015a2e <_fwalk_reent+0xe>
 8015a3e:	4638      	mov	r0, r7
 8015a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a44:	89ab      	ldrh	r3, [r5, #12]
 8015a46:	2b01      	cmp	r3, #1
 8015a48:	d907      	bls.n	8015a5a <_fwalk_reent+0x3a>
 8015a4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a4e:	3301      	adds	r3, #1
 8015a50:	d003      	beq.n	8015a5a <_fwalk_reent+0x3a>
 8015a52:	4629      	mov	r1, r5
 8015a54:	4630      	mov	r0, r6
 8015a56:	47c0      	blx	r8
 8015a58:	4307      	orrs	r7, r0
 8015a5a:	3568      	adds	r5, #104	; 0x68
 8015a5c:	e7e9      	b.n	8015a32 <_fwalk_reent+0x12>
	...

08015a60 <_lseek_r>:
 8015a60:	b538      	push	{r3, r4, r5, lr}
 8015a62:	4d07      	ldr	r5, [pc, #28]	; (8015a80 <_lseek_r+0x20>)
 8015a64:	4604      	mov	r4, r0
 8015a66:	4608      	mov	r0, r1
 8015a68:	4611      	mov	r1, r2
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	602a      	str	r2, [r5, #0]
 8015a6e:	461a      	mov	r2, r3
 8015a70:	f7f4 feb0 	bl	800a7d4 <_lseek>
 8015a74:	1c43      	adds	r3, r0, #1
 8015a76:	d102      	bne.n	8015a7e <_lseek_r+0x1e>
 8015a78:	682b      	ldr	r3, [r5, #0]
 8015a7a:	b103      	cbz	r3, 8015a7e <_lseek_r+0x1e>
 8015a7c:	6023      	str	r3, [r4, #0]
 8015a7e:	bd38      	pop	{r3, r4, r5, pc}
 8015a80:	2000a7b4 	.word	0x2000a7b4

08015a84 <__swhatbuf_r>:
 8015a84:	b570      	push	{r4, r5, r6, lr}
 8015a86:	460e      	mov	r6, r1
 8015a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a8c:	2900      	cmp	r1, #0
 8015a8e:	b096      	sub	sp, #88	; 0x58
 8015a90:	4614      	mov	r4, r2
 8015a92:	461d      	mov	r5, r3
 8015a94:	da08      	bge.n	8015aa8 <__swhatbuf_r+0x24>
 8015a96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015a9a:	2200      	movs	r2, #0
 8015a9c:	602a      	str	r2, [r5, #0]
 8015a9e:	061a      	lsls	r2, r3, #24
 8015aa0:	d410      	bmi.n	8015ac4 <__swhatbuf_r+0x40>
 8015aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015aa6:	e00e      	b.n	8015ac6 <__swhatbuf_r+0x42>
 8015aa8:	466a      	mov	r2, sp
 8015aaa:	f000 fd2b 	bl	8016504 <_fstat_r>
 8015aae:	2800      	cmp	r0, #0
 8015ab0:	dbf1      	blt.n	8015a96 <__swhatbuf_r+0x12>
 8015ab2:	9a01      	ldr	r2, [sp, #4]
 8015ab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015ab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015abc:	425a      	negs	r2, r3
 8015abe:	415a      	adcs	r2, r3
 8015ac0:	602a      	str	r2, [r5, #0]
 8015ac2:	e7ee      	b.n	8015aa2 <__swhatbuf_r+0x1e>
 8015ac4:	2340      	movs	r3, #64	; 0x40
 8015ac6:	2000      	movs	r0, #0
 8015ac8:	6023      	str	r3, [r4, #0]
 8015aca:	b016      	add	sp, #88	; 0x58
 8015acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08015ad0 <__smakebuf_r>:
 8015ad0:	898b      	ldrh	r3, [r1, #12]
 8015ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015ad4:	079d      	lsls	r5, r3, #30
 8015ad6:	4606      	mov	r6, r0
 8015ad8:	460c      	mov	r4, r1
 8015ada:	d507      	bpl.n	8015aec <__smakebuf_r+0x1c>
 8015adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015ae0:	6023      	str	r3, [r4, #0]
 8015ae2:	6123      	str	r3, [r4, #16]
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	6163      	str	r3, [r4, #20]
 8015ae8:	b002      	add	sp, #8
 8015aea:	bd70      	pop	{r4, r5, r6, pc}
 8015aec:	ab01      	add	r3, sp, #4
 8015aee:	466a      	mov	r2, sp
 8015af0:	f7ff ffc8 	bl	8015a84 <__swhatbuf_r>
 8015af4:	9900      	ldr	r1, [sp, #0]
 8015af6:	4605      	mov	r5, r0
 8015af8:	4630      	mov	r0, r6
 8015afa:	f7fc fe55 	bl	80127a8 <_malloc_r>
 8015afe:	b948      	cbnz	r0, 8015b14 <__smakebuf_r+0x44>
 8015b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b04:	059a      	lsls	r2, r3, #22
 8015b06:	d4ef      	bmi.n	8015ae8 <__smakebuf_r+0x18>
 8015b08:	f023 0303 	bic.w	r3, r3, #3
 8015b0c:	f043 0302 	orr.w	r3, r3, #2
 8015b10:	81a3      	strh	r3, [r4, #12]
 8015b12:	e7e3      	b.n	8015adc <__smakebuf_r+0xc>
 8015b14:	4b0d      	ldr	r3, [pc, #52]	; (8015b4c <__smakebuf_r+0x7c>)
 8015b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8015b18:	89a3      	ldrh	r3, [r4, #12]
 8015b1a:	6020      	str	r0, [r4, #0]
 8015b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015b20:	81a3      	strh	r3, [r4, #12]
 8015b22:	9b00      	ldr	r3, [sp, #0]
 8015b24:	6163      	str	r3, [r4, #20]
 8015b26:	9b01      	ldr	r3, [sp, #4]
 8015b28:	6120      	str	r0, [r4, #16]
 8015b2a:	b15b      	cbz	r3, 8015b44 <__smakebuf_r+0x74>
 8015b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015b30:	4630      	mov	r0, r6
 8015b32:	f000 fcf9 	bl	8016528 <_isatty_r>
 8015b36:	b128      	cbz	r0, 8015b44 <__smakebuf_r+0x74>
 8015b38:	89a3      	ldrh	r3, [r4, #12]
 8015b3a:	f023 0303 	bic.w	r3, r3, #3
 8015b3e:	f043 0301 	orr.w	r3, r3, #1
 8015b42:	81a3      	strh	r3, [r4, #12]
 8015b44:	89a0      	ldrh	r0, [r4, #12]
 8015b46:	4305      	orrs	r5, r0
 8015b48:	81a5      	strh	r5, [r4, #12]
 8015b4a:	e7cd      	b.n	8015ae8 <__smakebuf_r+0x18>
 8015b4c:	080158bd 	.word	0x080158bd

08015b50 <__ascii_mbtowc>:
 8015b50:	b082      	sub	sp, #8
 8015b52:	b901      	cbnz	r1, 8015b56 <__ascii_mbtowc+0x6>
 8015b54:	a901      	add	r1, sp, #4
 8015b56:	b142      	cbz	r2, 8015b6a <__ascii_mbtowc+0x1a>
 8015b58:	b14b      	cbz	r3, 8015b6e <__ascii_mbtowc+0x1e>
 8015b5a:	7813      	ldrb	r3, [r2, #0]
 8015b5c:	600b      	str	r3, [r1, #0]
 8015b5e:	7812      	ldrb	r2, [r2, #0]
 8015b60:	1e10      	subs	r0, r2, #0
 8015b62:	bf18      	it	ne
 8015b64:	2001      	movne	r0, #1
 8015b66:	b002      	add	sp, #8
 8015b68:	4770      	bx	lr
 8015b6a:	4610      	mov	r0, r2
 8015b6c:	e7fb      	b.n	8015b66 <__ascii_mbtowc+0x16>
 8015b6e:	f06f 0001 	mvn.w	r0, #1
 8015b72:	e7f8      	b.n	8015b66 <__ascii_mbtowc+0x16>

08015b74 <memmove>:
 8015b74:	4288      	cmp	r0, r1
 8015b76:	b510      	push	{r4, lr}
 8015b78:	eb01 0402 	add.w	r4, r1, r2
 8015b7c:	d902      	bls.n	8015b84 <memmove+0x10>
 8015b7e:	4284      	cmp	r4, r0
 8015b80:	4623      	mov	r3, r4
 8015b82:	d807      	bhi.n	8015b94 <memmove+0x20>
 8015b84:	1e43      	subs	r3, r0, #1
 8015b86:	42a1      	cmp	r1, r4
 8015b88:	d008      	beq.n	8015b9c <memmove+0x28>
 8015b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b92:	e7f8      	b.n	8015b86 <memmove+0x12>
 8015b94:	4402      	add	r2, r0
 8015b96:	4601      	mov	r1, r0
 8015b98:	428a      	cmp	r2, r1
 8015b9a:	d100      	bne.n	8015b9e <memmove+0x2a>
 8015b9c:	bd10      	pop	{r4, pc}
 8015b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015ba6:	e7f7      	b.n	8015b98 <memmove+0x24>

08015ba8 <_realloc_r>:
 8015ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bac:	4680      	mov	r8, r0
 8015bae:	4614      	mov	r4, r2
 8015bb0:	460e      	mov	r6, r1
 8015bb2:	b921      	cbnz	r1, 8015bbe <_realloc_r+0x16>
 8015bb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bb8:	4611      	mov	r1, r2
 8015bba:	f7fc bdf5 	b.w	80127a8 <_malloc_r>
 8015bbe:	b92a      	cbnz	r2, 8015bcc <_realloc_r+0x24>
 8015bc0:	f7fc fd86 	bl	80126d0 <_free_r>
 8015bc4:	4625      	mov	r5, r4
 8015bc6:	4628      	mov	r0, r5
 8015bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bcc:	f000 fcbc 	bl	8016548 <_malloc_usable_size_r>
 8015bd0:	4284      	cmp	r4, r0
 8015bd2:	4607      	mov	r7, r0
 8015bd4:	d802      	bhi.n	8015bdc <_realloc_r+0x34>
 8015bd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015bda:	d812      	bhi.n	8015c02 <_realloc_r+0x5a>
 8015bdc:	4621      	mov	r1, r4
 8015bde:	4640      	mov	r0, r8
 8015be0:	f7fc fde2 	bl	80127a8 <_malloc_r>
 8015be4:	4605      	mov	r5, r0
 8015be6:	2800      	cmp	r0, #0
 8015be8:	d0ed      	beq.n	8015bc6 <_realloc_r+0x1e>
 8015bea:	42bc      	cmp	r4, r7
 8015bec:	4622      	mov	r2, r4
 8015bee:	4631      	mov	r1, r6
 8015bf0:	bf28      	it	cs
 8015bf2:	463a      	movcs	r2, r7
 8015bf4:	f7fc fae4 	bl	80121c0 <memcpy>
 8015bf8:	4631      	mov	r1, r6
 8015bfa:	4640      	mov	r0, r8
 8015bfc:	f7fc fd68 	bl	80126d0 <_free_r>
 8015c00:	e7e1      	b.n	8015bc6 <_realloc_r+0x1e>
 8015c02:	4635      	mov	r5, r6
 8015c04:	e7df      	b.n	8015bc6 <_realloc_r+0x1e>

08015c06 <_sungetc_r>:
 8015c06:	b538      	push	{r3, r4, r5, lr}
 8015c08:	1c4b      	adds	r3, r1, #1
 8015c0a:	4614      	mov	r4, r2
 8015c0c:	d103      	bne.n	8015c16 <_sungetc_r+0x10>
 8015c0e:	f04f 35ff 	mov.w	r5, #4294967295
 8015c12:	4628      	mov	r0, r5
 8015c14:	bd38      	pop	{r3, r4, r5, pc}
 8015c16:	8993      	ldrh	r3, [r2, #12]
 8015c18:	f023 0320 	bic.w	r3, r3, #32
 8015c1c:	8193      	strh	r3, [r2, #12]
 8015c1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015c20:	6852      	ldr	r2, [r2, #4]
 8015c22:	b2cd      	uxtb	r5, r1
 8015c24:	b18b      	cbz	r3, 8015c4a <_sungetc_r+0x44>
 8015c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015c28:	4293      	cmp	r3, r2
 8015c2a:	dd08      	ble.n	8015c3e <_sungetc_r+0x38>
 8015c2c:	6823      	ldr	r3, [r4, #0]
 8015c2e:	1e5a      	subs	r2, r3, #1
 8015c30:	6022      	str	r2, [r4, #0]
 8015c32:	f803 5c01 	strb.w	r5, [r3, #-1]
 8015c36:	6863      	ldr	r3, [r4, #4]
 8015c38:	3301      	adds	r3, #1
 8015c3a:	6063      	str	r3, [r4, #4]
 8015c3c:	e7e9      	b.n	8015c12 <_sungetc_r+0xc>
 8015c3e:	4621      	mov	r1, r4
 8015c40:	f000 fc18 	bl	8016474 <__submore>
 8015c44:	2800      	cmp	r0, #0
 8015c46:	d0f1      	beq.n	8015c2c <_sungetc_r+0x26>
 8015c48:	e7e1      	b.n	8015c0e <_sungetc_r+0x8>
 8015c4a:	6921      	ldr	r1, [r4, #16]
 8015c4c:	6823      	ldr	r3, [r4, #0]
 8015c4e:	b151      	cbz	r1, 8015c66 <_sungetc_r+0x60>
 8015c50:	4299      	cmp	r1, r3
 8015c52:	d208      	bcs.n	8015c66 <_sungetc_r+0x60>
 8015c54:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8015c58:	42a9      	cmp	r1, r5
 8015c5a:	d104      	bne.n	8015c66 <_sungetc_r+0x60>
 8015c5c:	3b01      	subs	r3, #1
 8015c5e:	3201      	adds	r2, #1
 8015c60:	6023      	str	r3, [r4, #0]
 8015c62:	6062      	str	r2, [r4, #4]
 8015c64:	e7d5      	b.n	8015c12 <_sungetc_r+0xc>
 8015c66:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8015c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c6e:	6363      	str	r3, [r4, #52]	; 0x34
 8015c70:	2303      	movs	r3, #3
 8015c72:	63a3      	str	r3, [r4, #56]	; 0x38
 8015c74:	4623      	mov	r3, r4
 8015c76:	f803 5f46 	strb.w	r5, [r3, #70]!
 8015c7a:	6023      	str	r3, [r4, #0]
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	e7dc      	b.n	8015c3a <_sungetc_r+0x34>

08015c80 <__ssrefill_r>:
 8015c80:	b510      	push	{r4, lr}
 8015c82:	460c      	mov	r4, r1
 8015c84:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8015c86:	b169      	cbz	r1, 8015ca4 <__ssrefill_r+0x24>
 8015c88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c8c:	4299      	cmp	r1, r3
 8015c8e:	d001      	beq.n	8015c94 <__ssrefill_r+0x14>
 8015c90:	f7fc fd1e 	bl	80126d0 <_free_r>
 8015c94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c96:	6063      	str	r3, [r4, #4]
 8015c98:	2000      	movs	r0, #0
 8015c9a:	6360      	str	r0, [r4, #52]	; 0x34
 8015c9c:	b113      	cbz	r3, 8015ca4 <__ssrefill_r+0x24>
 8015c9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015ca0:	6023      	str	r3, [r4, #0]
 8015ca2:	bd10      	pop	{r4, pc}
 8015ca4:	6923      	ldr	r3, [r4, #16]
 8015ca6:	6023      	str	r3, [r4, #0]
 8015ca8:	2300      	movs	r3, #0
 8015caa:	6063      	str	r3, [r4, #4]
 8015cac:	89a3      	ldrh	r3, [r4, #12]
 8015cae:	f043 0320 	orr.w	r3, r3, #32
 8015cb2:	81a3      	strh	r3, [r4, #12]
 8015cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cb8:	e7f3      	b.n	8015ca2 <__ssrefill_r+0x22>
	...

08015cbc <__ssvfiscanf_r>:
 8015cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cc0:	460c      	mov	r4, r1
 8015cc2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8015cc6:	2100      	movs	r1, #0
 8015cc8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8015ccc:	49a6      	ldr	r1, [pc, #664]	; (8015f68 <__ssvfiscanf_r+0x2ac>)
 8015cce:	91a0      	str	r1, [sp, #640]	; 0x280
 8015cd0:	f10d 0804 	add.w	r8, sp, #4
 8015cd4:	49a5      	ldr	r1, [pc, #660]	; (8015f6c <__ssvfiscanf_r+0x2b0>)
 8015cd6:	4fa6      	ldr	r7, [pc, #664]	; (8015f70 <__ssvfiscanf_r+0x2b4>)
 8015cd8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8015f74 <__ssvfiscanf_r+0x2b8>
 8015cdc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8015ce0:	4606      	mov	r6, r0
 8015ce2:	91a1      	str	r1, [sp, #644]	; 0x284
 8015ce4:	9300      	str	r3, [sp, #0]
 8015ce6:	7813      	ldrb	r3, [r2, #0]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f000 815a 	beq.w	8015fa2 <__ssvfiscanf_r+0x2e6>
 8015cee:	5dd9      	ldrb	r1, [r3, r7]
 8015cf0:	f011 0108 	ands.w	r1, r1, #8
 8015cf4:	f102 0501 	add.w	r5, r2, #1
 8015cf8:	d019      	beq.n	8015d2e <__ssvfiscanf_r+0x72>
 8015cfa:	6863      	ldr	r3, [r4, #4]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	dd0f      	ble.n	8015d20 <__ssvfiscanf_r+0x64>
 8015d00:	6823      	ldr	r3, [r4, #0]
 8015d02:	781a      	ldrb	r2, [r3, #0]
 8015d04:	5cba      	ldrb	r2, [r7, r2]
 8015d06:	0712      	lsls	r2, r2, #28
 8015d08:	d401      	bmi.n	8015d0e <__ssvfiscanf_r+0x52>
 8015d0a:	462a      	mov	r2, r5
 8015d0c:	e7eb      	b.n	8015ce6 <__ssvfiscanf_r+0x2a>
 8015d0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015d10:	3201      	adds	r2, #1
 8015d12:	9245      	str	r2, [sp, #276]	; 0x114
 8015d14:	6862      	ldr	r2, [r4, #4]
 8015d16:	3301      	adds	r3, #1
 8015d18:	3a01      	subs	r2, #1
 8015d1a:	6062      	str	r2, [r4, #4]
 8015d1c:	6023      	str	r3, [r4, #0]
 8015d1e:	e7ec      	b.n	8015cfa <__ssvfiscanf_r+0x3e>
 8015d20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015d22:	4621      	mov	r1, r4
 8015d24:	4630      	mov	r0, r6
 8015d26:	4798      	blx	r3
 8015d28:	2800      	cmp	r0, #0
 8015d2a:	d0e9      	beq.n	8015d00 <__ssvfiscanf_r+0x44>
 8015d2c:	e7ed      	b.n	8015d0a <__ssvfiscanf_r+0x4e>
 8015d2e:	2b25      	cmp	r3, #37	; 0x25
 8015d30:	d012      	beq.n	8015d58 <__ssvfiscanf_r+0x9c>
 8015d32:	469a      	mov	sl, r3
 8015d34:	6863      	ldr	r3, [r4, #4]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	f340 8091 	ble.w	8015e5e <__ssvfiscanf_r+0x1a2>
 8015d3c:	6822      	ldr	r2, [r4, #0]
 8015d3e:	7813      	ldrb	r3, [r2, #0]
 8015d40:	4553      	cmp	r3, sl
 8015d42:	f040 812e 	bne.w	8015fa2 <__ssvfiscanf_r+0x2e6>
 8015d46:	6863      	ldr	r3, [r4, #4]
 8015d48:	3b01      	subs	r3, #1
 8015d4a:	6063      	str	r3, [r4, #4]
 8015d4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8015d4e:	3201      	adds	r2, #1
 8015d50:	3301      	adds	r3, #1
 8015d52:	6022      	str	r2, [r4, #0]
 8015d54:	9345      	str	r3, [sp, #276]	; 0x114
 8015d56:	e7d8      	b.n	8015d0a <__ssvfiscanf_r+0x4e>
 8015d58:	9141      	str	r1, [sp, #260]	; 0x104
 8015d5a:	9143      	str	r1, [sp, #268]	; 0x10c
 8015d5c:	7853      	ldrb	r3, [r2, #1]
 8015d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8015d60:	bf02      	ittt	eq
 8015d62:	2310      	moveq	r3, #16
 8015d64:	1c95      	addeq	r5, r2, #2
 8015d66:	9341      	streq	r3, [sp, #260]	; 0x104
 8015d68:	220a      	movs	r2, #10
 8015d6a:	46aa      	mov	sl, r5
 8015d6c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8015d70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8015d74:	2b09      	cmp	r3, #9
 8015d76:	d91d      	bls.n	8015db4 <__ssvfiscanf_r+0xf8>
 8015d78:	487e      	ldr	r0, [pc, #504]	; (8015f74 <__ssvfiscanf_r+0x2b8>)
 8015d7a:	2203      	movs	r2, #3
 8015d7c:	f7ea fa08 	bl	8000190 <memchr>
 8015d80:	b140      	cbz	r0, 8015d94 <__ssvfiscanf_r+0xd8>
 8015d82:	2301      	movs	r3, #1
 8015d84:	eba0 0009 	sub.w	r0, r0, r9
 8015d88:	fa03 f000 	lsl.w	r0, r3, r0
 8015d8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015d8e:	4318      	orrs	r0, r3
 8015d90:	9041      	str	r0, [sp, #260]	; 0x104
 8015d92:	4655      	mov	r5, sl
 8015d94:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015d98:	2b78      	cmp	r3, #120	; 0x78
 8015d9a:	d806      	bhi.n	8015daa <__ssvfiscanf_r+0xee>
 8015d9c:	2b57      	cmp	r3, #87	; 0x57
 8015d9e:	d810      	bhi.n	8015dc2 <__ssvfiscanf_r+0x106>
 8015da0:	2b25      	cmp	r3, #37	; 0x25
 8015da2:	d0c6      	beq.n	8015d32 <__ssvfiscanf_r+0x76>
 8015da4:	d856      	bhi.n	8015e54 <__ssvfiscanf_r+0x198>
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d064      	beq.n	8015e74 <__ssvfiscanf_r+0x1b8>
 8015daa:	2303      	movs	r3, #3
 8015dac:	9347      	str	r3, [sp, #284]	; 0x11c
 8015dae:	230a      	movs	r3, #10
 8015db0:	9342      	str	r3, [sp, #264]	; 0x108
 8015db2:	e071      	b.n	8015e98 <__ssvfiscanf_r+0x1dc>
 8015db4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8015db6:	fb02 1103 	mla	r1, r2, r3, r1
 8015dba:	3930      	subs	r1, #48	; 0x30
 8015dbc:	9143      	str	r1, [sp, #268]	; 0x10c
 8015dbe:	4655      	mov	r5, sl
 8015dc0:	e7d3      	b.n	8015d6a <__ssvfiscanf_r+0xae>
 8015dc2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8015dc6:	2a20      	cmp	r2, #32
 8015dc8:	d8ef      	bhi.n	8015daa <__ssvfiscanf_r+0xee>
 8015dca:	a101      	add	r1, pc, #4	; (adr r1, 8015dd0 <__ssvfiscanf_r+0x114>)
 8015dcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8015dd0:	08015e83 	.word	0x08015e83
 8015dd4:	08015dab 	.word	0x08015dab
 8015dd8:	08015dab 	.word	0x08015dab
 8015ddc:	08015ee1 	.word	0x08015ee1
 8015de0:	08015dab 	.word	0x08015dab
 8015de4:	08015dab 	.word	0x08015dab
 8015de8:	08015dab 	.word	0x08015dab
 8015dec:	08015dab 	.word	0x08015dab
 8015df0:	08015dab 	.word	0x08015dab
 8015df4:	08015dab 	.word	0x08015dab
 8015df8:	08015dab 	.word	0x08015dab
 8015dfc:	08015ef7 	.word	0x08015ef7
 8015e00:	08015ecd 	.word	0x08015ecd
 8015e04:	08015e5b 	.word	0x08015e5b
 8015e08:	08015e5b 	.word	0x08015e5b
 8015e0c:	08015e5b 	.word	0x08015e5b
 8015e10:	08015dab 	.word	0x08015dab
 8015e14:	08015ed1 	.word	0x08015ed1
 8015e18:	08015dab 	.word	0x08015dab
 8015e1c:	08015dab 	.word	0x08015dab
 8015e20:	08015dab 	.word	0x08015dab
 8015e24:	08015dab 	.word	0x08015dab
 8015e28:	08015f07 	.word	0x08015f07
 8015e2c:	08015ed9 	.word	0x08015ed9
 8015e30:	08015e7b 	.word	0x08015e7b
 8015e34:	08015dab 	.word	0x08015dab
 8015e38:	08015dab 	.word	0x08015dab
 8015e3c:	08015f03 	.word	0x08015f03
 8015e40:	08015dab 	.word	0x08015dab
 8015e44:	08015ecd 	.word	0x08015ecd
 8015e48:	08015dab 	.word	0x08015dab
 8015e4c:	08015dab 	.word	0x08015dab
 8015e50:	08015e83 	.word	0x08015e83
 8015e54:	3b45      	subs	r3, #69	; 0x45
 8015e56:	2b02      	cmp	r3, #2
 8015e58:	d8a7      	bhi.n	8015daa <__ssvfiscanf_r+0xee>
 8015e5a:	2305      	movs	r3, #5
 8015e5c:	e01b      	b.n	8015e96 <__ssvfiscanf_r+0x1da>
 8015e5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015e60:	4621      	mov	r1, r4
 8015e62:	4630      	mov	r0, r6
 8015e64:	4798      	blx	r3
 8015e66:	2800      	cmp	r0, #0
 8015e68:	f43f af68 	beq.w	8015d3c <__ssvfiscanf_r+0x80>
 8015e6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015e6e:	2800      	cmp	r0, #0
 8015e70:	f040 808d 	bne.w	8015f8e <__ssvfiscanf_r+0x2d2>
 8015e74:	f04f 30ff 	mov.w	r0, #4294967295
 8015e78:	e08f      	b.n	8015f9a <__ssvfiscanf_r+0x2de>
 8015e7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015e7c:	f042 0220 	orr.w	r2, r2, #32
 8015e80:	9241      	str	r2, [sp, #260]	; 0x104
 8015e82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8015e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8015e88:	9241      	str	r2, [sp, #260]	; 0x104
 8015e8a:	2210      	movs	r2, #16
 8015e8c:	2b6f      	cmp	r3, #111	; 0x6f
 8015e8e:	9242      	str	r2, [sp, #264]	; 0x108
 8015e90:	bf34      	ite	cc
 8015e92:	2303      	movcc	r3, #3
 8015e94:	2304      	movcs	r3, #4
 8015e96:	9347      	str	r3, [sp, #284]	; 0x11c
 8015e98:	6863      	ldr	r3, [r4, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	dd42      	ble.n	8015f24 <__ssvfiscanf_r+0x268>
 8015e9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015ea0:	0659      	lsls	r1, r3, #25
 8015ea2:	d404      	bmi.n	8015eae <__ssvfiscanf_r+0x1f2>
 8015ea4:	6823      	ldr	r3, [r4, #0]
 8015ea6:	781a      	ldrb	r2, [r3, #0]
 8015ea8:	5cba      	ldrb	r2, [r7, r2]
 8015eaa:	0712      	lsls	r2, r2, #28
 8015eac:	d441      	bmi.n	8015f32 <__ssvfiscanf_r+0x276>
 8015eae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8015eb0:	2b02      	cmp	r3, #2
 8015eb2:	dc50      	bgt.n	8015f56 <__ssvfiscanf_r+0x29a>
 8015eb4:	466b      	mov	r3, sp
 8015eb6:	4622      	mov	r2, r4
 8015eb8:	a941      	add	r1, sp, #260	; 0x104
 8015eba:	4630      	mov	r0, r6
 8015ebc:	f000 f876 	bl	8015fac <_scanf_chars>
 8015ec0:	2801      	cmp	r0, #1
 8015ec2:	d06e      	beq.n	8015fa2 <__ssvfiscanf_r+0x2e6>
 8015ec4:	2802      	cmp	r0, #2
 8015ec6:	f47f af20 	bne.w	8015d0a <__ssvfiscanf_r+0x4e>
 8015eca:	e7cf      	b.n	8015e6c <__ssvfiscanf_r+0x1b0>
 8015ecc:	220a      	movs	r2, #10
 8015ece:	e7dd      	b.n	8015e8c <__ssvfiscanf_r+0x1d0>
 8015ed0:	2300      	movs	r3, #0
 8015ed2:	9342      	str	r3, [sp, #264]	; 0x108
 8015ed4:	2303      	movs	r3, #3
 8015ed6:	e7de      	b.n	8015e96 <__ssvfiscanf_r+0x1da>
 8015ed8:	2308      	movs	r3, #8
 8015eda:	9342      	str	r3, [sp, #264]	; 0x108
 8015edc:	2304      	movs	r3, #4
 8015ede:	e7da      	b.n	8015e96 <__ssvfiscanf_r+0x1da>
 8015ee0:	4629      	mov	r1, r5
 8015ee2:	4640      	mov	r0, r8
 8015ee4:	f000 f9c6 	bl	8016274 <__sccl>
 8015ee8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015eee:	9341      	str	r3, [sp, #260]	; 0x104
 8015ef0:	4605      	mov	r5, r0
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	e7cf      	b.n	8015e96 <__ssvfiscanf_r+0x1da>
 8015ef6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8015ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015efc:	9341      	str	r3, [sp, #260]	; 0x104
 8015efe:	2300      	movs	r3, #0
 8015f00:	e7c9      	b.n	8015e96 <__ssvfiscanf_r+0x1da>
 8015f02:	2302      	movs	r3, #2
 8015f04:	e7c7      	b.n	8015e96 <__ssvfiscanf_r+0x1da>
 8015f06:	9841      	ldr	r0, [sp, #260]	; 0x104
 8015f08:	06c3      	lsls	r3, r0, #27
 8015f0a:	f53f aefe 	bmi.w	8015d0a <__ssvfiscanf_r+0x4e>
 8015f0e:	9b00      	ldr	r3, [sp, #0]
 8015f10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015f12:	1d19      	adds	r1, r3, #4
 8015f14:	9100      	str	r1, [sp, #0]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f010 0f01 	tst.w	r0, #1
 8015f1c:	bf14      	ite	ne
 8015f1e:	801a      	strhne	r2, [r3, #0]
 8015f20:	601a      	streq	r2, [r3, #0]
 8015f22:	e6f2      	b.n	8015d0a <__ssvfiscanf_r+0x4e>
 8015f24:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015f26:	4621      	mov	r1, r4
 8015f28:	4630      	mov	r0, r6
 8015f2a:	4798      	blx	r3
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d0b6      	beq.n	8015e9e <__ssvfiscanf_r+0x1e2>
 8015f30:	e79c      	b.n	8015e6c <__ssvfiscanf_r+0x1b0>
 8015f32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8015f34:	3201      	adds	r2, #1
 8015f36:	9245      	str	r2, [sp, #276]	; 0x114
 8015f38:	6862      	ldr	r2, [r4, #4]
 8015f3a:	3a01      	subs	r2, #1
 8015f3c:	2a00      	cmp	r2, #0
 8015f3e:	6062      	str	r2, [r4, #4]
 8015f40:	dd02      	ble.n	8015f48 <__ssvfiscanf_r+0x28c>
 8015f42:	3301      	adds	r3, #1
 8015f44:	6023      	str	r3, [r4, #0]
 8015f46:	e7ad      	b.n	8015ea4 <__ssvfiscanf_r+0x1e8>
 8015f48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8015f4a:	4621      	mov	r1, r4
 8015f4c:	4630      	mov	r0, r6
 8015f4e:	4798      	blx	r3
 8015f50:	2800      	cmp	r0, #0
 8015f52:	d0a7      	beq.n	8015ea4 <__ssvfiscanf_r+0x1e8>
 8015f54:	e78a      	b.n	8015e6c <__ssvfiscanf_r+0x1b0>
 8015f56:	2b04      	cmp	r3, #4
 8015f58:	dc0e      	bgt.n	8015f78 <__ssvfiscanf_r+0x2bc>
 8015f5a:	466b      	mov	r3, sp
 8015f5c:	4622      	mov	r2, r4
 8015f5e:	a941      	add	r1, sp, #260	; 0x104
 8015f60:	4630      	mov	r0, r6
 8015f62:	f000 f87d 	bl	8016060 <_scanf_i>
 8015f66:	e7ab      	b.n	8015ec0 <__ssvfiscanf_r+0x204>
 8015f68:	08015c07 	.word	0x08015c07
 8015f6c:	08015c81 	.word	0x08015c81
 8015f70:	08017df6 	.word	0x08017df6
 8015f74:	08017dea 	.word	0x08017dea
 8015f78:	4b0b      	ldr	r3, [pc, #44]	; (8015fa8 <__ssvfiscanf_r+0x2ec>)
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	f43f aec5 	beq.w	8015d0a <__ssvfiscanf_r+0x4e>
 8015f80:	466b      	mov	r3, sp
 8015f82:	4622      	mov	r2, r4
 8015f84:	a941      	add	r1, sp, #260	; 0x104
 8015f86:	4630      	mov	r0, r6
 8015f88:	f3af 8000 	nop.w
 8015f8c:	e798      	b.n	8015ec0 <__ssvfiscanf_r+0x204>
 8015f8e:	89a3      	ldrh	r3, [r4, #12]
 8015f90:	f013 0f40 	tst.w	r3, #64	; 0x40
 8015f94:	bf18      	it	ne
 8015f96:	f04f 30ff 	movne.w	r0, #4294967295
 8015f9a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8015f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fa2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8015fa4:	e7f9      	b.n	8015f9a <__ssvfiscanf_r+0x2de>
 8015fa6:	bf00      	nop
 8015fa8:	00000000 	.word	0x00000000

08015fac <_scanf_chars>:
 8015fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fb0:	4615      	mov	r5, r2
 8015fb2:	688a      	ldr	r2, [r1, #8]
 8015fb4:	4680      	mov	r8, r0
 8015fb6:	460c      	mov	r4, r1
 8015fb8:	b932      	cbnz	r2, 8015fc8 <_scanf_chars+0x1c>
 8015fba:	698a      	ldr	r2, [r1, #24]
 8015fbc:	2a00      	cmp	r2, #0
 8015fbe:	bf0c      	ite	eq
 8015fc0:	2201      	moveq	r2, #1
 8015fc2:	f04f 32ff 	movne.w	r2, #4294967295
 8015fc6:	608a      	str	r2, [r1, #8]
 8015fc8:	6822      	ldr	r2, [r4, #0]
 8015fca:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801605c <_scanf_chars+0xb0>
 8015fce:	06d1      	lsls	r1, r2, #27
 8015fd0:	bf5f      	itttt	pl
 8015fd2:	681a      	ldrpl	r2, [r3, #0]
 8015fd4:	1d11      	addpl	r1, r2, #4
 8015fd6:	6019      	strpl	r1, [r3, #0]
 8015fd8:	6816      	ldrpl	r6, [r2, #0]
 8015fda:	2700      	movs	r7, #0
 8015fdc:	69a0      	ldr	r0, [r4, #24]
 8015fde:	b188      	cbz	r0, 8016004 <_scanf_chars+0x58>
 8015fe0:	2801      	cmp	r0, #1
 8015fe2:	d107      	bne.n	8015ff4 <_scanf_chars+0x48>
 8015fe4:	682a      	ldr	r2, [r5, #0]
 8015fe6:	7811      	ldrb	r1, [r2, #0]
 8015fe8:	6962      	ldr	r2, [r4, #20]
 8015fea:	5c52      	ldrb	r2, [r2, r1]
 8015fec:	b952      	cbnz	r2, 8016004 <_scanf_chars+0x58>
 8015fee:	2f00      	cmp	r7, #0
 8015ff0:	d031      	beq.n	8016056 <_scanf_chars+0xaa>
 8015ff2:	e022      	b.n	801603a <_scanf_chars+0x8e>
 8015ff4:	2802      	cmp	r0, #2
 8015ff6:	d120      	bne.n	801603a <_scanf_chars+0x8e>
 8015ff8:	682b      	ldr	r3, [r5, #0]
 8015ffa:	781b      	ldrb	r3, [r3, #0]
 8015ffc:	f813 3009 	ldrb.w	r3, [r3, r9]
 8016000:	071b      	lsls	r3, r3, #28
 8016002:	d41a      	bmi.n	801603a <_scanf_chars+0x8e>
 8016004:	6823      	ldr	r3, [r4, #0]
 8016006:	06da      	lsls	r2, r3, #27
 8016008:	bf5e      	ittt	pl
 801600a:	682b      	ldrpl	r3, [r5, #0]
 801600c:	781b      	ldrbpl	r3, [r3, #0]
 801600e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8016012:	682a      	ldr	r2, [r5, #0]
 8016014:	686b      	ldr	r3, [r5, #4]
 8016016:	3201      	adds	r2, #1
 8016018:	602a      	str	r2, [r5, #0]
 801601a:	68a2      	ldr	r2, [r4, #8]
 801601c:	3b01      	subs	r3, #1
 801601e:	3a01      	subs	r2, #1
 8016020:	606b      	str	r3, [r5, #4]
 8016022:	3701      	adds	r7, #1
 8016024:	60a2      	str	r2, [r4, #8]
 8016026:	b142      	cbz	r2, 801603a <_scanf_chars+0x8e>
 8016028:	2b00      	cmp	r3, #0
 801602a:	dcd7      	bgt.n	8015fdc <_scanf_chars+0x30>
 801602c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016030:	4629      	mov	r1, r5
 8016032:	4640      	mov	r0, r8
 8016034:	4798      	blx	r3
 8016036:	2800      	cmp	r0, #0
 8016038:	d0d0      	beq.n	8015fdc <_scanf_chars+0x30>
 801603a:	6823      	ldr	r3, [r4, #0]
 801603c:	f013 0310 	ands.w	r3, r3, #16
 8016040:	d105      	bne.n	801604e <_scanf_chars+0xa2>
 8016042:	68e2      	ldr	r2, [r4, #12]
 8016044:	3201      	adds	r2, #1
 8016046:	60e2      	str	r2, [r4, #12]
 8016048:	69a2      	ldr	r2, [r4, #24]
 801604a:	b102      	cbz	r2, 801604e <_scanf_chars+0xa2>
 801604c:	7033      	strb	r3, [r6, #0]
 801604e:	6923      	ldr	r3, [r4, #16]
 8016050:	443b      	add	r3, r7
 8016052:	6123      	str	r3, [r4, #16]
 8016054:	2000      	movs	r0, #0
 8016056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801605a:	bf00      	nop
 801605c:	08017df6 	.word	0x08017df6

08016060 <_scanf_i>:
 8016060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016064:	4698      	mov	r8, r3
 8016066:	4b76      	ldr	r3, [pc, #472]	; (8016240 <_scanf_i+0x1e0>)
 8016068:	460c      	mov	r4, r1
 801606a:	4682      	mov	sl, r0
 801606c:	4616      	mov	r6, r2
 801606e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016072:	b087      	sub	sp, #28
 8016074:	ab03      	add	r3, sp, #12
 8016076:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801607a:	4b72      	ldr	r3, [pc, #456]	; (8016244 <_scanf_i+0x1e4>)
 801607c:	69a1      	ldr	r1, [r4, #24]
 801607e:	4a72      	ldr	r2, [pc, #456]	; (8016248 <_scanf_i+0x1e8>)
 8016080:	2903      	cmp	r1, #3
 8016082:	bf18      	it	ne
 8016084:	461a      	movne	r2, r3
 8016086:	68a3      	ldr	r3, [r4, #8]
 8016088:	9201      	str	r2, [sp, #4]
 801608a:	1e5a      	subs	r2, r3, #1
 801608c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016090:	bf88      	it	hi
 8016092:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016096:	4627      	mov	r7, r4
 8016098:	bf82      	ittt	hi
 801609a:	eb03 0905 	addhi.w	r9, r3, r5
 801609e:	f240 135d 	movwhi	r3, #349	; 0x15d
 80160a2:	60a3      	strhi	r3, [r4, #8]
 80160a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80160a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80160ac:	bf98      	it	ls
 80160ae:	f04f 0900 	movls.w	r9, #0
 80160b2:	6023      	str	r3, [r4, #0]
 80160b4:	463d      	mov	r5, r7
 80160b6:	f04f 0b00 	mov.w	fp, #0
 80160ba:	6831      	ldr	r1, [r6, #0]
 80160bc:	ab03      	add	r3, sp, #12
 80160be:	7809      	ldrb	r1, [r1, #0]
 80160c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80160c4:	2202      	movs	r2, #2
 80160c6:	f7ea f863 	bl	8000190 <memchr>
 80160ca:	b328      	cbz	r0, 8016118 <_scanf_i+0xb8>
 80160cc:	f1bb 0f01 	cmp.w	fp, #1
 80160d0:	d159      	bne.n	8016186 <_scanf_i+0x126>
 80160d2:	6862      	ldr	r2, [r4, #4]
 80160d4:	b92a      	cbnz	r2, 80160e2 <_scanf_i+0x82>
 80160d6:	6822      	ldr	r2, [r4, #0]
 80160d8:	2308      	movs	r3, #8
 80160da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80160de:	6063      	str	r3, [r4, #4]
 80160e0:	6022      	str	r2, [r4, #0]
 80160e2:	6822      	ldr	r2, [r4, #0]
 80160e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80160e8:	6022      	str	r2, [r4, #0]
 80160ea:	68a2      	ldr	r2, [r4, #8]
 80160ec:	1e51      	subs	r1, r2, #1
 80160ee:	60a1      	str	r1, [r4, #8]
 80160f0:	b192      	cbz	r2, 8016118 <_scanf_i+0xb8>
 80160f2:	6832      	ldr	r2, [r6, #0]
 80160f4:	1c51      	adds	r1, r2, #1
 80160f6:	6031      	str	r1, [r6, #0]
 80160f8:	7812      	ldrb	r2, [r2, #0]
 80160fa:	f805 2b01 	strb.w	r2, [r5], #1
 80160fe:	6872      	ldr	r2, [r6, #4]
 8016100:	3a01      	subs	r2, #1
 8016102:	2a00      	cmp	r2, #0
 8016104:	6072      	str	r2, [r6, #4]
 8016106:	dc07      	bgt.n	8016118 <_scanf_i+0xb8>
 8016108:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801610c:	4631      	mov	r1, r6
 801610e:	4650      	mov	r0, sl
 8016110:	4790      	blx	r2
 8016112:	2800      	cmp	r0, #0
 8016114:	f040 8085 	bne.w	8016222 <_scanf_i+0x1c2>
 8016118:	f10b 0b01 	add.w	fp, fp, #1
 801611c:	f1bb 0f03 	cmp.w	fp, #3
 8016120:	d1cb      	bne.n	80160ba <_scanf_i+0x5a>
 8016122:	6863      	ldr	r3, [r4, #4]
 8016124:	b90b      	cbnz	r3, 801612a <_scanf_i+0xca>
 8016126:	230a      	movs	r3, #10
 8016128:	6063      	str	r3, [r4, #4]
 801612a:	6863      	ldr	r3, [r4, #4]
 801612c:	4947      	ldr	r1, [pc, #284]	; (801624c <_scanf_i+0x1ec>)
 801612e:	6960      	ldr	r0, [r4, #20]
 8016130:	1ac9      	subs	r1, r1, r3
 8016132:	f000 f89f 	bl	8016274 <__sccl>
 8016136:	f04f 0b00 	mov.w	fp, #0
 801613a:	68a3      	ldr	r3, [r4, #8]
 801613c:	6822      	ldr	r2, [r4, #0]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d03d      	beq.n	80161be <_scanf_i+0x15e>
 8016142:	6831      	ldr	r1, [r6, #0]
 8016144:	6960      	ldr	r0, [r4, #20]
 8016146:	f891 c000 	ldrb.w	ip, [r1]
 801614a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801614e:	2800      	cmp	r0, #0
 8016150:	d035      	beq.n	80161be <_scanf_i+0x15e>
 8016152:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016156:	d124      	bne.n	80161a2 <_scanf_i+0x142>
 8016158:	0510      	lsls	r0, r2, #20
 801615a:	d522      	bpl.n	80161a2 <_scanf_i+0x142>
 801615c:	f10b 0b01 	add.w	fp, fp, #1
 8016160:	f1b9 0f00 	cmp.w	r9, #0
 8016164:	d003      	beq.n	801616e <_scanf_i+0x10e>
 8016166:	3301      	adds	r3, #1
 8016168:	f109 39ff 	add.w	r9, r9, #4294967295
 801616c:	60a3      	str	r3, [r4, #8]
 801616e:	6873      	ldr	r3, [r6, #4]
 8016170:	3b01      	subs	r3, #1
 8016172:	2b00      	cmp	r3, #0
 8016174:	6073      	str	r3, [r6, #4]
 8016176:	dd1b      	ble.n	80161b0 <_scanf_i+0x150>
 8016178:	6833      	ldr	r3, [r6, #0]
 801617a:	3301      	adds	r3, #1
 801617c:	6033      	str	r3, [r6, #0]
 801617e:	68a3      	ldr	r3, [r4, #8]
 8016180:	3b01      	subs	r3, #1
 8016182:	60a3      	str	r3, [r4, #8]
 8016184:	e7d9      	b.n	801613a <_scanf_i+0xda>
 8016186:	f1bb 0f02 	cmp.w	fp, #2
 801618a:	d1ae      	bne.n	80160ea <_scanf_i+0x8a>
 801618c:	6822      	ldr	r2, [r4, #0]
 801618e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016192:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8016196:	d1bf      	bne.n	8016118 <_scanf_i+0xb8>
 8016198:	2310      	movs	r3, #16
 801619a:	6063      	str	r3, [r4, #4]
 801619c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80161a0:	e7a2      	b.n	80160e8 <_scanf_i+0x88>
 80161a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80161a6:	6022      	str	r2, [r4, #0]
 80161a8:	780b      	ldrb	r3, [r1, #0]
 80161aa:	f805 3b01 	strb.w	r3, [r5], #1
 80161ae:	e7de      	b.n	801616e <_scanf_i+0x10e>
 80161b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80161b4:	4631      	mov	r1, r6
 80161b6:	4650      	mov	r0, sl
 80161b8:	4798      	blx	r3
 80161ba:	2800      	cmp	r0, #0
 80161bc:	d0df      	beq.n	801617e <_scanf_i+0x11e>
 80161be:	6823      	ldr	r3, [r4, #0]
 80161c0:	05db      	lsls	r3, r3, #23
 80161c2:	d50d      	bpl.n	80161e0 <_scanf_i+0x180>
 80161c4:	42bd      	cmp	r5, r7
 80161c6:	d909      	bls.n	80161dc <_scanf_i+0x17c>
 80161c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80161cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80161d0:	4632      	mov	r2, r6
 80161d2:	4650      	mov	r0, sl
 80161d4:	4798      	blx	r3
 80161d6:	f105 39ff 	add.w	r9, r5, #4294967295
 80161da:	464d      	mov	r5, r9
 80161dc:	42bd      	cmp	r5, r7
 80161de:	d02d      	beq.n	801623c <_scanf_i+0x1dc>
 80161e0:	6822      	ldr	r2, [r4, #0]
 80161e2:	f012 0210 	ands.w	r2, r2, #16
 80161e6:	d113      	bne.n	8016210 <_scanf_i+0x1b0>
 80161e8:	702a      	strb	r2, [r5, #0]
 80161ea:	6863      	ldr	r3, [r4, #4]
 80161ec:	9e01      	ldr	r6, [sp, #4]
 80161ee:	4639      	mov	r1, r7
 80161f0:	4650      	mov	r0, sl
 80161f2:	47b0      	blx	r6
 80161f4:	6821      	ldr	r1, [r4, #0]
 80161f6:	f8d8 3000 	ldr.w	r3, [r8]
 80161fa:	f011 0f20 	tst.w	r1, #32
 80161fe:	d013      	beq.n	8016228 <_scanf_i+0x1c8>
 8016200:	1d1a      	adds	r2, r3, #4
 8016202:	f8c8 2000 	str.w	r2, [r8]
 8016206:	681b      	ldr	r3, [r3, #0]
 8016208:	6018      	str	r0, [r3, #0]
 801620a:	68e3      	ldr	r3, [r4, #12]
 801620c:	3301      	adds	r3, #1
 801620e:	60e3      	str	r3, [r4, #12]
 8016210:	1bed      	subs	r5, r5, r7
 8016212:	44ab      	add	fp, r5
 8016214:	6925      	ldr	r5, [r4, #16]
 8016216:	445d      	add	r5, fp
 8016218:	6125      	str	r5, [r4, #16]
 801621a:	2000      	movs	r0, #0
 801621c:	b007      	add	sp, #28
 801621e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016222:	f04f 0b00 	mov.w	fp, #0
 8016226:	e7ca      	b.n	80161be <_scanf_i+0x15e>
 8016228:	1d1a      	adds	r2, r3, #4
 801622a:	f8c8 2000 	str.w	r2, [r8]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	f011 0f01 	tst.w	r1, #1
 8016234:	bf14      	ite	ne
 8016236:	8018      	strhne	r0, [r3, #0]
 8016238:	6018      	streq	r0, [r3, #0]
 801623a:	e7e6      	b.n	801620a <_scanf_i+0x1aa>
 801623c:	2001      	movs	r0, #1
 801623e:	e7ed      	b.n	801621c <_scanf_i+0x1bc>
 8016240:	08017900 	.word	0x08017900
 8016244:	080154ed 	.word	0x080154ed
 8016248:	08016471 	.word	0x08016471
 801624c:	08017f7b 	.word	0x08017f7b

08016250 <_read_r>:
 8016250:	b538      	push	{r3, r4, r5, lr}
 8016252:	4d07      	ldr	r5, [pc, #28]	; (8016270 <_read_r+0x20>)
 8016254:	4604      	mov	r4, r0
 8016256:	4608      	mov	r0, r1
 8016258:	4611      	mov	r1, r2
 801625a:	2200      	movs	r2, #0
 801625c:	602a      	str	r2, [r5, #0]
 801625e:	461a      	mov	r2, r3
 8016260:	f7f4 fa58 	bl	800a714 <_read>
 8016264:	1c43      	adds	r3, r0, #1
 8016266:	d102      	bne.n	801626e <_read_r+0x1e>
 8016268:	682b      	ldr	r3, [r5, #0]
 801626a:	b103      	cbz	r3, 801626e <_read_r+0x1e>
 801626c:	6023      	str	r3, [r4, #0]
 801626e:	bd38      	pop	{r3, r4, r5, pc}
 8016270:	2000a7b4 	.word	0x2000a7b4

08016274 <__sccl>:
 8016274:	b570      	push	{r4, r5, r6, lr}
 8016276:	780b      	ldrb	r3, [r1, #0]
 8016278:	4604      	mov	r4, r0
 801627a:	2b5e      	cmp	r3, #94	; 0x5e
 801627c:	bf0b      	itete	eq
 801627e:	784b      	ldrbeq	r3, [r1, #1]
 8016280:	1c48      	addne	r0, r1, #1
 8016282:	1c88      	addeq	r0, r1, #2
 8016284:	2200      	movne	r2, #0
 8016286:	bf08      	it	eq
 8016288:	2201      	moveq	r2, #1
 801628a:	1e61      	subs	r1, r4, #1
 801628c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8016290:	f801 2f01 	strb.w	r2, [r1, #1]!
 8016294:	42a9      	cmp	r1, r5
 8016296:	d1fb      	bne.n	8016290 <__sccl+0x1c>
 8016298:	b90b      	cbnz	r3, 801629e <__sccl+0x2a>
 801629a:	3801      	subs	r0, #1
 801629c:	bd70      	pop	{r4, r5, r6, pc}
 801629e:	f082 0201 	eor.w	r2, r2, #1
 80162a2:	54e2      	strb	r2, [r4, r3]
 80162a4:	4605      	mov	r5, r0
 80162a6:	4628      	mov	r0, r5
 80162a8:	f810 1b01 	ldrb.w	r1, [r0], #1
 80162ac:	292d      	cmp	r1, #45	; 0x2d
 80162ae:	d006      	beq.n	80162be <__sccl+0x4a>
 80162b0:	295d      	cmp	r1, #93	; 0x5d
 80162b2:	d0f3      	beq.n	801629c <__sccl+0x28>
 80162b4:	b909      	cbnz	r1, 80162ba <__sccl+0x46>
 80162b6:	4628      	mov	r0, r5
 80162b8:	e7f0      	b.n	801629c <__sccl+0x28>
 80162ba:	460b      	mov	r3, r1
 80162bc:	e7f1      	b.n	80162a2 <__sccl+0x2e>
 80162be:	786e      	ldrb	r6, [r5, #1]
 80162c0:	2e5d      	cmp	r6, #93	; 0x5d
 80162c2:	d0fa      	beq.n	80162ba <__sccl+0x46>
 80162c4:	42b3      	cmp	r3, r6
 80162c6:	dcf8      	bgt.n	80162ba <__sccl+0x46>
 80162c8:	3502      	adds	r5, #2
 80162ca:	4619      	mov	r1, r3
 80162cc:	3101      	adds	r1, #1
 80162ce:	428e      	cmp	r6, r1
 80162d0:	5462      	strb	r2, [r4, r1]
 80162d2:	dcfb      	bgt.n	80162cc <__sccl+0x58>
 80162d4:	1af1      	subs	r1, r6, r3
 80162d6:	3901      	subs	r1, #1
 80162d8:	1c58      	adds	r0, r3, #1
 80162da:	42b3      	cmp	r3, r6
 80162dc:	bfa8      	it	ge
 80162de:	2100      	movge	r1, #0
 80162e0:	1843      	adds	r3, r0, r1
 80162e2:	e7e0      	b.n	80162a6 <__sccl+0x32>

080162e4 <_raise_r>:
 80162e4:	291f      	cmp	r1, #31
 80162e6:	b538      	push	{r3, r4, r5, lr}
 80162e8:	4604      	mov	r4, r0
 80162ea:	460d      	mov	r5, r1
 80162ec:	d904      	bls.n	80162f8 <_raise_r+0x14>
 80162ee:	2316      	movs	r3, #22
 80162f0:	6003      	str	r3, [r0, #0]
 80162f2:	f04f 30ff 	mov.w	r0, #4294967295
 80162f6:	bd38      	pop	{r3, r4, r5, pc}
 80162f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80162fa:	b112      	cbz	r2, 8016302 <_raise_r+0x1e>
 80162fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016300:	b94b      	cbnz	r3, 8016316 <_raise_r+0x32>
 8016302:	4620      	mov	r0, r4
 8016304:	f000 f830 	bl	8016368 <_getpid_r>
 8016308:	462a      	mov	r2, r5
 801630a:	4601      	mov	r1, r0
 801630c:	4620      	mov	r0, r4
 801630e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016312:	f000 b817 	b.w	8016344 <_kill_r>
 8016316:	2b01      	cmp	r3, #1
 8016318:	d00a      	beq.n	8016330 <_raise_r+0x4c>
 801631a:	1c59      	adds	r1, r3, #1
 801631c:	d103      	bne.n	8016326 <_raise_r+0x42>
 801631e:	2316      	movs	r3, #22
 8016320:	6003      	str	r3, [r0, #0]
 8016322:	2001      	movs	r0, #1
 8016324:	e7e7      	b.n	80162f6 <_raise_r+0x12>
 8016326:	2400      	movs	r4, #0
 8016328:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801632c:	4628      	mov	r0, r5
 801632e:	4798      	blx	r3
 8016330:	2000      	movs	r0, #0
 8016332:	e7e0      	b.n	80162f6 <_raise_r+0x12>

08016334 <raise>:
 8016334:	4b02      	ldr	r3, [pc, #8]	; (8016340 <raise+0xc>)
 8016336:	4601      	mov	r1, r0
 8016338:	6818      	ldr	r0, [r3, #0]
 801633a:	f7ff bfd3 	b.w	80162e4 <_raise_r>
 801633e:	bf00      	nop
 8016340:	20000020 	.word	0x20000020

08016344 <_kill_r>:
 8016344:	b538      	push	{r3, r4, r5, lr}
 8016346:	4d07      	ldr	r5, [pc, #28]	; (8016364 <_kill_r+0x20>)
 8016348:	2300      	movs	r3, #0
 801634a:	4604      	mov	r4, r0
 801634c:	4608      	mov	r0, r1
 801634e:	4611      	mov	r1, r2
 8016350:	602b      	str	r3, [r5, #0]
 8016352:	f7f4 f9c5 	bl	800a6e0 <_kill>
 8016356:	1c43      	adds	r3, r0, #1
 8016358:	d102      	bne.n	8016360 <_kill_r+0x1c>
 801635a:	682b      	ldr	r3, [r5, #0]
 801635c:	b103      	cbz	r3, 8016360 <_kill_r+0x1c>
 801635e:	6023      	str	r3, [r4, #0]
 8016360:	bd38      	pop	{r3, r4, r5, pc}
 8016362:	bf00      	nop
 8016364:	2000a7b4 	.word	0x2000a7b4

08016368 <_getpid_r>:
 8016368:	f7f4 b9b2 	b.w	800a6d0 <_getpid>

0801636c <_strtol_l.constprop.0>:
 801636c:	2b01      	cmp	r3, #1
 801636e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016372:	d001      	beq.n	8016378 <_strtol_l.constprop.0+0xc>
 8016374:	2b24      	cmp	r3, #36	; 0x24
 8016376:	d906      	bls.n	8016386 <_strtol_l.constprop.0+0x1a>
 8016378:	f7fb fdd6 	bl	8011f28 <__errno>
 801637c:	2316      	movs	r3, #22
 801637e:	6003      	str	r3, [r0, #0]
 8016380:	2000      	movs	r0, #0
 8016382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016386:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801646c <_strtol_l.constprop.0+0x100>
 801638a:	460d      	mov	r5, r1
 801638c:	462e      	mov	r6, r5
 801638e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016392:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016396:	f017 0708 	ands.w	r7, r7, #8
 801639a:	d1f7      	bne.n	801638c <_strtol_l.constprop.0+0x20>
 801639c:	2c2d      	cmp	r4, #45	; 0x2d
 801639e:	d132      	bne.n	8016406 <_strtol_l.constprop.0+0x9a>
 80163a0:	782c      	ldrb	r4, [r5, #0]
 80163a2:	2701      	movs	r7, #1
 80163a4:	1cb5      	adds	r5, r6, #2
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d05b      	beq.n	8016462 <_strtol_l.constprop.0+0xf6>
 80163aa:	2b10      	cmp	r3, #16
 80163ac:	d109      	bne.n	80163c2 <_strtol_l.constprop.0+0x56>
 80163ae:	2c30      	cmp	r4, #48	; 0x30
 80163b0:	d107      	bne.n	80163c2 <_strtol_l.constprop.0+0x56>
 80163b2:	782c      	ldrb	r4, [r5, #0]
 80163b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80163b8:	2c58      	cmp	r4, #88	; 0x58
 80163ba:	d14d      	bne.n	8016458 <_strtol_l.constprop.0+0xec>
 80163bc:	786c      	ldrb	r4, [r5, #1]
 80163be:	2310      	movs	r3, #16
 80163c0:	3502      	adds	r5, #2
 80163c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80163c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80163ca:	f04f 0c00 	mov.w	ip, #0
 80163ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80163d2:	4666      	mov	r6, ip
 80163d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80163d8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80163dc:	f1be 0f09 	cmp.w	lr, #9
 80163e0:	d816      	bhi.n	8016410 <_strtol_l.constprop.0+0xa4>
 80163e2:	4674      	mov	r4, lr
 80163e4:	42a3      	cmp	r3, r4
 80163e6:	dd24      	ble.n	8016432 <_strtol_l.constprop.0+0xc6>
 80163e8:	f1bc 0f00 	cmp.w	ip, #0
 80163ec:	db1e      	blt.n	801642c <_strtol_l.constprop.0+0xc0>
 80163ee:	45b1      	cmp	r9, r6
 80163f0:	d31c      	bcc.n	801642c <_strtol_l.constprop.0+0xc0>
 80163f2:	d101      	bne.n	80163f8 <_strtol_l.constprop.0+0x8c>
 80163f4:	45a2      	cmp	sl, r4
 80163f6:	db19      	blt.n	801642c <_strtol_l.constprop.0+0xc0>
 80163f8:	fb06 4603 	mla	r6, r6, r3, r4
 80163fc:	f04f 0c01 	mov.w	ip, #1
 8016400:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016404:	e7e8      	b.n	80163d8 <_strtol_l.constprop.0+0x6c>
 8016406:	2c2b      	cmp	r4, #43	; 0x2b
 8016408:	bf04      	itt	eq
 801640a:	782c      	ldrbeq	r4, [r5, #0]
 801640c:	1cb5      	addeq	r5, r6, #2
 801640e:	e7ca      	b.n	80163a6 <_strtol_l.constprop.0+0x3a>
 8016410:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016414:	f1be 0f19 	cmp.w	lr, #25
 8016418:	d801      	bhi.n	801641e <_strtol_l.constprop.0+0xb2>
 801641a:	3c37      	subs	r4, #55	; 0x37
 801641c:	e7e2      	b.n	80163e4 <_strtol_l.constprop.0+0x78>
 801641e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016422:	f1be 0f19 	cmp.w	lr, #25
 8016426:	d804      	bhi.n	8016432 <_strtol_l.constprop.0+0xc6>
 8016428:	3c57      	subs	r4, #87	; 0x57
 801642a:	e7db      	b.n	80163e4 <_strtol_l.constprop.0+0x78>
 801642c:	f04f 3cff 	mov.w	ip, #4294967295
 8016430:	e7e6      	b.n	8016400 <_strtol_l.constprop.0+0x94>
 8016432:	f1bc 0f00 	cmp.w	ip, #0
 8016436:	da05      	bge.n	8016444 <_strtol_l.constprop.0+0xd8>
 8016438:	2322      	movs	r3, #34	; 0x22
 801643a:	6003      	str	r3, [r0, #0]
 801643c:	4646      	mov	r6, r8
 801643e:	b942      	cbnz	r2, 8016452 <_strtol_l.constprop.0+0xe6>
 8016440:	4630      	mov	r0, r6
 8016442:	e79e      	b.n	8016382 <_strtol_l.constprop.0+0x16>
 8016444:	b107      	cbz	r7, 8016448 <_strtol_l.constprop.0+0xdc>
 8016446:	4276      	negs	r6, r6
 8016448:	2a00      	cmp	r2, #0
 801644a:	d0f9      	beq.n	8016440 <_strtol_l.constprop.0+0xd4>
 801644c:	f1bc 0f00 	cmp.w	ip, #0
 8016450:	d000      	beq.n	8016454 <_strtol_l.constprop.0+0xe8>
 8016452:	1e69      	subs	r1, r5, #1
 8016454:	6011      	str	r1, [r2, #0]
 8016456:	e7f3      	b.n	8016440 <_strtol_l.constprop.0+0xd4>
 8016458:	2430      	movs	r4, #48	; 0x30
 801645a:	2b00      	cmp	r3, #0
 801645c:	d1b1      	bne.n	80163c2 <_strtol_l.constprop.0+0x56>
 801645e:	2308      	movs	r3, #8
 8016460:	e7af      	b.n	80163c2 <_strtol_l.constprop.0+0x56>
 8016462:	2c30      	cmp	r4, #48	; 0x30
 8016464:	d0a5      	beq.n	80163b2 <_strtol_l.constprop.0+0x46>
 8016466:	230a      	movs	r3, #10
 8016468:	e7ab      	b.n	80163c2 <_strtol_l.constprop.0+0x56>
 801646a:	bf00      	nop
 801646c:	08017df6 	.word	0x08017df6

08016470 <_strtol_r>:
 8016470:	f7ff bf7c 	b.w	801636c <_strtol_l.constprop.0>

08016474 <__submore>:
 8016474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016478:	460c      	mov	r4, r1
 801647a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801647c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016480:	4299      	cmp	r1, r3
 8016482:	d11d      	bne.n	80164c0 <__submore+0x4c>
 8016484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016488:	f7fc f98e 	bl	80127a8 <_malloc_r>
 801648c:	b918      	cbnz	r0, 8016496 <__submore+0x22>
 801648e:	f04f 30ff 	mov.w	r0, #4294967295
 8016492:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801649a:	63a3      	str	r3, [r4, #56]	; 0x38
 801649c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80164a0:	6360      	str	r0, [r4, #52]	; 0x34
 80164a2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80164a6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80164aa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80164ae:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80164b2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80164b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80164ba:	6020      	str	r0, [r4, #0]
 80164bc:	2000      	movs	r0, #0
 80164be:	e7e8      	b.n	8016492 <__submore+0x1e>
 80164c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80164c2:	0077      	lsls	r7, r6, #1
 80164c4:	463a      	mov	r2, r7
 80164c6:	f7ff fb6f 	bl	8015ba8 <_realloc_r>
 80164ca:	4605      	mov	r5, r0
 80164cc:	2800      	cmp	r0, #0
 80164ce:	d0de      	beq.n	801648e <__submore+0x1a>
 80164d0:	eb00 0806 	add.w	r8, r0, r6
 80164d4:	4601      	mov	r1, r0
 80164d6:	4632      	mov	r2, r6
 80164d8:	4640      	mov	r0, r8
 80164da:	f7fb fe71 	bl	80121c0 <memcpy>
 80164de:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80164e2:	f8c4 8000 	str.w	r8, [r4]
 80164e6:	e7e9      	b.n	80164bc <__submore+0x48>

080164e8 <__ascii_wctomb>:
 80164e8:	b149      	cbz	r1, 80164fe <__ascii_wctomb+0x16>
 80164ea:	2aff      	cmp	r2, #255	; 0xff
 80164ec:	bf85      	ittet	hi
 80164ee:	238a      	movhi	r3, #138	; 0x8a
 80164f0:	6003      	strhi	r3, [r0, #0]
 80164f2:	700a      	strbls	r2, [r1, #0]
 80164f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80164f8:	bf98      	it	ls
 80164fa:	2001      	movls	r0, #1
 80164fc:	4770      	bx	lr
 80164fe:	4608      	mov	r0, r1
 8016500:	4770      	bx	lr
	...

08016504 <_fstat_r>:
 8016504:	b538      	push	{r3, r4, r5, lr}
 8016506:	4d07      	ldr	r5, [pc, #28]	; (8016524 <_fstat_r+0x20>)
 8016508:	2300      	movs	r3, #0
 801650a:	4604      	mov	r4, r0
 801650c:	4608      	mov	r0, r1
 801650e:	4611      	mov	r1, r2
 8016510:	602b      	str	r3, [r5, #0]
 8016512:	f7f4 f944 	bl	800a79e <_fstat>
 8016516:	1c43      	adds	r3, r0, #1
 8016518:	d102      	bne.n	8016520 <_fstat_r+0x1c>
 801651a:	682b      	ldr	r3, [r5, #0]
 801651c:	b103      	cbz	r3, 8016520 <_fstat_r+0x1c>
 801651e:	6023      	str	r3, [r4, #0]
 8016520:	bd38      	pop	{r3, r4, r5, pc}
 8016522:	bf00      	nop
 8016524:	2000a7b4 	.word	0x2000a7b4

08016528 <_isatty_r>:
 8016528:	b538      	push	{r3, r4, r5, lr}
 801652a:	4d06      	ldr	r5, [pc, #24]	; (8016544 <_isatty_r+0x1c>)
 801652c:	2300      	movs	r3, #0
 801652e:	4604      	mov	r4, r0
 8016530:	4608      	mov	r0, r1
 8016532:	602b      	str	r3, [r5, #0]
 8016534:	f7f4 f943 	bl	800a7be <_isatty>
 8016538:	1c43      	adds	r3, r0, #1
 801653a:	d102      	bne.n	8016542 <_isatty_r+0x1a>
 801653c:	682b      	ldr	r3, [r5, #0]
 801653e:	b103      	cbz	r3, 8016542 <_isatty_r+0x1a>
 8016540:	6023      	str	r3, [r4, #0]
 8016542:	bd38      	pop	{r3, r4, r5, pc}
 8016544:	2000a7b4 	.word	0x2000a7b4

08016548 <_malloc_usable_size_r>:
 8016548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801654c:	1f18      	subs	r0, r3, #4
 801654e:	2b00      	cmp	r3, #0
 8016550:	bfbc      	itt	lt
 8016552:	580b      	ldrlt	r3, [r1, r0]
 8016554:	18c0      	addlt	r0, r0, r3
 8016556:	4770      	bx	lr

08016558 <_init>:
 8016558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801655a:	bf00      	nop
 801655c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801655e:	bc08      	pop	{r3}
 8016560:	469e      	mov	lr, r3
 8016562:	4770      	bx	lr

08016564 <_fini>:
 8016564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016566:	bf00      	nop
 8016568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801656a:	bc08      	pop	{r3}
 801656c:	469e      	mov	lr, r3
 801656e:	4770      	bx	lr

08016570 <__FLASH_Program_Fast_veneer>:
 8016570:	f85f f000 	ldr.w	pc, [pc]	; 8016574 <__FLASH_Program_Fast_veneer+0x4>
 8016574:	20000255 	.word	0x20000255

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000005                                ....

20000010 <environ>:
20000010:	2000a6b8                                ... 

20000014 <SystemCoreClock>:
20000014:	003d0900                                ..=.

20000018 <uwTickPrio>:
20000018:	00000010                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <impure_data>:
20000024:	00000000 08017f18 08017f38 08017ef8     ........8....~..
	...

20000084 <_tzname>:
20000084:	08017b9c 08017b9c 00000000              .{...{......

20000090 <tzinfo>:
20000090:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000c0:	0000004a 00000000 00000000 00000000     J...............
	...

200000e8 <__global_locale>:
200000e8:	00000043 00000000 00000000 00000000     C...............
	...
20000108:	00000043 00000000 00000000 00000000     C...............
	...
20000128:	00000043 00000000 00000000 00000000     C...............
	...
20000148:	00000043 00000000 00000000 00000000     C...............
	...
20000168:	00000043 00000000 00000000 00000000     C...............
	...
20000188:	00000043 00000000 00000000 00000000     C...............
	...
200001a8:	00000043 00000000 00000000 00000000     C...............
	...
200001c8:	080164e9 08015b51 00000000 08017df5     .d..Q[.......}..
200001d8:	08017f60 08017c10 08017c10 08017c10     `....|...|...|..
200001e8:	08017c10 08017c10 08017c10 08017c10     .|...|...|...|..
200001f8:	08017c10 08017c10 ffffffff ffffffff     .|...|..........
20000208:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000230:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000254 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000254:	b480      	push	{r7}
20000256:	b089      	sub	sp, #36	; 0x24
20000258:	af00      	add	r7, sp, #0
2000025a:	6078      	str	r0, [r7, #4]
2000025c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000025e:	2380      	movs	r3, #128	; 0x80
20000260:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000266:	683b      	ldr	r3, [r7, #0]
20000268:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026a:	4b18      	ldr	r3, [pc, #96]	; (200002cc <FLASH_Program_Fast+0x78>)
2000026c:	695b      	ldr	r3, [r3, #20]
2000026e:	4a17      	ldr	r2, [pc, #92]	; (200002cc <FLASH_Program_Fast+0x78>)
20000270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000274:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000276:	f3ef 8310 	mrs	r3, PRIMASK
2000027a:	60fb      	str	r3, [r7, #12]
  return(result);
2000027c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000027e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000280:	b672      	cpsid	i
}
20000282:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000284:	697b      	ldr	r3, [r7, #20]
20000286:	681a      	ldr	r2, [r3, #0]
20000288:	69bb      	ldr	r3, [r7, #24]
2000028a:	601a      	str	r2, [r3, #0]
    dest_addr++;
2000028c:	69bb      	ldr	r3, [r7, #24]
2000028e:	3304      	adds	r3, #4
20000290:	61bb      	str	r3, [r7, #24]
    src_addr++;
20000292:	697b      	ldr	r3, [r7, #20]
20000294:	3304      	adds	r3, #4
20000296:	617b      	str	r3, [r7, #20]
    row_index--;
20000298:	7ffb      	ldrb	r3, [r7, #31]
2000029a:	3b01      	subs	r3, #1
2000029c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
2000029e:	7ffb      	ldrb	r3, [r7, #31]
200002a0:	2b00      	cmp	r3, #0
200002a2:	d1ef      	bne.n	20000284 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200002a4:	bf00      	nop
200002a6:	4b09      	ldr	r3, [pc, #36]	; (200002cc <FLASH_Program_Fast+0x78>)
200002a8:	691b      	ldr	r3, [r3, #16]
200002aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200002ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200002b2:	d0f8      	beq.n	200002a6 <FLASH_Program_Fast+0x52>
200002b4:	693b      	ldr	r3, [r7, #16]
200002b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b8:	68bb      	ldr	r3, [r7, #8]
200002ba:	f383 8810 	msr	PRIMASK, r3
}
200002be:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002c0:	bf00      	nop
200002c2:	3724      	adds	r7, #36	; 0x24
200002c4:	46bd      	mov	sp, r7
200002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200002ca:	4770      	bx	lr
200002cc:	58004000 	.word	0x58004000
