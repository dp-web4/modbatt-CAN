
Pack Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d034  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa0  0800d174  0800d174  0001d174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dc14  0800dc14  0001dc14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dc20  0800dc20  0001dc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800dc24  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cf38  2000007c  0800dc98  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000cfb4  0800dc98  0002cfb4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c0c0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000043b0  00000000  00000000  0004c16c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002670  00000000  00000000  00050520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002528  00000000  00000000  00052b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026baf  00000000  00000000  000550b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000244fe  00000000  00000000  0007bc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f5594  00000000  00000000  000a0165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001956f9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b278  00000000  00000000  0019574c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d15c 	.word	0x0800d15c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800d15c 	.word	0x0800d15c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <PC_Initialize>:

/***************************************************************************************************************
*     P C _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PC_Initialize(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0

  pack.id = PACK_ID;
 8000d76:	4b7b      	ldr	r3, [pc, #492]	; (8000f64 <PC_Initialize+0x1f4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 8000d7c:	4b79      	ldr	r3, [pc, #484]	; (8000f64 <PC_Initialize+0x1f4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8000d82:	4b78      	ldr	r3, [pc, #480]	; (8000f64 <PC_Initialize+0x1f4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8000d88:	4b76      	ldr	r3, [pc, #472]	; (8000f64 <PC_Initialize+0x1f4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 8000d8e:	4b75      	ldr	r3, [pc, #468]	; (8000f64 <PC_Initialize+0x1f4>)
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d103      	bne.n	8000d9e <PC_Initialize+0x2e>
    pack.vcuCanOffset = 0;
 8000d96:	4b73      	ldr	r3, [pc, #460]	; (8000f64 <PC_Initialize+0x1f4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	815a      	strh	r2, [r3, #10]
 8000d9c:	e007      	b.n	8000dae <PC_Initialize+0x3e>
  else if (pack.id == 1)
 8000d9e:	4b71      	ldr	r3, [pc, #452]	; (8000f64 <PC_Initialize+0x1f4>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d103      	bne.n	8000dae <PC_Initialize+0x3e>
    pack.vcuCanOffset =0x100;
 8000da6:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <PC_Initialize+0x1f4>)
 8000da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dac:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 8000dae:	4b6d      	ldr	r3, [pc, #436]	; (8000f64 <PC_Initialize+0x1f4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8000db4:	4b6b      	ldr	r3, [pc, #428]	; (8000f64 <PC_Initialize+0x1f4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8000dba:	4b6a      	ldr	r3, [pc, #424]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 8000dc0:	4b68      	ldr	r3, [pc, #416]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	81da      	strh	r2, [r3, #14]
  pack.moduleCount=0;
 8000dc6:	4b67      	ldr	r3, [pc, #412]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	741a      	strb	r2, [r3, #16]
  pack.activeModules=0;
 8000dcc:	4b65      	ldr	r3, [pc, #404]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	74da      	strb	r2, [r3, #19]
  pack.totalCells=0;
 8000dd2:	4b64      	ldr	r3, [pc, #400]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	831a      	strh	r2, [r3, #24]
  pack.cellHiTemp=0;
 8000dd8:	4b62      	ldr	r3, [pc, #392]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	835a      	strh	r2, [r3, #26]
  pack.cellLoTemp=0;
 8000dde:	4b61      	ldr	r3, [pc, #388]	; (8000f64 <PC_Initialize+0x1f4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	839a      	strh	r2, [r3, #28]
  pack.cellAvgTemp=0;
 8000de4:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <PC_Initialize+0x1f4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	83da      	strh	r2, [r3, #30]
  pack.cellHiVolt=0;
 8000dea:	4b5e      	ldr	r3, [pc, #376]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	841a      	strh	r2, [r3, #32]
  pack.cellLoVolt=0;
 8000df0:	4b5c      	ldr	r3, [pc, #368]	; (8000f64 <PC_Initialize+0x1f4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	845a      	strh	r2, [r3, #34]	; 0x22
  pack.cellAvgVolt=0;
 8000df6:	4b5b      	ldr	r3, [pc, #364]	; (8000f64 <PC_Initialize+0x1f4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	849a      	strh	r2, [r3, #36]	; 0x24
  pack.status=0;
 8000dfc:	4b59      	ldr	r3, [pc, #356]	; (8000f64 <PC_Initialize+0x1f4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pack.vcuStateChange=0;
 8000e04:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pack.state=0;
 8000e0c:	4b55      	ldr	r3, [pc, #340]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  pack.vcuRequestedState=0;
 8000e14:	4b53      	ldr	r3, [pc, #332]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pack.soc=0;
 8000e1c:	4b51      	ldr	r3, [pc, #324]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  pack.soh=0;
 8000e24:	4b4f      	ldr	r3, [pc, #316]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pack.vcuLastContact.overflows=0;
 8000e2c:	4b4d      	ldr	r3, [pc, #308]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
  pack.vcuLastContact.ticks=0;
 8000e32:	4b4c      	ldr	r3, [pc, #304]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	859a      	strh	r2, [r3, #44]	; 0x2c
  pack.cellBalanceActive=0;
 8000e38:	4b4a      	ldr	r3, [pc, #296]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	745a      	strb	r2, [r3, #17]
  pack.cellBalanceStatus=0;
 8000e3e:	4b49      	ldr	r3, [pc, #292]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	749a      	strb	r2, [r3, #18]
  pack.faultedModules=0;
 8000e44:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <PC_Initialize+0x1f4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	751a      	strb	r2, [r3, #20]


  bool passed;


  serialOut("");
 8000e4a:	4847      	ldr	r0, [pc, #284]	; (8000f68 <PC_Initialize+0x1f8>)
 8000e4c:	f004 f900 	bl	8005050 <serialOut>
  serialOut("");
 8000e50:	4845      	ldr	r0, [pc, #276]	; (8000f68 <PC_Initialize+0x1f8>)
 8000e52:	f004 f8fd 	bl	8005050 <serialOut>
  serialOut("        ██    ██");
 8000e56:	4845      	ldr	r0, [pc, #276]	; (8000f6c <PC_Initialize+0x1fc>)
 8000e58:	f004 f8fa 	bl	8005050 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 8000e5c:	4844      	ldr	r0, [pc, #272]	; (8000f70 <PC_Initialize+0x200>)
 8000e5e:	f004 f8f7 	bl	8005050 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2023");
 8000e62:	4844      	ldr	r0, [pc, #272]	; (8000f74 <PC_Initialize+0x204>)
 8000e64:	f004 f8f4 	bl	8005050 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 8000e68:	4843      	ldr	r0, [pc, #268]	; (8000f78 <PC_Initialize+0x208>)
 8000e6a:	f004 f8f1 	bl	8005050 <serialOut>
  serialOut("     ██    ██    ██");
 8000e6e:	4843      	ldr	r0, [pc, #268]	; (8000f7c <PC_Initialize+0x20c>)
 8000e70:	f004 f8ee 	bl	8005050 <serialOut>
  serialOut("     m o d b a t t");
 8000e74:	4842      	ldr	r0, [pc, #264]	; (8000f80 <PC_Initialize+0x210>)
 8000e76:	f004 f8eb 	bl	8005050 <serialOut>
  serialOut("");
 8000e7a:	483b      	ldr	r0, [pc, #236]	; (8000f68 <PC_Initialize+0x1f8>)
 8000e7c:	f004 f8e8 	bl	8005050 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8000e80:	2000      	movs	r0, #0
 8000e82:	f001 fd8b 	bl	800299c <CAN_TestRamAccess>
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d007      	beq.n	8000ea0 <PC_Initialize+0x130>
 8000e90:	493c      	ldr	r1, [pc, #240]	; (8000f84 <PC_Initialize+0x214>)
 8000e92:	483d      	ldr	r0, [pc, #244]	; (8000f88 <PC_Initialize+0x218>)
 8000e94:	f00a ff9a 	bl	800bdcc <siprintf>
 8000e98:	483b      	ldr	r0, [pc, #236]	; (8000f88 <PC_Initialize+0x218>)
 8000e9a:	f004 f8d9 	bl	8005050 <serialOut>
 8000e9e:	e006      	b.n	8000eae <PC_Initialize+0x13e>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8000ea0:	493a      	ldr	r1, [pc, #232]	; (8000f8c <PC_Initialize+0x21c>)
 8000ea2:	4839      	ldr	r0, [pc, #228]	; (8000f88 <PC_Initialize+0x218>)
 8000ea4:	f00a ff92 	bl	800bdcc <siprintf>
 8000ea8:	4837      	ldr	r0, [pc, #220]	; (8000f88 <PC_Initialize+0x218>)
 8000eaa:	f004 f8d1 	bl	8005050 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f001 fcfa 	bl	80028a8 <CAN_TestRegisterAccess>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d007      	beq.n	8000ece <PC_Initialize+0x15e>
 8000ebe:	4934      	ldr	r1, [pc, #208]	; (8000f90 <PC_Initialize+0x220>)
 8000ec0:	4831      	ldr	r0, [pc, #196]	; (8000f88 <PC_Initialize+0x218>)
 8000ec2:	f00a ff83 	bl	800bdcc <siprintf>
 8000ec6:	4830      	ldr	r0, [pc, #192]	; (8000f88 <PC_Initialize+0x218>)
 8000ec8:	f004 f8c2 	bl	8005050 <serialOut>
 8000ecc:	e006      	b.n	8000edc <PC_Initialize+0x16c>
  }else{        sprintf(tempBuffer,"     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8000ece:	4931      	ldr	r1, [pc, #196]	; (8000f94 <PC_Initialize+0x224>)
 8000ed0:	482d      	ldr	r0, [pc, #180]	; (8000f88 <PC_Initialize+0x218>)
 8000ed2:	f00a ff7b 	bl	800bdcc <siprintf>
 8000ed6:	482c      	ldr	r0, [pc, #176]	; (8000f88 <PC_Initialize+0x218>)
 8000ed8:	f004 f8ba 	bl	8005050 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 8000edc:	492e      	ldr	r1, [pc, #184]	; (8000f98 <PC_Initialize+0x228>)
 8000ede:	482a      	ldr	r0, [pc, #168]	; (8000f88 <PC_Initialize+0x218>)
 8000ee0:	f00a ff74 	bl	800bdcc <siprintf>
 8000ee4:	4828      	ldr	r0, [pc, #160]	; (8000f88 <PC_Initialize+0x218>)
 8000ee6:	f004 f8b3 	bl	8005050 <serialOut>

  passed = CAN_TestRamAccess(CAN2);
 8000eea:	2001      	movs	r0, #1
 8000eec:	f001 fd56 	bl	800299c <CAN_TestRamAccess>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <PC_Initialize+0x19a>
 8000efa:	4928      	ldr	r1, [pc, #160]	; (8000f9c <PC_Initialize+0x22c>)
 8000efc:	4822      	ldr	r0, [pc, #136]	; (8000f88 <PC_Initialize+0x218>)
 8000efe:	f00a ff65 	bl	800bdcc <siprintf>
 8000f02:	4821      	ldr	r0, [pc, #132]	; (8000f88 <PC_Initialize+0x218>)
 8000f04:	f004 f8a4 	bl	8005050 <serialOut>
 8000f08:	e006      	b.n	8000f18 <PC_Initialize+0x1a8>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8000f0a:	4925      	ldr	r1, [pc, #148]	; (8000fa0 <PC_Initialize+0x230>)
 8000f0c:	481e      	ldr	r0, [pc, #120]	; (8000f88 <PC_Initialize+0x218>)
 8000f0e:	f00a ff5d 	bl	800bdcc <siprintf>
 8000f12:	481d      	ldr	r0, [pc, #116]	; (8000f88 <PC_Initialize+0x218>)
 8000f14:	f004 f89c 	bl	8005050 <serialOut>
  }

  passed = CAN_TestRegisterAccess(CAN2);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f001 fcc5 	bl	80028a8 <CAN_TestRegisterAccess>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	71fb      	strb	r3, [r7, #7]
  if (passed) { sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d007      	beq.n	8000f38 <PC_Initialize+0x1c8>
 8000f28:	491e      	ldr	r1, [pc, #120]	; (8000fa4 <PC_Initialize+0x234>)
 8000f2a:	4817      	ldr	r0, [pc, #92]	; (8000f88 <PC_Initialize+0x218>)
 8000f2c:	f00a ff4e 	bl	800bdcc <siprintf>
 8000f30:	4815      	ldr	r0, [pc, #84]	; (8000f88 <PC_Initialize+0x218>)
 8000f32:	f004 f88d 	bl	8005050 <serialOut>
 8000f36:	e006      	b.n	8000f46 <PC_Initialize+0x1d6>
  }else{        sprintf(tempBuffer,"     MODULE MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 8000f38:	491b      	ldr	r1, [pc, #108]	; (8000fa8 <PC_Initialize+0x238>)
 8000f3a:	4813      	ldr	r0, [pc, #76]	; (8000f88 <PC_Initialize+0x218>)
 8000f3c:	f00a ff46 	bl	800bdcc <siprintf>
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <PC_Initialize+0x218>)
 8000f42:	f004 f885 	bl	8005050 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 8000f46:	4914      	ldr	r1, [pc, #80]	; (8000f98 <PC_Initialize+0x228>)
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <PC_Initialize+0x218>)
 8000f4a:	f00a ff3f 	bl	800bdcc <siprintf>
 8000f4e:	480e      	ldr	r0, [pc, #56]	; (8000f88 <PC_Initialize+0x218>)
 8000f50:	f004 f87e 	bl	8005050 <serialOut>

  appData.state = PC_STATE_INIT;
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <PC_Initialize+0x23c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	2000c754 	.word	0x2000c754
 8000f68:	0800d174 	.word	0x0800d174
 8000f6c:	0800d178 	.word	0x0800d178
 8000f70:	0800d194 	.word	0x0800d194
 8000f74:	0800d1bc 	.word	0x0800d1bc
 8000f78:	0800d20c 	.word	0x0800d20c
 8000f7c:	0800d25c 	.word	0x0800d25c
 8000f80:	0800d27c 	.word	0x0800d27c
 8000f84:	0800d290 	.word	0x0800d290
 8000f88:	2000ce88 	.word	0x2000ce88
 8000f8c:	0800d2c0 	.word	0x0800d2c0
 8000f90:	0800d2f8 	.word	0x0800d2f8
 8000f94:	0800d328 	.word	0x0800d328
 8000f98:	0800d360 	.word	0x0800d360
 8000f9c:	0800d364 	.word	0x0800d364
 8000fa0:	0800d394 	.word	0x0800d394
 8000fa4:	0800d3cc 	.word	0x0800d3cc
 8000fa8:	0800d3fc 	.word	0x0800d3fc
 8000fac:	20000098 	.word	0x20000098

08000fb0 <PC_Tasks>:

/***************************************************************************************************************
*     P C _ T a s k s                                                           P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PC_Tasks(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t firstModuleIndex;
 // uint8_t moduleId;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 8000fb6:	4ba8      	ldr	r3, [pc, #672]	; (8001258 <PC_Tasks+0x2a8>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d127      	bne.n	800100e <PC_Tasks+0x5e>
      switchLedOn(GREEN_LED);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f004 f8a2 	bl	8005108 <switchLedOn>
      switchLedOn(RED_LED);
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f004 f89f 	bl	8005108 <switchLedOn>
      DRV_CANFDSPI_Init(CAN1);  // VCU interface
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 fa82 	bl	80014d4 <DRV_CANFDSPI_Init>
      DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f000 fa7f 	bl	80014d4 <DRV_CANFDSPI_Init>
      switchLedOff(GREEN_LED);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f004 f8be 	bl	8005158 <switchLedOff>
      switchLedOff(RED_LED);
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f004 f8bb 	bl	8005158 <switchLedOff>

      MOD_IsolateAllModules();
 8000fe2:	f000 fe01 	bl	8001be8 <MOD_IsolateAllModules>
      MOD_DeRegisterAllModules();
 8000fe6:	f000 fdaf 	bl	8001b48 <MOD_DeRegisterAllModules>

      pack.vcuRequestedState = packOff;
 8000fea:	4b9c      	ldr	r3, [pc, #624]	; (800125c <PC_Tasks+0x2ac>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


     // set up a reference time
      pack.vcuLastContact.overflows = etTimerOverflows;
 8000ff2:	4b9b      	ldr	r3, [pc, #620]	; (8001260 <PC_Tasks+0x2b0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a99      	ldr	r2, [pc, #612]	; (800125c <PC_Tasks+0x2ac>)
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
      pack.vcuLastContact.ticks = htim1.Instance->CNT;
 8000ffa:	4b9a      	ldr	r3, [pc, #616]	; (8001264 <PC_Tasks+0x2b4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001000:	b29a      	uxth	r2, r3
 8001002:	4b96      	ldr	r3, [pc, #600]	; (800125c <PC_Tasks+0x2ac>)
 8001004:	859a      	strh	r2, [r3, #44]	; 0x2c

      appData.state = PC_STATE_RUN;
 8001006:	4b94      	ldr	r3, [pc, #592]	; (8001258 <PC_Tasks+0x2a8>)
 8001008:	2201      	movs	r2, #1
 800100a:	701a      	strb	r2, [r3, #0]
        VCU_TransmitBmsData1();
      }
      sendState=0;
    }
  }
}
 800100c:	e258      	b.n	80014c0 <PC_Tasks+0x510>
  }else if (appData.state == PC_STATE_RUN){
 800100e:	4b92      	ldr	r3, [pc, #584]	; (8001258 <PC_Tasks+0x2a8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	f040 8254 	bne.w	80014c0 <PC_Tasks+0x510>
      if(can1RxInterrupt)
 8001018:	4b93      	ldr	r3, [pc, #588]	; (8001268 <PC_Tasks+0x2b8>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <PC_Tasks+0x74>
        VCU_ReceiveMessages();
 8001020:	f005 f8f4 	bl	800620c <VCU_ReceiveMessages>
      if(can2RxInterrupt)
 8001024:	4b91      	ldr	r3, [pc, #580]	; (800126c <PC_Tasks+0x2bc>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <PC_Tasks+0x80>
        MOD_ReceiveMessages();
 800102c:	f000 fb04 	bl	8001638 <MOD_ReceiveMessages>
      if(VCU_TicksSinceLastMessage() > VCU_ET_TIMEOUT){
 8001030:	f005 fa9c 	bl	800656c <VCU_TicksSinceLastMessage>
 8001034:	4603      	mov	r3, r0
 8001036:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800103a:	d920      	bls.n	800107e <PC_Tasks+0xce>
        if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 800103c:	4b87      	ldr	r3, [pc, #540]	; (800125c <PC_Tasks+0x2ac>)
 800103e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001042:	2b03      	cmp	r3, #3
 8001044:	d009      	beq.n	800105a <PC_Tasks+0xaa>
 8001046:	4b85      	ldr	r3, [pc, #532]	; (800125c <PC_Tasks+0x2ac>)
 8001048:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800104c:	2b01      	cmp	r3, #1
 800104e:	d004      	beq.n	800105a <PC_Tasks+0xaa>
 8001050:	4b82      	ldr	r3, [pc, #520]	; (800125c <PC_Tasks+0x2ac>)
 8001052:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001056:	2b02      	cmp	r3, #2
 8001058:	d132      	bne.n	80010c0 <PC_Tasks+0x110>
          if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <PC_Tasks+0x2c0>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <PC_Tasks+0xc4>
 8001066:	4983      	ldr	r1, [pc, #524]	; (8001274 <PC_Tasks+0x2c4>)
 8001068:	4883      	ldr	r0, [pc, #524]	; (8001278 <PC_Tasks+0x2c8>)
 800106a:	f00a feaf 	bl	800bdcc <siprintf>
 800106e:	4882      	ldr	r0, [pc, #520]	; (8001278 <PC_Tasks+0x2c8>)
 8001070:	f003 ffee 	bl	8005050 <serialOut>
          pack.vcuRequestedState = packOff;
 8001074:	4b79      	ldr	r3, [pc, #484]	; (800125c <PC_Tasks+0x2ac>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800107c:	e020      	b.n	80010c0 <PC_Tasks+0x110>
      }else if(VCU_TicksSinceLastMessage() > VCU_ET_WARNING){
 800107e:	f005 fa75 	bl	800656c <VCU_TicksSinceLastMessage>
 8001082:	4603      	mov	r3, r0
 8001084:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001088:	d91a      	bls.n	80010c0 <PC_Tasks+0x110>
        if ((pack.state == packOn) || (pack.state == packPrecharge)){
 800108a:	4b74      	ldr	r3, [pc, #464]	; (800125c <PC_Tasks+0x2ac>)
 800108c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001090:	2b03      	cmp	r3, #3
 8001092:	d004      	beq.n	800109e <PC_Tasks+0xee>
 8001094:	4b71      	ldr	r3, [pc, #452]	; (800125c <PC_Tasks+0x2ac>)
 8001096:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800109a:	2b02      	cmp	r3, #2
 800109c:	d110      	bne.n	80010c0 <PC_Tasks+0x110>
          if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 800109e:	4b74      	ldr	r3, [pc, #464]	; (8001270 <PC_Tasks+0x2c0>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d006      	beq.n	80010b8 <PC_Tasks+0x108>
 80010aa:	4974      	ldr	r1, [pc, #464]	; (800127c <PC_Tasks+0x2cc>)
 80010ac:	4872      	ldr	r0, [pc, #456]	; (8001278 <PC_Tasks+0x2c8>)
 80010ae:	f00a fe8d 	bl	800bdcc <siprintf>
 80010b2:	4871      	ldr	r0, [pc, #452]	; (8001278 <PC_Tasks+0x2c8>)
 80010b4:	f003 ffcc 	bl	8005050 <serialOut>
          pack.vcuRequestedState = packStandby;
 80010b8:	4b68      	ldr	r3, [pc, #416]	; (800125c <PC_Tasks+0x2ac>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
      for (index =0;index < pack.moduleCount;index++){
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	e08b      	b.n	80011de <PC_Tasks+0x22e>
        if(MOD_TicksSinceLastMessage(module[index].moduleId) > MOD_ET_TIMEOUT && (module[index].statusRequested == true)){
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4a6d      	ldr	r2, [pc, #436]	; (8001280 <PC_Tasks+0x2d0>)
 80010ca:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80010ce:	fb01 f303 	mul.w	r3, r1, r3
 80010d2:	4413      	add	r3, r2
 80010d4:	3308      	adds	r3, #8
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fb81 	bl	80027e0 <MOD_TicksSinceLastMessage>
 80010de:	4603      	mov	r3, r0
 80010e0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d933      	bls.n	8001150 <PC_Tasks+0x1a0>
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	4a65      	ldr	r2, [pc, #404]	; (8001280 <PC_Tasks+0x2d0>)
 80010ec:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80010f0:	fb01 f303 	mul.w	r3, r1, r3
 80010f4:	4413      	add	r3, r2
 80010f6:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d027      	beq.n	8001150 <PC_Tasks+0x1a0>
          if( module[index].fault != 1){
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4a5f      	ldr	r2, [pc, #380]	; (8001280 <PC_Tasks+0x2d0>)
 8001104:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001108:	fb01 f303 	mul.w	r3, r1, r3
 800110c:	4413      	add	r3, r2
 800110e:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	f083 0301 	eor.w	r3, r3, #1
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b00      	cmp	r3, #0
 800111c:	d05c      	beq.n	80011d8 <PC_Tasks+0x228>
            MOD_TransmitState(module[index].moduleId,moduleOff);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4a57      	ldr	r2, [pc, #348]	; (8001280 <PC_Tasks+0x2d0>)
 8001122:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001126:	fb01 f303 	mul.w	r3, r1, r3
 800112a:	4413      	add	r3, r2
 800112c:	3308      	adds	r3, #8
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f001 f930 	bl	8002398 <MOD_TransmitState>
            module[index].fault = 1;
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4a51      	ldr	r2, [pc, #324]	; (8001280 <PC_Tasks+0x2d0>)
 800113c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001140:	fb01 f303 	mul.w	r3, r1, r3
 8001144:	4413      	add	r3, r2
 8001146:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
          if( module[index].fault != 1){
 800114e:	e043      	b.n	80011d8 <PC_Tasks+0x228>
       }else if((MOD_TicksSinceLastMessage(module[index].moduleId) > MOD_ET_WARNING) && (module[index].statusRequested == false)){
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	4a4b      	ldr	r2, [pc, #300]	; (8001280 <PC_Tasks+0x2d0>)
 8001154:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001158:	fb01 f303 	mul.w	r3, r1, r3
 800115c:	4413      	add	r3, r2
 800115e:	3308      	adds	r3, #8
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f001 fb3c 	bl	80027e0 <MOD_TicksSinceLastMessage>
 8001168:	4603      	mov	r3, r0
 800116a:	f242 7210 	movw	r2, #10000	; 0x2710
 800116e:	4293      	cmp	r3, r2
 8001170:	d91b      	bls.n	80011aa <PC_Tasks+0x1fa>
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4a42      	ldr	r2, [pc, #264]	; (8001280 <PC_Tasks+0x2d0>)
 8001176:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800117a:	fb01 f303 	mul.w	r3, r1, r3
 800117e:	4413      	add	r3, r2
 8001180:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	f083 0301 	eor.w	r3, r3, #1
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00c      	beq.n	80011aa <PC_Tasks+0x1fa>
          MOD_RequestModuleStatus(module[index].moduleId);
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	4a3b      	ldr	r2, [pc, #236]	; (8001280 <PC_Tasks+0x2d0>)
 8001194:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001198:	fb01 f303 	mul.w	r3, r1, r3
 800119c:	4413      	add	r3, r2
 800119e:	3308      	adds	r3, #8
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fd76 	bl	8001c94 <MOD_RequestModuleStatus>
 80011a8:	e016      	b.n	80011d8 <PC_Tasks+0x228>
          if(module[index].fault == 1){
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	4a34      	ldr	r2, [pc, #208]	; (8001280 <PC_Tasks+0x2d0>)
 80011ae:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80011b2:	fb01 f303 	mul.w	r3, r1, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <PC_Tasks+0x228>
            module[index].fault = 0;
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	4a2e      	ldr	r2, [pc, #184]	; (8001280 <PC_Tasks+0x2d0>)
 80011c6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80011ca:	fb01 f303 	mul.w	r3, r1, r3
 80011ce:	4413      	add	r3, r2
 80011d0:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]
      for (index =0;index < pack.moduleCount;index++){
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	3301      	adds	r3, #1
 80011dc:	71fb      	strb	r3, [r7, #7]
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <PC_Tasks+0x2ac>)
 80011e0:	7c1b      	ldrb	r3, [r3, #16]
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	f4ff af6e 	bcc.w	80010c6 <PC_Tasks+0x116>
     if (pack.vcuRequestedState == packOn){
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <PC_Tasks+0x2ac>)
 80011ec:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	f040 8094 	bne.w	800131e <PC_Tasks+0x36e>
       if(pack.powerStatus.powerStage == stageFirstModule){
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <PC_Tasks+0x2ac>)
 80011f8:	7d9b      	ldrb	r3, [r3, #22]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d167      	bne.n	80012ce <PC_Tasks+0x31e>
         index = MOD_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 80011fe:	4b17      	ldr	r3, [pc, #92]	; (800125c <PC_Tasks+0x2ac>)
 8001200:	7d5b      	ldrb	r3, [r3, #21]
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fab8 	bl	8002778 <MOD_ModuleIndexFromId>
 8001208:	4603      	mov	r3, r0
 800120a:	71fb      	strb	r3, [r7, #7]
         if (index != pack.moduleCount){
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <PC_Tasks+0x2ac>)
 800120e:	7c1b      	ldrb	r3, [r3, #16]
 8001210:	79fa      	ldrb	r2, [r7, #7]
 8001212:	429a      	cmp	r2, r3
 8001214:	f000 813f 	beq.w	8001496 <PC_Tasks+0x4e6>
           if(module[index].current_state == moduleOn){
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <PC_Tasks+0x2d0>)
 800121c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001220:	fb01 f303 	mul.w	r3, r1, r3
 8001224:	4413      	add	r3, r2
 8001226:	331d      	adds	r3, #29
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b03      	cmp	r3, #3
 800122c:	f040 8133 	bne.w	8001496 <PC_Tasks+0x4e6>
             module[index].command.commandStatus = commandActive;
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4a13      	ldr	r2, [pc, #76]	; (8001280 <PC_Tasks+0x2d0>)
 8001234:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001238:	fb01 f303 	mul.w	r3, r1, r3
 800123c:	4413      	add	r3, r2
 800123e:	331f      	adds	r3, #31
 8001240:	2201      	movs	r2, #1
 8001242:	701a      	strb	r2, [r3, #0]
             pack.state = packOn;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <PC_Tasks+0x2ac>)
 8001246:	2203      	movs	r2, #3
 8001248:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
             pack.powerStatus.powerStage = stageIdle;
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <PC_Tasks+0x2ac>)
 800124e:	2201      	movs	r2, #1
 8001250:	759a      	strb	r2, [r3, #22]
             for (index =0;index < pack.moduleCount;index++){
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	e034      	b.n	80012c2 <PC_Tasks+0x312>
 8001258:	20000098 	.word	0x20000098
 800125c:	2000c754 	.word	0x2000c754
 8001260:	2000cef0 	.word	0x2000cef0
 8001264:	2000ca68 	.word	0x2000ca68
 8001268:	2000ceee 	.word	0x2000ceee
 800126c:	2000ceec 	.word	0x2000ceec
 8001270:	20000008 	.word	0x20000008
 8001274:	0800d434 	.word	0x0800d434
 8001278:	2000ce88 	.word	0x2000ce88
 800127c:	0800d450 	.word	0x0800d450
 8001280:	20000154 	.word	0x20000154
               if (module[index].fault == false){
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4a90      	ldr	r2, [pc, #576]	; (80014c8 <PC_Tasks+0x518>)
 8001288:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800128c:	fb01 f303 	mul.w	r3, r1, r3
 8001290:	4413      	add	r3, r2
 8001292:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d00c      	beq.n	80012bc <PC_Tasks+0x30c>
                 MOD_TransmitState(module[index].moduleId,moduleOn);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a88      	ldr	r2, [pc, #544]	; (80014c8 <PC_Tasks+0x518>)
 80012a6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80012aa:	fb01 f303 	mul.w	r3, r1, r3
 80012ae:	4413      	add	r3, r2
 80012b0:	3308      	adds	r3, #8
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2103      	movs	r1, #3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 f86e 	bl	8002398 <MOD_TransmitState>
             for (index =0;index < pack.moduleCount;index++){
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	3301      	adds	r3, #1
 80012c0:	71fb      	strb	r3, [r7, #7]
 80012c2:	4b82      	ldr	r3, [pc, #520]	; (80014cc <PC_Tasks+0x51c>)
 80012c4:	7c1b      	ldrb	r3, [r3, #16]
 80012c6:	79fa      	ldrb	r2, [r7, #7]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d3db      	bcc.n	8001284 <PC_Tasks+0x2d4>
 80012cc:	e0e3      	b.n	8001496 <PC_Tasks+0x4e6>
         for (index =0;index < pack.moduleCount;index++){
 80012ce:	2300      	movs	r3, #0
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	e01e      	b.n	8001312 <PC_Tasks+0x362>
           if (module[index].fault == false){
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4a7c      	ldr	r2, [pc, #496]	; (80014c8 <PC_Tasks+0x518>)
 80012d8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80012dc:	fb01 f303 	mul.w	r3, r1, r3
 80012e0:	4413      	add	r3, r2
 80012e2:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	f083 0301 	eor.w	r3, r3, #1
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00c      	beq.n	800130c <PC_Tasks+0x35c>
             MOD_TransmitState(module[index].moduleId,moduleOn);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4a74      	ldr	r2, [pc, #464]	; (80014c8 <PC_Tasks+0x518>)
 80012f6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80012fa:	fb01 f303 	mul.w	r3, r1, r3
 80012fe:	4413      	add	r3, r2
 8001300:	3308      	adds	r3, #8
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2103      	movs	r1, #3
 8001306:	4618      	mov	r0, r3
 8001308:	f001 f846 	bl	8002398 <MOD_TransmitState>
         for (index =0;index < pack.moduleCount;index++){
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	3301      	adds	r3, #1
 8001310:	71fb      	strb	r3, [r7, #7]
 8001312:	4b6e      	ldr	r3, [pc, #440]	; (80014cc <PC_Tasks+0x51c>)
 8001314:	7c1b      	ldrb	r3, [r3, #16]
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	429a      	cmp	r2, r3
 800131a:	d3db      	bcc.n	80012d4 <PC_Tasks+0x324>
 800131c:	e0bb      	b.n	8001496 <PC_Tasks+0x4e6>
     } else if (pack.vcuRequestedState == packPrecharge){
 800131e:	4b6b      	ldr	r3, [pc, #428]	; (80014cc <PC_Tasks+0x51c>)
 8001320:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001324:	2b02      	cmp	r3, #2
 8001326:	d15a      	bne.n	80013de <PC_Tasks+0x42e>
         if(pack.powerStatus.powerStage == stageFirstModule){
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <PC_Tasks+0x51c>)
 800132a:	7d9b      	ldrb	r3, [r3, #22]
 800132c:	2b00      	cmp	r3, #0
 800132e:	f040 80b2 	bne.w	8001496 <PC_Tasks+0x4e6>
          firstModuleIndex = MOD_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8001332:	4b66      	ldr	r3, [pc, #408]	; (80014cc <PC_Tasks+0x51c>)
 8001334:	7d5b      	ldrb	r3, [r3, #21]
 8001336:	4618      	mov	r0, r3
 8001338:	f001 fa1e 	bl	8002778 <MOD_ModuleIndexFromId>
 800133c:	4603      	mov	r3, r0
 800133e:	71bb      	strb	r3, [r7, #6]
          if (firstModuleIndex != pack.moduleCount){
 8001340:	4b62      	ldr	r3, [pc, #392]	; (80014cc <PC_Tasks+0x51c>)
 8001342:	7c1b      	ldrb	r3, [r3, #16]
 8001344:	79ba      	ldrb	r2, [r7, #6]
 8001346:	429a      	cmp	r2, r3
 8001348:	f000 80a5 	beq.w	8001496 <PC_Tasks+0x4e6>
            if(module[firstModuleIndex].current_state == moduleOn){
 800134c:	79bb      	ldrb	r3, [r7, #6]
 800134e:	4a5e      	ldr	r2, [pc, #376]	; (80014c8 <PC_Tasks+0x518>)
 8001350:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001354:	fb01 f303 	mul.w	r3, r1, r3
 8001358:	4413      	add	r3, r2
 800135a:	331d      	adds	r3, #29
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b03      	cmp	r3, #3
 8001360:	f040 8099 	bne.w	8001496 <PC_Tasks+0x4e6>
              module[firstModuleIndex].command.commandStatus = commandActive;
 8001364:	79bb      	ldrb	r3, [r7, #6]
 8001366:	4a58      	ldr	r2, [pc, #352]	; (80014c8 <PC_Tasks+0x518>)
 8001368:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800136c:	fb01 f303 	mul.w	r3, r1, r3
 8001370:	4413      	add	r3, r2
 8001372:	331f      	adds	r3, #31
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
              pack.state = packPrecharge;
 8001378:	4b54      	ldr	r3, [pc, #336]	; (80014cc <PC_Tasks+0x51c>)
 800137a:	2202      	movs	r2, #2
 800137c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
              pack.powerStatus.powerStage = stageIdle;
 8001380:	4b52      	ldr	r3, [pc, #328]	; (80014cc <PC_Tasks+0x51c>)
 8001382:	2201      	movs	r2, #1
 8001384:	759a      	strb	r2, [r3, #22]
              for (index =0;index < pack.moduleCount;index++){
 8001386:	2300      	movs	r3, #0
 8001388:	71fb      	strb	r3, [r7, #7]
 800138a:	e022      	b.n	80013d2 <PC_Tasks+0x422>
                if (module[index].fault == false && (index != firstModuleIndex)){
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	4a4e      	ldr	r2, [pc, #312]	; (80014c8 <PC_Tasks+0x518>)
 8001390:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001394:	fb01 f303 	mul.w	r3, r1, r3
 8001398:	4413      	add	r3, r2
 800139a:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	f083 0301 	eor.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d010      	beq.n	80013cc <PC_Tasks+0x41c>
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	79bb      	ldrb	r3, [r7, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d00c      	beq.n	80013cc <PC_Tasks+0x41c>
                  MOD_TransmitState(module[index].moduleId,moduleStandby);
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	4a44      	ldr	r2, [pc, #272]	; (80014c8 <PC_Tasks+0x518>)
 80013b6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80013ba:	fb01 f303 	mul.w	r3, r1, r3
 80013be:	4413      	add	r3, r2
 80013c0:	3308      	adds	r3, #8
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2101      	movs	r1, #1
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 ffe6 	bl	8002398 <MOD_TransmitState>
              for (index =0;index < pack.moduleCount;index++){
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	3301      	adds	r3, #1
 80013d0:	71fb      	strb	r3, [r7, #7]
 80013d2:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <PC_Tasks+0x51c>)
 80013d4:	7c1b      	ldrb	r3, [r3, #16]
 80013d6:	79fa      	ldrb	r2, [r7, #7]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d3d7      	bcc.n	800138c <PC_Tasks+0x3dc>
 80013dc:	e05b      	b.n	8001496 <PC_Tasks+0x4e6>
     } else if (pack.vcuRequestedState == packStandby){
 80013de:	4b3b      	ldr	r3, [pc, #236]	; (80014cc <PC_Tasks+0x51c>)
 80013e0:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d130      	bne.n	800144a <PC_Tasks+0x49a>
       if(pack.state != packStandby){
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <PC_Tasks+0x51c>)
 80013ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d051      	beq.n	8001496 <PC_Tasks+0x4e6>
         for (index =0;index < pack.moduleCount;index++){
 80013f2:	2300      	movs	r3, #0
 80013f4:	71fb      	strb	r3, [r7, #7]
 80013f6:	e01e      	b.n	8001436 <PC_Tasks+0x486>
           if (module[index].fault == false ){
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4a33      	ldr	r2, [pc, #204]	; (80014c8 <PC_Tasks+0x518>)
 80013fc:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001400:	fb01 f303 	mul.w	r3, r1, r3
 8001404:	4413      	add	r3, r2
 8001406:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	f083 0301 	eor.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00c      	beq.n	8001430 <PC_Tasks+0x480>
             MOD_TransmitState(module[index].moduleId,moduleStandby);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <PC_Tasks+0x518>)
 800141a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800141e:	fb01 f303 	mul.w	r3, r1, r3
 8001422:	4413      	add	r3, r2
 8001424:	3308      	adds	r3, #8
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	4618      	mov	r0, r3
 800142c:	f000 ffb4 	bl	8002398 <MOD_TransmitState>
         for (index =0;index < pack.moduleCount;index++){
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	3301      	adds	r3, #1
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <PC_Tasks+0x51c>)
 8001438:	7c1b      	ldrb	r3, [r3, #16]
 800143a:	79fa      	ldrb	r2, [r7, #7]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3db      	bcc.n	80013f8 <PC_Tasks+0x448>
         pack.state = packStandby;
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <PC_Tasks+0x51c>)
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8001448:	e025      	b.n	8001496 <PC_Tasks+0x4e6>
     } else if (pack.vcuRequestedState == packOff){
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <PC_Tasks+0x51c>)
 800144c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001450:	2b00      	cmp	r3, #0
 8001452:	d120      	bne.n	8001496 <PC_Tasks+0x4e6>
       if(pack.state != packOff){
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <PC_Tasks+0x51c>)
 8001456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800145a:	2b00      	cmp	r3, #0
 800145c:	d01b      	beq.n	8001496 <PC_Tasks+0x4e6>
         for (index =0;index < pack.moduleCount;index++){
 800145e:	2300      	movs	r3, #0
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	e00f      	b.n	8001484 <PC_Tasks+0x4d4>
           MOD_TransmitState(module[index].moduleId,moduleOff);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <PC_Tasks+0x518>)
 8001468:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800146c:	fb01 f303 	mul.w	r3, r1, r3
 8001470:	4413      	add	r3, r2
 8001472:	3308      	adds	r3, #8
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f000 ff8d 	bl	8002398 <MOD_TransmitState>
         for (index =0;index < pack.moduleCount;index++){
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	3301      	adds	r3, #1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	4b11      	ldr	r3, [pc, #68]	; (80014cc <PC_Tasks+0x51c>)
 8001486:	7c1b      	ldrb	r3, [r3, #16]
 8001488:	79fa      	ldrb	r2, [r7, #7]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3ea      	bcc.n	8001464 <PC_Tasks+0x4b4>
         pack.state = packOff;
 800148e:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <PC_Tasks+0x51c>)
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
     if(sendState > 0){
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <PC_Tasks+0x520>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d010      	beq.n	80014c0 <PC_Tasks+0x510>
      VCU_TransmitBmsState();
 800149e:	f005 f89b 	bl	80065d8 <VCU_TransmitBmsState>
      if(pack.state == packPrecharge || pack.state == packOn ){
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <PC_Tasks+0x51c>)
 80014a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d004      	beq.n	80014b6 <PC_Tasks+0x506>
 80014ac:	4b07      	ldr	r3, [pc, #28]	; (80014cc <PC_Tasks+0x51c>)
 80014ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d101      	bne.n	80014ba <PC_Tasks+0x50a>
        VCU_TransmitBmsData1();
 80014b6:	f005 f92b 	bl	8006710 <VCU_TransmitBmsData1>
      sendState=0;
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <PC_Tasks+0x520>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000154 	.word	0x20000154
 80014cc:	2000c754 	.word	0x2000c754
 80014d0:	2000cef5 	.word	0x2000cef5

080014d4 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fad1 	bl	8002a88 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 fd66 	bl	8003fba <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	21ff      	movs	r1, #255	; 0xff
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fd95 	bl	8004022 <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 80014f8:	484a      	ldr	r0, [pc, #296]	; (8001624 <DRV_CANFDSPI_Init+0x150>)
 80014fa:	f001 ffa1 	bl	8003440 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 80014fe:	4a49      	ldr	r2, [pc, #292]	; (8001624 <DRV_CANFDSPI_Init+0x150>)
 8001500:	7813      	ldrb	r3, [r2, #0]
 8001502:	f043 0320 	orr.w	r3, r3, #32
 8001506:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8001508:	4a46      	ldr	r2, [pc, #280]	; (8001624 <DRV_CANFDSPI_Init+0x150>)
 800150a:	7853      	ldrb	r3, [r2, #1]
 800150c:	f36f 1386 	bfc	r3, #6, #1
 8001510:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	4943      	ldr	r1, [pc, #268]	; (8001624 <DRV_CANFDSPI_Init+0x150>)
 8001516:	4618      	mov	r0, r3
 8001518:	f001 ff04 	bl	8003324 <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 800151c:	4842      	ldr	r0, [pc, #264]	; (8001628 <DRV_CANFDSPI_Init+0x154>)
 800151e:	f002 f89f 	bl	8003660 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 8001522:	4a41      	ldr	r2, [pc, #260]	; (8001628 <DRV_CANFDSPI_Init+0x154>)
 8001524:	7853      	ldrb	r3, [r2, #1]
 8001526:	2107      	movs	r1, #7
 8001528:	f361 0304 	bfi	r3, r1, #0, #5
 800152c:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 800152e:	4a3e      	ldr	r2, [pc, #248]	; (8001628 <DRV_CANFDSPI_Init+0x154>)
 8001530:	7853      	ldrb	r3, [r2, #1]
 8001532:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001536:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8001538:	4a3b      	ldr	r2, [pc, #236]	; (8001628 <DRV_CANFDSPI_Init+0x154>)
 800153a:	7813      	ldrb	r3, [r2, #0]
 800153c:	2101      	movs	r1, #1
 800153e:	f361 0345 	bfi	r3, r1, #1, #5
 8001542:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MOD_TX_FIFO, &txConfig);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4a38      	ldr	r2, [pc, #224]	; (8001628 <DRV_CANFDSPI_Init+0x154>)
 8001548:	2102      	movs	r1, #2
 800154a:	4618      	mov	r0, r3
 800154c:	f002 f830 	bl	80035b0 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8001550:	4836      	ldr	r0, [pc, #216]	; (800162c <DRV_CANFDSPI_Init+0x158>)
 8001552:	f002 fab3 	bl	8003abc <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 8001556:	4a35      	ldr	r2, [pc, #212]	; (800162c <DRV_CANFDSPI_Init+0x158>)
 8001558:	7813      	ldrb	r3, [r2, #0]
 800155a:	210f      	movs	r1, #15
 800155c:	f361 0345 	bfi	r3, r1, #1, #5
 8001560:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8001562:	4a32      	ldr	r2, [pc, #200]	; (800162c <DRV_CANFDSPI_Init+0x158>)
 8001564:	8813      	ldrh	r3, [r2, #0]
 8001566:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 800156a:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MOD_RX_FIFO, &rxConfig);
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	4a2f      	ldr	r2, [pc, #188]	; (800162c <DRV_CANFDSPI_Init+0x158>)
 8001570:	2101      	movs	r1, #1
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fa56 	bl	8003a24 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8001578:	4b2d      	ldr	r3, [pc, #180]	; (8001630 <DRV_CANFDSPI_Init+0x15c>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 800157e:	4a2c      	ldr	r2, [pc, #176]	; (8001630 <DRV_CANFDSPI_Init+0x15c>)
 8001580:	8813      	ldrh	r3, [r2, #0]
 8001582:	f36f 030a 	bfc	r3, #0, #11
 8001586:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 8001588:	4a29      	ldr	r2, [pc, #164]	; (8001630 <DRV_CANFDSPI_Init+0x15c>)
 800158a:	78d3      	ldrb	r3, [r2, #3]
 800158c:	f36f 1386 	bfc	r3, #6, #1
 8001590:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 8001592:	4a27      	ldr	r2, [pc, #156]	; (8001630 <DRV_CANFDSPI_Init+0x15c>)
 8001594:	6813      	ldr	r3, [r2, #0]
 8001596:	f36f 23dc 	bfc	r3, #11, #18
 800159a:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	4a24      	ldr	r2, [pc, #144]	; (8001630 <DRV_CANFDSPI_Init+0x15c>)
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f002 f9c0 	bl	8003928 <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 80015a8:	4b22      	ldr	r3, [pc, #136]	; (8001634 <DRV_CANFDSPI_Init+0x160>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 80015ae:	4a21      	ldr	r2, [pc, #132]	; (8001634 <DRV_CANFDSPI_Init+0x160>)
 80015b0:	8813      	ldrh	r3, [r2, #0]
 80015b2:	f36f 030a 	bfc	r3, #0, #11
 80015b6:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 80015b8:	4a1e      	ldr	r2, [pc, #120]	; (8001634 <DRV_CANFDSPI_Init+0x160>)
 80015ba:	78d3      	ldrb	r3, [r2, #3]
 80015bc:	f36f 1386 	bfc	r3, #6, #1
 80015c0:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 80015c2:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <DRV_CANFDSPI_Init+0x160>)
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	f36f 23dc 	bfc	r3, #11, #18
 80015ca:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	4a19      	ldr	r2, [pc, #100]	; (8001634 <DRV_CANFDSPI_Init+0x160>)
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 f9ca 	bl	800396c <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MOD_RX_FIFO, true);
 80015d8:	79f8      	ldrb	r0, [r7, #7]
 80015da:	2301      	movs	r3, #1
 80015dc:	2201      	movs	r2, #1
 80015de:	2100      	movs	r1, #0
 80015e0:	f002 f9e8 	bl	80039b4 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 80015e4:	79f8      	ldrb	r0, [r7, #7]
 80015e6:	2300      	movs	r3, #0
 80015e8:	2202      	movs	r2, #2
 80015ea:	2101      	movs	r1, #1
 80015ec:	f002 fd59 	bl	80040a2 <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 80015f0:	79fb      	ldrb	r3, [r7, #7]
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 fc72 	bl	8004ee0 <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MOD_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MOD_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MOD_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2201      	movs	r2, #1
 8001600:	2101      	movs	r1, #1
 8001602:	4618      	mov	r0, r3
 8001604:	f002 fc59 	bl	8003eba <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	2103      	movs	r1, #3
 800160c:	4618      	mov	r0, r3
 800160e:	f002 fba8 	bl	8003d62 <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f001 ff8e 	bl	8003538 <DRV_CANFDSPI_OperationModeSelect>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	2000009c 	.word	0x2000009c
 8001628:	200000a0 	.word	0x200000a0
 800162c:	200000f4 	.word	0x200000f4
 8001630:	200000f8 	.word	0x200000f8
 8001634:	200000fc 	.word	0x200000fc

08001638 <MOD_ReceiveMessages>:

/***************************************************************************************************************
*     M O D _ R e c e i v e M o d u l e M e s s a g e s                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ReceiveMessages(void)
{
 8001638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163a:	b08b      	sub	sp, #44	; 0x2c
 800163c:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MOD_RX_FIFO, &rxFlags);
 800163e:	4a5e      	ldr	r2, [pc, #376]	; (80017b8 <MOD_ReceiveMessages+0x180>)
 8001640:	2101      	movs	r1, #1
 8001642:	2001      	movs	r0, #1
 8001644:	f002 fc00 	bl	8003e48 <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8001648:	e0a9      	b.n	800179e <MOD_ReceiveMessages+0x166>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MOD_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 800164a:	2340      	movs	r3, #64	; 0x40
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001650:	4a5b      	ldr	r2, [pc, #364]	; (80017c0 <MOD_ReceiveMessages+0x188>)
 8001652:	2101      	movs	r1, #1
 8001654:	2001      	movs	r0, #1
 8001656:	f002 fa5b 	bl	8003b10 <DRV_CANFDSPI_ReceiveMessageGet>

    if(debugLevel & (DBG_MCU + DBG_VERBOSE)){ sprintf(tempBuffer,"MC RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 800165a:	4b5a      	ldr	r3, [pc, #360]	; (80017c4 <MOD_ReceiveMessages+0x18c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	f003 030a 	and.w	r3, r3, #10
 8001662:	2b00      	cmp	r3, #0
 8001664:	d033      	beq.n	80016ce <MOD_ReceiveMessages+0x96>
 8001666:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <MOD_ReceiveMessages+0x188>)
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166e:	b29b      	uxth	r3, r3
 8001670:	469c      	mov	ip, r3
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <MOD_ReceiveMessages+0x188>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800167a:	469e      	mov	lr, r3
 800167c:	4b4f      	ldr	r3, [pc, #316]	; (80017bc <MOD_ReceiveMessages+0x184>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b4e      	ldr	r3, [pc, #312]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001684:	785b      	ldrb	r3, [r3, #1]
 8001686:	4619      	mov	r1, r3
 8001688:	4b4c      	ldr	r3, [pc, #304]	; (80017bc <MOD_ReceiveMessages+0x184>)
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	4618      	mov	r0, r3
 800168e:	4b4b      	ldr	r3, [pc, #300]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001690:	78db      	ldrb	r3, [r3, #3]
 8001692:	461c      	mov	r4, r3
 8001694:	4b49      	ldr	r3, [pc, #292]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001696:	791b      	ldrb	r3, [r3, #4]
 8001698:	461d      	mov	r5, r3
 800169a:	4b48      	ldr	r3, [pc, #288]	; (80017bc <MOD_ReceiveMessages+0x184>)
 800169c:	795b      	ldrb	r3, [r3, #5]
 800169e:	461e      	mov	r6, r3
 80016a0:	4b46      	ldr	r3, [pc, #280]	; (80017bc <MOD_ReceiveMessages+0x184>)
 80016a2:	799b      	ldrb	r3, [r3, #6]
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b45      	ldr	r3, [pc, #276]	; (80017bc <MOD_ReceiveMessages+0x184>)
 80016a8:	79db      	ldrb	r3, [r3, #7]
 80016aa:	9307      	str	r3, [sp, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	9306      	str	r3, [sp, #24]
 80016b0:	9605      	str	r6, [sp, #20]
 80016b2:	9504      	str	r5, [sp, #16]
 80016b4:	9403      	str	r4, [sp, #12]
 80016b6:	9002      	str	r0, [sp, #8]
 80016b8:	9101      	str	r1, [sp, #4]
 80016ba:	9200      	str	r2, [sp, #0]
 80016bc:	4673      	mov	r3, lr
 80016be:	4662      	mov	r2, ip
 80016c0:	4941      	ldr	r1, [pc, #260]	; (80017c8 <MOD_ReceiveMessages+0x190>)
 80016c2:	4842      	ldr	r0, [pc, #264]	; (80017cc <MOD_ReceiveMessages+0x194>)
 80016c4:	f00a fb82 	bl	800bdcc <siprintf>
 80016c8:	4840      	ldr	r0, [pc, #256]	; (80017cc <MOD_ReceiveMessages+0x194>)
 80016ca:	f003 fcc1 	bl	8005050 <serialOut>

    switch (rxObj.bF.id.SID) {
 80016ce:	4b3c      	ldr	r3, [pc, #240]	; (80017c0 <MOD_ReceiveMessages+0x188>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d81e      	bhi.n	800171e <MOD_ReceiveMessages+0xe6>
 80016e0:	a201      	add	r2, pc, #4	; (adr r2, 80016e8 <MOD_ReceiveMessages+0xb0>)
 80016e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e6:	bf00      	nop
 80016e8:	08001701 	.word	0x08001701
 80016ec:	0800171f 	.word	0x0800171f
 80016f0:	0800170d 	.word	0x0800170d
 80016f4:	08001713 	.word	0x08001713
 80016f8:	08001719 	.word	0x08001719
 80016fc:	08001707 	.word	0x08001707
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MOD_RegisterModule();
 8001700:	f000 f8c2 	bl	8001888 <MOD_RegisterModule>
        break;
 8001704:	e046      	b.n	8001794 <MOD_ReceiveMessages+0x15c>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MOD_ProcessCellDetail();
 8001706:	f000 ff0d 	bl	8002524 <MOD_ProcessCellDetail>
        break;
 800170a:	e043      	b.n	8001794 <MOD_ReceiveMessages+0x15c>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MOD_ProcessModuleStatus1();
 800170c:	f000 fb98 	bl	8001e40 <MOD_ProcessModuleStatus1>
        break;
 8001710:	e040      	b.n	8001794 <MOD_ReceiveMessages+0x15c>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MOD_ProcessModuleStatus2();
 8001712:	f000 fcb5 	bl	8002080 <MOD_ProcessModuleStatus2>
        break;
 8001716:	e03d      	b.n	8001794 <MOD_ReceiveMessages+0x15c>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MOD_ProcessModuleStatus3();
 8001718:	f000 fd78 	bl	800220c <MOD_ProcessModuleStatus3>
        break;
 800171c:	e03a      	b.n	8001794 <MOD_ReceiveMessages+0x15c>
      default:
        // Unknown Message
         if(debugLevel & (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MC RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <MOD_ReceiveMessages+0x18c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	2b00      	cmp	r3, #0
 8001728:	d033      	beq.n	8001792 <MOD_ReceiveMessages+0x15a>
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <MOD_ReceiveMessages+0x188>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001732:	b29b      	uxth	r3, r3
 8001734:	469c      	mov	ip, r3
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <MOD_ReceiveMessages+0x188>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800173e:	469e      	mov	lr, r3
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001748:	785b      	ldrb	r3, [r3, #1]
 800174a:	4619      	mov	r1, r3
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MOD_ReceiveMessages+0x184>)
 800174e:	789b      	ldrb	r3, [r3, #2]
 8001750:	4618      	mov	r0, r3
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	461c      	mov	r4, r3
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MOD_ReceiveMessages+0x184>)
 800175a:	791b      	ldrb	r3, [r3, #4]
 800175c:	461d      	mov	r5, r3
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001760:	795b      	ldrb	r3, [r3, #5]
 8001762:	461e      	mov	r6, r3
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MOD_ReceiveMessages+0x184>)
 8001766:	799b      	ldrb	r3, [r3, #6]
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MOD_ReceiveMessages+0x184>)
 800176c:	79db      	ldrb	r3, [r3, #7]
 800176e:	9307      	str	r3, [sp, #28]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	9306      	str	r3, [sp, #24]
 8001774:	9605      	str	r6, [sp, #20]
 8001776:	9504      	str	r5, [sp, #16]
 8001778:	9403      	str	r4, [sp, #12]
 800177a:	9002      	str	r0, [sp, #8]
 800177c:	9101      	str	r1, [sp, #4]
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	4673      	mov	r3, lr
 8001782:	4662      	mov	r2, ip
 8001784:	4912      	ldr	r1, [pc, #72]	; (80017d0 <MOD_ReceiveMessages+0x198>)
 8001786:	4811      	ldr	r0, [pc, #68]	; (80017cc <MOD_ReceiveMessages+0x194>)
 8001788:	f00a fb20 	bl	800bdcc <siprintf>
 800178c:	480f      	ldr	r0, [pc, #60]	; (80017cc <MOD_ReceiveMessages+0x194>)
 800178e:	f003 fc5f 	bl	8005050 <serialOut>
        break;
 8001792:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MOD_RX_FIFO, &rxFlags);
 8001794:	4a08      	ldr	r2, [pc, #32]	; (80017b8 <MOD_ReceiveMessages+0x180>)
 8001796:	2101      	movs	r1, #1
 8001798:	2001      	movs	r0, #1
 800179a:	f002 fb55 	bl	8003e48 <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MOD_ReceiveMessages+0x180>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f47f af4f 	bne.w	800164a <MOD_ReceiveMessages+0x12>
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000100 	.word	0x20000100
 80017bc:	20000110 	.word	0x20000110
 80017c0:	20000104 	.word	0x20000104
 80017c4:	20000008 	.word	0x20000008
 80017c8:	0800d46c 	.word	0x0800d46c
 80017cc:	2000ce88 	.word	0x2000ce88
 80017d0:	0800d4d0 	.word	0x0800d4d0

080017d4 <MOD_TransmitMessageQueue>:
/***************************************************************************************************************
*     M O D _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 80017de:	2332      	movs	r3, #50	; 0x32
 80017e0:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MOD_TX_FIFO, &txFlags);
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	4a1f      	ldr	r2, [pc, #124]	; (8001864 <MOD_TransmitMessageQueue+0x90>)
 80017e6:	2102      	movs	r1, #2
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 fafa 	bl	8003de2 <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d115      	bne.n	8001820 <MOD_TransmitMessageQueue+0x4c>
        Nop();
 80017f4:	bf00      	nop
        Nop();
 80017f6:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 80017f8:	79f8      	ldrb	r0, [r7, #7]
 80017fa:	4b1b      	ldr	r3, [pc, #108]	; (8001868 <MOD_TransmitMessageQueue+0x94>)
 80017fc:	4a1b      	ldr	r2, [pc, #108]	; (800186c <MOD_TransmitMessageQueue+0x98>)
 80017fe:	491c      	ldr	r1, [pc, #112]	; (8001870 <MOD_TransmitMessageQueue+0x9c>)
 8001800:	f002 fba9 	bl	8003f56 <DRV_CANFDSPI_ErrorCountStateGet>
        if(debugLevel & ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO FULL!"); serialOut(tempBuffer);}
 8001804:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <MOD_TransmitMessageQueue+0xa0>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b00      	cmp	r3, #0
 800180e:	d025      	beq.n	800185c <MOD_TransmitMessageQueue+0x88>
 8001810:	4919      	ldr	r1, [pc, #100]	; (8001878 <MOD_TransmitMessageQueue+0xa4>)
 8001812:	481a      	ldr	r0, [pc, #104]	; (800187c <MOD_TransmitMessageQueue+0xa8>)
 8001814:	f00a fada 	bl	800bdcc <siprintf>
 8001818:	4818      	ldr	r0, [pc, #96]	; (800187c <MOD_TransmitMessageQueue+0xa8>)
 800181a:	f003 fc19 	bl	8005050 <serialOut>
        return;
 800181e:	e01d      	b.n	800185c <MOD_TransmitMessageQueue+0x88>
      }
      attempts--;
 8001820:	7bfb      	ldrb	r3, [r7, #15]
 8001822:	3b01      	subs	r3, #1
 8001824:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <MOD_TransmitMessageQueue+0x90>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0d7      	beq.n	80017e2 <MOD_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <MOD_TransmitMessageQueue+0xac>)
 8001834:	791b      	ldrb	r3, [r3, #4]
 8001836:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fb97 	bl	8004f70 <DRV_CANFDSPI_DlcToDataBytes>
 8001842:	4603      	mov	r3, r0
 8001844:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MOD_TX_FIFO, &txObj, txd, n, true);
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	79f8      	ldrb	r0, [r7, #7]
 800184a:	2201      	movs	r2, #1
 800184c:	9201      	str	r2, [sp, #4]
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <MOD_TransmitMessageQueue+0xb0>)
 8001852:	4a0b      	ldr	r2, [pc, #44]	; (8001880 <MOD_TransmitMessageQueue+0xac>)
 8001854:	2102      	movs	r1, #2
 8001856:	f001 ff3f 	bl	80036d8 <DRV_CANFDSPI_TransmitChannelLoad>
 800185a:	e000      	b.n	800185e <MOD_TransmitMessageQueue+0x8a>
        return;
 800185c:	bf00      	nop
}
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200000a4 	.word	0x200000a4
 8001868:	20000153 	.word	0x20000153
 800186c:	20000152 	.word	0x20000152
 8001870:	20000151 	.word	0x20000151
 8001874:	20000008 	.word	0x20000008
 8001878:	0800d53c 	.word	0x0800d53c
 800187c:	2000ce88 	.word	0x2000ce88
 8001880:	200000a8 	.word	0x200000a8
 8001884:	200000b4 	.word	0x200000b4

08001888 <MOD_RegisterModule>:

/***************************************************************************************************************
*     M O D _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_RegisterModule(void){
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b08b      	sub	sp, #44	; 0x2c
 800188c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,8);
 8001892:	4aa3      	ldr	r2, [pc, #652]	; (8001b20 <MOD_RegisterModule+0x298>)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189c:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MC RX 0x500 Announcement: FW=%02x, HW=%02x, MFG=%02x, PN=%02x, ID=%08x",announcement.moduleFw, announcement.moduleHw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 80018a0:	4ba0      	ldr	r3, [pc, #640]	; (8001b24 <MOD_RegisterModule+0x29c>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d012      	beq.n	80018d2 <MOD_RegisterModule+0x4a>
 80018ac:	7b3b      	ldrb	r3, [r7, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	7b7b      	ldrb	r3, [r7, #13]
 80018b2:	461c      	mov	r4, r3
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	7bfa      	ldrb	r2, [r7, #15]
 80018b8:	6939      	ldr	r1, [r7, #16]
 80018ba:	9102      	str	r1, [sp, #8]
 80018bc:	9201      	str	r2, [sp, #4]
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	4623      	mov	r3, r4
 80018c2:	4602      	mov	r2, r0
 80018c4:	4998      	ldr	r1, [pc, #608]	; (8001b28 <MOD_RegisterModule+0x2a0>)
 80018c6:	4899      	ldr	r0, [pc, #612]	; (8001b2c <MOD_RegisterModule+0x2a4>)
 80018c8:	f00a fa80 	bl	800bdcc <siprintf>
 80018cc:	4897      	ldr	r0, [pc, #604]	; (8001b2c <MOD_RegisterModule+0x2a4>)
 80018ce:	f003 fbbf 	bl	8005050 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 80018d2:	4b97      	ldr	r3, [pc, #604]	; (8001b30 <MOD_RegisterModule+0x2a8>)
 80018d4:	7c1b      	ldrb	r3, [r3, #16]
 80018d6:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80018d8:	2300      	movs	r3, #0
 80018da:	75bb      	strb	r3, [r7, #22]
 80018dc:	e027      	b.n	800192e <MOD_RegisterModule+0xa6>
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId))
 80018de:	7bba      	ldrb	r2, [r7, #14]
 80018e0:	7dbb      	ldrb	r3, [r7, #22]
 80018e2:	4994      	ldr	r1, [pc, #592]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 80018e4:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80018e8:	fb00 f303 	mul.w	r3, r0, r3
 80018ec:	440b      	add	r3, r1
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d119      	bne.n	8001928 <MOD_RegisterModule+0xa0>
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	7dbb      	ldrb	r3, [r7, #22]
 80018f8:	498e      	ldr	r1, [pc, #568]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 80018fa:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80018fe:	fb00 f303 	mul.w	r3, r0, r3
 8001902:	440b      	add	r3, r1
 8001904:	3301      	adds	r3, #1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d10d      	bne.n	8001928 <MOD_RegisterModule+0xa0>
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	7dbb      	ldrb	r3, [r7, #22]
 8001910:	4988      	ldr	r1, [pc, #544]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001912:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001916:	fb00 f303 	mul.w	r3, r0, r3
 800191a:	440b      	add	r3, r1
 800191c:	3304      	adds	r3, #4
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d101      	bne.n	8001928 <MOD_RegisterModule+0xa0>
      moduleIndex = index; // module is already registered, save the index
 8001924:	7dbb      	ldrb	r3, [r7, #22]
 8001926:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8001928:	7dbb      	ldrb	r3, [r7, #22]
 800192a:	3301      	adds	r3, #1
 800192c:	75bb      	strb	r3, [r7, #22]
 800192e:	4b80      	ldr	r3, [pc, #512]	; (8001b30 <MOD_RegisterModule+0x2a8>)
 8001930:	7c1b      	ldrb	r3, [r3, #16]
 8001932:	7dba      	ldrb	r2, [r7, #22]
 8001934:	429a      	cmp	r2, r3
 8001936:	d3d2      	bcc.n	80018de <MOD_RegisterModule+0x56>
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 8001938:	4b7d      	ldr	r3, [pc, #500]	; (8001b30 <MOD_RegisterModule+0x2a8>)
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	7dfa      	ldrb	r2, [r7, #23]
 800193e:	429a      	cmp	r2, r3
 8001940:	d168      	bne.n	8001a14 <MOD_RegisterModule+0x18c>
    module[moduleIndex].fwVersion = announcement.moduleFw;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	7b38      	ldrb	r0, [r7, #12]
 8001946:	4a7b      	ldr	r2, [pc, #492]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001948:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800194c:	fb01 f303 	mul.w	r3, r1, r3
 8001950:	4413      	add	r3, r2
 8001952:	330a      	adds	r3, #10
 8001954:	4602      	mov	r2, r0
 8001956:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].hwVersion = announcement.moduleHw;
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	7b78      	ldrb	r0, [r7, #13]
 800195c:	4a75      	ldr	r2, [pc, #468]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 800195e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	3309      	adds	r3, #9
 800196a:	4602      	mov	r2, r0
 800196c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].partId =  announcement.modulePartId;
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	7bf8      	ldrb	r0, [r7, #15]
 8001972:	4a70      	ldr	r2, [pc, #448]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001974:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001978:	fb01 f303 	mul.w	r3, r1, r3
 800197c:	4413      	add	r3, r2
 800197e:	3301      	adds	r3, #1
 8001980:	4602      	mov	r2, r0
 8001982:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId = announcement.moduleMfgId;
 8001984:	7dfb      	ldrb	r3, [r7, #23]
 8001986:	7bb8      	ldrb	r0, [r7, #14]
 8001988:	4a6a      	ldr	r2, [pc, #424]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 800198a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800198e:	fb01 f303 	mul.w	r3, r1, r3
 8001992:	4413      	add	r3, r2
 8001994:	4602      	mov	r2, r0
 8001996:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId = announcement.moduleUniqueId;
 8001998:	7dfb      	ldrb	r3, [r7, #23]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4965      	ldr	r1, [pc, #404]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 800199e:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80019a2:	fb00 f303 	mul.w	r3, r0, r3
 80019a6:	440b      	add	r3, r1
 80019a8:	3304      	adds	r3, #4
 80019aa:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks = 0;
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	4a61      	ldr	r2, [pc, #388]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 80019b0:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	4413      	add	r3, r2
 80019ba:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80019be:	2200      	movs	r2, #0
 80019c0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80019c2:	7dfb      	ldrb	r3, [r7, #23]
 80019c4:	4a5c      	ldr	r2, [pc, #368]	; (8001b38 <MOD_RegisterModule+0x2b0>)
 80019c6:	6812      	ldr	r2, [r2, #0]
 80019c8:	495a      	ldr	r1, [pc, #360]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 80019ca:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80019ce:	fb00 f303 	mul.w	r3, r0, r3
 80019d2:	440b      	add	r3, r1
 80019d4:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 80019d8:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusRequested = true;
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	4a55      	ldr	r2, [pc, #340]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 80019de:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80019e2:	fb01 f303 	mul.w	r3, r1, r3
 80019e6:	4413      	add	r3, r2
 80019e8:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <MOD_RegisterModule+0x2a8>)
 80019f2:	7c1b      	ldrb	r3, [r3, #16]
 80019f4:	3301      	adds	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <MOD_RegisterModule+0x2a8>)
 80019fa:	741a      	strb	r2, [r3, #16]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <MOD_RegisterModule+0x2a8>)
 8001a00:	7c10      	ldrb	r0, [r2, #16]
 8001a02:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001a04:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3308      	adds	r3, #8
 8001a10:	4602      	mov	r2, r0
 8001a12:	701a      	strb	r2, [r3, #0]
  }
  // send the details back to the module
  registration.moduleId = module[moduleIndex].moduleId;
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	4a47      	ldr	r2, [pc, #284]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001a18:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a1c:	fb01 f303 	mul.w	r3, r1, r3
 8001a20:	4413      	add	r3, r2
 8001a22:	3308      	adds	r3, #8
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	713b      	strb	r3, [r7, #4]
  registration.controllerId = CONTROLLER_ID;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	717b      	strb	r3, [r7, #5]
  registration.modulePartId = module[moduleIndex].partId;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	4a41      	ldr	r2, [pc, #260]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001a30:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId = module[moduleIndex].mfgId;
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	4a3c      	ldr	r2, [pc, #240]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001a44:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	4a37      	ldr	r2, [pc, #220]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001a56:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a5a:	fb01 f303 	mul.w	r3, r1, r3
 8001a5e:	4413      	add	r3, r2
 8001a60:	3304      	adds	r3, #4
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, 8);
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <MOD_RegisterModule+0x2b8>)
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001a82:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001a88:	8813      	ldrh	r3, [r2, #0]
 8001a8a:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8001a8e:	f361 030a 	bfi	r3, r1, #0, #11
 8001a92:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	4a27      	ldr	r2, [pc, #156]	; (8001b34 <MOD_RegisterModule+0x2ac>)
 8001a98:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001a9c:	fb01 f303 	mul.w	r3, r1, r3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	3308      	adds	r3, #8
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001aac:	4923      	ldr	r1, [pc, #140]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001aae:	680b      	ldr	r3, [r1, #0]
 8001ab0:	f362 23dc 	bfi	r3, r2, #11, #18
 8001ab4:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001ab6:	4a21      	ldr	r2, [pc, #132]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001ab8:	7913      	ldrb	r3, [r2, #4]
 8001aba:	f36f 1386 	bfc	r3, #6, #1
 8001abe:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001ac2:	7913      	ldrb	r3, [r2, #4]
 8001ac4:	2108      	movs	r1, #8
 8001ac6:	f361 0303 	bfi	r3, r1, #0, #4
 8001aca:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001ace:	7913      	ldrb	r3, [r2, #4]
 8001ad0:	f36f 13c7 	bfc	r3, #7, #1
 8001ad4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001ad6:	4a19      	ldr	r2, [pc, #100]	; (8001b3c <MOD_RegisterModule+0x2b4>)
 8001ad8:	7913      	ldrb	r3, [r2, #4]
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MOD_RegisterModule+0x29c>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d012      	beq.n	8001b12 <MOD_RegisterModule+0x28a>
 8001aec:	793b      	ldrb	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	797b      	ldrb	r3, [r7, #5]
 8001af2:	461c      	mov	r4, r3
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	79fa      	ldrb	r2, [r7, #7]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	9102      	str	r1, [sp, #8]
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4623      	mov	r3, r4
 8001b02:	4602      	mov	r2, r0
 8001b04:	490f      	ldr	r1, [pc, #60]	; (8001b44 <MOD_RegisterModule+0x2bc>)
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <MOD_RegisterModule+0x2a4>)
 8001b08:	f00a f960 	bl	800bdcc <siprintf>
 8001b0c:	4807      	ldr	r0, [pc, #28]	; (8001b2c <MOD_RegisterModule+0x2a4>)
 8001b0e:	f003 fa9f 	bl	8005050 <serialOut>
  MOD_TransmitMessageQueue(CAN2);                     // Send it
 8001b12:	2001      	movs	r0, #1
 8001b14:	f7ff fe5e 	bl	80017d4 <MOD_TransmitMessageQueue>
}
 8001b18:	bf00      	nop
 8001b1a:	371c      	adds	r7, #28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}
 8001b20:	20000110 	.word	0x20000110
 8001b24:	20000008 	.word	0x20000008
 8001b28:	0800d558 	.word	0x0800d558
 8001b2c:	2000ce88 	.word	0x2000ce88
 8001b30:	2000c754 	.word	0x2000c754
 8001b34:	20000154 	.word	0x20000154
 8001b38:	2000cef0 	.word	0x2000cef0
 8001b3c:	200000a8 	.word	0x200000a8
 8001b40:	200000b4 	.word	0x200000b4
 8001b44:	0800d5a0 	.word	0x0800d5a0

08001b48 <MOD_DeRegisterAllModules>:

/***************************************************************************************************************
*     M O D _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_DeRegisterAllModules(void){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = CONTROLLER_ID;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8001b52:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	793a      	ldrb	r2, [r7, #4]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, 1);
 8001b66:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <MOD_DeRegisterAllModules+0x90>)
 8001b68:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b6c:	8813      	ldrh	r3, [r2, #0]
 8001b6e:	f240 511e 	movw	r1, #1310	; 0x51e
 8001b72:	f361 030a 	bfi	r3, r1, #0, #11
 8001b76:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 8001b78:	4a16      	ldr	r2, [pc, #88]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b7a:	6813      	ldr	r3, [r2, #0]
 8001b7c:	f36f 23dc 	bfc	r3, #11, #18
 8001b80:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001b82:	4a14      	ldr	r2, [pc, #80]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b84:	7913      	ldrb	r3, [r2, #4]
 8001b86:	f36f 1386 	bfc	r3, #6, #1
 8001b8a:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8001b8c:	4a11      	ldr	r2, [pc, #68]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b8e:	7913      	ldrb	r3, [r2, #4]
 8001b90:	2101      	movs	r1, #1
 8001b92:	f361 0303 	bfi	r3, r1, #0, #4
 8001b96:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001b98:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001b9a:	7913      	ldrb	r3, [r2, #4]
 8001b9c:	f36f 13c7 	bfc	r3, #7, #1
 8001ba0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001ba2:	4a0c      	ldr	r2, [pc, #48]	; (8001bd4 <MOD_DeRegisterAllModules+0x8c>)
 8001ba4:	7913      	ldrb	r3, [r2, #4]
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 8001bac:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MOD_DeRegisterAllModules+0x94>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d006      	beq.n	8001bc6 <MOD_DeRegisterAllModules+0x7e>
 8001bb8:	4909      	ldr	r1, [pc, #36]	; (8001be0 <MOD_DeRegisterAllModules+0x98>)
 8001bba:	480a      	ldr	r0, [pc, #40]	; (8001be4 <MOD_DeRegisterAllModules+0x9c>)
 8001bbc:	f00a f906 	bl	800bdcc <siprintf>
 8001bc0:	4808      	ldr	r0, [pc, #32]	; (8001be4 <MOD_DeRegisterAllModules+0x9c>)
 8001bc2:	f003 fa45 	bl	8005050 <serialOut>
    MOD_TransmitMessageQueue(CAN2);                     // Send it
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f7ff fe04 	bl	80017d4 <MOD_TransmitMessageQueue>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200000a8 	.word	0x200000a8
 8001bd8:	200000b4 	.word	0x200000b4
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	0800d5e8 	.word	0x0800d5e8
 8001be4:	2000ce88 	.word	0x2000ce88

08001be8 <MOD_IsolateAllModules>:

/***************************************************************************************************************
*     M O D _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_IsolateAllModules(void){
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00a f8a3 	bl	800bd40 <memset>

  // configure the packet
  isolate.controllerId = CONTROLLER_ID;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001c04:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	793a      	ldrb	r2, [r7, #4]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, 1);
 8001c12:	4b1c      	ldr	r3, [pc, #112]	; (8001c84 <MOD_IsolateAllModules+0x9c>)
 8001c14:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8001c16:	4a1a      	ldr	r2, [pc, #104]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c18:	8813      	ldrh	r3, [r2, #0]
 8001c1a:	f240 511f 	movw	r1, #1311	; 0x51f
 8001c1e:	f361 030a 	bfi	r3, r1, #0, #11
 8001c22:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8001c24:	4a16      	ldr	r2, [pc, #88]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c26:	6813      	ldr	r3, [r2, #0]
 8001c28:	f36f 23dc 	bfc	r3, #11, #18
 8001c2c:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001c2e:	4a14      	ldr	r2, [pc, #80]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c30:	7913      	ldrb	r3, [r2, #4]
 8001c32:	f36f 1386 	bfc	r3, #6, #1
 8001c36:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8001c38:	4a11      	ldr	r2, [pc, #68]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c3a:	7913      	ldrb	r3, [r2, #4]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	f361 0303 	bfi	r3, r1, #0, #4
 8001c42:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001c44:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c46:	7913      	ldrb	r3, [r2, #4]
 8001c48:	f36f 13c7 	bfc	r3, #7, #1
 8001c4c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	; (8001c80 <MOD_IsolateAllModules+0x98>)
 8001c50:	7913      	ldrb	r3, [r2, #4]
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MOD_IsolateAllModules+0xa0>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d006      	beq.n	8001c72 <MOD_IsolateAllModules+0x8a>
 8001c64:	4909      	ldr	r1, [pc, #36]	; (8001c8c <MOD_IsolateAllModules+0xa4>)
 8001c66:	480a      	ldr	r0, [pc, #40]	; (8001c90 <MOD_IsolateAllModules+0xa8>)
 8001c68:	f00a f8b0 	bl	800bdcc <siprintf>
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <MOD_IsolateAllModules+0xa8>)
 8001c6e:	f003 f9ef 	bl	8005050 <serialOut>
  MOD_TransmitMessageQueue(CAN2);                     // Send it
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fdae 	bl	80017d4 <MOD_TransmitMessageQueue>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200000a8 	.word	0x200000a8
 8001c84:	200000b4 	.word	0x200000b4
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	0800d60c 	.word	0x0800d60c
 8001c90:	2000ce88 	.word	0x2000ce88

08001c94 <MOD_RequestModuleStatus>:

/***************************************************************************************************************
*     M O D _ R e q u e s t M o d u l e S t a t u s                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_RequestModuleStatus(uint8_t moduleId){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8001c9e:	4b3a      	ldr	r3, [pc, #232]	; (8001d88 <MOD_RequestModuleStatus+0xf4>)
 8001ca0:	7c1b      	ldrb	r3, [r3, #16]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	73bb      	strb	r3, [r7, #14]
 8001ca8:	e010      	b.n	8001ccc <MOD_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8001caa:	7bbb      	ldrb	r3, [r7, #14]
 8001cac:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <MOD_RequestModuleStatus+0xf8>)
 8001cae:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001cb2:	fb01 f303 	mul.w	r3, r1, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3308      	adds	r3, #8
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d101      	bne.n	8001cc6 <MOD_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 8001cc2:	7bbb      	ldrb	r3, [r7, #14]
 8001cc4:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001cc6:	7bbb      	ldrb	r3, [r7, #14]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	73bb      	strb	r3, [r7, #14]
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <MOD_RequestModuleStatus+0xf4>)
 8001cce:	7c1b      	ldrb	r3, [r3, #16]
 8001cd0:	7bba      	ldrb	r2, [r7, #14]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d3e9      	bcc.n	8001caa <MOD_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8001cd6:	4b2c      	ldr	r3, [pc, #176]	; (8001d88 <MOD_RequestModuleStatus+0xf4>)
 8001cd8:	7c1b      	ldrb	r3, [r3, #16]
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d04e      	beq.n	8001d7e <MOD_RequestModuleStatus+0xea>
    // TO DO Handle status from an unregistered module
  }else{

    // set request flag
    module[moduleIndex].statusRequested = true;
 8001ce0:	7bfb      	ldrb	r3, [r7, #15]
 8001ce2:	4a2a      	ldr	r2, [pc, #168]	; (8001d8c <MOD_RequestModuleStatus+0xf8>)
 8001ce4:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001ce8:	fb01 f303 	mul.w	r3, r1, r3
 8001cec:	4413      	add	r3, r2
 8001cee:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	701a      	strb	r2, [r3, #0]

    // request cell detail packet for cell 0
    statusRequest.moduleId = moduleId;
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	733b      	strb	r3, [r7, #12]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 8001cfa:	4b25      	ldr	r3, [pc, #148]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8001d00:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8001d06:	4b22      	ldr	r3, [pc, #136]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
 8001d0c:	7b3a      	ldrb	r2, [r7, #12]

    memcpy(txd, &statusRequest, 1);
 8001d0e:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <MOD_RequestModuleStatus+0x100>)
 8001d10:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d14:	8813      	ldrh	r3, [r2, #0]
 8001d16:	f240 5112 	movw	r1, #1298	; 0x512
 8001d1a:	f361 030a 	bfi	r3, r1, #0, #11
 8001d1e:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8001d20:	79fa      	ldrb	r2, [r7, #7]
 8001d22:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8001d26:	491a      	ldr	r1, [pc, #104]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d28:	680b      	ldr	r3, [r1, #0]
 8001d2a:	f362 23dc 	bfi	r3, r2, #11, #18
 8001d2e:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d32:	7913      	ldrb	r3, [r2, #4]
 8001d34:	f36f 1386 	bfc	r3, #6, #1
 8001d38:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8001d3a:	4a15      	ldr	r2, [pc, #84]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d3c:	7913      	ldrb	r3, [r2, #4]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	f361 0303 	bfi	r3, r1, #0, #4
 8001d44:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8001d46:	4a12      	ldr	r2, [pc, #72]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d48:	7913      	ldrb	r3, [r2, #4]
 8001d4a:	f36f 13c7 	bfc	r3, #7, #1
 8001d4e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8001d50:	4a0f      	ldr	r2, [pc, #60]	; (8001d90 <MOD_RequestModuleStatus+0xfc>)
 8001d52:	7913      	ldrb	r3, [r2, #4]
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MOD_RequestModuleStatus+0x104>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <MOD_RequestModuleStatus+0xe4>
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	490c      	ldr	r1, [pc, #48]	; (8001d9c <MOD_RequestModuleStatus+0x108>)
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <MOD_RequestModuleStatus+0x10c>)
 8001d6e:	f00a f82d 	bl	800bdcc <siprintf>
 8001d72:	480b      	ldr	r0, [pc, #44]	; (8001da0 <MOD_RequestModuleStatus+0x10c>)
 8001d74:	f003 f96c 	bl	8005050 <serialOut>
    MOD_TransmitMessageQueue(CAN2);                    // Send it
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff fd2b 	bl	80017d4 <MOD_TransmitMessageQueue>
  }
}
 8001d7e:	bf00      	nop
 8001d80:	3710      	adds	r7, #16
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000c754 	.word	0x2000c754
 8001d8c:	20000154 	.word	0x20000154
 8001d90:	200000a8 	.word	0x200000a8
 8001d94:	200000b4 	.word	0x200000b4
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	0800d62c 	.word	0x0800d62c
 8001da0:	2000ce88 	.word	0x2000ce88

08001da4 <MOD_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M O D _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MOD_FindMaxVoltageModule(void){
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0

  uint8_t index;
  uint16_t maxVoltage = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 8001dae:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <MOD_FindMaxVoltageModule+0x94>)
 8001db0:	7c1b      	ldrb	r3, [r3, #16]
 8001db2:	3301      	adds	r3, #1
 8001db4:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8001db6:	2300      	movs	r3, #0
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	e031      	b.n	8001e20 <MOD_FindMaxVoltageModule+0x7c>
    if(module[index].mmv > maxVoltage && module[index].fault == false){
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	; (8001e3c <MOD_FindMaxVoltageModule+0x98>)
 8001dc0:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	330c      	adds	r3, #12
 8001dcc:	881b      	ldrh	r3, [r3, #0]
 8001dce:	88ba      	ldrh	r2, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d222      	bcs.n	8001e1a <MOD_FindMaxVoltageModule+0x76>
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <MOD_FindMaxVoltageModule+0x98>)
 8001dd8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	4413      	add	r3, r2
 8001de2:	f203 632d 	addw	r3, r3, #1581	; 0x62d
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f083 0301 	eor.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d013      	beq.n	8001e1a <MOD_FindMaxVoltageModule+0x76>
      maxVoltage = module[index].mmv;
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <MOD_FindMaxVoltageModule+0x98>)
 8001df6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	330c      	adds	r3, #12
 8001e02:	881b      	ldrh	r3, [r3, #0]
 8001e04:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	4a0c      	ldr	r2, [pc, #48]	; (8001e3c <MOD_FindMaxVoltageModule+0x98>)
 8001e0a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001e0e:	fb01 f303 	mul.w	r3, r1, r3
 8001e12:	4413      	add	r3, r2
 8001e14:	3308      	adds	r3, #8
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	70fb      	strb	r3, [r7, #3]
  for(index = 0; index < pack.moduleCount; index++){
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <MOD_FindMaxVoltageModule+0x94>)
 8001e22:	7c1b      	ldrb	r3, [r3, #16]
 8001e24:	79fa      	ldrb	r2, [r7, #7]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3c8      	bcc.n	8001dbc <MOD_FindMaxVoltageModule+0x18>
    }
  }
  return moduleId;
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	2000c754 	.word	0x2000c754
 8001e3c:	20000154 	.word	0x20000154

08001e40 <MOD_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessModuleStatus1(void){
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	b08b      	sub	sp, #44	; 0x2c
 8001e44:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_1 status1;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status1,0,12);
 8001e46:	1d3b      	adds	r3, r7, #4
 8001e48:	220c      	movs	r2, #12
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f009 ff77 	bl	800bd40 <memset>
  memcpy(&status1, rxd, 12);
 8001e52:	1d3b      	adds	r3, r7, #4
 8001e54:	220c      	movs	r2, #12
 8001e56:	4981      	ldr	r1, [pc, #516]	; (800205c <MOD_ProcessModuleStatus1+0x21c>)
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f009 ff63 	bl	800bd24 <memcpy>

  //find the module index
  moduleIndex = pack.moduleCount;
 8001e5e:	4b80      	ldr	r3, [pc, #512]	; (8002060 <MOD_ProcessModuleStatus1+0x220>)
 8001e60:	7c1b      	ldrb	r3, [r3, #16]
 8001e62:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001e64:	2300      	movs	r3, #0
 8001e66:	73bb      	strb	r3, [r7, #14]
 8001e68:	e015      	b.n	8001e96 <MOD_ProcessModuleStatus1+0x56>
    if(rxObj.bF.id.EID == module[index].moduleId)
 8001e6a:	4b7e      	ldr	r3, [pc, #504]	; (8002064 <MOD_ProcessModuleStatus1+0x224>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	497c      	ldr	r1, [pc, #496]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001e76:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001e7a:	fb00 f303 	mul.w	r3, r0, r3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3308      	adds	r3, #8
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d101      	bne.n	8001e90 <MOD_ProcessModuleStatus1+0x50>
      moduleIndex = index; // found it - save the index
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8001e90:	7bbb      	ldrb	r3, [r7, #14]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73bb      	strb	r3, [r7, #14]
 8001e96:	4b72      	ldr	r3, [pc, #456]	; (8002060 <MOD_ProcessModuleStatus1+0x220>)
 8001e98:	7c1b      	ldrb	r3, [r3, #16]
 8001e9a:	7bba      	ldrb	r2, [r7, #14]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3e4      	bcc.n	8001e6a <MOD_ProcessModuleStatus1+0x2a>
    }
  if (moduleIndex == pack.moduleCount){
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <MOD_ProcessModuleStatus1+0x220>)
 8001ea2:	7c1b      	ldrb	r3, [r3, #16]
 8001ea4:	7bfa      	ldrb	r2, [r7, #15]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	f000 80d4 	beq.w	8002054 <MOD_ProcessModuleStatus1+0x214>
    // TO DO Handle status from an unregistered module
  }else{
    //clear status request flag
    module[moduleIndex].statusRequested = false;
 8001eac:	7bfb      	ldrb	r3, [r7, #15]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001eb0:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001eb4:	fb01 f303 	mul.w	r3, r1, r3
 8001eb8:	4413      	add	r3, r2
 8001eba:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]

    // save the data
    module[moduleIndex].mmc                   = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	8938      	ldrh	r0, [r7, #8]
 8001ec6:	4a68      	ldr	r2, [pc, #416]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001ec8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	330e      	adds	r3, #14
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv                   = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8001ed8:	7bfb      	ldrb	r3, [r7, #15]
 8001eda:	8978      	ldrh	r0, [r7, #10]
 8001edc:	4a62      	ldr	r2, [pc, #392]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001ede:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001ee2:	fb01 f303 	mul.w	r3, r1, r3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	330c      	adds	r3, #12
 8001eea:	4602      	mov	r2, r0
 8001eec:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc                   = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	7978      	ldrb	r0, [r7, #5]
 8001ef2:	4a5d      	ldr	r2, [pc, #372]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001ef4:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	4413      	add	r3, r2
 8001efe:	3320      	adds	r3, #32
 8001f00:	4602      	mov	r2, r0
 8001f02:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh                   = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	79b8      	ldrb	r0, [r7, #6]
 8001f08:	4a57      	ldr	r2, [pc, #348]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001f0a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	3321      	adds	r3, #33	; 0x21
 8001f16:	4602      	mov	r2, r0
 8001f18:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].current_state         = status1.moduleState;
 8001f1a:	793b      	ldrb	r3, [r7, #4]
 8001f1c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
 8001f24:	4610      	mov	r0, r2
 8001f26:	4a50      	ldr	r2, [pc, #320]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001f28:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	331d      	adds	r3, #29
 8001f34:	4602      	mov	r2, r0
 8001f36:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status                = status1.moduleStatus;
 8001f38:	793b      	ldrb	r3, [r7, #4]
 8001f3a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	4610      	mov	r0, r2
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001f46:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001f4a:	fb01 f303 	mul.w	r3, r1, r3
 8001f4e:	4413      	add	r3, r2
 8001f50:	331c      	adds	r3, #28
 8001f52:	4602      	mov	r2, r0
 8001f54:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount             = status1.cellCount;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
 8001f58:	79f8      	ldrb	r0, [r7, #7]
 8001f5a:	4a43      	ldr	r2, [pc, #268]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001f5c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001f60:	fb01 f303 	mul.w	r3, r1, r3
 8001f64:	4413      	add	r3, r2
 8001f66:	3322      	adds	r3, #34	; 0x22
 8001f68:	4602      	mov	r2, r0
 8001f6a:	701a      	strb	r2, [r3, #0]

    // update last contact time
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <MOD_ProcessModuleStatus1+0x22c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
 8001f74:	b290      	uxth	r0, r2
 8001f76:	4a3c      	ldr	r2, [pc, #240]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001f78:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8001f86:	4602      	mov	r2, r0
 8001f88:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	4a38      	ldr	r2, [pc, #224]	; (8002070 <MOD_ProcessModuleStatus1+0x230>)
 8001f8e:	6812      	ldr	r2, [r2, #0]
 8001f90:	4935      	ldr	r1, [pc, #212]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001f92:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001f96:	fb00 f303 	mul.w	r3, r0, r3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8001fa0:	601a      	str	r2, [r3, #0]

   if(module[moduleIndex].current_state ==  module[moduleIndex].command.commandedState){
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	4a30      	ldr	r2, [pc, #192]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001fa6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001faa:	fb01 f303 	mul.w	r3, r1, r3
 8001fae:	4413      	add	r3, r2
 8001fb0:	331d      	adds	r3, #29
 8001fb2:	781a      	ldrb	r2, [r3, #0]
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	492c      	ldr	r1, [pc, #176]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001fb8:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8001fbc:	fb00 f303 	mul.w	r3, r0, r3
 8001fc0:	440b      	add	r3, r1
 8001fc2:	331e      	adds	r3, #30
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d109      	bne.n	8001fde <MOD_ProcessModuleStatus1+0x19e>
     // update the command status if the current state is equal to the commmanded state
     module[moduleIndex].command.commandStatus = commandActive;
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001fce:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	331f      	adds	r3, #31
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
   }


    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, STS=%d, CNT=%d, MMV=%d, MMC=%d, SOC=%d SOH=%d",
 8001fde:	4b25      	ldr	r3, [pc, #148]	; (8002074 <MOD_ProcessModuleStatus1+0x234>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d034      	beq.n	8002054 <MOD_ProcessModuleStatus1+0x214>
        rxObj.bF.id.EID, module[moduleIndex].current_state,module[moduleIndex].status, module[moduleIndex].cellCount, status1.moduleMmv,
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <MOD_ProcessModuleStatus1+0x224>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, STS=%d, CNT=%d, MMV=%d, MMC=%d, SOC=%d SOH=%d",
 8001ff2:	461e      	mov	r6, r3
        rxObj.bF.id.EID, module[moduleIndex].current_state,module[moduleIndex].status, module[moduleIndex].cellCount, status1.moduleMmv,
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8001ff8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	331d      	adds	r3, #29
 8002004:	781b      	ldrb	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, STS=%d, CNT=%d, MMV=%d, MMC=%d, SOC=%d SOH=%d",
 8002006:	469c      	mov	ip, r3
        rxObj.bF.id.EID, module[moduleIndex].current_state,module[moduleIndex].status, module[moduleIndex].cellCount, status1.moduleMmv,
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	4a17      	ldr	r2, [pc, #92]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 800200c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	331c      	adds	r3, #28
 8002018:	781b      	ldrb	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, STS=%d, CNT=%d, MMV=%d, MMC=%d, SOC=%d SOH=%d",
 800201a:	4618      	mov	r0, r3
        rxObj.bF.id.EID, module[moduleIndex].current_state,module[moduleIndex].status, module[moduleIndex].cellCount, status1.moduleMmv,
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <MOD_ProcessModuleStatus1+0x228>)
 8002020:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002024:	fb01 f303 	mul.w	r3, r1, r3
 8002028:	4413      	add	r3, r2
 800202a:	3322      	adds	r3, #34	; 0x22
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	897a      	ldrh	r2, [r7, #10]
        status1.moduleMmc ,  status1.moduleSoc, status1.moduleSoh); serialOut(tempBuffer);}
 8002030:	8939      	ldrh	r1, [r7, #8]
 8002032:	797c      	ldrb	r4, [r7, #5]
 8002034:	79bd      	ldrb	r5, [r7, #6]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x502 Status #1: ID=%02x, STE=%02x, STS=%d, CNT=%d, MMV=%d, MMC=%d, SOC=%d SOH=%d",
 8002036:	9505      	str	r5, [sp, #20]
 8002038:	9404      	str	r4, [sp, #16]
 800203a:	9103      	str	r1, [sp, #12]
 800203c:	9202      	str	r2, [sp, #8]
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9000      	str	r0, [sp, #0]
 8002042:	4663      	mov	r3, ip
 8002044:	4632      	mov	r2, r6
 8002046:	490c      	ldr	r1, [pc, #48]	; (8002078 <MOD_ProcessModuleStatus1+0x238>)
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <MOD_ProcessModuleStatus1+0x23c>)
 800204a:	f009 febf 	bl	800bdcc <siprintf>
        status1.moduleMmc ,  status1.moduleSoc, status1.moduleSoh); serialOut(tempBuffer);}
 800204e:	480b      	ldr	r0, [pc, #44]	; (800207c <MOD_ProcessModuleStatus1+0x23c>)
 8002050:	f002 fffe 	bl	8005050 <serialOut>
  }
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800205c:	20000110 	.word	0x20000110
 8002060:	2000c754 	.word	0x2000c754
 8002064:	20000104 	.word	0x20000104
 8002068:	20000154 	.word	0x20000154
 800206c:	2000ca68 	.word	0x2000ca68
 8002070:	2000cef0 	.word	0x2000cef0
 8002074:	20000008 	.word	0x20000008
 8002078:	0800d650 	.word	0x0800d650
 800207c:	2000ce88 	.word	0x2000ce88

08002080 <MOD_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessModuleStatus2(void){
 8002080:	b5b0      	push	{r4, r5, r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af02      	add	r7, sp, #8
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,12);
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	220c      	movs	r2, #12
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f009 fe57 	bl	800bd40 <memset>
  memcpy(&status2, rxd, 12);
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	220c      	movs	r2, #12
 8002096:	4954      	ldr	r1, [pc, #336]	; (80021e8 <MOD_ProcessModuleStatus2+0x168>)
 8002098:	4618      	mov	r0, r3
 800209a:	f009 fe43 	bl	800bd24 <memcpy>

  //find the module index
  moduleIndex = pack.moduleCount;
 800209e:	4b53      	ldr	r3, [pc, #332]	; (80021ec <MOD_ProcessModuleStatus2+0x16c>)
 80020a0:	7c1b      	ldrb	r3, [r3, #16]
 80020a2:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	73bb      	strb	r3, [r7, #14]
 80020a8:	e015      	b.n	80020d6 <MOD_ProcessModuleStatus2+0x56>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 80020aa:	4b51      	ldr	r3, [pc, #324]	; (80021f0 <MOD_ProcessModuleStatus2+0x170>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 80020b2:	7bbb      	ldrb	r3, [r7, #14]
 80020b4:	494f      	ldr	r1, [pc, #316]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 80020b6:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80020ba:	fb00 f303 	mul.w	r3, r0, r3
 80020be:	440b      	add	r3, r1
 80020c0:	3308      	adds	r3, #8
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d101      	bne.n	80020d0 <MOD_ProcessModuleStatus2+0x50>
      moduleIndex = index; // found it - save the index
 80020cc:	7bbb      	ldrb	r3, [r7, #14]
 80020ce:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 80020d0:	7bbb      	ldrb	r3, [r7, #14]
 80020d2:	3301      	adds	r3, #1
 80020d4:	73bb      	strb	r3, [r7, #14]
 80020d6:	4b45      	ldr	r3, [pc, #276]	; (80021ec <MOD_ProcessModuleStatus2+0x16c>)
 80020d8:	7c1b      	ldrb	r3, [r3, #16]
 80020da:	7bba      	ldrb	r2, [r7, #14]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d3e4      	bcc.n	80020aa <MOD_ProcessModuleStatus2+0x2a>
    }
  if (moduleIndex == pack.moduleCount){
 80020e0:	4b42      	ldr	r3, [pc, #264]	; (80021ec <MOD_ProcessModuleStatus2+0x16c>)
 80020e2:	7c1b      	ldrb	r3, [r3, #16]
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d079      	beq.n	80021de <MOD_ProcessModuleStatus2+0x15e>
    // TO DO Handle status from an unregistered module
  }else{
    //clear status request flag
    module[moduleIndex].statusRequested = false;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	4a41      	ldr	r2, [pc, #260]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 80020ee:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80020f2:	fb01 f303 	mul.w	r3, r1, r3
 80020f6:	4413      	add	r3, r2
 80020f8:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]

    // save the data
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
 8002102:	8938      	ldrh	r0, [r7, #8]
 8002104:	4a3b      	ldr	r2, [pc, #236]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 8002106:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800210a:	fb01 f303 	mul.w	r3, r1, r3
 800210e:	4413      	add	r3, r2
 8002110:	331a      	adds	r3, #26
 8002112:	4602      	mov	r2, r0
 8002114:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	88f8      	ldrh	r0, [r7, #6]
 800211a:	4a36      	ldr	r2, [pc, #216]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 800211c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3316      	adds	r3, #22
 8002128:	4602      	mov	r2, r0
 800212a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	88b8      	ldrh	r0, [r7, #4]
 8002130:	4a30      	ldr	r2, [pc, #192]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 8002132:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002136:	fb01 f303 	mul.w	r3, r1, r3
 800213a:	4413      	add	r3, r2
 800213c:	3318      	adds	r3, #24
 800213e:	4602      	mov	r2, r0
 8002140:	801a      	strh	r2, [r3, #0]

    // update last contact time
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <MOD_ProcessModuleStatus2+0x178>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	b290      	uxth	r0, r2
 800214c:	4a29      	ldr	r2, [pc, #164]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 800214e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002152:	fb01 f303 	mul.w	r3, r1, r3
 8002156:	4413      	add	r3, r2
 8002158:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800215c:	4602      	mov	r2, r0
 800215e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	4a26      	ldr	r2, [pc, #152]	; (80021fc <MOD_ProcessModuleStatus2+0x17c>)
 8002164:	6812      	ldr	r2, [r2, #0]
 8002166:	4923      	ldr	r1, [pc, #140]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 8002168:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 800216c:	fb00 f303 	mul.w	r3, r0, r3
 8002170:	440b      	add	r3, r1
 8002172:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8002176:	601a      	str	r2, [r3, #0]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 8002178:	4b21      	ldr	r3, [pc, #132]	; (8002200 <MOD_ProcessModuleStatus2+0x180>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d02c      	beq.n	80021de <MOD_ProcessModuleStatus2+0x15e>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MOD_ProcessModuleStatus2+0x170>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 800218c:	461c      	mov	r4, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	4a18      	ldr	r2, [pc, #96]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 8002192:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002196:	fb01 f303 	mul.w	r3, r1, r3
 800219a:	4413      	add	r3, r2
 800219c:	331a      	adds	r3, #26
 800219e:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 80021a0:	461d      	mov	r5, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	4a13      	ldr	r2, [pc, #76]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 80021a6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80021aa:	fb01 f303 	mul.w	r3, r1, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	3316      	adds	r3, #22
 80021b2:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 80021b4:	4618      	mov	r0, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <MOD_ProcessModuleStatus2+0x174>)
 80021ba:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	3318      	adds	r3, #24
 80021c6:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x503 Status #2: ID=%02x, AVV=%d, HIV=%d, LOV=%d",
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	9000      	str	r0, [sp, #0]
 80021cc:	462b      	mov	r3, r5
 80021ce:	4622      	mov	r2, r4
 80021d0:	490c      	ldr	r1, [pc, #48]	; (8002204 <MOD_ProcessModuleStatus2+0x184>)
 80021d2:	480d      	ldr	r0, [pc, #52]	; (8002208 <MOD_ProcessModuleStatus2+0x188>)
 80021d4:	f009 fdfa 	bl	800bdcc <siprintf>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgVolt, module[moduleIndex].cellHiVolt,  module[moduleIndex].cellLoVolt); serialOut(tempBuffer);}
 80021d8:	480b      	ldr	r0, [pc, #44]	; (8002208 <MOD_ProcessModuleStatus2+0x188>)
 80021da:	f002 ff39 	bl	8005050 <serialOut>

    //TODO - only do this when not on
    // if(pack.state != packOn) MOD_RequestCellDetail(module[moduleIndex].moduleId);
  }
}
 80021de:	bf00      	nop
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000110 	.word	0x20000110
 80021ec:	2000c754 	.word	0x2000c754
 80021f0:	20000104 	.word	0x20000104
 80021f4:	20000154 	.word	0x20000154
 80021f8:	2000ca68 	.word	0x2000ca68
 80021fc:	2000cef0 	.word	0x2000cef0
 8002200:	20000008 	.word	0x20000008
 8002204:	0800d6a8 	.word	0x0800d6a8
 8002208:	2000ce88 	.word	0x2000ce88

0800220c <MOD_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessModuleStatus3(void){
 800220c:	b5b0      	push	{r4, r5, r7, lr}
 800220e:	b086      	sub	sp, #24
 8002210:	af02      	add	r7, sp, #8
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,12);
 8002212:	1d3b      	adds	r3, r7, #4
 8002214:	220c      	movs	r2, #12
 8002216:	2100      	movs	r1, #0
 8002218:	4618      	mov	r0, r3
 800221a:	f009 fd91 	bl	800bd40 <memset>
  memcpy(&status3, rxd, 12);
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	220c      	movs	r2, #12
 8002222:	4954      	ldr	r1, [pc, #336]	; (8002374 <MOD_ProcessModuleStatus3+0x168>)
 8002224:	4618      	mov	r0, r3
 8002226:	f009 fd7d 	bl	800bd24 <memcpy>

  //find the module index
  moduleIndex = pack.moduleCount;
 800222a:	4b53      	ldr	r3, [pc, #332]	; (8002378 <MOD_ProcessModuleStatus3+0x16c>)
 800222c:	7c1b      	ldrb	r3, [r3, #16]
 800222e:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8002230:	2300      	movs	r3, #0
 8002232:	73bb      	strb	r3, [r7, #14]
 8002234:	e015      	b.n	8002262 <MOD_ProcessModuleStatus3+0x56>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8002236:	4b51      	ldr	r3, [pc, #324]	; (800237c <MOD_ProcessModuleStatus3+0x170>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800223e:	7bbb      	ldrb	r3, [r7, #14]
 8002240:	494f      	ldr	r1, [pc, #316]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 8002242:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	440b      	add	r3, r1
 800224c:	3308      	adds	r3, #8
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002254:	429a      	cmp	r2, r3
 8002256:	d101      	bne.n	800225c <MOD_ProcessModuleStatus3+0x50>
      moduleIndex = index; // found it - save the index
 8002258:	7bbb      	ldrb	r3, [r7, #14]
 800225a:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 800225c:	7bbb      	ldrb	r3, [r7, #14]
 800225e:	3301      	adds	r3, #1
 8002260:	73bb      	strb	r3, [r7, #14]
 8002262:	4b45      	ldr	r3, [pc, #276]	; (8002378 <MOD_ProcessModuleStatus3+0x16c>)
 8002264:	7c1b      	ldrb	r3, [r3, #16]
 8002266:	7bba      	ldrb	r2, [r7, #14]
 8002268:	429a      	cmp	r2, r3
 800226a:	d3e4      	bcc.n	8002236 <MOD_ProcessModuleStatus3+0x2a>
    }
  if (moduleIndex == pack.moduleCount){
 800226c:	4b42      	ldr	r3, [pc, #264]	; (8002378 <MOD_ProcessModuleStatus3+0x16c>)
 800226e:	7c1b      	ldrb	r3, [r3, #16]
 8002270:	7bfa      	ldrb	r2, [r7, #15]
 8002272:	429a      	cmp	r2, r3
 8002274:	d079      	beq.n	800236a <MOD_ProcessModuleStatus3+0x15e>
    // TO DO Handle status from an unregistered module
  }else{
    //clear status request flag
    module[moduleIndex].statusRequested = false;
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	4a41      	ldr	r2, [pc, #260]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 800227a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	4413      	add	r3, r2
 8002284:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]

    // save the data
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	8938      	ldrh	r0, [r7, #8]
 8002290:	4a3b      	ldr	r2, [pc, #236]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 8002292:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4413      	add	r3, r2
 800229c:	3314      	adds	r3, #20
 800229e:	4602      	mov	r2, r0
 80022a0:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	88f8      	ldrh	r0, [r7, #6]
 80022a6:	4a36      	ldr	r2, [pc, #216]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 80022a8:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	3310      	adds	r3, #16
 80022b4:	4602      	mov	r2, r0
 80022b6:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	88b8      	ldrh	r0, [r7, #4]
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 80022be:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80022c2:	fb01 f303 	mul.w	r3, r1, r3
 80022c6:	4413      	add	r3, r2
 80022c8:	3312      	adds	r3, #18
 80022ca:	4602      	mov	r2, r0
 80022cc:	801a      	strh	r2, [r3, #0]

    // update last contact time
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80022ce:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <MOD_ProcessModuleStatus3+0x178>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	b290      	uxth	r0, r2
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 80022da:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80022de:	fb01 f303 	mul.w	r3, r1, r3
 80022e2:	4413      	add	r3, r2
 80022e4:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80022e8:	4602      	mov	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	4a26      	ldr	r2, [pc, #152]	; (8002388 <MOD_ProcessModuleStatus3+0x17c>)
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	4923      	ldr	r1, [pc, #140]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 80022f4:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80022f8:	fb00 f303 	mul.w	r3, r0, r3
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8002302:	601a      	str	r2, [r3, #0]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <MOD_ProcessModuleStatus3+0x180>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d02c      	beq.n	800236a <MOD_ProcessModuleStatus3+0x15e>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <MOD_ProcessModuleStatus3+0x170>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8002318:	461c      	mov	r4, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	4a18      	ldr	r2, [pc, #96]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 800231e:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	4413      	add	r3, r2
 8002328:	3314      	adds	r3, #20
 800232a:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 800232c:	461d      	mov	r5, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	4a13      	ldr	r2, [pc, #76]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 8002332:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002336:	fb01 f303 	mul.w	r3, r1, r3
 800233a:	4413      	add	r3, r2
 800233c:	3310      	adds	r3, #16
 800233e:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8002340:	4618      	mov	r0, r3
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <MOD_ProcessModuleStatus3+0x174>)
 8002346:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800234a:	fb01 f303 	mul.w	r3, r1, r3
 800234e:	4413      	add	r3, r2
 8002350:	3312      	adds	r3, #18
 8002352:	881b      	ldrh	r3, [r3, #0]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x504 Status #3: ID=%02x, AVT=%d, HIT=%d, LOT=%d",
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	9000      	str	r0, [sp, #0]
 8002358:	462b      	mov	r3, r5
 800235a:	4622      	mov	r2, r4
 800235c:	490c      	ldr	r1, [pc, #48]	; (8002390 <MOD_ProcessModuleStatus3+0x184>)
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <MOD_ProcessModuleStatus3+0x188>)
 8002360:	f009 fd34 	bl	800bdcc <siprintf>
        rxObj.bF.id.EID, module[moduleIndex].cellAvgTemp,module[moduleIndex].cellHiTemp, module[moduleIndex].cellLoTemp); serialOut(tempBuffer);}
 8002364:	480b      	ldr	r0, [pc, #44]	; (8002394 <MOD_ProcessModuleStatus3+0x188>)
 8002366:	f002 fe73 	bl	8005050 <serialOut>

    //TODO - only do this when not on
    // if(pack.state != packOn) MOD_RequestCellDetail(module[moduleIndex].moduleId);
  }
}
 800236a:	bf00      	nop
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bdb0      	pop	{r4, r5, r7, pc}
 8002372:	bf00      	nop
 8002374:	20000110 	.word	0x20000110
 8002378:	2000c754 	.word	0x2000c754
 800237c:	20000104 	.word	0x20000104
 8002380:	20000154 	.word	0x20000154
 8002384:	2000ca68 	.word	0x2000ca68
 8002388:	2000cef0 	.word	0x2000cef0
 800238c:	20000008 	.word	0x20000008
 8002390:	0800d6dc 	.word	0x0800d6dc
 8002394:	2000ce88 	.word	0x2000ce88

08002398 <MOD_TransmitState>:


/***************************************************************************************************************
*     M O D _ T r a n s m i t S t a t e C h a n g e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_TransmitState(uint8_t moduleId, moduleState state){
 8002398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800239a:	b08d      	sub	sp, #52	; 0x34
 800239c:	af08      	add	r7, sp, #32
 800239e:	4603      	mov	r3, r0
 80023a0:	460a      	mov	r2, r1
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // request cell detail packet for cell 0
  stateChange.moduleId = moduleId;
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 80023ac:	79bb      	ldrb	r3, [r7, #6]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	7a7b      	ldrb	r3, [r7, #9]
 80023b6:	f362 0303 	bfi	r3, r2, #0, #4
 80023ba:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_31 = 0;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f36f 331f 	bfc	r3, #12, #20
 80023c2:	60bb      	str	r3, [r7, #8]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 80023c4:	4b4f      	ldr	r3, [pc, #316]	; (8002504 <MOD_TransmitState+0x16c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80023ca:	4b4e      	ldr	r3, [pc, #312]	; (8002504 <MOD_TransmitState+0x16c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <MOD_TransmitState+0x16c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	893a      	ldrh	r2, [r7, #8]

  memcpy(txd, &stateChange, 2);
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <MOD_TransmitState+0x170>)
 80023da:	801a      	strh	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 80023dc:	4a49      	ldr	r2, [pc, #292]	; (8002504 <MOD_TransmitState+0x16c>)
 80023de:	8813      	ldrh	r3, [r2, #0]
 80023e0:	f240 5114 	movw	r1, #1300	; 0x514
 80023e4:	f361 030a 	bfi	r3, r1, #0, #11
 80023e8:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 80023ea:	79fa      	ldrb	r2, [r7, #7]
 80023ec:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80023f0:	4944      	ldr	r1, [pc, #272]	; (8002504 <MOD_TransmitState+0x16c>)
 80023f2:	680b      	ldr	r3, [r1, #0]
 80023f4:	f362 23dc 	bfi	r3, r2, #11, #18
 80023f8:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 80023fa:	4a42      	ldr	r2, [pc, #264]	; (8002504 <MOD_TransmitState+0x16c>)
 80023fc:	7913      	ldrb	r3, [r2, #4]
 80023fe:	f36f 1386 	bfc	r3, #6, #1
 8002402:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_2;                 // 2 bytes to transmit
 8002404:	4a3f      	ldr	r2, [pc, #252]	; (8002504 <MOD_TransmitState+0x16c>)
 8002406:	7913      	ldrb	r3, [r2, #4]
 8002408:	2102      	movs	r1, #2
 800240a:	f361 0303 	bfi	r3, r1, #0, #4
 800240e:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8002410:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <MOD_TransmitState+0x16c>)
 8002412:	7913      	ldrb	r3, [r2, #4]
 8002414:	f36f 13c7 	bfc	r3, #7, #1
 8002418:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800241a:	4a3a      	ldr	r2, [pc, #232]	; (8002504 <MOD_TransmitState+0x16c>)
 800241c:	7913      	ldrb	r3, [r2, #4]
 800241e:	f043 0310 	orr.w	r3, r3, #16
 8002422:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x514 State Change ID=%02x, STATE=%02x",moduleId,state ); serialOut(tempBuffer);}
 8002424:	4b39      	ldr	r3, [pc, #228]	; (800250c <MOD_TransmitState+0x174>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <MOD_TransmitState+0xaa>
 8002430:	79fa      	ldrb	r2, [r7, #7]
 8002432:	79bb      	ldrb	r3, [r7, #6]
 8002434:	4936      	ldr	r1, [pc, #216]	; (8002510 <MOD_TransmitState+0x178>)
 8002436:	4837      	ldr	r0, [pc, #220]	; (8002514 <MOD_TransmitState+0x17c>)
 8002438:	f009 fcc8 	bl	800bdcc <siprintf>
 800243c:	4835      	ldr	r0, [pc, #212]	; (8002514 <MOD_TransmitState+0x17c>)
 800243e:	f002 fe07 	bl	8005050 <serialOut>
  if(debugLevel & (DBG_MCU + DBG_VERBOSE)){ sprintf(tempBuffer,"TX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",txObj.bF.id.SID,txObj.bF.id.EID,txd[0],txd[1],txd[2],txd[3],txd[4],txd[5],txd[6],txd[7]); serialOut(tempBuffer);}
 8002442:	4b32      	ldr	r3, [pc, #200]	; (800250c <MOD_TransmitState+0x174>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	f003 030a 	and.w	r3, r3, #10
 800244a:	2b00      	cmp	r3, #0
 800244c:	d033      	beq.n	80024b6 <MOD_TransmitState+0x11e>
 800244e:	4b2d      	ldr	r3, [pc, #180]	; (8002504 <MOD_TransmitState+0x16c>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002456:	b29b      	uxth	r3, r3
 8002458:	469c      	mov	ip, r3
 800245a:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <MOD_TransmitState+0x16c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8002462:	469e      	mov	lr, r3
 8002464:	4b28      	ldr	r3, [pc, #160]	; (8002508 <MOD_TransmitState+0x170>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b27      	ldr	r3, [pc, #156]	; (8002508 <MOD_TransmitState+0x170>)
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	4619      	mov	r1, r3
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <MOD_TransmitState+0x170>)
 8002472:	789b      	ldrb	r3, [r3, #2]
 8002474:	4618      	mov	r0, r3
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <MOD_TransmitState+0x170>)
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	461c      	mov	r4, r3
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <MOD_TransmitState+0x170>)
 800247e:	791b      	ldrb	r3, [r3, #4]
 8002480:	461d      	mov	r5, r3
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MOD_TransmitState+0x170>)
 8002484:	795b      	ldrb	r3, [r3, #5]
 8002486:	461e      	mov	r6, r3
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MOD_TransmitState+0x170>)
 800248a:	799b      	ldrb	r3, [r3, #6]
 800248c:	603b      	str	r3, [r7, #0]
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <MOD_TransmitState+0x170>)
 8002490:	79db      	ldrb	r3, [r3, #7]
 8002492:	9307      	str	r3, [sp, #28]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	9306      	str	r3, [sp, #24]
 8002498:	9605      	str	r6, [sp, #20]
 800249a:	9504      	str	r5, [sp, #16]
 800249c:	9403      	str	r4, [sp, #12]
 800249e:	9002      	str	r0, [sp, #8]
 80024a0:	9101      	str	r1, [sp, #4]
 80024a2:	9200      	str	r2, [sp, #0]
 80024a4:	4673      	mov	r3, lr
 80024a6:	4662      	mov	r2, ip
 80024a8:	491b      	ldr	r1, [pc, #108]	; (8002518 <MOD_TransmitState+0x180>)
 80024aa:	481a      	ldr	r0, [pc, #104]	; (8002514 <MOD_TransmitState+0x17c>)
 80024ac:	f009 fc8e 	bl	800bdcc <siprintf>
 80024b0:	4818      	ldr	r0, [pc, #96]	; (8002514 <MOD_TransmitState+0x17c>)
 80024b2:	f002 fdcd 	bl	8005050 <serialOut>
  MOD_TransmitMessageQueue(CAN2);                    // Send it
 80024b6:	2001      	movs	r0, #1
 80024b8:	f7ff f98c 	bl	80017d4 <MOD_TransmitMessageQueue>

  // Update commanded state and command status
  index = MOD_ModuleIndexFromId(moduleId);
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	4618      	mov	r0, r3
 80024c0:	f000 f95a 	bl	8002778 <MOD_ModuleIndexFromId>
 80024c4:	4603      	mov	r3, r0
 80024c6:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <MOD_TransmitState+0x184>)
 80024ca:	7c1b      	ldrb	r3, [r3, #16]
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d013      	beq.n	80024fa <MOD_TransmitState+0x162>
    module[index].command.commandedState = state;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	4a12      	ldr	r2, [pc, #72]	; (8002520 <MOD_TransmitState+0x188>)
 80024d6:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80024da:	fb01 f303 	mul.w	r3, r1, r3
 80024de:	4413      	add	r3, r2
 80024e0:	331e      	adds	r3, #30
 80024e2:	79ba      	ldrb	r2, [r7, #6]
 80024e4:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus = commandIssued;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <MOD_TransmitState+0x188>)
 80024ea:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80024ee:	fb01 f303 	mul.w	r3, r1, r3
 80024f2:	4413      	add	r3, r2
 80024f4:	331f      	adds	r3, #31
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
  }
}
 80024fa:	bf00      	nop
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002502:	bf00      	nop
 8002504:	200000a8 	.word	0x200000a8
 8002508:	200000b4 	.word	0x200000b4
 800250c:	20000008 	.word	0x20000008
 8002510:	0800d79c 	.word	0x0800d79c
 8002514:	2000ce88 	.word	0x2000ce88
 8002518:	0800d73c 	.word	0x0800d73c
 800251c:	2000c754 	.word	0x2000c754
 8002520:	20000154 	.word	0x20000154

08002524 <MOD_ProcessCellDetail>:

/***************************************************************************************************************
*     M O D _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MOD_ProcessCellDetail(void){
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,8);
 800252e:	4a86      	ldr	r2, [pc, #536]	; (8002748 <MOD_ProcessCellDetail+0x224>)
 8002530:	1d3b      	adds	r3, r7, #4
 8002532:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002536:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 800253a:	4b84      	ldr	r3, [pc, #528]	; (800274c <MOD_ProcessCellDetail+0x228>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d017      	beq.n	8002576 <MOD_ProcessCellDetail+0x52>
 8002546:	4b82      	ldr	r3, [pc, #520]	; (8002750 <MOD_ProcessCellDetail+0x22c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800254e:	461c      	mov	r4, r3
 8002550:	797b      	ldrb	r3, [r7, #5]
 8002552:	461d      	mov	r5, r3
 8002554:	793b      	ldrb	r3, [r7, #4]
 8002556:	7aba      	ldrb	r2, [r7, #10]
 8002558:	88f9      	ldrh	r1, [r7, #6]
 800255a:	8938      	ldrh	r0, [r7, #8]
 800255c:	9003      	str	r0, [sp, #12]
 800255e:	9102      	str	r1, [sp, #8]
 8002560:	9201      	str	r2, [sp, #4]
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	462b      	mov	r3, r5
 8002566:	4622      	mov	r2, r4
 8002568:	497a      	ldr	r1, [pc, #488]	; (8002754 <MOD_ProcessCellDetail+0x230>)
 800256a:	487b      	ldr	r0, [pc, #492]	; (8002758 <MOD_ProcessCellDetail+0x234>)
 800256c:	f009 fc2e 	bl	800bdcc <siprintf>
 8002570:	4879      	ldr	r0, [pc, #484]	; (8002758 <MOD_ProcessCellDetail+0x234>)
 8002572:	f002 fd6d 	bl	8005050 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8002576:	4b79      	ldr	r3, [pc, #484]	; (800275c <MOD_ProcessCellDetail+0x238>)
 8002578:	7c1b      	ldrb	r3, [r3, #16]
 800257a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800257c:	2300      	movs	r3, #0
 800257e:	75bb      	strb	r3, [r7, #22]
 8002580:	e015      	b.n	80025ae <MOD_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8002582:	4b73      	ldr	r3, [pc, #460]	; (8002750 <MOD_ProcessCellDetail+0x22c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800258a:	7dbb      	ldrb	r3, [r7, #22]
 800258c:	4974      	ldr	r1, [pc, #464]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 800258e:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8002592:	fb00 f303 	mul.w	r3, r0, r3
 8002596:	440b      	add	r3, r1
 8002598:	3308      	adds	r3, #8
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d101      	bne.n	80025a8 <MOD_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 80025a4:	7dbb      	ldrb	r3, [r7, #22]
 80025a6:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 80025a8:	7dbb      	ldrb	r3, [r7, #22]
 80025aa:	3301      	adds	r3, #1
 80025ac:	75bb      	strb	r3, [r7, #22]
 80025ae:	4b6b      	ldr	r3, [pc, #428]	; (800275c <MOD_ProcessCellDetail+0x238>)
 80025b0:	7c1b      	ldrb	r3, [r3, #16]
 80025b2:	7dba      	ldrb	r2, [r7, #22]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d3e4      	bcc.n	8002582 <MOD_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	7978      	ldrb	r0, [r7, #5]
 80025bc:	4a68      	ldr	r2, [pc, #416]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 80025be:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	4413      	add	r3, r2
 80025c8:	3322      	adds	r3, #34	; 0x22
 80025ca:	4602      	mov	r2, r0
 80025cc:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 80025ce:	7dfa      	ldrb	r2, [r7, #23]
 80025d0:	793b      	ldrb	r3, [r7, #4]
 80025d2:	4618      	mov	r0, r3
 80025d4:	7abc      	ldrb	r4, [r7, #10]
 80025d6:	4962      	ldr	r1, [pc, #392]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 80025d8:	4603      	mov	r3, r0
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4403      	add	r3, r0
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 80025e4:	fb00 f202 	mul.w	r2, r0, r2
 80025e8:	4413      	add	r3, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	3328      	adds	r3, #40	; 0x28
 80025ee:	4622      	mov	r2, r4
 80025f0:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 80025f2:	7dfa      	ldrb	r2, [r7, #23]
 80025f4:	793b      	ldrb	r3, [r7, #4]
 80025f6:	4618      	mov	r0, r3
 80025f8:	7afc      	ldrb	r4, [r7, #11]
 80025fa:	4959      	ldr	r1, [pc, #356]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 80025fc:	4603      	mov	r3, r0
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	4403      	add	r3, r0
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8002608:	fb00 f202 	mul.w	r2, r0, r2
 800260c:	4413      	add	r3, r2
 800260e:	440b      	add	r3, r1
 8002610:	3329      	adds	r3, #41	; 0x29
 8002612:	4622      	mov	r2, r4
 8002614:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 8002616:	7dfa      	ldrb	r2, [r7, #23]
 8002618:	793b      	ldrb	r3, [r7, #4]
 800261a:	4618      	mov	r0, r3
 800261c:	88fc      	ldrh	r4, [r7, #6]
 800261e:	4950      	ldr	r1, [pc, #320]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 8002620:	4603      	mov	r3, r0
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4403      	add	r3, r0
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 800262c:	fb00 f202 	mul.w	r2, r0, r2
 8002630:	4413      	add	r3, r2
 8002632:	440b      	add	r3, r1
 8002634:	3326      	adds	r3, #38	; 0x26
 8002636:	4622      	mov	r2, r4
 8002638:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 800263a:	7dfa      	ldrb	r2, [r7, #23]
 800263c:	793b      	ldrb	r3, [r7, #4]
 800263e:	4618      	mov	r0, r3
 8002640:	893c      	ldrh	r4, [r7, #8]
 8002642:	4947      	ldr	r1, [pc, #284]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 8002644:	4603      	mov	r3, r0
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4403      	add	r3, r0
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8002650:	fb00 f202 	mul.w	r2, r0, r2
 8002654:	4413      	add	r3, r2
 8002656:	440b      	add	r3, r1
 8002658:	3324      	adds	r3, #36	; 0x24
 800265a:	4622      	mov	r2, r4
 800265c:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800265e:	4b41      	ldr	r3, [pc, #260]	; (8002764 <MOD_ProcessCellDetail+0x240>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	b290      	uxth	r0, r2
 8002668:	4a3d      	ldr	r2, [pc, #244]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 800266a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800266e:	fb01 f303 	mul.w	r3, r1, r3
 8002672:	4413      	add	r3, r2
 8002674:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002678:	4602      	mov	r2, r0
 800267a:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <MOD_ProcessCellDetail+0x244>)
 8002680:	6812      	ldr	r2, [r2, #0]
 8002682:	4937      	ldr	r1, [pc, #220]	; (8002760 <MOD_ProcessCellDetail+0x23c>)
 8002684:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8002688:	fb00 f303 	mul.w	r3, r0, r3
 800268c:	440b      	add	r3, r1
 800268e:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8002692:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 8002694:	793b      	ldrb	r3, [r7, #4]
 8002696:	461a      	mov	r2, r3
 8002698:	797b      	ldrb	r3, [r7, #5]
 800269a:	3b01      	subs	r3, #1
 800269c:	429a      	cmp	r2, r3
 800269e:	da4e      	bge.n	800273e <MOD_ProcessCellDetail+0x21a>

    detailRequest.cellId = cellDetail.cellId +1;
 80026a0:	793b      	ldrb	r3, [r7, #4]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 80026a8:	4b30      	ldr	r3, [pc, #192]	; (800276c <MOD_ProcessCellDetail+0x248>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80026ae:	4b2f      	ldr	r3, [pc, #188]	; (800276c <MOD_ProcessCellDetail+0x248>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80026b4:	4b2d      	ldr	r3, [pc, #180]	; (800276c <MOD_ProcessCellDetail+0x248>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, 3);
 80026ba:	f107 030c 	add.w	r3, r7, #12
 80026be:	2203      	movs	r2, #3
 80026c0:	4619      	mov	r1, r3
 80026c2:	482b      	ldr	r0, [pc, #172]	; (8002770 <MOD_ProcessCellDetail+0x24c>)
 80026c4:	f009 fb2e 	bl	800bd24 <memcpy>

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 80026c8:	4a28      	ldr	r2, [pc, #160]	; (800276c <MOD_ProcessCellDetail+0x248>)
 80026ca:	8813      	ldrh	r3, [r2, #0]
 80026cc:	f240 5115 	movw	r1, #1301	; 0x515
 80026d0:	f361 030a 	bfi	r3, r1, #0, #11
 80026d4:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <MOD_ProcessCellDetail+0x22c>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 80026de:	4a23      	ldr	r2, [pc, #140]	; (800276c <MOD_ProcessCellDetail+0x248>)
 80026e0:	6813      	ldr	r3, [r2, #0]
 80026e2:	f361 23dc 	bfi	r3, r1, #11, #18
 80026e6:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80026e8:	4a20      	ldr	r2, [pc, #128]	; (800276c <MOD_ProcessCellDetail+0x248>)
 80026ea:	7913      	ldrb	r3, [r2, #4]
 80026ec:	f36f 1386 	bfc	r3, #6, #1
 80026f0:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 80026f2:	4a1e      	ldr	r2, [pc, #120]	; (800276c <MOD_ProcessCellDetail+0x248>)
 80026f4:	7913      	ldrb	r3, [r2, #4]
 80026f6:	2102      	movs	r1, #2
 80026f8:	f361 0303 	bfi	r3, r1, #0, #4
 80026fc:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80026fe:	4a1b      	ldr	r2, [pc, #108]	; (800276c <MOD_ProcessCellDetail+0x248>)
 8002700:	7913      	ldrb	r3, [r2, #4]
 8002702:	f36f 13c7 	bfc	r3, #7, #1
 8002706:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8002708:	4a18      	ldr	r2, [pc, #96]	; (800276c <MOD_ProcessCellDetail+0x248>)
 800270a:	7913      	ldrb	r3, [r2, #4]
 800270c:	f043 0310 	orr.w	r3, r3, #16
 8002710:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 8002712:	4b0e      	ldr	r3, [pc, #56]	; (800274c <MOD_ProcessCellDetail+0x228>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00c      	beq.n	8002738 <MOD_ProcessCellDetail+0x214>
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <MOD_ProcessCellDetail+0x22c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8002726:	461a      	mov	r2, r3
 8002728:	7b7b      	ldrb	r3, [r7, #13]
 800272a:	4912      	ldr	r1, [pc, #72]	; (8002774 <MOD_ProcessCellDetail+0x250>)
 800272c:	480a      	ldr	r0, [pc, #40]	; (8002758 <MOD_ProcessCellDetail+0x234>)
 800272e:	f009 fb4d 	bl	800bdcc <siprintf>
 8002732:	4809      	ldr	r0, [pc, #36]	; (8002758 <MOD_ProcessCellDetail+0x234>)
 8002734:	f002 fc8c 	bl	8005050 <serialOut>
    MOD_TransmitMessageQueue(CAN2);                     // Send it
 8002738:	2001      	movs	r0, #1
 800273a:	f7ff f84b 	bl	80017d4 <MOD_TransmitMessageQueue>
  }
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bdb0      	pop	{r4, r5, r7, pc}
 8002746:	bf00      	nop
 8002748:	20000110 	.word	0x20000110
 800274c:	20000008 	.word	0x20000008
 8002750:	20000104 	.word	0x20000104
 8002754:	0800d7c8 	.word	0x0800d7c8
 8002758:	2000ce88 	.word	0x2000ce88
 800275c:	2000c754 	.word	0x2000c754
 8002760:	20000154 	.word	0x20000154
 8002764:	2000ca68 	.word	0x2000ca68
 8002768:	2000cef0 	.word	0x2000cef0
 800276c:	200000a8 	.word	0x200000a8
 8002770:	200000b4 	.word	0x200000b4
 8002774:	0800d820 	.word	0x0800d820

08002778 <MOD_ModuleIndexFromId>:

/***************************************************************************************************************
*     M O D _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MOD_ModuleIndexFromId(uint8_t moduleId)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <MOD_ModuleIndexFromId+0x60>)
 8002784:	7c1b      	ldrb	r3, [r3, #16]
 8002786:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 8002788:	2300      	movs	r3, #0
 800278a:	73bb      	strb	r3, [r7, #14]
 800278c:	e010      	b.n	80027b0 <MOD_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 800278e:	7bbb      	ldrb	r3, [r7, #14]
 8002790:	4a12      	ldr	r2, [pc, #72]	; (80027dc <MOD_ModuleIndexFromId+0x64>)
 8002792:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002796:	fb01 f303 	mul.w	r3, r1, r3
 800279a:	4413      	add	r3, r2
 800279c:	3308      	adds	r3, #8
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	79fa      	ldrb	r2, [r7, #7]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d101      	bne.n	80027aa <MOD_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 80027a6:	7bbb      	ldrb	r3, [r7, #14]
 80027a8:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 80027aa:	7bbb      	ldrb	r3, [r7, #14]
 80027ac:	3301      	adds	r3, #1
 80027ae:	73bb      	strb	r3, [r7, #14]
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MOD_ModuleIndexFromId+0x60>)
 80027b2:	7c1b      	ldrb	r3, [r3, #16]
 80027b4:	7bba      	ldrb	r2, [r7, #14]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d3e9      	bcc.n	800278e <MOD_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <MOD_ModuleIndexFromId+0x60>)
 80027bc:	7c1b      	ldrb	r3, [r3, #16]
 80027be:	7bfa      	ldrb	r2, [r7, #15]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <MOD_ModuleIndexFromId+0x50>
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	e001      	b.n	80027cc <MOD_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <MOD_ModuleIndexFromId+0x60>)
 80027ca:	7c1b      	ldrb	r3, [r3, #16]

}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	2000c754 	.word	0x2000c754
 80027dc:	20000154 	.word	0x20000154

080027e0 <MOD_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M O D _ L a s t M e s s a g e T i m e o u t                                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MOD_TicksSinceLastMessage(uint8_t moduleId)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint8_t moduleIndex = MOD_ModuleIndexFromId(moduleId);
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ffc3 	bl	8002778 <MOD_ModuleIndexFromId>
 80027f2:	4603      	mov	r3, r0
 80027f4:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 80027f6:	4b28      	ldr	r3, [pc, #160]	; (8002898 <MOD_TicksSinceLastMessage+0xb8>)
 80027f8:	7c1b      	ldrb	r3, [r3, #16]
 80027fa:	7afa      	ldrb	r2, [r7, #11]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d046      	beq.n	800288e <MOD_TicksSinceLastMessage+0xae>
    // Variables


    if ((etTimerOverflows - module[moduleIndex].lastContact.overflows) == 0){
 8002800:	7afb      	ldrb	r3, [r7, #11]
 8002802:	4a26      	ldr	r2, [pc, #152]	; (800289c <MOD_TicksSinceLastMessage+0xbc>)
 8002804:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <MOD_TicksSinceLastMessage+0xc0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d10f      	bne.n	800283c <MOD_TicksSinceLastMessage+0x5c>
      elapsedTicks = htim1.Instance->CNT - module[moduleIndex].lastContact.ticks;
 800281c:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <MOD_TicksSinceLastMessage+0xc4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	7afa      	ldrb	r2, [r7, #11]
 8002824:	491d      	ldr	r1, [pc, #116]	; (800289c <MOD_TicksSinceLastMessage+0xbc>)
 8002826:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 800282a:	fb00 f202 	mul.w	r2, r0, r2
 800282e:	440a      	add	r2, r1
 8002830:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002834:	8812      	ldrh	r2, [r2, #0]
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e026      	b.n	800288a <MOD_TicksSinceLastMessage+0xaa>
    }else{
      //             (ticks last contact to overflow point)         + (              ticks in completed overflows                                 )                               + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (etTimerOverflows - (module[moduleIndex].lastContact.overflows +1))) + (htim1.Instance->CNT);
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <MOD_TicksSinceLastMessage+0xc4>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	7afa      	ldrb	r2, [r7, #11]
 8002842:	4916      	ldr	r1, [pc, #88]	; (800289c <MOD_TicksSinceLastMessage+0xbc>)
 8002844:	f44f 60c6 	mov.w	r0, #1584	; 0x630
 8002848:	fb00 f202 	mul.w	r2, r0, r2
 800284c:	440a      	add	r2, r1
 800284e:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002852:	8812      	ldrh	r2, [r2, #0]
 8002854:	1a9a      	subs	r2, r3, r2
 8002856:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <MOD_TicksSinceLastMessage+0xc4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	4910      	ldr	r1, [pc, #64]	; (80028a0 <MOD_TicksSinceLastMessage+0xc0>)
 800285e:	6808      	ldr	r0, [r1, #0]
 8002860:	7af9      	ldrb	r1, [r7, #11]
 8002862:	4c0e      	ldr	r4, [pc, #56]	; (800289c <MOD_TicksSinceLastMessage+0xbc>)
 8002864:	f44f 65c6 	mov.w	r5, #1584	; 0x630
 8002868:	fb05 f101 	mul.w	r1, r5, r1
 800286c:	4421      	add	r1, r4
 800286e:	f501 61c5 	add.w	r1, r1, #1576	; 0x628
 8002872:	6809      	ldr	r1, [r1, #0]
 8002874:	1a41      	subs	r1, r0, r1
 8002876:	3901      	subs	r1, #1
 8002878:	fb01 f303 	mul.w	r3, r1, r3
 800287c:	441a      	add	r2, r3
 800287e:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <MOD_TicksSinceLastMessage+0xc4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	4413      	add	r3, r2
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
    }
    return elapsedTicks;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	e000      	b.n	8002890 <MOD_TicksSinceLastMessage+0xb0>

  } else return 0; // TODO Handle this error
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bdb0      	pop	{r4, r5, r7, pc}
 8002898:	2000c754 	.word	0x2000c754
 800289c:	20000154 	.word	0x20000154
 80028a0:	2000cef0 	.word	0x2000cef0
 80028a4:	2000ca68 	.word	0x2000ca68

080028a8 <CAN_TestRegisterAccess>:
/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
    // Variables
    uint8_t length;
    bool good = false;
 80028b2:	2300      	movs	r3, #0
 80028b4:	73bb      	strb	r3, [r7, #14]
    Nop();
 80028b6:	bf00      	nop

    // Verify read/write with different access length
    // Note: registers can be accessed in multiples of bytes
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e05d      	b.n	800297a <CAN_TestRegisterAccess+0xd2>
        for (i = 0; i < length; i++) {
 80028be:	4b34      	ldr	r3, [pc, #208]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
 80028c4:	e016      	b.n	80028f4 <CAN_TestRegisterAccess+0x4c>
            txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 80028c6:	f009 fa43 	bl	800bd50 <rand>
 80028ca:	4603      	mov	r3, r0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	4a30      	ldr	r2, [pc, #192]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 80028d0:	7812      	ldrb	r2, [r2, #0]
 80028d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028d6:	b2d9      	uxtb	r1, r3
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <CAN_TestRegisterAccess+0xec>)
 80028da:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 80028dc:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b2d      	ldr	r3, [pc, #180]	; (8002998 <CAN_TestRegisterAccess+0xf0>)
 80028e4:	21ff      	movs	r1, #255	; 0xff
 80028e6:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 80028e8:	4b29      	ldr	r3, [pc, #164]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	4b26      	ldr	r3, [pc, #152]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	7bfa      	ldrb	r2, [r7, #15]
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d8e3      	bhi.n	80028c6 <CAN_TestRegisterAccess+0x1e>
        }
        Nop();
 80028fe:	bf00      	nop

        // Write data to registers
        DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	b29b      	uxth	r3, r3
 8002904:	79f8      	ldrb	r0, [r7, #7]
 8002906:	4a23      	ldr	r2, [pc, #140]	; (8002994 <CAN_TestRegisterAccess+0xec>)
 8002908:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800290c:	f000 fbfa 	bl	8003104 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from registers
        DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	b29b      	uxth	r3, r3
 8002914:	79f8      	ldrb	r0, [r7, #7]
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <CAN_TestRegisterAccess+0xf0>)
 8002918:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800291c:	f000 fb72 	bl	8003004 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8002920:	2300      	movs	r3, #0
 8002922:	73bb      	strb	r3, [r7, #14]
        for (i = 0; i < length; i++) {
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
 800292a:	e01e      	b.n	800296a <CAN_TestRegisterAccess+0xc2>
            good = txd[i] == rxd[i];
 800292c:	4b18      	ldr	r3, [pc, #96]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	461a      	mov	r2, r3
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <CAN_TestRegisterAccess+0xec>)
 8002934:	5c9a      	ldrb	r2, [r3, r2]
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4619      	mov	r1, r3
 800293c:	4b16      	ldr	r3, [pc, #88]	; (8002998 <CAN_TestRegisterAccess+0xf0>)
 800293e:	5c5b      	ldrb	r3, [r3, r1]
 8002940:	429a      	cmp	r2, r3
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	73bb      	strb	r3, [r7, #14]

            if (!good) {
 800294a:	7bbb      	ldrb	r3, [r7, #14]
 800294c:	f083 0301 	eor.w	r3, r3, #1
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <CAN_TestRegisterAccess+0xb6>
                Nop();
 8002956:	bf00      	nop
                Nop();
 8002958:	bf00      	nop

                // Data mismatch
                return false;
 800295a:	2300      	movs	r3, #0
 800295c:	e013      	b.n	8002986 <CAN_TestRegisterAccess+0xde>
        for (i = 0; i < length; i++) {
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	3301      	adds	r3, #1
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 8002968:	701a      	strb	r2, [r3, #0]
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <CAN_TestRegisterAccess+0xe8>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	429a      	cmp	r2, r3
 8002972:	d8db      	bhi.n	800292c <CAN_TestRegisterAccess+0x84>
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	3301      	adds	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b40      	cmp	r3, #64	; 0x40
 800297e:	d99e      	bls.n	80028be <CAN_TestRegisterAccess+0x16>
            }
        }
    }
    Nop();
 8002980:	bf00      	nop
    Nop();
 8002982:	bf00      	nop
    return true;
 8002984:	2301      	movs	r3, #1
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000150 	.word	0x20000150
 8002994:	200000b4 	.word	0x200000b4
 8002998:	20000110 	.word	0x20000110

0800299c <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
    // Variables
    uint8_t length;
    bool good = false;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73bb      	strb	r3, [r7, #14]
    Nop();
 80029aa:	bf00      	nop

    // Verify read/write with different access length
    // Note: RAM can only be accessed in multiples of 4 bytes
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 80029ac:	2304      	movs	r3, #4
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e05b      	b.n	8002a6a <CAN_TestRamAccess+0xce>
        for (i = 0; i < length; i++) {
 80029b2:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
 80029b8:	e014      	b.n	80029e4 <CAN_TestRamAccess+0x48>
            txd[i] = rand() & 0xff;
 80029ba:	f009 f9c9 	bl	800bd50 <rand>
 80029be:	4601      	mov	r1, r0
 80029c0:	4b2e      	ldr	r3, [pc, #184]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	b2c9      	uxtb	r1, r1
 80029c8:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <CAN_TestRamAccess+0xe4>)
 80029ca:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <CAN_TestRamAccess+0xe8>)
 80029d4:	21ff      	movs	r1, #255	; 0xff
 80029d6:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	3301      	adds	r3, #1
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d8e5      	bhi.n	80029ba <CAN_TestRamAccess+0x1e>
        }
        Nop();
 80029ee:	bf00      	nop

        // Write data to RAM
        DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 80029f0:	7bfb      	ldrb	r3, [r7, #15]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	79f8      	ldrb	r0, [r7, #7]
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <CAN_TestRamAccess+0xe4>)
 80029f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029fc:	f000 fb82 	bl	8003104 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from RAM
        DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	79f8      	ldrb	r0, [r7, #7]
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <CAN_TestRamAccess+0xe8>)
 8002a08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a0c:	f000 fafa 	bl	8003004 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73bb      	strb	r3, [r7, #14]
        for (i = 0; i < length; i++) {
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
 8002a1a:	e01e      	b.n	8002a5a <CAN_TestRamAccess+0xbe>
            good = txd[i] == rxd[i];
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <CAN_TestRamAccess+0xe4>)
 8002a24:	5c9a      	ldrb	r2, [r3, r2]
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	4b15      	ldr	r3, [pc, #84]	; (8002a84 <CAN_TestRamAccess+0xe8>)
 8002a2e:	5c5b      	ldrb	r3, [r3, r1]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	73bb      	strb	r3, [r7, #14]

            if (!good) {
 8002a3a:	7bbb      	ldrb	r3, [r7, #14]
 8002a3c:	f083 0301 	eor.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <CAN_TestRamAccess+0xb2>
                Nop();
 8002a46:	bf00      	nop
                Nop();
 8002a48:	bf00      	nop

                // Data mismatch
                return false;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	e011      	b.n	8002a72 <CAN_TestRamAccess+0xd6>
        for (i = 0; i < length; i++) {
 8002a4e:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <CAN_TestRamAccess+0xe0>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d8db      	bhi.n	8002a1c <CAN_TestRamAccess+0x80>
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	3304      	adds	r3, #4
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	7bfb      	ldrb	r3, [r7, #15]
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	d9a0      	bls.n	80029b2 <CAN_TestRamAccess+0x16>
            }
        }
    }
    return true;
 8002a70:	2301      	movs	r3, #1
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000150 	.word	0x20000150
 8002a80:	200000b4 	.word	0x200000b4
 8002a84:	20000110 	.word	0x20000110

08002a88 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	4603      	mov	r3, r0
 8002a90:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8002a92:	2302      	movs	r3, #2
 8002a94:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <DRV_CANFDSPI_Reset+0x84>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <DRV_CANFDSPI_Reset+0x84>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);

	if(index==CAN2){
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d114      	bne.n	8002ad2 <DRV_CANFDSPI_Reset+0x4a>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2120      	movs	r1, #32
 8002aac:	4818      	ldr	r0, [pc, #96]	; (8002b10 <DRV_CANFDSPI_Reset+0x88>)
 8002aae:	f004 fabf 	bl	8007030 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002ab2:	89bb      	ldrh	r3, [r7, #12]
 8002ab4:	2264      	movs	r2, #100	; 0x64
 8002ab6:	9200      	str	r2, [sp, #0]
 8002ab8:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <DRV_CANFDSPI_Reset+0x8c>)
 8002aba:	4914      	ldr	r1, [pc, #80]	; (8002b0c <DRV_CANFDSPI_Reset+0x84>)
 8002abc:	4816      	ldr	r0, [pc, #88]	; (8002b18 <DRV_CANFDSPI_Reset+0x90>)
 8002abe:	f006 fe1d 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2120      	movs	r1, #32
 8002aca:	4811      	ldr	r0, [pc, #68]	; (8002b10 <DRV_CANFDSPI_Reset+0x88>)
 8002acc:	f004 fab0 	bl	8007030 <HAL_GPIO_WritePin>
 8002ad0:	e015      	b.n	8002afe <DRV_CANFDSPI_Reset+0x76>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ada:	f004 faa9 	bl	8007030 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002ade:	89bb      	ldrh	r3, [r7, #12]
 8002ae0:	2264      	movs	r2, #100	; 0x64
 8002ae2:	9200      	str	r2, [sp, #0]
 8002ae4:	4a0b      	ldr	r2, [pc, #44]	; (8002b14 <DRV_CANFDSPI_Reset+0x8c>)
 8002ae6:	4909      	ldr	r1, [pc, #36]	; (8002b0c <DRV_CANFDSPI_Reset+0x84>)
 8002ae8:	480b      	ldr	r0, [pc, #44]	; (8002b18 <DRV_CANFDSPI_Reset+0x90>)
 8002aea:	f006 fe07 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002af2:	2201      	movs	r2, #1
 8002af4:	2120      	movs	r1, #32
 8002af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afa:	f004 fa99 	bl	8007030 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 8002afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	2000c788 	.word	0x2000c788
 8002b10:	48000800 	.word	0x48000800
 8002b14:	2000c7e8 	.word	0x2000c7e8
 8002b18:	2000c9a0 	.word	0x2000c9a0

08002b1c <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	4603      	mov	r3, r0
 8002b24:	603a      	str	r2, [r7, #0]
 8002b26:	71fb      	strb	r3, [r7, #7]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8002b30:	88bb      	ldrh	r3, [r7, #4]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f003 030f 	and.w	r3, r3, #15
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	3330      	adds	r3, #48	; 0x30
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b20      	ldr	r3, [pc, #128]	; (8002bc4 <DRV_CANFDSPI_ReadByte+0xa8>)
 8002b44:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002b46:	88bb      	ldrh	r3, [r7, #4]
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <DRV_CANFDSPI_ReadByte+0xa8>)
 8002b4c:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 8002b4e:	4b1d      	ldr	r3, [pc, #116]	; (8002bc4 <DRV_CANFDSPI_ReadByte+0xa8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	709a      	strb	r2, [r3, #2]

  if(index==CAN2){
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d114      	bne.n	8002b84 <DRV_CANFDSPI_ReadByte+0x68>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2120      	movs	r1, #32
 8002b5e:	481a      	ldr	r0, [pc, #104]	; (8002bc8 <DRV_CANFDSPI_ReadByte+0xac>)
 8002b60:	f004 fa66 	bl	8007030 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002b64:	89bb      	ldrh	r3, [r7, #12]
 8002b66:	2264      	movs	r2, #100	; 0x64
 8002b68:	9200      	str	r2, [sp, #0]
 8002b6a:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <DRV_CANFDSPI_ReadByte+0xb0>)
 8002b6c:	4915      	ldr	r1, [pc, #84]	; (8002bc4 <DRV_CANFDSPI_ReadByte+0xa8>)
 8002b6e:	4818      	ldr	r0, [pc, #96]	; (8002bd0 <DRV_CANFDSPI_ReadByte+0xb4>)
 8002b70:	f006 fdc4 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002b78:	2201      	movs	r2, #1
 8002b7a:	2120      	movs	r1, #32
 8002b7c:	4812      	ldr	r0, [pc, #72]	; (8002bc8 <DRV_CANFDSPI_ReadByte+0xac>)
 8002b7e:	f004 fa57 	bl	8007030 <HAL_GPIO_WritePin>
 8002b82:	e015      	b.n	8002bb0 <DRV_CANFDSPI_ReadByte+0x94>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2120      	movs	r1, #32
 8002b88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b8c:	f004 fa50 	bl	8007030 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002b90:	89bb      	ldrh	r3, [r7, #12]
 8002b92:	2264      	movs	r2, #100	; 0x64
 8002b94:	9200      	str	r2, [sp, #0]
 8002b96:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <DRV_CANFDSPI_ReadByte+0xb0>)
 8002b98:	490a      	ldr	r1, [pc, #40]	; (8002bc4 <DRV_CANFDSPI_ReadByte+0xa8>)
 8002b9a:	480d      	ldr	r0, [pc, #52]	; (8002bd0 <DRV_CANFDSPI_ReadByte+0xb4>)
 8002b9c:	f006 fdae 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bac:	f004 fa40 	bl	8007030 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 8002bb0:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <DRV_CANFDSPI_ReadByte+0xb0>)
 8002bb2:	789a      	ldrb	r2, [r3, #2]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8002bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	2000c788 	.word	0x2000c788
 8002bc8:	48000800 	.word	0x48000800
 8002bcc:	2000c7e8 	.word	0x2000c7e8
 8002bd0:	2000c9a0 	.word	0x2000c9a0

08002bd4 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	4603      	mov	r3, r0
 8002bdc:	71fb      	strb	r3, [r7, #7]
 8002bde:	460b      	mov	r3, r1
 8002be0:	80bb      	strh	r3, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 8002be6:	2303      	movs	r3, #3
 8002be8:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8002bea:	88bb      	ldrh	r3, [r7, #4]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	3320      	adds	r3, #32
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <DRV_CANFDSPI_WriteByte+0xa4>)
 8002bfe:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002c00:	88bb      	ldrh	r3, [r7, #4]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <DRV_CANFDSPI_WriteByte+0xa4>)
 8002c06:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 8002c08:	4a1b      	ldr	r2, [pc, #108]	; (8002c78 <DRV_CANFDSPI_WriteByte+0xa4>)
 8002c0a:	79bb      	ldrb	r3, [r7, #6]
 8002c0c:	7093      	strb	r3, [r2, #2]

  if(index==CAN2){
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d114      	bne.n	8002c3e <DRV_CANFDSPI_WriteByte+0x6a>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002c14:	2200      	movs	r2, #0
 8002c16:	2120      	movs	r1, #32
 8002c18:	4818      	ldr	r0, [pc, #96]	; (8002c7c <DRV_CANFDSPI_WriteByte+0xa8>)
 8002c1a:	f004 fa09 	bl	8007030 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002c1e:	89bb      	ldrh	r3, [r7, #12]
 8002c20:	2264      	movs	r2, #100	; 0x64
 8002c22:	9200      	str	r2, [sp, #0]
 8002c24:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <DRV_CANFDSPI_WriteByte+0xac>)
 8002c26:	4914      	ldr	r1, [pc, #80]	; (8002c78 <DRV_CANFDSPI_WriteByte+0xa4>)
 8002c28:	4816      	ldr	r0, [pc, #88]	; (8002c84 <DRV_CANFDSPI_WriteByte+0xb0>)
 8002c2a:	f006 fd67 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002c32:	2201      	movs	r2, #1
 8002c34:	2120      	movs	r1, #32
 8002c36:	4811      	ldr	r0, [pc, #68]	; (8002c7c <DRV_CANFDSPI_WriteByte+0xa8>)
 8002c38:	f004 f9fa 	bl	8007030 <HAL_GPIO_WritePin>
 8002c3c:	e015      	b.n	8002c6a <DRV_CANFDSPI_WriteByte+0x96>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2120      	movs	r1, #32
 8002c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c46:	f004 f9f3 	bl	8007030 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002c4a:	89bb      	ldrh	r3, [r7, #12]
 8002c4c:	2264      	movs	r2, #100	; 0x64
 8002c4e:	9200      	str	r2, [sp, #0]
 8002c50:	4a0b      	ldr	r2, [pc, #44]	; (8002c80 <DRV_CANFDSPI_WriteByte+0xac>)
 8002c52:	4909      	ldr	r1, [pc, #36]	; (8002c78 <DRV_CANFDSPI_WriteByte+0xa4>)
 8002c54:	480b      	ldr	r0, [pc, #44]	; (8002c84 <DRV_CANFDSPI_WriteByte+0xb0>)
 8002c56:	f006 fd51 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002c5e:	2201      	movs	r2, #1
 8002c60:	2120      	movs	r1, #32
 8002c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c66:	f004 f9e3 	bl	8007030 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 8002c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	2000c788 	.word	0x2000c788
 8002c7c:	48000800 	.word	0x48000800
 8002c80:	2000c7e8 	.word	0x2000c7e8
 8002c84:	2000c9a0 	.word	0x2000c9a0

08002c88 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	4603      	mov	r3, r0
 8002c90:	603a      	str	r2, [r7, #0]
 8002c92:	71fb      	strb	r3, [r7, #7]
 8002c94:	460b      	mov	r3, r1
 8002c96:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8002c98:	2306      	movs	r3, #6
 8002c9a:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8002c9c:	88bb      	ldrh	r3, [r7, #4]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3330      	adds	r3, #48	; 0x30
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	4b2d      	ldr	r3, [pc, #180]	; (8002d64 <DRV_CANFDSPI_ReadWord+0xdc>)
 8002cb0:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002cb2:	88bb      	ldrh	r3, [r7, #4]
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b2b      	ldr	r3, [pc, #172]	; (8002d64 <DRV_CANFDSPI_ReadWord+0xdc>)
 8002cb8:	705a      	strb	r2, [r3, #1]

  if(index==CAN2){
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d114      	bne.n	8002cea <DRV_CANFDSPI_ReadWord+0x62>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	4828      	ldr	r0, [pc, #160]	; (8002d68 <DRV_CANFDSPI_ReadWord+0xe0>)
 8002cc6:	f004 f9b3 	bl	8007030 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002cca:	89bb      	ldrh	r3, [r7, #12]
 8002ccc:	2264      	movs	r2, #100	; 0x64
 8002cce:	9200      	str	r2, [sp, #0]
 8002cd0:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <DRV_CANFDSPI_ReadWord+0xe4>)
 8002cd2:	4924      	ldr	r1, [pc, #144]	; (8002d64 <DRV_CANFDSPI_ReadWord+0xdc>)
 8002cd4:	4826      	ldr	r0, [pc, #152]	; (8002d70 <DRV_CANFDSPI_ReadWord+0xe8>)
 8002cd6:	f006 fd11 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2120      	movs	r1, #32
 8002ce2:	4821      	ldr	r0, [pc, #132]	; (8002d68 <DRV_CANFDSPI_ReadWord+0xe0>)
 8002ce4:	f004 f9a4 	bl	8007030 <HAL_GPIO_WritePin>
 8002ce8:	e015      	b.n	8002d16 <DRV_CANFDSPI_ReadWord+0x8e>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002cea:	2200      	movs	r2, #0
 8002cec:	2120      	movs	r1, #32
 8002cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cf2:	f004 f99d 	bl	8007030 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002cf6:	89bb      	ldrh	r3, [r7, #12]
 8002cf8:	2264      	movs	r2, #100	; 0x64
 8002cfa:	9200      	str	r2, [sp, #0]
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <DRV_CANFDSPI_ReadWord+0xe4>)
 8002cfe:	4919      	ldr	r1, [pc, #100]	; (8002d64 <DRV_CANFDSPI_ReadWord+0xdc>)
 8002d00:	481b      	ldr	r0, [pc, #108]	; (8002d70 <DRV_CANFDSPI_ReadWord+0xe8>)
 8002d02:	f006 fcfb 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	2120      	movs	r1, #32
 8002d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d12:	f004 f98d 	bl	8007030 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 8002d16:	7bbb      	ldrb	r3, [r7, #14]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <DRV_CANFDSPI_ReadWord+0x9a>
      return spiTransferError;
 8002d1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d20:	e01c      	b.n	8002d5c <DRV_CANFDSPI_ReadWord+0xd4>
  }

  // Update data
  *rxd = 0;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8002d28:	2302      	movs	r3, #2
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e011      	b.n	8002d52 <DRV_CANFDSPI_ReadWord+0xca>
      x = (uint32_t) spiReceiveBuffer[i];
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	4a0e      	ldr	r2, [pc, #56]	; (8002d6c <DRV_CANFDSPI_ReadWord+0xe4>)
 8002d32:	5cd3      	ldrb	r3, [r2, r3]
 8002d34:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	7bfb      	ldrb	r3, [r7, #15]
 8002d3c:	3b02      	subs	r3, #2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	68b9      	ldr	r1, [r7, #8]
 8002d42:	fa01 f303 	lsl.w	r3, r1, r3
 8002d46:	441a      	add	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8002d4c:	7bfb      	ldrb	r3, [r7, #15]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b05      	cmp	r3, #5
 8002d56:	d9ea      	bls.n	8002d2e <DRV_CANFDSPI_ReadWord+0xa6>
  }

  return spiTransferError;
 8002d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	2000c788 	.word	0x2000c788
 8002d68:	48000800 	.word	0x48000800
 8002d6c:	2000c7e8 	.word	0x2000c7e8
 8002d70:	2000c9a0 	.word	0x2000c9a0

08002d74 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	603a      	str	r2, [r7, #0]
 8002d7e:	71fb      	strb	r3, [r7, #7]
 8002d80:	460b      	mov	r3, r1
 8002d82:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 8002d84:	2306      	movs	r3, #6
 8002d86:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8002d88:	88bb      	ldrh	r3, [r7, #4]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	3320      	adds	r3, #32
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <DRV_CANFDSPI_WriteWord+0xc0>)
 8002d9c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002d9e:	88bb      	ldrh	r3, [r7, #4]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <DRV_CANFDSPI_WriteWord+0xc0>)
 8002da4:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	e00b      	b.n	8002dc4 <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	40da      	lsrs	r2, r3
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
 8002db6:	3302      	adds	r3, #2
 8002db8:	b2d1      	uxtb	r1, r2
 8002dba:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <DRV_CANFDSPI_WriteWord+0xc0>)
 8002dbc:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d9f0      	bls.n	8002dac <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN2){
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d114      	bne.n	8002dfa <DRV_CANFDSPI_WriteWord+0x86>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	4818      	ldr	r0, [pc, #96]	; (8002e38 <DRV_CANFDSPI_WriteWord+0xc4>)
 8002dd6:	f004 f92b 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002dda:	89bb      	ldrh	r3, [r7, #12]
 8002ddc:	2264      	movs	r2, #100	; 0x64
 8002dde:	9200      	str	r2, [sp, #0]
 8002de0:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <DRV_CANFDSPI_WriteWord+0xc8>)
 8002de2:	4914      	ldr	r1, [pc, #80]	; (8002e34 <DRV_CANFDSPI_WriteWord+0xc0>)
 8002de4:	4816      	ldr	r0, [pc, #88]	; (8002e40 <DRV_CANFDSPI_WriteWord+0xcc>)
 8002de6:	f006 fc89 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002dea:	4603      	mov	r3, r0
 8002dec:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002dee:	2201      	movs	r2, #1
 8002df0:	2120      	movs	r1, #32
 8002df2:	4811      	ldr	r0, [pc, #68]	; (8002e38 <DRV_CANFDSPI_WriteWord+0xc4>)
 8002df4:	f004 f91c 	bl	8007030 <HAL_GPIO_WritePin>
 8002df8:	e015      	b.n	8002e26 <DRV_CANFDSPI_WriteWord+0xb2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e02:	f004 f915 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002e06:	89bb      	ldrh	r3, [r7, #12]
 8002e08:	2264      	movs	r2, #100	; 0x64
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <DRV_CANFDSPI_WriteWord+0xc8>)
 8002e0e:	4909      	ldr	r1, [pc, #36]	; (8002e34 <DRV_CANFDSPI_WriteWord+0xc0>)
 8002e10:	480b      	ldr	r0, [pc, #44]	; (8002e40 <DRV_CANFDSPI_WriteWord+0xcc>)
 8002e12:	f006 fc73 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002e16:	4603      	mov	r3, r0
 8002e18:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2120      	movs	r1, #32
 8002e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e22:	f004 f905 	bl	8007030 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 8002e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	2000c788 	.word	0x2000c788
 8002e38:	48000800 	.word	0x48000800
 8002e3c:	2000c7e8 	.word	0x2000c7e8
 8002e40:	2000c9a0 	.word	0x2000c9a0

08002e44 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	603a      	str	r2, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
 8002e50:	460b      	mov	r3, r1
 8002e52:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 8002e54:	2304      	movs	r3, #4
 8002e56:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8002e58:	88bb      	ldrh	r3, [r7, #4]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3330      	adds	r3, #48	; 0x30
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	4b2e      	ldr	r3, [pc, #184]	; (8002f24 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 8002e6c:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002e6e:	88bb      	ldrh	r3, [r7, #4]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4b2c      	ldr	r3, [pc, #176]	; (8002f24 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 8002e74:	705a      	strb	r2, [r3, #1]

    if(index==CAN2){
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d114      	bne.n	8002ea6 <DRV_CANFDSPI_ReadHalfWord+0x62>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2120      	movs	r1, #32
 8002e80:	4829      	ldr	r0, [pc, #164]	; (8002f28 <DRV_CANFDSPI_ReadHalfWord+0xe4>)
 8002e82:	f004 f8d5 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002e86:	89bb      	ldrh	r3, [r7, #12]
 8002e88:	2264      	movs	r2, #100	; 0x64
 8002e8a:	9200      	str	r2, [sp, #0]
 8002e8c:	4a27      	ldr	r2, [pc, #156]	; (8002f2c <DRV_CANFDSPI_ReadHalfWord+0xe8>)
 8002e8e:	4925      	ldr	r1, [pc, #148]	; (8002f24 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 8002e90:	4827      	ldr	r0, [pc, #156]	; (8002f30 <DRV_CANFDSPI_ReadHalfWord+0xec>)
 8002e92:	f006 fc33 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002e96:	4603      	mov	r3, r0
 8002e98:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	2120      	movs	r1, #32
 8002e9e:	4822      	ldr	r0, [pc, #136]	; (8002f28 <DRV_CANFDSPI_ReadHalfWord+0xe4>)
 8002ea0:	f004 f8c6 	bl	8007030 <HAL_GPIO_WritePin>
 8002ea4:	e015      	b.n	8002ed2 <DRV_CANFDSPI_ReadHalfWord+0x8e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eae:	f004 f8bf 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002eb2:	89bb      	ldrh	r3, [r7, #12]
 8002eb4:	2264      	movs	r2, #100	; 0x64
 8002eb6:	9200      	str	r2, [sp, #0]
 8002eb8:	4a1c      	ldr	r2, [pc, #112]	; (8002f2c <DRV_CANFDSPI_ReadHalfWord+0xe8>)
 8002eba:	491a      	ldr	r1, [pc, #104]	; (8002f24 <DRV_CANFDSPI_ReadHalfWord+0xe0>)
 8002ebc:	481c      	ldr	r0, [pc, #112]	; (8002f30 <DRV_CANFDSPI_ReadHalfWord+0xec>)
 8002ebe:	f006 fc1d 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2120      	movs	r1, #32
 8002eca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ece:	f004 f8af 	bl	8007030 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 8002ed2:	7bbb      	ldrb	r3, [r7, #14]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <DRV_CANFDSPI_ReadHalfWord+0x9a>
        return spiTransferError;
 8002ed8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002edc:	e01e      	b.n	8002f1c <DRV_CANFDSPI_ReadHalfWord+0xd8>
    }

    // Update data
    *rxd = 0;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	73fb      	strb	r3, [r7, #15]
 8002ee8:	e013      	b.n	8002f12 <DRV_CANFDSPI_ReadHalfWord+0xce>
        x = (uint32_t) spiReceiveBuffer[i];
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	4a0f      	ldr	r2, [pc, #60]	; (8002f2c <DRV_CANFDSPI_ReadHalfWord+0xe8>)
 8002eee:	5cd3      	ldrb	r3, [r2, r3]
 8002ef0:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	3b02      	subs	r3, #2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	fa01 f303 	lsl.w	r3, r1, r3
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d9e8      	bls.n	8002eea <DRV_CANFDSPI_ReadHalfWord+0xa6>
    }

    return spiTransferError;
 8002f18:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3710      	adds	r7, #16
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	2000c788 	.word	0x2000c788
 8002f28:	48000800 	.word	0x48000800
 8002f2c:	2000c7e8 	.word	0x2000c7e8
 8002f30:	2000c9a0 	.word	0x2000c9a0

08002f34 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	80bb      	strh	r3, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 8002f46:	2304      	movs	r3, #4
 8002f48:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8002f4a:	88bb      	ldrh	r3, [r7, #4]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3320      	adds	r3, #32
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	4b25      	ldr	r3, [pc, #148]	; (8002ff4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 8002f5e:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8002f60:	88bb      	ldrh	r3, [r7, #4]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b23      	ldr	r3, [pc, #140]	; (8002ff4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 8002f66:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e00b      	b.n	8002f86 <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	411a      	asrs	r2, r3
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
 8002f78:	3302      	adds	r3, #2
 8002f7a:	b2d1      	uxtb	r1, r2
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 8002f7e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	3301      	adds	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d9f0      	bls.n	8002f6e <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN2){
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d114      	bne.n	8002fbc <DRV_CANFDSPI_WriteHalfWord+0x88>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8002f92:	2200      	movs	r2, #0
 8002f94:	2120      	movs	r1, #32
 8002f96:	4818      	ldr	r0, [pc, #96]	; (8002ff8 <DRV_CANFDSPI_WriteHalfWord+0xc4>)
 8002f98:	f004 f84a 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002f9c:	89bb      	ldrh	r3, [r7, #12]
 8002f9e:	2264      	movs	r2, #100	; 0x64
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	4a16      	ldr	r2, [pc, #88]	; (8002ffc <DRV_CANFDSPI_WriteHalfWord+0xc8>)
 8002fa4:	4913      	ldr	r1, [pc, #76]	; (8002ff4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 8002fa6:	4816      	ldr	r0, [pc, #88]	; (8003000 <DRV_CANFDSPI_WriteHalfWord+0xcc>)
 8002fa8:	f006 fba8 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002fac:	4603      	mov	r3, r0
 8002fae:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	4810      	ldr	r0, [pc, #64]	; (8002ff8 <DRV_CANFDSPI_WriteHalfWord+0xc4>)
 8002fb6:	f004 f83b 	bl	8007030 <HAL_GPIO_WritePin>
 8002fba:	e015      	b.n	8002fe8 <DRV_CANFDSPI_WriteHalfWord+0xb4>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fc4:	f004 f834 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8002fc8:	89bb      	ldrh	r3, [r7, #12]
 8002fca:	2264      	movs	r2, #100	; 0x64
 8002fcc:	9200      	str	r2, [sp, #0]
 8002fce:	4a0b      	ldr	r2, [pc, #44]	; (8002ffc <DRV_CANFDSPI_WriteHalfWord+0xc8>)
 8002fd0:	4908      	ldr	r1, [pc, #32]	; (8002ff4 <DRV_CANFDSPI_WriteHalfWord+0xc0>)
 8002fd2:	480b      	ldr	r0, [pc, #44]	; (8003000 <DRV_CANFDSPI_WriteHalfWord+0xcc>)
 8002fd4:	f006 fb92 	bl	80096fc <HAL_SPI_TransmitReceive>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2120      	movs	r1, #32
 8002fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fe4:	f004 f824 	bl	8007030 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8002fe8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000c788 	.word	0x2000c788
 8002ff8:	48000800 	.word	0x48000800
 8002ffc:	2000c7e8 	.word	0x2000c7e8
 8003000:	2000c9a0 	.word	0x2000c9a0

08003004 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60ba      	str	r2, [r7, #8]
 800300c:	461a      	mov	r2, r3
 800300e:	4603      	mov	r3, r0
 8003010:	73fb      	strb	r3, [r7, #15]
 8003012:	460b      	mov	r3, r1
 8003014:	81bb      	strh	r3, [r7, #12]
 8003016:	4613      	mov	r3, r2
 8003018:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	3302      	adds	r3, #2
 800301e:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8003020:	8a7b      	ldrh	r3, [r7, #18]
 8003022:	2b60      	cmp	r3, #96	; 0x60
 8003024:	d902      	bls.n	800302c <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 8003026:	f04f 33ff 	mov.w	r3, #4294967295
 800302a:	e05e      	b.n	80030ea <DRV_CANFDSPI_ReadByteArray+0xe6>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800302c:	89bb      	ldrh	r3, [r7, #12]
 800302e:	0a1b      	lsrs	r3, r3, #8
 8003030:	b29b      	uxth	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	b2db      	uxtb	r3, r3
 800303a:	3330      	adds	r3, #48	; 0x30
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8003040:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003042:	89bb      	ldrh	r3, [r7, #12]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4b2b      	ldr	r3, [pc, #172]	; (80030f4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8003048:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 800304a:	2302      	movs	r3, #2
 800304c:	82fb      	strh	r3, [r7, #22]
 800304e:	e006      	b.n	800305e <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 8003050:	8afb      	ldrh	r3, [r7, #22]
 8003052:	4a28      	ldr	r2, [pc, #160]	; (80030f4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8003054:	2100      	movs	r1, #0
 8003056:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8003058:	8afb      	ldrh	r3, [r7, #22]
 800305a:	3301      	adds	r3, #1
 800305c:	82fb      	strh	r3, [r7, #22]
 800305e:	8afa      	ldrh	r2, [r7, #22]
 8003060:	8a7b      	ldrh	r3, [r7, #18]
 8003062:	429a      	cmp	r2, r3
 8003064:	d3f4      	bcc.n	8003050 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN2){
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d114      	bne.n	8003096 <DRV_CANFDSPI_ReadByteArray+0x92>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800306c:	2200      	movs	r2, #0
 800306e:	2120      	movs	r1, #32
 8003070:	4821      	ldr	r0, [pc, #132]	; (80030f8 <DRV_CANFDSPI_ReadByteArray+0xf4>)
 8003072:	f003 ffdd 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8003076:	8a7b      	ldrh	r3, [r7, #18]
 8003078:	2264      	movs	r2, #100	; 0x64
 800307a:	9200      	str	r2, [sp, #0]
 800307c:	4a1f      	ldr	r2, [pc, #124]	; (80030fc <DRV_CANFDSPI_ReadByteArray+0xf8>)
 800307e:	491d      	ldr	r1, [pc, #116]	; (80030f4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 8003080:	481f      	ldr	r0, [pc, #124]	; (8003100 <DRV_CANFDSPI_ReadByteArray+0xfc>)
 8003082:	f006 fb3b 	bl	80096fc <HAL_SPI_TransmitReceive>
 8003086:	4603      	mov	r3, r0
 8003088:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 800308a:	2201      	movs	r2, #1
 800308c:	2120      	movs	r1, #32
 800308e:	481a      	ldr	r0, [pc, #104]	; (80030f8 <DRV_CANFDSPI_ReadByteArray+0xf4>)
 8003090:	f003 ffce 	bl	8007030 <HAL_GPIO_WritePin>
 8003094:	e015      	b.n	80030c2 <DRV_CANFDSPI_ReadByteArray+0xbe>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8003096:	2200      	movs	r2, #0
 8003098:	2120      	movs	r1, #32
 800309a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800309e:	f003 ffc7 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80030a2:	8a7b      	ldrh	r3, [r7, #18]
 80030a4:	2264      	movs	r2, #100	; 0x64
 80030a6:	9200      	str	r2, [sp, #0]
 80030a8:	4a14      	ldr	r2, [pc, #80]	; (80030fc <DRV_CANFDSPI_ReadByteArray+0xf8>)
 80030aa:	4912      	ldr	r1, [pc, #72]	; (80030f4 <DRV_CANFDSPI_ReadByteArray+0xf0>)
 80030ac:	4814      	ldr	r0, [pc, #80]	; (8003100 <DRV_CANFDSPI_ReadByteArray+0xfc>)
 80030ae:	f006 fb25 	bl	80096fc <HAL_SPI_TransmitReceive>
 80030b2:	4603      	mov	r3, r0
 80030b4:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80030b6:	2201      	movs	r2, #1
 80030b8:	2120      	movs	r1, #32
 80030ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030be:	f003 ffb7 	bl	8007030 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	82fb      	strh	r3, [r7, #22]
 80030c6:	e00a      	b.n	80030de <DRV_CANFDSPI_ReadByteArray+0xda>
        rxd[i] = spiReceiveBuffer[i + 2];
 80030c8:	8afb      	ldrh	r3, [r7, #22]
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	8afb      	ldrh	r3, [r7, #22]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	440b      	add	r3, r1
 80030d2:	490a      	ldr	r1, [pc, #40]	; (80030fc <DRV_CANFDSPI_ReadByteArray+0xf8>)
 80030d4:	5c8a      	ldrb	r2, [r1, r2]
 80030d6:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 80030d8:	8afb      	ldrh	r3, [r7, #22]
 80030da:	3301      	adds	r3, #1
 80030dc:	82fb      	strh	r3, [r7, #22]
 80030de:	8afa      	ldrh	r2, [r7, #22]
 80030e0:	88fb      	ldrh	r3, [r7, #6]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d3f0      	bcc.n	80030c8 <DRV_CANFDSPI_ReadByteArray+0xc4>
    }

    return spiTransferError;
 80030e6:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	2000c788 	.word	0x2000c788
 80030f8:	48000800 	.word	0x48000800
 80030fc:	2000c7e8 	.word	0x2000c7e8
 8003100:	2000c9a0 	.word	0x2000c9a0

08003104 <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60ba      	str	r2, [r7, #8]
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	460b      	mov	r3, r1
 8003114:	81bb      	strh	r3, [r7, #12]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	3302      	adds	r3, #2
 800311e:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8003120:	8a7b      	ldrh	r3, [r7, #18]
 8003122:	2b60      	cmp	r3, #96	; 0x60
 8003124:	d902      	bls.n	800312c <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295
 800312a:	e050      	b.n	80031ce <DRV_CANFDSPI_WriteByteArray+0xca>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800312c:	89bb      	ldrh	r3, [r7, #12]
 800312e:	0a1b      	lsrs	r3, r3, #8
 8003130:	b29b      	uxth	r3, r3
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f003 030f 	and.w	r3, r3, #15
 8003138:	b2db      	uxtb	r3, r3
 800313a:	3320      	adds	r3, #32
 800313c:	b2da      	uxtb	r2, r3
 800313e:	4b26      	ldr	r3, [pc, #152]	; (80031d8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 8003140:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8003142:	89bb      	ldrh	r3, [r7, #12]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	4b24      	ldr	r3, [pc, #144]	; (80031d8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 8003148:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 800314a:	2300      	movs	r3, #0
 800314c:	82fb      	strh	r3, [r7, #22]
 800314e:	e00a      	b.n	8003166 <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 8003150:	8afb      	ldrh	r3, [r7, #22]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	441a      	add	r2, r3
 8003156:	8afb      	ldrh	r3, [r7, #22]
 8003158:	3302      	adds	r3, #2
 800315a:	7811      	ldrb	r1, [r2, #0]
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 800315e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 8003160:	8afb      	ldrh	r3, [r7, #22]
 8003162:	3301      	adds	r3, #1
 8003164:	82fb      	strh	r3, [r7, #22]
 8003166:	8afa      	ldrh	r2, [r7, #22]
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	429a      	cmp	r2, r3
 800316c:	d3f0      	bcc.n	8003150 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN2){
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d114      	bne.n	800319e <DRV_CANFDSPI_WriteByteArray+0x9a>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8003174:	2200      	movs	r2, #0
 8003176:	2120      	movs	r1, #32
 8003178:	4818      	ldr	r0, [pc, #96]	; (80031dc <DRV_CANFDSPI_WriteByteArray+0xd8>)
 800317a:	f003 ff59 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800317e:	8a7b      	ldrh	r3, [r7, #18]
 8003180:	2264      	movs	r2, #100	; 0x64
 8003182:	9200      	str	r2, [sp, #0]
 8003184:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <DRV_CANFDSPI_WriteByteArray+0xdc>)
 8003186:	4914      	ldr	r1, [pc, #80]	; (80031d8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 8003188:	4816      	ldr	r0, [pc, #88]	; (80031e4 <DRV_CANFDSPI_WriteByteArray+0xe0>)
 800318a:	f006 fab7 	bl	80096fc <HAL_SPI_TransmitReceive>
 800318e:	4603      	mov	r3, r0
 8003190:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8003192:	2201      	movs	r2, #1
 8003194:	2120      	movs	r1, #32
 8003196:	4811      	ldr	r0, [pc, #68]	; (80031dc <DRV_CANFDSPI_WriteByteArray+0xd8>)
 8003198:	f003 ff4a 	bl	8007030 <HAL_GPIO_WritePin>
 800319c:	e015      	b.n	80031ca <DRV_CANFDSPI_WriteByteArray+0xc6>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800319e:	2200      	movs	r2, #0
 80031a0:	2120      	movs	r1, #32
 80031a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031a6:	f003 ff43 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80031aa:	8a7b      	ldrh	r3, [r7, #18]
 80031ac:	2264      	movs	r2, #100	; 0x64
 80031ae:	9200      	str	r2, [sp, #0]
 80031b0:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <DRV_CANFDSPI_WriteByteArray+0xdc>)
 80031b2:	4909      	ldr	r1, [pc, #36]	; (80031d8 <DRV_CANFDSPI_WriteByteArray+0xd4>)
 80031b4:	480b      	ldr	r0, [pc, #44]	; (80031e4 <DRV_CANFDSPI_WriteByteArray+0xe0>)
 80031b6:	f006 faa1 	bl	80096fc <HAL_SPI_TransmitReceive>
 80031ba:	4603      	mov	r3, r0
 80031bc:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80031be:	2201      	movs	r2, #1
 80031c0:	2120      	movs	r1, #32
 80031c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c6:	f003 ff33 	bl	8007030 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 80031ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	2000c788 	.word	0x2000c788
 80031dc:	48000800 	.word	0x48000800
 80031e0:	2000c7e8 	.word	0x2000c7e8
 80031e4:	2000c9a0 	.word	0x2000c9a0

080031e8 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	; 0x28
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60ba      	str	r2, [r7, #8]
 80031f0:	461a      	mov	r2, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	460b      	mov	r3, r1
 80031f8:	81bb      	strh	r3, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	b29b      	uxth	r3, r3
 8003204:	3302      	adds	r3, #2
 8003206:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	2b60      	cmp	r3, #96	; 0x60
 800320c:	d902      	bls.n	8003214 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e07a      	b.n	800330a <DRV_CANFDSPI_ReadWordArray+0x122>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8003214:	89bb      	ldrh	r3, [r7, #12]
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	b29b      	uxth	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3330      	adds	r3, #48	; 0x30
 8003224:	b2da      	uxtb	r2, r3
 8003226:	4b3b      	ldr	r3, [pc, #236]	; (8003314 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8003228:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 800322a:	89bb      	ldrh	r3, [r7, #12]
 800322c:	b2da      	uxtb	r2, r3
 800322e:	4b39      	ldr	r3, [pc, #228]	; (8003314 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8003230:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8003232:	2302      	movs	r3, #2
 8003234:	83fb      	strh	r3, [r7, #30]
 8003236:	e006      	b.n	8003246 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8003238:	8bfb      	ldrh	r3, [r7, #30]
 800323a:	4a36      	ldr	r2, [pc, #216]	; (8003314 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 800323c:	2100      	movs	r1, #0
 800323e:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8003240:	8bfb      	ldrh	r3, [r7, #30]
 8003242:	3301      	adds	r3, #1
 8003244:	83fb      	strh	r3, [r7, #30]
 8003246:	8bfa      	ldrh	r2, [r7, #30]
 8003248:	8afb      	ldrh	r3, [r7, #22]
 800324a:	429a      	cmp	r2, r3
 800324c:	d3f4      	bcc.n	8003238 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN2){
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d114      	bne.n	800327e <DRV_CANFDSPI_ReadWordArray+0x96>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8003254:	2200      	movs	r2, #0
 8003256:	2120      	movs	r1, #32
 8003258:	482f      	ldr	r0, [pc, #188]	; (8003318 <DRV_CANFDSPI_ReadWordArray+0x130>)
 800325a:	f003 fee9 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800325e:	8afb      	ldrh	r3, [r7, #22]
 8003260:	2264      	movs	r2, #100	; 0x64
 8003262:	9200      	str	r2, [sp, #0]
 8003264:	4a2d      	ldr	r2, [pc, #180]	; (800331c <DRV_CANFDSPI_ReadWordArray+0x134>)
 8003266:	492b      	ldr	r1, [pc, #172]	; (8003314 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8003268:	482d      	ldr	r0, [pc, #180]	; (8003320 <DRV_CANFDSPI_ReadWordArray+0x138>)
 800326a:	f006 fa47 	bl	80096fc <HAL_SPI_TransmitReceive>
 800326e:	4603      	mov	r3, r0
 8003270:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8003272:	2201      	movs	r2, #1
 8003274:	2120      	movs	r1, #32
 8003276:	4828      	ldr	r0, [pc, #160]	; (8003318 <DRV_CANFDSPI_ReadWordArray+0x130>)
 8003278:	f003 feda 	bl	8007030 <HAL_GPIO_WritePin>
 800327c:	e015      	b.n	80032aa <DRV_CANFDSPI_ReadWordArray+0xc2>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800327e:	2200      	movs	r2, #0
 8003280:	2120      	movs	r1, #32
 8003282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003286:	f003 fed3 	bl	8007030 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800328a:	8afb      	ldrh	r3, [r7, #22]
 800328c:	2264      	movs	r2, #100	; 0x64
 800328e:	9200      	str	r2, [sp, #0]
 8003290:	4a22      	ldr	r2, [pc, #136]	; (800331c <DRV_CANFDSPI_ReadWordArray+0x134>)
 8003292:	4920      	ldr	r1, [pc, #128]	; (8003314 <DRV_CANFDSPI_ReadWordArray+0x12c>)
 8003294:	4822      	ldr	r0, [pc, #136]	; (8003320 <DRV_CANFDSPI_ReadWordArray+0x138>)
 8003296:	f006 fa31 	bl	80096fc <HAL_SPI_TransmitReceive>
 800329a:	4603      	mov	r3, r0
 800329c:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800329e:	2201      	movs	r2, #1
 80032a0:	2120      	movs	r1, #32
 80032a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a6:	f003 fec3 	bl	8007030 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 80032aa:	7e7b      	ldrb	r3, [r7, #25]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <DRV_CANFDSPI_ReadWordArray+0xce>
        return spiTransferError;
 80032b0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80032b4:	e029      	b.n	800330a <DRV_CANFDSPI_ReadWordArray+0x122>
    }

    // Convert Byte array to Word array
    n = 2;
 80032b6:	2302      	movs	r3, #2
 80032b8:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 80032ba:	2300      	movs	r3, #0
 80032bc:	83fb      	strh	r3, [r7, #30]
 80032be:	e01e      	b.n	80032fe <DRV_CANFDSPI_ReadWordArray+0x116>
        w.word = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 80032c4:	2300      	movs	r3, #0
 80032c6:	83bb      	strh	r3, [r7, #28]
 80032c8:	e00d      	b.n	80032e6 <DRV_CANFDSPI_ReadWordArray+0xfe>
            w.byte[j] = spiReceiveBuffer[n];
 80032ca:	8b7a      	ldrh	r2, [r7, #26]
 80032cc:	8bbb      	ldrh	r3, [r7, #28]
 80032ce:	4913      	ldr	r1, [pc, #76]	; (800331c <DRV_CANFDSPI_ReadWordArray+0x134>)
 80032d0:	5c8a      	ldrb	r2, [r1, r2]
 80032d2:	3320      	adds	r3, #32
 80032d4:	443b      	add	r3, r7
 80032d6:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 80032da:	8bbb      	ldrh	r3, [r7, #28]
 80032dc:	3301      	adds	r3, #1
 80032de:	83bb      	strh	r3, [r7, #28]
 80032e0:	8b7b      	ldrh	r3, [r7, #26]
 80032e2:	3301      	adds	r3, #1
 80032e4:	837b      	strh	r3, [r7, #26]
 80032e6:	8bbb      	ldrh	r3, [r7, #28]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d9ee      	bls.n	80032ca <DRV_CANFDSPI_ReadWordArray+0xe2>
        }
        rxd[i] = w.word;
 80032ec:	8bfb      	ldrh	r3, [r7, #30]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	4413      	add	r3, r2
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 80032f8:	8bfb      	ldrh	r3, [r7, #30]
 80032fa:	3301      	adds	r3, #1
 80032fc:	83fb      	strh	r3, [r7, #30]
 80032fe:	8bfa      	ldrh	r2, [r7, #30]
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	429a      	cmp	r2, r3
 8003304:	d3dc      	bcc.n	80032c0 <DRV_CANFDSPI_ReadWordArray+0xd8>
    }

    return spiTransferError;
 8003306:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000c788 	.word	0x2000c788
 8003318:	48000800 	.word	0x48000800
 800331c:	2000c7e8 	.word	0x2000c7e8
 8003320:	2000c9a0 	.word	0x2000c9a0

08003324 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	4603      	mov	r3, r0
 800332c:	6039      	str	r1, [r7, #0]
 800332e:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8003334:	4b41      	ldr	r3, [pc, #260]	; (800343c <DRV_CANFDSPI_Configure+0x118>)
 8003336:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003340:	b2da      	uxtb	r2, r3
 8003342:	7a3b      	ldrb	r3, [r7, #8]
 8003344:	f362 0304 	bfi	r3, r2, #0, #5
 8003348:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	7a3b      	ldrb	r3, [r7, #8]
 8003356:	f362 1345 	bfi	r3, r2, #5, #1
 800335a:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	7a3b      	ldrb	r3, [r7, #8]
 8003368:	f362 1386 	bfi	r3, r2, #6, #1
 800336c:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003376:	b2da      	uxtb	r2, r3
 8003378:	7a7b      	ldrb	r3, [r7, #9]
 800337a:	f362 0300 	bfi	r3, r2, #0, #1
 800337e:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	785b      	ldrb	r3, [r3, #1]
 8003384:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003388:	b2da      	uxtb	r2, r3
 800338a:	7a7b      	ldrb	r3, [r7, #9]
 800338c:	f362 0342 	bfi	r3, r2, #1, #2
 8003390:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	785b      	ldrb	r3, [r3, #1]
 8003396:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800339a:	b2da      	uxtb	r2, r3
 800339c:	7a7b      	ldrb	r3, [r7, #9]
 800339e:	f362 1304 	bfi	r3, r2, #4, #1
 80033a2:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	785b      	ldrb	r3, [r3, #1]
 80033a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	7abb      	ldrb	r3, [r7, #10]
 80033b0:	f362 0300 	bfi	r3, r2, #0, #1
 80033b4:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033be:	b2da      	uxtb	r2, r3
 80033c0:	7abb      	ldrb	r3, [r7, #10]
 80033c2:	f362 0341 	bfi	r3, r2, #1, #1
 80033c6:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	785b      	ldrb	r3, [r3, #1]
 80033cc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	7abb      	ldrb	r3, [r7, #10]
 80033d4:	f362 0382 	bfi	r3, r2, #2, #1
 80033d8:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	785b      	ldrb	r3, [r3, #1]
 80033de:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	7abb      	ldrb	r3, [r7, #10]
 80033e6:	f362 03c3 	bfi	r3, r2, #3, #1
 80033ea:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033f4:	b2da      	uxtb	r2, r3
 80033f6:	7abb      	ldrb	r3, [r7, #10]
 80033f8:	f362 1304 	bfi	r3, r2, #4, #1
 80033fc:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	789b      	ldrb	r3, [r3, #2]
 8003402:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003406:	b2da      	uxtb	r2, r3
 8003408:	7afb      	ldrb	r3, [r7, #11]
 800340a:	f362 1307 	bfi	r3, r2, #4, #4
 800340e:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff fcac 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 800341c:	4603      	mov	r3, r0
 800341e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8003428:	f04f 33ff 	mov.w	r3, #4294967295
 800342c:	e001      	b.n	8003432 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 800342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	04980760 	.word	0x04980760

08003440 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8003448:	4b3a      	ldr	r3, [pc, #232]	; (8003534 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 800344a:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 800344c:	7b3b      	ldrb	r3, [r7, #12]
 800344e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003452:	b2d9      	uxtb	r1, r3
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	7813      	ldrb	r3, [r2, #0]
 8003458:	f361 0304 	bfi	r3, r1, #0, #5
 800345c:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 800345e:	7b3b      	ldrb	r3, [r7, #12]
 8003460:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003464:	b2d9      	uxtb	r1, r3
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	7813      	ldrb	r3, [r2, #0]
 800346a:	f361 1345 	bfi	r3, r1, #5, #1
 800346e:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8003470:	7b3b      	ldrb	r3, [r7, #12]
 8003472:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003476:	b2d9      	uxtb	r1, r3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	7813      	ldrb	r3, [r2, #0]
 800347c:	f361 1386 	bfi	r3, r1, #6, #1
 8003480:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8003482:	7b7b      	ldrb	r3, [r7, #13]
 8003484:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003488:	b2d9      	uxtb	r1, r3
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	7813      	ldrb	r3, [r2, #0]
 800348e:	f361 13c7 	bfi	r3, r1, #7, #1
 8003492:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8003494:	7b7b      	ldrb	r3, [r7, #13]
 8003496:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800349a:	b2d9      	uxtb	r1, r3
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	7853      	ldrb	r3, [r2, #1]
 80034a0:	f361 0301 	bfi	r3, r1, #0, #2
 80034a4:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 80034a6:	7b7b      	ldrb	r3, [r7, #13]
 80034a8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034ac:	b2d9      	uxtb	r1, r3
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	7853      	ldrb	r3, [r2, #1]
 80034b2:	f361 0382 	bfi	r3, r1, #2, #1
 80034b6:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034be:	b2d9      	uxtb	r1, r3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	7853      	ldrb	r3, [r2, #1]
 80034c4:	f361 03c3 	bfi	r3, r1, #3, #1
 80034c8:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 80034ca:	7bbb      	ldrb	r3, [r7, #14]
 80034cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034d0:	b2d9      	uxtb	r1, r3
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	7853      	ldrb	r3, [r2, #1]
 80034d6:	f361 1304 	bfi	r3, r1, #4, #1
 80034da:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 80034dc:	7bbb      	ldrb	r3, [r7, #14]
 80034de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80034e2:	b2d9      	uxtb	r1, r3
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	7853      	ldrb	r3, [r2, #1]
 80034e8:	f361 1345 	bfi	r3, r1, #5, #1
 80034ec:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 80034ee:	7bbb      	ldrb	r3, [r7, #14]
 80034f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80034f4:	b2d9      	uxtb	r1, r3
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	7853      	ldrb	r3, [r2, #1]
 80034fa:	f361 1386 	bfi	r3, r1, #6, #1
 80034fe:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8003500:	7bbb      	ldrb	r3, [r7, #14]
 8003502:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003506:	b2d9      	uxtb	r1, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	7853      	ldrb	r3, [r2, #1]
 800350c:	f361 13c7 	bfi	r3, r1, #7, #1
 8003510:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003518:	b2d9      	uxtb	r1, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	7893      	ldrb	r3, [r2, #2]
 800351e:	f361 0303 	bfi	r3, r1, #0, #4
 8003522:	7093      	strb	r3, [r2, #2]

    return 0;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	04980760 	.word	0x04980760

08003538 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	460a      	mov	r2, r1
 8003542:	71fb      	strb	r3, [r7, #7]
 8003544:	4613      	mov	r3, r2
 8003546:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8003548:	2300      	movs	r3, #0
 800354a:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8003550:	f107 020e 	add.w	r2, r7, #14
 8003554:	79fb      	ldrb	r3, [r7, #7]
 8003556:	2103      	movs	r1, #3
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fadf 	bl	8002b1c <DRV_CANFDSPI_ReadByte>
 800355e:	4603      	mov	r3, r0
 8003560:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	e01a      	b.n	80035a6 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8003570:	7bbb      	ldrb	r3, [r7, #14]
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	b2db      	uxtb	r3, r3
 8003578:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 800357a:	7bba      	ldrb	r2, [r7, #14]
 800357c:	79bb      	ldrb	r3, [r7, #6]
 800357e:	4313      	orrs	r3, r2
 8003580:	b2db      	uxtb	r3, r3
 8003582:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8003584:	7bba      	ldrb	r2, [r7, #14]
 8003586:	79fb      	ldrb	r3, [r7, #7]
 8003588:	2103      	movs	r1, #3
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff fb22 	bl	8002bd4 <DRV_CANFDSPI_WriteByte>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d002      	beq.n	80035a2 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 800359c:	f06f 0301 	mvn.w	r3, #1
 80035a0:	e001      	b.n	80035a6 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 80035a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	4603      	mov	r3, r0
 80035b8:	603a      	str	r2, [r7, #0]
 80035ba:	71fb      	strb	r3, [r7, #7]
 80035bc:	460b      	mov	r3, r1
 80035be:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80035c4:	2300      	movs	r3, #0
 80035c6:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80035c8:	4b24      	ldr	r3, [pc, #144]	; (800365c <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 80035ca:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 80035cc:	7a3b      	ldrb	r3, [r7, #8]
 80035ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d2:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	785b      	ldrb	r3, [r3, #1]
 80035d8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	7afb      	ldrb	r3, [r7, #11]
 80035e0:	f362 0304 	bfi	r3, r2, #0, #5
 80035e4:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	785b      	ldrb	r3, [r3, #1]
 80035ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	7afb      	ldrb	r3, [r7, #11]
 80035f2:	f362 1347 	bfi	r3, r2, #5, #3
 80035f6:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8003600:	b2da      	uxtb	r2, r3
 8003602:	7abb      	ldrb	r3, [r7, #10]
 8003604:	f362 1346 	bfi	r3, r2, #5, #2
 8003608:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003612:	b2da      	uxtb	r2, r3
 8003614:	7abb      	ldrb	r3, [r7, #10]
 8003616:	f362 0304 	bfi	r3, r2, #0, #5
 800361a:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003624:	b2da      	uxtb	r2, r3
 8003626:	7a3b      	ldrb	r3, [r7, #8]
 8003628:	f362 1386 	bfi	r3, r2, #6, #1
 800362c:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800362e:	79bb      	ldrb	r3, [r7, #6]
 8003630:	b29b      	uxth	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	0052      	lsls	r2, r2, #1
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	b29b      	uxth	r3, r3
 800363c:	3350      	adds	r3, #80	; 0x50
 800363e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	89b9      	ldrh	r1, [r7, #12]
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	4618      	mov	r0, r3
 8003648:	f7ff fb94 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 800364c:	4603      	mov	r3, r0
 800364e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003650:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003654:	4618      	mov	r0, r3
 8003656:	3710      	adds	r7, #16
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	00600400 	.word	0x00600400

08003660 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8003668:	4b1a      	ldr	r3, [pc, #104]	; (80036d4 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 800366a:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 800366c:	7b3b      	ldrb	r3, [r7, #12]
 800366e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003672:	b2d9      	uxtb	r1, r3
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	7813      	ldrb	r3, [r2, #0]
 8003678:	f361 0300 	bfi	r3, r1, #0, #1
 800367c:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 800367e:	7bbb      	ldrb	r3, [r7, #14]
 8003680:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003684:	b2d9      	uxtb	r1, r3
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	7813      	ldrb	r3, [r2, #0]
 800368a:	f361 0345 	bfi	r3, r1, #1, #5
 800368e:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8003690:	7bbb      	ldrb	r3, [r7, #14]
 8003692:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8003696:	b2d9      	uxtb	r1, r3
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	7813      	ldrb	r3, [r2, #0]
 800369c:	f361 1387 	bfi	r3, r1, #6, #2
 80036a0:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80036a8:	b2d9      	uxtb	r1, r3
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	7853      	ldrb	r3, [r2, #1]
 80036ae:	f361 0304 	bfi	r3, r1, #0, #5
 80036b2:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80036ba:	b2d9      	uxtb	r1, r3
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	7853      	ldrb	r3, [r2, #1]
 80036c0:	f361 1347 	bfi	r3, r1, #5, #3
 80036c4:	7053      	strb	r3, [r2, #1]

    return 0;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	00600400 	.word	0x00600400

080036d8 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b0a0      	sub	sp, #128	; 0x80
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60ba      	str	r2, [r7, #8]
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
 80036e6:	460b      	mov	r3, r1
 80036e8:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80036f0:	7bbb      	ldrb	r3, [r7, #14]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	0052      	lsls	r2, r2, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	3350      	adds	r3, #80	; 0x50
 8003700:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8003704:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003708:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800370c:	7bf8      	ldrb	r0, [r7, #15]
 800370e:	2303      	movs	r3, #3
 8003710:	f7ff fd6a 	bl	80031e8 <DRV_CANFDSPI_ReadWordArray>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 800371a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8003722:	f04f 33ff 	mov.w	r3, #4294967295
 8003726:	e0c5      	b.n	80038b4 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8003728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800372a:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 800372c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8003730:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 800373a:	f06f 0301 	mvn.w	r3, #1
 800373e:	e0b9      	b.n	80038b4 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	791b      	ldrb	r3, [r3, #4]
 8003744:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003748:	b2db      	uxtb	r3, r3
 800374a:	4618      	mov	r0, r3
 800374c:	f001 fc10 	bl	8004f70 <DRV_CANFDSPI_DlcToDataBytes>
 8003750:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 8003752:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003758:	429a      	cmp	r2, r3
 800375a:	d202      	bcs.n	8003762 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 800375c:	f06f 0302 	mvn.w	r3, #2
 8003760:	e0a8      	b.n	80038b4 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 8003766:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003768:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 800376a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800376e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003772:	b29b      	uxth	r3, r3
 8003774:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 8003778:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800377c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003780:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	789b      	ldrb	r3, [r3, #2]
 8003794:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	78db      	ldrb	r3, [r3, #3]
 800379a:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	791b      	ldrb	r3, [r3, #4]
 80037a0:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	795b      	ldrb	r3, [r3, #5]
 80037a6:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	799b      	ldrb	r3, [r3, #6]
 80037ac:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	79db      	ldrb	r3, [r3, #7]
 80037b2:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 80037b4:	2300      	movs	r3, #0
 80037b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037ba:	e010      	b.n	80037de <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 80037bc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	441a      	add	r2, r3
 80037c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037c8:	3308      	adds	r3, #8
 80037ca:	7812      	ldrb	r2, [r2, #0]
 80037cc:	3380      	adds	r3, #128	; 0x80
 80037ce:	443b      	add	r3, r7
 80037d0:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 80037d4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037d8:	3301      	adds	r3, #1
 80037da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80037e2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d8e8      	bhi.n	80037bc <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 80037f0:	2300      	movs	r3, #0
 80037f2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 80037f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d02b      	beq.n	800385a <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8003802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003806:	b29b      	uxth	r3, r3
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	b29b      	uxth	r3, r3
 800380e:	f1c3 0304 	rsb	r3, r3, #4
 8003812:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8003816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800381a:	b2db      	uxtb	r3, r3
 800381c:	3308      	adds	r3, #8
 800381e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8003822:	2300      	movs	r3, #0
 8003824:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8003828:	e010      	b.n	800384c <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 800382a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800382e:	f103 0208 	add.w	r2, r3, #8
 8003832:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003836:	4413      	add	r3, r2
 8003838:	3380      	adds	r3, #128	; 0x80
 800383a:	443b      	add	r3, r7
 800383c:	2200      	movs	r2, #0
 800383e:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8003842:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003846:	3301      	adds	r3, #1
 8003848:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800384c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8003850:	b29b      	uxth	r3, r3
 8003852:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8003856:	429a      	cmp	r2, r3
 8003858:	d8e7      	bhi.n	800382a <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 800385a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800385e:	b29a      	uxth	r2, r3
 8003860:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003864:	4413      	add	r3, r2
 8003866:	b29b      	uxth	r3, r3
 8003868:	3308      	adds	r3, #8
 800386a:	b29b      	uxth	r3, r3
 800386c:	f107 0210 	add.w	r2, r7, #16
 8003870:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8003874:	7bf8      	ldrb	r0, [r7, #15]
 8003876:	f7ff fc45 	bl	8003104 <DRV_CANFDSPI_WriteByteArray>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 8003880:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 8003888:	f06f 0303 	mvn.w	r3, #3
 800388c:	e012      	b.n	80038b4 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 800388e:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8003892:	7bb9      	ldrb	r1, [r7, #14]
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f810 	bl	80038bc <DRV_CANFDSPI_TransmitChannelUpdate>
 800389c:	4603      	mov	r3, r0
 800389e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 80038a2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 80038aa:	f06f 0304 	mvn.w	r3, #4
 80038ae:	e001      	b.n	80038b4 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 80038b0:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3780      	adds	r7, #128	; 0x80
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	4603      	mov	r3, r0
 80038c4:	71fb      	strb	r3, [r7, #7]
 80038c6:	460b      	mov	r3, r1
 80038c8:	71bb      	strb	r3, [r7, #6]
 80038ca:	4613      	mov	r3, r2
 80038cc:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80038d2:	79bb      	ldrb	r3, [r7, #6]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	0052      	lsls	r2, r2, #1
 80038da:	4413      	add	r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3351      	adds	r3, #81	; 0x51
 80038e2:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 80038e8:	7a7b      	ldrb	r3, [r7, #9]
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 80038f0:	797b      	ldrb	r3, [r7, #5]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 80038f6:	7a7b      	ldrb	r3, [r7, #9]
 80038f8:	f043 0302 	orr.w	r3, r3, #2
 80038fc:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80038fe:	7a7a      	ldrb	r2, [r7, #9]
 8003900:	89b9      	ldrh	r1, [r7, #12]
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff f965 	bl	8002bd4 <DRV_CANFDSPI_WriteByte>
 800390a:	4603      	mov	r3, r0
 800390c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	e001      	b.n	8003920 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 800391c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	603a      	str	r2, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
 8003934:	460b      	mov	r3, r1
 8003936:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8003946:	79bb      	ldrb	r3, [r7, #6]
 8003948:	333e      	adds	r3, #62	; 0x3e
 800394a:	b29b      	uxth	r3, r3
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	89b9      	ldrh	r1, [r7, #12]
 8003954:	79fb      	ldrb	r3, [r7, #7]
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fa0c 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 800395c:	4603      	mov	r3, r0
 800395e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	603a      	str	r2, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
 8003978:	460b      	mov	r3, r1
 800397a:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 800398a:	79bb      	ldrb	r3, [r7, #6]
 800398c:	b29b      	uxth	r3, r3
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	b29b      	uxth	r3, r3
 8003992:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003996:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	89b9      	ldrh	r1, [r7, #12]
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7ff f9e8 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 80039a4:	4603      	mov	r3, r0
 80039a6:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80039a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4604      	mov	r4, r0
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4623      	mov	r3, r4
 80039c4:	71fb      	strb	r3, [r7, #7]
 80039c6:	4603      	mov	r3, r0
 80039c8:	71bb      	strb	r3, [r7, #6]
 80039ca:	460b      	mov	r3, r1
 80039cc:	717b      	strb	r3, [r7, #5]
 80039ce:	4613      	mov	r3, r2
 80039d0:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 80039d6:	793b      	ldrb	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 80039dc:	7a3b      	ldrb	r3, [r7, #8]
 80039de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e2:	723b      	strb	r3, [r7, #8]
 80039e4:	e003      	b.n	80039ee <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 80039e6:	7a3b      	ldrb	r3, [r7, #8]
 80039e8:	f36f 13c7 	bfc	r3, #7, #1
 80039ec:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 80039ee:	797b      	ldrb	r3, [r7, #5]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	7a3b      	ldrb	r3, [r7, #8]
 80039f8:	f362 0304 	bfi	r3, r2, #0, #5
 80039fc:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80039fe:	79bb      	ldrb	r3, [r7, #6]
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8003a06:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8003a08:	7a3a      	ldrb	r2, [r7, #8]
 8003a0a:	89b9      	ldrh	r1, [r7, #12]
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff f8e0 	bl	8002bd4 <DRV_CANFDSPI_WriteByte>
 8003a14:	4603      	mov	r3, r0
 8003a16:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd90      	pop	{r4, r7, pc}

08003a24 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	603a      	str	r2, [r7, #0]
 8003a2e:	71fb      	strb	r3, [r7, #7]
 8003a30:	460b      	mov	r3, r1
 8003a32:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 8003a3c:	79bb      	ldrb	r3, [r7, #6]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 8003a42:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003a46:	e033      	b.n	8003ab0 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8003a4a:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 8003a4c:	7a3b      	ldrb	r3, [r7, #8]
 8003a4e:	f36f 13c7 	bfc	r3, #7, #1
 8003a52:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	7afb      	ldrb	r3, [r7, #11]
 8003a60:	f362 0304 	bfi	r3, r2, #0, #5
 8003a64:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	f362 1347 	bfi	r3, r2, #5, #3
 8003a76:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	7a3b      	ldrb	r3, [r7, #8]
 8003a84:	f362 1345 	bfi	r3, r2, #5, #1
 8003a88:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003a8a:	79bb      	ldrb	r3, [r7, #6]
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	461a      	mov	r2, r3
 8003a90:	0052      	lsls	r2, r2, #1
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3350      	adds	r3, #80	; 0x50
 8003a9a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	89b9      	ldrh	r1, [r7, #12]
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff f966 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8003aac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	00600400 	.word	0x00600400

08003abc <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8003ac4:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 8003ac6:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003ace:	b2d9      	uxtb	r1, r3
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	7813      	ldrb	r3, [r2, #0]
 8003ad4:	f361 0345 	bfi	r3, r1, #1, #5
 8003ad8:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8003ae0:	b2d9      	uxtb	r1, r3
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	8813      	ldrh	r3, [r2, #0]
 8003ae6:	f361 1388 	bfi	r3, r1, #6, #3
 8003aea:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 8003aec:	7b3b      	ldrb	r3, [r7, #12]
 8003aee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003af2:	b2d9      	uxtb	r1, r3
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	7813      	ldrb	r3, [r2, #0]
 8003af8:	f361 0300 	bfi	r3, r1, #0, #1
 8003afc:	7013      	strb	r3, [r2, #0]

    return 0;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	00600400 	.word	0x00600400

08003b10 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b0a0      	sub	sp, #128	; 0x80
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60ba      	str	r2, [r7, #8]
 8003b18:	607b      	str	r3, [r7, #4]
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	73fb      	strb	r3, [r7, #15]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003b34:	7bbb      	ldrb	r3, [r7, #14]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	461a      	mov	r2, r3
 8003b3a:	0052      	lsls	r2, r2, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3350      	adds	r3, #80	; 0x50
 8003b44:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8003b48:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8003b4c:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8003b50:	7bf8      	ldrb	r0, [r7, #15]
 8003b52:	2303      	movs	r3, #3
 8003b54:	f7ff fb48 	bl	80031e8 <DRV_CANFDSPI_ReadWordArray>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 8003b5e:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d002      	beq.n	8003b6c <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 8003b66:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6a:	e0cd      	b.n	8003d08 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8003b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8003b70:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003b74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 8003b7e:	f06f 0301 	mvn.w	r3, #1
 8003b82:	e0c1      	b.n	8003d08 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8003b84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b86:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 8003b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8a:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8003b8c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 8003b9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8003b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ba2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 8003ba6:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003baa:	3308      	adds	r3, #8
 8003bac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8003bb0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d004      	beq.n	8003bc8 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 8003bbe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 8003bc8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d007      	beq.n	8003be6 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 8003bd6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003bda:	f023 0303 	bic.w	r3, r3, #3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	3304      	adds	r3, #4
 8003be2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 8003be6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003bea:	2b4c      	cmp	r3, #76	; 0x4c
 8003bec:	d902      	bls.n	8003bf4 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 8003bee:	234c      	movs	r3, #76	; 0x4c
 8003bf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8003bf4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	f107 0214 	add.w	r2, r7, #20
 8003bfe:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8003c02:	7bf8      	ldrb	r0, [r7, #15]
 8003c04:	f7ff f9fe 	bl	8003004 <DRV_CANFDSPI_ReadByteArray>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 8003c0e:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 8003c16:	f06f 0302 	mvn.w	r3, #2
 8003c1a:	e075      	b.n	8003d08 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 8003c1c:	7d3b      	ldrb	r3, [r7, #20]
 8003c1e:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 8003c20:	7d7b      	ldrb	r3, [r7, #21]
 8003c22:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 8003c24:	7dbb      	ldrb	r3, [r7, #22]
 8003c26:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 8003c28:	7dfb      	ldrb	r3, [r7, #23]
 8003c2a:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 8003c32:	7e3b      	ldrb	r3, [r7, #24]
 8003c34:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 8003c36:	7e7b      	ldrb	r3, [r7, #25]
 8003c38:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 8003c3a:	7ebb      	ldrb	r3, [r7, #26]
 8003c3c:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 8003c3e:	7efb      	ldrb	r3, [r7, #27]
 8003c40:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8003c48:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d027      	beq.n	8003ca6 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 8003c56:	7f3b      	ldrb	r3, [r7, #28]
 8003c58:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 8003c5a:	7f7b      	ldrb	r3, [r7, #29]
 8003c5c:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 8003c5e:	7fbb      	ldrb	r3, [r7, #30]
 8003c60:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 8003c62:	7ffb      	ldrb	r3, [r7, #31]
 8003c64:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003c72:	e011      	b.n	8003c98 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8003c74:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003c78:	f103 020c 	add.w	r2, r3, #12
 8003c7c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	440b      	add	r3, r1
 8003c84:	3280      	adds	r2, #128	; 0x80
 8003c86:	443a      	add	r2, r7
 8003c88:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8003c8c:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8003c8e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003c92:	3301      	adds	r3, #1
 8003c94:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003c98:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003c9c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3e7      	bcc.n	8003c74 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8003ca4:	e01e      	b.n	8003ce4 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003cb2:	e011      	b.n	8003cd8 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 8003cb4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003cb8:	f103 0208 	add.w	r2, r3, #8
 8003cbc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	440b      	add	r3, r1
 8003cc4:	3280      	adds	r2, #128	; 0x80
 8003cc6:	443a      	add	r2, r7
 8003cc8:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8003ccc:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8003cce:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8003cd8:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8003cdc:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d3e7      	bcc.n	8003cb4 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8003ce4:	7bba      	ldrb	r2, [r7, #14]
 8003ce6:	7bfb      	ldrb	r3, [r7, #15]
 8003ce8:	4611      	mov	r1, r2
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 f810 	bl	8003d10 <DRV_CANFDSPI_ReceiveChannelUpdate>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 8003cf6:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 8003cfe:	f06f 0303 	mvn.w	r3, #3
 8003d02:	e001      	b.n	8003d08 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 8003d04:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3780      	adds	r7, #128	; 0x80
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	71fb      	strb	r3, [r7, #7]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 8003d20:	2300      	movs	r3, #0
 8003d22:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8003d2c:	79bb      	ldrb	r3, [r7, #6]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	0052      	lsls	r2, r2, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3351      	adds	r3, #81	; 0x51
 8003d3c:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 8003d3e:	7a7b      	ldrb	r3, [r7, #9]
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8003d46:	7a7a      	ldrb	r2, [r7, #9]
 8003d48:	89f9      	ldrh	r1, [r7, #14]
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe ff41 	bl	8002bd4 <DRV_CANFDSPI_WriteByte>
 8003d52:	4603      	mov	r3, r0
 8003d54:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 8003d56:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	71fb      	strb	r3, [r7, #7]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8003d7a:	231e      	movs	r3, #30
 8003d7c:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 8003d82:	f107 0208 	add.w	r2, r7, #8
 8003d86:	89b9      	ldrh	r1, [r7, #12]
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff f85a 	bl	8002e44 <DRV_CANFDSPI_ReadHalfWord>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003da0:	e01b      	b.n	8003dda <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 8003da2:	893b      	ldrh	r3, [r7, #8]
 8003da4:	b21a      	sxth	r2, r3
 8003da6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003daa:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b21b      	sxth	r3, r3
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8003db8:	893a      	ldrh	r2, [r7, #8]
 8003dba:	89b9      	ldrh	r1, [r7, #12]
 8003dbc:	79fb      	ldrb	r3, [r7, #7]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff f8b8 	bl	8002f34 <DRV_CANFDSPI_WriteHalfWord>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 8003dd0:	f06f 0301 	mvn.w	r3, #1
 8003dd4:	e001      	b.n	8003dda <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8003dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b084      	sub	sp, #16
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	603a      	str	r2, [r7, #0]
 8003dec:	71fb      	strb	r3, [r7, #7]
 8003dee:	460b      	mov	r3, r1
 8003df0:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003df2:	2300      	movs	r3, #0
 8003df4:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8003dfe:	79bb      	ldrb	r3, [r7, #6]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	0052      	lsls	r2, r2, #1
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3354      	adds	r3, #84	; 0x54
 8003e0e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8003e10:	f107 0208 	add.w	r2, r7, #8
 8003e14:	89b9      	ldrh	r1, [r7, #12]
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fe fe7f 	bl	8002b1c <DRV_CANFDSPI_ReadByte>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e2e:	e007      	b.n	8003e40 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8003e30:	7a3b      	ldrb	r3, [r7, #8]
 8003e32:	f003 0317 	and.w	r3, r3, #23
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8003e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	603a      	str	r2, [r7, #0]
 8003e52:	71fb      	strb	r3, [r7, #7]
 8003e54:	460b      	mov	r3, r1
 8003e56:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8003e60:	79bb      	ldrb	r3, [r7, #6]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8003e66:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003e6a:	e022      	b.n	8003eb2 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8003e70:	79bb      	ldrb	r3, [r7, #6]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	0052      	lsls	r2, r2, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3354      	adds	r3, #84	; 0x54
 8003e80:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8003e82:	f107 0208 	add.w	r2, r7, #8
 8003e86:	89b9      	ldrh	r1, [r7, #12]
 8003e88:	79fb      	ldrb	r3, [r7, #7]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fe46 	bl	8002b1c <DRV_CANFDSPI_ReadByte>
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8003e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea0:	e007      	b.n	8003eb2 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 8003ea2:	7a3b      	ldrb	r3, [r7, #8]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8003eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	71fb      	strb	r3, [r7, #7]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	71bb      	strb	r3, [r7, #6]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8003ed4:	79bb      	ldrb	r3, [r7, #6]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d102      	bne.n	8003ee0 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8003eda:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003ede:	e036      	b.n	8003f4e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8003ee0:	79bb      	ldrb	r3, [r7, #6]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	0052      	lsls	r2, r2, #1
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3350      	adds	r3, #80	; 0x50
 8003ef0:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 8003ef6:	f107 0208 	add.w	r2, r7, #8
 8003efa:	89b9      	ldrh	r1, [r7, #12]
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe fe0c 	bl	8002b1c <DRV_CANFDSPI_ReadByte>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	e01b      	b.n	8003f4e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8003f16:	7a3b      	ldrb	r3, [r7, #8]
 8003f18:	b25a      	sxtb	r2, r3
 8003f1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	b25b      	sxtb	r3, r3
 8003f24:	4313      	orrs	r3, r2
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8003f2c:	7a3a      	ldrb	r2, [r7, #8]
 8003f2e:	89b9      	ldrh	r1, [r7, #12]
 8003f30:	79fb      	ldrb	r3, [r7, #7]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fe fe4e 	bl	8002bd4 <DRV_CANFDSPI_WriteByte>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8003f44:	f06f 0301 	mvn.w	r3, #1
 8003f48:	e001      	b.n	8003f4e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8003f6e:	2334      	movs	r3, #52	; 0x34
 8003f70:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8003f76:	f107 0210 	add.w	r2, r7, #16
 8003f7a:	8ab9      	ldrh	r1, [r7, #20]
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fe82 	bl	8002c88 <DRV_CANFDSPI_ReadWord>
 8003f84:	4603      	mov	r3, r0
 8003f86:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d002      	beq.n	8003f96 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8003f90:	f04f 33ff 	mov.w	r3, #4294967295
 8003f94:	e00d      	b.n	8003fb2 <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8003f96:	7c7a      	ldrb	r2, [r7, #17]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8003f9c:	7c3a      	ldrb	r2, [r7, #16]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 8003fa2:	7cbb      	ldrb	r3, [r7, #18]
 8003fa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8003fae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b084      	sub	sp, #16
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8003fcc:	f107 020e 	add.w	r2, r7, #14
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	f640 610c 	movw	r1, #3596	; 0xe0c
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fda0 	bl	8002b1c <DRV_CANFDSPI_ReadByte>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8003fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fec:	e015      	b.n	800401a <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8003fee:	7bbb      	ldrb	r3, [r7, #14]
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 8003ff8:	7bba      	ldrb	r2, [r7, #14]
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	f640 610c 	movw	r1, #3596	; 0xe0c
 8004000:	4618      	mov	r0, r3
 8004002:	f7fe fde7 	bl	8002bd4 <DRV_CANFDSPI_WriteByte>
 8004006:	4603      	mov	r3, r0
 8004008:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800400a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 8004012:	f06f 0301 	mvn.w	r3, #1
 8004016:	e000      	b.n	800401a <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b090      	sub	sp, #64	; 0x40
 8004026:	af00      	add	r7, sp, #0
 8004028:	4603      	mov	r3, r0
 800402a:	460a      	mov	r2, r1
 800402c:	71fb      	strb	r3, [r7, #7]
 800402e:	4613      	mov	r3, r2
 8004030:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8004038:	2300      	movs	r3, #0
 800403a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800403c:	e008      	b.n	8004050 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 800403e:	f107 0208 	add.w	r2, r7, #8
 8004042:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004044:	4413      	add	r3, r2
 8004046:	79ba      	ldrb	r2, [r7, #6]
 8004048:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 800404a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800404c:	3301      	adds	r3, #1
 800404e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004052:	2b2f      	cmp	r3, #47	; 0x2f
 8004054:	d9f3      	bls.n	800403e <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8004056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405a:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 800405c:	2300      	movs	r3, #0
 800405e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004060:	e016      	b.n	8004090 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8004062:	f107 0208 	add.w	r2, r7, #8
 8004066:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8004068:	79f8      	ldrb	r0, [r7, #7]
 800406a:	2330      	movs	r3, #48	; 0x30
 800406c:	f7ff f84a 	bl	8003104 <DRV_CANFDSPI_WriteByteArray>
 8004070:	4603      	mov	r3, r0
 8004072:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8004076:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	e00a      	b.n	800409a <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8004084:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004086:	3330      	adds	r3, #48	; 0x30
 8004088:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 800408a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408c:	3301      	adds	r3, #1
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	2b29      	cmp	r3, #41	; 0x29
 8004094:	d9e5      	bls.n	8004062 <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8004096:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 800409a:	4618      	mov	r0, r3
 800409c:	3740      	adds	r7, #64	; 0x40
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 80040a2:	b590      	push	{r4, r7, lr}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	4604      	mov	r4, r0
 80040aa:	4608      	mov	r0, r1
 80040ac:	4611      	mov	r1, r2
 80040ae:	461a      	mov	r2, r3
 80040b0:	4623      	mov	r3, r4
 80040b2:	71fb      	strb	r3, [r7, #7]
 80040b4:	4603      	mov	r3, r0
 80040b6:	71bb      	strb	r3, [r7, #6]
 80040b8:	460b      	mov	r3, r1
 80040ba:	717b      	strb	r3, [r7, #5]
 80040bc:	4613      	mov	r3, r2
 80040be:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 80040c4:	793b      	ldrb	r3, [r7, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d036      	beq.n	8004138 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	dc4c      	bgt.n	8004168 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d018      	beq.n	8004108 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 80040d6:	e047      	b.n	8004168 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 80040d8:	79ba      	ldrb	r2, [r7, #6]
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 f84c 	bl	800417c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 80040e4:	4603      	mov	r3, r0
 80040e6:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80040e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d002      	beq.n	80040f6 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 80040f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040f4:	e03d      	b.n	8004172 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 80040f6:	797a      	ldrb	r2, [r7, #5]
 80040f8:	79b9      	ldrb	r1, [r7, #6]
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f8c3 	bl	8004288 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8004102:	4603      	mov	r3, r0
 8004104:	73fb      	strb	r3, [r7, #15]
            break;
 8004106:	e032      	b.n	800416e <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8004108:	79ba      	ldrb	r2, [r7, #6]
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	4611      	mov	r1, r2
 800410e:	4618      	mov	r0, r3
 8004110:	f000 faf2 	bl	80046f8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8004114:	4603      	mov	r3, r0
 8004116:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004118:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8004120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004124:	e025      	b.n	8004172 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8004126:	797a      	ldrb	r2, [r7, #5]
 8004128:	79b9      	ldrb	r1, [r7, #6]
 800412a:	79fb      	ldrb	r3, [r7, #7]
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fb6f 	bl	8004810 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8004132:	4603      	mov	r3, r0
 8004134:	73fb      	strb	r3, [r7, #15]
            break;
 8004136:	e01a      	b.n	800416e <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8004138:	79ba      	ldrb	r2, [r7, #6]
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	4611      	mov	r1, r2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fd10 	bl	8004b64 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8004144:	4603      	mov	r3, r0
 8004146:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8004148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8004150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004154:	e00d      	b.n	8004172 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8004156:	797a      	ldrb	r2, [r7, #5]
 8004158:	79b9      	ldrb	r1, [r7, #6]
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fd8d 	bl	8004c7c <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8004162:	4603      	mov	r3, r0
 8004164:	73fb      	strb	r3, [r7, #15]
            break;
 8004166:	e002      	b.n	800416e <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8004168:	23ff      	movs	r3, #255	; 0xff
 800416a:	73fb      	strb	r3, [r7, #15]
            break;
 800416c:	bf00      	nop
    }

    return spiTransferError;
 800416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004172:	4618      	mov	r0, r3
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	bd90      	pop	{r4, r7, pc}
	...

0800417c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	460a      	mov	r2, r1
 8004186:	71fb      	strb	r3, [r7, #7]
 8004188:	4613      	mov	r3, r2
 800418a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8004190:	4b3c      	ldr	r3, [pc, #240]	; (8004284 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8004192:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004194:	79bb      	ldrb	r3, [r7, #6]
 8004196:	2b11      	cmp	r3, #17
 8004198:	d862      	bhi.n	8004260 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041e9 	.word	0x080041e9
 80041a4:	080041e9 	.word	0x080041e9
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	080041e9 	.word	0x080041e9
 80041b4:	080041e9 	.word	0x080041e9
 80041b8:	080041e9 	.word	0x080041e9
 80041bc:	080041e9 	.word	0x080041e9
 80041c0:	08004207 	.word	0x08004207
 80041c4:	08004207 	.word	0x08004207
 80041c8:	08004207 	.word	0x08004207
 80041cc:	08004207 	.word	0x08004207
 80041d0:	08004207 	.word	0x08004207
 80041d4:	08004207 	.word	0x08004207
 80041d8:	08004207 	.word	0x08004207
 80041dc:	08004225 	.word	0x08004225
 80041e0:	08004225 	.word	0x08004225
 80041e4:	08004243 	.word	0x08004243
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80041e8:	2300      	movs	r3, #0
 80041ea:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80041ec:	233e      	movs	r3, #62	; 0x3e
 80041ee:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80041f0:	7a7b      	ldrb	r3, [r7, #9]
 80041f2:	220f      	movs	r2, #15
 80041f4:	f362 0306 	bfi	r3, r2, #0, #7
 80041f8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80041fa:	7a3b      	ldrb	r3, [r7, #8]
 80041fc:	220f      	movs	r2, #15
 80041fe:	f362 0306 	bfi	r3, r2, #0, #7
 8004202:	723b      	strb	r3, [r7, #8]
            break;
 8004204:	e02f      	b.n	8004266 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004206:	2300      	movs	r3, #0
 8004208:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800420a:	237e      	movs	r3, #126	; 0x7e
 800420c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800420e:	7a7b      	ldrb	r3, [r7, #9]
 8004210:	221f      	movs	r2, #31
 8004212:	f362 0306 	bfi	r3, r2, #0, #7
 8004216:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8004218:	7a3b      	ldrb	r3, [r7, #8]
 800421a:	221f      	movs	r2, #31
 800421c:	f362 0306 	bfi	r3, r2, #0, #7
 8004220:	723b      	strb	r3, [r7, #8]
            break;
 8004222:	e020      	b.n	8004266 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004228:	231e      	movs	r3, #30
 800422a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 800422c:	7a7b      	ldrb	r3, [r7, #9]
 800422e:	2207      	movs	r2, #7
 8004230:	f362 0306 	bfi	r3, r2, #0, #7
 8004234:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004236:	7a3b      	ldrb	r3, [r7, #8]
 8004238:	2207      	movs	r2, #7
 800423a:	f362 0306 	bfi	r3, r2, #0, #7
 800423e:	723b      	strb	r3, [r7, #8]
            break;
 8004240:	e011      	b.n	8004266 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8004246:	23fe      	movs	r3, #254	; 0xfe
 8004248:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 800424a:	7a7b      	ldrb	r3, [r7, #9]
 800424c:	223f      	movs	r2, #63	; 0x3f
 800424e:	f362 0306 	bfi	r3, r2, #0, #7
 8004252:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8004254:	7a3b      	ldrb	r3, [r7, #8]
 8004256:	223f      	movs	r2, #63	; 0x3f
 8004258:	f362 0306 	bfi	r3, r2, #0, #7
 800425c:	723b      	strb	r3, [r7, #8]
            break;
 800425e:	e002      	b.n	8004266 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8004260:	f04f 33ff 	mov.w	r3, #4294967295
 8004264:	e009      	b.n	800427a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	2104      	movs	r1, #4
 800426c:	4618      	mov	r0, r3
 800426e:	f7fe fd81 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8004276:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800427a:	4618      	mov	r0, r3
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	003e0f0f 	.word	0x003e0f0f

08004288 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	4603      	mov	r3, r0
 8004290:	71fb      	strb	r3, [r7, #7]
 8004292:	460b      	mov	r3, r1
 8004294:	71bb      	strb	r3, [r7, #6]
 8004296:	4613      	mov	r3, r2
 8004298:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800429e:	4be2      	ldr	r3, [pc, #904]	; (8004628 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 80042a0:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80042a2:	2300      	movs	r3, #0
 80042a4:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80042a6:	7abb      	ldrb	r3, [r7, #10]
 80042a8:	2202      	movs	r2, #2
 80042aa:	f362 0301 	bfi	r3, r2, #0, #2
 80042ae:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80042b4:	79bb      	ldrb	r3, [r7, #6]
 80042b6:	2b11      	cmp	r3, #17
 80042b8:	f200 81f6 	bhi.w	80046a8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	0800430d 	.word	0x0800430d
 80042c8:	0800434b 	.word	0x0800434b
 80042cc:	08004389 	.word	0x08004389
 80042d0:	080043c7 	.word	0x080043c7
 80042d4:	08004405 	.word	0x08004405
 80042d8:	08004443 	.word	0x08004443
 80042dc:	0800447d 	.word	0x0800447d
 80042e0:	080044b1 	.word	0x080044b1
 80042e4:	080044e3 	.word	0x080044e3
 80042e8:	08004529 	.word	0x08004529
 80042ec:	0800456f 	.word	0x0800456f
 80042f0:	080045ad 	.word	0x080045ad
 80042f4:	080045eb 	.word	0x080045eb
 80042f8:	0800462d 	.word	0x0800462d
 80042fc:	0800466b 	.word	0x0800466b
 8004300:	080043c7 	.word	0x080043c7
 8004304:	0800447d 	.word	0x0800447d
 8004308:	080044e3 	.word	0x080044e3
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004310:	7bbb      	ldrb	r3, [r7, #14]
 8004312:	221e      	movs	r2, #30
 8004314:	f362 0304 	bfi	r3, r2, #0, #5
 8004318:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 800431a:	7b7b      	ldrb	r3, [r7, #13]
 800431c:	2207      	movs	r2, #7
 800431e:	f362 0303 	bfi	r3, r2, #0, #4
 8004322:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004324:	7b3b      	ldrb	r3, [r7, #12]
 8004326:	2207      	movs	r2, #7
 8004328:	f362 0303 	bfi	r3, r2, #0, #4
 800432c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 800432e:	7a7b      	ldrb	r3, [r7, #9]
 8004330:	221f      	movs	r2, #31
 8004332:	f362 0306 	bfi	r3, r2, #0, #7
 8004336:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800433e:	b2da      	uxtb	r2, r3
 8004340:	7a3b      	ldrb	r3, [r7, #8]
 8004342:	f362 0305 	bfi	r3, r2, #0, #6
 8004346:	723b      	strb	r3, [r7, #8]
            break;
 8004348:	e1b1      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800434e:	7bbb      	ldrb	r3, [r7, #14]
 8004350:	220e      	movs	r2, #14
 8004352:	f362 0304 	bfi	r3, r2, #0, #5
 8004356:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004358:	7b7b      	ldrb	r3, [r7, #13]
 800435a:	2203      	movs	r2, #3
 800435c:	f362 0303 	bfi	r3, r2, #0, #4
 8004360:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004362:	7b3b      	ldrb	r3, [r7, #12]
 8004364:	2203      	movs	r2, #3
 8004366:	f362 0303 	bfi	r3, r2, #0, #4
 800436a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800436c:	7a7b      	ldrb	r3, [r7, #9]
 800436e:	220f      	movs	r2, #15
 8004370:	f362 0306 	bfi	r3, r2, #0, #7
 8004374:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800437c:	b2da      	uxtb	r2, r3
 800437e:	7a3b      	ldrb	r3, [r7, #8]
 8004380:	f362 0305 	bfi	r3, r2, #0, #6
 8004384:	723b      	strb	r3, [r7, #8]
            break;
 8004386:	e192      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 800438c:	7bbb      	ldrb	r3, [r7, #14]
 800438e:	2208      	movs	r2, #8
 8004390:	f362 0304 	bfi	r3, r2, #0, #5
 8004394:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004396:	7b7b      	ldrb	r3, [r7, #13]
 8004398:	2202      	movs	r2, #2
 800439a:	f362 0303 	bfi	r3, r2, #0, #4
 800439e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80043a0:	7b3b      	ldrb	r3, [r7, #12]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f362 0303 	bfi	r3, r2, #0, #4
 80043a8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80043aa:	7a7b      	ldrb	r3, [r7, #9]
 80043ac:	2209      	movs	r2, #9
 80043ae:	f362 0306 	bfi	r3, r2, #0, #7
 80043b2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	7a3b      	ldrb	r3, [r7, #8]
 80043be:	f362 0305 	bfi	r3, r2, #0, #6
 80043c2:	723b      	strb	r3, [r7, #8]
            break;
 80043c4:	e173      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80043ca:	7bbb      	ldrb	r3, [r7, #14]
 80043cc:	2206      	movs	r2, #6
 80043ce:	f362 0304 	bfi	r3, r2, #0, #5
 80043d2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80043d4:	7b7b      	ldrb	r3, [r7, #13]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f362 0303 	bfi	r3, r2, #0, #4
 80043dc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80043de:	7b3b      	ldrb	r3, [r7, #12]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f362 0303 	bfi	r3, r2, #0, #4
 80043e6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80043e8:	7a7b      	ldrb	r3, [r7, #9]
 80043ea:	2207      	movs	r2, #7
 80043ec:	f362 0306 	bfi	r3, r2, #0, #7
 80043f0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	7a3b      	ldrb	r3, [r7, #8]
 80043fc:	f362 0305 	bfi	r3, r2, #0, #6
 8004400:	723b      	strb	r3, [r7, #8]
            break;
 8004402:	e154      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004404:	2300      	movs	r3, #0
 8004406:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	2204      	movs	r2, #4
 800440c:	f362 0304 	bfi	r3, r2, #0, #5
 8004410:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004412:	7b7b      	ldrb	r3, [r7, #13]
 8004414:	2201      	movs	r2, #1
 8004416:	f362 0303 	bfi	r3, r2, #0, #4
 800441a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800441c:	7b3b      	ldrb	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	f362 0303 	bfi	r3, r2, #0, #4
 8004424:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8004426:	7a7b      	ldrb	r3, [r7, #9]
 8004428:	2205      	movs	r2, #5
 800442a:	f362 0306 	bfi	r3, r2, #0, #7
 800442e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004436:	b2da      	uxtb	r2, r3
 8004438:	7a3b      	ldrb	r3, [r7, #8]
 800443a:	f362 0305 	bfi	r3, r2, #0, #6
 800443e:	723b      	strb	r3, [r7, #8]
            break;
 8004440:	e135      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8004446:	7bbb      	ldrb	r3, [r7, #14]
 8004448:	2203      	movs	r2, #3
 800444a:	f362 0304 	bfi	r3, r2, #0, #5
 800444e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004450:	7b7b      	ldrb	r3, [r7, #13]
 8004452:	f36f 0303 	bfc	r3, #0, #4
 8004456:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004458:	7b3b      	ldrb	r3, [r7, #12]
 800445a:	f36f 0303 	bfc	r3, #0, #4
 800445e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8004460:	7a7b      	ldrb	r3, [r7, #9]
 8004462:	2204      	movs	r2, #4
 8004464:	f362 0306 	bfi	r3, r2, #0, #7
 8004468:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004470:	b2da      	uxtb	r2, r3
 8004472:	7a3b      	ldrb	r3, [r7, #8]
 8004474:	f362 0305 	bfi	r3, r2, #0, #6
 8004478:	723b      	strb	r3, [r7, #8]
            break;
 800447a:	e118      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800447c:	2300      	movs	r3, #0
 800447e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004480:	7bbb      	ldrb	r3, [r7, #14]
 8004482:	2202      	movs	r2, #2
 8004484:	f362 0304 	bfi	r3, r2, #0, #5
 8004488:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800448a:	7b7b      	ldrb	r3, [r7, #13]
 800448c:	f36f 0303 	bfc	r3, #0, #4
 8004490:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004492:	7b3b      	ldrb	r3, [r7, #12]
 8004494:	f36f 0303 	bfc	r3, #0, #4
 8004498:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800449a:	7a7b      	ldrb	r3, [r7, #9]
 800449c:	2203      	movs	r2, #3
 800449e:	f362 0306 	bfi	r3, r2, #0, #7
 80044a2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 80044a4:	7a3b      	ldrb	r3, [r7, #8]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f362 0305 	bfi	r3, r2, #0, #6
 80044ac:	723b      	strb	r3, [r7, #8]
            break;
 80044ae:	e0fe      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80044b4:	7bbb      	ldrb	r3, [r7, #14]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f362 0304 	bfi	r3, r2, #0, #5
 80044bc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80044be:	7b7b      	ldrb	r3, [r7, #13]
 80044c0:	f36f 0303 	bfc	r3, #0, #4
 80044c4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80044c6:	7b3b      	ldrb	r3, [r7, #12]
 80044c8:	f36f 0303 	bfc	r3, #0, #4
 80044cc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 80044ce:	7a7b      	ldrb	r3, [r7, #9]
 80044d0:	2202      	movs	r2, #2
 80044d2:	f362 0306 	bfi	r3, r2, #0, #7
 80044d6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 80044d8:	7a3b      	ldrb	r3, [r7, #8]
 80044da:	f36f 0305 	bfc	r3, #0, #6
 80044de:	723b      	strb	r3, [r7, #8]
            break;
 80044e0:	e0e5      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 80044e6:	7bbb      	ldrb	r3, [r7, #14]
 80044e8:	221e      	movs	r2, #30
 80044ea:	f362 0304 	bfi	r3, r2, #0, #5
 80044ee:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 80044f0:	7b7b      	ldrb	r3, [r7, #13]
 80044f2:	2207      	movs	r2, #7
 80044f4:	f362 0303 	bfi	r3, r2, #0, #4
 80044f8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80044fa:	7b3b      	ldrb	r3, [r7, #12]
 80044fc:	2207      	movs	r2, #7
 80044fe:	f362 0303 	bfi	r3, r2, #0, #4
 8004502:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004504:	7a7b      	ldrb	r3, [r7, #9]
 8004506:	221f      	movs	r2, #31
 8004508:	f362 0306 	bfi	r3, r2, #0, #7
 800450c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004514:	b2da      	uxtb	r2, r3
 8004516:	7a3b      	ldrb	r3, [r7, #8]
 8004518:	f362 0305 	bfi	r3, r2, #0, #6
 800451c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800451e:	7abb      	ldrb	r3, [r7, #10]
 8004520:	f36f 0301 	bfc	r3, #0, #2
 8004524:	72bb      	strb	r3, [r7, #10]
            break;
 8004526:	e0c2      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8004528:	2301      	movs	r3, #1
 800452a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 800452c:	7bbb      	ldrb	r3, [r7, #14]
 800452e:	2211      	movs	r2, #17
 8004530:	f362 0304 	bfi	r3, r2, #0, #5
 8004534:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8004536:	7b7b      	ldrb	r3, [r7, #13]
 8004538:	2204      	movs	r2, #4
 800453a:	f362 0303 	bfi	r3, r2, #0, #4
 800453e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8004540:	7b3b      	ldrb	r3, [r7, #12]
 8004542:	2204      	movs	r2, #4
 8004544:	f362 0303 	bfi	r3, r2, #0, #4
 8004548:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 800454a:	7a7b      	ldrb	r3, [r7, #9]
 800454c:	2212      	movs	r2, #18
 800454e:	f362 0306 	bfi	r3, r2, #0, #7
 8004552:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800455a:	b2da      	uxtb	r2, r3
 800455c:	7a3b      	ldrb	r3, [r7, #8]
 800455e:	f362 0305 	bfi	r3, r2, #0, #6
 8004562:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004564:	7abb      	ldrb	r3, [r7, #10]
 8004566:	f36f 0301 	bfc	r3, #0, #2
 800456a:	72bb      	strb	r3, [r7, #10]
            break;
 800456c:	e09f      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	221e      	movs	r2, #30
 8004576:	f362 0304 	bfi	r3, r2, #0, #5
 800457a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 800457c:	7b7b      	ldrb	r3, [r7, #13]
 800457e:	2207      	movs	r2, #7
 8004580:	f362 0303 	bfi	r3, r2, #0, #4
 8004584:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8004586:	7b3b      	ldrb	r3, [r7, #12]
 8004588:	2207      	movs	r2, #7
 800458a:	f362 0303 	bfi	r3, r2, #0, #4
 800458e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8004590:	7a7b      	ldrb	r3, [r7, #9]
 8004592:	221f      	movs	r2, #31
 8004594:	f362 0306 	bfi	r3, r2, #0, #7
 8004598:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	7a3b      	ldrb	r3, [r7, #8]
 80045a4:	f362 0305 	bfi	r3, r2, #0, #6
 80045a8:	723b      	strb	r3, [r7, #8]
            break;
 80045aa:	e080      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 80045b0:	7bbb      	ldrb	r3, [r7, #14]
 80045b2:	2212      	movs	r2, #18
 80045b4:	f362 0304 	bfi	r3, r2, #0, #5
 80045b8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 80045ba:	7b7b      	ldrb	r3, [r7, #13]
 80045bc:	2205      	movs	r2, #5
 80045be:	f362 0303 	bfi	r3, r2, #0, #4
 80045c2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 80045c4:	7b3b      	ldrb	r3, [r7, #12]
 80045c6:	2205      	movs	r2, #5
 80045c8:	f362 0303 	bfi	r3, r2, #0, #4
 80045cc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 80045ce:	7a7b      	ldrb	r3, [r7, #9]
 80045d0:	2213      	movs	r2, #19
 80045d2:	f362 0306 	bfi	r3, r2, #0, #7
 80045d6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	7a3b      	ldrb	r3, [r7, #8]
 80045e2:	f362 0305 	bfi	r3, r2, #0, #6
 80045e6:	723b      	strb	r3, [r7, #8]
            break;
 80045e8:	e061      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80045ee:	7bbb      	ldrb	r3, [r7, #14]
 80045f0:	220e      	movs	r2, #14
 80045f2:	f362 0304 	bfi	r3, r2, #0, #5
 80045f6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80045f8:	7b7b      	ldrb	r3, [r7, #13]
 80045fa:	2203      	movs	r2, #3
 80045fc:	f362 0303 	bfi	r3, r2, #0, #4
 8004600:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004602:	7b3b      	ldrb	r3, [r7, #12]
 8004604:	2203      	movs	r2, #3
 8004606:	f362 0303 	bfi	r3, r2, #0, #4
 800460a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800460c:	7a7b      	ldrb	r3, [r7, #9]
 800460e:	220f      	movs	r2, #15
 8004610:	f362 0306 	bfi	r3, r2, #0, #7
 8004614:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461c:	b2da      	uxtb	r2, r3
 800461e:	7a3b      	ldrb	r3, [r7, #8]
 8004620:	f362 0305 	bfi	r3, r2, #0, #6
 8004624:	723b      	strb	r3, [r7, #8]
            break;
 8004626:	e042      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8004628:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	2208      	movs	r2, #8
 8004634:	f362 0304 	bfi	r3, r2, #0, #5
 8004638:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800463a:	7b7b      	ldrb	r3, [r7, #13]
 800463c:	2202      	movs	r2, #2
 800463e:	f362 0303 	bfi	r3, r2, #0, #4
 8004642:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004644:	7b3b      	ldrb	r3, [r7, #12]
 8004646:	2202      	movs	r2, #2
 8004648:	f362 0303 	bfi	r3, r2, #0, #4
 800464c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800464e:	7a7b      	ldrb	r3, [r7, #9]
 8004650:	2209      	movs	r2, #9
 8004652:	f362 0306 	bfi	r3, r2, #0, #7
 8004656:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800465e:	b2da      	uxtb	r2, r3
 8004660:	7a3b      	ldrb	r3, [r7, #8]
 8004662:	f362 0305 	bfi	r3, r2, #0, #6
 8004666:	723b      	strb	r3, [r7, #8]
            break;
 8004668:	e021      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800466a:	2300      	movs	r3, #0
 800466c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800466e:	7bbb      	ldrb	r3, [r7, #14]
 8004670:	2206      	movs	r2, #6
 8004672:	f362 0304 	bfi	r3, r2, #0, #5
 8004676:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004678:	7b7b      	ldrb	r3, [r7, #13]
 800467a:	2201      	movs	r2, #1
 800467c:	f362 0303 	bfi	r3, r2, #0, #4
 8004680:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004682:	7b3b      	ldrb	r3, [r7, #12]
 8004684:	2201      	movs	r2, #1
 8004686:	f362 0303 	bfi	r3, r2, #0, #4
 800468a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800468c:	7a7b      	ldrb	r3, [r7, #9]
 800468e:	2207      	movs	r2, #7
 8004690:	f362 0306 	bfi	r3, r2, #0, #7
 8004694:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800469c:	b2da      	uxtb	r2, r3
 800469e:	7a3b      	ldrb	r3, [r7, #8]
 80046a0:	f362 0305 	bfi	r3, r2, #0, #6
 80046a4:	723b      	strb	r3, [r7, #8]
            break;
 80046a6:	e002      	b.n	80046ae <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ac:	e01f      	b.n	80046ee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	79fb      	ldrb	r3, [r7, #7]
 80046b2:	2108      	movs	r1, #8
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fe fb5d 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 80046ba:	4603      	mov	r3, r0
 80046bc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80046be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 80046c6:	f06f 0301 	mvn.w	r3, #1
 80046ca:	e010      	b.n	80046ee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	210c      	movs	r1, #12
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fb4e 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 80046d8:	4603      	mov	r3, r0
 80046da:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80046dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 80046e4:	f06f 0302 	mvn.w	r3, #2
 80046e8:	e001      	b.n	80046ee <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 80046ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop

080046f8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	460a      	mov	r2, r1
 8004702:	71fb      	strb	r3, [r7, #7]
 8004704:	4613      	mov	r3, r2
 8004706:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800470c:	4b3f      	ldr	r3, [pc, #252]	; (800480c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 800470e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004710:	79bb      	ldrb	r3, [r7, #6]
 8004712:	2b11      	cmp	r3, #17
 8004714:	d862      	bhi.n	80047dc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	08004765 	.word	0x08004765
 8004720:	08004765 	.word	0x08004765
 8004724:	080047dd 	.word	0x080047dd
 8004728:	08004765 	.word	0x08004765
 800472c:	08004765 	.word	0x08004765
 8004730:	08004765 	.word	0x08004765
 8004734:	08004765 	.word	0x08004765
 8004738:	08004765 	.word	0x08004765
 800473c:	08004783 	.word	0x08004783
 8004740:	08004783 	.word	0x08004783
 8004744:	08004783 	.word	0x08004783
 8004748:	08004783 	.word	0x08004783
 800474c:	08004783 	.word	0x08004783
 8004750:	08004783 	.word	0x08004783
 8004754:	08004783 	.word	0x08004783
 8004758:	080047a1 	.word	0x080047a1
 800475c:	080047a1 	.word	0x080047a1
 8004760:	080047bf 	.word	0x080047bf
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004768:	231e      	movs	r3, #30
 800476a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 800476c:	7a7b      	ldrb	r3, [r7, #9]
 800476e:	2207      	movs	r2, #7
 8004770:	f362 0306 	bfi	r3, r2, #0, #7
 8004774:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004776:	7a3b      	ldrb	r3, [r7, #8]
 8004778:	2207      	movs	r2, #7
 800477a:	f362 0306 	bfi	r3, r2, #0, #7
 800477e:	723b      	strb	r3, [r7, #8]
            break;
 8004780:	e02f      	b.n	80047e2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004782:	2300      	movs	r3, #0
 8004784:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8004786:	233e      	movs	r3, #62	; 0x3e
 8004788:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800478a:	7a7b      	ldrb	r3, [r7, #9]
 800478c:	220f      	movs	r2, #15
 800478e:	f362 0306 	bfi	r3, r2, #0, #7
 8004792:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8004794:	7a3b      	ldrb	r3, [r7, #8]
 8004796:	220f      	movs	r2, #15
 8004798:	f362 0306 	bfi	r3, r2, #0, #7
 800479c:	723b      	strb	r3, [r7, #8]
            break;
 800479e:	e020      	b.n	80047e2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80047a4:	230e      	movs	r3, #14
 80047a6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80047a8:	7a7b      	ldrb	r3, [r7, #9]
 80047aa:	2203      	movs	r2, #3
 80047ac:	f362 0306 	bfi	r3, r2, #0, #7
 80047b0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80047b2:	7a3b      	ldrb	r3, [r7, #8]
 80047b4:	2203      	movs	r2, #3
 80047b6:	f362 0306 	bfi	r3, r2, #0, #7
 80047ba:	723b      	strb	r3, [r7, #8]
            break;
 80047bc:	e011      	b.n	80047e2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80047be:	2300      	movs	r3, #0
 80047c0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 80047c2:	237e      	movs	r3, #126	; 0x7e
 80047c4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 80047c6:	7a7b      	ldrb	r3, [r7, #9]
 80047c8:	221f      	movs	r2, #31
 80047ca:	f362 0306 	bfi	r3, r2, #0, #7
 80047ce:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80047d0:	7a3b      	ldrb	r3, [r7, #8]
 80047d2:	221f      	movs	r2, #31
 80047d4:	f362 0306 	bfi	r3, r2, #0, #7
 80047d8:	723b      	strb	r3, [r7, #8]
            break;
 80047da:	e002      	b.n	80047e2 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 80047dc:	f04f 33ff 	mov.w	r3, #4294967295
 80047e0:	e010      	b.n	8004804 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	79fb      	ldrb	r3, [r7, #7]
 80047e6:	2104      	movs	r1, #4
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fe fac3 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 80047ee:	4603      	mov	r3, r0
 80047f0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80047f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 80047fa:	f06f 0301 	mvn.w	r3, #1
 80047fe:	e001      	b.n	8004804 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8004800:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	003e0f0f 	.word	0x003e0f0f

08004810 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b086      	sub	sp, #24
 8004814:	af00      	add	r7, sp, #0
 8004816:	4603      	mov	r3, r0
 8004818:	71fb      	strb	r3, [r7, #7]
 800481a:	460b      	mov	r3, r1
 800481c:	71bb      	strb	r3, [r7, #6]
 800481e:	4613      	mov	r3, r2
 8004820:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8004826:	4bce      	ldr	r3, [pc, #824]	; (8004b60 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8004828:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800482a:	2300      	movs	r3, #0
 800482c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800482e:	7abb      	ldrb	r3, [r7, #10]
 8004830:	2202      	movs	r2, #2
 8004832:	f362 0301 	bfi	r3, r2, #0, #2
 8004836:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 800483c:	79bb      	ldrb	r3, [r7, #6]
 800483e:	2b11      	cmp	r3, #17
 8004840:	f200 8166 	bhi.w	8004b10 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8004844:	a201      	add	r2, pc, #4	; (adr r2, 800484c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8004846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484a:	bf00      	nop
 800484c:	08004895 	.word	0x08004895
 8004850:	080048d3 	.word	0x080048d3
 8004854:	08004b11 	.word	0x08004b11
 8004858:	08004911 	.word	0x08004911
 800485c:	0800494b 	.word	0x0800494b
 8004860:	08004985 	.word	0x08004985
 8004864:	08004985 	.word	0x08004985
 8004868:	08004985 	.word	0x08004985
 800486c:	0800498b 	.word	0x0800498b
 8004870:	080049d1 	.word	0x080049d1
 8004874:	08004a17 	.word	0x08004a17
 8004878:	08004a55 	.word	0x08004a55
 800487c:	08004a93 	.word	0x08004a93
 8004880:	08004ad1 	.word	0x08004ad1
 8004884:	08004ad7 	.word	0x08004ad7
 8004888:	08004911 	.word	0x08004911
 800488c:	08004985 	.word	0x08004985
 8004890:	0800498b 	.word	0x0800498b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004898:	7bbb      	ldrb	r3, [r7, #14]
 800489a:	220e      	movs	r2, #14
 800489c:	f362 0304 	bfi	r3, r2, #0, #5
 80048a0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80048a2:	7b7b      	ldrb	r3, [r7, #13]
 80048a4:	2203      	movs	r2, #3
 80048a6:	f362 0303 	bfi	r3, r2, #0, #4
 80048aa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80048ac:	7b3b      	ldrb	r3, [r7, #12]
 80048ae:	2203      	movs	r2, #3
 80048b0:	f362 0303 	bfi	r3, r2, #0, #4
 80048b4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80048b6:	7a7b      	ldrb	r3, [r7, #9]
 80048b8:	220f      	movs	r2, #15
 80048ba:	f362 0306 	bfi	r3, r2, #0, #7
 80048be:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	7a3b      	ldrb	r3, [r7, #8]
 80048ca:	f362 0305 	bfi	r3, r2, #0, #6
 80048ce:	723b      	strb	r3, [r7, #8]
            break;
 80048d0:	e121      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80048d6:	7bbb      	ldrb	r3, [r7, #14]
 80048d8:	2206      	movs	r2, #6
 80048da:	f362 0304 	bfi	r3, r2, #0, #5
 80048de:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80048e0:	7b7b      	ldrb	r3, [r7, #13]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f362 0303 	bfi	r3, r2, #0, #4
 80048e8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80048ea:	7b3b      	ldrb	r3, [r7, #12]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f362 0303 	bfi	r3, r2, #0, #4
 80048f2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80048f4:	7a7b      	ldrb	r3, [r7, #9]
 80048f6:	2207      	movs	r2, #7
 80048f8:	f362 0306 	bfi	r3, r2, #0, #7
 80048fc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004904:	b2da      	uxtb	r2, r3
 8004906:	7a3b      	ldrb	r3, [r7, #8]
 8004908:	f362 0305 	bfi	r3, r2, #0, #6
 800490c:	723b      	strb	r3, [r7, #8]
            break;
 800490e:	e102      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004910:	2300      	movs	r3, #0
 8004912:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004914:	7bbb      	ldrb	r3, [r7, #14]
 8004916:	2202      	movs	r2, #2
 8004918:	f362 0304 	bfi	r3, r2, #0, #5
 800491c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800491e:	7b7b      	ldrb	r3, [r7, #13]
 8004920:	f36f 0303 	bfc	r3, #0, #4
 8004924:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004926:	7b3b      	ldrb	r3, [r7, #12]
 8004928:	f36f 0303 	bfc	r3, #0, #4
 800492c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800492e:	7a7b      	ldrb	r3, [r7, #9]
 8004930:	2203      	movs	r2, #3
 8004932:	f362 0306 	bfi	r3, r2, #0, #7
 8004936:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800493e:	b2da      	uxtb	r2, r3
 8004940:	7a3b      	ldrb	r3, [r7, #8]
 8004942:	f362 0305 	bfi	r3, r2, #0, #6
 8004946:	723b      	strb	r3, [r7, #8]
            break;
 8004948:	e0e5      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800494a:	2300      	movs	r3, #0
 800494c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800494e:	7bbb      	ldrb	r3, [r7, #14]
 8004950:	2201      	movs	r2, #1
 8004952:	f362 0304 	bfi	r3, r2, #0, #5
 8004956:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004958:	7b7b      	ldrb	r3, [r7, #13]
 800495a:	f36f 0303 	bfc	r3, #0, #4
 800495e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004960:	7b3b      	ldrb	r3, [r7, #12]
 8004962:	f36f 0303 	bfc	r3, #0, #4
 8004966:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8004968:	7a7b      	ldrb	r3, [r7, #9]
 800496a:	2202      	movs	r2, #2
 800496c:	f362 0306 	bfi	r3, r2, #0, #7
 8004970:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004978:	b2da      	uxtb	r2, r3
 800497a:	7a3b      	ldrb	r3, [r7, #8]
 800497c:	f362 0305 	bfi	r3, r2, #0, #6
 8004980:	723b      	strb	r3, [r7, #8]
            break;
 8004982:	e0c8      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004984:	f04f 33ff 	mov.w	r3, #4294967295
 8004988:	e0e5      	b.n	8004b56 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800498e:	7bbb      	ldrb	r3, [r7, #14]
 8004990:	221e      	movs	r2, #30
 8004992:	f362 0304 	bfi	r3, r2, #0, #5
 8004996:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8004998:	7b7b      	ldrb	r3, [r7, #13]
 800499a:	2207      	movs	r2, #7
 800499c:	f362 0303 	bfi	r3, r2, #0, #4
 80049a0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80049a2:	7b3b      	ldrb	r3, [r7, #12]
 80049a4:	2207      	movs	r2, #7
 80049a6:	f362 0303 	bfi	r3, r2, #0, #4
 80049aa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80049ac:	7a7b      	ldrb	r3, [r7, #9]
 80049ae:	221f      	movs	r2, #31
 80049b0:	f362 0306 	bfi	r3, r2, #0, #7
 80049b4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	7a3b      	ldrb	r3, [r7, #8]
 80049c0:	f362 0305 	bfi	r3, r2, #0, #6
 80049c4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80049c6:	7abb      	ldrb	r3, [r7, #10]
 80049c8:	f36f 0301 	bfc	r3, #0, #2
 80049cc:	72bb      	strb	r3, [r7, #10]
            break;
 80049ce:	e0a2      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80049d4:	7bbb      	ldrb	r3, [r7, #14]
 80049d6:	2211      	movs	r2, #17
 80049d8:	f362 0304 	bfi	r3, r2, #0, #5
 80049dc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80049de:	7b7b      	ldrb	r3, [r7, #13]
 80049e0:	2204      	movs	r2, #4
 80049e2:	f362 0303 	bfi	r3, r2, #0, #4
 80049e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80049e8:	7b3b      	ldrb	r3, [r7, #12]
 80049ea:	2204      	movs	r2, #4
 80049ec:	f362 0303 	bfi	r3, r2, #0, #4
 80049f0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80049f2:	7a7b      	ldrb	r3, [r7, #9]
 80049f4:	2212      	movs	r2, #18
 80049f6:	f362 0306 	bfi	r3, r2, #0, #7
 80049fa:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a02:	b2da      	uxtb	r2, r3
 8004a04:	7a3b      	ldrb	r3, [r7, #8]
 8004a06:	f362 0305 	bfi	r3, r2, #0, #6
 8004a0a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004a0c:	7abb      	ldrb	r3, [r7, #10]
 8004a0e:	f36f 0301 	bfc	r3, #0, #2
 8004a12:	72bb      	strb	r3, [r7, #10]
            break;
 8004a14:	e07f      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004a1a:	7bbb      	ldrb	r3, [r7, #14]
 8004a1c:	220e      	movs	r2, #14
 8004a1e:	f362 0304 	bfi	r3, r2, #0, #5
 8004a22:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004a24:	7b7b      	ldrb	r3, [r7, #13]
 8004a26:	2203      	movs	r2, #3
 8004a28:	f362 0303 	bfi	r3, r2, #0, #4
 8004a2c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004a2e:	7b3b      	ldrb	r3, [r7, #12]
 8004a30:	2203      	movs	r2, #3
 8004a32:	f362 0303 	bfi	r3, r2, #0, #4
 8004a36:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004a38:	7a7b      	ldrb	r3, [r7, #9]
 8004a3a:	220f      	movs	r2, #15
 8004a3c:	f362 0306 	bfi	r3, r2, #0, #7
 8004a40:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	7a3b      	ldrb	r3, [r7, #8]
 8004a4c:	f362 0305 	bfi	r3, r2, #0, #6
 8004a50:	723b      	strb	r3, [r7, #8]
            break;
 8004a52:	e060      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8004a58:	7bbb      	ldrb	r3, [r7, #14]
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	f362 0304 	bfi	r3, r2, #0, #5
 8004a60:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004a62:	7b7b      	ldrb	r3, [r7, #13]
 8004a64:	2202      	movs	r2, #2
 8004a66:	f362 0303 	bfi	r3, r2, #0, #4
 8004a6a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004a6c:	7b3b      	ldrb	r3, [r7, #12]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f362 0303 	bfi	r3, r2, #0, #4
 8004a74:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8004a76:	7a7b      	ldrb	r3, [r7, #9]
 8004a78:	2209      	movs	r2, #9
 8004a7a:	f362 0306 	bfi	r3, r2, #0, #7
 8004a7e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	7a3b      	ldrb	r3, [r7, #8]
 8004a8a:	f362 0305 	bfi	r3, r2, #0, #6
 8004a8e:	723b      	strb	r3, [r7, #8]
            break;
 8004a90:	e041      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004a96:	7bbb      	ldrb	r3, [r7, #14]
 8004a98:	2206      	movs	r2, #6
 8004a9a:	f362 0304 	bfi	r3, r2, #0, #5
 8004a9e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004aa0:	7b7b      	ldrb	r3, [r7, #13]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f362 0303 	bfi	r3, r2, #0, #4
 8004aa8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004aaa:	7b3b      	ldrb	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f362 0303 	bfi	r3, r2, #0, #4
 8004ab2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004ab4:	7a7b      	ldrb	r3, [r7, #9]
 8004ab6:	2207      	movs	r2, #7
 8004ab8:	f362 0306 	bfi	r3, r2, #0, #7
 8004abc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	7a3b      	ldrb	r3, [r7, #8]
 8004ac8:	f362 0305 	bfi	r3, r2, #0, #6
 8004acc:	723b      	strb	r3, [r7, #8]
            break;
 8004ace:	e022      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	e03f      	b.n	8004b56 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f362 0304 	bfi	r3, r2, #0, #5
 8004ae2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004ae4:	7b7b      	ldrb	r3, [r7, #13]
 8004ae6:	f36f 0303 	bfc	r3, #0, #4
 8004aea:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004aec:	7b3b      	ldrb	r3, [r7, #12]
 8004aee:	f36f 0303 	bfc	r3, #0, #4
 8004af2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004af4:	7a7b      	ldrb	r3, [r7, #9]
 8004af6:	2203      	movs	r2, #3
 8004af8:	f362 0306 	bfi	r3, r2, #0, #7
 8004afc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	7a3b      	ldrb	r3, [r7, #8]
 8004b08:	f362 0305 	bfi	r3, r2, #0, #6
 8004b0c:	723b      	strb	r3, [r7, #8]
            break;
 8004b0e:	e002      	b.n	8004b16 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8004b10:	f04f 33ff 	mov.w	r3, #4294967295
 8004b14:	e01f      	b.n	8004b56 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	2108      	movs	r1, #8
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fe f929 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 8004b22:	4603      	mov	r3, r0
 8004b24:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004b26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8004b2e:	f06f 0301 	mvn.w	r3, #1
 8004b32:	e010      	b.n	8004b56 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8004b34:	68ba      	ldr	r2, [r7, #8]
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	210c      	movs	r1, #12
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe f91a 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 8004b40:	4603      	mov	r3, r0
 8004b42:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004b44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8004b4c:	f06f 0302 	mvn.w	r3, #2
 8004b50:	e001      	b.n	8004b56 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 8004b52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	000e0303 	.word	0x000e0303

08004b64 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	71fb      	strb	r3, [r7, #7]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8004b74:	2300      	movs	r3, #0
 8004b76:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8004b78:	4b3f      	ldr	r3, [pc, #252]	; (8004c78 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8004b7a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8004b7c:	79bb      	ldrb	r3, [r7, #6]
 8004b7e:	2b11      	cmp	r3, #17
 8004b80:	d862      	bhi.n	8004c48 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 8004b82:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8004b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004c49 	.word	0x08004c49
 8004b94:	08004bd1 	.word	0x08004bd1
 8004b98:	08004bd1 	.word	0x08004bd1
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	08004bef 	.word	0x08004bef
 8004bac:	08004bef 	.word	0x08004bef
 8004bb0:	08004bef 	.word	0x08004bef
 8004bb4:	08004bef 	.word	0x08004bef
 8004bb8:	08004bef 	.word	0x08004bef
 8004bbc:	08004bef 	.word	0x08004bef
 8004bc0:	08004bef 	.word	0x08004bef
 8004bc4:	08004c0d 	.word	0x08004c0d
 8004bc8:	08004c0d 	.word	0x08004c0d
 8004bcc:	08004c2b 	.word	0x08004c2b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8004bd4:	230e      	movs	r3, #14
 8004bd6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8004bd8:	7a7b      	ldrb	r3, [r7, #9]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	f362 0306 	bfi	r3, r2, #0, #7
 8004be0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8004be2:	7a3b      	ldrb	r3, [r7, #8]
 8004be4:	2203      	movs	r2, #3
 8004be6:	f362 0306 	bfi	r3, r2, #0, #7
 8004bea:	723b      	strb	r3, [r7, #8]
            break;
 8004bec:	e02f      	b.n	8004c4e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8004bf2:	231e      	movs	r3, #30
 8004bf4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8004bf6:	7a7b      	ldrb	r3, [r7, #9]
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	f362 0306 	bfi	r3, r2, #0, #7
 8004bfe:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8004c00:	7a3b      	ldrb	r3, [r7, #8]
 8004c02:	2207      	movs	r2, #7
 8004c04:	f362 0306 	bfi	r3, r2, #0, #7
 8004c08:	723b      	strb	r3, [r7, #8]
            break;
 8004c0a:	e020      	b.n	8004c4e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8004c10:	2307      	movs	r3, #7
 8004c12:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8004c14:	7a7b      	ldrb	r3, [r7, #9]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f362 0306 	bfi	r3, r2, #0, #7
 8004c1c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8004c1e:	7a3b      	ldrb	r3, [r7, #8]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f362 0306 	bfi	r3, r2, #0, #7
 8004c26:	723b      	strb	r3, [r7, #8]
            break;
 8004c28:	e011      	b.n	8004c4e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8004c2e:	233e      	movs	r3, #62	; 0x3e
 8004c30:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8004c32:	7a7b      	ldrb	r3, [r7, #9]
 8004c34:	220f      	movs	r2, #15
 8004c36:	f362 0306 	bfi	r3, r2, #0, #7
 8004c3a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8004c3c:	7a3b      	ldrb	r3, [r7, #8]
 8004c3e:	220f      	movs	r2, #15
 8004c40:	f362 0306 	bfi	r3, r2, #0, #7
 8004c44:	723b      	strb	r3, [r7, #8]
            break;
 8004c46:	e002      	b.n	8004c4e <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8004c48:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4c:	e010      	b.n	8004c70 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	79fb      	ldrb	r3, [r7, #7]
 8004c52:	2104      	movs	r1, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fe f88d 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d002      	beq.n	8004c6c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8004c66:	f06f 0301 	mvn.w	r3, #1
 8004c6a:	e001      	b.n	8004c70 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8004c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	003e0f0f 	.word	0x003e0f0f

08004c7c <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	4603      	mov	r3, r0
 8004c84:	71fb      	strb	r3, [r7, #7]
 8004c86:	460b      	mov	r3, r1
 8004c88:	71bb      	strb	r3, [r7, #6]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8004c92:	4b92      	ldr	r3, [pc, #584]	; (8004edc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8004c94:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8004c9a:	7abb      	ldrb	r3, [r7, #10]
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	f362 0301 	bfi	r3, r2, #0, #2
 8004ca2:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8004ca8:	79bb      	ldrb	r3, [r7, #6]
 8004caa:	2b11      	cmp	r3, #17
 8004cac:	f200 80ef 	bhi.w	8004e8e <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8004cb0:	a201      	add	r2, pc, #4	; (adr r2, 8004cb8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004d01 	.word	0x08004d01
 8004cbc:	08004d3f 	.word	0x08004d3f
 8004cc0:	08004e8f 	.word	0x08004e8f
 8004cc4:	08004d79 	.word	0x08004d79
 8004cc8:	08004d79 	.word	0x08004d79
 8004ccc:	08004d79 	.word	0x08004d79
 8004cd0:	08004d79 	.word	0x08004d79
 8004cd4:	08004d79 	.word	0x08004d79
 8004cd8:	08004d7f 	.word	0x08004d7f
 8004cdc:	08004dc5 	.word	0x08004dc5
 8004ce0:	08004e0b 	.word	0x08004e0b
 8004ce4:	08004e49 	.word	0x08004e49
 8004ce8:	08004e4f 	.word	0x08004e4f
 8004cec:	08004e89 	.word	0x08004e89
 8004cf0:	08004e89 	.word	0x08004e89
 8004cf4:	08004d79 	.word	0x08004d79
 8004cf8:	08004d79 	.word	0x08004d79
 8004cfc:	08004d7f 	.word	0x08004d7f
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004d00:	2300      	movs	r3, #0
 8004d02:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004d04:	7bbb      	ldrb	r3, [r7, #14]
 8004d06:	2206      	movs	r2, #6
 8004d08:	f362 0304 	bfi	r3, r2, #0, #5
 8004d0c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004d0e:	7b7b      	ldrb	r3, [r7, #13]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f362 0303 	bfi	r3, r2, #0, #4
 8004d16:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004d18:	7b3b      	ldrb	r3, [r7, #12]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f362 0303 	bfi	r3, r2, #0, #4
 8004d20:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004d22:	7a7b      	ldrb	r3, [r7, #9]
 8004d24:	2207      	movs	r2, #7
 8004d26:	f362 0306 	bfi	r3, r2, #0, #7
 8004d2a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	7a3b      	ldrb	r3, [r7, #8]
 8004d36:	f362 0305 	bfi	r3, r2, #0, #6
 8004d3a:	723b      	strb	r3, [r7, #8]
            break;
 8004d3c:	e0aa      	b.n	8004e94 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004d42:	7bbb      	ldrb	r3, [r7, #14]
 8004d44:	2202      	movs	r2, #2
 8004d46:	f362 0304 	bfi	r3, r2, #0, #5
 8004d4a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004d4c:	7b7b      	ldrb	r3, [r7, #13]
 8004d4e:	f36f 0303 	bfc	r3, #0, #4
 8004d52:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004d54:	7b3b      	ldrb	r3, [r7, #12]
 8004d56:	f36f 0303 	bfc	r3, #0, #4
 8004d5a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004d5c:	7a7b      	ldrb	r3, [r7, #9]
 8004d5e:	2203      	movs	r2, #3
 8004d60:	f362 0306 	bfi	r3, r2, #0, #7
 8004d64:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	7a3b      	ldrb	r3, [r7, #8]
 8004d70:	f362 0305 	bfi	r3, r2, #0, #6
 8004d74:	723b      	strb	r3, [r7, #8]
            break;
 8004d76:	e08d      	b.n	8004e94 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004d78:	f04f 33ff 	mov.w	r3, #4294967295
 8004d7c:	e0aa      	b.n	8004ed4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8004d82:	7bbb      	ldrb	r3, [r7, #14]
 8004d84:	220e      	movs	r2, #14
 8004d86:	f362 0304 	bfi	r3, r2, #0, #5
 8004d8a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8004d8c:	7b7b      	ldrb	r3, [r7, #13]
 8004d8e:	2203      	movs	r2, #3
 8004d90:	f362 0303 	bfi	r3, r2, #0, #4
 8004d94:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8004d96:	7b3b      	ldrb	r3, [r7, #12]
 8004d98:	2203      	movs	r2, #3
 8004d9a:	f362 0303 	bfi	r3, r2, #0, #4
 8004d9e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8004da0:	7a7b      	ldrb	r3, [r7, #9]
 8004da2:	220f      	movs	r2, #15
 8004da4:	f362 0306 	bfi	r3, r2, #0, #7
 8004da8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	7a3b      	ldrb	r3, [r7, #8]
 8004db4:	f362 0305 	bfi	r3, r2, #0, #6
 8004db8:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004dba:	7abb      	ldrb	r3, [r7, #10]
 8004dbc:	f36f 0301 	bfc	r3, #0, #2
 8004dc0:	72bb      	strb	r3, [r7, #10]
            break;
 8004dc2:	e067      	b.n	8004e94 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	2207      	movs	r2, #7
 8004dcc:	f362 0304 	bfi	r3, r2, #0, #5
 8004dd0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8004dd2:	7b7b      	ldrb	r3, [r7, #13]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	f362 0303 	bfi	r3, r2, #0, #4
 8004dda:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8004ddc:	7b3b      	ldrb	r3, [r7, #12]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f362 0303 	bfi	r3, r2, #0, #4
 8004de4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 8004de6:	7a7b      	ldrb	r3, [r7, #9]
 8004de8:	2208      	movs	r2, #8
 8004dea:	f362 0306 	bfi	r3, r2, #0, #7
 8004dee:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	7a3b      	ldrb	r3, [r7, #8]
 8004dfa:	f362 0305 	bfi	r3, r2, #0, #6
 8004dfe:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8004e00:	7abb      	ldrb	r3, [r7, #10]
 8004e02:	f36f 0301 	bfc	r3, #0, #2
 8004e06:	72bb      	strb	r3, [r7, #10]
            break;
 8004e08:	e044      	b.n	8004e94 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8004e0e:	7bbb      	ldrb	r3, [r7, #14]
 8004e10:	2206      	movs	r2, #6
 8004e12:	f362 0304 	bfi	r3, r2, #0, #5
 8004e16:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8004e18:	7b7b      	ldrb	r3, [r7, #13]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f362 0303 	bfi	r3, r2, #0, #4
 8004e20:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8004e22:	7b3b      	ldrb	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f362 0303 	bfi	r3, r2, #0, #4
 8004e2a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8004e2c:	7a7b      	ldrb	r3, [r7, #9]
 8004e2e:	2207      	movs	r2, #7
 8004e30:	f362 0306 	bfi	r3, r2, #0, #7
 8004e34:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	7a3b      	ldrb	r3, [r7, #8]
 8004e40:	f362 0305 	bfi	r3, r2, #0, #6
 8004e44:	723b      	strb	r3, [r7, #8]
            break;
 8004e46:	e025      	b.n	8004e94 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004e48:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4c:	e042      	b.n	8004ed4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8004e52:	7bbb      	ldrb	r3, [r7, #14]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f362 0304 	bfi	r3, r2, #0, #5
 8004e5a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8004e5c:	7b7b      	ldrb	r3, [r7, #13]
 8004e5e:	f36f 0303 	bfc	r3, #0, #4
 8004e62:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8004e64:	7b3b      	ldrb	r3, [r7, #12]
 8004e66:	f36f 0303 	bfc	r3, #0, #4
 8004e6a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8004e6c:	7a7b      	ldrb	r3, [r7, #9]
 8004e6e:	2203      	movs	r2, #3
 8004e70:	f362 0306 	bfi	r3, r2, #0, #7
 8004e74:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e7c:	b2da      	uxtb	r2, r3
 8004e7e:	7a3b      	ldrb	r3, [r7, #8]
 8004e80:	f362 0305 	bfi	r3, r2, #0, #6
 8004e84:	723b      	strb	r3, [r7, #8]
            break;
 8004e86:	e005      	b.n	8004e94 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8004e88:	f04f 33ff 	mov.w	r3, #4294967295
 8004e8c:	e022      	b.n	8004ed4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e92:	e01f      	b.n	8004ed4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	79fb      	ldrb	r3, [r7, #7]
 8004e98:	2108      	movs	r1, #8
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fd ff6a 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004ea4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8004eac:	f06f 0301 	mvn.w	r3, #1
 8004eb0:	e010      	b.n	8004ed4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	210c      	movs	r1, #12
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f7fd ff5b 	bl	8002d74 <DRV_CANFDSPI_WriteWord>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8004ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8004eca:	f06f 0302 	mvn.w	r3, #2
 8004ece:	e001      	b.n	8004ed4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8004ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	000e0303 	.word	0x000e0303

08004ee0 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	71fb      	strb	r3, [r7, #7]
 8004eea:	460b      	mov	r3, r1
 8004eec:	71bb      	strb	r3, [r7, #6]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8004efa:	f640 6307 	movw	r3, #3591	; 0xe07
 8004efe:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8004f04:	f107 0308 	add.w	r3, r7, #8
 8004f08:	1cda      	adds	r2, r3, #3
 8004f0a:	89b9      	ldrh	r1, [r7, #12]
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd fe04 	bl	8002b1c <DRV_CANFDSPI_ReadByte>
 8004f14:	4603      	mov	r3, r0
 8004f16:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d002      	beq.n	8004f26 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	e020      	b.n	8004f68 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8004f26:	79bb      	ldrb	r3, [r7, #6]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	7afb      	ldrb	r3, [r7, #11]
 8004f30:	f362 0300 	bfi	r3, r2, #0, #1
 8004f34:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8004f36:	797b      	ldrb	r3, [r7, #5]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	b2da      	uxtb	r2, r3
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
 8004f40:	f362 0341 	bfi	r3, r2, #1, #1
 8004f44:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8004f46:	7afa      	ldrb	r2, [r7, #11]
 8004f48:	89b9      	ldrh	r1, [r7, #12]
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fd fe41 	bl	8002bd4 <DRV_CANFDSPI_WriteByte>
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8004f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8004f5e:	f06f 0301 	mvn.w	r3, #1
 8004f62:	e001      	b.n	8004f68 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8004f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d802      	bhi.n	8004f8a <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e02a      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	3b09      	subs	r3, #9
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d825      	bhi.n	8004fde <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 8004f92:	a201      	add	r2, pc, #4	; (adr r2, 8004f98 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8004f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f98:	08004fb5 	.word	0x08004fb5
 8004f9c:	08004fbb 	.word	0x08004fbb
 8004fa0:	08004fc1 	.word	0x08004fc1
 8004fa4:	08004fc7 	.word	0x08004fc7
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fd3 	.word	0x08004fd3
 8004fb0:	08004fd9 	.word	0x08004fd9
            case CAN_DLC_12:
                dataBytesInObject = 12;
 8004fb4:	230c      	movs	r3, #12
 8004fb6:	60fb      	str	r3, [r7, #12]
                break;
 8004fb8:	e012      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8004fba:	2310      	movs	r3, #16
 8004fbc:	60fb      	str	r3, [r7, #12]
                break;
 8004fbe:	e00f      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8004fc0:	2314      	movs	r3, #20
 8004fc2:	60fb      	str	r3, [r7, #12]
                break;
 8004fc4:	e00c      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 8004fc6:	2318      	movs	r3, #24
 8004fc8:	60fb      	str	r3, [r7, #12]
                break;
 8004fca:	e009      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8004fcc:	2320      	movs	r3, #32
 8004fce:	60fb      	str	r3, [r7, #12]
                break;
 8004fd0:	e006      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 8004fd2:	2330      	movs	r3, #48	; 0x30
 8004fd4:	60fb      	str	r3, [r7, #12]
                break;
 8004fd6:	e003      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8004fd8:	2340      	movs	r3, #64	; 0x40
 8004fda:	60fb      	str	r3, [r7, #12]
                break;
 8004fdc:	e000      	b.n	8004fe0 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8004fde:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop

08004ff0 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8004ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005000:	f023 0218 	bic.w	r2, r3, #24
 8005004:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4313      	orrs	r3, r2
 800500c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr

0800501c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005028:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800502a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4313      	orrs	r3, r2
 8005032:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005038:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4013      	ands	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005040:	68fb      	ldr	r3, [r7, #12]
}
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  getTime();
 8005058:	f000 f822 	bl	80050a0 <getTime>
  sprintf(txBuffer,"%s %s\r\n",time, message);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a0c      	ldr	r2, [pc, #48]	; (8005090 <serialOut+0x40>)
 8005060:	490c      	ldr	r1, [pc, #48]	; (8005094 <serialOut+0x44>)
 8005062:	480d      	ldr	r0, [pc, #52]	; (8005098 <serialOut+0x48>)
 8005064:	f006 feb2 	bl	800bdcc <siprintf>

  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005068:	480b      	ldr	r0, [pc, #44]	; (8005098 <serialOut+0x48>)
 800506a:	f7fb f889 	bl	8000180 <strlen>
 800506e:	4603      	mov	r3, r0
 8005070:	b29a      	uxth	r2, r3
 8005072:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005076:	4908      	ldr	r1, [pc, #32]	; (8005098 <serialOut+0x48>)
 8005078:	4808      	ldr	r0, [pc, #32]	; (800509c <serialOut+0x4c>)
 800507a:	f006 f81b 	bl	800b0b4 <HAL_UART_Transmit>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d001      	beq.n	8005088 <serialOut+0x38>
    Error_Handler();
 8005084:	f000 fcf2 	bl	8005a6c <Error_Handler>
  }
}
 8005088:	bf00      	nop
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	2000ce18 	.word	0x2000ce18
 8005094:	0800d84c 	.word	0x0800d84c
 8005098:	2000ce24 	.word	0x2000ce24
 800509c:	2000c8dc 	.word	0x2000c8dc

080050a0 <getTime>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTime(void){
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	; 0x28
 80050a4:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80050a6:	f107 0308 	add.w	r3, r7, #8
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	605a      	str	r2, [r3, #4]
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	60da      	str	r2, [r3, #12]
 80050b4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 80050ba:	f107 0308 	add.w	r3, r7, #8
 80050be:	2201      	movs	r2, #1
 80050c0:	4619      	mov	r1, r3
 80050c2:	480e      	ldr	r0, [pc, #56]	; (80050fc <getTime+0x5c>)
 80050c4:	f004 f894 	bl	80091f0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80050c8:	1d3b      	adds	r3, r7, #4
 80050ca:	2201      	movs	r2, #1
 80050cc:	4619      	mov	r1, r3
 80050ce:	480b      	ldr	r0, [pc, #44]	; (80050fc <getTime+0x5c>)
 80050d0:	f004 f998 	bl	8009404 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80050d4:	7abb      	ldrb	r3, [r7, #10]
 80050d6:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80050d8:	7a7b      	ldrb	r3, [r7, #9]
 80050da:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80050dc:	7a3b      	ldrb	r3, [r7, #8]
 80050de:	777b      	strb	r3, [r7, #29]
  sprintf(time,"%02x:%02x:%02x",hours,minutes,seconds);
 80050e0:	7f7a      	ldrb	r2, [r7, #29]
 80050e2:	7fb9      	ldrb	r1, [r7, #30]
 80050e4:	7ffb      	ldrb	r3, [r7, #31]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	460b      	mov	r3, r1
 80050ea:	4905      	ldr	r1, [pc, #20]	; (8005100 <getTime+0x60>)
 80050ec:	4805      	ldr	r0, [pc, #20]	; (8005104 <getTime+0x64>)
 80050ee:	f006 fe6d 	bl	800bdcc <siprintf>
}
 80050f2:	bf00      	nop
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	2000c97c 	.word	0x2000c97c
 8005100:	0800d854 	.word	0x0800d854
 8005104:	2000ce18 	.word	0x2000ce18

08005108 <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8005112:	79fb      	ldrb	r3, [r7, #7]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d012      	beq.n	800513e <switchLedOn+0x36>
 8005118:	2b02      	cmp	r3, #2
 800511a:	dc16      	bgt.n	800514a <switchLedOn+0x42>
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <switchLedOn+0x1e>
 8005120:	2b01      	cmp	r3, #1
 8005122:	d006      	beq.n	8005132 <switchLedOn+0x2a>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 8005124:	e011      	b.n	800514a <switchLedOn+0x42>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 8005126:	2201      	movs	r2, #1
 8005128:	2102      	movs	r1, #2
 800512a:	480a      	ldr	r0, [pc, #40]	; (8005154 <switchLedOn+0x4c>)
 800512c:	f001 ff80 	bl	8007030 <HAL_GPIO_WritePin>
            break;
 8005130:	e00c      	b.n	800514c <switchLedOn+0x44>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 8005132:	2201      	movs	r2, #1
 8005134:	2101      	movs	r1, #1
 8005136:	4807      	ldr	r0, [pc, #28]	; (8005154 <switchLedOn+0x4c>)
 8005138:	f001 ff7a 	bl	8007030 <HAL_GPIO_WritePin>
            break;
 800513c:	e006      	b.n	800514c <switchLedOn+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 800513e:	2201      	movs	r2, #1
 8005140:	2120      	movs	r1, #32
 8005142:	4804      	ldr	r0, [pc, #16]	; (8005154 <switchLedOn+0x4c>)
 8005144:	f001 ff74 	bl	8007030 <HAL_GPIO_WritePin>
            break;
 8005148:	e000      	b.n	800514c <switchLedOn+0x44>
        default: break;
 800514a:	bf00      	nop
    }
}
 800514c:	bf00      	nop
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	48000400 	.word	0x48000400

08005158 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	4603      	mov	r3, r0
 8005160:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	2b02      	cmp	r3, #2
 8005166:	d012      	beq.n	800518e <switchLedOff+0x36>
 8005168:	2b02      	cmp	r3, #2
 800516a:	dc16      	bgt.n	800519a <switchLedOff+0x42>
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <switchLedOff+0x1e>
 8005170:	2b01      	cmp	r3, #1
 8005172:	d006      	beq.n	8005182 <switchLedOff+0x2a>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case BLUE_LED:
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8005174:	e011      	b.n	800519a <switchLedOff+0x42>
          HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8005176:	2200      	movs	r2, #0
 8005178:	2102      	movs	r1, #2
 800517a:	480a      	ldr	r0, [pc, #40]	; (80051a4 <switchLedOff+0x4c>)
 800517c:	f001 ff58 	bl	8007030 <HAL_GPIO_WritePin>
            break;
 8005180:	e00c      	b.n	800519c <switchLedOff+0x44>
          HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 8005182:	2200      	movs	r2, #0
 8005184:	2101      	movs	r1, #1
 8005186:	4807      	ldr	r0, [pc, #28]	; (80051a4 <switchLedOff+0x4c>)
 8005188:	f001 ff52 	bl	8007030 <HAL_GPIO_WritePin>
            break;
 800518c:	e006      	b.n	800519c <switchLedOff+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 800518e:	2200      	movs	r2, #0
 8005190:	2120      	movs	r1, #32
 8005192:	4804      	ldr	r0, [pc, #16]	; (80051a4 <switchLedOff+0x4c>)
 8005194:	f001 ff4c 	bl	8007030 <HAL_GPIO_WritePin>
            break;
 8005198:	e000      	b.n	800519c <switchLedOff+0x44>
        default: break;
 800519a:	bf00      	nop
    }
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	48000400 	.word	0x48000400

080051a8 <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN1_INT_Pin){
 80051b2:	88fb      	ldrh	r3, [r7, #6]
 80051b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051b8:	d04e      	beq.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c0:	d103      	bne.n	80051ca <HAL_GPIO_EXTI_Callback+0x22>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 80051c2:	4b27      	ldr	r3, [pc, #156]	; (8005260 <HAL_GPIO_EXTI_Callback+0xb8>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON2_Pin){

  }else if(GPIO_Pin == BUTTON3_Pin){

  }
}
 80051c8:	e046      	b.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d0:	d119      	bne.n	8005206 <HAL_GPIO_EXTI_Callback+0x5e>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 80051d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051d6:	4823      	ldr	r0, [pc, #140]	; (8005264 <HAL_GPIO_EXTI_Callback+0xbc>)
 80051d8:	f001 ff12 	bl	8007000 <HAL_GPIO_ReadPin>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	461a      	mov	r2, r3
 80051ea:	4b1f      	ldr	r3, [pc, #124]	; (8005268 <HAL_GPIO_EXTI_Callback+0xc0>)
 80051ec:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 80051ee:	4b1e      	ldr	r3, [pc, #120]	; (8005268 <HAL_GPIO_EXTI_Callback+0xc0>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_GPIO_EXTI_Callback+0x56>
 80051f6:	2000      	movs	r0, #0
 80051f8:	f7ff ff86 	bl	8005108 <switchLedOn>
}
 80051fc:	e02c      	b.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
     else switchLedOff(VCU_RX_LED);
 80051fe:	2000      	movs	r0, #0
 8005200:	f7ff ffaa 	bl	8005158 <switchLedOff>
}
 8005204:	e028      	b.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520c:	d024      	beq.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 800520e:	88fb      	ldrh	r3, [r7, #6]
 8005210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005214:	d103      	bne.n	800521e <HAL_GPIO_EXTI_Callback+0x76>
    can2TxInterrupt = 1;
 8005216:	4b15      	ldr	r3, [pc, #84]	; (800526c <HAL_GPIO_EXTI_Callback+0xc4>)
 8005218:	2201      	movs	r2, #1
 800521a:	701a      	strb	r2, [r3, #0]
}
 800521c:	e01c      	b.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005224:	d118      	bne.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8005226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800522a:	480e      	ldr	r0, [pc, #56]	; (8005264 <HAL_GPIO_EXTI_Callback+0xbc>)
 800522c:	f001 fee8 	bl	8007000 <HAL_GPIO_ReadPin>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	4b0c      	ldr	r3, [pc, #48]	; (8005270 <HAL_GPIO_EXTI_Callback+0xc8>)
 8005240:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8005242:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_GPIO_EXTI_Callback+0xc8>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_EXTI_Callback+0xaa>
 800524a:	2001      	movs	r0, #1
 800524c:	f7ff ff5c 	bl	8005108 <switchLedOn>
}
 8005250:	e002      	b.n	8005258 <HAL_GPIO_EXTI_Callback+0xb0>
    else switchLedOff(MCU_RX_LED);
 8005252:	2001      	movs	r0, #1
 8005254:	f7ff ff80 	bl	8005158 <switchLedOff>
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	2000ceef 	.word	0x2000ceef
 8005264:	48000400 	.word	0x48000400
 8005268:	2000ceee 	.word	0x2000ceee
 800526c:	2000ceed 	.word	0x2000ceed
 8005270:	2000ceec 	.word	0x2000ceec

08005274 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	429a      	cmp	r2, r3
 8005286:	d11f      	bne.n	80052c8 <HAL_TIM_PeriodElapsedCallback+0x54>
    // last contact timer overflow
    etTimerOverflows++;
 8005288:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	4a11      	ldr	r2, [pc, #68]	; (80052d4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8005290:	6013      	str	r3, [r2, #0]
    decSec++;
 8005292:	4b11      	ldr	r3, [pc, #68]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4b0f      	ldr	r3, [pc, #60]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800529c:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 800529e:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b0a      	cmp	r3, #10
 80052a4:	d106      	bne.n	80052b4 <HAL_TIM_PeriodElapsedCallback+0x40>
      decSec = 0;
 80052a6:	4b0c      	ldr	r3, [pc, #48]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin);
 80052ac:	2120      	movs	r1, #32
 80052ae:	480b      	ldr	r0, [pc, #44]	; (80052dc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80052b0:	f001 fed6 	bl	8007060 <HAL_GPIO_TogglePin>
    }
    if((decSec % 2) == 0) sendState = 1;
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d102      	bne.n	80052c8 <HAL_TIM_PeriodElapsedCallback+0x54>
 80052c2:	4b07      	ldr	r3, [pc, #28]	; (80052e0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80052c4:	2201      	movs	r2, #1
 80052c6:	701a      	strb	r2, [r3, #0]
  }
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	2000ca68 	.word	0x2000ca68
 80052d4:	2000cef0 	.word	0x2000cef0
 80052d8:	2000cef4 	.word	0x2000cef4
 80052dc:	48000400 	.word	0x48000400
 80052e0:	2000cef5 	.word	0x2000cef5

080052e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80052e8:	f001 fb84 	bl	80069f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80052ec:	f000 f824 	bl	8005338 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80052f0:	f000 f88e 	bl	8005410 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80052f4:	f000 fb06 	bl	8005904 <MX_GPIO_Init>
  MX_SPI1_Init();
 80052f8:	f000 f9b2 	bl	8005660 <MX_SPI1_Init>
  MX_SPI2_Init();
 80052fc:	f000 f9ee 	bl	80056dc <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005300:	f000 f8f0 	bl	80054e4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005304:	f000 fad6 	bl	80058b4 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005308:	f000 f938 	bl	800557c <MX_PKA_Init>
  MX_RTC_Init();
 800530c:	f000 f94a 	bl	80055a4 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005310:	f000 f89c 	bl	800544c <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005314:	f000 fa20 	bl	8005758 <MX_TIM1_Init>


  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on


  DRV_CANFDSPI_Reset(CAN2);
 8005318:	2001      	movs	r0, #1
 800531a:	f7fd fbb5 	bl	8002a88 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN1);
 800531e:	2000      	movs	r0, #0
 8005320:	f7fd fbb2 	bl	8002a88 <DRV_CANFDSPI_Reset>
  PC_Initialize();
 8005324:	f7fb fd24 	bl	8000d70 <PC_Initialize>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005328:	4802      	ldr	r0, [pc, #8]	; (8005334 <main+0x50>)
 800532a:	f004 fdc3 	bl	8009eb4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PC_Tasks();
 800532e:	f7fb fe3f 	bl	8000fb0 <PC_Tasks>
 8005332:	e7fc      	b.n	800532e <main+0x4a>
 8005334:	2000ca68 	.word	0x2000ca68

08005338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b09a      	sub	sp, #104	; 0x68
 800533c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800533e:	f107 0320 	add.w	r3, r7, #32
 8005342:	2248      	movs	r2, #72	; 0x48
 8005344:	2100      	movs	r1, #0
 8005346:	4618      	mov	r0, r3
 8005348:	f006 fcfa 	bl	800bd40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800534c:	1d3b      	adds	r3, r7, #4
 800534e:	2200      	movs	r2, #0
 8005350:	601a      	str	r2, [r3, #0]
 8005352:	605a      	str	r2, [r3, #4]
 8005354:	609a      	str	r2, [r3, #8]
 8005356:	60da      	str	r2, [r3, #12]
 8005358:	611a      	str	r2, [r3, #16]
 800535a:	615a      	str	r2, [r3, #20]
 800535c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800535e:	f002 f807 	bl	8007370 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005362:	2010      	movs	r0, #16
 8005364:	f7ff fe44 	bl	8004ff0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005368:	4b28      	ldr	r3, [pc, #160]	; (800540c <SystemClock_Config+0xd4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005370:	4a26      	ldr	r2, [pc, #152]	; (800540c <SystemClock_Config+0xd4>)
 8005372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	4b24      	ldr	r3, [pc, #144]	; (800540c <SystemClock_Config+0xd4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005384:	2307      	movs	r3, #7
 8005386:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005388:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800538e:	2301      	movs	r3, #1
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005396:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005398:	2340      	movs	r3, #64	; 0x40
 800539a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800539c:	2302      	movs	r3, #2
 800539e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80053a0:	2303      	movs	r3, #3
 80053a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80053a4:	2310      	movs	r3, #16
 80053a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80053a8:	2308      	movs	r3, #8
 80053aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80053ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80053b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80053b2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80053b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80053b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80053bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80053be:	f107 0320 	add.w	r3, r7, #32
 80053c2:	4618      	mov	r0, r3
 80053c4:	f002 fb68 	bl	8007a98 <HAL_RCC_OscConfig>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80053ce:	f000 fb4d 	bl	8005a6c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80053d2:	236f      	movs	r3, #111	; 0x6f
 80053d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053d6:	2303      	movs	r3, #3
 80053d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	2103      	movs	r1, #3
 80053f2:	4618      	mov	r0, r3
 80053f4:	f002 fec4 	bl	8008180 <HAL_RCC_ClockConfig>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80053fe:	f000 fb35 	bl	8005a6c <Error_Handler>
  }
}
 8005402:	bf00      	nop
 8005404:	3768      	adds	r7, #104	; 0x68
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	58000400 	.word	0x58000400

08005410 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b094      	sub	sp, #80	; 0x50
 8005414:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005416:	463b      	mov	r3, r7
 8005418:	2250      	movs	r2, #80	; 0x50
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f006 fc8f 	bl	800bd40 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005426:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8005428:	2302      	movs	r3, #2
 800542a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800542c:	2310      	movs	r3, #16
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005430:	463b      	mov	r3, r7
 8005432:	4618      	mov	r0, r3
 8005434:	f003 fae1 	bl	80089fa <HAL_RCCEx_PeriphCLKConfig>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800543e:	f000 fb15 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005442:	bf00      	nop
 8005444:	3750      	adds	r7, #80	; 0x50
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
	...

0800544c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005450:	4b22      	ldr	r3, [pc, #136]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005452:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <MX_LPUART1_UART_Init+0x94>)
 8005454:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8005456:	4b21      	ldr	r3, [pc, #132]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800545c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800545e:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005460:	2200      	movs	r2, #0
 8005462:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005464:	4b1d      	ldr	r3, [pc, #116]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005466:	2200      	movs	r2, #0
 8005468:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800546a:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 800546c:	2200      	movs	r2, #0
 800546e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005470:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005472:	220c      	movs	r2, #12
 8005474:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005476:	4b19      	ldr	r3, [pc, #100]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005478:	2200      	movs	r2, #0
 800547a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800547c:	4b17      	ldr	r3, [pc, #92]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 800547e:	2200      	movs	r2, #0
 8005480:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005482:	4b16      	ldr	r3, [pc, #88]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005484:	2200      	movs	r2, #0
 8005486:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005488:	4b14      	ldr	r3, [pc, #80]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 800548a:	2200      	movs	r2, #0
 800548c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800548e:	4b13      	ldr	r3, [pc, #76]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005490:	2200      	movs	r2, #0
 8005492:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005494:	4811      	ldr	r0, [pc, #68]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 8005496:	f005 fdbd 	bl	800b014 <HAL_UART_Init>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80054a0:	f000 fae4 	bl	8005a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054a4:	2100      	movs	r1, #0
 80054a6:	480d      	ldr	r0, [pc, #52]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 80054a8:	f006 fb0c 	bl	800bac4 <HAL_UARTEx_SetTxFifoThreshold>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80054b2:	f000 fadb 	bl	8005a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80054b6:	2100      	movs	r1, #0
 80054b8:	4808      	ldr	r0, [pc, #32]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 80054ba:	f006 fb41 	bl	800bb40 <HAL_UARTEx_SetRxFifoThreshold>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80054c4:	f000 fad2 	bl	8005a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80054c8:	4804      	ldr	r0, [pc, #16]	; (80054dc <MX_LPUART1_UART_Init+0x90>)
 80054ca:	f006 fac2 	bl	800ba52 <HAL_UARTEx_DisableFifoMode>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80054d4:	f000 faca 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80054d8:	bf00      	nop
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	2000c848 	.word	0x2000c848
 80054e0:	40008000 	.word	0x40008000

080054e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80054e8:	4b22      	ldr	r3, [pc, #136]	; (8005574 <MX_USART1_UART_Init+0x90>)
 80054ea:	4a23      	ldr	r2, [pc, #140]	; (8005578 <MX_USART1_UART_Init+0x94>)
 80054ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80054ee:	4b21      	ldr	r3, [pc, #132]	; (8005574 <MX_USART1_UART_Init+0x90>)
 80054f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80054f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80054f6:	4b1f      	ldr	r3, [pc, #124]	; (8005574 <MX_USART1_UART_Init+0x90>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80054fc:	4b1d      	ldr	r3, [pc, #116]	; (8005574 <MX_USART1_UART_Init+0x90>)
 80054fe:	2200      	movs	r2, #0
 8005500:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005504:	2200      	movs	r2, #0
 8005506:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005508:	4b1a      	ldr	r3, [pc, #104]	; (8005574 <MX_USART1_UART_Init+0x90>)
 800550a:	220c      	movs	r2, #12
 800550c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800550e:	4b19      	ldr	r3, [pc, #100]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005510:	2200      	movs	r2, #0
 8005512:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005514:	4b17      	ldr	r3, [pc, #92]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005516:	2200      	movs	r2, #0
 8005518:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800551a:	4b16      	ldr	r3, [pc, #88]	; (8005574 <MX_USART1_UART_Init+0x90>)
 800551c:	2200      	movs	r2, #0
 800551e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005520:	4b14      	ldr	r3, [pc, #80]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005522:	2200      	movs	r2, #0
 8005524:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005526:	4b13      	ldr	r3, [pc, #76]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005528:	2200      	movs	r2, #0
 800552a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800552c:	4811      	ldr	r0, [pc, #68]	; (8005574 <MX_USART1_UART_Init+0x90>)
 800552e:	f005 fd71 	bl	800b014 <HAL_UART_Init>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005538:	f000 fa98 	bl	8005a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800553c:	2100      	movs	r1, #0
 800553e:	480d      	ldr	r0, [pc, #52]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005540:	f006 fac0 	bl	800bac4 <HAL_UARTEx_SetTxFifoThreshold>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d001      	beq.n	800554e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800554a:	f000 fa8f 	bl	8005a6c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800554e:	2100      	movs	r1, #0
 8005550:	4808      	ldr	r0, [pc, #32]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005552:	f006 faf5 	bl	800bb40 <HAL_UARTEx_SetRxFifoThreshold>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800555c:	f000 fa86 	bl	8005a6c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005560:	4804      	ldr	r0, [pc, #16]	; (8005574 <MX_USART1_UART_Init+0x90>)
 8005562:	f006 fa76 	bl	800ba52 <HAL_UARTEx_DisableFifoMode>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800556c:	f000 fa7e 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005570:	bf00      	nop
 8005572:	bd80      	pop	{r7, pc}
 8005574:	2000c8dc 	.word	0x2000c8dc
 8005578:	40013800 	.word	0x40013800

0800557c <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8005580:	4b06      	ldr	r3, [pc, #24]	; (800559c <MX_PKA_Init+0x20>)
 8005582:	4a07      	ldr	r2, [pc, #28]	; (80055a0 <MX_PKA_Init+0x24>)
 8005584:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8005586:	4805      	ldr	r0, [pc, #20]	; (800559c <MX_PKA_Init+0x20>)
 8005588:	f001 fec3 	bl	8007312 <HAL_PKA_Init>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 8005592:	f000 fa6b 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8005596:	bf00      	nop
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	2000c970 	.word	0x2000c970
 80055a0:	58002000 	.word	0x58002000

080055a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
  RTC_TimeTypeDef sTime = {0};
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80055b8:	2300      	movs	r3, #0
 80055ba:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80055bc:	4b26      	ldr	r3, [pc, #152]	; (8005658 <MX_RTC_Init+0xb4>)
 80055be:	4a27      	ldr	r2, [pc, #156]	; (800565c <MX_RTC_Init+0xb8>)
 80055c0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80055c2:	4b25      	ldr	r3, [pc, #148]	; (8005658 <MX_RTC_Init+0xb4>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80055c8:	4b23      	ldr	r3, [pc, #140]	; (8005658 <MX_RTC_Init+0xb4>)
 80055ca:	227f      	movs	r2, #127	; 0x7f
 80055cc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80055ce:	4b22      	ldr	r3, [pc, #136]	; (8005658 <MX_RTC_Init+0xb4>)
 80055d0:	22ff      	movs	r2, #255	; 0xff
 80055d2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80055d4:	4b20      	ldr	r3, [pc, #128]	; (8005658 <MX_RTC_Init+0xb4>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80055da:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <MX_RTC_Init+0xb4>)
 80055dc:	2200      	movs	r2, #0
 80055de:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80055e0:	4b1d      	ldr	r3, [pc, #116]	; (8005658 <MX_RTC_Init+0xb4>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <MX_RTC_Init+0xb4>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80055ec:	481a      	ldr	r0, [pc, #104]	; (8005658 <MX_RTC_Init+0xb4>)
 80055ee:	f003 fc8b 	bl	8008f08 <HAL_RTC_Init>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80055f8:	f000 fa38 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80055fc:	2300      	movs	r3, #0
 80055fe:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8005600:	2300      	movs	r3, #0
 8005602:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8005604:	2300      	movs	r3, #0
 8005606:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8005608:	2300      	movs	r3, #0
 800560a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800560c:	2300      	movs	r3, #0
 800560e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8005610:	2300      	movs	r3, #0
 8005612:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8005614:	1d3b      	adds	r3, r7, #4
 8005616:	2201      	movs	r2, #1
 8005618:	4619      	mov	r1, r3
 800561a:	480f      	ldr	r0, [pc, #60]	; (8005658 <MX_RTC_Init+0xb4>)
 800561c:	f003 fd24 	bl	8009068 <HAL_RTC_SetTime>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8005626:	f000 fa21 	bl	8005a6c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800562a:	2301      	movs	r3, #1
 800562c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800562e:	2301      	movs	r3, #1
 8005630:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8005632:	2301      	movs	r3, #1
 8005634:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8005636:	2300      	movs	r3, #0
 8005638:	70fb      	strb	r3, [r7, #3]


  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800563a:	463b      	mov	r3, r7
 800563c:	2201      	movs	r2, #1
 800563e:	4619      	mov	r1, r3
 8005640:	4805      	ldr	r0, [pc, #20]	; (8005658 <MX_RTC_Init+0xb4>)
 8005642:	f003 fe31 	bl	80092a8 <HAL_RTC_SetDate>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 800564c:	f000 fa0e 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE END RTC_Init 2 */

}
 8005650:	bf00      	nop
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	2000c97c 	.word	0x2000c97c
 800565c:	40002800 	.word	0x40002800

08005660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005664:	4b1b      	ldr	r3, [pc, #108]	; (80056d4 <MX_SPI1_Init+0x74>)
 8005666:	4a1c      	ldr	r2, [pc, #112]	; (80056d8 <MX_SPI1_Init+0x78>)
 8005668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800566a:	4b1a      	ldr	r3, [pc, #104]	; (80056d4 <MX_SPI1_Init+0x74>)
 800566c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005672:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <MX_SPI1_Init+0x74>)
 8005674:	2200      	movs	r2, #0
 8005676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005678:	4b16      	ldr	r3, [pc, #88]	; (80056d4 <MX_SPI1_Init+0x74>)
 800567a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800567e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005680:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <MX_SPI1_Init+0x74>)
 8005682:	2200      	movs	r2, #0
 8005684:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005686:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <MX_SPI1_Init+0x74>)
 8005688:	2200      	movs	r2, #0
 800568a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <MX_SPI1_Init+0x74>)
 800568e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005692:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005694:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <MX_SPI1_Init+0x74>)
 8005696:	2208      	movs	r2, #8
 8005698:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800569a:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <MX_SPI1_Init+0x74>)
 800569c:	2200      	movs	r2, #0
 800569e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <MX_SPI1_Init+0x74>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <MX_SPI1_Init+0x74>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <MX_SPI1_Init+0x74>)
 80056ae:	2207      	movs	r2, #7
 80056b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <MX_SPI1_Init+0x74>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <MX_SPI1_Init+0x74>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056be:	4805      	ldr	r0, [pc, #20]	; (80056d4 <MX_SPI1_Init+0x74>)
 80056c0:	f003 ff79 	bl	80095b6 <HAL_SPI_Init>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d001      	beq.n	80056ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80056ca:	f000 f9cf 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	2000c9a0 	.word	0x2000c9a0
 80056d8:	40013000 	.word	0x40013000

080056dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80056e0:	4b1b      	ldr	r3, [pc, #108]	; (8005750 <MX_SPI2_Init+0x74>)
 80056e2:	4a1c      	ldr	r2, [pc, #112]	; (8005754 <MX_SPI2_Init+0x78>)
 80056e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <MX_SPI2_Init+0x74>)
 80056e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80056ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80056ee:	4b18      	ldr	r3, [pc, #96]	; (8005750 <MX_SPI2_Init+0x74>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80056f4:	4b16      	ldr	r3, [pc, #88]	; (8005750 <MX_SPI2_Init+0x74>)
 80056f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80056fa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80056fc:	4b14      	ldr	r3, [pc, #80]	; (8005750 <MX_SPI2_Init+0x74>)
 80056fe:	2200      	movs	r2, #0
 8005700:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005702:	4b13      	ldr	r3, [pc, #76]	; (8005750 <MX_SPI2_Init+0x74>)
 8005704:	2200      	movs	r2, #0
 8005706:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <MX_SPI2_Init+0x74>)
 800570a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005710:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <MX_SPI2_Init+0x74>)
 8005712:	2200      	movs	r2, #0
 8005714:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005716:	4b0e      	ldr	r3, [pc, #56]	; (8005750 <MX_SPI2_Init+0x74>)
 8005718:	2200      	movs	r2, #0
 800571a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800571c:	4b0c      	ldr	r3, [pc, #48]	; (8005750 <MX_SPI2_Init+0x74>)
 800571e:	2200      	movs	r2, #0
 8005720:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <MX_SPI2_Init+0x74>)
 8005724:	2200      	movs	r2, #0
 8005726:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8005728:	4b09      	ldr	r3, [pc, #36]	; (8005750 <MX_SPI2_Init+0x74>)
 800572a:	2207      	movs	r2, #7
 800572c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800572e:	4b08      	ldr	r3, [pc, #32]	; (8005750 <MX_SPI2_Init+0x74>)
 8005730:	2200      	movs	r2, #0
 8005732:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <MX_SPI2_Init+0x74>)
 8005736:	2208      	movs	r2, #8
 8005738:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800573a:	4805      	ldr	r0, [pc, #20]	; (8005750 <MX_SPI2_Init+0x74>)
 800573c:	f003 ff3b 	bl	80095b6 <HAL_SPI_Init>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8005746:	f000 f991 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800574a:	bf00      	nop
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	2000ca04 	.word	0x2000ca04
 8005754:	40003800 	.word	0x40003800

08005758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b09c      	sub	sp, #112	; 0x70
 800575c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800575e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	605a      	str	r2, [r3, #4]
 8005768:	609a      	str	r2, [r3, #8]
 800576a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800576c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005770:	2200      	movs	r2, #0
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	605a      	str	r2, [r3, #4]
 8005776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005778:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800577c:	2200      	movs	r2, #0
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	60da      	str	r2, [r3, #12]
 8005786:	611a      	str	r2, [r3, #16]
 8005788:	615a      	str	r2, [r3, #20]
 800578a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800578c:	1d3b      	adds	r3, r7, #4
 800578e:	2234      	movs	r2, #52	; 0x34
 8005790:	2100      	movs	r1, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f006 fad4 	bl	800bd40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005798:	4b44      	ldr	r3, [pc, #272]	; (80058ac <MX_TIM1_Init+0x154>)
 800579a:	4a45      	ldr	r2, [pc, #276]	; (80058b0 <MX_TIM1_Init+0x158>)
 800579c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 800579e:	4b43      	ldr	r3, [pc, #268]	; (80058ac <MX_TIM1_Init+0x154>)
 80057a0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80057a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a6:	4b41      	ldr	r3, [pc, #260]	; (80058ac <MX_TIM1_Init+0x154>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80057ac:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <MX_TIM1_Init+0x154>)
 80057ae:	2263      	movs	r2, #99	; 0x63
 80057b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057b2:	4b3e      	ldr	r3, [pc, #248]	; (80058ac <MX_TIM1_Init+0x154>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80057b8:	4b3c      	ldr	r3, [pc, #240]	; (80058ac <MX_TIM1_Init+0x154>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057be:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <MX_TIM1_Init+0x154>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80057c4:	4839      	ldr	r0, [pc, #228]	; (80058ac <MX_TIM1_Init+0x154>)
 80057c6:	f004 fb11 	bl	8009dec <HAL_TIM_Base_Init>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80057d0:	f000 f94c 	bl	8005a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80057da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80057de:	4619      	mov	r1, r3
 80057e0:	4832      	ldr	r0, [pc, #200]	; (80058ac <MX_TIM1_Init+0x154>)
 80057e2:	f004 fddf 	bl	800a3a4 <HAL_TIM_ConfigClockSource>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d001      	beq.n	80057f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80057ec:	f000 f93e 	bl	8005a6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80057f0:	482e      	ldr	r0, [pc, #184]	; (80058ac <MX_TIM1_Init+0x154>)
 80057f2:	f004 fbad 	bl	8009f50 <HAL_TIM_OC_Init>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80057fc:	f000 f936 	bl	8005a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005800:	2300      	movs	r3, #0
 8005802:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005804:	2300      	movs	r3, #0
 8005806:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005808:	2300      	movs	r3, #0
 800580a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800580c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005810:	4619      	mov	r1, r3
 8005812:	4826      	ldr	r0, [pc, #152]	; (80058ac <MX_TIM1_Init+0x154>)
 8005814:	f005 fac6 	bl	800ada4 <HAL_TIMEx_MasterConfigSynchronization>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800581e:	f000 f925 	bl	8005a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8005822:	2300      	movs	r3, #0
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800582a:	2300      	movs	r3, #0
 800582c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800582e:	2300      	movs	r3, #0
 8005830:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005832:	2300      	movs	r3, #0
 8005834:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005836:	2300      	movs	r3, #0
 8005838:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800583a:	2300      	movs	r3, #0
 800583c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800583e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005842:	2200      	movs	r2, #0
 8005844:	4619      	mov	r1, r3
 8005846:	4819      	ldr	r0, [pc, #100]	; (80058ac <MX_TIM1_Init+0x154>)
 8005848:	f004 fd32 	bl	800a2b0 <HAL_TIM_OC_ConfigChannel>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8005852:	f000 f90b 	bl	8005a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005856:	2300      	movs	r3, #0
 8005858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800585a:	2300      	movs	r3, #0
 800585c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800585e:	2300      	movs	r3, #0
 8005860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005862:	2300      	movs	r3, #0
 8005864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005866:	2300      	movs	r3, #0
 8005868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800586a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800586e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005870:	2300      	movs	r3, #0
 8005872:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005874:	2300      	movs	r3, #0
 8005876:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800587c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005886:	2300      	movs	r3, #0
 8005888:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800588a:	2300      	movs	r3, #0
 800588c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800588e:	1d3b      	adds	r3, r7, #4
 8005890:	4619      	mov	r1, r3
 8005892:	4806      	ldr	r0, [pc, #24]	; (80058ac <MX_TIM1_Init+0x154>)
 8005894:	f005 fae6 	bl	800ae64 <HAL_TIMEx_ConfigBreakDeadTime>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d001      	beq.n	80058a2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 800589e:	f000 f8e5 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80058a2:	bf00      	nop
 80058a4:	3770      	adds	r7, #112	; 0x70
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	2000ca68 	.word	0x2000ca68
 80058b0:	40012c00 	.word	0x40012c00

080058b4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80058b8:	4b10      	ldr	r3, [pc, #64]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058ba:	4a11      	ldr	r2, [pc, #68]	; (8005900 <MX_USB_PCD_Init+0x4c>)
 80058bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80058be:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058c0:	2208      	movs	r2, #8
 80058c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058c6:	2202      	movs	r2, #2
 80058c8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80058ca:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058cc:	2202      	movs	r2, #2
 80058ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80058d6:	4b09      	ldr	r3, [pc, #36]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058d8:	2200      	movs	r2, #0
 80058da:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80058dc:	4b07      	ldr	r3, [pc, #28]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058de:	2200      	movs	r2, #0
 80058e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80058e2:	4b06      	ldr	r3, [pc, #24]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80058e8:	4804      	ldr	r0, [pc, #16]	; (80058fc <MX_USB_PCD_Init+0x48>)
 80058ea:	f001 fc0f 	bl	800710c <HAL_PCD_Init>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80058f4:	f000 f8ba 	bl	8005a6c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80058f8:	bf00      	nop
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	2000cb24 	.word	0x2000cb24
 8005900:	40006800 	.word	0x40006800

08005904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b086      	sub	sp, #24
 8005908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	609a      	str	r2, [r3, #8]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005918:	2004      	movs	r0, #4
 800591a:	f7ff fb7f 	bl	800501c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800591e:	2002      	movs	r0, #2
 8005920:	f7ff fb7c 	bl	800501c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005924:	2001      	movs	r0, #1
 8005926:	f7ff fb79 	bl	800501c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800592a:	2008      	movs	r0, #8
 800592c:	f7ff fb76 	bl	800501c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 8005930:	2200      	movs	r2, #0
 8005932:	2129      	movs	r1, #41	; 0x29
 8005934:	484a      	ldr	r0, [pc, #296]	; (8005a60 <MX_GPIO_Init+0x15c>)
 8005936:	f001 fb7b 	bl	8007030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 800593a:	2200      	movs	r2, #0
 800593c:	2120      	movs	r1, #32
 800593e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005942:	f001 fb75 	bl	8007030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8005946:	2200      	movs	r2, #0
 8005948:	2123      	movs	r1, #35	; 0x23
 800594a:	4846      	ldr	r0, [pc, #280]	; (8005a64 <MX_GPIO_Init+0x160>)
 800594c:	f001 fb70 	bl	8007030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin
                           CAN2_INT1_Pin */
  GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 8005950:	f44f 43e6 	mov.w	r3, #29440	; 0x7300
 8005954:	607b      	str	r3, [r7, #4]
                          |CAN2_INT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005956:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800595a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800595c:	2300      	movs	r3, #0
 800595e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005960:	1d3b      	adds	r3, r7, #4
 8005962:	4619      	mov	r1, r3
 8005964:	483f      	ldr	r0, [pc, #252]	; (8005a64 <MX_GPIO_Init+0x160>)
 8005966:	f001 f9db 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 800596a:	2329      	movs	r3, #41	; 0x29
 800596c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800596e:	2301      	movs	r3, #1
 8005970:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005976:	2300      	movs	r3, #0
 8005978:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800597a:	1d3b      	adds	r3, r7, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4838      	ldr	r0, [pc, #224]	; (8005a60 <MX_GPIO_Init+0x15c>)
 8005980:	f001 f9ce 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_CS_Pin */
  GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8005984:	2320      	movs	r3, #32
 8005986:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005988:	2301      	movs	r3, #1
 800598a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8005994:	1d3b      	adds	r3, r7, #4
 8005996:	4619      	mov	r1, r3
 8005998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800599c:	f001 f9c0 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 80059a0:	2310      	movs	r3, #16
 80059a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80059a4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80059a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059aa:	2301      	movs	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 80059ae:	1d3b      	adds	r3, r7, #4
 80059b0:	4619      	mov	r1, r3
 80059b2:	482b      	ldr	r0, [pc, #172]	; (8005a60 <MX_GPIO_Init+0x15c>)
 80059b4:	f001 f9b4 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 80059b8:	2323      	movs	r3, #35	; 0x23
 80059ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80059bc:	2301      	movs	r3, #1
 80059be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c0:	2300      	movs	r3, #0
 80059c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059c8:	1d3b      	adds	r3, r7, #4
 80059ca:	4619      	mov	r1, r3
 80059cc:	4825      	ldr	r0, [pc, #148]	; (8005a64 <MX_GPIO_Init+0x160>)
 80059ce:	f001 f9a7 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN1_INT_Pin */
  GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80059d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80059d8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80059dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 80059e2:	1d3b      	adds	r3, r7, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80059ea:	f001 f999 	bl	8006d20 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80059ee:	2303      	movs	r3, #3
 80059f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80059f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80059f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80059f8:	2301      	movs	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80059fc:	1d3b      	adds	r3, r7, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4819      	ldr	r0, [pc, #100]	; (8005a68 <MX_GPIO_Init+0x164>)
 8005a02:	f001 f98d 	bl	8006d20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005a06:	2200      	movs	r2, #0
 8005a08:	2100      	movs	r1, #0
 8005a0a:	2006      	movs	r0, #6
 8005a0c:	f001 f953 	bl	8006cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005a10:	2006      	movs	r0, #6
 8005a12:	f001 f96a 	bl	8006cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005a16:	2200      	movs	r2, #0
 8005a18:	2100      	movs	r1, #0
 8005a1a:	2007      	movs	r0, #7
 8005a1c:	f001 f94b 	bl	8006cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005a20:	2007      	movs	r0, #7
 8005a22:	f001 f962 	bl	8006cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8005a26:	2200      	movs	r2, #0
 8005a28:	2100      	movs	r1, #0
 8005a2a:	200a      	movs	r0, #10
 8005a2c:	f001 f943 	bl	8006cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005a30:	200a      	movs	r0, #10
 8005a32:	f001 f95a 	bl	8006cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8005a36:	2200      	movs	r2, #0
 8005a38:	2100      	movs	r1, #0
 8005a3a:	2017      	movs	r0, #23
 8005a3c:	f001 f93b 	bl	8006cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005a40:	2017      	movs	r0, #23
 8005a42:	f001 f952 	bl	8006cea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005a46:	2200      	movs	r2, #0
 8005a48:	2100      	movs	r1, #0
 8005a4a:	2028      	movs	r0, #40	; 0x28
 8005a4c:	f001 f933 	bl	8006cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005a50:	2028      	movs	r0, #40	; 0x28
 8005a52:	f001 f94a 	bl	8006cea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005a56:	bf00      	nop
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	48000800 	.word	0x48000800
 8005a64:	48000400 	.word	0x48000400
 8005a68:	48000c00 	.word	0x48000c00

08005a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8005a70:	4904      	ldr	r1, [pc, #16]	; (8005a84 <Error_Handler+0x18>)
 8005a72:	4805      	ldr	r0, [pc, #20]	; (8005a88 <Error_Handler+0x1c>)
 8005a74:	f006 f9aa 	bl	800bdcc <siprintf>
 8005a78:	4803      	ldr	r0, [pc, #12]	; (8005a88 <Error_Handler+0x1c>)
 8005a7a:	f7ff fae9 	bl	8005050 <serialOut>
  return;
 8005a7e:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	0800d864 	.word	0x0800d864
 8005a88:	2000ce88 	.word	0x2000ce88

08005a8c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8005a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_AHB2_GRP1_EnableClock>:
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8005ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4013      	ands	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
}
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8005ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8005af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4013      	ands	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b04:	68fb      	ldr	r3, [r7, #12]
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b085      	sub	sp, #20
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8005b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4013      	ands	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b36:	68fb      	ldr	r3, [r7, #12]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4013      	ands	r3, r2
 8005b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b68:	68fb      	ldr	r3, [r7, #12]
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr

08005b76 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8005b76:	b480      	push	{r7}
 8005b78:	b085      	sub	sp, #20
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4013      	ands	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
}
 8005b9c:	bf00      	nop
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8005bac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005bb0:	f7ff ff96 	bl	8005ae0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	202e      	movs	r0, #46	; 0x2e
 8005bba:	f001 f87c 	bl	8006cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8005bbe:	202e      	movs	r0, #46	; 0x2e
 8005bc0:	f001 f893 	bl	8006cea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005bc4:	bf00      	nop
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b09c      	sub	sp, #112	; 0x70
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bd0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]
 8005bd8:	605a      	str	r2, [r3, #4]
 8005bda:	609a      	str	r2, [r3, #8]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005be0:	f107 030c 	add.w	r3, r7, #12
 8005be4:	2250      	movs	r2, #80	; 0x50
 8005be6:	2100      	movs	r1, #0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f006 f8a9 	bl	800bd40 <memset>
  if(huart->Instance==LPUART1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <HAL_UART_MspInit+0xd8>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d125      	bne.n	8005c44 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	4618      	mov	r0, r3
 8005c06:	f002 fef8 	bl	80089fa <HAL_RCCEx_PeriphCLKConfig>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d001      	beq.n	8005c14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005c10:	f7ff ff2c 	bl	8005a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8005c14:	2001      	movs	r0, #1
 8005c16:	f7ff ff95 	bl	8005b44 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c1a:	2001      	movs	r0, #1
 8005c1c:	f7ff ff47 	bl	8005aae <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005c20:	230c      	movs	r3, #12
 8005c22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c24:	2302      	movs	r3, #2
 8005c26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8005c30:	2308      	movs	r3, #8
 8005c32:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c38:	4619      	mov	r1, r3
 8005c3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005c3e:	f001 f86f 	bl	8006d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005c42:	e029      	b.n	8005c98 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a16      	ldr	r2, [pc, #88]	; (8005ca4 <HAL_UART_MspInit+0xdc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d124      	bne.n	8005c98 <HAL_UART_MspInit+0xd0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8005c52:	2302      	movs	r3, #2
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c56:	f107 030c 	add.w	r3, r7, #12
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f002 fecd 	bl	80089fa <HAL_RCCEx_PeriphCLKConfig>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8005c66:	f7ff ff01 	bl	8005a6c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005c6a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005c6e:	f7ff ff82 	bl	8005b76 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c72:	2002      	movs	r0, #2
 8005c74:	f7ff ff1b 	bl	8005aae <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005c78:	23c0      	movs	r3, #192	; 0xc0
 8005c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c80:	2300      	movs	r3, #0
 8005c82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c84:	2300      	movs	r3, #0
 8005c86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005c88:	2307      	movs	r3, #7
 8005c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c8c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c90:	4619      	mov	r1, r3
 8005c92:	4805      	ldr	r0, [pc, #20]	; (8005ca8 <HAL_UART_MspInit+0xe0>)
 8005c94:	f001 f844 	bl	8006d20 <HAL_GPIO_Init>
}
 8005c98:	bf00      	nop
 8005c9a:	3770      	adds	r7, #112	; 0x70
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40008000 	.word	0x40008000
 8005ca4:	40013800 	.word	0x40013800
 8005ca8:	48000400 	.word	0x48000400

08005cac <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a05      	ldr	r2, [pc, #20]	; (8005cd0 <HAL_PKA_MspInit+0x24>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d103      	bne.n	8005cc6 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 8005cbe:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005cc2:	f7ff ff0d 	bl	8005ae0 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 8005cc6:	bf00      	nop
 8005cc8:	3708      	adds	r7, #8
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	58002000 	.word	0x58002000

08005cd4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b096      	sub	sp, #88	; 0x58
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005cdc:	f107 0308 	add.w	r3, r7, #8
 8005ce0:	2250      	movs	r2, #80	; 0x50
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f006 f82b 	bl	800bd40 <memset>
  if(hrtc->Instance==RTC)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a0e      	ldr	r2, [pc, #56]	; (8005d28 <HAL_RTC_MspInit+0x54>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d115      	bne.n	8005d20 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005cf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005cf8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005cfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005cfe:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d00:	f107 0308 	add.w	r3, r7, #8
 8005d04:	4618      	mov	r0, r3
 8005d06:	f002 fe78 	bl	80089fa <HAL_RCCEx_PeriphCLKConfig>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8005d10:	f7ff feac 	bl	8005a6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005d14:	f7ff feba 	bl	8005a8c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8005d18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005d1c:	f7ff fef9 	bl	8005b12 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005d20:	bf00      	nop
 8005d22:	3758      	adds	r7, #88	; 0x58
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40002800 	.word	0x40002800

08005d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d34:	f107 030c 	add.w	r3, r7, #12
 8005d38:	2200      	movs	r2, #0
 8005d3a:	601a      	str	r2, [r3, #0]
 8005d3c:	605a      	str	r2, [r3, #4]
 8005d3e:	609a      	str	r2, [r3, #8]
 8005d40:	60da      	str	r2, [r3, #12]
 8005d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a30      	ldr	r2, [pc, #192]	; (8005e0c <HAL_SPI_MspInit+0xe0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d118      	bne.n	8005d80 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005d4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005d52:	f7ff ff10 	bl	8005b76 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d56:	2001      	movs	r0, #1
 8005d58:	f7ff fea9 	bl	8005aae <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8005d5c:	23c2      	movs	r3, #194	; 0xc2
 8005d5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d60:	2302      	movs	r3, #2
 8005d62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d6c:	2305      	movs	r3, #5
 8005d6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	4619      	mov	r1, r3
 8005d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005d7a:	f000 ffd1 	bl	8006d20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005d7e:	e040      	b.n	8005e02 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a22      	ldr	r2, [pc, #136]	; (8005e10 <HAL_SPI_MspInit+0xe4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d13b      	bne.n	8005e02 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005d8a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005d8e:	f7ff fec0 	bl	8005b12 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d92:	2004      	movs	r0, #4
 8005d94:	f7ff fe8b 	bl	8005aae <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d98:	2001      	movs	r0, #1
 8005d9a:	f7ff fe88 	bl	8005aae <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005d9e:	2302      	movs	r3, #2
 8005da0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005da2:	2302      	movs	r3, #2
 8005da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005daa:	2300      	movs	r3, #0
 8005dac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8005dae:	2303      	movs	r3, #3
 8005db0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005db2:	f107 030c 	add.w	r3, r7, #12
 8005db6:	4619      	mov	r1, r3
 8005db8:	4816      	ldr	r0, [pc, #88]	; (8005e14 <HAL_SPI_MspInit+0xe8>)
 8005dba:	f000 ffb1 	bl	8006d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005dce:	2305      	movs	r3, #5
 8005dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005dd2:	f107 030c 	add.w	r3, r7, #12
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	480e      	ldr	r0, [pc, #56]	; (8005e14 <HAL_SPI_MspInit+0xe8>)
 8005dda:	f000 ffa1 	bl	8006d20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005de2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de4:	2302      	movs	r3, #2
 8005de6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005df0:	2305      	movs	r3, #5
 8005df2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df4:	f107 030c 	add.w	r3, r7, #12
 8005df8:	4619      	mov	r1, r3
 8005dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005dfe:	f000 ff8f 	bl	8006d20 <HAL_GPIO_Init>
}
 8005e02:	bf00      	nop
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40013000 	.word	0x40013000
 8005e10:	40003800 	.word	0x40003800
 8005e14:	48000800 	.word	0x48000800

08005e18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a09      	ldr	r2, [pc, #36]	; (8005e4c <HAL_TIM_Base_MspInit+0x34>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10b      	bne.n	8005e42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005e2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005e2e:	f7ff fea2 	bl	8005b76 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005e32:	2200      	movs	r2, #0
 8005e34:	2100      	movs	r1, #0
 8005e36:	2019      	movs	r0, #25
 8005e38:	f000 ff3d 	bl	8006cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005e3c:	2019      	movs	r0, #25
 8005e3e:	f000 ff54 	bl	8006cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	40012c00 	.word	0x40012c00

08005e50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b09c      	sub	sp, #112	; 0x70
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e68:	f107 030c 	add.w	r3, r7, #12
 8005e6c:	2250      	movs	r2, #80	; 0x50
 8005e6e:	2100      	movs	r1, #0
 8005e70:	4618      	mov	r0, r3
 8005e72:	f005 ff65 	bl	800bd40 <memset>
  if(hpcd->Instance==USB)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a1f      	ldr	r2, [pc, #124]	; (8005ef8 <HAL_PCD_MspInit+0xa8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d136      	bne.n	8005eee <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8005e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e84:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8005e86:	2306      	movs	r3, #6
 8005e88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8005e8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e8e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8005e90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e94:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8005e96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005e9a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8005e9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ea0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8005ea2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005ea6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ea8:	f107 030c 	add.w	r3, r7, #12
 8005eac:	4618      	mov	r0, r3
 8005eae:	f002 fda4 	bl	80089fa <HAL_RCCEx_PeriphCLKConfig>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8005eb8:	f7ff fdd8 	bl	8005a6c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	f7ff fdf6 	bl	8005aae <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005ec2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec8:	2302      	movs	r3, #2
 8005eca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8005ed4:	230a      	movs	r3, #10
 8005ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005edc:	4619      	mov	r1, r3
 8005ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ee2:	f000 ff1d 	bl	8006d20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005ee6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005eea:	f7ff fe12 	bl	8005b12 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8005eee:	bf00      	nop
 8005ef0:	3770      	adds	r7, #112	; 0x70
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40006800 	.word	0x40006800

08005efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005f00:	e7fe      	b.n	8005f00 <NMI_Handler+0x4>

08005f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f02:	b480      	push	{r7}
 8005f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f06:	e7fe      	b.n	8005f06 <HardFault_Handler+0x4>

08005f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f0c:	e7fe      	b.n	8005f0c <MemManage_Handler+0x4>

08005f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f0e:	b480      	push	{r7}
 8005f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f12:	e7fe      	b.n	8005f12 <BusFault_Handler+0x4>

08005f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f14:	b480      	push	{r7}
 8005f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f18:	e7fe      	b.n	8005f18 <UsageFault_Handler+0x4>

08005f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f1e:	bf00      	nop
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f2c:	bf00      	nop
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr

08005f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f36:	b480      	push	{r7}
 8005f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f3a:	bf00      	nop
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f48:	f000 fdae 	bl	8006aa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f4c:	bf00      	nop
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 8005f54:	2001      	movs	r0, #1
 8005f56:	f001 f89d 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005f5a:	bf00      	nop
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 8005f62:	2002      	movs	r0, #2
 8005f64:	f001 f896 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8005f68:	bf00      	nop
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 8005f70:	2010      	movs	r0, #16
 8005f72:	f001 f88f 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005f76:	bf00      	nop
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 8005f7e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005f82:	f001 f887 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 8005f86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005f8a:	f001 f883 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005f8e:	bf00      	nop
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005f98:	4802      	ldr	r0, [pc, #8]	; (8005fa4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005f9a:	f004 f847 	bl	800a02c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005f9e:	bf00      	nop
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	2000ca68 	.word	0x2000ca68

08005fa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 8005fac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005fb0:	f001 f870 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 8005fb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005fb8:	f001 f86c 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 8005fbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005fc0:	f001 f868 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 8005fc4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005fc8:	f001 f864 	bl	8007094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005fcc:	bf00      	nop
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8005fd4:	f001 f876 	bl	80070c4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8005fd8:	bf00      	nop
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
  return 1;
 8005fe0:	2301      	movs	r3, #1
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <_kill>:

int _kill(int pid, int sig)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005ff6:	f005 fe6b 	bl	800bcd0 <__errno>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2216      	movs	r2, #22
 8005ffe:	601a      	str	r2, [r3, #0]
  return -1;
 8006000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <_exit>:

void _exit (int status)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006014:	f04f 31ff 	mov.w	r1, #4294967295
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff ffe7 	bl	8005fec <_kill>
  while (1) {}    /* Make sure we hang here */
 800601e:	e7fe      	b.n	800601e <_exit+0x12>

08006020 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800602c:	2300      	movs	r3, #0
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e00a      	b.n	8006048 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006032:	f3af 8000 	nop.w
 8006036:	4601      	mov	r1, r0
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	60ba      	str	r2, [r7, #8]
 800603e:	b2ca      	uxtb	r2, r1
 8006040:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	3301      	adds	r3, #1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	dbf0      	blt.n	8006032 <_read+0x12>
  }

  return len;
 8006050:	687b      	ldr	r3, [r7, #4]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800605a:	b580      	push	{r7, lr}
 800605c:	b086      	sub	sp, #24
 800605e:	af00      	add	r7, sp, #0
 8006060:	60f8      	str	r0, [r7, #12]
 8006062:	60b9      	str	r1, [r7, #8]
 8006064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e009      	b.n	8006080 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	60ba      	str	r2, [r7, #8]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	3301      	adds	r3, #1
 800607e:	617b      	str	r3, [r7, #20]
 8006080:	697a      	ldr	r2, [r7, #20]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	dbf1      	blt.n	800606c <_write+0x12>
  }
  return len;
 8006088:	687b      	ldr	r3, [r7, #4]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3718      	adds	r7, #24
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <_close>:

int _close(int file)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800609a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800609e:	4618      	mov	r0, r3
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80060ba:	605a      	str	r2, [r3, #4]
  return 0;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <_isatty>:

int _isatty(int file)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80060d2:	2301      	movs	r3, #1
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b086      	sub	sp, #24
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006104:	4a14      	ldr	r2, [pc, #80]	; (8006158 <_sbrk+0x5c>)
 8006106:	4b15      	ldr	r3, [pc, #84]	; (800615c <_sbrk+0x60>)
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006110:	4b13      	ldr	r3, [pc, #76]	; (8006160 <_sbrk+0x64>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d102      	bne.n	800611e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006118:	4b11      	ldr	r3, [pc, #68]	; (8006160 <_sbrk+0x64>)
 800611a:	4a12      	ldr	r2, [pc, #72]	; (8006164 <_sbrk+0x68>)
 800611c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800611e:	4b10      	ldr	r3, [pc, #64]	; (8006160 <_sbrk+0x64>)
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	693a      	ldr	r2, [r7, #16]
 8006128:	429a      	cmp	r2, r3
 800612a:	d207      	bcs.n	800613c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800612c:	f005 fdd0 	bl	800bcd0 <__errno>
 8006130:	4603      	mov	r3, r0
 8006132:	220c      	movs	r2, #12
 8006134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
 800613a:	e009      	b.n	8006150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800613c:	4b08      	ldr	r3, [pc, #32]	; (8006160 <_sbrk+0x64>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006142:	4b07      	ldr	r3, [pc, #28]	; (8006160 <_sbrk+0x64>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4413      	add	r3, r2
 800614a:	4a05      	ldr	r2, [pc, #20]	; (8006160 <_sbrk+0x64>)
 800614c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800614e:	68fb      	ldr	r3, [r7, #12]
}
 8006150:	4618      	mov	r0, r3
 8006152:	3718      	adds	r7, #24
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20030000 	.word	0x20030000
 800615c:	00000400 	.word	0x00000400
 8006160:	2000cef8 	.word	0x2000cef8
 8006164:	2000cfb8 	.word	0x2000cfb8

08006168 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800616c:	4b24      	ldr	r3, [pc, #144]	; (8006200 <SystemInit+0x98>)
 800616e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006172:	4a23      	ldr	r2, [pc, #140]	; (8006200 <SystemInit+0x98>)
 8006174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800617c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006186:	f043 0301 	orr.w	r3, r3, #1
 800618a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800618c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006190:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8006194:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8006196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061a0:	4b18      	ldr	r3, [pc, #96]	; (8006204 <SystemInit+0x9c>)
 80061a2:	4013      	ands	r3, r2
 80061a4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80061a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061b2:	f023 0305 	bic.w	r3, r3, #5
 80061b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80061ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061c6:	f023 0301 	bic.w	r3, r3, #1
 80061ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80061ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d2:	4a0d      	ldr	r2, [pc, #52]	; (8006208 <SystemInit+0xa0>)
 80061d4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80061d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061da:	4a0b      	ldr	r2, [pc, #44]	; (8006208 <SystemInit+0xa0>)
 80061dc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80061ec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80061ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f2:	2200      	movs	r2, #0
 80061f4:	619a      	str	r2, [r3, #24]
}
 80061f6:	bf00      	nop
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr
 8006200:	e000ed00 	.word	0xe000ed00
 8006204:	faf6fefb 	.word	0xfaf6fefb
 8006208:	22041000 	.word	0x22041000

0800620c <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M o d u l e M e s s a g e s                            P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800620c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800620e:	b08b      	sub	sp, #44	; 0x2c
 8006210:	af08      	add	r7, sp, #32
    // Check if FIFO is not empty
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 8006212:	4a4d      	ldr	r2, [pc, #308]	; (8006348 <VCU_ReceiveMessages+0x13c>)
 8006214:	2101      	movs	r1, #1
 8006216:	2000      	movs	r0, #0
 8006218:	f7fd fe16 	bl	8003e48 <DRV_CANFDSPI_ReceiveChannelEventGet>

    while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800621c:	e088      	b.n	8006330 <VCU_ReceiveMessages+0x124>

      // Get message
      DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4b4a      	ldr	r3, [pc, #296]	; (800634c <VCU_ReceiveMessages+0x140>)
 8006224:	4a4a      	ldr	r2, [pc, #296]	; (8006350 <VCU_ReceiveMessages+0x144>)
 8006226:	2101      	movs	r1, #1
 8006228:	2000      	movs	r0, #0
 800622a:	f7fd fc71 	bl	8003b10 <DRV_CANFDSPI_ReceiveMessageGet>

      if(debugLevel & (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800622e:	4b49      	ldr	r3, [pc, #292]	; (8006354 <VCU_ReceiveMessages+0x148>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f003 030c 	and.w	r3, r3, #12
 8006236:	2b00      	cmp	r3, #0
 8006238:	d02c      	beq.n	8006294 <VCU_ReceiveMessages+0x88>
 800623a:	4b45      	ldr	r3, [pc, #276]	; (8006350 <VCU_ReceiveMessages+0x144>)
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006242:	b29b      	uxth	r3, r3
 8006244:	469c      	mov	ip, r3
 8006246:	4b41      	ldr	r3, [pc, #260]	; (800634c <VCU_ReceiveMessages+0x140>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	469e      	mov	lr, r3
 800624c:	4b3f      	ldr	r3, [pc, #252]	; (800634c <VCU_ReceiveMessages+0x140>)
 800624e:	785b      	ldrb	r3, [r3, #1]
 8006250:	461a      	mov	r2, r3
 8006252:	4b3e      	ldr	r3, [pc, #248]	; (800634c <VCU_ReceiveMessages+0x140>)
 8006254:	789b      	ldrb	r3, [r3, #2]
 8006256:	4619      	mov	r1, r3
 8006258:	4b3c      	ldr	r3, [pc, #240]	; (800634c <VCU_ReceiveMessages+0x140>)
 800625a:	78db      	ldrb	r3, [r3, #3]
 800625c:	4618      	mov	r0, r3
 800625e:	4b3b      	ldr	r3, [pc, #236]	; (800634c <VCU_ReceiveMessages+0x140>)
 8006260:	791b      	ldrb	r3, [r3, #4]
 8006262:	461c      	mov	r4, r3
 8006264:	4b39      	ldr	r3, [pc, #228]	; (800634c <VCU_ReceiveMessages+0x140>)
 8006266:	795b      	ldrb	r3, [r3, #5]
 8006268:	461d      	mov	r5, r3
 800626a:	4b38      	ldr	r3, [pc, #224]	; (800634c <VCU_ReceiveMessages+0x140>)
 800626c:	799b      	ldrb	r3, [r3, #6]
 800626e:	461e      	mov	r6, r3
 8006270:	4b36      	ldr	r3, [pc, #216]	; (800634c <VCU_ReceiveMessages+0x140>)
 8006272:	79db      	ldrb	r3, [r3, #7]
 8006274:	9306      	str	r3, [sp, #24]
 8006276:	9605      	str	r6, [sp, #20]
 8006278:	9504      	str	r5, [sp, #16]
 800627a:	9403      	str	r4, [sp, #12]
 800627c:	9002      	str	r0, [sp, #8]
 800627e:	9101      	str	r1, [sp, #4]
 8006280:	9200      	str	r2, [sp, #0]
 8006282:	4673      	mov	r3, lr
 8006284:	4662      	mov	r2, ip
 8006286:	4934      	ldr	r1, [pc, #208]	; (8006358 <VCU_ReceiveMessages+0x14c>)
 8006288:	4834      	ldr	r0, [pc, #208]	; (800635c <VCU_ReceiveMessages+0x150>)
 800628a:	f005 fd9f 	bl	800bdcc <siprintf>
 800628e:	4833      	ldr	r0, [pc, #204]	; (800635c <VCU_ReceiveMessages+0x150>)
 8006290:	f7fe fede 	bl	8005050 <serialOut>

      //VCU_COMMAND
      if (vcu_rxObj.bF.id.SID == (ID_VCU_COMMAND +  pack.vcuCanOffset) ){
 8006294:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <VCU_ReceiveMessages+0x144>)
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800629c:	b29b      	uxth	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	4b2f      	ldr	r3, [pc, #188]	; (8006360 <VCU_ReceiveMessages+0x154>)
 80062a2:	895b      	ldrh	r3, [r3, #10]
 80062a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d102      	bne.n	80062b2 <VCU_ReceiveMessages+0xa6>

          VCU_ProcessVcuCommand();
 80062ac:	f000 f8b6 	bl	800641c <VCU_ProcessVcuCommand>
 80062b0:	e039      	b.n	8006326 <VCU_ReceiveMessages+0x11a>
      } else{
          // Unknown Message
          if(debugLevel & ( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 80062b2:	4b28      	ldr	r3, [pc, #160]	; (8006354 <VCU_ReceiveMessages+0x148>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f003 0305 	and.w	r3, r3, #5
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d033      	beq.n	8006326 <VCU_ReceiveMessages+0x11a>
 80062be:	4b24      	ldr	r3, [pc, #144]	; (8006350 <VCU_ReceiveMessages+0x144>)
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	469c      	mov	ip, r3
 80062ca:	4b21      	ldr	r3, [pc, #132]	; (8006350 <VCU_ReceiveMessages+0x144>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80062d2:	469e      	mov	lr, r3
 80062d4:	4b1d      	ldr	r3, [pc, #116]	; (800634c <VCU_ReceiveMessages+0x140>)
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	461a      	mov	r2, r3
 80062da:	4b1c      	ldr	r3, [pc, #112]	; (800634c <VCU_ReceiveMessages+0x140>)
 80062dc:	785b      	ldrb	r3, [r3, #1]
 80062de:	4619      	mov	r1, r3
 80062e0:	4b1a      	ldr	r3, [pc, #104]	; (800634c <VCU_ReceiveMessages+0x140>)
 80062e2:	789b      	ldrb	r3, [r3, #2]
 80062e4:	4618      	mov	r0, r3
 80062e6:	4b19      	ldr	r3, [pc, #100]	; (800634c <VCU_ReceiveMessages+0x140>)
 80062e8:	78db      	ldrb	r3, [r3, #3]
 80062ea:	461c      	mov	r4, r3
 80062ec:	4b17      	ldr	r3, [pc, #92]	; (800634c <VCU_ReceiveMessages+0x140>)
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	461d      	mov	r5, r3
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <VCU_ReceiveMessages+0x140>)
 80062f4:	795b      	ldrb	r3, [r3, #5]
 80062f6:	461e      	mov	r6, r3
 80062f8:	4b14      	ldr	r3, [pc, #80]	; (800634c <VCU_ReceiveMessages+0x140>)
 80062fa:	799b      	ldrb	r3, [r3, #6]
 80062fc:	607b      	str	r3, [r7, #4]
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <VCU_ReceiveMessages+0x140>)
 8006300:	79db      	ldrb	r3, [r3, #7]
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	9306      	str	r3, [sp, #24]
 8006308:	9605      	str	r6, [sp, #20]
 800630a:	9504      	str	r5, [sp, #16]
 800630c:	9403      	str	r4, [sp, #12]
 800630e:	9002      	str	r0, [sp, #8]
 8006310:	9101      	str	r1, [sp, #4]
 8006312:	9200      	str	r2, [sp, #0]
 8006314:	4673      	mov	r3, lr
 8006316:	4662      	mov	r2, ip
 8006318:	4912      	ldr	r1, [pc, #72]	; (8006364 <VCU_ReceiveMessages+0x158>)
 800631a:	4810      	ldr	r0, [pc, #64]	; (800635c <VCU_ReceiveMessages+0x150>)
 800631c:	f005 fd56 	bl	800bdcc <siprintf>
 8006320:	480e      	ldr	r0, [pc, #56]	; (800635c <VCU_ReceiveMessages+0x150>)
 8006322:	f7fe fe95 	bl	8005050 <serialOut>
      }

      // check for any more messages
      DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 8006326:	4a08      	ldr	r2, [pc, #32]	; (8006348 <VCU_ReceiveMessages+0x13c>)
 8006328:	2101      	movs	r1, #1
 800632a:	2000      	movs	r0, #0
 800632c:	f7fd fd8c 	bl	8003e48 <DRV_CANFDSPI_ReceiveChannelEventGet>
    while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <VCU_ReceiveMessages+0x13c>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b00      	cmp	r3, #0
 800633a:	f47f af70 	bne.w	800621e <VCU_ReceiveMessages+0x12>
    }

    //    VCU_LED_Clear(VCU_RX_LED);
    //canRxInterrupt = 0;
}
 800633e:	bf00      	nop
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006348:	2000cf4c 	.word	0x2000cf4c
 800634c:	2000cf5c 	.word	0x2000cf5c
 8006350:	2000cf50 	.word	0x2000cf50
 8006354:	20000008 	.word	0x20000008
 8006358:	0800d874 	.word	0x0800d874
 800635c:	2000ce88 	.word	0x2000ce88
 8006360:	2000c754 	.word	0x2000c754
 8006364:	0800d8cc 	.word	0x0800d8cc

08006368 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af02      	add	r7, sp, #8
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
//    MOD_LED_Set(VCU_TX_LED);
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8006372:	2332      	movs	r3, #50	; 0x32
 8006374:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
        DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	4a1f      	ldr	r2, [pc, #124]	; (80063f8 <VCU_TransmitMessageQueue+0x90>)
 800637a:	2102      	movs	r1, #2
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd fd30 	bl	8003de2 <DRV_CANFDSPI_TransmitChannelEventGet>
        if (attempts == 0) {
 8006382:	7bfb      	ldrb	r3, [r7, #15]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d115      	bne.n	80063b4 <VCU_TransmitMessageQueue+0x4c>
            Nop();
 8006388:	bf00      	nop
            Nop();
 800638a:	bf00      	nop
            DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800638c:	79f8      	ldrb	r0, [r7, #7]
 800638e:	4b1b      	ldr	r3, [pc, #108]	; (80063fc <VCU_TransmitMessageQueue+0x94>)
 8006390:	4a1b      	ldr	r2, [pc, #108]	; (8006400 <VCU_TransmitMessageQueue+0x98>)
 8006392:	491c      	ldr	r1, [pc, #112]	; (8006404 <VCU_TransmitMessageQueue+0x9c>)
 8006394:	f7fd fddf 	bl	8003f56 <DRV_CANFDSPI_ErrorCountStateGet>
            if(debugLevel & ( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO FULL!"); serialOut(tempBuffer);}
 8006398:	4b1b      	ldr	r3, [pc, #108]	; (8006408 <VCU_TransmitMessageQueue+0xa0>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f003 0305 	and.w	r3, r3, #5
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d025      	beq.n	80063f0 <VCU_TransmitMessageQueue+0x88>
 80063a4:	4919      	ldr	r1, [pc, #100]	; (800640c <VCU_TransmitMessageQueue+0xa4>)
 80063a6:	481a      	ldr	r0, [pc, #104]	; (8006410 <VCU_TransmitMessageQueue+0xa8>)
 80063a8:	f005 fd10 	bl	800bdcc <siprintf>
 80063ac:	4818      	ldr	r0, [pc, #96]	; (8006410 <VCU_TransmitMessageQueue+0xa8>)
 80063ae:	f7fe fe4f 	bl	8005050 <serialOut>
            return;
 80063b2:	e01d      	b.n	80063f0 <VCU_TransmitMessageQueue+0x88>
        }
        attempts--;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	3b01      	subs	r3, #1
 80063b8:	73fb      	strb	r3, [r7, #15]
    }
    while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 80063ba:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <VCU_TransmitMessageQueue+0x90>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0d7      	beq.n	8006376 <VCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <VCU_TransmitMessageQueue+0xac>)
 80063c8:	791b      	ldrb	r3, [r3, #4]
 80063ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7fe fdcd 	bl	8004f70 <DRV_CANFDSPI_DlcToDataBytes>
 80063d6:	4603      	mov	r3, r0
 80063d8:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 80063da:	7bbb      	ldrb	r3, [r7, #14]
 80063dc:	79f8      	ldrb	r0, [r7, #7]
 80063de:	2201      	movs	r2, #1
 80063e0:	9201      	str	r2, [sp, #4]
 80063e2:	9300      	str	r3, [sp, #0]
 80063e4:	4b0c      	ldr	r3, [pc, #48]	; (8006418 <VCU_TransmitMessageQueue+0xb0>)
 80063e6:	4a0b      	ldr	r2, [pc, #44]	; (8006414 <VCU_TransmitMessageQueue+0xac>)
 80063e8:	2102      	movs	r1, #2
 80063ea:	f7fd f975 	bl	80036d8 <DRV_CANFDSPI_TransmitChannelLoad>
 80063ee:	e000      	b.n	80063f2 <VCU_TransmitMessageQueue+0x8a>
            return;
 80063f0:	bf00      	nop

 //   VCU_LED_Clear(VCU_TX_LED);

}
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	2000cefc 	.word	0x2000cefc
 80063fc:	2000cf9e 	.word	0x2000cf9e
 8006400:	2000cf9d 	.word	0x2000cf9d
 8006404:	2000cf9c 	.word	0x2000cf9c
 8006408:	20000008 	.word	0x20000008
 800640c:	0800d938 	.word	0x0800d938
 8006410:	2000ce88 	.word	0x2000ce88
 8006414:	2000cf00 	.word	0x2000cf00
 8006418:	2000cf0c 	.word	0x2000cf0c

0800641c <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     M O D _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0

  uint8_t moduleId;
  //uint8_t index;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 8006422:	4b4a      	ldr	r3, [pc, #296]	; (800654c <VCU_ProcessVcuCommand+0x130>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4a      	ldr	r2, [pc, #296]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 8006428:	6313      	str	r3, [r2, #48]	; 0x30
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800642a:	4b4a      	ldr	r3, [pc, #296]	; (8006554 <VCU_ProcessVcuCommand+0x138>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	b29a      	uxth	r2, r3
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 8006434:	859a      	strh	r2, [r3, #44]	; 0x2c

  // copy received data to status structure
  memset(&command,0,12);
 8006436:	1d3b      	adds	r3, r7, #4
 8006438:	220c      	movs	r2, #12
 800643a:	2100      	movs	r1, #0
 800643c:	4618      	mov	r0, r3
 800643e:	f005 fc7f 	bl	800bd40 <memset>
  memcpy(&command, vcu_rxd, 12);
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	220c      	movs	r2, #12
 8006446:	4944      	ldr	r1, [pc, #272]	; (8006558 <VCU_ProcessVcuCommand+0x13c>)
 8006448:	4618      	mov	r0, r3
 800644a:	f005 fc6b 	bl	800bd24 <memcpy>

  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800644e:	4b40      	ldr	r3, [pc, #256]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 8006450:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006454:	793a      	ldrb	r2, [r7, #4]
 8006456:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	4293      	cmp	r3, r2
 800645e:	d055      	beq.n	800650c <VCU_ProcessVcuCommand+0xf0>

    // change of state!
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 8006460:	793b      	ldrb	r3, [r7, #4]
 8006462:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8006466:	b2db      	uxtb	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	4b39      	ldr	r3, [pc, #228]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 800646c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

    switch (pack.vcuRequestedState) {
 8006470:	4b37      	ldr	r3, [pc, #220]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 8006472:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006476:	2b03      	cmp	r3, #3
 8006478:	d836      	bhi.n	80064e8 <VCU_ProcessVcuCommand+0xcc>
 800647a:	a201      	add	r2, pc, #4	; (adr r2, 8006480 <VCU_ProcessVcuCommand+0x64>)
 800647c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006480:	08006511 	.word	0x08006511
 8006484:	08006511 	.word	0x08006511
 8006488:	080064bd 	.word	0x080064bd
 800648c:	08006491 	.word	0x08006491
            case packOn:
              // We need to select the module with the highest voltage
              moduleId = MOD_FindMaxVoltageModule();
 8006490:	f7fb fc88 	bl	8001da4 <MOD_FindMaxVoltageModule>
 8006494:	4603      	mov	r3, r0
 8006496:	73fb      	strb	r3, [r7, #15]
              if (moduleId != pack.moduleCount +1 ){ //we have a valid ID
 8006498:	7bfa      	ldrb	r2, [r7, #15]
 800649a:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 800649c:	7c1b      	ldrb	r3, [r3, #16]
 800649e:	3301      	adds	r3, #1
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d037      	beq.n	8006514 <VCU_ProcessVcuCommand+0xf8>
                // set the power stage
                pack.powerStatus.powerStage = stageFirstModule;
 80064a4:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	759a      	strb	r2, [r3, #22]
                // store the module Id
                pack.powerStatus.firstModuleId = moduleId;
 80064aa:	4a29      	ldr	r2, [pc, #164]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	7553      	strb	r3, [r2, #21]
                // Enable the module
                MOD_TransmitState(moduleId, moduleOn);
 80064b0:	7bfb      	ldrb	r3, [r7, #15]
 80064b2:	2103      	movs	r1, #3
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fb ff6f 	bl	8002398 <MOD_TransmitState>
              }else{
                // No module was selected!
              }

              break;
 80064ba:	e02b      	b.n	8006514 <VCU_ProcessVcuCommand+0xf8>
            case packPrecharge:
              // Mechanical on for all modules, FET on for one module only
              // We need to select the module with the highest voltage and power it on - the rest will be issues the standby command
              moduleId = MOD_FindMaxVoltageModule();
 80064bc:	f7fb fc72 	bl	8001da4 <MOD_FindMaxVoltageModule>
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]
              if (moduleId != pack.moduleCount +1 ){ //we have a valid ID
 80064c4:	7bfa      	ldrb	r2, [r7, #15]
 80064c6:	4b22      	ldr	r3, [pc, #136]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 80064c8:	7c1b      	ldrb	r3, [r3, #16]
 80064ca:	3301      	adds	r3, #1
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d023      	beq.n	8006518 <VCU_ProcessVcuCommand+0xfc>
                // set the power stage
                pack.powerStatus.powerStage = stageFirstModule;
 80064d0:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	759a      	strb	r2, [r3, #22]
                // store the module Id
                pack.powerStatus.firstModuleId = moduleId;
 80064d6:	4a1e      	ldr	r2, [pc, #120]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	7553      	strb	r3, [r2, #21]
                // Enable the module
                MOD_TransmitState(moduleId, moduleOn);
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2103      	movs	r1, #3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7fb ff59 	bl	8002398 <MOD_TransmitState>
              }else{
                  // No module was selected!
              }
              break;
 80064e6:	e017      	b.n	8006518 <VCU_ProcessVcuCommand+0xfc>
            case packStandby:
              // Mechanical on, FET off for all modules (handled in app.c)
              break;
            default:
              // Unknown Message
              if(debugLevel & (DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 80064e8:	4b1c      	ldr	r3, [pc, #112]	; (800655c <VCU_ProcessVcuCommand+0x140>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f003 0305 	and.w	r3, r3, #5
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d013      	beq.n	800651c <VCU_ProcessVcuCommand+0x100>
 80064f4:	4b16      	ldr	r3, [pc, #88]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 80064f6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80064fa:	461a      	mov	r2, r3
 80064fc:	4918      	ldr	r1, [pc, #96]	; (8006560 <VCU_ProcessVcuCommand+0x144>)
 80064fe:	4819      	ldr	r0, [pc, #100]	; (8006564 <VCU_ProcessVcuCommand+0x148>)
 8006500:	f005 fc64 	bl	800bdcc <siprintf>
 8006504:	4817      	ldr	r0, [pc, #92]	; (8006564 <VCU_ProcessVcuCommand+0x148>)
 8006506:	f7fe fda3 	bl	8005050 <serialOut>
              break;
 800650a:	e007      	b.n	800651c <VCU_ProcessVcuCommand+0x100>
    }

  }
 800650c:	bf00      	nop
 800650e:	e006      	b.n	800651e <VCU_ProcessVcuCommand+0x102>
              break;
 8006510:	bf00      	nop
 8006512:	e004      	b.n	800651e <VCU_ProcessVcuCommand+0x102>
              break;
 8006514:	bf00      	nop
 8006516:	e002      	b.n	800651e <VCU_ProcessVcuCommand+0x102>
              break;
 8006518:	bf00      	nop
 800651a:	e000      	b.n	800651e <VCU_ProcessVcuCommand+0x102>
              break;
 800651c:	bf00      	nop

  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x", ID_VCU_COMMAND + PACK_ID, pack.vcuRequestedState); serialOut(tempBuffer);}
 800651e:	4b0f      	ldr	r3, [pc, #60]	; (800655c <VCU_ProcessVcuCommand+0x140>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <VCU_ProcessVcuCommand+0x126>
 800652a:	4b09      	ldr	r3, [pc, #36]	; (8006550 <VCU_ProcessVcuCommand+0x134>)
 800652c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006530:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006534:	490c      	ldr	r1, [pc, #48]	; (8006568 <VCU_ProcessVcuCommand+0x14c>)
 8006536:	480b      	ldr	r0, [pc, #44]	; (8006564 <VCU_ProcessVcuCommand+0x148>)
 8006538:	f005 fc48 	bl	800bdcc <siprintf>
 800653c:	4809      	ldr	r0, [pc, #36]	; (8006564 <VCU_ProcessVcuCommand+0x148>)
 800653e:	f7fe fd87 	bl	8005050 <serialOut>

}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	2000cef0 	.word	0x2000cef0
 8006550:	2000c754 	.word	0x2000c754
 8006554:	2000ca68 	.word	0x2000ca68
 8006558:	2000cf5c 	.word	0x2000cf5c
 800655c:	20000008 	.word	0x20000008
 8006560:	0800d954 	.word	0x0800d954
 8006564:	2000ce88 	.word	0x2000ce88
 8006568:	0800d97c 	.word	0x0800d97c

0800656c <VCU_TicksSinceLastMessage>:
/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;

    if ((etTimerOverflows - pack.vcuLastContact.overflows) == 0){
 8006572:	4b16      	ldr	r3, [pc, #88]	; (80065cc <VCU_TicksSinceLastMessage+0x60>)
 8006574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006576:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <VCU_TicksSinceLastMessage+0x64>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d107      	bne.n	800658e <VCU_TicksSinceLastMessage+0x22>
      elapsedTicks = htim1.Instance->CNT - pack.vcuLastContact.ticks;
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <VCU_TicksSinceLastMessage+0x68>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	4a11      	ldr	r2, [pc, #68]	; (80065cc <VCU_TicksSinceLastMessage+0x60>)
 8006586:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006588:	1a9b      	subs	r3, r3, r2
 800658a:	607b      	str	r3, [r7, #4]
 800658c:	e016      	b.n	80065bc <VCU_TicksSinceLastMessage+0x50>
    }else{
      //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (etTimerOverflows - (pack.vcuLastContact.overflows +1))) + (htim1.Instance->CNT);
 800658e:	4b11      	ldr	r3, [pc, #68]	; (80065d4 <VCU_TicksSinceLastMessage+0x68>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	4a0e      	ldr	r2, [pc, #56]	; (80065cc <VCU_TicksSinceLastMessage+0x60>)
 8006594:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8006596:	1a9a      	subs	r2, r3, r2
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <VCU_TicksSinceLastMessage+0x68>)
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	3301      	adds	r3, #1
 800659e:	490c      	ldr	r1, [pc, #48]	; (80065d0 <VCU_TicksSinceLastMessage+0x64>)
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	490a      	ldr	r1, [pc, #40]	; (80065cc <VCU_TicksSinceLastMessage+0x60>)
 80065a4:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80065a6:	1a41      	subs	r1, r0, r1
 80065a8:	3901      	subs	r1, #1
 80065aa:	fb01 f303 	mul.w	r3, r1, r3
 80065ae:	441a      	add	r2, r3
 80065b0:	4b08      	ldr	r3, [pc, #32]	; (80065d4 <VCU_TicksSinceLastMessage+0x68>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	4413      	add	r3, r2
 80065b8:	3301      	adds	r3, #1
 80065ba:	607b      	str	r3, [r7, #4]
    }
    return elapsedTicks;
 80065bc:	687b      	ldr	r3, [r7, #4]


}
 80065be:	4618      	mov	r0, r3
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2000c754 	.word	0x2000c754
 80065d0:	2000cef0 	.word	0x2000cef0
 80065d4:	2000ca68 	.word	0x2000ca68

080065d8 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     M O D _ T r a n s m i t B m s S t a t u s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  bmsState.bms_state                = pack.state;
 80065de:	4b46      	ldr	r3, [pc, #280]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 80065e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	783b      	ldrb	r3, [r7, #0]
 80065ec:	f362 0301 	bfi	r3, r2, #0, #2
 80065f0:	703b      	strb	r3, [r7, #0]
  bmsState.bms_soh                  = pack.soh;
 80065f2:	4b41      	ldr	r3, [pc, #260]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 80065f4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80065f8:	883b      	ldrh	r3, [r7, #0]
 80065fa:	f362 0389 	bfi	r3, r2, #2, #8
 80065fe:	803b      	strh	r3, [r7, #0]
  bmsState.bms_status               = pack.status;
 8006600:	4b3d      	ldr	r3, [pc, #244]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 8006602:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	b2da      	uxtb	r2, r3
 800660c:	787b      	ldrb	r3, [r7, #1]
 800660e:	f362 0383 	bfi	r3, r2, #2, #2
 8006612:	707b      	strb	r3, [r7, #1]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 8006614:	4b38      	ldr	r3, [pc, #224]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 8006616:	7c9b      	ldrb	r3, [r3, #18]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	b2da      	uxtb	r2, r3
 800661e:	787b      	ldrb	r3, [r7, #1]
 8006620:	f362 1304 	bfi	r3, r2, #4, #1
 8006624:	707b      	strb	r3, [r7, #1]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 8006626:	4b34      	ldr	r3, [pc, #208]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 8006628:	7c5b      	ldrb	r3, [r3, #17]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	b2da      	uxtb	r2, r3
 8006630:	787b      	ldrb	r3, [r7, #1]
 8006632:	f362 1345 	bfi	r3, r2, #5, #1
 8006636:	707b      	strb	r3, [r7, #1]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 8006638:	4b2f      	ldr	r3, [pc, #188]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 800663a:	7cdb      	ldrb	r3, [r3, #19]
 800663c:	70fb      	strb	r3, [r7, #3]
  bmsState.bms_module_off           = pack.faultedModules;
 800663e:	4b2e      	ldr	r3, [pc, #184]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 8006640:	7d1b      	ldrb	r3, [r3, #20]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	b2da      	uxtb	r2, r3
 8006648:	787b      	ldrb	r3, [r7, #1]
 800664a:	f362 1386 	bfi	r3, r2, #6, #1
 800664e:	707b      	strb	r3, [r7, #1]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 8006650:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <VCU_TransmitBmsState+0x120>)
 8006652:	7c1b      	ldrb	r3, [r3, #16]
 8006654:	70bb      	strb	r3, [r7, #2]
  bmsState.UNUSED_16                = 0;
 8006656:	787b      	ldrb	r3, [r7, #1]
 8006658:	f36f 13c7 	bfc	r3, #7, #1
 800665c:	707b      	strb	r3, [r7, #1]
  bmsState.UNUSED_31_63             = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	607b      	str	r3, [r7, #4]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 8006662:	4b26      	ldr	r3, [pc, #152]	; (80066fc <VCU_TransmitBmsState+0x124>)
 8006664:	2200      	movs	r2, #0
 8006666:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 8006668:	4b24      	ldr	r3, [pc, #144]	; (80066fc <VCU_TransmitBmsState+0x124>)
 800666a:	2200      	movs	r2, #0
 800666c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800666e:	4b23      	ldr	r3, [pc, #140]	; (80066fc <VCU_TransmitBmsState+0x124>)
 8006670:	2200      	movs	r2, #0
 8006672:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState, 8);
 8006674:	4b22      	ldr	r3, [pc, #136]	; (8006700 <VCU_TransmitBmsState+0x128>)
 8006676:	461a      	mov	r2, r3
 8006678:	463b      	mov	r3, r7
 800667a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800667e:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE;                 // Standard ID
 8006682:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <VCU_TransmitBmsState+0x124>)
 8006684:	8813      	ldrh	r3, [r2, #0]
 8006686:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800668a:	f361 030a 	bfi	r3, r1, #0, #11
 800668e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 8006690:	4a1a      	ldr	r2, [pc, #104]	; (80066fc <VCU_TransmitBmsState+0x124>)
 8006692:	6813      	ldr	r3, [r2, #0]
 8006694:	f36f 23dc 	bfc	r3, #11, #18
 8006698:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800669a:	4a18      	ldr	r2, [pc, #96]	; (80066fc <VCU_TransmitBmsState+0x124>)
 800669c:	7913      	ldrb	r3, [r2, #4]
 800669e:	f36f 1386 	bfc	r3, #6, #1
 80066a2:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80066a4:	4a15      	ldr	r2, [pc, #84]	; (80066fc <VCU_TransmitBmsState+0x124>)
 80066a6:	7913      	ldrb	r3, [r2, #4]
 80066a8:	2108      	movs	r1, #8
 80066aa:	f361 0303 	bfi	r3, r1, #0, #4
 80066ae:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80066b0:	4a12      	ldr	r2, [pc, #72]	; (80066fc <VCU_TransmitBmsState+0x124>)
 80066b2:	7913      	ldrb	r3, [r2, #4]
 80066b4:	f36f 13c7 	bfc	r3, #7, #1
 80066b8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80066ba:	4a10      	ldr	r2, [pc, #64]	; (80066fc <VCU_TransmitBmsState+0x124>)
 80066bc:	7913      	ldrb	r3, [r2, #4]
 80066be:	f36f 1304 	bfc	r3, #4, #1
 80066c2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 80066c4:	4b0f      	ldr	r3, [pc, #60]	; (8006704 <VCU_TransmitBmsState+0x12c>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	f003 0304 	and.w	r3, r3, #4
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <VCU_TransmitBmsState+0x112>
 80066d0:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <VCU_TransmitBmsState+0x124>)
 80066d2:	881b      	ldrh	r3, [r3, #0]
 80066d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066d8:	b29b      	uxth	r3, r3
 80066da:	461a      	mov	r2, r3
 80066dc:	490a      	ldr	r1, [pc, #40]	; (8006708 <VCU_TransmitBmsState+0x130>)
 80066de:	480b      	ldr	r0, [pc, #44]	; (800670c <VCU_TransmitBmsState+0x134>)
 80066e0:	f005 fb74 	bl	800bdcc <siprintf>
 80066e4:	4809      	ldr	r0, [pc, #36]	; (800670c <VCU_TransmitBmsState+0x134>)
 80066e6:	f7fe fcb3 	bl	8005050 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 80066ea:	2000      	movs	r0, #0
 80066ec:	f7ff fe3c 	bl	8006368 <VCU_TransmitMessageQueue>

}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	2000c754 	.word	0x2000c754
 80066fc:	2000cf00 	.word	0x2000cf00
 8006700:	2000cf0c 	.word	0x2000cf0c
 8006704:	20000008 	.word	0x20000008
 8006708:	0800d9a4 	.word	0x0800d9a4
 800670c:	2000ce88 	.word	0x2000ce88

08006710 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     M O D _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
  //uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  //uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  uint32_t totalCurrent = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
  uint16_t packCurrent  = 0;
 800671a:	2300      	movs	r3, #0
 800671c:	837b      	strh	r3, [r7, #26]
  uint16_t packVoltage  = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	833b      	strh	r3, [r7, #24]
  uint16_t voltage      = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	82fb      	strh	r3, [r7, #22]
  uint8_t index;
  uint8_t modulesOn     = 0;
 8006726:	2300      	movs	r3, #0
 8006728:	753b      	strb	r3, [r7, #20]
  float   floatVoltage  = 0;
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
  float   floatCurrent  = 0;
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	60fb      	str	r3, [r7, #12]
  float   vcuValue      = 0;
 8006736:	f04f 0300 	mov.w	r3, #0
 800673a:	60bb      	str	r3, [r7, #8]

  // sum the currents of all modules that are On - take voltage from the last one
  for(index = 0; index < pack.moduleCount; index++){
 800673c:	2300      	movs	r3, #0
 800673e:	757b      	strb	r3, [r7, #21]
 8006740:	e029      	b.n	8006796 <VCU_TransmitBmsData1+0x86>
    if(module[index].current_state == moduleOn) {
 8006742:	7d7b      	ldrb	r3, [r7, #21]
 8006744:	4a86      	ldr	r2, [pc, #536]	; (8006960 <VCU_TransmitBmsData1+0x250>)
 8006746:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800674a:	fb01 f303 	mul.w	r3, r1, r3
 800674e:	4413      	add	r3, r2
 8006750:	331d      	adds	r3, #29
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b03      	cmp	r3, #3
 8006756:	d11b      	bne.n	8006790 <VCU_TransmitBmsData1+0x80>
      voltage = voltage + module[index].mmv;
 8006758:	7d7b      	ldrb	r3, [r7, #21]
 800675a:	4a81      	ldr	r2, [pc, #516]	; (8006960 <VCU_TransmitBmsData1+0x250>)
 800675c:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	4413      	add	r3, r2
 8006766:	330c      	adds	r3, #12
 8006768:	881a      	ldrh	r2, [r3, #0]
 800676a:	8afb      	ldrh	r3, [r7, #22]
 800676c:	4413      	add	r3, r2
 800676e:	82fb      	strh	r3, [r7, #22]
      modulesOn++;
 8006770:	7d3b      	ldrb	r3, [r7, #20]
 8006772:	3301      	adds	r3, #1
 8006774:	753b      	strb	r3, [r7, #20]
      totalCurrent = totalCurrent + module[index].mmc;
 8006776:	7d7b      	ldrb	r3, [r7, #21]
 8006778:	4a79      	ldr	r2, [pc, #484]	; (8006960 <VCU_TransmitBmsData1+0x250>)
 800677a:	f44f 61c6 	mov.w	r1, #1584	; 0x630
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	4413      	add	r3, r2
 8006784:	330e      	adds	r3, #14
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	69fb      	ldr	r3, [r7, #28]
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]
  for(index = 0; index < pack.moduleCount; index++){
 8006790:	7d7b      	ldrb	r3, [r7, #21]
 8006792:	3301      	adds	r3, #1
 8006794:	757b      	strb	r3, [r7, #21]
 8006796:	4b73      	ldr	r3, [pc, #460]	; (8006964 <VCU_TransmitBmsData1+0x254>)
 8006798:	7c1b      	ldrb	r3, [r3, #16]
 800679a:	7d7a      	ldrb	r2, [r7, #21]
 800679c:	429a      	cmp	r2, r3
 800679e:	d3d0      	bcc.n	8006742 <VCU_TransmitBmsData1+0x32>
    }
  }
  //take average voltage
  voltage = voltage / modulesOn;
 80067a0:	8afa      	ldrh	r2, [r7, #22]
 80067a2:	7d3b      	ldrb	r3, [r7, #20]
 80067a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80067a8:	82fb      	strh	r3, [r7, #22]


  if(totalCurrent >0){
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d039      	beq.n	8006824 <VCU_TransmitBmsData1+0x114>
    // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
    floatCurrent = MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * totalCurrent);
 80067b0:	69f8      	ldr	r0, [r7, #28]
 80067b2:	f7f9 fe7f 	bl	80004b4 <__aeabi_ui2d>
 80067b6:	a362      	add	r3, pc, #392	; (adr r3, 8006940 <VCU_TransmitBmsData1+0x230>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f7f9 fef4 	bl	80005a8 <__aeabi_dmul>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
 80067c4:	4610      	mov	r0, r2
 80067c6:	4619      	mov	r1, r3
 80067c8:	a35f      	add	r3, pc, #380	; (adr r3, 8006948 <VCU_TransmitBmsData1+0x238>)
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f7f9 fd33 	bl	8000238 <__aeabi_dsub>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4610      	mov	r0, r2
 80067d8:	4619      	mov	r1, r3
 80067da:	f7fa f8f7 	bl	80009cc <__aeabi_d2f>
 80067de:	4603      	mov	r3, r0
 80067e0:	60fb      	str	r3, [r7, #12]
    // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
    vcuValue = (floatCurrent/BMS_CURRENT_FACTOR)-(BMS_CURRENT_BASE/BMS_CURRENT_FACTOR);
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7f9 fe88 	bl	80004f8 <__aeabi_f2d>
 80067e8:	a359      	add	r3, pc, #356	; (adr r3, 8006950 <VCU_TransmitBmsData1+0x240>)
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f7fa f805 	bl	80007fc <__aeabi_ddiv>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4610      	mov	r0, r2
 80067f8:	4619      	mov	r1, r3
 80067fa:	f04f 0200 	mov.w	r2, #0
 80067fe:	4b5a      	ldr	r3, [pc, #360]	; (8006968 <VCU_TransmitBmsData1+0x258>)
 8006800:	f7f9 fd1c 	bl	800023c <__adddf3>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	4610      	mov	r0, r2
 800680a:	4619      	mov	r1, r3
 800680c:	f7fa f8de 	bl	80009cc <__aeabi_d2f>
 8006810:	4603      	mov	r3, r0
 8006812:	60bb      	str	r3, [r7, #8]
    packCurrent = vcuValue;
 8006814:	edd7 7a02 	vldr	s15, [r7, #8]
 8006818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681c:	ee17 3a90 	vmov	r3, s15
 8006820:	837b      	strh	r3, [r7, #26]
 8006822:	e001      	b.n	8006828 <VCU_TransmitBmsData1+0x118>
  }else packCurrent = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	837b      	strh	r3, [r7, #26]

  if(voltage >0){
 8006828:	8afb      	ldrh	r3, [r7, #22]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d032      	beq.n	8006894 <VCU_TransmitBmsData1+0x184>
    // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
      floatVoltage = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * voltage);
 800682e:	8afb      	ldrh	r3, [r7, #22]
 8006830:	4618      	mov	r0, r3
 8006832:	f7f9 fe4f 	bl	80004d4 <__aeabi_i2d>
 8006836:	a348      	add	r3, pc, #288	; (adr r3, 8006958 <VCU_TransmitBmsData1+0x248>)
 8006838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683c:	f7f9 feb4 	bl	80005a8 <__aeabi_dmul>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	4610      	mov	r0, r2
 8006846:	4619      	mov	r1, r3
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	f7f9 fcf4 	bl	800023c <__adddf3>
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	4610      	mov	r0, r2
 800685a:	4619      	mov	r1, r3
 800685c:	f7fa f8b6 	bl	80009cc <__aeabi_d2f>
 8006860:	4603      	mov	r3, r0
 8006862:	613b      	str	r3, [r7, #16]
      // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
      vcuValue = (floatVoltage/BMS_VOLTAGE_FACTOR)-(BMS_VOLTAGE_BASE/BMS_VOLTAGE_FACTOR);
 8006864:	6938      	ldr	r0, [r7, #16]
 8006866:	f7f9 fe47 	bl	80004f8 <__aeabi_f2d>
 800686a:	a339      	add	r3, pc, #228	; (adr r3, 8006950 <VCU_TransmitBmsData1+0x240>)
 800686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006870:	f7f9 ffc4 	bl	80007fc <__aeabi_ddiv>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	4610      	mov	r0, r2
 800687a:	4619      	mov	r1, r3
 800687c:	f7fa f8a6 	bl	80009cc <__aeabi_d2f>
 8006880:	4603      	mov	r3, r0
 8006882:	60bb      	str	r3, [r7, #8]
      packVoltage = vcuValue;
 8006884:	edd7 7a02 	vldr	s15, [r7, #8]
 8006888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800688c:	ee17 3a90 	vmov	r3, s15
 8006890:	833b      	strh	r3, [r7, #24]
 8006892:	e001      	b.n	8006898 <VCU_TransmitBmsData1+0x188>

  }else packVoltage = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	833b      	strh	r3, [r7, #24]

  bmsData1.bms_pack_current     = packCurrent;
 8006898:	8b7b      	ldrh	r3, [r7, #26]
 800689a:	80fb      	strh	r3, [r7, #6]
  bmsData1.bms_pack_voltage     = packVoltage;
 800689c:	8b3b      	ldrh	r3, [r7, #24]
 800689e:	80bb      	strh	r3, [r7, #4]
  bmsData1.UNUSED_00_31         = 0;
 80068a0:	2300      	movs	r3, #0
 80068a2:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 80068a4:	4b31      	ldr	r3, [pc, #196]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 80068aa:	4b30      	ldr	r3, [pc, #192]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 80068b0:	4b2e      	ldr	r3, [pc, #184]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068b2:	2200      	movs	r2, #0
 80068b4:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, 8);
 80068b6:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <VCU_TransmitBmsData1+0x260>)
 80068b8:	461a      	mov	r2, r3
 80068ba:	463b      	mov	r3, r7
 80068bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80068c0:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1;                // Standard ID
 80068c4:	4a29      	ldr	r2, [pc, #164]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068c6:	8813      	ldrh	r3, [r2, #0]
 80068c8:	f240 4121 	movw	r1, #1057	; 0x421
 80068cc:	f361 030a 	bfi	r3, r1, #0, #11
 80068d0:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068d4:	6813      	ldr	r3, [r2, #0]
 80068d6:	f36f 23dc 	bfc	r3, #11, #18
 80068da:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80068dc:	4a23      	ldr	r2, [pc, #140]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068de:	7913      	ldrb	r3, [r2, #4]
 80068e0:	f36f 1386 	bfc	r3, #6, #1
 80068e4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 80068e6:	4a21      	ldr	r2, [pc, #132]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068e8:	7913      	ldrb	r3, [r2, #4]
 80068ea:	2108      	movs	r1, #8
 80068ec:	f361 0303 	bfi	r3, r1, #0, #4
 80068f0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80068f2:	4a1e      	ldr	r2, [pc, #120]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068f4:	7913      	ldrb	r3, [r2, #4]
 80068f6:	f36f 13c7 	bfc	r3, #7, #1
 80068fa:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80068fc:	4a1b      	ldr	r2, [pc, #108]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 80068fe:	7913      	ldrb	r3, [r2, #4]
 8006900:	f36f 1304 	bfc	r3, #4, #1
 8006904:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 8006906:	4b1b      	ldr	r3, [pc, #108]	; (8006974 <VCU_TransmitBmsData1+0x264>)
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	f003 0304 	and.w	r3, r3, #4
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00c      	beq.n	800692c <VCU_TransmitBmsData1+0x21c>
 8006912:	4b16      	ldr	r3, [pc, #88]	; (800696c <VCU_TransmitBmsData1+0x25c>)
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800691a:	b29b      	uxth	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	4916      	ldr	r1, [pc, #88]	; (8006978 <VCU_TransmitBmsData1+0x268>)
 8006920:	4816      	ldr	r0, [pc, #88]	; (800697c <VCU_TransmitBmsData1+0x26c>)
 8006922:	f005 fa53 	bl	800bdcc <siprintf>
 8006926:	4815      	ldr	r0, [pc, #84]	; (800697c <VCU_TransmitBmsData1+0x26c>)
 8006928:	f7fe fb92 	bl	8005050 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800692c:	2000      	movs	r0, #0
 800692e:	f7ff fd1b 	bl	8006368 <VCU_TransmitMessageQueue>
}
 8006932:	bf00      	nop
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	f3af 8000 	nop.w
 8006940:	47ae147b 	.word	0x47ae147b
 8006944:	3f947ae1 	.word	0x3f947ae1
 8006948:	47ae147b 	.word	0x47ae147b
 800694c:	40847ae1 	.word	0x40847ae1
 8006950:	9999999a 	.word	0x9999999a
 8006954:	3fa99999 	.word	0x3fa99999
 8006958:	eb851eb8 	.word	0xeb851eb8
 800695c:	3f8eb851 	.word	0x3f8eb851
 8006960:	20000154 	.word	0x20000154
 8006964:	2000c754 	.word	0x2000c754
 8006968:	40df4000 	.word	0x40df4000
 800696c:	2000cf00 	.word	0x2000cf00
 8006970:	2000cf0c 	.word	0x2000cf0c
 8006974:	20000008 	.word	0x20000008
 8006978:	0800d9bc 	.word	0x0800d9bc
 800697c:	2000ce88 	.word	0x2000ce88

08006980 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006980:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006982:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006984:	3304      	adds	r3, #4

08006986 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006986:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006988:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800698a:	d3f9      	bcc.n	8006980 <CopyDataInit>
  bx lr
 800698c:	4770      	bx	lr

0800698e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800698e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006990:	3004      	adds	r0, #4

08006992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006992:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006994:	d3fb      	bcc.n	800698e <FillZerobss>
  bx lr
 8006996:	4770      	bx	lr

08006998 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006998:	480c      	ldr	r0, [pc, #48]	; (80069cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800699a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800699c:	f7ff fbe4 	bl	8006168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80069a0:	480b      	ldr	r0, [pc, #44]	; (80069d0 <LoopForever+0x6>)
 80069a2:	490c      	ldr	r1, [pc, #48]	; (80069d4 <LoopForever+0xa>)
 80069a4:	4a0c      	ldr	r2, [pc, #48]	; (80069d8 <LoopForever+0xe>)
 80069a6:	2300      	movs	r3, #0
 80069a8:	f7ff ffed 	bl	8006986 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80069ac:	480b      	ldr	r0, [pc, #44]	; (80069dc <LoopForever+0x12>)
 80069ae:	490c      	ldr	r1, [pc, #48]	; (80069e0 <LoopForever+0x16>)
 80069b0:	4a0c      	ldr	r2, [pc, #48]	; (80069e4 <LoopForever+0x1a>)
 80069b2:	2300      	movs	r3, #0
 80069b4:	f7ff ffe7 	bl	8006986 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80069b8:	480b      	ldr	r0, [pc, #44]	; (80069e8 <LoopForever+0x1e>)
 80069ba:	490c      	ldr	r1, [pc, #48]	; (80069ec <LoopForever+0x22>)
 80069bc:	2300      	movs	r3, #0
 80069be:	f7ff ffe8 	bl	8006992 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80069c2:	f005 f98b 	bl	800bcdc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80069c6:	f7fe fc8d 	bl	80052e4 <main>

080069ca <LoopForever>:

LoopForever:
  b LoopForever
 80069ca:	e7fe      	b.n	80069ca <LoopForever>
  ldr   r0, =_estack
 80069cc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80069d0:	20000008 	.word	0x20000008
 80069d4:	2000007c 	.word	0x2000007c
 80069d8:	0800dc24 	.word	0x0800dc24
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80069dc:	20030000 	.word	0x20030000
 80069e0:	20030000 	.word	0x20030000
 80069e4:	0800dc98 	.word	0x0800dc98
  INIT_BSS _sbss, _ebss
 80069e8:	2000007c 	.word	0x2000007c
 80069ec:	2000cfb4 	.word	0x2000cfb4

080069f0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069f0:	e7fe      	b.n	80069f0 <ADC1_IRQHandler>
	...

080069f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069fe:	4b0c      	ldr	r3, [pc, #48]	; (8006a30 <HAL_Init+0x3c>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a0b      	ldr	r2, [pc, #44]	; (8006a30 <HAL_Init+0x3c>)
 8006a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a0a:	2003      	movs	r0, #3
 8006a0c:	f000 f948 	bl	8006ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006a10:	200f      	movs	r0, #15
 8006a12:	f000 f80f 	bl	8006a34 <HAL_InitTick>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	71fb      	strb	r3, [r7, #7]
 8006a20:	e001      	b.n	8006a26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006a22:	f7ff f8c1 	bl	8005ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006a26:	79fb      	ldrb	r3, [r7, #7]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	58004000 	.word	0x58004000

08006a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8006a40:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <HAL_InitTick+0x6c>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d024      	beq.n	8006a92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8006a48:	f001 fd46 	bl	80084d8 <HAL_RCC_GetHCLKFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <HAL_InitTick+0x6c>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	4619      	mov	r1, r3
 8006a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a58:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f950 	bl	8006d06 <HAL_SYSTICK_Config>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10f      	bne.n	8006a8c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b0f      	cmp	r3, #15
 8006a70:	d809      	bhi.n	8006a86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a72:	2200      	movs	r2, #0
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	f04f 30ff 	mov.w	r0, #4294967295
 8006a7a:	f000 f91c 	bl	8006cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <HAL_InitTick+0x70>)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	e007      	b.n	8006a96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	73fb      	strb	r3, [r7, #15]
 8006a8a:	e004      	b.n	8006a96 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
 8006a90:	e001      	b.n	8006a96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	20000014 	.word	0x20000014
 8006aa4:	20000010 	.word	0x20000010

08006aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <HAL_IncTick+0x20>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	4b06      	ldr	r3, [pc, #24]	; (8006acc <HAL_IncTick+0x24>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	4a04      	ldr	r2, [pc, #16]	; (8006acc <HAL_IncTick+0x24>)
 8006aba:	6013      	str	r3, [r2, #0]
}
 8006abc:	bf00      	nop
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000014 	.word	0x20000014
 8006acc:	2000cfa0 	.word	0x2000cfa0

08006ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8006ad4:	4b03      	ldr	r3, [pc, #12]	; (8006ae4 <HAL_GetTick+0x14>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	46bd      	mov	sp, r7
 8006adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae0:	4770      	bx	lr
 8006ae2:	bf00      	nop
 8006ae4:	2000cfa0 	.word	0x2000cfa0

08006ae8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8006aec:	4b03      	ldr	r3, [pc, #12]	; (8006afc <HAL_GetTickPrio+0x14>)
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	20000010 	.word	0x20000010

08006b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b10:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <__NVIC_SetPriorityGrouping+0x44>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b32:	4a04      	ldr	r2, [pc, #16]	; (8006b44 <__NVIC_SetPriorityGrouping+0x44>)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	60d3      	str	r3, [r2, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	e000ed00 	.word	0xe000ed00

08006b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b4c:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <__NVIC_GetPriorityGrouping+0x18>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	0a1b      	lsrs	r3, r3, #8
 8006b52:	f003 0307 	and.w	r3, r3, #7
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr
 8006b60:	e000ed00 	.word	0xe000ed00

08006b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	db0b      	blt.n	8006b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b76:	79fb      	ldrb	r3, [r7, #7]
 8006b78:	f003 021f 	and.w	r2, r3, #31
 8006b7c:	4907      	ldr	r1, [pc, #28]	; (8006b9c <__NVIC_EnableIRQ+0x38>)
 8006b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b82:	095b      	lsrs	r3, r3, #5
 8006b84:	2001      	movs	r0, #1
 8006b86:	fa00 f202 	lsl.w	r2, r0, r2
 8006b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b8e:	bf00      	nop
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	e000e100 	.word	0xe000e100

08006ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db0a      	blt.n	8006bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	490c      	ldr	r1, [pc, #48]	; (8006bec <__NVIC_SetPriority+0x4c>)
 8006bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bbe:	0112      	lsls	r2, r2, #4
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bc8:	e00a      	b.n	8006be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	4908      	ldr	r1, [pc, #32]	; (8006bf0 <__NVIC_SetPriority+0x50>)
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
 8006bd2:	f003 030f 	and.w	r3, r3, #15
 8006bd6:	3b04      	subs	r3, #4
 8006bd8:	0112      	lsls	r2, r2, #4
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	440b      	add	r3, r1
 8006bde:	761a      	strb	r2, [r3, #24]
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	e000e100 	.word	0xe000e100
 8006bf0:	e000ed00 	.word	0xe000ed00

08006bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b089      	sub	sp, #36	; 0x24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c08:	69fb      	ldr	r3, [r7, #28]
 8006c0a:	f1c3 0307 	rsb	r3, r3, #7
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	bf28      	it	cs
 8006c12:	2304      	movcs	r3, #4
 8006c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	2b06      	cmp	r3, #6
 8006c1c:	d902      	bls.n	8006c24 <NVIC_EncodePriority+0x30>
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3b03      	subs	r3, #3
 8006c22:	e000      	b.n	8006c26 <NVIC_EncodePriority+0x32>
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c28:	f04f 32ff 	mov.w	r2, #4294967295
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c32:	43da      	mvns	r2, r3
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	401a      	ands	r2, r3
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	fa01 f303 	lsl.w	r3, r1, r3
 8006c46:	43d9      	mvns	r1, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c4c:	4313      	orrs	r3, r2
         );
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3724      	adds	r7, #36	; 0x24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c6c:	d301      	bcc.n	8006c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e00f      	b.n	8006c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c72:	4a0a      	ldr	r2, [pc, #40]	; (8006c9c <SysTick_Config+0x40>)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3b01      	subs	r3, #1
 8006c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c7a:	210f      	movs	r1, #15
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	f7ff ff8e 	bl	8006ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <SysTick_Config+0x40>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c8a:	4b04      	ldr	r3, [pc, #16]	; (8006c9c <SysTick_Config+0x40>)
 8006c8c:	2207      	movs	r2, #7
 8006c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3708      	adds	r7, #8
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	e000e010 	.word	0xe000e010

08006ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7ff ff29 	bl	8006b00 <__NVIC_SetPriorityGrouping>
}
 8006cae:	bf00      	nop
 8006cb0:	3708      	adds	r7, #8
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b086      	sub	sp, #24
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	60b9      	str	r1, [r7, #8]
 8006cc0:	607a      	str	r2, [r7, #4]
 8006cc2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006cc4:	f7ff ff40 	bl	8006b48 <__NVIC_GetPriorityGrouping>
 8006cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	68b9      	ldr	r1, [r7, #8]
 8006cce:	6978      	ldr	r0, [r7, #20]
 8006cd0:	f7ff ff90 	bl	8006bf4 <NVIC_EncodePriority>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7ff ff5f 	bl	8006ba0 <__NVIC_SetPriority>
}
 8006ce2:	bf00      	nop
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7ff ff33 	bl	8006b64 <__NVIC_EnableIRQ>
}
 8006cfe:	bf00      	nop
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b082      	sub	sp, #8
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f7ff ffa4 	bl	8006c5c <SysTick_Config>
 8006d14:	4603      	mov	r3, r0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3708      	adds	r7, #8
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d2e:	e14c      	b.n	8006fca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	2101      	movs	r1, #1
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 813e 	beq.w	8006fc4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	f003 0303 	and.w	r3, r3, #3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d005      	beq.n	8006d60 <HAL_GPIO_Init+0x40>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	f003 0303 	and.w	r3, r3, #3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d130      	bne.n	8006dc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	005b      	lsls	r3, r3, #1
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d70:	43db      	mvns	r3, r3
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	4013      	ands	r3, r2
 8006d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	68da      	ldr	r2, [r3, #12]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d96:	2201      	movs	r2, #1
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	43db      	mvns	r3, r3
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4013      	ands	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	091b      	lsrs	r3, r3, #4
 8006dac:	f003 0201 	and.w	r2, r3, #1
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	693a      	ldr	r2, [r7, #16]
 8006dc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f003 0303 	and.w	r3, r3, #3
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d017      	beq.n	8006dfe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	2203      	movs	r2, #3
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	43db      	mvns	r3, r3
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4013      	ands	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	693a      	ldr	r2, [r7, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d123      	bne.n	8006e52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	08da      	lsrs	r2, r3, #3
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3208      	adds	r2, #8
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	220f      	movs	r2, #15
 8006e22:	fa02 f303 	lsl.w	r3, r2, r3
 8006e26:	43db      	mvns	r3, r3
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	08da      	lsrs	r2, r3, #3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	3208      	adds	r2, #8
 8006e4c:	6939      	ldr	r1, [r7, #16]
 8006e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	2203      	movs	r2, #3
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	43db      	mvns	r3, r3
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	4013      	ands	r3, r2
 8006e68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	f003 0203 	and.w	r2, r3, #3
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8098 	beq.w	8006fc4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006e94:	4a54      	ldr	r2, [pc, #336]	; (8006fe8 <HAL_GPIO_Init+0x2c8>)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	089b      	lsrs	r3, r3, #2
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 0303 	and.w	r3, r3, #3
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	220f      	movs	r2, #15
 8006eac:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb0:	43db      	mvns	r3, r3
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006ebe:	d019      	beq.n	8006ef4 <HAL_GPIO_Init+0x1d4>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a4a      	ldr	r2, [pc, #296]	; (8006fec <HAL_GPIO_Init+0x2cc>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d013      	beq.n	8006ef0 <HAL_GPIO_Init+0x1d0>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a49      	ldr	r2, [pc, #292]	; (8006ff0 <HAL_GPIO_Init+0x2d0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d00d      	beq.n	8006eec <HAL_GPIO_Init+0x1cc>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	4a48      	ldr	r2, [pc, #288]	; (8006ff4 <HAL_GPIO_Init+0x2d4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d007      	beq.n	8006ee8 <HAL_GPIO_Init+0x1c8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a47      	ldr	r2, [pc, #284]	; (8006ff8 <HAL_GPIO_Init+0x2d8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d101      	bne.n	8006ee4 <HAL_GPIO_Init+0x1c4>
 8006ee0:	2304      	movs	r3, #4
 8006ee2:	e008      	b.n	8006ef6 <HAL_GPIO_Init+0x1d6>
 8006ee4:	2307      	movs	r3, #7
 8006ee6:	e006      	b.n	8006ef6 <HAL_GPIO_Init+0x1d6>
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e004      	b.n	8006ef6 <HAL_GPIO_Init+0x1d6>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e002      	b.n	8006ef6 <HAL_GPIO_Init+0x1d6>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <HAL_GPIO_Init+0x1d6>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	f002 0203 	and.w	r2, r2, #3
 8006efc:	0092      	lsls	r2, r2, #2
 8006efe:	4093      	lsls	r3, r2
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006f06:	4938      	ldr	r1, [pc, #224]	; (8006fe8 <HAL_GPIO_Init+0x2c8>)
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	089b      	lsrs	r3, r3, #2
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f14:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4013      	ands	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006f38:	4a30      	ldr	r2, [pc, #192]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006f3e:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	43db      	mvns	r3, r3
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006f5a:	693a      	ldr	r2, [r7, #16]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006f62:	4a26      	ldr	r2, [pc, #152]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006f68:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	43db      	mvns	r3, r3
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	4013      	ands	r3, r2
 8006f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d003      	beq.n	8006f8e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006f8e:	4a1b      	ldr	r2, [pc, #108]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006fbc:	4a0f      	ldr	r2, [pc, #60]	; (8006ffc <HAL_GPIO_Init+0x2dc>)
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f aeab 	bne.w	8006d30 <HAL_GPIO_Init+0x10>
  }
}
 8006fda:	bf00      	nop
 8006fdc:	bf00      	nop
 8006fde:	371c      	adds	r7, #28
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr
 8006fe8:	40010000 	.word	0x40010000
 8006fec:	48000400 	.word	0x48000400
 8006ff0:	48000800 	.word	0x48000800
 8006ff4:	48000c00 	.word	0x48000c00
 8006ff8:	48001000 	.word	0x48001000
 8006ffc:	58000800 	.word	0x58000800

08007000 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	460b      	mov	r3, r1
 800700a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	887b      	ldrh	r3, [r7, #2]
 8007012:	4013      	ands	r3, r2
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007018:	2301      	movs	r3, #1
 800701a:	73fb      	strb	r3, [r7, #15]
 800701c:	e001      	b.n	8007022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800701e:	2300      	movs	r3, #0
 8007020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007022:	7bfb      	ldrb	r3, [r7, #15]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
 800703c:	4613      	mov	r3, r2
 800703e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007040:	787b      	ldrb	r3, [r7, #1]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007046:	887a      	ldrh	r2, [r7, #2]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800704c:	e002      	b.n	8007054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800704e:	887a      	ldrh	r2, [r7, #2]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007072:	887a      	ldrh	r2, [r7, #2]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	4013      	ands	r3, r2
 8007078:	041a      	lsls	r2, r3, #16
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	43d9      	mvns	r1, r3
 800707e:	887b      	ldrh	r3, [r7, #2]
 8007080:	400b      	ands	r3, r1
 8007082:	431a      	orrs	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	619a      	str	r2, [r3, #24]
}
 8007088:	bf00      	nop
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	4603      	mov	r3, r0
 800709c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800709e:	4b08      	ldr	r3, [pc, #32]	; (80070c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	4013      	ands	r3, r2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d006      	beq.n	80070b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80070aa:	4a05      	ldr	r2, [pc, #20]	; (80070c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80070ac:	88fb      	ldrh	r3, [r7, #6]
 80070ae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80070b0:	88fb      	ldrh	r3, [r7, #6]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe f878 	bl	80051a8 <HAL_GPIO_EXTI_Callback>
  }
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	58000800 	.word	0x58000800

080070c4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80070ca:	4b0a      	ldr	r3, [pc, #40]	; (80070f4 <HAL_HSEM_IRQHandler+0x30>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80070d0:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <HAL_HSEM_IRQHandler+0x30>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	43db      	mvns	r3, r3
 80070d8:	4906      	ldr	r1, [pc, #24]	; (80070f4 <HAL_HSEM_IRQHandler+0x30>)
 80070da:	4013      	ands	r3, r2
 80070dc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80070de:	4a05      	ldr	r2, [pc, #20]	; (80070f4 <HAL_HSEM_IRQHandler+0x30>)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f807 	bl	80070f8 <HAL_HSEM_FreeCallback>
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	58001500 	.word	0x58001500

080070f8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8007100:	bf00      	nop
 8007102:	370c      	adds	r7, #12
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800710c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800710e:	b08b      	sub	sp, #44	; 0x2c
 8007110:	af06      	add	r7, sp, #24
 8007112:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e0cb      	b.n	80072b6 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d106      	bne.n	8007138 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fe fe8c 	bl	8005e50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2203      	movs	r2, #3
 800713c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4618      	mov	r0, r3
 8007146:	f004 fd87 	bl	800bc58 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
 800714e:	e040      	b.n	80071d2 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	4613      	mov	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	440b      	add	r3, r1
 8007160:	3301      	adds	r3, #1
 8007162:	2201      	movs	r2, #1
 8007164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	6879      	ldr	r1, [r7, #4]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	4613      	mov	r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	4413      	add	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	440b      	add	r3, r1
 8007176:	7bfa      	ldrb	r2, [r7, #15]
 8007178:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	1c5a      	adds	r2, r3, #1
 8007180:	4613      	mov	r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	4413      	add	r3, r2
 8007186:	00db      	lsls	r3, r3, #3
 8007188:	440b      	add	r3, r1
 800718a:	3303      	adds	r3, #3
 800718c:	2200      	movs	r2, #0
 800718e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007190:	7bfa      	ldrb	r2, [r7, #15]
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	00db      	lsls	r3, r3, #3
 800719c:	440b      	add	r3, r1
 800719e:	3338      	adds	r3, #56	; 0x38
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80071a4:	7bfa      	ldrb	r2, [r7, #15]
 80071a6:	6879      	ldr	r1, [r7, #4]
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	00db      	lsls	r3, r3, #3
 80071b0:	440b      	add	r3, r1
 80071b2:	333c      	adds	r3, #60	; 0x3c
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071b8:	7bfa      	ldrb	r2, [r7, #15]
 80071ba:	6879      	ldr	r1, [r7, #4]
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	440b      	add	r3, r1
 80071c6:	3340      	adds	r3, #64	; 0x40
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	3301      	adds	r3, #1
 80071d0:	73fb      	strb	r3, [r7, #15]
 80071d2:	7bfa      	ldrb	r2, [r7, #15]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d3b9      	bcc.n	8007150 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
 80071e0:	e044      	b.n	800726c <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80071e2:	7bfa      	ldrb	r2, [r7, #15]
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	440b      	add	r3, r1
 80071f0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80071f4:	2200      	movs	r2, #0
 80071f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80071f8:	7bfa      	ldrb	r2, [r7, #15]
 80071fa:	6879      	ldr	r1, [r7, #4]
 80071fc:	4613      	mov	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	00db      	lsls	r3, r3, #3
 8007204:	440b      	add	r3, r1
 8007206:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800720a:	7bfa      	ldrb	r2, [r7, #15]
 800720c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800720e:	7bfa      	ldrb	r2, [r7, #15]
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	440b      	add	r3, r1
 800721c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8007220:	2200      	movs	r2, #0
 8007222:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007224:	7bfa      	ldrb	r2, [r7, #15]
 8007226:	6879      	ldr	r1, [r7, #4]
 8007228:	4613      	mov	r3, r2
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	00db      	lsls	r3, r3, #3
 8007230:	440b      	add	r3, r1
 8007232:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800723a:	7bfa      	ldrb	r2, [r7, #15]
 800723c:	6879      	ldr	r1, [r7, #4]
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	00db      	lsls	r3, r3, #3
 8007246:	440b      	add	r3, r1
 8007248:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007250:	7bfa      	ldrb	r2, [r7, #15]
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	440b      	add	r3, r1
 800725e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	3301      	adds	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
 800726c:	7bfa      	ldrb	r2, [r7, #15]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	429a      	cmp	r2, r3
 8007274:	d3b5      	bcc.n	80071e2 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	687e      	ldr	r6, [r7, #4]
 800727e:	466d      	mov	r5, sp
 8007280:	f106 0410 	add.w	r4, r6, #16
 8007284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007286:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	602b      	str	r3, [r5, #0]
 800728c:	1d33      	adds	r3, r6, #4
 800728e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007290:	6838      	ldr	r0, [r7, #0]
 8007292:	f004 fcfc 	bl	800bc8e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2201      	movs	r2, #1
 80072a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d102      	bne.n	80072b4 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f805 	bl	80072be <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072be <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2201      	movs	r2, #1
 80072d0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	f043 0302 	orr.w	r3, r3, #2
 80072fc:	b29a      	uxth	r2, r3
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01d      	beq.n	8007360 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	791b      	ldrb	r3, [r3, #4]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7fe fcbc 	bl	8005cac <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	2201      	movs	r2, #1
 8007340:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689a      	ldr	r2, [r3, #8]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 8007350:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	711a      	strb	r2, [r3, #4]
 800735e:	e001      	b.n	8007364 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007370:	b480      	push	{r7}
 8007372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007374:	4b05      	ldr	r3, [pc, #20]	; (800738c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a04      	ldr	r2, [pc, #16]	; (800738c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800737a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800737e:	6013      	str	r3, [r2, #0]
}
 8007380:	bf00      	nop
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	58000400 	.word	0x58000400

08007390 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007394:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800739c:	4618      	mov	r0, r3
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	58000400 	.word	0x58000400

080073ac <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80073b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073be:	d101      	bne.n	80073c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80073c0:	2301      	movs	r3, #1
 80073c2:	e000      	b.n	80073c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80073d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e2:	6013      	str	r3, [r2, #0]
}
 80073e4:	bf00      	nop
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80073ee:	b480      	push	{r7}
 80073f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80073f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007400:	6013      	str	r3, [r2, #0]
}
 8007402:	bf00      	nop
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800740c:	b480      	push	{r7}
 800740e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800741a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800741e:	d101      	bne.n	8007424 <LL_RCC_HSE_IsReady+0x18>
 8007420:	2301      	movs	r3, #1
 8007422:	e000      	b.n	8007426 <LL_RCC_HSE_IsReady+0x1a>
 8007424:	2300      	movs	r3, #0
}
 8007426:	4618      	mov	r0, r3
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800743e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007442:	6013      	str	r3, [r2, #0]
}
 8007444:	bf00      	nop
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800744e:	b480      	push	{r7}
 8007450:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800745c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007460:	6013      	str	r3, [r2, #0]
}
 8007462:	bf00      	nop
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007470:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800747a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800747e:	d101      	bne.n	8007484 <LL_RCC_HSI_IsReady+0x18>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <LL_RCC_HSI_IsReady+0x1a>
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	061b      	lsls	r3, r3, #24
 80074a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80074aa:	4313      	orrs	r3, r2
 80074ac:	604b      	str	r3, [r1, #4]
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80074ba:	b480      	push	{r7}
 80074bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80074be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ca:	f043 0301 	orr.w	r3, r3, #1
 80074ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80074d2:	bf00      	nop
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80074e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074ec:	f023 0301 	bic.w	r3, r3, #1
 80074f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80074f4:	bf00      	nop
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80074fe:	b480      	push	{r7}
 8007500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007506:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800750a:	f003 0302 	and.w	r3, r3, #2
 800750e:	2b02      	cmp	r3, #2
 8007510:	d101      	bne.n	8007516 <LL_RCC_HSI48_IsReady+0x18>
 8007512:	2301      	movs	r3, #1
 8007514:	e000      	b.n	8007518 <LL_RCC_HSI48_IsReady+0x1a>
 8007516:	2300      	movs	r3, #0
}
 8007518:	4618      	mov	r0, r3
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8007522:	b480      	push	{r7}
 8007524:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800752a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800752e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007532:	f043 0301 	orr.w	r3, r3, #1
 8007536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800753a:	bf00      	nop
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800755c:	bf00      	nop
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8007566:	b480      	push	{r7}
 8007568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800756a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007576:	f043 0304 	orr.w	r3, r3, #4
 800757a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800757e:	bf00      	nop
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800758c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007598:	f023 0304 	bic.w	r3, r3, #4
 800759c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80075a0:	bf00      	nop
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80075aa:	b480      	push	{r7}
 80075ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80075ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b02      	cmp	r3, #2
 80075bc:	d101      	bne.n	80075c2 <LL_RCC_LSE_IsReady+0x18>
 80075be:	2301      	movs	r3, #1
 80075c0:	e000      	b.n	80075c4 <LL_RCC_LSE_IsReady+0x1a>
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80075ce:	b480      	push	{r7}
 80075d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80075d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075de:	f043 0301 	orr.w	r3, r3, #1
 80075e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80075e6:	bf00      	nop
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80075f0:	b480      	push	{r7}
 80075f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80075f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80075fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007600:	f023 0301 	bic.w	r3, r3, #1
 8007604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007608:	bf00      	nop
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8007612:	b480      	push	{r7}
 8007614:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8007616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800761a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b02      	cmp	r3, #2
 8007624:	d101      	bne.n	800762a <LL_RCC_LSI1_IsReady+0x18>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <LL_RCC_LSI1_IsReady+0x1a>
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8007636:	b480      	push	{r7}
 8007638:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800763a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007646:	f043 0304 	orr.w	r3, r3, #4
 800764a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800764e:	bf00      	nop
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8007658:	b480      	push	{r7}
 800765a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800765c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007668:	f023 0304 	bic.w	r3, r3, #4
 800766c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007670:	bf00      	nop
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800767a:	b480      	push	{r7}
 800767c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800767e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007686:	f003 0308 	and.w	r3, r3, #8
 800768a:	2b08      	cmp	r3, #8
 800768c:	d101      	bne.n	8007692 <LL_RCC_LSI2_IsReady+0x18>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <LL_RCC_LSI2_IsReady+0x1a>
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80076a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076ae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	021b      	lsls	r3, r3, #8
 80076b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80076d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	6013      	str	r3, [r2, #0]
}
 80076e0:	bf00      	nop
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80076ea:	b480      	push	{r7}
 80076ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80076ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	6013      	str	r3, [r2, #0]
}
 80076fe:	bf00      	nop
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8007708:	b480      	push	{r7}
 800770a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800770c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0302 	and.w	r3, r3, #2
 8007716:	2b02      	cmp	r3, #2
 8007718:	d101      	bne.n	800771e <LL_RCC_MSI_IsReady+0x16>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <LL_RCC_MSI_IsReady+0x18>
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800773c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4313      	orrs	r3, r2
 8007744:	600b      	str	r3, [r1, #0]
}
 8007746:	bf00      	nop
 8007748:	370c      	adds	r7, #12
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8007752:	b480      	push	{r7}
 8007754:	b083      	sub	sp, #12
 8007756:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007762:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2bb0      	cmp	r3, #176	; 0xb0
 8007768:	d901      	bls.n	800776e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800776a:	23b0      	movs	r3, #176	; 0xb0
 800776c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800776e:	687b      	ldr	r3, [r7, #4]
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007796:	4313      	orrs	r3, r2
 8007798:	604b      	str	r3, [r1, #4]
}
 800779a:	bf00      	nop
 800779c:	370c      	adds	r7, #12
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr

080077a6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b083      	sub	sp, #12
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80077ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	f023 0203 	bic.w	r2, r3, #3
 80077b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4313      	orrs	r3, r2
 80077c0:	608b      	str	r3, [r1, #8]
}
 80077c2:	bf00      	nop
 80077c4:	370c      	adds	r7, #12
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80077ce:	b480      	push	{r7}
 80077d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80077d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 030c 	and.w	r3, r3, #12
}
 80077dc:	4618      	mov	r0, r3
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80077ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4313      	orrs	r3, r2
 8007800:	608b      	str	r3, [r1, #8]
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800780e:	b480      	push	{r7}
 8007810:	b083      	sub	sp, #12
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8007816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800781a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800781e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007846:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800784a:	f023 020f 	bic.w	r2, r3, #15
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	091b      	lsrs	r3, r3, #4
 8007852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007856:	4313      	orrs	r3, r2
 8007858:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800787a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4313      	orrs	r3, r2
 8007882:	608b      	str	r3, [r1, #8]
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800789c:	689b      	ldr	r3, [r3, #8]
 800789e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80078a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4313      	orrs	r3, r2
 80078aa:	608b      	str	r3, [r1, #8]
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80078bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80078d0:	b480      	push	{r7}
 80078d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80078d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80078f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007912:	4618      	mov	r0, r3
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800792a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800792e:	6013      	str	r3, [r2, #0]
}
 8007930:	bf00      	nop
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800793a:	b480      	push	{r7}
 800793c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800793e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800794c:	6013      	str	r3, [r2, #0]
}
 800794e:	bf00      	nop
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800795c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007966:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800796a:	d101      	bne.n	8007970 <LL_RCC_PLL_IsReady+0x18>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <LL_RCC_PLL_IsReady+0x1a>
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800797c:	b480      	push	{r7}
 800797e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800798c:	4618      	mov	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007996:	b480      	push	{r7}
 8007998:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr

080079ae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80079ae:	b480      	push	{r7}
 80079b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80079b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80079bc:	4618      	mov	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80079c6:	b480      	push	{r7}
 80079c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80079ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f003 0303 	and.w	r3, r3, #3
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80079de:	b480      	push	{r7}
 80079e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80079e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f0:	d101      	bne.n	80079f6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80079f2:	2301      	movs	r3, #1
 80079f4:	e000      	b.n	80079f8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8007a02:	b480      	push	{r7}
 8007a04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a16:	d101      	bne.n	8007a1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	e000      	b.n	8007a1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a3c:	d101      	bne.n	8007a42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e000      	b.n	8007a44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a60:	d101      	bne.n	8007a66 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007a62:	2301      	movs	r3, #1
 8007a64:	e000      	b.n	8007a68 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007a72:	b480      	push	{r7}
 8007a74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a84:	d101      	bne.n	8007a8a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr
	...

08007a98 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b08d      	sub	sp, #52	; 0x34
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e363      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0320 	and.w	r3, r3, #32
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 808d 	beq.w	8007bd2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ab8:	f7ff fe89 	bl	80077ce <LL_RCC_GetSysClkSource>
 8007abc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007abe:	f7ff ff82 	bl	80079c6 <LL_RCC_PLL_GetMainSource>
 8007ac2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <HAL_RCC_OscConfig+0x3e>
 8007aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007acc:	2b0c      	cmp	r3, #12
 8007ace:	d147      	bne.n	8007b60 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d144      	bne.n	8007b60 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	69db      	ldr	r3, [r3, #28]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d101      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e347      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007ae6:	f7ff fe34 	bl	8007752 <LL_RCC_MSI_GetRange>
 8007aea:	4603      	mov	r3, r0
 8007aec:	429c      	cmp	r4, r3
 8007aee:	d914      	bls.n	8007b1a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 fd2f 	bl	8008558 <RCC_SetFlashLatencyFromMSIRange>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e336      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff fe0e 	bl	800772a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f7ff fe32 	bl	800777c <LL_RCC_MSI_SetCalibTrimming>
 8007b18:	e013      	b.n	8007b42 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fe03 	bl	800772a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6a1b      	ldr	r3, [r3, #32]
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7ff fe27 	bl	800777c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fd10 	bl	8008558 <RCC_SetFlashLatencyFromMSIRange>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e317      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007b42:	f000 fcc9 	bl	80084d8 <HAL_RCC_GetHCLKFreq>
 8007b46:	4603      	mov	r3, r0
 8007b48:	4aa4      	ldr	r2, [pc, #656]	; (8007ddc <HAL_RCC_OscConfig+0x344>)
 8007b4a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007b4c:	4ba4      	ldr	r3, [pc, #656]	; (8007de0 <HAL_RCC_OscConfig+0x348>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe ff6f 	bl	8006a34 <HAL_InitTick>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d039      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e308      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d01e      	beq.n	8007ba6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007b68:	f7ff fdb0 	bl	80076cc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007b6c:	f7fe ffb0 	bl	8006ad0 <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007b74:	f7fe ffac 	bl	8006ad0 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e2f5      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007b86:	f7ff fdbf 	bl	8007708 <LL_RCC_MSI_IsReady>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0f1      	beq.n	8007b74 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7ff fdc8 	bl	800772a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff fdec 	bl	800777c <LL_RCC_MSI_SetCalibTrimming>
 8007ba4:	e015      	b.n	8007bd2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007ba6:	f7ff fda0 	bl	80076ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007baa:	f7fe ff91 	bl	8006ad0 <HAL_GetTick>
 8007bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007bb2:	f7fe ff8d 	bl	8006ad0 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e2d6      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007bc4:	f7ff fda0 	bl	8007708 <LL_RCC_MSI_IsReady>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f1      	bne.n	8007bb2 <HAL_RCC_OscConfig+0x11a>
 8007bce:	e000      	b.n	8007bd2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007bd0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d047      	beq.n	8007c6e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bde:	f7ff fdf6 	bl	80077ce <LL_RCC_GetSysClkSource>
 8007be2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007be4:	f7ff feef 	bl	80079c6 <LL_RCC_PLL_GetMainSource>
 8007be8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	2b08      	cmp	r3, #8
 8007bee:	d005      	beq.n	8007bfc <HAL_RCC_OscConfig+0x164>
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b0c      	cmp	r3, #12
 8007bf4:	d108      	bne.n	8007c08 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d105      	bne.n	8007c08 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d134      	bne.n	8007c6e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e2b4      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c10:	d102      	bne.n	8007c18 <HAL_RCC_OscConfig+0x180>
 8007c12:	f7ff fbdd 	bl	80073d0 <LL_RCC_HSE_Enable>
 8007c16:	e001      	b.n	8007c1c <HAL_RCC_OscConfig+0x184>
 8007c18:	f7ff fbe9 	bl	80073ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d012      	beq.n	8007c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c24:	f7fe ff54 	bl	8006ad0 <HAL_GetTick>
 8007c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007c2a:	e008      	b.n	8007c3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c2c:	f7fe ff50 	bl	8006ad0 <HAL_GetTick>
 8007c30:	4602      	mov	r2, r0
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	1ad3      	subs	r3, r2, r3
 8007c36:	2b64      	cmp	r3, #100	; 0x64
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e299      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007c3e:	f7ff fbe5 	bl	800740c <LL_RCC_HSE_IsReady>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d0f1      	beq.n	8007c2c <HAL_RCC_OscConfig+0x194>
 8007c48:	e011      	b.n	8007c6e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4a:	f7fe ff41 	bl	8006ad0 <HAL_GetTick>
 8007c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007c50:	e008      	b.n	8007c64 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c52:	f7fe ff3d 	bl	8006ad0 <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b64      	cmp	r3, #100	; 0x64
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e286      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007c64:	f7ff fbd2 	bl	800740c <LL_RCC_HSE_IsReady>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f1      	bne.n	8007c52 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d04c      	beq.n	8007d14 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c7a:	f7ff fda8 	bl	80077ce <LL_RCC_GetSysClkSource>
 8007c7e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c80:	f7ff fea1 	bl	80079c6 <LL_RCC_PLL_GetMainSource>
 8007c84:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_OscConfig+0x200>
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2b0c      	cmp	r3, #12
 8007c90:	d10e      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d10b      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e266      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	691b      	ldr	r3, [r3, #16]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7ff fbf1 	bl	8007490 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007cae:	e031      	b.n	8007d14 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d019      	beq.n	8007cec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007cb8:	f7ff fbba 	bl	8007430 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cbc:	f7fe ff08 	bl	8006ad0 <HAL_GetTick>
 8007cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cc4:	f7fe ff04 	bl	8006ad0 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e24d      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007cd6:	f7ff fbc9 	bl	800746c <LL_RCC_HSI_IsReady>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0f1      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff fbd3 	bl	8007490 <LL_RCC_HSI_SetCalibTrimming>
 8007cea:	e013      	b.n	8007d14 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cec:	f7ff fbaf 	bl	800744e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7fe feee 	bl	8006ad0 <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007cf8:	f7fe feea 	bl	8006ad0 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e233      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007d0a:	f7ff fbaf 	bl	800746c <LL_RCC_HSI_IsReady>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1f1      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 80a3 	beq.w	8007e74 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d076      	beq.n	8007e24 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f003 0310 	and.w	r3, r3, #16
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d046      	beq.n	8007dd0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007d42:	f7ff fc66 	bl	8007612 <LL_RCC_LSI1_IsReady>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d113      	bne.n	8007d74 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007d4c:	f7ff fc3f 	bl	80075ce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007d50:	f7fe febe 	bl	8006ad0 <HAL_GetTick>
 8007d54:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007d56:	e008      	b.n	8007d6a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007d58:	f7fe feba 	bl	8006ad0 <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d901      	bls.n	8007d6a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e203      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007d6a:	f7ff fc52 	bl	8007612 <LL_RCC_LSI1_IsReady>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0f1      	beq.n	8007d58 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007d74:	f7ff fc5f 	bl	8007636 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fe feaa 	bl	8006ad0 <HAL_GetTick>
 8007d7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007d80:	f7fe fea6 	bl	8006ad0 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e1ef      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007d92:	f7ff fc72 	bl	800767a <LL_RCC_LSI2_IsReady>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0f1      	beq.n	8007d80 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7ff fc7c 	bl	800769e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007da6:	f7ff fc23 	bl	80075f0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007daa:	f7fe fe91 	bl	8006ad0 <HAL_GetTick>
 8007dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007db0:	e008      	b.n	8007dc4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007db2:	f7fe fe8d 	bl	8006ad0 <HAL_GetTick>
 8007db6:	4602      	mov	r2, r0
 8007db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d901      	bls.n	8007dc4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e1d6      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007dc4:	f7ff fc25 	bl	8007612 <LL_RCC_LSI1_IsReady>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1f1      	bne.n	8007db2 <HAL_RCC_OscConfig+0x31a>
 8007dce:	e051      	b.n	8007e74 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007dd0:	f7ff fbfd 	bl	80075ce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd4:	f7fe fe7c 	bl	8006ad0 <HAL_GetTick>
 8007dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007dda:	e00c      	b.n	8007df6 <HAL_RCC_OscConfig+0x35e>
 8007ddc:	2000000c 	.word	0x2000000c
 8007de0:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007de4:	f7fe fe74 	bl	8006ad0 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e1bd      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007df6:	f7ff fc0c 	bl	8007612 <LL_RCC_LSI1_IsReady>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0f1      	beq.n	8007de4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007e00:	f7ff fc2a 	bl	8007658 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007e04:	e008      	b.n	8007e18 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007e06:	f7fe fe63 	bl	8006ad0 <HAL_GetTick>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0e:	1ad3      	subs	r3, r2, r3
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	d901      	bls.n	8007e18 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007e14:	2303      	movs	r3, #3
 8007e16:	e1ac      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007e18:	f7ff fc2f 	bl	800767a <LL_RCC_LSI2_IsReady>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f1      	bne.n	8007e06 <HAL_RCC_OscConfig+0x36e>
 8007e22:	e027      	b.n	8007e74 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007e24:	f7ff fc18 	bl	8007658 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e28:	f7fe fe52 	bl	8006ad0 <HAL_GetTick>
 8007e2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007e30:	f7fe fe4e 	bl	8006ad0 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b03      	cmp	r3, #3
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e197      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007e42:	f7ff fc1a 	bl	800767a <LL_RCC_LSI2_IsReady>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f1      	bne.n	8007e30 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007e4c:	f7ff fbd0 	bl	80075f0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e50:	f7fe fe3e 	bl	8006ad0 <HAL_GetTick>
 8007e54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007e56:	e008      	b.n	8007e6a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007e58:	f7fe fe3a 	bl	8006ad0 <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e183      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007e6a:	f7ff fbd2 	bl	8007612 <LL_RCC_LSI1_IsReady>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1f1      	bne.n	8007e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d05b      	beq.n	8007f38 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e80:	4ba7      	ldr	r3, [pc, #668]	; (8008120 <HAL_RCC_OscConfig+0x688>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d114      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007e8c:	f7ff fa70 	bl	8007370 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e90:	f7fe fe1e 	bl	8006ad0 <HAL_GetTick>
 8007e94:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e98:	f7fe fe1a 	bl	8006ad0 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e163      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007eaa:	4b9d      	ldr	r3, [pc, #628]	; (8008120 <HAL_RCC_OscConfig+0x688>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0f0      	beq.n	8007e98 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d102      	bne.n	8007ec4 <HAL_RCC_OscConfig+0x42c>
 8007ebe:	f7ff fb30 	bl	8007522 <LL_RCC_LSE_Enable>
 8007ec2:	e00c      	b.n	8007ede <HAL_RCC_OscConfig+0x446>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b05      	cmp	r3, #5
 8007eca:	d104      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x43e>
 8007ecc:	f7ff fb4b 	bl	8007566 <LL_RCC_LSE_EnableBypass>
 8007ed0:	f7ff fb27 	bl	8007522 <LL_RCC_LSE_Enable>
 8007ed4:	e003      	b.n	8007ede <HAL_RCC_OscConfig+0x446>
 8007ed6:	f7ff fb35 	bl	8007544 <LL_RCC_LSE_Disable>
 8007eda:	f7ff fb55 	bl	8007588 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d014      	beq.n	8007f10 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ee6:	f7fe fdf3 	bl	8006ad0 <HAL_GetTick>
 8007eea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007eec:	e00a      	b.n	8007f04 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eee:	f7fe fdef 	bl	8006ad0 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d901      	bls.n	8007f04 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007f00:	2303      	movs	r3, #3
 8007f02:	e136      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007f04:	f7ff fb51 	bl	80075aa <LL_RCC_LSE_IsReady>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d0ef      	beq.n	8007eee <HAL_RCC_OscConfig+0x456>
 8007f0e:	e013      	b.n	8007f38 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f10:	f7fe fdde 	bl	8006ad0 <HAL_GetTick>
 8007f14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007f16:	e00a      	b.n	8007f2e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f18:	f7fe fdda 	bl	8006ad0 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d901      	bls.n	8007f2e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	e121      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007f2e:	f7ff fb3c 	bl	80075aa <LL_RCC_LSE_IsReady>
 8007f32:	4603      	mov	r3, r0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1ef      	bne.n	8007f18 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d02c      	beq.n	8007f9e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d014      	beq.n	8007f76 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f4c:	f7ff fab5 	bl	80074ba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f50:	f7fe fdbe 	bl	8006ad0 <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f58:	f7fe fdba 	bl	8006ad0 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e103      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007f6a:	f7ff fac8 	bl	80074fe <LL_RCC_HSI48_IsReady>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d0f1      	beq.n	8007f58 <HAL_RCC_OscConfig+0x4c0>
 8007f74:	e013      	b.n	8007f9e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f76:	f7ff fab1 	bl	80074dc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f7a:	f7fe fda9 	bl	8006ad0 <HAL_GetTick>
 8007f7e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007f80:	e008      	b.n	8007f94 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f82:	f7fe fda5 	bl	8006ad0 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d901      	bls.n	8007f94 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e0ee      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007f94:	f7ff fab3 	bl	80074fe <LL_RCC_HSI48_IsReady>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d1f1      	bne.n	8007f82 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	f000 80e4 	beq.w	8008170 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fa8:	f7ff fc11 	bl	80077ce <LL_RCC_GetSysClkSource>
 8007fac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	f040 80b4 	bne.w	8008128 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	f003 0203 	and.w	r2, r3, #3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d123      	bne.n	8008016 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d11c      	bne.n	8008016 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	0a1b      	lsrs	r3, r3, #8
 8007fe0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d114      	bne.n	8008016 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d10d      	bne.n	8008016 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008004:	429a      	cmp	r2, r3
 8008006:	d106      	bne.n	8008016 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008012:	429a      	cmp	r2, r3
 8008014:	d05d      	beq.n	80080d2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	2b0c      	cmp	r3, #12
 800801a:	d058      	beq.n	80080ce <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800801c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	e0a1      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800802e:	f7ff fc84 	bl	800793a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008032:	f7fe fd4d 	bl	8006ad0 <HAL_GetTick>
 8008036:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803a:	f7fe fd49 	bl	8006ad0 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e092      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800804c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1ef      	bne.n	800803a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800805a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800805e:	68da      	ldr	r2, [r3, #12]
 8008060:	4b30      	ldr	r3, [pc, #192]	; (8008124 <HAL_RCC_OscConfig+0x68c>)
 8008062:	4013      	ands	r3, r2
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800806c:	4311      	orrs	r1, r2
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008072:	0212      	lsls	r2, r2, #8
 8008074:	4311      	orrs	r1, r2
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800807a:	4311      	orrs	r1, r2
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008080:	4311      	orrs	r1, r2
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008086:	430a      	orrs	r2, r1
 8008088:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800808c:	4313      	orrs	r3, r2
 800808e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008090:	f7ff fc44 	bl	800791c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008094:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800809e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80080a4:	f7fe fd14 	bl	8006ad0 <HAL_GetTick>
 80080a8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080ac:	f7fe fd10 	bl	8006ad0 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e059      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d0ef      	beq.n	80080ac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80080cc:	e050      	b.n	8008170 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e04f      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d147      	bne.n	8008170 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80080e0:	f7ff fc1c 	bl	800791c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080f4:	f7fe fcec 	bl	8006ad0 <HAL_GetTick>
 80080f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080fa:	e008      	b.n	800810e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080fc:	f7fe fce8 	bl	8006ad0 <HAL_GetTick>
 8008100:	4602      	mov	r2, r0
 8008102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	2b02      	cmp	r3, #2
 8008108:	d901      	bls.n	800810e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800810a:	2303      	movs	r3, #3
 800810c:	e031      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800810e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d0ef      	beq.n	80080fc <HAL_RCC_OscConfig+0x664>
 800811c:	e028      	b.n	8008170 <HAL_RCC_OscConfig+0x6d8>
 800811e:	bf00      	nop
 8008120:	58000400 	.word	0x58000400
 8008124:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	2b0c      	cmp	r3, #12
 800812c:	d01e      	beq.n	800816c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800812e:	f7ff fc04 	bl	800793a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008132:	f7fe fccd 	bl	8006ad0 <HAL_GetTick>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008138:	e008      	b.n	800814c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800813a:	f7fe fcc9 	bl	8006ad0 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	2b02      	cmp	r3, #2
 8008146:	d901      	bls.n	800814c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e012      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800814c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1ef      	bne.n	800813a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800815a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008164:	4b05      	ldr	r3, [pc, #20]	; (800817c <HAL_RCC_OscConfig+0x6e4>)
 8008166:	4013      	ands	r3, r2
 8008168:	60cb      	str	r3, [r1, #12]
 800816a:	e001      	b.n	8008170 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e000      	b.n	8008172 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008170:	2300      	movs	r3, #0
}
 8008172:	4618      	mov	r0, r3
 8008174:	3734      	adds	r7, #52	; 0x34
 8008176:	46bd      	mov	sp, r7
 8008178:	bd90      	pop	{r4, r7, pc}
 800817a:	bf00      	nop
 800817c:	eefefffc 	.word	0xeefefffc

08008180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e12d      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008194:	4b98      	ldr	r3, [pc, #608]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0307 	and.w	r3, r3, #7
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	429a      	cmp	r2, r3
 80081a0:	d91b      	bls.n	80081da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081a2:	4b95      	ldr	r3, [pc, #596]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f023 0207 	bic.w	r2, r3, #7
 80081aa:	4993      	ldr	r1, [pc, #588]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081b2:	f7fe fc8d 	bl	8006ad0 <HAL_GetTick>
 80081b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081b8:	e008      	b.n	80081cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80081ba:	f7fe fc89 	bl	8006ad0 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	1ad3      	subs	r3, r2, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	d901      	bls.n	80081cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80081c8:	2303      	movs	r3, #3
 80081ca:	e111      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081cc:	4b8a      	ldr	r3, [pc, #552]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 0307 	and.w	r3, r3, #7
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d1ef      	bne.n	80081ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d016      	beq.n	8008214 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7ff fafb 	bl	80077e6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80081f0:	f7fe fc6e 	bl	8006ad0 <HAL_GetTick>
 80081f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80081f6:	e008      	b.n	800820a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80081f8:	f7fe fc6a 	bl	8006ad0 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d901      	bls.n	800820a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e0f2      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800820a:	f7ff fbe8 	bl	80079de <LL_RCC_IsActiveFlag_HPRE>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0f1      	beq.n	80081f8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0320 	and.w	r3, r3, #32
 800821c:	2b00      	cmp	r3, #0
 800821e:	d016      	beq.n	800824e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	4618      	mov	r0, r3
 8008226:	f7ff faf2 	bl	800780e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800822a:	f7fe fc51 	bl	8006ad0 <HAL_GetTick>
 800822e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008230:	e008      	b.n	8008244 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008232:	f7fe fc4d 	bl	8006ad0 <HAL_GetTick>
 8008236:	4602      	mov	r2, r0
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	1ad3      	subs	r3, r2, r3
 800823c:	2b02      	cmp	r3, #2
 800823e:	d901      	bls.n	8008244 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008240:	2303      	movs	r3, #3
 8008242:	e0d5      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008244:	f7ff fbdd 	bl	8007a02 <LL_RCC_IsActiveFlag_C2HPRE>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d0f1      	beq.n	8008232 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d016      	beq.n	8008288 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	4618      	mov	r0, r3
 8008260:	f7ff faeb 	bl	800783a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008264:	f7fe fc34 	bl	8006ad0 <HAL_GetTick>
 8008268:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800826a:	e008      	b.n	800827e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800826c:	f7fe fc30 	bl	8006ad0 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d901      	bls.n	800827e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e0b8      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800827e:	f7ff fbd3 	bl	8007a28 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0f1      	beq.n	800826c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	d016      	beq.n	80082c2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fae5 	bl	8007868 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800829e:	f7fe fc17 	bl	8006ad0 <HAL_GetTick>
 80082a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80082a4:	e008      	b.n	80082b8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80082a6:	f7fe fc13 	bl	8006ad0 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d901      	bls.n	80082b8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e09b      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80082b8:	f7ff fbc9 	bl	8007a4e <LL_RCC_IsActiveFlag_PPRE1>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0f1      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d017      	beq.n	80082fe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	00db      	lsls	r3, r3, #3
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7ff fadb 	bl	8007890 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80082da:	f7fe fbf9 	bl	8006ad0 <HAL_GetTick>
 80082de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80082e0:	e008      	b.n	80082f4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80082e2:	f7fe fbf5 	bl	8006ad0 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e07d      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80082f4:	f7ff fbbd 	bl	8007a72 <LL_RCC_IsActiveFlag_PPRE2>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d0f1      	beq.n	80082e2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b00      	cmp	r3, #0
 8008308:	d043      	beq.n	8008392 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d106      	bne.n	8008320 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008312:	f7ff f87b 	bl	800740c <LL_RCC_HSE_IsReady>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d11e      	bne.n	800835a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e067      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	2b03      	cmp	r3, #3
 8008326:	d106      	bne.n	8008336 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008328:	f7ff fb16 	bl	8007958 <LL_RCC_PLL_IsReady>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d113      	bne.n	800835a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e05c      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d106      	bne.n	800834c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800833e:	f7ff f9e3 	bl	8007708 <LL_RCC_MSI_IsReady>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d108      	bne.n	800835a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e051      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800834c:	f7ff f88e 	bl	800746c <LL_RCC_HSI_IsReady>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e04a      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fa21 	bl	80077a6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008364:	f7fe fbb4 	bl	8006ad0 <HAL_GetTick>
 8008368:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800836a:	e00a      	b.n	8008382 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800836c:	f7fe fbb0 	bl	8006ad0 <HAL_GetTick>
 8008370:	4602      	mov	r2, r0
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	f241 3288 	movw	r2, #5000	; 0x1388
 800837a:	4293      	cmp	r3, r2
 800837c:	d901      	bls.n	8008382 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800837e:	2303      	movs	r3, #3
 8008380:	e036      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008382:	f7ff fa24 	bl	80077ce <LL_RCC_GetSysClkSource>
 8008386:	4602      	mov	r2, r0
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	429a      	cmp	r2, r3
 8008390:	d1ec      	bne.n	800836c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008392:	4b19      	ldr	r3, [pc, #100]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d21b      	bcs.n	80083d8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083a0:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f023 0207 	bic.w	r2, r3, #7
 80083a8:	4913      	ldr	r1, [pc, #76]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b0:	f7fe fb8e 	bl	8006ad0 <HAL_GetTick>
 80083b4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083b6:	e008      	b.n	80083ca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80083b8:	f7fe fb8a 	bl	8006ad0 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e012      	b.n	80083f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ca:	4b0b      	ldr	r3, [pc, #44]	; (80083f8 <HAL_RCC_ClockConfig+0x278>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d1ef      	bne.n	80083b8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80083d8:	f000 f87e 	bl	80084d8 <HAL_RCC_GetHCLKFreq>
 80083dc:	4603      	mov	r3, r0
 80083de:	4a07      	ldr	r2, [pc, #28]	; (80083fc <HAL_RCC_ClockConfig+0x27c>)
 80083e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80083e2:	f7fe fb81 	bl	8006ae8 <HAL_GetTickPrio>
 80083e6:	4603      	mov	r3, r0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fb23 	bl	8006a34 <HAL_InitTick>
 80083ee:	4603      	mov	r3, r0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	58004000 	.word	0x58004000
 80083fc:	2000000c 	.word	0x2000000c

08008400 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008400:	b590      	push	{r4, r7, lr}
 8008402:	b085      	sub	sp, #20
 8008404:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008406:	f7ff f9e2 	bl	80077ce <LL_RCC_GetSysClkSource>
 800840a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008412:	f7ff f99e 	bl	8007752 <LL_RCC_MSI_GetRange>
 8008416:	4603      	mov	r3, r0
 8008418:	091b      	lsrs	r3, r3, #4
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	4a2b      	ldr	r2, [pc, #172]	; (80084cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8008420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008424:	60fb      	str	r3, [r7, #12]
 8008426:	e04b      	b.n	80084c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b04      	cmp	r3, #4
 800842c:	d102      	bne.n	8008434 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800842e:	4b28      	ldr	r3, [pc, #160]	; (80084d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008430:	60fb      	str	r3, [r7, #12]
 8008432:	e045      	b.n	80084c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b08      	cmp	r3, #8
 8008438:	d10a      	bne.n	8008450 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800843a:	f7fe ffb7 	bl	80073ac <LL_RCC_HSE_IsEnabledDiv2>
 800843e:	4603      	mov	r3, r0
 8008440:	2b01      	cmp	r3, #1
 8008442:	d102      	bne.n	800844a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008444:	4b22      	ldr	r3, [pc, #136]	; (80084d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	e03a      	b.n	80084c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800844a:	4b22      	ldr	r3, [pc, #136]	; (80084d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	e037      	b.n	80084c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008450:	f7ff fab9 	bl	80079c6 <LL_RCC_PLL_GetMainSource>
 8008454:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b02      	cmp	r3, #2
 800845a:	d003      	beq.n	8008464 <HAL_RCC_GetSysClockFreq+0x64>
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	2b03      	cmp	r3, #3
 8008460:	d003      	beq.n	800846a <HAL_RCC_GetSysClockFreq+0x6a>
 8008462:	e00d      	b.n	8008480 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008464:	4b1a      	ldr	r3, [pc, #104]	; (80084d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008466:	60bb      	str	r3, [r7, #8]
        break;
 8008468:	e015      	b.n	8008496 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800846a:	f7fe ff9f 	bl	80073ac <LL_RCC_HSE_IsEnabledDiv2>
 800846e:	4603      	mov	r3, r0
 8008470:	2b01      	cmp	r3, #1
 8008472:	d102      	bne.n	800847a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008474:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008476:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008478:	e00d      	b.n	8008496 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800847a:	4b16      	ldr	r3, [pc, #88]	; (80084d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800847c:	60bb      	str	r3, [r7, #8]
        break;
 800847e:	e00a      	b.n	8008496 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008480:	f7ff f967 	bl	8007752 <LL_RCC_MSI_GetRange>
 8008484:	4603      	mov	r3, r0
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	4a0f      	ldr	r2, [pc, #60]	; (80084cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800848e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008492:	60bb      	str	r3, [r7, #8]
        break;
 8008494:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008496:	f7ff fa71 	bl	800797c <LL_RCC_PLL_GetN>
 800849a:	4602      	mov	r2, r0
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	fb03 f402 	mul.w	r4, r3, r2
 80084a2:	f7ff fa84 	bl	80079ae <LL_RCC_PLL_GetDivider>
 80084a6:	4603      	mov	r3, r0
 80084a8:	091b      	lsrs	r3, r3, #4
 80084aa:	3301      	adds	r3, #1
 80084ac:	fbb4 f4f3 	udiv	r4, r4, r3
 80084b0:	f7ff fa71 	bl	8007996 <LL_RCC_PLL_GetR>
 80084b4:	4603      	mov	r3, r0
 80084b6:	0f5b      	lsrs	r3, r3, #29
 80084b8:	3301      	adds	r3, #1
 80084ba:	fbb4 f3f3 	udiv	r3, r4, r3
 80084be:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80084c0:	68fb      	ldr	r3, [r7, #12]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd90      	pop	{r4, r7, pc}
 80084ca:	bf00      	nop
 80084cc:	0800da64 	.word	0x0800da64
 80084d0:	00f42400 	.word	0x00f42400
 80084d4:	01e84800 	.word	0x01e84800

080084d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80084d8:	b598      	push	{r3, r4, r7, lr}
 80084da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80084dc:	f7ff ff90 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 80084e0:	4604      	mov	r4, r0
 80084e2:	f7ff f9e9 	bl	80078b8 <LL_RCC_GetAHBPrescaler>
 80084e6:	4603      	mov	r3, r0
 80084e8:	091b      	lsrs	r3, r3, #4
 80084ea:	f003 030f 	and.w	r3, r3, #15
 80084ee:	4a03      	ldr	r2, [pc, #12]	; (80084fc <HAL_RCC_GetHCLKFreq+0x24>)
 80084f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	bd98      	pop	{r3, r4, r7, pc}
 80084fc:	0800da04 	.word	0x0800da04

08008500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008500:	b598      	push	{r3, r4, r7, lr}
 8008502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8008504:	f7ff ffe8 	bl	80084d8 <HAL_RCC_GetHCLKFreq>
 8008508:	4604      	mov	r4, r0
 800850a:	f7ff f9ef 	bl	80078ec <LL_RCC_GetAPB1Prescaler>
 800850e:	4603      	mov	r3, r0
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	4a04      	ldr	r2, [pc, #16]	; (8008528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800851c:	f003 031f 	and.w	r3, r3, #31
 8008520:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008524:	4618      	mov	r0, r3
 8008526:	bd98      	pop	{r3, r4, r7, pc}
 8008528:	0800da44 	.word	0x0800da44

0800852c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800852c:	b598      	push	{r3, r4, r7, lr}
 800852e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008530:	f7ff ffd2 	bl	80084d8 <HAL_RCC_GetHCLKFreq>
 8008534:	4604      	mov	r4, r0
 8008536:	f7ff f9e5 	bl	8007904 <LL_RCC_GetAPB2Prescaler>
 800853a:	4603      	mov	r3, r0
 800853c:	0adb      	lsrs	r3, r3, #11
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	4a04      	ldr	r2, [pc, #16]	; (8008554 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008548:	f003 031f 	and.w	r3, r3, #31
 800854c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008550:	4618      	mov	r0, r3
 8008552:	bd98      	pop	{r3, r4, r7, pc}
 8008554:	0800da44 	.word	0x0800da44

08008558 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2bb0      	cmp	r3, #176	; 0xb0
 8008564:	d903      	bls.n	800856e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008566:	4b15      	ldr	r3, [pc, #84]	; (80085bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	e007      	b.n	800857e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	091b      	lsrs	r3, r3, #4
 8008572:	f003 030f 	and.w	r3, r3, #15
 8008576:	4a11      	ldr	r2, [pc, #68]	; (80085bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008578:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800857e:	f7ff f9a7 	bl	80078d0 <LL_RCC_GetAHB4Prescaler>
 8008582:	4603      	mov	r3, r0
 8008584:	091b      	lsrs	r3, r3, #4
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	4a0d      	ldr	r2, [pc, #52]	; (80085c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800858c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008590:	68fa      	ldr	r2, [r7, #12]
 8008592:	fbb2 f3f3 	udiv	r3, r2, r3
 8008596:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800859c:	fba2 2303 	umull	r2, r3, r2, r3
 80085a0:	0c9c      	lsrs	r4, r3, #18
 80085a2:	f7fe fef5 	bl	8007390 <HAL_PWREx_GetVoltageRange>
 80085a6:	4603      	mov	r3, r0
 80085a8:	4619      	mov	r1, r3
 80085aa:	4620      	mov	r0, r4
 80085ac:	f000 f80c 	bl	80085c8 <RCC_SetFlashLatency>
 80085b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3714      	adds	r7, #20
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd90      	pop	{r4, r7, pc}
 80085ba:	bf00      	nop
 80085bc:	0800da64 	.word	0x0800da64
 80085c0:	0800da04 	.word	0x0800da04
 80085c4:	431bde83 	.word	0x431bde83

080085c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80085c8:	b590      	push	{r4, r7, lr}
 80085ca:	b093      	sub	sp, #76	; 0x4c
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80085d2:	4b37      	ldr	r3, [pc, #220]	; (80086b0 <RCC_SetFlashLatency+0xe8>)
 80085d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80085d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80085de:	4a35      	ldr	r2, [pc, #212]	; (80086b4 <RCC_SetFlashLatency+0xec>)
 80085e0:	f107 031c 	add.w	r3, r7, #28
 80085e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80085e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80085ea:	4b33      	ldr	r3, [pc, #204]	; (80086b8 <RCC_SetFlashLatency+0xf0>)
 80085ec:	f107 040c 	add.w	r4, r7, #12
 80085f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80085f6:	2300      	movs	r3, #0
 80085f8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008600:	d11a      	bne.n	8008638 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008602:	2300      	movs	r3, #0
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
 8008606:	e013      	b.n	8008630 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	3348      	adds	r3, #72	; 0x48
 800860e:	443b      	add	r3, r7
 8008610:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d807      	bhi.n	800862a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800861a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	3348      	adds	r3, #72	; 0x48
 8008620:	443b      	add	r3, r7
 8008622:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008626:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8008628:	e020      	b.n	800866c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800862a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800862c:	3301      	adds	r3, #1
 800862e:	643b      	str	r3, [r7, #64]	; 0x40
 8008630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008632:	2b03      	cmp	r3, #3
 8008634:	d9e8      	bls.n	8008608 <RCC_SetFlashLatency+0x40>
 8008636:	e019      	b.n	800866c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008638:	2300      	movs	r3, #0
 800863a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800863c:	e013      	b.n	8008666 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800863e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	3348      	adds	r3, #72	; 0x48
 8008644:	443b      	add	r3, r7
 8008646:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	429a      	cmp	r2, r3
 800864e:	d807      	bhi.n	8008660 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	3348      	adds	r3, #72	; 0x48
 8008656:	443b      	add	r3, r7
 8008658:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800865c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800865e:	e005      	b.n	800866c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008662:	3301      	adds	r3, #1
 8008664:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008668:	2b02      	cmp	r3, #2
 800866a:	d9e8      	bls.n	800863e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800866c:	4b13      	ldr	r3, [pc, #76]	; (80086bc <RCC_SetFlashLatency+0xf4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f023 0207 	bic.w	r2, r3, #7
 8008674:	4911      	ldr	r1, [pc, #68]	; (80086bc <RCC_SetFlashLatency+0xf4>)
 8008676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008678:	4313      	orrs	r3, r2
 800867a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800867c:	f7fe fa28 	bl	8006ad0 <HAL_GetTick>
 8008680:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008682:	e008      	b.n	8008696 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008684:	f7fe fa24 	bl	8006ad0 <HAL_GetTick>
 8008688:	4602      	mov	r2, r0
 800868a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	2b02      	cmp	r3, #2
 8008690:	d901      	bls.n	8008696 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008692:	2303      	movs	r3, #3
 8008694:	e007      	b.n	80086a6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008696:	4b09      	ldr	r3, [pc, #36]	; (80086bc <RCC_SetFlashLatency+0xf4>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d1ef      	bne.n	8008684 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	374c      	adds	r7, #76	; 0x4c
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd90      	pop	{r4, r7, pc}
 80086ae:	bf00      	nop
 80086b0:	0800d9d8 	.word	0x0800d9d8
 80086b4:	0800d9e8 	.word	0x0800d9e8
 80086b8:	0800d9f4 	.word	0x0800d9f4
 80086bc:	58004000 	.word	0x58004000

080086c0 <LL_RCC_LSE_IsEnabled>:
{
 80086c0:	b480      	push	{r7}
 80086c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80086c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d101      	bne.n	80086d8 <LL_RCC_LSE_IsEnabled+0x18>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <LL_RCC_LSE_IsEnabled+0x1a>
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <LL_RCC_LSE_IsReady>:
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80086e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f0:	f003 0302 	and.w	r3, r3, #2
 80086f4:	2b02      	cmp	r3, #2
 80086f6:	d101      	bne.n	80086fc <LL_RCC_LSE_IsReady+0x18>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <LL_RCC_LSE_IsReady+0x1a>
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <LL_RCC_SetRFWKPClockSource>:
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800871c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4313      	orrs	r3, r2
 8008724:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <LL_RCC_SetSMPSClockSource>:
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800873c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008742:	f023 0203 	bic.w	r2, r3, #3
 8008746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4313      	orrs	r3, r2
 800874e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_RCC_SetSMPSPrescaler>:
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800876e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4313      	orrs	r3, r2
 8008776:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <LL_RCC_SetUSARTClockSource>:
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800878c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008794:	f023 0203 	bic.w	r2, r3, #3
 8008798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <LL_RCC_SetLPUARTClockSource>:
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80087b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <LL_RCC_SetI2CClockSource>:
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80087e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087e8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	091b      	lsrs	r3, r3, #4
 80087f0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80087f4:	43db      	mvns	r3, r3
 80087f6:	401a      	ands	r2, r3
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	011b      	lsls	r3, r3, #4
 80087fc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008800:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008804:	4313      	orrs	r3, r2
 8008806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <LL_RCC_SetLPTIMClockSource>:
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800881e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008822:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	0c1b      	lsrs	r3, r3, #16
 800882a:	041b      	lsls	r3, r3, #16
 800882c:	43db      	mvns	r3, r3
 800882e:	401a      	ands	r2, r3
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	041b      	lsls	r3, r3, #16
 8008834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <LL_RCC_SetSAIClockSource>:
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800885a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800885e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4313      	orrs	r3, r2
 8008866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <LL_RCC_SetRNGClockSource>:
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800887e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008886:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800888a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <LL_RCC_SetCLK48ClockSource>:
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80088aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4313      	orrs	r3, r2
 80088be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80088c2:	bf00      	nop
 80088c4:	370c      	adds	r7, #12
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr

080088ce <LL_RCC_SetUSBClockSource>:
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b082      	sub	sp, #8
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff ffe3 	bl	80088a2 <LL_RCC_SetCLK48ClockSource>
}
 80088dc:	bf00      	nop
 80088de:	3708      	adds	r7, #8
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <LL_RCC_SetADCClockSource>:
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80088ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80088f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	4313      	orrs	r3, r2
 8008900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr

08008910 <LL_RCC_SetRTCClockSource>:
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800891c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4313      	orrs	r3, r2
 800892c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <LL_RCC_GetRTCClockSource>:
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008948:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800894c:	4618      	mov	r0, r3
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <LL_RCC_ForceBackupDomainReset>:
{
 8008956:	b480      	push	{r7}
 8008958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800895a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800895e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008962:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800896a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800896e:	bf00      	nop
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800897c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800898c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008990:	bf00      	nop
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <LL_RCC_PLLSAI1_Enable>:
{
 800899a:	b480      	push	{r7}
 800899c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800899e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089ac:	6013      	str	r3, [r2, #0]
}
 80089ae:	bf00      	nop
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <LL_RCC_PLLSAI1_Disable>:
{
 80089b8:	b480      	push	{r7}
 80089ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80089bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80089c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ca:	6013      	str	r3, [r2, #0]
}
 80089cc:	bf00      	nop
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr

080089d6 <LL_RCC_PLLSAI1_IsReady>:
{
 80089d6:	b480      	push	{r7}
 80089d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80089da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089e8:	d101      	bne.n	80089ee <LL_RCC_PLLSAI1_IsReady+0x18>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e000      	b.n	80089f0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr

080089fa <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b088      	sub	sp, #32
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008a02:	2300      	movs	r3, #0
 8008a04:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008a06:	2300      	movs	r3, #0
 8008a08:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d034      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a1e:	d021      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008a20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008a24:	d81b      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a2a:	d01d      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a30:	d815      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00b      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008a36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3a:	d110      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a4a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008a4c:	e00d      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 f947 	bl	8008ce6 <RCCEx_PLLSAI1_ConfigNP>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008a5c:	e005      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	77fb      	strb	r3, [r7, #31]
        break;
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008a64:	bf00      	nop
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a6a:	7ffb      	ldrb	r3, [r7, #31]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d105      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7ff fee8 	bl	800884a <LL_RCC_SetSAIClockSource>
 8008a7a:	e001      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7c:	7ffb      	ldrb	r3, [r7, #31]
 8008a7e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d046      	beq.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008a8c:	f7ff ff56 	bl	800893c <LL_RCC_GetRTCClockSource>
 8008a90:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d03c      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008a9c:	f7fe fc68 	bl	8007370 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d105      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7ff ff30 	bl	8008910 <LL_RCC_SetRTCClockSource>
 8008ab0:	e02e      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008abc:	f7ff ff4b 	bl	8008956 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008ac0:	f7ff ff5a 	bl	8008978 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008adc:	f7ff fdf0 	bl	80086c0 <LL_RCC_LSE_IsEnabled>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d114      	bne.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ae6:	f7fd fff3 	bl	8006ad0 <HAL_GetTick>
 8008aea:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008aec:	e00b      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aee:	f7fd ffef 	bl	8006ad0 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d902      	bls.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	77fb      	strb	r3, [r7, #31]
              break;
 8008b04:	e004      	b.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008b06:	f7ff fded 	bl	80086e4 <LL_RCC_LSE_IsReady>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d1ee      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008b10:	7ffb      	ldrb	r3, [r7, #31]
 8008b12:	77bb      	strb	r3, [r7, #30]
 8008b14:	e001      	b.n	8008b1a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b16:	7ffb      	ldrb	r3, [r7, #31]
 8008b18:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	699b      	ldr	r3, [r3, #24]
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7ff fe2a 	bl	8008784 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0302 	and.w	r3, r3, #2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d004      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	69db      	ldr	r3, [r3, #28]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff fe35 	bl	80087b0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0310 	and.w	r3, r3, #16
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d004      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fe5d 	bl	8008816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f003 0320 	and.w	r3, r3, #32
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d004      	beq.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7ff fe52 	bl	8008816 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0304 	and.w	r3, r3, #4
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d004      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fe2a 	bl	80087dc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f003 0308 	and.w	r3, r3, #8
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d004      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7ff fe1f 	bl	80087dc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d022      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7ff fe8d 	bl	80088ce <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bbc:	d107      	bne.n	8008bce <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bcc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008bd6:	d10b      	bne.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 f8dd 	bl	8008d9c <RCCEx_PLLSAI1_ConfigNQ>
 8008be2:	4603      	mov	r3, r0
 8008be4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008be6:	7ffb      	ldrb	r3, [r7, #31]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008bec:	7ffb      	ldrb	r3, [r7, #31]
 8008bee:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d02b      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c04:	d008      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c0e:	d003      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff fe2a 	bl	8008876 <LL_RCC_SetRNGClockSource>
 8008c22:	e00a      	b.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c2c:	60fb      	str	r3, [r7, #12]
 8008c2e:	2000      	movs	r0, #0
 8008c30:	f7ff fe21 	bl	8008876 <LL_RCC_SetRNGClockSource>
 8008c34:	68f8      	ldr	r0, [r7, #12]
 8008c36:	f7ff fe34 	bl	80088a2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c3e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008c42:	d107      	bne.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d022      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7ff fe3d 	bl	80088e4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c72:	d107      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c82:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c8c:	d10b      	bne.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	3304      	adds	r3, #4
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f8dd 	bl	8008e52 <RCCEx_PLLSAI1_ConfigNR>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c9c:	7ffb      	ldrb	r3, [r7, #31]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008ca2:	7ffb      	ldrb	r3, [r7, #31]
 8008ca4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d004      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7ff fd26 	bl	8008708 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d009      	beq.n	8008cdc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7ff fd45 	bl	800875c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff fd2c 	bl	8008734 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008cdc:	7fbb      	ldrb	r3, [r7, #30]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3720      	adds	r7, #32
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008cf2:	f7ff fe61 	bl	80089b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cf6:	f7fd feeb 	bl	8006ad0 <HAL_GetTick>
 8008cfa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008cfc:	e009      	b.n	8008d12 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008cfe:	f7fd fee7 	bl	8006ad0 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d902      	bls.n	8008d12 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008d10:	e004      	b.n	8008d1c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d12:	f7ff fe60 	bl	80089d6 <LL_RCC_PLLSAI1_IsReady>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f0      	bne.n	8008cfe <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d137      	bne.n	8008d92 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	021b      	lsls	r3, r3, #8
 8008d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d36:	4313      	orrs	r3, r2
 8008d38:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008d50:	f7ff fe23 	bl	800899a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d54:	f7fd febc 	bl	8006ad0 <HAL_GetTick>
 8008d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d5a:	e009      	b.n	8008d70 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d5c:	f7fd feb8 	bl	8006ad0 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	2b02      	cmp	r3, #2
 8008d68:	d902      	bls.n	8008d70 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8008d6e:	e004      	b.n	8008d7a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d70:	f7ff fe31 	bl	80089d6 <LL_RCC_PLLSAI1_IsReady>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d1f0      	bne.n	8008d5c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d84:	691a      	ldr	r2, [r3, #16]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008da8:	f7ff fe06 	bl	80089b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008dac:	f7fd fe90 	bl	8006ad0 <HAL_GetTick>
 8008db0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008db2:	e009      	b.n	8008dc8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008db4:	f7fd fe8c 	bl	8006ad0 <HAL_GetTick>
 8008db8:	4602      	mov	r2, r0
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d902      	bls.n	8008dc8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008dc6:	e004      	b.n	8008dd2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008dc8:	f7ff fe05 	bl	80089d6 <LL_RCC_PLLSAI1_IsReady>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1f0      	bne.n	8008db4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d137      	bne.n	8008e48 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008dec:	4313      	orrs	r3, r2
 8008dee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e02:	4313      	orrs	r3, r2
 8008e04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008e06:	f7ff fdc8 	bl	800899a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e0a:	f7fd fe61 	bl	8006ad0 <HAL_GetTick>
 8008e0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e10:	e009      	b.n	8008e26 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e12:	f7fd fe5d 	bl	8006ad0 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d902      	bls.n	8008e26 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	73fb      	strb	r3, [r7, #15]
        break;
 8008e24:	e004      	b.n	8008e30 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e26:	f7ff fdd6 	bl	80089d6 <LL_RCC_PLLSAI1_IsReady>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d1f0      	bne.n	8008e12 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d108      	bne.n	8008e48 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e3a:	691a      	ldr	r2, [r3, #16]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008e44:	4313      	orrs	r3, r2
 8008e46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008e5e:	f7ff fdab 	bl	80089b8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e62:	f7fd fe35 	bl	8006ad0 <HAL_GetTick>
 8008e66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e68:	e009      	b.n	8008e7e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e6a:	f7fd fe31 	bl	8006ad0 <HAL_GetTick>
 8008e6e:	4602      	mov	r2, r0
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d902      	bls.n	8008e7e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008e78:	2303      	movs	r3, #3
 8008e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7c:	e004      	b.n	8008e88 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e7e:	f7ff fdaa 	bl	80089d6 <LL_RCC_PLLSAI1_IsReady>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1f0      	bne.n	8008e6a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d137      	bne.n	8008efe <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	021b      	lsls	r3, r3, #8
 8008e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eaa:	691b      	ldr	r3, [r3, #16]
 8008eac:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008ebc:	f7ff fd6d 	bl	800899a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ec0:	f7fd fe06 	bl	8006ad0 <HAL_GetTick>
 8008ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ec6:	e009      	b.n	8008edc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ec8:	f7fd fe02 	bl	8006ad0 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d902      	bls.n	8008edc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8008eda:	e004      	b.n	8008ee6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008edc:	f7ff fd7b 	bl	80089d6 <LL_RCC_PLLSAI1_IsReady>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	d1f0      	bne.n	8008ec8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d108      	bne.n	8008efe <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ef0:	691a      	ldr	r2, [r3, #16]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008efa:	4313      	orrs	r3, r2
 8008efc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e09f      	b.n	800905a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d106      	bne.n	8008f34 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f7fc fed0 	bl	8005cd4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2202      	movs	r2, #2
 8008f38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008f3c:	4b49      	ldr	r3, [pc, #292]	; (8009064 <HAL_RTC_Init+0x15c>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	f003 0310 	and.w	r3, r3, #16
 8008f44:	2b10      	cmp	r3, #16
 8008f46:	d07e      	beq.n	8009046 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	22ca      	movs	r2, #202	; 0xca
 8008f4e:	625a      	str	r2, [r3, #36]	; 0x24
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2253      	movs	r2, #83	; 0x53
 8008f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fac6 	bl	80094ea <RTC_EnterInitMode>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	22ff      	movs	r2, #255	; 0xff
 8008f6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2204      	movs	r2, #4
 8008f70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	73fb      	strb	r3, [r7, #15]
 8008f78:	e067      	b.n	800904a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	6812      	ldr	r2, [r2, #0]
 8008f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f8c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6899      	ldr	r1, [r3, #8]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68d2      	ldr	r2, [r2, #12]
 8008fb4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	6919      	ldr	r1, [r3, #16]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	041a      	lsls	r2, r3, #16
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68da      	ldr	r2, [r3, #12]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fd8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0203 	bic.w	r2, r2, #3
 8008fe8:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	69da      	ldr	r2, [r3, #28]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f003 0320 	and.w	r3, r3, #32
 800900c:	2b00      	cmp	r3, #0
 800900e:	d113      	bne.n	8009038 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fa44 	bl	800949e <HAL_RTC_WaitForSynchro>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00d      	beq.n	8009038 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	22ff      	movs	r2, #255	; 0xff
 8009022:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2204      	movs	r2, #4
 8009028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e010      	b.n	800905a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	22ff      	movs	r2, #255	; 0xff
 800903e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
 8009044:	e001      	b.n	800904a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8009058:	7bfb      	ldrb	r3, [r7, #15]
}
 800905a:	4618      	mov	r0, r3
 800905c:	3710      	adds	r7, #16
 800905e:	46bd      	mov	sp, r7
 8009060:	bd80      	pop	{r7, pc}
 8009062:	bf00      	nop
 8009064:	40002800 	.word	0x40002800

08009068 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009068:	b590      	push	{r4, r7, lr}
 800906a:	b087      	sub	sp, #28
 800906c:	af00      	add	r7, sp, #0
 800906e:	60f8      	str	r0, [r7, #12]
 8009070:	60b9      	str	r1, [r7, #8]
 8009072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 3020 	ldrb.w	r3, [r3, #32]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_RTC_SetTime+0x1a>
 800907e:	2302      	movs	r3, #2
 8009080:	e0b2      	b.n	80091e8 <HAL_RTC_SetTime+0x180>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2202      	movs	r2, #2
 800908e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d126      	bne.n	80090e6 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d102      	bne.n	80090ac <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	2200      	movs	r2, #0
 80090aa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 fa44 	bl	800953e <RTC_ByteToBcd2>
 80090b6:	4603      	mov	r3, r0
 80090b8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	785b      	ldrb	r3, [r3, #1]
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fa3d 	bl	800953e <RTC_ByteToBcd2>
 80090c4:	4603      	mov	r3, r0
 80090c6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80090c8:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	789b      	ldrb	r3, [r3, #2]
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fa35 	bl	800953e <RTC_ByteToBcd2>
 80090d4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80090d6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	78db      	ldrb	r3, [r3, #3]
 80090de:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80090e0:	4313      	orrs	r3, r2
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	e018      	b.n	8009118 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689b      	ldr	r3, [r3, #8]
 80090ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d102      	bne.n	80090fa <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	785b      	ldrb	r3, [r3, #1]
 8009104:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009106:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009108:	68ba      	ldr	r2, [r7, #8]
 800910a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800910c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	78db      	ldrb	r3, [r3, #3]
 8009112:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	22ca      	movs	r2, #202	; 0xca
 800911e:	625a      	str	r2, [r3, #36]	; 0x24
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2253      	movs	r2, #83	; 0x53
 8009126:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 f9de 	bl	80094ea <RTC_EnterInitMode>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00d      	beq.n	8009150 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	22ff      	movs	r2, #255	; 0xff
 800913a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2204      	movs	r2, #4
 8009140:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e04b      	b.n	80091e8 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800915a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800915e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	689a      	ldr	r2, [r3, #8]
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800916e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	6899      	ldr	r1, [r3, #8]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	691b      	ldr	r3, [r3, #16]
 800917e:	431a      	orrs	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	430a      	orrs	r2, r1
 8009186:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68da      	ldr	r2, [r3, #12]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009196:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0320 	and.w	r3, r3, #32
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d113      	bne.n	80091ce <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	f000 f979 	bl	800949e <HAL_RTC_WaitForSynchro>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00d      	beq.n	80091ce <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	22ff      	movs	r2, #255	; 0xff
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2204      	movs	r2, #4
 80091be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e00c      	b.n	80091e8 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	22ff      	movs	r2, #255	; 0xff
 80091d4:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80091e6:	2300      	movs	r3, #0
  }
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	371c      	adds	r7, #28
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd90      	pop	{r4, r7, pc}

080091f0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b086      	sub	sp, #24
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	60f8      	str	r0, [r7, #12]
 80091f8:	60b9      	str	r1, [r7, #8]
 80091fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800921e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009222:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	0c1b      	lsrs	r3, r3, #16
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800922e:	b2da      	uxtb	r2, r3
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	b2db      	uxtb	r3, r3
 800923a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800923e:	b2da      	uxtb	r2, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800924c:	b2da      	uxtb	r2, r3
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	b2db      	uxtb	r3, r3
 8009258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925c:	b2da      	uxtb	r2, r3
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d11a      	bne.n	800929e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	4618      	mov	r0, r3
 800926e:	f000 f986 	bl	800957e <RTC_Bcd2ToByte>
 8009272:	4603      	mov	r3, r0
 8009274:	461a      	mov	r2, r3
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	785b      	ldrb	r3, [r3, #1]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 f97d 	bl	800957e <RTC_Bcd2ToByte>
 8009284:	4603      	mov	r3, r0
 8009286:	461a      	mov	r2, r3
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	789b      	ldrb	r3, [r3, #2]
 8009290:	4618      	mov	r0, r3
 8009292:	f000 f974 	bl	800957e <RTC_Bcd2ToByte>
 8009296:	4603      	mov	r3, r0
 8009298:	461a      	mov	r2, r3
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d101      	bne.n	80092c2 <HAL_RTC_SetDate+0x1a>
 80092be:	2302      	movs	r3, #2
 80092c0:	e09c      	b.n	80093fc <HAL_RTC_SetDate+0x154>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2202      	movs	r2, #2
 80092ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d10e      	bne.n	80092f6 <HAL_RTC_SetDate+0x4e>
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	785b      	ldrb	r3, [r3, #1]
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d008      	beq.n	80092f6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	785b      	ldrb	r3, [r3, #1]
 80092e8:	f023 0310 	bic.w	r3, r3, #16
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	330a      	adds	r3, #10
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d11c      	bne.n	8009336 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	78db      	ldrb	r3, [r3, #3]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 f91c 	bl	800953e <RTC_ByteToBcd2>
 8009306:	4603      	mov	r3, r0
 8009308:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	785b      	ldrb	r3, [r3, #1]
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f915 	bl	800953e <RTC_ByteToBcd2>
 8009314:	4603      	mov	r3, r0
 8009316:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009318:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	789b      	ldrb	r3, [r3, #2]
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f90d 	bl	800953e <RTC_ByteToBcd2>
 8009324:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009326:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009330:	4313      	orrs	r3, r2
 8009332:	617b      	str	r3, [r7, #20]
 8009334:	e00e      	b.n	8009354 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	78db      	ldrb	r3, [r3, #3]
 800933a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	785b      	ldrb	r3, [r3, #1]
 8009340:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009342:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009344:	68ba      	ldr	r2, [r7, #8]
 8009346:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009348:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	781b      	ldrb	r3, [r3, #0]
 800934e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	22ca      	movs	r2, #202	; 0xca
 800935a:	625a      	str	r2, [r3, #36]	; 0x24
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2253      	movs	r2, #83	; 0x53
 8009362:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009364:	68f8      	ldr	r0, [r7, #12]
 8009366:	f000 f8c0 	bl	80094ea <RTC_EnterInitMode>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00d      	beq.n	800938c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	22ff      	movs	r2, #255	; 0xff
 8009376:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2204      	movs	r2, #4
 800937c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	e037      	b.n	80093fc <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009396:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800939a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68da      	ldr	r2, [r3, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d113      	bne.n	80093e2 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f000 f86f 	bl	800949e <HAL_RTC_WaitForSynchro>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00d      	beq.n	80093e2 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	22ff      	movs	r2, #255	; 0xff
 80093cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2204      	movs	r2, #4
 80093d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e00c      	b.n	80093fc <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	22ff      	movs	r2, #255	; 0xff
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80093fa:	2300      	movs	r3, #0
  }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	371c      	adds	r7, #28
 8009400:	46bd      	mov	sp, r7
 8009402:	bd90      	pop	{r4, r7, pc}

08009404 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b086      	sub	sp, #24
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800941a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800941e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	0c1b      	lsrs	r3, r3, #16
 8009424:	b2da      	uxtb	r2, r3
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	0a1b      	lsrs	r3, r3, #8
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 031f 	and.w	r3, r3, #31
 8009434:	b2da      	uxtb	r2, r3
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009442:	b2da      	uxtb	r2, r3
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	0b5b      	lsrs	r3, r3, #13
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 0307 	and.w	r3, r3, #7
 8009452:	b2da      	uxtb	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d11a      	bne.n	8009494 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	78db      	ldrb	r3, [r3, #3]
 8009462:	4618      	mov	r0, r3
 8009464:	f000 f88b 	bl	800957e <RTC_Bcd2ToByte>
 8009468:	4603      	mov	r3, r0
 800946a:	461a      	mov	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	785b      	ldrb	r3, [r3, #1]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f882 	bl	800957e <RTC_Bcd2ToByte>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	789b      	ldrb	r3, [r3, #2]
 8009486:	4618      	mov	r0, r3
 8009488:	f000 f879 	bl	800957e <RTC_Bcd2ToByte>
 800948c:	4603      	mov	r3, r0
 800948e:	461a      	mov	r2, r3
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b084      	sub	sp, #16
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	68da      	ldr	r2, [r3, #12]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80094b4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80094b6:	f7fd fb0b 	bl	8006ad0 <HAL_GetTick>
 80094ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094bc:	e009      	b.n	80094d2 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80094be:	f7fd fb07 	bl	8006ad0 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80094cc:	d901      	bls.n	80094d2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e007      	b.n	80094e2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	f003 0320 	and.w	r3, r3, #32
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d0ee      	beq.n	80094be <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b084      	sub	sp, #16
 80094ee:	af00      	add	r7, sp, #0
 80094f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d119      	bne.n	8009534 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f04f 32ff 	mov.w	r2, #4294967295
 8009508:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800950a:	f7fd fae1 	bl	8006ad0 <HAL_GetTick>
 800950e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009510:	e009      	b.n	8009526 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009512:	f7fd fadd 	bl	8006ad0 <HAL_GetTick>
 8009516:	4602      	mov	r2, r0
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	1ad3      	subs	r3, r2, r3
 800951c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009520:	d901      	bls.n	8009526 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e007      	b.n	8009536 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0ee      	beq.n	8009512 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	4603      	mov	r3, r0
 8009546:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800954c:	79fb      	ldrb	r3, [r7, #7]
 800954e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8009550:	e005      	b.n	800955e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3301      	adds	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8009558:	7afb      	ldrb	r3, [r7, #11]
 800955a:	3b0a      	subs	r3, #10
 800955c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 800955e:	7afb      	ldrb	r3, [r7, #11]
 8009560:	2b09      	cmp	r3, #9
 8009562:	d8f6      	bhi.n	8009552 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	b2db      	uxtb	r3, r3
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	b2da      	uxtb	r2, r3
 800956c:	7afb      	ldrb	r3, [r7, #11]
 800956e:	4313      	orrs	r3, r2
 8009570:	b2db      	uxtb	r3, r3
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800957e:	b480      	push	{r7}
 8009580:	b085      	sub	sp, #20
 8009582:	af00      	add	r7, sp, #0
 8009584:	4603      	mov	r3, r0
 8009586:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	091b      	lsrs	r3, r3, #4
 800958c:	b2db      	uxtb	r3, r3
 800958e:	461a      	mov	r2, r3
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	b2da      	uxtb	r2, r3
 800959e:	79fb      	ldrb	r3, [r7, #7]
 80095a0:	f003 030f 	and.w	r3, r3, #15
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	4413      	add	r3, r2
 80095a8:	b2db      	uxtb	r3, r3
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d101      	bne.n	80095c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095c4:	2301      	movs	r3, #1
 80095c6:	e095      	b.n	80096f4 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d108      	bne.n	80095e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095d8:	d009      	beq.n	80095ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	61da      	str	r2, [r3, #28]
 80095e0:	e005      	b.n	80095ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095fa:	b2db      	uxtb	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d106      	bne.n	800960e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7fc fb8f 	bl	8005d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2202      	movs	r2, #2
 8009612:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009624:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68db      	ldr	r3, [r3, #12]
 800962a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800962e:	d902      	bls.n	8009636 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009630:	2300      	movs	r3, #0
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	e002      	b.n	800963c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800963a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009644:	d007      	beq.n	8009656 <HAL_SPI_Init+0xa0>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800964e:	d002      	beq.n	8009656 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009666:	431a      	orrs	r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	431a      	orrs	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	699b      	ldr	r3, [r3, #24]
 8009680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009684:	431a      	orrs	r2, r3
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6a1b      	ldr	r3, [r3, #32]
 8009694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009698:	ea42 0103 	orr.w	r1, r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	0c1b      	lsrs	r3, r3, #16
 80096b2:	f003 0204 	and.w	r2, r3, #4
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ba:	f003 0310 	and.w	r3, r3, #16
 80096be:	431a      	orrs	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096c4:	f003 0308 	and.w	r3, r3, #8
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80096d2:	ea42 0103 	orr.w	r1, r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	430a      	orrs	r2, r1
 80096e2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2201      	movs	r2, #1
 80096ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	; 0x28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	607a      	str	r2, [r7, #4]
 8009708:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800970a:	2301      	movs	r3, #1
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800970e:	2300      	movs	r3, #0
 8009710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_SPI_TransmitReceive+0x26>
 800971e:	2302      	movs	r3, #2
 8009720:	e1fb      	b.n	8009b1a <HAL_SPI_TransmitReceive+0x41e>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800972a:	f7fd f9d1 	bl	8006ad0 <HAL_GetTick>
 800972e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009736:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800973e:	887b      	ldrh	r3, [r7, #2]
 8009740:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009742:	887b      	ldrh	r3, [r7, #2]
 8009744:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009746:	7efb      	ldrb	r3, [r7, #27]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d00e      	beq.n	800976a <HAL_SPI_TransmitReceive+0x6e>
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009752:	d106      	bne.n	8009762 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <HAL_SPI_TransmitReceive+0x66>
 800975c:	7efb      	ldrb	r3, [r7, #27]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d003      	beq.n	800976a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009762:	2302      	movs	r3, #2
 8009764:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009768:	e1cd      	b.n	8009b06 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d005      	beq.n	800977c <HAL_SPI_TransmitReceive+0x80>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d002      	beq.n	800977c <HAL_SPI_TransmitReceive+0x80>
 8009776:	887b      	ldrh	r3, [r7, #2]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d103      	bne.n	8009784 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009782:	e1c0      	b.n	8009b06 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b04      	cmp	r3, #4
 800978e:	d003      	beq.n	8009798 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2205      	movs	r2, #5
 8009794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	887a      	ldrh	r2, [r7, #2]
 80097a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	887a      	ldrh	r2, [r7, #2]
 80097b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	887a      	ldrh	r2, [r7, #2]
 80097be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	887a      	ldrh	r2, [r7, #2]
 80097c4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2200      	movs	r2, #0
 80097d0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	68db      	ldr	r3, [r3, #12]
 80097d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80097da:	d802      	bhi.n	80097e2 <HAL_SPI_TransmitReceive+0xe6>
 80097dc:	8a3b      	ldrh	r3, [r7, #16]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d908      	bls.n	80097f4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097f0:	605a      	str	r2, [r3, #4]
 80097f2:	e007      	b.n	8009804 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009802:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980e:	2b40      	cmp	r3, #64	; 0x40
 8009810:	d007      	beq.n	8009822 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009820:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800982a:	d97c      	bls.n	8009926 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <HAL_SPI_TransmitReceive+0x13e>
 8009834:	8a7b      	ldrh	r3, [r7, #18]
 8009836:	2b01      	cmp	r3, #1
 8009838:	d169      	bne.n	800990e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983e:	881a      	ldrh	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800984a:	1c9a      	adds	r2, r3, #2
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009854:	b29b      	uxth	r3, r3
 8009856:	3b01      	subs	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800985e:	e056      	b.n	800990e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b02      	cmp	r3, #2
 800986c:	d11b      	bne.n	80098a6 <HAL_SPI_TransmitReceive+0x1aa>
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009872:	b29b      	uxth	r3, r3
 8009874:	2b00      	cmp	r3, #0
 8009876:	d016      	beq.n	80098a6 <HAL_SPI_TransmitReceive+0x1aa>
 8009878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987a:	2b01      	cmp	r3, #1
 800987c:	d113      	bne.n	80098a6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	881a      	ldrh	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	1c9a      	adds	r2, r3, #2
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009898:	b29b      	uxth	r3, r3
 800989a:	3b01      	subs	r3, #1
 800989c:	b29a      	uxth	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	f003 0301 	and.w	r3, r3, #1
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d11c      	bne.n	80098ee <HAL_SPI_TransmitReceive+0x1f2>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d016      	beq.n	80098ee <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68da      	ldr	r2, [r3, #12]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ca:	b292      	uxth	r2, r2
 80098cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098d2:	1c9a      	adds	r2, r3, #2
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80098ea:	2301      	movs	r3, #1
 80098ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80098ee:	f7fd f8ef 	bl	8006ad0 <HAL_GetTick>
 80098f2:	4602      	mov	r2, r0
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	1ad3      	subs	r3, r2, r3
 80098f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098fa:	429a      	cmp	r2, r3
 80098fc:	d807      	bhi.n	800990e <HAL_SPI_TransmitReceive+0x212>
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d003      	beq.n	800990e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800990c:	e0fb      	b.n	8009b06 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009912:	b29b      	uxth	r3, r3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1a3      	bne.n	8009860 <HAL_SPI_TransmitReceive+0x164>
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800991e:	b29b      	uxth	r3, r3
 8009920:	2b00      	cmp	r3, #0
 8009922:	d19d      	bne.n	8009860 <HAL_SPI_TransmitReceive+0x164>
 8009924:	e0df      	b.n	8009ae6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d003      	beq.n	8009936 <HAL_SPI_TransmitReceive+0x23a>
 800992e:	8a7b      	ldrh	r3, [r7, #18]
 8009930:	2b01      	cmp	r3, #1
 8009932:	f040 80cb 	bne.w	8009acc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800993a:	b29b      	uxth	r3, r3
 800993c:	2b01      	cmp	r3, #1
 800993e:	d912      	bls.n	8009966 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009944:	881a      	ldrh	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009950:	1c9a      	adds	r2, r3, #2
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800995a:	b29b      	uxth	r3, r3
 800995c:	3b02      	subs	r3, #2
 800995e:	b29a      	uxth	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009964:	e0b2      	b.n	8009acc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	330c      	adds	r3, #12
 8009970:	7812      	ldrb	r2, [r2, #0]
 8009972:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009982:	b29b      	uxth	r3, r3
 8009984:	3b01      	subs	r3, #1
 8009986:	b29a      	uxth	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800998c:	e09e      	b.n	8009acc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	2b02      	cmp	r3, #2
 800999a:	d134      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x30a>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d02f      	beq.n	8009a06 <HAL_SPI_TransmitReceive+0x30a>
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d12c      	bne.n	8009a06 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d912      	bls.n	80099dc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ba:	881a      	ldrh	r2, [r3, #0]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c6:	1c9a      	adds	r2, r3, #2
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	3b02      	subs	r3, #2
 80099d4:	b29a      	uxth	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80099da:	e012      	b.n	8009a02 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	330c      	adds	r3, #12
 80099e6:	7812      	ldrb	r2, [r2, #0]
 80099e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	1c5a      	adds	r2, r3, #1
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	3b01      	subs	r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a02:	2300      	movs	r3, #0
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d148      	bne.n	8009aa6 <HAL_SPI_TransmitReceive+0x3aa>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d042      	beq.n	8009aa6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d923      	bls.n	8009a74 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a36:	b292      	uxth	r2, r2
 8009a38:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3e:	1c9a      	adds	r2, r3, #2
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	3b02      	subs	r3, #2
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d81f      	bhi.n	8009aa2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a70:	605a      	str	r2, [r3, #4]
 8009a72:	e016      	b.n	8009aa2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f103 020c 	add.w	r2, r3, #12
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a80:	7812      	ldrb	r2, [r2, #0]
 8009a82:	b2d2      	uxtb	r2, r2
 8009a84:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009aa6:	f7fd f813 	bl	8006ad0 <HAL_GetTick>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	1ad3      	subs	r3, r2, r3
 8009ab0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d803      	bhi.n	8009abe <HAL_SPI_TransmitReceive+0x3c2>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d102      	bne.n	8009ac4 <HAL_SPI_TransmitReceive+0x3c8>
 8009abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009aca:	e01c      	b.n	8009b06 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f47f af5b 	bne.w	800998e <HAL_SPI_TransmitReceive+0x292>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	f47f af54 	bne.w	800998e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ae6:	69fa      	ldr	r2, [r7, #28]
 8009ae8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009aea:	68f8      	ldr	r0, [r7, #12]
 8009aec:	f000 f938 	bl	8009d60 <SPI_EndRxTxTransaction>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d006      	beq.n	8009b04 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2220      	movs	r2, #32
 8009b00:	661a      	str	r2, [r3, #96]	; 0x60
 8009b02:	e000      	b.n	8009b06 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009b04:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3728      	adds	r7, #40	; 0x28
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
	...

08009b24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	603b      	str	r3, [r7, #0]
 8009b30:	4613      	mov	r3, r2
 8009b32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009b34:	f7fc ffcc 	bl	8006ad0 <HAL_GetTick>
 8009b38:	4602      	mov	r2, r0
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	1a9b      	subs	r3, r3, r2
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	4413      	add	r3, r2
 8009b42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009b44:	f7fc ffc4 	bl	8006ad0 <HAL_GetTick>
 8009b48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009b4a:	4b39      	ldr	r3, [pc, #228]	; (8009c30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	015b      	lsls	r3, r3, #5
 8009b50:	0d1b      	lsrs	r3, r3, #20
 8009b52:	69fa      	ldr	r2, [r7, #28]
 8009b54:	fb02 f303 	mul.w	r3, r2, r3
 8009b58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b5a:	e054      	b.n	8009c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b62:	d050      	beq.n	8009c06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b64:	f7fc ffb4 	bl	8006ad0 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	69bb      	ldr	r3, [r7, #24]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	69fa      	ldr	r2, [r7, #28]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d902      	bls.n	8009b7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d13d      	bne.n	8009bf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b92:	d111      	bne.n	8009bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b9c:	d004      	beq.n	8009ba8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ba6:	d107      	bne.n	8009bb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc0:	d10f      	bne.n	8009be2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bd0:	601a      	str	r2, [r3, #0]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e017      	b.n	8009c26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	689a      	ldr	r2, [r3, #8]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	bf0c      	ite	eq
 8009c16:	2301      	moveq	r3, #1
 8009c18:	2300      	movne	r3, #0
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	79fb      	ldrb	r3, [r7, #7]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d19b      	bne.n	8009b5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	2000000c 	.word	0x2000000c

08009c34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	607a      	str	r2, [r7, #4]
 8009c40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009c46:	f7fc ff43 	bl	8006ad0 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	1a9b      	subs	r3, r3, r2
 8009c50:	683a      	ldr	r2, [r7, #0]
 8009c52:	4413      	add	r3, r2
 8009c54:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009c56:	f7fc ff3b 	bl	8006ad0 <HAL_GetTick>
 8009c5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	330c      	adds	r3, #12
 8009c62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c64:	4b3d      	ldr	r3, [pc, #244]	; (8009d5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	4613      	mov	r3, r2
 8009c6a:	009b      	lsls	r3, r3, #2
 8009c6c:	4413      	add	r3, r2
 8009c6e:	00da      	lsls	r2, r3, #3
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	0d1b      	lsrs	r3, r3, #20
 8009c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c76:	fb02 f303 	mul.w	r3, r2, r3
 8009c7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c7c:	e060      	b.n	8009d40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009c84:	d107      	bne.n	8009c96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d104      	bne.n	8009c96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c9c:	d050      	beq.n	8009d40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c9e:	f7fc ff17 	bl	8006ad0 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d902      	bls.n	8009cb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d13d      	bne.n	8009d30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cc2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ccc:	d111      	bne.n	8009cf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	689b      	ldr	r3, [r3, #8]
 8009cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cd6:	d004      	beq.n	8009ce2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ce0:	d107      	bne.n	8009cf2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681a      	ldr	r2, [r3, #0]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cf0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cfa:	d10f      	bne.n	8009d1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d0a:	601a      	str	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e010      	b.n	8009d52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d101      	bne.n	8009d3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689a      	ldr	r2, [r3, #8]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	4013      	ands	r3, r2
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d196      	bne.n	8009c7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3728      	adds	r7, #40	; 0x28
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	2000000c 	.word	0x2000000c

08009d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af02      	add	r7, sp, #8
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f7ff ff5b 	bl	8009c34 <SPI_WaitFifoStateUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d007      	beq.n	8009d94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d88:	f043 0220 	orr.w	r2, r3, #32
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e027      	b.n	8009de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2180      	movs	r1, #128	; 0x80
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff fec0 	bl	8009b24 <SPI_WaitFlagStateUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dae:	f043 0220 	orr.w	r2, r3, #32
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e014      	b.n	8009de4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	9300      	str	r3, [sp, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff ff34 	bl	8009c34 <SPI_WaitFifoStateUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dd6:	f043 0220 	orr.w	r2, r3, #32
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e000      	b.n	8009de4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e054      	b.n	8009ea8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d111      	bne.n	8009e2e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 ff68 	bl	800ace8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d102      	bne.n	8009e26 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a23      	ldr	r2, [pc, #140]	; (8009eb0 <HAL_TIM_Base_Init+0xc4>)
 8009e24:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2202      	movs	r2, #2
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	4619      	mov	r1, r3
 8009e40:	4610      	mov	r0, r2
 8009e42:	f000 fbd3 	bl	800a5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2201      	movs	r2, #1
 8009e4a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2201      	movs	r2, #1
 8009e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3708      	adds	r7, #8
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	08005e19 	.word	0x08005e19

08009eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b085      	sub	sp, #20
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d001      	beq.n	8009ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	e036      	b.n	8009f3a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2202      	movs	r2, #2
 8009ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f042 0201 	orr.w	r2, r2, #1
 8009ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a17      	ldr	r2, [pc, #92]	; (8009f48 <HAL_TIM_Base_Start_IT+0x94>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d004      	beq.n	8009ef8 <HAL_TIM_Base_Start_IT+0x44>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ef6:	d115      	bne.n	8009f24 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <HAL_TIM_Base_Start_IT+0x98>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2b06      	cmp	r3, #6
 8009f08:	d015      	beq.n	8009f36 <HAL_TIM_Base_Start_IT+0x82>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f10:	d011      	beq.n	8009f36 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0201 	orr.w	r2, r2, #1
 8009f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f22:	e008      	b.n	8009f36 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f042 0201 	orr.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	e000      	b.n	8009f38 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	40012c00 	.word	0x40012c00
 8009f4c:	00010007 	.word	0x00010007

08009f50 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d101      	bne.n	8009f62 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e054      	b.n	800a00c <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f68:	b2db      	uxtb	r3, r3
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d111      	bne.n	8009f92 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 feb6 	bl	800ace8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d102      	bne.n	8009f8a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a23      	ldr	r2, [pc, #140]	; (800a014 <HAL_TIM_OC_Init+0xc4>)
 8009f88:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2202      	movs	r2, #2
 8009f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	f000 fb21 	bl	800a5ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2201      	movs	r2, #1
 8009fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	0800a019 	.word	0x0800a019

0800a018 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b02      	cmp	r3, #2
 800a040:	d128      	bne.n	800a094 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b02      	cmp	r3, #2
 800a04e:	d121      	bne.n	800a094 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0202 	mvn.w	r2, #2
 800a058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d005      	beq.n	800a07a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	4798      	blx	r3
 800a078:	e009      	b.n	800a08e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d128      	bne.n	800a0f4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b04      	cmp	r3, #4
 800a0ae:	d121      	bne.n	800a0f4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f06f 0204 	mvn.w	r2, #4
 800a0b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2202      	movs	r2, #2
 800a0be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d005      	beq.n	800a0da <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	4798      	blx	r3
 800a0d8:	e009      	b.n	800a0ee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	f003 0308 	and.w	r3, r3, #8
 800a0fe:	2b08      	cmp	r3, #8
 800a100:	d128      	bne.n	800a154 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68db      	ldr	r3, [r3, #12]
 800a108:	f003 0308 	and.w	r3, r3, #8
 800a10c:	2b08      	cmp	r3, #8
 800a10e:	d121      	bne.n	800a154 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f06f 0208 	mvn.w	r2, #8
 800a118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2204      	movs	r2, #4
 800a11e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	69db      	ldr	r3, [r3, #28]
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d005      	beq.n	800a13a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
 800a138:	e009      	b.n	800a14e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f003 0310 	and.w	r3, r3, #16
 800a15e:	2b10      	cmp	r3, #16
 800a160:	d128      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f003 0310 	and.w	r3, r3, #16
 800a16c:	2b10      	cmp	r3, #16
 800a16e:	d121      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f06f 0210 	mvn.w	r2, #16
 800a178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2208      	movs	r2, #8
 800a17e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	69db      	ldr	r3, [r3, #28]
 800a186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d005      	beq.n	800a19a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	4798      	blx	r3
 800a198:	e009      	b.n	800a1ae <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d110      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d109      	bne.n	800a1e4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f06f 0201 	mvn.w	r2, #1
 800a1d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ee:	2b80      	cmp	r3, #128	; 0x80
 800a1f0:	d110      	bne.n	800a214 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1fc:	2b80      	cmp	r3, #128	; 0x80
 800a1fe:	d109      	bne.n	800a214 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	691b      	ldr	r3, [r3, #16]
 800a21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a222:	d110      	bne.n	800a246 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a22e:	2b80      	cmp	r3, #128	; 0x80
 800a230:	d109      	bne.n	800a246 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a250:	2b40      	cmp	r3, #64	; 0x40
 800a252:	d110      	bne.n	800a276 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25e:	2b40      	cmp	r3, #64	; 0x40
 800a260:	d109      	bne.n	800a276 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	f003 0320 	and.w	r3, r3, #32
 800a280:	2b20      	cmp	r3, #32
 800a282:	d110      	bne.n	800a2a6 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68db      	ldr	r3, [r3, #12]
 800a28a:	f003 0320 	and.w	r3, r3, #32
 800a28e:	2b20      	cmp	r3, #32
 800a290:	d109      	bne.n	800a2a6 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f06f 0220 	mvn.w	r2, #32
 800a29a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2a6:	bf00      	nop
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}
	...

0800a2b0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d101      	bne.n	800a2ce <HAL_TIM_OC_ConfigChannel+0x1e>
 800a2ca:	2302      	movs	r3, #2
 800a2cc:	e066      	b.n	800a39c <HAL_TIM_OC_ConfigChannel+0xec>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2b14      	cmp	r3, #20
 800a2da:	d857      	bhi.n	800a38c <HAL_TIM_OC_ConfigChannel+0xdc>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a339 	.word	0x0800a339
 800a2e8:	0800a38d 	.word	0x0800a38d
 800a2ec:	0800a38d 	.word	0x0800a38d
 800a2f0:	0800a38d 	.word	0x0800a38d
 800a2f4:	0800a347 	.word	0x0800a347
 800a2f8:	0800a38d 	.word	0x0800a38d
 800a2fc:	0800a38d 	.word	0x0800a38d
 800a300:	0800a38d 	.word	0x0800a38d
 800a304:	0800a355 	.word	0x0800a355
 800a308:	0800a38d 	.word	0x0800a38d
 800a30c:	0800a38d 	.word	0x0800a38d
 800a310:	0800a38d 	.word	0x0800a38d
 800a314:	0800a363 	.word	0x0800a363
 800a318:	0800a38d 	.word	0x0800a38d
 800a31c:	0800a38d 	.word	0x0800a38d
 800a320:	0800a38d 	.word	0x0800a38d
 800a324:	0800a371 	.word	0x0800a371
 800a328:	0800a38d 	.word	0x0800a38d
 800a32c:	0800a38d 	.word	0x0800a38d
 800a330:	0800a38d 	.word	0x0800a38d
 800a334:	0800a37f 	.word	0x0800a37f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68b9      	ldr	r1, [r7, #8]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f9b8 	bl	800a6b4 <TIM_OC1_SetConfig>
      break;
 800a344:	e025      	b.n	800a392 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	68b9      	ldr	r1, [r7, #8]
 800a34c:	4618      	mov	r0, r3
 800a34e:	f000 fa2d 	bl	800a7ac <TIM_OC2_SetConfig>
      break;
 800a352:	e01e      	b.n	800a392 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68b9      	ldr	r1, [r7, #8]
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 faa0 	bl	800a8a0 <TIM_OC3_SetConfig>
      break;
 800a360:	e017      	b.n	800a392 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68b9      	ldr	r1, [r7, #8]
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 fb11 	bl	800a990 <TIM_OC4_SetConfig>
      break;
 800a36e:	e010      	b.n	800a392 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68b9      	ldr	r1, [r7, #8]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fb68 	bl	800aa4c <TIM_OC5_SetConfig>
      break;
 800a37c:	e009      	b.n	800a392 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68b9      	ldr	r1, [r7, #8]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fbb9 	bl	800aafc <TIM_OC6_SetConfig>
      break;
 800a38a:	e002      	b.n	800a392 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	75fb      	strb	r3, [r7, #23]
      break;
 800a390:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a39a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d101      	bne.n	800a3c0 <HAL_TIM_ConfigClockSource+0x1c>
 800a3bc:	2302      	movs	r3, #2
 800a3be:	e0b6      	b.n	800a52e <HAL_TIM_ConfigClockSource+0x18a>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a3de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a3e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fc:	d03e      	beq.n	800a47c <HAL_TIM_ConfigClockSource+0xd8>
 800a3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a402:	f200 8087 	bhi.w	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a40a:	f000 8086 	beq.w	800a51a <HAL_TIM_ConfigClockSource+0x176>
 800a40e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a412:	d87f      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a414:	2b70      	cmp	r3, #112	; 0x70
 800a416:	d01a      	beq.n	800a44e <HAL_TIM_ConfigClockSource+0xaa>
 800a418:	2b70      	cmp	r3, #112	; 0x70
 800a41a:	d87b      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a41c:	2b60      	cmp	r3, #96	; 0x60
 800a41e:	d050      	beq.n	800a4c2 <HAL_TIM_ConfigClockSource+0x11e>
 800a420:	2b60      	cmp	r3, #96	; 0x60
 800a422:	d877      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a424:	2b50      	cmp	r3, #80	; 0x50
 800a426:	d03c      	beq.n	800a4a2 <HAL_TIM_ConfigClockSource+0xfe>
 800a428:	2b50      	cmp	r3, #80	; 0x50
 800a42a:	d873      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a42c:	2b40      	cmp	r3, #64	; 0x40
 800a42e:	d058      	beq.n	800a4e2 <HAL_TIM_ConfigClockSource+0x13e>
 800a430:	2b40      	cmp	r3, #64	; 0x40
 800a432:	d86f      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a434:	2b30      	cmp	r3, #48	; 0x30
 800a436:	d064      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15e>
 800a438:	2b30      	cmp	r3, #48	; 0x30
 800a43a:	d86b      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a43c:	2b20      	cmp	r3, #32
 800a43e:	d060      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15e>
 800a440:	2b20      	cmp	r3, #32
 800a442:	d867      	bhi.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
 800a444:	2b00      	cmp	r3, #0
 800a446:	d05c      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15e>
 800a448:	2b10      	cmp	r3, #16
 800a44a:	d05a      	beq.n	800a502 <HAL_TIM_ConfigClockSource+0x15e>
 800a44c:	e062      	b.n	800a514 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6818      	ldr	r0, [r3, #0]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6899      	ldr	r1, [r3, #8]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	68db      	ldr	r3, [r3, #12]
 800a45e:	f000 fc23 	bl	800aca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68ba      	ldr	r2, [r7, #8]
 800a478:	609a      	str	r2, [r3, #8]
      break;
 800a47a:	e04f      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	6899      	ldr	r1, [r3, #8]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	685a      	ldr	r2, [r3, #4]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	f000 fc0c 	bl	800aca8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	689a      	ldr	r2, [r3, #8]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a49e:	609a      	str	r2, [r3, #8]
      break;
 800a4a0:	e03c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6818      	ldr	r0, [r3, #0]
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	6859      	ldr	r1, [r3, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f000 fb7e 	bl	800abb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2150      	movs	r1, #80	; 0x50
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fbd7 	bl	800ac6e <TIM_ITRx_SetConfig>
      break;
 800a4c0:	e02c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6818      	ldr	r0, [r3, #0]
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	6859      	ldr	r1, [r3, #4]
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f000 fb9d 	bl	800ac0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	2160      	movs	r1, #96	; 0x60
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 fbc7 	bl	800ac6e <TIM_ITRx_SetConfig>
      break;
 800a4e0:	e01c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6818      	ldr	r0, [r3, #0]
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	6859      	ldr	r1, [r3, #4]
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f000 fb5e 	bl	800abb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2140      	movs	r1, #64	; 0x40
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fbb7 	bl	800ac6e <TIM_ITRx_SetConfig>
      break;
 800a500:	e00c      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4619      	mov	r1, r3
 800a50c:	4610      	mov	r0, r2
 800a50e:	f000 fbae 	bl	800ac6e <TIM_ITRx_SetConfig>
      break;
 800a512:	e003      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	73fb      	strb	r3, [r7, #15]
      break;
 800a518:	e000      	b.n	800a51c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a51a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2200      	movs	r2, #0
 800a528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a536:	b480      	push	{r7}
 800a538:	b083      	sub	sp, #12
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a53e:	bf00      	nop
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr

0800a55e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a55e:	b480      	push	{r7}
 800a560:	b083      	sub	sp, #12
 800a562:	af00      	add	r7, sp, #0
 800a564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a566:	bf00      	nop
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a572:	b480      	push	{r7}
 800a574:	b083      	sub	sp, #12
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a57a:	bf00      	nop
 800a57c:	370c      	adds	r7, #12
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a586:	b480      	push	{r7}
 800a588:	b083      	sub	sp, #12
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr

0800a59a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a59a:	b480      	push	{r7}
 800a59c:	b083      	sub	sp, #12
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a5a2:	bf00      	nop
 800a5a4:	370c      	adds	r7, #12
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5ae:	b480      	push	{r7}
 800a5b0:	b083      	sub	sp, #12
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5b6:	bf00      	nop
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a5c2:	b480      	push	{r7}
 800a5c4:	b083      	sub	sp, #12
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b083      	sub	sp, #12
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a5de:	bf00      	nop
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
	...

0800a5ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b085      	sub	sp, #20
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4a2a      	ldr	r2, [pc, #168]	; (800a6a8 <TIM_Base_SetConfig+0xbc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d003      	beq.n	800a60c <TIM_Base_SetConfig+0x20>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a60a:	d108      	bne.n	800a61e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	68fa      	ldr	r2, [r7, #12]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	4a21      	ldr	r2, [pc, #132]	; (800a6a8 <TIM_Base_SetConfig+0xbc>)
 800a622:	4293      	cmp	r3, r2
 800a624:	d00b      	beq.n	800a63e <TIM_Base_SetConfig+0x52>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a62c:	d007      	beq.n	800a63e <TIM_Base_SetConfig+0x52>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a1e      	ldr	r2, [pc, #120]	; (800a6ac <TIM_Base_SetConfig+0xc0>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d003      	beq.n	800a63e <TIM_Base_SetConfig+0x52>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a1d      	ldr	r2, [pc, #116]	; (800a6b0 <TIM_Base_SetConfig+0xc4>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d108      	bne.n	800a650 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	689a      	ldr	r2, [r3, #8]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	681a      	ldr	r2, [r3, #0]
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	4a0c      	ldr	r2, [pc, #48]	; (800a6a8 <TIM_Base_SetConfig+0xbc>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d007      	beq.n	800a68c <TIM_Base_SetConfig+0xa0>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	4a0b      	ldr	r2, [pc, #44]	; (800a6ac <TIM_Base_SetConfig+0xc0>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d003      	beq.n	800a68c <TIM_Base_SetConfig+0xa0>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a0a      	ldr	r2, [pc, #40]	; (800a6b0 <TIM_Base_SetConfig+0xc4>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d103      	bne.n	800a694 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	691a      	ldr	r2, [r3, #16]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2201      	movs	r2, #1
 800a698:	615a      	str	r2, [r3, #20]
}
 800a69a:	bf00      	nop
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	40012c00 	.word	0x40012c00
 800a6ac:	40014400 	.word	0x40014400
 800a6b0:	40014800 	.word	0x40014800

0800a6b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b087      	sub	sp, #28
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
 800a6bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a1b      	ldr	r3, [r3, #32]
 800a6c2:	f023 0201 	bic.w	r2, r3, #1
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a1b      	ldr	r3, [r3, #32]
 800a6ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 0303 	bic.w	r3, r3, #3
 800a6ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f023 0302 	bic.w	r3, r3, #2
 800a700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	4313      	orrs	r3, r2
 800a70a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4a24      	ldr	r2, [pc, #144]	; (800a7a0 <TIM_OC1_SetConfig+0xec>)
 800a710:	4293      	cmp	r3, r2
 800a712:	d007      	beq.n	800a724 <TIM_OC1_SetConfig+0x70>
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a23      	ldr	r2, [pc, #140]	; (800a7a4 <TIM_OC1_SetConfig+0xf0>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d003      	beq.n	800a724 <TIM_OC1_SetConfig+0x70>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a22      	ldr	r2, [pc, #136]	; (800a7a8 <TIM_OC1_SetConfig+0xf4>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d10c      	bne.n	800a73e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	f023 0308 	bic.w	r3, r3, #8
 800a72a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	4313      	orrs	r3, r2
 800a734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f023 0304 	bic.w	r3, r3, #4
 800a73c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	4a17      	ldr	r2, [pc, #92]	; (800a7a0 <TIM_OC1_SetConfig+0xec>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d007      	beq.n	800a756 <TIM_OC1_SetConfig+0xa2>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a17      	ldr	r2, [pc, #92]	; (800a7a8 <TIM_OC1_SetConfig+0xf4>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d003      	beq.n	800a756 <TIM_OC1_SetConfig+0xa2>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	4a14      	ldr	r2, [pc, #80]	; (800a7a4 <TIM_OC1_SetConfig+0xf0>)
 800a752:	4293      	cmp	r3, r2
 800a754:	d111      	bne.n	800a77a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a75c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a764:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	695b      	ldr	r3, [r3, #20]
 800a76a:	693a      	ldr	r2, [r7, #16]
 800a76c:	4313      	orrs	r3, r2
 800a76e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	4313      	orrs	r3, r2
 800a778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	697a      	ldr	r2, [r7, #20]
 800a792:	621a      	str	r2, [r3, #32]
}
 800a794:	bf00      	nop
 800a796:	371c      	adds	r7, #28
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	40012c00 	.word	0x40012c00
 800a7a4:	40014800 	.word	0x40014800
 800a7a8:	40014400 	.word	0x40014400

0800a7ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a1b      	ldr	r3, [r3, #32]
 800a7ba:	f023 0210 	bic.w	r2, r3, #16
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a7da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a7de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	f023 0320 	bic.w	r3, r3, #32
 800a7fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	011b      	lsls	r3, r3, #4
 800a802:	697a      	ldr	r2, [r7, #20]
 800a804:	4313      	orrs	r3, r2
 800a806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a22      	ldr	r2, [pc, #136]	; (800a894 <TIM_OC2_SetConfig+0xe8>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d10d      	bne.n	800a82c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	011b      	lsls	r3, r3, #4
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	4313      	orrs	r3, r2
 800a822:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a82a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a19      	ldr	r2, [pc, #100]	; (800a894 <TIM_OC2_SetConfig+0xe8>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d007      	beq.n	800a844 <TIM_OC2_SetConfig+0x98>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a18      	ldr	r2, [pc, #96]	; (800a898 <TIM_OC2_SetConfig+0xec>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d003      	beq.n	800a844 <TIM_OC2_SetConfig+0x98>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a17      	ldr	r2, [pc, #92]	; (800a89c <TIM_OC2_SetConfig+0xf0>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d113      	bne.n	800a86c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a84a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a852:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	009b      	lsls	r3, r3, #2
 800a85a:	693a      	ldr	r2, [r7, #16]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	693a      	ldr	r2, [r7, #16]
 800a868:	4313      	orrs	r3, r2
 800a86a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	693a      	ldr	r2, [r7, #16]
 800a870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685a      	ldr	r2, [r3, #4]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	697a      	ldr	r2, [r7, #20]
 800a884:	621a      	str	r2, [r3, #32]
}
 800a886:	bf00      	nop
 800a888:	371c      	adds	r7, #28
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	40012c00 	.word	0x40012c00
 800a898:	40014400 	.word	0x40014400
 800a89c:	40014800 	.word	0x40014800

0800a8a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f023 0303 	bic.w	r3, r3, #3
 800a8da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	689b      	ldr	r3, [r3, #8]
 800a8f2:	021b      	lsls	r3, r3, #8
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a21      	ldr	r2, [pc, #132]	; (800a984 <TIM_OC3_SetConfig+0xe4>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d10d      	bne.n	800a91e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	021b      	lsls	r3, r3, #8
 800a910:	697a      	ldr	r2, [r7, #20]
 800a912:	4313      	orrs	r3, r2
 800a914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a91c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	4a18      	ldr	r2, [pc, #96]	; (800a984 <TIM_OC3_SetConfig+0xe4>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d007      	beq.n	800a936 <TIM_OC3_SetConfig+0x96>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a17      	ldr	r2, [pc, #92]	; (800a988 <TIM_OC3_SetConfig+0xe8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d003      	beq.n	800a936 <TIM_OC3_SetConfig+0x96>
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	4a16      	ldr	r2, [pc, #88]	; (800a98c <TIM_OC3_SetConfig+0xec>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d113      	bne.n	800a95e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a93c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	011b      	lsls	r3, r3, #4
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	4313      	orrs	r3, r2
 800a950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	011b      	lsls	r3, r3, #4
 800a958:	693a      	ldr	r2, [r7, #16]
 800a95a:	4313      	orrs	r3, r2
 800a95c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685a      	ldr	r2, [r3, #4]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	621a      	str	r2, [r3, #32]
}
 800a978:	bf00      	nop
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	40012c00 	.word	0x40012c00
 800a988:	40014400 	.word	0x40014400
 800a98c:	40014800 	.word	0x40014800

0800a990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a1b      	ldr	r3, [r3, #32]
 800a99e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a9be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	021b      	lsls	r3, r3, #8
 800a9d2:	68fa      	ldr	r2, [r7, #12]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a9de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	031b      	lsls	r3, r3, #12
 800a9e6:	693a      	ldr	r2, [r7, #16]
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a14      	ldr	r2, [pc, #80]	; (800aa40 <TIM_OC4_SetConfig+0xb0>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d007      	beq.n	800aa04 <TIM_OC4_SetConfig+0x74>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a13      	ldr	r2, [pc, #76]	; (800aa44 <TIM_OC4_SetConfig+0xb4>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d003      	beq.n	800aa04 <TIM_OC4_SetConfig+0x74>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a12      	ldr	r2, [pc, #72]	; (800aa48 <TIM_OC4_SetConfig+0xb8>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d109      	bne.n	800aa18 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	019b      	lsls	r3, r3, #6
 800aa12:	697a      	ldr	r2, [r7, #20]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	68fa      	ldr	r2, [r7, #12]
 800aa22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	685a      	ldr	r2, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	621a      	str	r2, [r3, #32]
}
 800aa32:	bf00      	nop
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	40012c00 	.word	0x40012c00
 800aa44:	40014400 	.word	0x40014400
 800aa48:	40014800 	.word	0x40014800

0800aa4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b087      	sub	sp, #28
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6a1b      	ldr	r3, [r3, #32]
 800aa66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800aa90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	041b      	lsls	r3, r3, #16
 800aa98:	693a      	ldr	r2, [r7, #16]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a13      	ldr	r2, [pc, #76]	; (800aaf0 <TIM_OC5_SetConfig+0xa4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d007      	beq.n	800aab6 <TIM_OC5_SetConfig+0x6a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a12      	ldr	r2, [pc, #72]	; (800aaf4 <TIM_OC5_SetConfig+0xa8>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d003      	beq.n	800aab6 <TIM_OC5_SetConfig+0x6a>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a11      	ldr	r2, [pc, #68]	; (800aaf8 <TIM_OC5_SetConfig+0xac>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d109      	bne.n	800aaca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aabc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	697a      	ldr	r2, [r7, #20]
 800aac6:	4313      	orrs	r3, r2
 800aac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	697a      	ldr	r2, [r7, #20]
 800aace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	68fa      	ldr	r2, [r7, #12]
 800aad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	685a      	ldr	r2, [r3, #4]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	621a      	str	r2, [r3, #32]
}
 800aae4:	bf00      	nop
 800aae6:	371c      	adds	r7, #28
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	40012c00 	.word	0x40012c00
 800aaf4:	40014400 	.word	0x40014400
 800aaf8:	40014800 	.word	0x40014800

0800aafc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	021b      	lsls	r3, r3, #8
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	051b      	lsls	r3, r3, #20
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4a14      	ldr	r2, [pc, #80]	; (800aba4 <TIM_OC6_SetConfig+0xa8>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d007      	beq.n	800ab68 <TIM_OC6_SetConfig+0x6c>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a13      	ldr	r2, [pc, #76]	; (800aba8 <TIM_OC6_SetConfig+0xac>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d003      	beq.n	800ab68 <TIM_OC6_SetConfig+0x6c>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a12      	ldr	r2, [pc, #72]	; (800abac <TIM_OC6_SetConfig+0xb0>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d109      	bne.n	800ab7c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab6e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	029b      	lsls	r3, r3, #10
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	621a      	str	r2, [r3, #32]
}
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40012c00 	.word	0x40012c00
 800aba8:	40014400 	.word	0x40014400
 800abac:	40014800 	.word	0x40014800

0800abb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b087      	sub	sp, #28
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6a1b      	ldr	r3, [r3, #32]
 800abc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	f023 0201 	bic.w	r2, r3, #1
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f023 030a 	bic.w	r3, r3, #10
 800abec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	697a      	ldr	r2, [r7, #20]
 800ac00:	621a      	str	r2, [r3, #32]
}
 800ac02:	bf00      	nop
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b087      	sub	sp, #28
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	60f8      	str	r0, [r7, #12]
 800ac16:	60b9      	str	r1, [r7, #8]
 800ac18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	f023 0210 	bic.w	r2, r3, #16
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	031b      	lsls	r3, r3, #12
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	621a      	str	r2, [r3, #32]
}
 800ac62:	bf00      	nop
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ac84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac8a:	683a      	ldr	r2, [r7, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	f043 0307 	orr.w	r3, r3, #7
 800ac94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	609a      	str	r2, [r3, #8]
}
 800ac9c:	bf00      	nop
 800ac9e:	3714      	adds	r7, #20
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b087      	sub	sp, #28
 800acac:	af00      	add	r7, sp, #0
 800acae:	60f8      	str	r0, [r7, #12]
 800acb0:	60b9      	str	r1, [r7, #8]
 800acb2:	607a      	str	r2, [r7, #4]
 800acb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	689b      	ldr	r3, [r3, #8]
 800acba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	021a      	lsls	r2, r3, #8
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	431a      	orrs	r2, r3
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	4313      	orrs	r3, r2
 800acd0:	697a      	ldr	r2, [r7, #20]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	609a      	str	r2, [r3, #8]
}
 800acdc:	bf00      	nop
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a1e      	ldr	r2, [pc, #120]	; (800ad6c <TIM_ResetCallback+0x84>)
 800acf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	4a1d      	ldr	r2, [pc, #116]	; (800ad70 <TIM_ResetCallback+0x88>)
 800acfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	4a1c      	ldr	r2, [pc, #112]	; (800ad74 <TIM_ResetCallback+0x8c>)
 800ad04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	4a1b      	ldr	r2, [pc, #108]	; (800ad78 <TIM_ResetCallback+0x90>)
 800ad0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	4a1a      	ldr	r2, [pc, #104]	; (800ad7c <TIM_ResetCallback+0x94>)
 800ad14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	4a19      	ldr	r2, [pc, #100]	; (800ad80 <TIM_ResetCallback+0x98>)
 800ad1c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	4a18      	ldr	r2, [pc, #96]	; (800ad84 <TIM_ResetCallback+0x9c>)
 800ad24:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4a17      	ldr	r2, [pc, #92]	; (800ad88 <TIM_ResetCallback+0xa0>)
 800ad2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a16      	ldr	r2, [pc, #88]	; (800ad8c <TIM_ResetCallback+0xa4>)
 800ad34:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a15      	ldr	r2, [pc, #84]	; (800ad90 <TIM_ResetCallback+0xa8>)
 800ad3c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a14      	ldr	r2, [pc, #80]	; (800ad94 <TIM_ResetCallback+0xac>)
 800ad44:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a13      	ldr	r2, [pc, #76]	; (800ad98 <TIM_ResetCallback+0xb0>)
 800ad4c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a12      	ldr	r2, [pc, #72]	; (800ad9c <TIM_ResetCallback+0xb4>)
 800ad54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a11      	ldr	r2, [pc, #68]	; (800ada0 <TIM_ResetCallback+0xb8>)
 800ad5c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	08005275 	.word	0x08005275
 800ad70:	0800a537 	.word	0x0800a537
 800ad74:	0800a5af 	.word	0x0800a5af
 800ad78:	0800a5c3 	.word	0x0800a5c3
 800ad7c:	0800a55f 	.word	0x0800a55f
 800ad80:	0800a573 	.word	0x0800a573
 800ad84:	0800a54b 	.word	0x0800a54b
 800ad88:	0800a587 	.word	0x0800a587
 800ad8c:	0800a59b 	.word	0x0800a59b
 800ad90:	0800a5d7 	.word	0x0800a5d7
 800ad94:	0800af85 	.word	0x0800af85
 800ad98:	0800af99 	.word	0x0800af99
 800ad9c:	0800afad 	.word	0x0800afad
 800ada0:	0800afc1 	.word	0x0800afc1

0800ada4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d101      	bne.n	800adbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adb8:	2302      	movs	r3, #2
 800adba:	e04a      	b.n	800ae52 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1f      	ldr	r2, [pc, #124]	; (800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d108      	bne.n	800adf8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800adec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	68fa      	ldr	r2, [r7, #12]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	68fa      	ldr	r2, [r7, #12]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a12      	ldr	r2, [pc, #72]	; (800ae60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d004      	beq.n	800ae26 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae24:	d10c      	bne.n	800ae40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae50:	2300      	movs	r3, #0
}
 800ae52:	4618      	mov	r0, r3
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	40012c00 	.word	0x40012c00

0800ae64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d101      	bne.n	800ae80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae7c:	2302      	movs	r3, #2
 800ae7e:	e078      	b.n	800af72 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	689b      	ldr	r3, [r3, #8]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	4313      	orrs	r3, r2
 800aebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	4313      	orrs	r3, r2
 800aeda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	4313      	orrs	r3, r2
 800aee8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	041b      	lsls	r3, r3, #16
 800aef6:	4313      	orrs	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a20      	ldr	r2, [pc, #128]	; (800af80 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d106      	bne.n	800af12 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	4313      	orrs	r3, r2
 800af10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a1a      	ldr	r2, [pc, #104]	; (800af80 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d121      	bne.n	800af60 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	051b      	lsls	r3, r3, #20
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	6a1b      	ldr	r3, [r3, #32]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af44:	4313      	orrs	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a0c      	ldr	r2, [pc, #48]	; (800af80 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d106      	bne.n	800af60 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5c:	4313      	orrs	r3, r2
 800af5e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	40012c00 	.word	0x40012c00

0800af84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afac:	b480      	push	{r7}
 800afae:	b083      	sub	sp, #12
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afb4:	bf00      	nop
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800afc8:	bf00      	nop
 800afca:	370c      	adds	r7, #12
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <LL_RCC_GetUSARTClockSource>:
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800afdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800afe0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4013      	ands	r3, r2
}
 800afe8:	4618      	mov	r0, r3
 800afea:	370c      	adds	r7, #12
 800afec:	46bd      	mov	sp, r7
 800afee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff2:	4770      	bx	lr

0800aff4 <LL_RCC_GetLPUARTClockSource>:
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800affc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b000:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4013      	ands	r3, r2
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e042      	b.n	800b0ac <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d106      	bne.n	800b03e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2200      	movs	r2, #0
 800b034:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7fa fdc5 	bl	8005bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2224      	movs	r2, #36	; 0x24
 800b042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f022 0201 	bic.w	r2, r2, #1
 800b054:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f8ba 	bl	800b1d0 <UART_SetConfig>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d101      	bne.n	800b066 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e022      	b.n	800b0ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d002      	beq.n	800b074 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fad6 	bl	800b620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b082:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689a      	ldr	r2, [r3, #8]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b092:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f042 0201 	orr.w	r2, r2, #1
 800b0a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 fb5d 	bl	800b764 <UART_CheckIdleState>
 800b0aa:	4603      	mov	r3, r0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08a      	sub	sp, #40	; 0x28
 800b0b8:	af02      	add	r7, sp, #8
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	603b      	str	r3, [r7, #0]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ca:	2b20      	cmp	r3, #32
 800b0cc:	d17b      	bne.n	800b1c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d002      	beq.n	800b0da <HAL_UART_Transmit+0x26>
 800b0d4:	88fb      	ldrh	r3, [r7, #6]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	e074      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	2221      	movs	r2, #33	; 0x21
 800b0ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b0ee:	f7fb fcef 	bl	8006ad0 <HAL_GetTick>
 800b0f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	88fa      	ldrh	r2, [r7, #6]
 800b0f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	88fa      	ldrh	r2, [r7, #6]
 800b100:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b10c:	d108      	bne.n	800b120 <HAL_UART_Transmit+0x6c>
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	691b      	ldr	r3, [r3, #16]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d104      	bne.n	800b120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	e003      	b.n	800b128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b124:	2300      	movs	r3, #0
 800b126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b128:	e030      	b.n	800b18c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	9300      	str	r3, [sp, #0]
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2200      	movs	r2, #0
 800b132:	2180      	movs	r1, #128	; 0x80
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f000 fbbf 	bl	800b8b8 <UART_WaitOnFlagUntilTimeout>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2220      	movs	r2, #32
 800b144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e03d      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b14c:	69fb      	ldr	r3, [r7, #28]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10b      	bne.n	800b16a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	881b      	ldrh	r3, [r3, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b160:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	3302      	adds	r3, #2
 800b166:	61bb      	str	r3, [r7, #24]
 800b168:	e007      	b.n	800b17a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	781a      	ldrb	r2, [r3, #0]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	3301      	adds	r3, #1
 800b178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b180:	b29b      	uxth	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	b29a      	uxth	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b192:	b29b      	uxth	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1c8      	bne.n	800b12a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	2140      	movs	r1, #64	; 0x40
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 fb88 	bl	800b8b8 <UART_WaitOnFlagUntilTimeout>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d005      	beq.n	800b1ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	2220      	movs	r2, #32
 800b1b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e006      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2220      	movs	r2, #32
 800b1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	e000      	b.n	800b1c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b1c6:	2302      	movs	r3, #2
  }
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3720      	adds	r7, #32
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}

0800b1d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b1d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b1d4:	b08c      	sub	sp, #48	; 0x30
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	689a      	ldr	r2, [r3, #8]
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	431a      	orrs	r2, r3
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	69db      	ldr	r3, [r3, #28]
 800b1f4:	4313      	orrs	r3, r2
 800b1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	4baf      	ldr	r3, [pc, #700]	; (800b4bc <UART_SetConfig+0x2ec>)
 800b200:	4013      	ands	r3, r2
 800b202:	697a      	ldr	r2, [r7, #20]
 800b204:	6812      	ldr	r2, [r2, #0]
 800b206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b208:	430b      	orrs	r3, r1
 800b20a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	68da      	ldr	r2, [r3, #12]
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	430a      	orrs	r2, r1
 800b220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4aa4      	ldr	r2, [pc, #656]	; (800b4c0 <UART_SetConfig+0x2f0>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d004      	beq.n	800b23c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b238:	4313      	orrs	r3, r2
 800b23a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b246:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	6812      	ldr	r2, [r2, #0]
 800b24e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b250:	430b      	orrs	r3, r1
 800b252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25a:	f023 010f 	bic.w	r1, r3, #15
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	430a      	orrs	r2, r1
 800b268:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a95      	ldr	r2, [pc, #596]	; (800b4c4 <UART_SetConfig+0x2f4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d125      	bne.n	800b2c0 <UART_SetConfig+0xf0>
 800b274:	2003      	movs	r0, #3
 800b276:	f7ff fead 	bl	800afd4 <LL_RCC_GetUSARTClockSource>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b03      	cmp	r3, #3
 800b27e:	d81b      	bhi.n	800b2b8 <UART_SetConfig+0xe8>
 800b280:	a201      	add	r2, pc, #4	; (adr r2, 800b288 <UART_SetConfig+0xb8>)
 800b282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b286:	bf00      	nop
 800b288:	0800b299 	.word	0x0800b299
 800b28c:	0800b2a9 	.word	0x0800b2a9
 800b290:	0800b2a1 	.word	0x0800b2a1
 800b294:	0800b2b1 	.word	0x0800b2b1
 800b298:	2301      	movs	r3, #1
 800b29a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b29e:	e042      	b.n	800b326 <UART_SetConfig+0x156>
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2a6:	e03e      	b.n	800b326 <UART_SetConfig+0x156>
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2ae:	e03a      	b.n	800b326 <UART_SetConfig+0x156>
 800b2b0:	2308      	movs	r3, #8
 800b2b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2b6:	e036      	b.n	800b326 <UART_SetConfig+0x156>
 800b2b8:	2310      	movs	r3, #16
 800b2ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2be:	e032      	b.n	800b326 <UART_SetConfig+0x156>
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a7e      	ldr	r2, [pc, #504]	; (800b4c0 <UART_SetConfig+0x2f0>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d12a      	bne.n	800b320 <UART_SetConfig+0x150>
 800b2ca:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b2ce:	f7ff fe91 	bl	800aff4 <LL_RCC_GetLPUARTClockSource>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2d8:	d01a      	beq.n	800b310 <UART_SetConfig+0x140>
 800b2da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b2de:	d81b      	bhi.n	800b318 <UART_SetConfig+0x148>
 800b2e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2e4:	d00c      	beq.n	800b300 <UART_SetConfig+0x130>
 800b2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ea:	d815      	bhi.n	800b318 <UART_SetConfig+0x148>
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d003      	beq.n	800b2f8 <UART_SetConfig+0x128>
 800b2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2f4:	d008      	beq.n	800b308 <UART_SetConfig+0x138>
 800b2f6:	e00f      	b.n	800b318 <UART_SetConfig+0x148>
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b2fe:	e012      	b.n	800b326 <UART_SetConfig+0x156>
 800b300:	2302      	movs	r3, #2
 800b302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b306:	e00e      	b.n	800b326 <UART_SetConfig+0x156>
 800b308:	2304      	movs	r3, #4
 800b30a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b30e:	e00a      	b.n	800b326 <UART_SetConfig+0x156>
 800b310:	2308      	movs	r3, #8
 800b312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b316:	e006      	b.n	800b326 <UART_SetConfig+0x156>
 800b318:	2310      	movs	r3, #16
 800b31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b31e:	e002      	b.n	800b326 <UART_SetConfig+0x156>
 800b320:	2310      	movs	r3, #16
 800b322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a65      	ldr	r2, [pc, #404]	; (800b4c0 <UART_SetConfig+0x2f0>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	f040 8097 	bne.w	800b460 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b336:	2b08      	cmp	r3, #8
 800b338:	d823      	bhi.n	800b382 <UART_SetConfig+0x1b2>
 800b33a:	a201      	add	r2, pc, #4	; (adr r2, 800b340 <UART_SetConfig+0x170>)
 800b33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b340:	0800b365 	.word	0x0800b365
 800b344:	0800b383 	.word	0x0800b383
 800b348:	0800b36d 	.word	0x0800b36d
 800b34c:	0800b383 	.word	0x0800b383
 800b350:	0800b373 	.word	0x0800b373
 800b354:	0800b383 	.word	0x0800b383
 800b358:	0800b383 	.word	0x0800b383
 800b35c:	0800b383 	.word	0x0800b383
 800b360:	0800b37b 	.word	0x0800b37b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b364:	f7fd f8cc 	bl	8008500 <HAL_RCC_GetPCLK1Freq>
 800b368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b36a:	e010      	b.n	800b38e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b36c:	4b56      	ldr	r3, [pc, #344]	; (800b4c8 <UART_SetConfig+0x2f8>)
 800b36e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b370:	e00d      	b.n	800b38e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b372:	f7fd f845 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 800b376:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b378:	e009      	b.n	800b38e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b37e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b380:	e005      	b.n	800b38e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800b382:	2300      	movs	r3, #0
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b386:	2301      	movs	r3, #1
 800b388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b38c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	2b00      	cmp	r3, #0
 800b392:	f000 812b 	beq.w	800b5ec <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39a:	4a4c      	ldr	r2, [pc, #304]	; (800b4cc <UART_SetConfig+0x2fc>)
 800b39c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3a8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	685a      	ldr	r2, [r3, #4]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	4413      	add	r3, r2
 800b3b4:	69ba      	ldr	r2, [r7, #24]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d305      	bcc.n	800b3c6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3c0:	69ba      	ldr	r2, [r7, #24]
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d903      	bls.n	800b3ce <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b3cc:	e10e      	b.n	800b5ec <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	60bb      	str	r3, [r7, #8]
 800b3d4:	60fa      	str	r2, [r7, #12]
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3da:	4a3c      	ldr	r2, [pc, #240]	; (800b4cc <UART_SetConfig+0x2fc>)
 800b3dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	603b      	str	r3, [r7, #0]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b3f0:	f7f5 fb3c 	bl	8000a6c <__aeabi_uldivmod>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4610      	mov	r0, r2
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	f04f 0200 	mov.w	r2, #0
 800b400:	f04f 0300 	mov.w	r3, #0
 800b404:	020b      	lsls	r3, r1, #8
 800b406:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b40a:	0202      	lsls	r2, r0, #8
 800b40c:	6979      	ldr	r1, [r7, #20]
 800b40e:	6849      	ldr	r1, [r1, #4]
 800b410:	0849      	lsrs	r1, r1, #1
 800b412:	2000      	movs	r0, #0
 800b414:	460c      	mov	r4, r1
 800b416:	4605      	mov	r5, r0
 800b418:	eb12 0804 	adds.w	r8, r2, r4
 800b41c:	eb43 0905 	adc.w	r9, r3, r5
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	469a      	mov	sl, r3
 800b428:	4693      	mov	fp, r2
 800b42a:	4652      	mov	r2, sl
 800b42c:	465b      	mov	r3, fp
 800b42e:	4640      	mov	r0, r8
 800b430:	4649      	mov	r1, r9
 800b432:	f7f5 fb1b 	bl	8000a6c <__aeabi_uldivmod>
 800b436:	4602      	mov	r2, r0
 800b438:	460b      	mov	r3, r1
 800b43a:	4613      	mov	r3, r2
 800b43c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b43e:	6a3b      	ldr	r3, [r7, #32]
 800b440:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b444:	d308      	bcc.n	800b458 <UART_SetConfig+0x288>
 800b446:	6a3b      	ldr	r3, [r7, #32]
 800b448:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b44c:	d204      	bcs.n	800b458 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	6a3a      	ldr	r2, [r7, #32]
 800b454:	60da      	str	r2, [r3, #12]
 800b456:	e0c9      	b.n	800b5ec <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b45e:	e0c5      	b.n	800b5ec <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	69db      	ldr	r3, [r3, #28]
 800b464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b468:	d16d      	bne.n	800b546 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800b46a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b46e:	3b01      	subs	r3, #1
 800b470:	2b07      	cmp	r3, #7
 800b472:	d82d      	bhi.n	800b4d0 <UART_SetConfig+0x300>
 800b474:	a201      	add	r2, pc, #4	; (adr r2, 800b47c <UART_SetConfig+0x2ac>)
 800b476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47a:	bf00      	nop
 800b47c:	0800b49d 	.word	0x0800b49d
 800b480:	0800b4a5 	.word	0x0800b4a5
 800b484:	0800b4d1 	.word	0x0800b4d1
 800b488:	0800b4ab 	.word	0x0800b4ab
 800b48c:	0800b4d1 	.word	0x0800b4d1
 800b490:	0800b4d1 	.word	0x0800b4d1
 800b494:	0800b4d1 	.word	0x0800b4d1
 800b498:	0800b4b3 	.word	0x0800b4b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b49c:	f7fd f846 	bl	800852c <HAL_RCC_GetPCLK2Freq>
 800b4a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b4a2:	e01b      	b.n	800b4dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4a4:	4b08      	ldr	r3, [pc, #32]	; (800b4c8 <UART_SetConfig+0x2f8>)
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b4a8:	e018      	b.n	800b4dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4aa:	f7fc ffa9 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 800b4ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b4b0:	e014      	b.n	800b4dc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b4b8:	e010      	b.n	800b4dc <UART_SetConfig+0x30c>
 800b4ba:	bf00      	nop
 800b4bc:	cfff69f3 	.word	0xcfff69f3
 800b4c0:	40008000 	.word	0x40008000
 800b4c4:	40013800 	.word	0x40013800
 800b4c8:	00f42400 	.word	0x00f42400
 800b4cc:	0800daa4 	.word	0x0800daa4
      default:
        pclk = 0U;
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b4da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 8084 	beq.w	800b5ec <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e8:	4a4b      	ldr	r2, [pc, #300]	; (800b618 <UART_SetConfig+0x448>)
 800b4ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4f6:	005a      	lsls	r2, r3, #1
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	085b      	lsrs	r3, r3, #1
 800b4fe:	441a      	add	r2, r3
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	fbb2 f3f3 	udiv	r3, r2, r3
 800b508:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	2b0f      	cmp	r3, #15
 800b50e:	d916      	bls.n	800b53e <UART_SetConfig+0x36e>
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b516:	d212      	bcs.n	800b53e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	f023 030f 	bic.w	r3, r3, #15
 800b520:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	085b      	lsrs	r3, r3, #1
 800b526:	b29b      	uxth	r3, r3
 800b528:	f003 0307 	and.w	r3, r3, #7
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	8bfb      	ldrh	r3, [r7, #30]
 800b530:	4313      	orrs	r3, r2
 800b532:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	8bfa      	ldrh	r2, [r7, #30]
 800b53a:	60da      	str	r2, [r3, #12]
 800b53c:	e056      	b.n	800b5ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b53e:	2301      	movs	r3, #1
 800b540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b544:	e052      	b.n	800b5ec <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b54a:	3b01      	subs	r3, #1
 800b54c:	2b07      	cmp	r3, #7
 800b54e:	d822      	bhi.n	800b596 <UART_SetConfig+0x3c6>
 800b550:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <UART_SetConfig+0x388>)
 800b552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b556:	bf00      	nop
 800b558:	0800b579 	.word	0x0800b579
 800b55c:	0800b581 	.word	0x0800b581
 800b560:	0800b597 	.word	0x0800b597
 800b564:	0800b587 	.word	0x0800b587
 800b568:	0800b597 	.word	0x0800b597
 800b56c:	0800b597 	.word	0x0800b597
 800b570:	0800b597 	.word	0x0800b597
 800b574:	0800b58f 	.word	0x0800b58f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b578:	f7fc ffd8 	bl	800852c <HAL_RCC_GetPCLK2Freq>
 800b57c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b57e:	e010      	b.n	800b5a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b580:	4b26      	ldr	r3, [pc, #152]	; (800b61c <UART_SetConfig+0x44c>)
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b584:	e00d      	b.n	800b5a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b586:	f7fc ff3b 	bl	8008400 <HAL_RCC_GetSysClockFreq>
 800b58a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b58c:	e009      	b.n	800b5a2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b58e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b594:	e005      	b.n	800b5a2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b5a0:	bf00      	nop
    }

    if (pclk != 0U)
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d021      	beq.n	800b5ec <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ac:	4a1a      	ldr	r2, [pc, #104]	; (800b618 <UART_SetConfig+0x448>)
 800b5ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	085b      	lsrs	r3, r3, #1
 800b5c0:	441a      	add	r2, r3
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	2b0f      	cmp	r3, #15
 800b5d0:	d909      	bls.n	800b5e6 <UART_SetConfig+0x416>
 800b5d2:	6a3b      	ldr	r3, [r7, #32]
 800b5d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5d8:	d205      	bcs.n	800b5e6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5da:	6a3b      	ldr	r3, [r7, #32]
 800b5dc:	b29a      	uxth	r2, r3
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	60da      	str	r2, [r3, #12]
 800b5e4:	e002      	b.n	800b5ec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b5fc:	697b      	ldr	r3, [r7, #20]
 800b5fe:	2200      	movs	r2, #0
 800b600:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2200      	movs	r2, #0
 800b606:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800b608:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3730      	adds	r7, #48	; 0x30
 800b610:	46bd      	mov	sp, r7
 800b612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b616:	bf00      	nop
 800b618:	0800daa4 	.word	0x0800daa4
 800b61c:	00f42400 	.word	0x00f42400

0800b620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62c:	f003 0301 	and.w	r3, r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	d00a      	beq.n	800b64a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64e:	f003 0302 	and.w	r3, r3, #2
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00a      	beq.n	800b66c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	430a      	orrs	r2, r1
 800b66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b670:	f003 0304 	and.w	r3, r3, #4
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00a      	beq.n	800b68e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	430a      	orrs	r2, r1
 800b68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b692:	f003 0308 	and.w	r3, r3, #8
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00a      	beq.n	800b6b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	430a      	orrs	r2, r1
 800b6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b4:	f003 0310 	and.w	r3, r3, #16
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00a      	beq.n	800b6d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	430a      	orrs	r2, r1
 800b6d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d6:	f003 0320 	and.w	r3, r3, #32
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00a      	beq.n	800b6f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d01a      	beq.n	800b736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b71a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b71e:	d10a      	bne.n	800b736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	430a      	orrs	r2, r1
 800b734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00a      	beq.n	800b758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	430a      	orrs	r2, r1
 800b756:	605a      	str	r2, [r3, #4]
  }
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b098      	sub	sp, #96	; 0x60
 800b768:	af02      	add	r7, sp, #8
 800b76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b774:	f7fb f9ac 	bl	8006ad0 <HAL_GetTick>
 800b778:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 0308 	and.w	r3, r3, #8
 800b784:	2b08      	cmp	r3, #8
 800b786:	d12f      	bne.n	800b7e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b790:	2200      	movs	r2, #0
 800b792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f000 f88e 	bl	800b8b8 <UART_WaitOnFlagUntilTimeout>
 800b79c:	4603      	mov	r3, r0
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d022      	beq.n	800b7e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7aa:	e853 3f00 	ldrex	r3, [r3]
 800b7ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b7b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7b6:	653b      	str	r3, [r7, #80]	; 0x50
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7c0:	647b      	str	r3, [r7, #68]	; 0x44
 800b7c2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b7c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b7c8:	e841 2300 	strex	r3, r2, [r1]
 800b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1e6      	bne.n	800b7a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b7e4:	2303      	movs	r3, #3
 800b7e6:	e063      	b.n	800b8b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 0304 	and.w	r3, r3, #4
 800b7f2:	2b04      	cmp	r3, #4
 800b7f4:	d149      	bne.n	800b88a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b7fe:	2200      	movs	r2, #0
 800b800:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f857 	bl	800b8b8 <UART_WaitOnFlagUntilTimeout>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d03c      	beq.n	800b88a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b818:	e853 3f00 	ldrex	r3, [r3]
 800b81c:	623b      	str	r3, [r7, #32]
   return(result);
 800b81e:	6a3b      	ldr	r3, [r7, #32]
 800b820:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b824:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	461a      	mov	r2, r3
 800b82c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b82e:	633b      	str	r3, [r7, #48]	; 0x30
 800b830:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b836:	e841 2300 	strex	r3, r2, [r1]
 800b83a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d1e6      	bne.n	800b810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3308      	adds	r3, #8
 800b848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	693b      	ldr	r3, [r7, #16]
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	60fb      	str	r3, [r7, #12]
   return(result);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f023 0301 	bic.w	r3, r3, #1
 800b858:	64bb      	str	r3, [r7, #72]	; 0x48
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	3308      	adds	r3, #8
 800b860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b862:	61fa      	str	r2, [r7, #28]
 800b864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	69b9      	ldr	r1, [r7, #24]
 800b868:	69fa      	ldr	r2, [r7, #28]
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	617b      	str	r3, [r7, #20]
   return(result);
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e5      	bne.n	800b842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	2220      	movs	r2, #32
 800b87a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b886:	2303      	movs	r3, #3
 800b888:	e012      	b.n	800b8b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2220      	movs	r2, #32
 800b896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b8ae:	2300      	movs	r3, #0
}
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	3758      	adds	r7, #88	; 0x58
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bd80      	pop	{r7, pc}

0800b8b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	603b      	str	r3, [r7, #0]
 800b8c4:	4613      	mov	r3, r2
 800b8c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8c8:	e049      	b.n	800b95e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d0:	d045      	beq.n	800b95e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8d2:	f7fb f8fd 	bl	8006ad0 <HAL_GetTick>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	69ba      	ldr	r2, [r7, #24]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d302      	bcc.n	800b8e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d101      	bne.n	800b8ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b8e8:	2303      	movs	r3, #3
 800b8ea:	e048      	b.n	800b97e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d031      	beq.n	800b95e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	f003 0308 	and.w	r3, r3, #8
 800b904:	2b08      	cmp	r3, #8
 800b906:	d110      	bne.n	800b92a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2208      	movs	r2, #8
 800b90e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f000 f838 	bl	800b986 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2208      	movs	r2, #8
 800b91a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b926:	2301      	movs	r3, #1
 800b928:	e029      	b.n	800b97e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b938:	d111      	bne.n	800b95e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b942:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b944:	68f8      	ldr	r0, [r7, #12]
 800b946:	f000 f81e 	bl	800b986 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2220      	movs	r2, #32
 800b94e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b95a:	2303      	movs	r3, #3
 800b95c:	e00f      	b.n	800b97e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69da      	ldr	r2, [r3, #28]
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	4013      	ands	r3, r2
 800b968:	68ba      	ldr	r2, [r7, #8]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	bf0c      	ite	eq
 800b96e:	2301      	moveq	r3, #1
 800b970:	2300      	movne	r3, #0
 800b972:	b2db      	uxtb	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d0a6      	beq.n	800b8ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}

0800b986 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b986:	b480      	push	{r7}
 800b988:	b095      	sub	sp, #84	; 0x54
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b9a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ac:	643b      	str	r3, [r7, #64]	; 0x40
 800b9ae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b9b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e6      	bne.n	800b98e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	3308      	adds	r3, #8
 800b9c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	6a3b      	ldr	r3, [r7, #32]
 800b9ca:	e853 3f00 	ldrex	r3, [r3]
 800b9ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	64bb      	str	r3, [r7, #72]	; 0x48
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e3      	bne.n	800b9c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d118      	bne.n	800ba32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	f023 0310 	bic.w	r3, r3, #16
 800ba14:	647b      	str	r3, [r7, #68]	; 0x44
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba1e:	61bb      	str	r3, [r7, #24]
 800ba20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6979      	ldr	r1, [r7, #20]
 800ba24:	69ba      	ldr	r2, [r7, #24]
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e6      	bne.n	800ba00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2220      	movs	r2, #32
 800ba36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ba46:	bf00      	nop
 800ba48:	3754      	adds	r7, #84	; 0x54
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b085      	sub	sp, #20
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d101      	bne.n	800ba68 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba64:	2302      	movs	r3, #2
 800ba66:	e027      	b.n	800bab8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2224      	movs	r2, #36	; 0x24
 800ba74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	681a      	ldr	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f022 0201 	bic.w	r2, r2, #1
 800ba8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ba96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bab6:	2300      	movs	r3, #0
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b084      	sub	sp, #16
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d101      	bne.n	800badc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bad8:	2302      	movs	r3, #2
 800bada:	e02d      	b.n	800bb38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2224      	movs	r2, #36	; 0x24
 800bae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f022 0201 	bic.w	r2, r2, #1
 800bb02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	683a      	ldr	r2, [r7, #0]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f84f 	bl	800bbbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d101      	bne.n	800bb58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb54:	2302      	movs	r3, #2
 800bb56:	e02d      	b.n	800bbb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2224      	movs	r2, #36	; 0x24
 800bb64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f022 0201 	bic.w	r2, r2, #1
 800bb7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	689b      	ldr	r3, [r3, #8]
 800bb86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	683a      	ldr	r2, [r7, #0]
 800bb90:	430a      	orrs	r2, r1
 800bb92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 f811 	bl	800bbbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68fa      	ldr	r2, [r7, #12]
 800bba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2220      	movs	r2, #32
 800bba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2200      	movs	r2, #0
 800bbae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bbb2:	2300      	movs	r3, #0
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d108      	bne.n	800bbde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bbdc:	e031      	b.n	800bc42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bbde:	2308      	movs	r3, #8
 800bbe0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bbe2:	2308      	movs	r3, #8
 800bbe4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	0e5b      	lsrs	r3, r3, #25
 800bbee:	b2db      	uxtb	r3, r3
 800bbf0:	f003 0307 	and.w	r3, r3, #7
 800bbf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	689b      	ldr	r3, [r3, #8]
 800bbfc:	0f5b      	lsrs	r3, r3, #29
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	f003 0307 	and.w	r3, r3, #7
 800bc04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc06:	7bbb      	ldrb	r3, [r7, #14]
 800bc08:	7b3a      	ldrb	r2, [r7, #12]
 800bc0a:	4911      	ldr	r1, [pc, #68]	; (800bc50 <UARTEx_SetNbDataToProcess+0x94>)
 800bc0c:	5c8a      	ldrb	r2, [r1, r2]
 800bc0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc12:	7b3a      	ldrb	r2, [r7, #12]
 800bc14:	490f      	ldr	r1, [pc, #60]	; (800bc54 <UARTEx_SetNbDataToProcess+0x98>)
 800bc16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc18:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc1c:	b29a      	uxth	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc24:	7bfb      	ldrb	r3, [r7, #15]
 800bc26:	7b7a      	ldrb	r2, [r7, #13]
 800bc28:	4909      	ldr	r1, [pc, #36]	; (800bc50 <UARTEx_SetNbDataToProcess+0x94>)
 800bc2a:	5c8a      	ldrb	r2, [r1, r2]
 800bc2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc30:	7b7a      	ldrb	r2, [r7, #13]
 800bc32:	4908      	ldr	r1, [pc, #32]	; (800bc54 <UARTEx_SetNbDataToProcess+0x98>)
 800bc34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc36:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800bc42:	bf00      	nop
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	0800dabc 	.word	0x0800dabc
 800bc54:	0800dac4 	.word	0x0800dac4

0800bc58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc60:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800bc64:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	b29b      	uxth	r3, r3
 800bc72:	43db      	mvns	r3, r3
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	4013      	ands	r3, r2
 800bc78:	b29a      	uxth	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bc8e:	b084      	sub	sp, #16
 800bc90:	b480      	push	{r7}
 800bc92:	b083      	sub	sp, #12
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	6078      	str	r0, [r7, #4]
 800bc98:	f107 0014 	add.w	r0, r7, #20
 800bc9c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	370c      	adds	r7, #12
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	b004      	add	sp, #16
 800bcce:	4770      	bx	lr

0800bcd0 <__errno>:
 800bcd0:	4b01      	ldr	r3, [pc, #4]	; (800bcd8 <__errno+0x8>)
 800bcd2:	6818      	ldr	r0, [r3, #0]
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	20000018 	.word	0x20000018

0800bcdc <__libc_init_array>:
 800bcdc:	b570      	push	{r4, r5, r6, lr}
 800bcde:	4d0d      	ldr	r5, [pc, #52]	; (800bd14 <__libc_init_array+0x38>)
 800bce0:	4c0d      	ldr	r4, [pc, #52]	; (800bd18 <__libc_init_array+0x3c>)
 800bce2:	1b64      	subs	r4, r4, r5
 800bce4:	10a4      	asrs	r4, r4, #2
 800bce6:	2600      	movs	r6, #0
 800bce8:	42a6      	cmp	r6, r4
 800bcea:	d109      	bne.n	800bd00 <__libc_init_array+0x24>
 800bcec:	4d0b      	ldr	r5, [pc, #44]	; (800bd1c <__libc_init_array+0x40>)
 800bcee:	4c0c      	ldr	r4, [pc, #48]	; (800bd20 <__libc_init_array+0x44>)
 800bcf0:	f001 fa34 	bl	800d15c <_init>
 800bcf4:	1b64      	subs	r4, r4, r5
 800bcf6:	10a4      	asrs	r4, r4, #2
 800bcf8:	2600      	movs	r6, #0
 800bcfa:	42a6      	cmp	r6, r4
 800bcfc:	d105      	bne.n	800bd0a <__libc_init_array+0x2e>
 800bcfe:	bd70      	pop	{r4, r5, r6, pc}
 800bd00:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd04:	4798      	blx	r3
 800bd06:	3601      	adds	r6, #1
 800bd08:	e7ee      	b.n	800bce8 <__libc_init_array+0xc>
 800bd0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd0e:	4798      	blx	r3
 800bd10:	3601      	adds	r6, #1
 800bd12:	e7f2      	b.n	800bcfa <__libc_init_array+0x1e>
 800bd14:	0800dc1c 	.word	0x0800dc1c
 800bd18:	0800dc1c 	.word	0x0800dc1c
 800bd1c:	0800dc1c 	.word	0x0800dc1c
 800bd20:	0800dc20 	.word	0x0800dc20

0800bd24 <memcpy>:
 800bd24:	440a      	add	r2, r1
 800bd26:	4291      	cmp	r1, r2
 800bd28:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd2c:	d100      	bne.n	800bd30 <memcpy+0xc>
 800bd2e:	4770      	bx	lr
 800bd30:	b510      	push	{r4, lr}
 800bd32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd3a:	4291      	cmp	r1, r2
 800bd3c:	d1f9      	bne.n	800bd32 <memcpy+0xe>
 800bd3e:	bd10      	pop	{r4, pc}

0800bd40 <memset>:
 800bd40:	4402      	add	r2, r0
 800bd42:	4603      	mov	r3, r0
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d100      	bne.n	800bd4a <memset+0xa>
 800bd48:	4770      	bx	lr
 800bd4a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd4e:	e7f9      	b.n	800bd44 <memset+0x4>

0800bd50 <rand>:
 800bd50:	4b16      	ldr	r3, [pc, #88]	; (800bdac <rand+0x5c>)
 800bd52:	b510      	push	{r4, lr}
 800bd54:	681c      	ldr	r4, [r3, #0]
 800bd56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bd58:	b9b3      	cbnz	r3, 800bd88 <rand+0x38>
 800bd5a:	2018      	movs	r0, #24
 800bd5c:	f000 f886 	bl	800be6c <malloc>
 800bd60:	63a0      	str	r0, [r4, #56]	; 0x38
 800bd62:	b928      	cbnz	r0, 800bd70 <rand+0x20>
 800bd64:	4602      	mov	r2, r0
 800bd66:	4b12      	ldr	r3, [pc, #72]	; (800bdb0 <rand+0x60>)
 800bd68:	4812      	ldr	r0, [pc, #72]	; (800bdb4 <rand+0x64>)
 800bd6a:	214e      	movs	r1, #78	; 0x4e
 800bd6c:	f000 f84e 	bl	800be0c <__assert_func>
 800bd70:	4a11      	ldr	r2, [pc, #68]	; (800bdb8 <rand+0x68>)
 800bd72:	4b12      	ldr	r3, [pc, #72]	; (800bdbc <rand+0x6c>)
 800bd74:	e9c0 2300 	strd	r2, r3, [r0]
 800bd78:	4b11      	ldr	r3, [pc, #68]	; (800bdc0 <rand+0x70>)
 800bd7a:	6083      	str	r3, [r0, #8]
 800bd7c:	230b      	movs	r3, #11
 800bd7e:	8183      	strh	r3, [r0, #12]
 800bd80:	2201      	movs	r2, #1
 800bd82:	2300      	movs	r3, #0
 800bd84:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bd88:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800bd8a:	4a0e      	ldr	r2, [pc, #56]	; (800bdc4 <rand+0x74>)
 800bd8c:	6920      	ldr	r0, [r4, #16]
 800bd8e:	6963      	ldr	r3, [r4, #20]
 800bd90:	490d      	ldr	r1, [pc, #52]	; (800bdc8 <rand+0x78>)
 800bd92:	4342      	muls	r2, r0
 800bd94:	fb01 2203 	mla	r2, r1, r3, r2
 800bd98:	fba0 0101 	umull	r0, r1, r0, r1
 800bd9c:	1c43      	adds	r3, r0, #1
 800bd9e:	eb42 0001 	adc.w	r0, r2, r1
 800bda2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800bda6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bdaa:	bd10      	pop	{r4, pc}
 800bdac:	20000018 	.word	0x20000018
 800bdb0:	0800dad0 	.word	0x0800dad0
 800bdb4:	0800dae7 	.word	0x0800dae7
 800bdb8:	abcd330e 	.word	0xabcd330e
 800bdbc:	e66d1234 	.word	0xe66d1234
 800bdc0:	0005deec 	.word	0x0005deec
 800bdc4:	5851f42d 	.word	0x5851f42d
 800bdc8:	4c957f2d 	.word	0x4c957f2d

0800bdcc <siprintf>:
 800bdcc:	b40e      	push	{r1, r2, r3}
 800bdce:	b500      	push	{lr}
 800bdd0:	b09c      	sub	sp, #112	; 0x70
 800bdd2:	ab1d      	add	r3, sp, #116	; 0x74
 800bdd4:	9002      	str	r0, [sp, #8]
 800bdd6:	9006      	str	r0, [sp, #24]
 800bdd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bddc:	4809      	ldr	r0, [pc, #36]	; (800be04 <siprintf+0x38>)
 800bdde:	9107      	str	r1, [sp, #28]
 800bde0:	9104      	str	r1, [sp, #16]
 800bde2:	4909      	ldr	r1, [pc, #36]	; (800be08 <siprintf+0x3c>)
 800bde4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bde8:	9105      	str	r1, [sp, #20]
 800bdea:	6800      	ldr	r0, [r0, #0]
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	a902      	add	r1, sp, #8
 800bdf0:	f000 f980 	bl	800c0f4 <_svfiprintf_r>
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	701a      	strb	r2, [r3, #0]
 800bdfa:	b01c      	add	sp, #112	; 0x70
 800bdfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800be00:	b003      	add	sp, #12
 800be02:	4770      	bx	lr
 800be04:	20000018 	.word	0x20000018
 800be08:	ffff0208 	.word	0xffff0208

0800be0c <__assert_func>:
 800be0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be0e:	4614      	mov	r4, r2
 800be10:	461a      	mov	r2, r3
 800be12:	4b09      	ldr	r3, [pc, #36]	; (800be38 <__assert_func+0x2c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4605      	mov	r5, r0
 800be18:	68d8      	ldr	r0, [r3, #12]
 800be1a:	b14c      	cbz	r4, 800be30 <__assert_func+0x24>
 800be1c:	4b07      	ldr	r3, [pc, #28]	; (800be3c <__assert_func+0x30>)
 800be1e:	9100      	str	r1, [sp, #0]
 800be20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be24:	4906      	ldr	r1, [pc, #24]	; (800be40 <__assert_func+0x34>)
 800be26:	462b      	mov	r3, r5
 800be28:	f000 f80e 	bl	800be48 <fiprintf>
 800be2c:	f000 fe20 	bl	800ca70 <abort>
 800be30:	4b04      	ldr	r3, [pc, #16]	; (800be44 <__assert_func+0x38>)
 800be32:	461c      	mov	r4, r3
 800be34:	e7f3      	b.n	800be1e <__assert_func+0x12>
 800be36:	bf00      	nop
 800be38:	20000018 	.word	0x20000018
 800be3c:	0800db42 	.word	0x0800db42
 800be40:	0800db4f 	.word	0x0800db4f
 800be44:	0800db7d 	.word	0x0800db7d

0800be48 <fiprintf>:
 800be48:	b40e      	push	{r1, r2, r3}
 800be4a:	b503      	push	{r0, r1, lr}
 800be4c:	4601      	mov	r1, r0
 800be4e:	ab03      	add	r3, sp, #12
 800be50:	4805      	ldr	r0, [pc, #20]	; (800be68 <fiprintf+0x20>)
 800be52:	f853 2b04 	ldr.w	r2, [r3], #4
 800be56:	6800      	ldr	r0, [r0, #0]
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	f000 fa75 	bl	800c348 <_vfiprintf_r>
 800be5e:	b002      	add	sp, #8
 800be60:	f85d eb04 	ldr.w	lr, [sp], #4
 800be64:	b003      	add	sp, #12
 800be66:	4770      	bx	lr
 800be68:	20000018 	.word	0x20000018

0800be6c <malloc>:
 800be6c:	4b02      	ldr	r3, [pc, #8]	; (800be78 <malloc+0xc>)
 800be6e:	4601      	mov	r1, r0
 800be70:	6818      	ldr	r0, [r3, #0]
 800be72:	f000 b86f 	b.w	800bf54 <_malloc_r>
 800be76:	bf00      	nop
 800be78:	20000018 	.word	0x20000018

0800be7c <_free_r>:
 800be7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be7e:	2900      	cmp	r1, #0
 800be80:	d044      	beq.n	800bf0c <_free_r+0x90>
 800be82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be86:	9001      	str	r0, [sp, #4]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	f1a1 0404 	sub.w	r4, r1, #4
 800be8e:	bfb8      	it	lt
 800be90:	18e4      	addlt	r4, r4, r3
 800be92:	f001 f82f 	bl	800cef4 <__malloc_lock>
 800be96:	4a1e      	ldr	r2, [pc, #120]	; (800bf10 <_free_r+0x94>)
 800be98:	9801      	ldr	r0, [sp, #4]
 800be9a:	6813      	ldr	r3, [r2, #0]
 800be9c:	b933      	cbnz	r3, 800beac <_free_r+0x30>
 800be9e:	6063      	str	r3, [r4, #4]
 800bea0:	6014      	str	r4, [r2, #0]
 800bea2:	b003      	add	sp, #12
 800bea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bea8:	f001 b82a 	b.w	800cf00 <__malloc_unlock>
 800beac:	42a3      	cmp	r3, r4
 800beae:	d908      	bls.n	800bec2 <_free_r+0x46>
 800beb0:	6825      	ldr	r5, [r4, #0]
 800beb2:	1961      	adds	r1, r4, r5
 800beb4:	428b      	cmp	r3, r1
 800beb6:	bf01      	itttt	eq
 800beb8:	6819      	ldreq	r1, [r3, #0]
 800beba:	685b      	ldreq	r3, [r3, #4]
 800bebc:	1949      	addeq	r1, r1, r5
 800bebe:	6021      	streq	r1, [r4, #0]
 800bec0:	e7ed      	b.n	800be9e <_free_r+0x22>
 800bec2:	461a      	mov	r2, r3
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	b10b      	cbz	r3, 800becc <_free_r+0x50>
 800bec8:	42a3      	cmp	r3, r4
 800beca:	d9fa      	bls.n	800bec2 <_free_r+0x46>
 800becc:	6811      	ldr	r1, [r2, #0]
 800bece:	1855      	adds	r5, r2, r1
 800bed0:	42a5      	cmp	r5, r4
 800bed2:	d10b      	bne.n	800beec <_free_r+0x70>
 800bed4:	6824      	ldr	r4, [r4, #0]
 800bed6:	4421      	add	r1, r4
 800bed8:	1854      	adds	r4, r2, r1
 800beda:	42a3      	cmp	r3, r4
 800bedc:	6011      	str	r1, [r2, #0]
 800bede:	d1e0      	bne.n	800bea2 <_free_r+0x26>
 800bee0:	681c      	ldr	r4, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	6053      	str	r3, [r2, #4]
 800bee6:	4421      	add	r1, r4
 800bee8:	6011      	str	r1, [r2, #0]
 800beea:	e7da      	b.n	800bea2 <_free_r+0x26>
 800beec:	d902      	bls.n	800bef4 <_free_r+0x78>
 800beee:	230c      	movs	r3, #12
 800bef0:	6003      	str	r3, [r0, #0]
 800bef2:	e7d6      	b.n	800bea2 <_free_r+0x26>
 800bef4:	6825      	ldr	r5, [r4, #0]
 800bef6:	1961      	adds	r1, r4, r5
 800bef8:	428b      	cmp	r3, r1
 800befa:	bf04      	itt	eq
 800befc:	6819      	ldreq	r1, [r3, #0]
 800befe:	685b      	ldreq	r3, [r3, #4]
 800bf00:	6063      	str	r3, [r4, #4]
 800bf02:	bf04      	itt	eq
 800bf04:	1949      	addeq	r1, r1, r5
 800bf06:	6021      	streq	r1, [r4, #0]
 800bf08:	6054      	str	r4, [r2, #4]
 800bf0a:	e7ca      	b.n	800bea2 <_free_r+0x26>
 800bf0c:	b003      	add	sp, #12
 800bf0e:	bd30      	pop	{r4, r5, pc}
 800bf10:	2000cfa4 	.word	0x2000cfa4

0800bf14 <sbrk_aligned>:
 800bf14:	b570      	push	{r4, r5, r6, lr}
 800bf16:	4e0e      	ldr	r6, [pc, #56]	; (800bf50 <sbrk_aligned+0x3c>)
 800bf18:	460c      	mov	r4, r1
 800bf1a:	6831      	ldr	r1, [r6, #0]
 800bf1c:	4605      	mov	r5, r0
 800bf1e:	b911      	cbnz	r1, 800bf26 <sbrk_aligned+0x12>
 800bf20:	f000 fcd6 	bl	800c8d0 <_sbrk_r>
 800bf24:	6030      	str	r0, [r6, #0]
 800bf26:	4621      	mov	r1, r4
 800bf28:	4628      	mov	r0, r5
 800bf2a:	f000 fcd1 	bl	800c8d0 <_sbrk_r>
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	d00a      	beq.n	800bf48 <sbrk_aligned+0x34>
 800bf32:	1cc4      	adds	r4, r0, #3
 800bf34:	f024 0403 	bic.w	r4, r4, #3
 800bf38:	42a0      	cmp	r0, r4
 800bf3a:	d007      	beq.n	800bf4c <sbrk_aligned+0x38>
 800bf3c:	1a21      	subs	r1, r4, r0
 800bf3e:	4628      	mov	r0, r5
 800bf40:	f000 fcc6 	bl	800c8d0 <_sbrk_r>
 800bf44:	3001      	adds	r0, #1
 800bf46:	d101      	bne.n	800bf4c <sbrk_aligned+0x38>
 800bf48:	f04f 34ff 	mov.w	r4, #4294967295
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	bd70      	pop	{r4, r5, r6, pc}
 800bf50:	2000cfa8 	.word	0x2000cfa8

0800bf54 <_malloc_r>:
 800bf54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf58:	1ccd      	adds	r5, r1, #3
 800bf5a:	f025 0503 	bic.w	r5, r5, #3
 800bf5e:	3508      	adds	r5, #8
 800bf60:	2d0c      	cmp	r5, #12
 800bf62:	bf38      	it	cc
 800bf64:	250c      	movcc	r5, #12
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	4607      	mov	r7, r0
 800bf6a:	db01      	blt.n	800bf70 <_malloc_r+0x1c>
 800bf6c:	42a9      	cmp	r1, r5
 800bf6e:	d905      	bls.n	800bf7c <_malloc_r+0x28>
 800bf70:	230c      	movs	r3, #12
 800bf72:	603b      	str	r3, [r7, #0]
 800bf74:	2600      	movs	r6, #0
 800bf76:	4630      	mov	r0, r6
 800bf78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf7c:	4e2e      	ldr	r6, [pc, #184]	; (800c038 <_malloc_r+0xe4>)
 800bf7e:	f000 ffb9 	bl	800cef4 <__malloc_lock>
 800bf82:	6833      	ldr	r3, [r6, #0]
 800bf84:	461c      	mov	r4, r3
 800bf86:	bb34      	cbnz	r4, 800bfd6 <_malloc_r+0x82>
 800bf88:	4629      	mov	r1, r5
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f7ff ffc2 	bl	800bf14 <sbrk_aligned>
 800bf90:	1c43      	adds	r3, r0, #1
 800bf92:	4604      	mov	r4, r0
 800bf94:	d14d      	bne.n	800c032 <_malloc_r+0xde>
 800bf96:	6834      	ldr	r4, [r6, #0]
 800bf98:	4626      	mov	r6, r4
 800bf9a:	2e00      	cmp	r6, #0
 800bf9c:	d140      	bne.n	800c020 <_malloc_r+0xcc>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	4631      	mov	r1, r6
 800bfa2:	4638      	mov	r0, r7
 800bfa4:	eb04 0803 	add.w	r8, r4, r3
 800bfa8:	f000 fc92 	bl	800c8d0 <_sbrk_r>
 800bfac:	4580      	cmp	r8, r0
 800bfae:	d13a      	bne.n	800c026 <_malloc_r+0xd2>
 800bfb0:	6821      	ldr	r1, [r4, #0]
 800bfb2:	3503      	adds	r5, #3
 800bfb4:	1a6d      	subs	r5, r5, r1
 800bfb6:	f025 0503 	bic.w	r5, r5, #3
 800bfba:	3508      	adds	r5, #8
 800bfbc:	2d0c      	cmp	r5, #12
 800bfbe:	bf38      	it	cc
 800bfc0:	250c      	movcc	r5, #12
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	4638      	mov	r0, r7
 800bfc6:	f7ff ffa5 	bl	800bf14 <sbrk_aligned>
 800bfca:	3001      	adds	r0, #1
 800bfcc:	d02b      	beq.n	800c026 <_malloc_r+0xd2>
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	442b      	add	r3, r5
 800bfd2:	6023      	str	r3, [r4, #0]
 800bfd4:	e00e      	b.n	800bff4 <_malloc_r+0xa0>
 800bfd6:	6822      	ldr	r2, [r4, #0]
 800bfd8:	1b52      	subs	r2, r2, r5
 800bfda:	d41e      	bmi.n	800c01a <_malloc_r+0xc6>
 800bfdc:	2a0b      	cmp	r2, #11
 800bfde:	d916      	bls.n	800c00e <_malloc_r+0xba>
 800bfe0:	1961      	adds	r1, r4, r5
 800bfe2:	42a3      	cmp	r3, r4
 800bfe4:	6025      	str	r5, [r4, #0]
 800bfe6:	bf18      	it	ne
 800bfe8:	6059      	strne	r1, [r3, #4]
 800bfea:	6863      	ldr	r3, [r4, #4]
 800bfec:	bf08      	it	eq
 800bfee:	6031      	streq	r1, [r6, #0]
 800bff0:	5162      	str	r2, [r4, r5]
 800bff2:	604b      	str	r3, [r1, #4]
 800bff4:	4638      	mov	r0, r7
 800bff6:	f104 060b 	add.w	r6, r4, #11
 800bffa:	f000 ff81 	bl	800cf00 <__malloc_unlock>
 800bffe:	f026 0607 	bic.w	r6, r6, #7
 800c002:	1d23      	adds	r3, r4, #4
 800c004:	1af2      	subs	r2, r6, r3
 800c006:	d0b6      	beq.n	800bf76 <_malloc_r+0x22>
 800c008:	1b9b      	subs	r3, r3, r6
 800c00a:	50a3      	str	r3, [r4, r2]
 800c00c:	e7b3      	b.n	800bf76 <_malloc_r+0x22>
 800c00e:	6862      	ldr	r2, [r4, #4]
 800c010:	42a3      	cmp	r3, r4
 800c012:	bf0c      	ite	eq
 800c014:	6032      	streq	r2, [r6, #0]
 800c016:	605a      	strne	r2, [r3, #4]
 800c018:	e7ec      	b.n	800bff4 <_malloc_r+0xa0>
 800c01a:	4623      	mov	r3, r4
 800c01c:	6864      	ldr	r4, [r4, #4]
 800c01e:	e7b2      	b.n	800bf86 <_malloc_r+0x32>
 800c020:	4634      	mov	r4, r6
 800c022:	6876      	ldr	r6, [r6, #4]
 800c024:	e7b9      	b.n	800bf9a <_malloc_r+0x46>
 800c026:	230c      	movs	r3, #12
 800c028:	603b      	str	r3, [r7, #0]
 800c02a:	4638      	mov	r0, r7
 800c02c:	f000 ff68 	bl	800cf00 <__malloc_unlock>
 800c030:	e7a1      	b.n	800bf76 <_malloc_r+0x22>
 800c032:	6025      	str	r5, [r4, #0]
 800c034:	e7de      	b.n	800bff4 <_malloc_r+0xa0>
 800c036:	bf00      	nop
 800c038:	2000cfa4 	.word	0x2000cfa4

0800c03c <__ssputs_r>:
 800c03c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c040:	688e      	ldr	r6, [r1, #8]
 800c042:	429e      	cmp	r6, r3
 800c044:	4682      	mov	sl, r0
 800c046:	460c      	mov	r4, r1
 800c048:	4690      	mov	r8, r2
 800c04a:	461f      	mov	r7, r3
 800c04c:	d838      	bhi.n	800c0c0 <__ssputs_r+0x84>
 800c04e:	898a      	ldrh	r2, [r1, #12]
 800c050:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c054:	d032      	beq.n	800c0bc <__ssputs_r+0x80>
 800c056:	6825      	ldr	r5, [r4, #0]
 800c058:	6909      	ldr	r1, [r1, #16]
 800c05a:	eba5 0901 	sub.w	r9, r5, r1
 800c05e:	6965      	ldr	r5, [r4, #20]
 800c060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c064:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c068:	3301      	adds	r3, #1
 800c06a:	444b      	add	r3, r9
 800c06c:	106d      	asrs	r5, r5, #1
 800c06e:	429d      	cmp	r5, r3
 800c070:	bf38      	it	cc
 800c072:	461d      	movcc	r5, r3
 800c074:	0553      	lsls	r3, r2, #21
 800c076:	d531      	bpl.n	800c0dc <__ssputs_r+0xa0>
 800c078:	4629      	mov	r1, r5
 800c07a:	f7ff ff6b 	bl	800bf54 <_malloc_r>
 800c07e:	4606      	mov	r6, r0
 800c080:	b950      	cbnz	r0, 800c098 <__ssputs_r+0x5c>
 800c082:	230c      	movs	r3, #12
 800c084:	f8ca 3000 	str.w	r3, [sl]
 800c088:	89a3      	ldrh	r3, [r4, #12]
 800c08a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	f04f 30ff 	mov.w	r0, #4294967295
 800c094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c098:	6921      	ldr	r1, [r4, #16]
 800c09a:	464a      	mov	r2, r9
 800c09c:	f7ff fe42 	bl	800bd24 <memcpy>
 800c0a0:	89a3      	ldrh	r3, [r4, #12]
 800c0a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0aa:	81a3      	strh	r3, [r4, #12]
 800c0ac:	6126      	str	r6, [r4, #16]
 800c0ae:	6165      	str	r5, [r4, #20]
 800c0b0:	444e      	add	r6, r9
 800c0b2:	eba5 0509 	sub.w	r5, r5, r9
 800c0b6:	6026      	str	r6, [r4, #0]
 800c0b8:	60a5      	str	r5, [r4, #8]
 800c0ba:	463e      	mov	r6, r7
 800c0bc:	42be      	cmp	r6, r7
 800c0be:	d900      	bls.n	800c0c2 <__ssputs_r+0x86>
 800c0c0:	463e      	mov	r6, r7
 800c0c2:	6820      	ldr	r0, [r4, #0]
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	4641      	mov	r1, r8
 800c0c8:	f000 fefa 	bl	800cec0 <memmove>
 800c0cc:	68a3      	ldr	r3, [r4, #8]
 800c0ce:	1b9b      	subs	r3, r3, r6
 800c0d0:	60a3      	str	r3, [r4, #8]
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	4433      	add	r3, r6
 800c0d6:	6023      	str	r3, [r4, #0]
 800c0d8:	2000      	movs	r0, #0
 800c0da:	e7db      	b.n	800c094 <__ssputs_r+0x58>
 800c0dc:	462a      	mov	r2, r5
 800c0de:	f000 ff15 	bl	800cf0c <_realloc_r>
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d1e1      	bne.n	800c0ac <__ssputs_r+0x70>
 800c0e8:	6921      	ldr	r1, [r4, #16]
 800c0ea:	4650      	mov	r0, sl
 800c0ec:	f7ff fec6 	bl	800be7c <_free_r>
 800c0f0:	e7c7      	b.n	800c082 <__ssputs_r+0x46>
	...

0800c0f4 <_svfiprintf_r>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	4698      	mov	r8, r3
 800c0fa:	898b      	ldrh	r3, [r1, #12]
 800c0fc:	061b      	lsls	r3, r3, #24
 800c0fe:	b09d      	sub	sp, #116	; 0x74
 800c100:	4607      	mov	r7, r0
 800c102:	460d      	mov	r5, r1
 800c104:	4614      	mov	r4, r2
 800c106:	d50e      	bpl.n	800c126 <_svfiprintf_r+0x32>
 800c108:	690b      	ldr	r3, [r1, #16]
 800c10a:	b963      	cbnz	r3, 800c126 <_svfiprintf_r+0x32>
 800c10c:	2140      	movs	r1, #64	; 0x40
 800c10e:	f7ff ff21 	bl	800bf54 <_malloc_r>
 800c112:	6028      	str	r0, [r5, #0]
 800c114:	6128      	str	r0, [r5, #16]
 800c116:	b920      	cbnz	r0, 800c122 <_svfiprintf_r+0x2e>
 800c118:	230c      	movs	r3, #12
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	f04f 30ff 	mov.w	r0, #4294967295
 800c120:	e0d1      	b.n	800c2c6 <_svfiprintf_r+0x1d2>
 800c122:	2340      	movs	r3, #64	; 0x40
 800c124:	616b      	str	r3, [r5, #20]
 800c126:	2300      	movs	r3, #0
 800c128:	9309      	str	r3, [sp, #36]	; 0x24
 800c12a:	2320      	movs	r3, #32
 800c12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c130:	f8cd 800c 	str.w	r8, [sp, #12]
 800c134:	2330      	movs	r3, #48	; 0x30
 800c136:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c2e0 <_svfiprintf_r+0x1ec>
 800c13a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c13e:	f04f 0901 	mov.w	r9, #1
 800c142:	4623      	mov	r3, r4
 800c144:	469a      	mov	sl, r3
 800c146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c14a:	b10a      	cbz	r2, 800c150 <_svfiprintf_r+0x5c>
 800c14c:	2a25      	cmp	r2, #37	; 0x25
 800c14e:	d1f9      	bne.n	800c144 <_svfiprintf_r+0x50>
 800c150:	ebba 0b04 	subs.w	fp, sl, r4
 800c154:	d00b      	beq.n	800c16e <_svfiprintf_r+0x7a>
 800c156:	465b      	mov	r3, fp
 800c158:	4622      	mov	r2, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	4638      	mov	r0, r7
 800c15e:	f7ff ff6d 	bl	800c03c <__ssputs_r>
 800c162:	3001      	adds	r0, #1
 800c164:	f000 80aa 	beq.w	800c2bc <_svfiprintf_r+0x1c8>
 800c168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c16a:	445a      	add	r2, fp
 800c16c:	9209      	str	r2, [sp, #36]	; 0x24
 800c16e:	f89a 3000 	ldrb.w	r3, [sl]
 800c172:	2b00      	cmp	r3, #0
 800c174:	f000 80a2 	beq.w	800c2bc <_svfiprintf_r+0x1c8>
 800c178:	2300      	movs	r3, #0
 800c17a:	f04f 32ff 	mov.w	r2, #4294967295
 800c17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c182:	f10a 0a01 	add.w	sl, sl, #1
 800c186:	9304      	str	r3, [sp, #16]
 800c188:	9307      	str	r3, [sp, #28]
 800c18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c18e:	931a      	str	r3, [sp, #104]	; 0x68
 800c190:	4654      	mov	r4, sl
 800c192:	2205      	movs	r2, #5
 800c194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c198:	4851      	ldr	r0, [pc, #324]	; (800c2e0 <_svfiprintf_r+0x1ec>)
 800c19a:	f7f3 fff9 	bl	8000190 <memchr>
 800c19e:	9a04      	ldr	r2, [sp, #16]
 800c1a0:	b9d8      	cbnz	r0, 800c1da <_svfiprintf_r+0xe6>
 800c1a2:	06d0      	lsls	r0, r2, #27
 800c1a4:	bf44      	itt	mi
 800c1a6:	2320      	movmi	r3, #32
 800c1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1ac:	0711      	lsls	r1, r2, #28
 800c1ae:	bf44      	itt	mi
 800c1b0:	232b      	movmi	r3, #43	; 0x2b
 800c1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800c1bc:	d015      	beq.n	800c1ea <_svfiprintf_r+0xf6>
 800c1be:	9a07      	ldr	r2, [sp, #28]
 800c1c0:	4654      	mov	r4, sl
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	f04f 0c0a 	mov.w	ip, #10
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1ce:	3b30      	subs	r3, #48	; 0x30
 800c1d0:	2b09      	cmp	r3, #9
 800c1d2:	d94e      	bls.n	800c272 <_svfiprintf_r+0x17e>
 800c1d4:	b1b0      	cbz	r0, 800c204 <_svfiprintf_r+0x110>
 800c1d6:	9207      	str	r2, [sp, #28]
 800c1d8:	e014      	b.n	800c204 <_svfiprintf_r+0x110>
 800c1da:	eba0 0308 	sub.w	r3, r0, r8
 800c1de:	fa09 f303 	lsl.w	r3, r9, r3
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	9304      	str	r3, [sp, #16]
 800c1e6:	46a2      	mov	sl, r4
 800c1e8:	e7d2      	b.n	800c190 <_svfiprintf_r+0x9c>
 800c1ea:	9b03      	ldr	r3, [sp, #12]
 800c1ec:	1d19      	adds	r1, r3, #4
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	9103      	str	r1, [sp, #12]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	bfbb      	ittet	lt
 800c1f6:	425b      	neglt	r3, r3
 800c1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1fc:	9307      	strge	r3, [sp, #28]
 800c1fe:	9307      	strlt	r3, [sp, #28]
 800c200:	bfb8      	it	lt
 800c202:	9204      	strlt	r2, [sp, #16]
 800c204:	7823      	ldrb	r3, [r4, #0]
 800c206:	2b2e      	cmp	r3, #46	; 0x2e
 800c208:	d10c      	bne.n	800c224 <_svfiprintf_r+0x130>
 800c20a:	7863      	ldrb	r3, [r4, #1]
 800c20c:	2b2a      	cmp	r3, #42	; 0x2a
 800c20e:	d135      	bne.n	800c27c <_svfiprintf_r+0x188>
 800c210:	9b03      	ldr	r3, [sp, #12]
 800c212:	1d1a      	adds	r2, r3, #4
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	9203      	str	r2, [sp, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	bfb8      	it	lt
 800c21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800c220:	3402      	adds	r4, #2
 800c222:	9305      	str	r3, [sp, #20]
 800c224:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c2f0 <_svfiprintf_r+0x1fc>
 800c228:	7821      	ldrb	r1, [r4, #0]
 800c22a:	2203      	movs	r2, #3
 800c22c:	4650      	mov	r0, sl
 800c22e:	f7f3 ffaf 	bl	8000190 <memchr>
 800c232:	b140      	cbz	r0, 800c246 <_svfiprintf_r+0x152>
 800c234:	2340      	movs	r3, #64	; 0x40
 800c236:	eba0 000a 	sub.w	r0, r0, sl
 800c23a:	fa03 f000 	lsl.w	r0, r3, r0
 800c23e:	9b04      	ldr	r3, [sp, #16]
 800c240:	4303      	orrs	r3, r0
 800c242:	3401      	adds	r4, #1
 800c244:	9304      	str	r3, [sp, #16]
 800c246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c24a:	4826      	ldr	r0, [pc, #152]	; (800c2e4 <_svfiprintf_r+0x1f0>)
 800c24c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c250:	2206      	movs	r2, #6
 800c252:	f7f3 ff9d 	bl	8000190 <memchr>
 800c256:	2800      	cmp	r0, #0
 800c258:	d038      	beq.n	800c2cc <_svfiprintf_r+0x1d8>
 800c25a:	4b23      	ldr	r3, [pc, #140]	; (800c2e8 <_svfiprintf_r+0x1f4>)
 800c25c:	bb1b      	cbnz	r3, 800c2a6 <_svfiprintf_r+0x1b2>
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	3307      	adds	r3, #7
 800c262:	f023 0307 	bic.w	r3, r3, #7
 800c266:	3308      	adds	r3, #8
 800c268:	9303      	str	r3, [sp, #12]
 800c26a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26c:	4433      	add	r3, r6
 800c26e:	9309      	str	r3, [sp, #36]	; 0x24
 800c270:	e767      	b.n	800c142 <_svfiprintf_r+0x4e>
 800c272:	fb0c 3202 	mla	r2, ip, r2, r3
 800c276:	460c      	mov	r4, r1
 800c278:	2001      	movs	r0, #1
 800c27a:	e7a5      	b.n	800c1c8 <_svfiprintf_r+0xd4>
 800c27c:	2300      	movs	r3, #0
 800c27e:	3401      	adds	r4, #1
 800c280:	9305      	str	r3, [sp, #20]
 800c282:	4619      	mov	r1, r3
 800c284:	f04f 0c0a 	mov.w	ip, #10
 800c288:	4620      	mov	r0, r4
 800c28a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c28e:	3a30      	subs	r2, #48	; 0x30
 800c290:	2a09      	cmp	r2, #9
 800c292:	d903      	bls.n	800c29c <_svfiprintf_r+0x1a8>
 800c294:	2b00      	cmp	r3, #0
 800c296:	d0c5      	beq.n	800c224 <_svfiprintf_r+0x130>
 800c298:	9105      	str	r1, [sp, #20]
 800c29a:	e7c3      	b.n	800c224 <_svfiprintf_r+0x130>
 800c29c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2a0:	4604      	mov	r4, r0
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e7f0      	b.n	800c288 <_svfiprintf_r+0x194>
 800c2a6:	ab03      	add	r3, sp, #12
 800c2a8:	9300      	str	r3, [sp, #0]
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	4b0f      	ldr	r3, [pc, #60]	; (800c2ec <_svfiprintf_r+0x1f8>)
 800c2ae:	a904      	add	r1, sp, #16
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f3af 8000 	nop.w
 800c2b6:	1c42      	adds	r2, r0, #1
 800c2b8:	4606      	mov	r6, r0
 800c2ba:	d1d6      	bne.n	800c26a <_svfiprintf_r+0x176>
 800c2bc:	89ab      	ldrh	r3, [r5, #12]
 800c2be:	065b      	lsls	r3, r3, #25
 800c2c0:	f53f af2c 	bmi.w	800c11c <_svfiprintf_r+0x28>
 800c2c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2c6:	b01d      	add	sp, #116	; 0x74
 800c2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2cc:	ab03      	add	r3, sp, #12
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	462a      	mov	r2, r5
 800c2d2:	4b06      	ldr	r3, [pc, #24]	; (800c2ec <_svfiprintf_r+0x1f8>)
 800c2d4:	a904      	add	r1, sp, #16
 800c2d6:	4638      	mov	r0, r7
 800c2d8:	f000 f9d4 	bl	800c684 <_printf_i>
 800c2dc:	e7eb      	b.n	800c2b6 <_svfiprintf_r+0x1c2>
 800c2de:	bf00      	nop
 800c2e0:	0800db7e 	.word	0x0800db7e
 800c2e4:	0800db88 	.word	0x0800db88
 800c2e8:	00000000 	.word	0x00000000
 800c2ec:	0800c03d 	.word	0x0800c03d
 800c2f0:	0800db84 	.word	0x0800db84

0800c2f4 <__sfputc_r>:
 800c2f4:	6893      	ldr	r3, [r2, #8]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	b410      	push	{r4}
 800c2fc:	6093      	str	r3, [r2, #8]
 800c2fe:	da08      	bge.n	800c312 <__sfputc_r+0x1e>
 800c300:	6994      	ldr	r4, [r2, #24]
 800c302:	42a3      	cmp	r3, r4
 800c304:	db01      	blt.n	800c30a <__sfputc_r+0x16>
 800c306:	290a      	cmp	r1, #10
 800c308:	d103      	bne.n	800c312 <__sfputc_r+0x1e>
 800c30a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c30e:	f000 baef 	b.w	800c8f0 <__swbuf_r>
 800c312:	6813      	ldr	r3, [r2, #0]
 800c314:	1c58      	adds	r0, r3, #1
 800c316:	6010      	str	r0, [r2, #0]
 800c318:	7019      	strb	r1, [r3, #0]
 800c31a:	4608      	mov	r0, r1
 800c31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <__sfputs_r>:
 800c322:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c324:	4606      	mov	r6, r0
 800c326:	460f      	mov	r7, r1
 800c328:	4614      	mov	r4, r2
 800c32a:	18d5      	adds	r5, r2, r3
 800c32c:	42ac      	cmp	r4, r5
 800c32e:	d101      	bne.n	800c334 <__sfputs_r+0x12>
 800c330:	2000      	movs	r0, #0
 800c332:	e007      	b.n	800c344 <__sfputs_r+0x22>
 800c334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c338:	463a      	mov	r2, r7
 800c33a:	4630      	mov	r0, r6
 800c33c:	f7ff ffda 	bl	800c2f4 <__sfputc_r>
 800c340:	1c43      	adds	r3, r0, #1
 800c342:	d1f3      	bne.n	800c32c <__sfputs_r+0xa>
 800c344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c348 <_vfiprintf_r>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	460d      	mov	r5, r1
 800c34e:	b09d      	sub	sp, #116	; 0x74
 800c350:	4614      	mov	r4, r2
 800c352:	4698      	mov	r8, r3
 800c354:	4606      	mov	r6, r0
 800c356:	b118      	cbz	r0, 800c360 <_vfiprintf_r+0x18>
 800c358:	6983      	ldr	r3, [r0, #24]
 800c35a:	b90b      	cbnz	r3, 800c360 <_vfiprintf_r+0x18>
 800c35c:	f000 fcaa 	bl	800ccb4 <__sinit>
 800c360:	4b89      	ldr	r3, [pc, #548]	; (800c588 <_vfiprintf_r+0x240>)
 800c362:	429d      	cmp	r5, r3
 800c364:	d11b      	bne.n	800c39e <_vfiprintf_r+0x56>
 800c366:	6875      	ldr	r5, [r6, #4]
 800c368:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c36a:	07d9      	lsls	r1, r3, #31
 800c36c:	d405      	bmi.n	800c37a <_vfiprintf_r+0x32>
 800c36e:	89ab      	ldrh	r3, [r5, #12]
 800c370:	059a      	lsls	r2, r3, #22
 800c372:	d402      	bmi.n	800c37a <_vfiprintf_r+0x32>
 800c374:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c376:	f000 fd3b 	bl	800cdf0 <__retarget_lock_acquire_recursive>
 800c37a:	89ab      	ldrh	r3, [r5, #12]
 800c37c:	071b      	lsls	r3, r3, #28
 800c37e:	d501      	bpl.n	800c384 <_vfiprintf_r+0x3c>
 800c380:	692b      	ldr	r3, [r5, #16]
 800c382:	b9eb      	cbnz	r3, 800c3c0 <_vfiprintf_r+0x78>
 800c384:	4629      	mov	r1, r5
 800c386:	4630      	mov	r0, r6
 800c388:	f000 fb04 	bl	800c994 <__swsetup_r>
 800c38c:	b1c0      	cbz	r0, 800c3c0 <_vfiprintf_r+0x78>
 800c38e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c390:	07dc      	lsls	r4, r3, #31
 800c392:	d50e      	bpl.n	800c3b2 <_vfiprintf_r+0x6a>
 800c394:	f04f 30ff 	mov.w	r0, #4294967295
 800c398:	b01d      	add	sp, #116	; 0x74
 800c39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39e:	4b7b      	ldr	r3, [pc, #492]	; (800c58c <_vfiprintf_r+0x244>)
 800c3a0:	429d      	cmp	r5, r3
 800c3a2:	d101      	bne.n	800c3a8 <_vfiprintf_r+0x60>
 800c3a4:	68b5      	ldr	r5, [r6, #8]
 800c3a6:	e7df      	b.n	800c368 <_vfiprintf_r+0x20>
 800c3a8:	4b79      	ldr	r3, [pc, #484]	; (800c590 <_vfiprintf_r+0x248>)
 800c3aa:	429d      	cmp	r5, r3
 800c3ac:	bf08      	it	eq
 800c3ae:	68f5      	ldreq	r5, [r6, #12]
 800c3b0:	e7da      	b.n	800c368 <_vfiprintf_r+0x20>
 800c3b2:	89ab      	ldrh	r3, [r5, #12]
 800c3b4:	0598      	lsls	r0, r3, #22
 800c3b6:	d4ed      	bmi.n	800c394 <_vfiprintf_r+0x4c>
 800c3b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c3ba:	f000 fd1a 	bl	800cdf2 <__retarget_lock_release_recursive>
 800c3be:	e7e9      	b.n	800c394 <_vfiprintf_r+0x4c>
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c4:	2320      	movs	r3, #32
 800c3c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3ce:	2330      	movs	r3, #48	; 0x30
 800c3d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c594 <_vfiprintf_r+0x24c>
 800c3d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d8:	f04f 0901 	mov.w	r9, #1
 800c3dc:	4623      	mov	r3, r4
 800c3de:	469a      	mov	sl, r3
 800c3e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e4:	b10a      	cbz	r2, 800c3ea <_vfiprintf_r+0xa2>
 800c3e6:	2a25      	cmp	r2, #37	; 0x25
 800c3e8:	d1f9      	bne.n	800c3de <_vfiprintf_r+0x96>
 800c3ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ee:	d00b      	beq.n	800c408 <_vfiprintf_r+0xc0>
 800c3f0:	465b      	mov	r3, fp
 800c3f2:	4622      	mov	r2, r4
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f7ff ff93 	bl	800c322 <__sfputs_r>
 800c3fc:	3001      	adds	r0, #1
 800c3fe:	f000 80aa 	beq.w	800c556 <_vfiprintf_r+0x20e>
 800c402:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c404:	445a      	add	r2, fp
 800c406:	9209      	str	r2, [sp, #36]	; 0x24
 800c408:	f89a 3000 	ldrb.w	r3, [sl]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 80a2 	beq.w	800c556 <_vfiprintf_r+0x20e>
 800c412:	2300      	movs	r3, #0
 800c414:	f04f 32ff 	mov.w	r2, #4294967295
 800c418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c41c:	f10a 0a01 	add.w	sl, sl, #1
 800c420:	9304      	str	r3, [sp, #16]
 800c422:	9307      	str	r3, [sp, #28]
 800c424:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c428:	931a      	str	r3, [sp, #104]	; 0x68
 800c42a:	4654      	mov	r4, sl
 800c42c:	2205      	movs	r2, #5
 800c42e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c432:	4858      	ldr	r0, [pc, #352]	; (800c594 <_vfiprintf_r+0x24c>)
 800c434:	f7f3 feac 	bl	8000190 <memchr>
 800c438:	9a04      	ldr	r2, [sp, #16]
 800c43a:	b9d8      	cbnz	r0, 800c474 <_vfiprintf_r+0x12c>
 800c43c:	06d1      	lsls	r1, r2, #27
 800c43e:	bf44      	itt	mi
 800c440:	2320      	movmi	r3, #32
 800c442:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c446:	0713      	lsls	r3, r2, #28
 800c448:	bf44      	itt	mi
 800c44a:	232b      	movmi	r3, #43	; 0x2b
 800c44c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c450:	f89a 3000 	ldrb.w	r3, [sl]
 800c454:	2b2a      	cmp	r3, #42	; 0x2a
 800c456:	d015      	beq.n	800c484 <_vfiprintf_r+0x13c>
 800c458:	9a07      	ldr	r2, [sp, #28]
 800c45a:	4654      	mov	r4, sl
 800c45c:	2000      	movs	r0, #0
 800c45e:	f04f 0c0a 	mov.w	ip, #10
 800c462:	4621      	mov	r1, r4
 800c464:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c468:	3b30      	subs	r3, #48	; 0x30
 800c46a:	2b09      	cmp	r3, #9
 800c46c:	d94e      	bls.n	800c50c <_vfiprintf_r+0x1c4>
 800c46e:	b1b0      	cbz	r0, 800c49e <_vfiprintf_r+0x156>
 800c470:	9207      	str	r2, [sp, #28]
 800c472:	e014      	b.n	800c49e <_vfiprintf_r+0x156>
 800c474:	eba0 0308 	sub.w	r3, r0, r8
 800c478:	fa09 f303 	lsl.w	r3, r9, r3
 800c47c:	4313      	orrs	r3, r2
 800c47e:	9304      	str	r3, [sp, #16]
 800c480:	46a2      	mov	sl, r4
 800c482:	e7d2      	b.n	800c42a <_vfiprintf_r+0xe2>
 800c484:	9b03      	ldr	r3, [sp, #12]
 800c486:	1d19      	adds	r1, r3, #4
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	9103      	str	r1, [sp, #12]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	bfbb      	ittet	lt
 800c490:	425b      	neglt	r3, r3
 800c492:	f042 0202 	orrlt.w	r2, r2, #2
 800c496:	9307      	strge	r3, [sp, #28]
 800c498:	9307      	strlt	r3, [sp, #28]
 800c49a:	bfb8      	it	lt
 800c49c:	9204      	strlt	r2, [sp, #16]
 800c49e:	7823      	ldrb	r3, [r4, #0]
 800c4a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c4a2:	d10c      	bne.n	800c4be <_vfiprintf_r+0x176>
 800c4a4:	7863      	ldrb	r3, [r4, #1]
 800c4a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a8:	d135      	bne.n	800c516 <_vfiprintf_r+0x1ce>
 800c4aa:	9b03      	ldr	r3, [sp, #12]
 800c4ac:	1d1a      	adds	r2, r3, #4
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	9203      	str	r2, [sp, #12]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	bfb8      	it	lt
 800c4b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4ba:	3402      	adds	r4, #2
 800c4bc:	9305      	str	r3, [sp, #20]
 800c4be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c5a4 <_vfiprintf_r+0x25c>
 800c4c2:	7821      	ldrb	r1, [r4, #0]
 800c4c4:	2203      	movs	r2, #3
 800c4c6:	4650      	mov	r0, sl
 800c4c8:	f7f3 fe62 	bl	8000190 <memchr>
 800c4cc:	b140      	cbz	r0, 800c4e0 <_vfiprintf_r+0x198>
 800c4ce:	2340      	movs	r3, #64	; 0x40
 800c4d0:	eba0 000a 	sub.w	r0, r0, sl
 800c4d4:	fa03 f000 	lsl.w	r0, r3, r0
 800c4d8:	9b04      	ldr	r3, [sp, #16]
 800c4da:	4303      	orrs	r3, r0
 800c4dc:	3401      	adds	r4, #1
 800c4de:	9304      	str	r3, [sp, #16]
 800c4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e4:	482c      	ldr	r0, [pc, #176]	; (800c598 <_vfiprintf_r+0x250>)
 800c4e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4ea:	2206      	movs	r2, #6
 800c4ec:	f7f3 fe50 	bl	8000190 <memchr>
 800c4f0:	2800      	cmp	r0, #0
 800c4f2:	d03f      	beq.n	800c574 <_vfiprintf_r+0x22c>
 800c4f4:	4b29      	ldr	r3, [pc, #164]	; (800c59c <_vfiprintf_r+0x254>)
 800c4f6:	bb1b      	cbnz	r3, 800c540 <_vfiprintf_r+0x1f8>
 800c4f8:	9b03      	ldr	r3, [sp, #12]
 800c4fa:	3307      	adds	r3, #7
 800c4fc:	f023 0307 	bic.w	r3, r3, #7
 800c500:	3308      	adds	r3, #8
 800c502:	9303      	str	r3, [sp, #12]
 800c504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c506:	443b      	add	r3, r7
 800c508:	9309      	str	r3, [sp, #36]	; 0x24
 800c50a:	e767      	b.n	800c3dc <_vfiprintf_r+0x94>
 800c50c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c510:	460c      	mov	r4, r1
 800c512:	2001      	movs	r0, #1
 800c514:	e7a5      	b.n	800c462 <_vfiprintf_r+0x11a>
 800c516:	2300      	movs	r3, #0
 800c518:	3401      	adds	r4, #1
 800c51a:	9305      	str	r3, [sp, #20]
 800c51c:	4619      	mov	r1, r3
 800c51e:	f04f 0c0a 	mov.w	ip, #10
 800c522:	4620      	mov	r0, r4
 800c524:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c528:	3a30      	subs	r2, #48	; 0x30
 800c52a:	2a09      	cmp	r2, #9
 800c52c:	d903      	bls.n	800c536 <_vfiprintf_r+0x1ee>
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d0c5      	beq.n	800c4be <_vfiprintf_r+0x176>
 800c532:	9105      	str	r1, [sp, #20]
 800c534:	e7c3      	b.n	800c4be <_vfiprintf_r+0x176>
 800c536:	fb0c 2101 	mla	r1, ip, r1, r2
 800c53a:	4604      	mov	r4, r0
 800c53c:	2301      	movs	r3, #1
 800c53e:	e7f0      	b.n	800c522 <_vfiprintf_r+0x1da>
 800c540:	ab03      	add	r3, sp, #12
 800c542:	9300      	str	r3, [sp, #0]
 800c544:	462a      	mov	r2, r5
 800c546:	4b16      	ldr	r3, [pc, #88]	; (800c5a0 <_vfiprintf_r+0x258>)
 800c548:	a904      	add	r1, sp, #16
 800c54a:	4630      	mov	r0, r6
 800c54c:	f3af 8000 	nop.w
 800c550:	4607      	mov	r7, r0
 800c552:	1c78      	adds	r0, r7, #1
 800c554:	d1d6      	bne.n	800c504 <_vfiprintf_r+0x1bc>
 800c556:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c558:	07d9      	lsls	r1, r3, #31
 800c55a:	d405      	bmi.n	800c568 <_vfiprintf_r+0x220>
 800c55c:	89ab      	ldrh	r3, [r5, #12]
 800c55e:	059a      	lsls	r2, r3, #22
 800c560:	d402      	bmi.n	800c568 <_vfiprintf_r+0x220>
 800c562:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c564:	f000 fc45 	bl	800cdf2 <__retarget_lock_release_recursive>
 800c568:	89ab      	ldrh	r3, [r5, #12]
 800c56a:	065b      	lsls	r3, r3, #25
 800c56c:	f53f af12 	bmi.w	800c394 <_vfiprintf_r+0x4c>
 800c570:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c572:	e711      	b.n	800c398 <_vfiprintf_r+0x50>
 800c574:	ab03      	add	r3, sp, #12
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	462a      	mov	r2, r5
 800c57a:	4b09      	ldr	r3, [pc, #36]	; (800c5a0 <_vfiprintf_r+0x258>)
 800c57c:	a904      	add	r1, sp, #16
 800c57e:	4630      	mov	r0, r6
 800c580:	f000 f880 	bl	800c684 <_printf_i>
 800c584:	e7e4      	b.n	800c550 <_vfiprintf_r+0x208>
 800c586:	bf00      	nop
 800c588:	0800dbd4 	.word	0x0800dbd4
 800c58c:	0800dbf4 	.word	0x0800dbf4
 800c590:	0800dbb4 	.word	0x0800dbb4
 800c594:	0800db7e 	.word	0x0800db7e
 800c598:	0800db88 	.word	0x0800db88
 800c59c:	00000000 	.word	0x00000000
 800c5a0:	0800c323 	.word	0x0800c323
 800c5a4:	0800db84 	.word	0x0800db84

0800c5a8 <_printf_common>:
 800c5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5ac:	4616      	mov	r6, r2
 800c5ae:	4699      	mov	r9, r3
 800c5b0:	688a      	ldr	r2, [r1, #8]
 800c5b2:	690b      	ldr	r3, [r1, #16]
 800c5b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	bfb8      	it	lt
 800c5bc:	4613      	movlt	r3, r2
 800c5be:	6033      	str	r3, [r6, #0]
 800c5c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5c4:	4607      	mov	r7, r0
 800c5c6:	460c      	mov	r4, r1
 800c5c8:	b10a      	cbz	r2, 800c5ce <_printf_common+0x26>
 800c5ca:	3301      	adds	r3, #1
 800c5cc:	6033      	str	r3, [r6, #0]
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	0699      	lsls	r1, r3, #26
 800c5d2:	bf42      	ittt	mi
 800c5d4:	6833      	ldrmi	r3, [r6, #0]
 800c5d6:	3302      	addmi	r3, #2
 800c5d8:	6033      	strmi	r3, [r6, #0]
 800c5da:	6825      	ldr	r5, [r4, #0]
 800c5dc:	f015 0506 	ands.w	r5, r5, #6
 800c5e0:	d106      	bne.n	800c5f0 <_printf_common+0x48>
 800c5e2:	f104 0a19 	add.w	sl, r4, #25
 800c5e6:	68e3      	ldr	r3, [r4, #12]
 800c5e8:	6832      	ldr	r2, [r6, #0]
 800c5ea:	1a9b      	subs	r3, r3, r2
 800c5ec:	42ab      	cmp	r3, r5
 800c5ee:	dc26      	bgt.n	800c63e <_printf_common+0x96>
 800c5f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5f4:	1e13      	subs	r3, r2, #0
 800c5f6:	6822      	ldr	r2, [r4, #0]
 800c5f8:	bf18      	it	ne
 800c5fa:	2301      	movne	r3, #1
 800c5fc:	0692      	lsls	r2, r2, #26
 800c5fe:	d42b      	bmi.n	800c658 <_printf_common+0xb0>
 800c600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c604:	4649      	mov	r1, r9
 800c606:	4638      	mov	r0, r7
 800c608:	47c0      	blx	r8
 800c60a:	3001      	adds	r0, #1
 800c60c:	d01e      	beq.n	800c64c <_printf_common+0xa4>
 800c60e:	6823      	ldr	r3, [r4, #0]
 800c610:	68e5      	ldr	r5, [r4, #12]
 800c612:	6832      	ldr	r2, [r6, #0]
 800c614:	f003 0306 	and.w	r3, r3, #6
 800c618:	2b04      	cmp	r3, #4
 800c61a:	bf08      	it	eq
 800c61c:	1aad      	subeq	r5, r5, r2
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	6922      	ldr	r2, [r4, #16]
 800c622:	bf0c      	ite	eq
 800c624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c628:	2500      	movne	r5, #0
 800c62a:	4293      	cmp	r3, r2
 800c62c:	bfc4      	itt	gt
 800c62e:	1a9b      	subgt	r3, r3, r2
 800c630:	18ed      	addgt	r5, r5, r3
 800c632:	2600      	movs	r6, #0
 800c634:	341a      	adds	r4, #26
 800c636:	42b5      	cmp	r5, r6
 800c638:	d11a      	bne.n	800c670 <_printf_common+0xc8>
 800c63a:	2000      	movs	r0, #0
 800c63c:	e008      	b.n	800c650 <_printf_common+0xa8>
 800c63e:	2301      	movs	r3, #1
 800c640:	4652      	mov	r2, sl
 800c642:	4649      	mov	r1, r9
 800c644:	4638      	mov	r0, r7
 800c646:	47c0      	blx	r8
 800c648:	3001      	adds	r0, #1
 800c64a:	d103      	bne.n	800c654 <_printf_common+0xac>
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c654:	3501      	adds	r5, #1
 800c656:	e7c6      	b.n	800c5e6 <_printf_common+0x3e>
 800c658:	18e1      	adds	r1, r4, r3
 800c65a:	1c5a      	adds	r2, r3, #1
 800c65c:	2030      	movs	r0, #48	; 0x30
 800c65e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c662:	4422      	add	r2, r4
 800c664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c66c:	3302      	adds	r3, #2
 800c66e:	e7c7      	b.n	800c600 <_printf_common+0x58>
 800c670:	2301      	movs	r3, #1
 800c672:	4622      	mov	r2, r4
 800c674:	4649      	mov	r1, r9
 800c676:	4638      	mov	r0, r7
 800c678:	47c0      	blx	r8
 800c67a:	3001      	adds	r0, #1
 800c67c:	d0e6      	beq.n	800c64c <_printf_common+0xa4>
 800c67e:	3601      	adds	r6, #1
 800c680:	e7d9      	b.n	800c636 <_printf_common+0x8e>
	...

0800c684 <_printf_i>:
 800c684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c688:	7e0f      	ldrb	r7, [r1, #24]
 800c68a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c68c:	2f78      	cmp	r7, #120	; 0x78
 800c68e:	4691      	mov	r9, r2
 800c690:	4680      	mov	r8, r0
 800c692:	460c      	mov	r4, r1
 800c694:	469a      	mov	sl, r3
 800c696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c69a:	d807      	bhi.n	800c6ac <_printf_i+0x28>
 800c69c:	2f62      	cmp	r7, #98	; 0x62
 800c69e:	d80a      	bhi.n	800c6b6 <_printf_i+0x32>
 800c6a0:	2f00      	cmp	r7, #0
 800c6a2:	f000 80d8 	beq.w	800c856 <_printf_i+0x1d2>
 800c6a6:	2f58      	cmp	r7, #88	; 0x58
 800c6a8:	f000 80a3 	beq.w	800c7f2 <_printf_i+0x16e>
 800c6ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6b4:	e03a      	b.n	800c72c <_printf_i+0xa8>
 800c6b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6ba:	2b15      	cmp	r3, #21
 800c6bc:	d8f6      	bhi.n	800c6ac <_printf_i+0x28>
 800c6be:	a101      	add	r1, pc, #4	; (adr r1, 800c6c4 <_printf_i+0x40>)
 800c6c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6c4:	0800c71d 	.word	0x0800c71d
 800c6c8:	0800c731 	.word	0x0800c731
 800c6cc:	0800c6ad 	.word	0x0800c6ad
 800c6d0:	0800c6ad 	.word	0x0800c6ad
 800c6d4:	0800c6ad 	.word	0x0800c6ad
 800c6d8:	0800c6ad 	.word	0x0800c6ad
 800c6dc:	0800c731 	.word	0x0800c731
 800c6e0:	0800c6ad 	.word	0x0800c6ad
 800c6e4:	0800c6ad 	.word	0x0800c6ad
 800c6e8:	0800c6ad 	.word	0x0800c6ad
 800c6ec:	0800c6ad 	.word	0x0800c6ad
 800c6f0:	0800c83d 	.word	0x0800c83d
 800c6f4:	0800c761 	.word	0x0800c761
 800c6f8:	0800c81f 	.word	0x0800c81f
 800c6fc:	0800c6ad 	.word	0x0800c6ad
 800c700:	0800c6ad 	.word	0x0800c6ad
 800c704:	0800c85f 	.word	0x0800c85f
 800c708:	0800c6ad 	.word	0x0800c6ad
 800c70c:	0800c761 	.word	0x0800c761
 800c710:	0800c6ad 	.word	0x0800c6ad
 800c714:	0800c6ad 	.word	0x0800c6ad
 800c718:	0800c827 	.word	0x0800c827
 800c71c:	682b      	ldr	r3, [r5, #0]
 800c71e:	1d1a      	adds	r2, r3, #4
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	602a      	str	r2, [r5, #0]
 800c724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c72c:	2301      	movs	r3, #1
 800c72e:	e0a3      	b.n	800c878 <_printf_i+0x1f4>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	6829      	ldr	r1, [r5, #0]
 800c734:	0606      	lsls	r6, r0, #24
 800c736:	f101 0304 	add.w	r3, r1, #4
 800c73a:	d50a      	bpl.n	800c752 <_printf_i+0xce>
 800c73c:	680e      	ldr	r6, [r1, #0]
 800c73e:	602b      	str	r3, [r5, #0]
 800c740:	2e00      	cmp	r6, #0
 800c742:	da03      	bge.n	800c74c <_printf_i+0xc8>
 800c744:	232d      	movs	r3, #45	; 0x2d
 800c746:	4276      	negs	r6, r6
 800c748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c74c:	485e      	ldr	r0, [pc, #376]	; (800c8c8 <_printf_i+0x244>)
 800c74e:	230a      	movs	r3, #10
 800c750:	e019      	b.n	800c786 <_printf_i+0x102>
 800c752:	680e      	ldr	r6, [r1, #0]
 800c754:	602b      	str	r3, [r5, #0]
 800c756:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c75a:	bf18      	it	ne
 800c75c:	b236      	sxthne	r6, r6
 800c75e:	e7ef      	b.n	800c740 <_printf_i+0xbc>
 800c760:	682b      	ldr	r3, [r5, #0]
 800c762:	6820      	ldr	r0, [r4, #0]
 800c764:	1d19      	adds	r1, r3, #4
 800c766:	6029      	str	r1, [r5, #0]
 800c768:	0601      	lsls	r1, r0, #24
 800c76a:	d501      	bpl.n	800c770 <_printf_i+0xec>
 800c76c:	681e      	ldr	r6, [r3, #0]
 800c76e:	e002      	b.n	800c776 <_printf_i+0xf2>
 800c770:	0646      	lsls	r6, r0, #25
 800c772:	d5fb      	bpl.n	800c76c <_printf_i+0xe8>
 800c774:	881e      	ldrh	r6, [r3, #0]
 800c776:	4854      	ldr	r0, [pc, #336]	; (800c8c8 <_printf_i+0x244>)
 800c778:	2f6f      	cmp	r7, #111	; 0x6f
 800c77a:	bf0c      	ite	eq
 800c77c:	2308      	moveq	r3, #8
 800c77e:	230a      	movne	r3, #10
 800c780:	2100      	movs	r1, #0
 800c782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c786:	6865      	ldr	r5, [r4, #4]
 800c788:	60a5      	str	r5, [r4, #8]
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	bfa2      	ittt	ge
 800c78e:	6821      	ldrge	r1, [r4, #0]
 800c790:	f021 0104 	bicge.w	r1, r1, #4
 800c794:	6021      	strge	r1, [r4, #0]
 800c796:	b90e      	cbnz	r6, 800c79c <_printf_i+0x118>
 800c798:	2d00      	cmp	r5, #0
 800c79a:	d04d      	beq.n	800c838 <_printf_i+0x1b4>
 800c79c:	4615      	mov	r5, r2
 800c79e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c7a2:	fb03 6711 	mls	r7, r3, r1, r6
 800c7a6:	5dc7      	ldrb	r7, [r0, r7]
 800c7a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7ac:	4637      	mov	r7, r6
 800c7ae:	42bb      	cmp	r3, r7
 800c7b0:	460e      	mov	r6, r1
 800c7b2:	d9f4      	bls.n	800c79e <_printf_i+0x11a>
 800c7b4:	2b08      	cmp	r3, #8
 800c7b6:	d10b      	bne.n	800c7d0 <_printf_i+0x14c>
 800c7b8:	6823      	ldr	r3, [r4, #0]
 800c7ba:	07de      	lsls	r6, r3, #31
 800c7bc:	d508      	bpl.n	800c7d0 <_printf_i+0x14c>
 800c7be:	6923      	ldr	r3, [r4, #16]
 800c7c0:	6861      	ldr	r1, [r4, #4]
 800c7c2:	4299      	cmp	r1, r3
 800c7c4:	bfde      	ittt	le
 800c7c6:	2330      	movle	r3, #48	; 0x30
 800c7c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7d0:	1b52      	subs	r2, r2, r5
 800c7d2:	6122      	str	r2, [r4, #16]
 800c7d4:	f8cd a000 	str.w	sl, [sp]
 800c7d8:	464b      	mov	r3, r9
 800c7da:	aa03      	add	r2, sp, #12
 800c7dc:	4621      	mov	r1, r4
 800c7de:	4640      	mov	r0, r8
 800c7e0:	f7ff fee2 	bl	800c5a8 <_printf_common>
 800c7e4:	3001      	adds	r0, #1
 800c7e6:	d14c      	bne.n	800c882 <_printf_i+0x1fe>
 800c7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ec:	b004      	add	sp, #16
 800c7ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f2:	4835      	ldr	r0, [pc, #212]	; (800c8c8 <_printf_i+0x244>)
 800c7f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c7f8:	6829      	ldr	r1, [r5, #0]
 800c7fa:	6823      	ldr	r3, [r4, #0]
 800c7fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c800:	6029      	str	r1, [r5, #0]
 800c802:	061d      	lsls	r5, r3, #24
 800c804:	d514      	bpl.n	800c830 <_printf_i+0x1ac>
 800c806:	07df      	lsls	r7, r3, #31
 800c808:	bf44      	itt	mi
 800c80a:	f043 0320 	orrmi.w	r3, r3, #32
 800c80e:	6023      	strmi	r3, [r4, #0]
 800c810:	b91e      	cbnz	r6, 800c81a <_printf_i+0x196>
 800c812:	6823      	ldr	r3, [r4, #0]
 800c814:	f023 0320 	bic.w	r3, r3, #32
 800c818:	6023      	str	r3, [r4, #0]
 800c81a:	2310      	movs	r3, #16
 800c81c:	e7b0      	b.n	800c780 <_printf_i+0xfc>
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	f043 0320 	orr.w	r3, r3, #32
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	2378      	movs	r3, #120	; 0x78
 800c828:	4828      	ldr	r0, [pc, #160]	; (800c8cc <_printf_i+0x248>)
 800c82a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c82e:	e7e3      	b.n	800c7f8 <_printf_i+0x174>
 800c830:	0659      	lsls	r1, r3, #25
 800c832:	bf48      	it	mi
 800c834:	b2b6      	uxthmi	r6, r6
 800c836:	e7e6      	b.n	800c806 <_printf_i+0x182>
 800c838:	4615      	mov	r5, r2
 800c83a:	e7bb      	b.n	800c7b4 <_printf_i+0x130>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	6826      	ldr	r6, [r4, #0]
 800c840:	6961      	ldr	r1, [r4, #20]
 800c842:	1d18      	adds	r0, r3, #4
 800c844:	6028      	str	r0, [r5, #0]
 800c846:	0635      	lsls	r5, r6, #24
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	d501      	bpl.n	800c850 <_printf_i+0x1cc>
 800c84c:	6019      	str	r1, [r3, #0]
 800c84e:	e002      	b.n	800c856 <_printf_i+0x1d2>
 800c850:	0670      	lsls	r0, r6, #25
 800c852:	d5fb      	bpl.n	800c84c <_printf_i+0x1c8>
 800c854:	8019      	strh	r1, [r3, #0]
 800c856:	2300      	movs	r3, #0
 800c858:	6123      	str	r3, [r4, #16]
 800c85a:	4615      	mov	r5, r2
 800c85c:	e7ba      	b.n	800c7d4 <_printf_i+0x150>
 800c85e:	682b      	ldr	r3, [r5, #0]
 800c860:	1d1a      	adds	r2, r3, #4
 800c862:	602a      	str	r2, [r5, #0]
 800c864:	681d      	ldr	r5, [r3, #0]
 800c866:	6862      	ldr	r2, [r4, #4]
 800c868:	2100      	movs	r1, #0
 800c86a:	4628      	mov	r0, r5
 800c86c:	f7f3 fc90 	bl	8000190 <memchr>
 800c870:	b108      	cbz	r0, 800c876 <_printf_i+0x1f2>
 800c872:	1b40      	subs	r0, r0, r5
 800c874:	6060      	str	r0, [r4, #4]
 800c876:	6863      	ldr	r3, [r4, #4]
 800c878:	6123      	str	r3, [r4, #16]
 800c87a:	2300      	movs	r3, #0
 800c87c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c880:	e7a8      	b.n	800c7d4 <_printf_i+0x150>
 800c882:	6923      	ldr	r3, [r4, #16]
 800c884:	462a      	mov	r2, r5
 800c886:	4649      	mov	r1, r9
 800c888:	4640      	mov	r0, r8
 800c88a:	47d0      	blx	sl
 800c88c:	3001      	adds	r0, #1
 800c88e:	d0ab      	beq.n	800c7e8 <_printf_i+0x164>
 800c890:	6823      	ldr	r3, [r4, #0]
 800c892:	079b      	lsls	r3, r3, #30
 800c894:	d413      	bmi.n	800c8be <_printf_i+0x23a>
 800c896:	68e0      	ldr	r0, [r4, #12]
 800c898:	9b03      	ldr	r3, [sp, #12]
 800c89a:	4298      	cmp	r0, r3
 800c89c:	bfb8      	it	lt
 800c89e:	4618      	movlt	r0, r3
 800c8a0:	e7a4      	b.n	800c7ec <_printf_i+0x168>
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	4632      	mov	r2, r6
 800c8a6:	4649      	mov	r1, r9
 800c8a8:	4640      	mov	r0, r8
 800c8aa:	47d0      	blx	sl
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	d09b      	beq.n	800c7e8 <_printf_i+0x164>
 800c8b0:	3501      	adds	r5, #1
 800c8b2:	68e3      	ldr	r3, [r4, #12]
 800c8b4:	9903      	ldr	r1, [sp, #12]
 800c8b6:	1a5b      	subs	r3, r3, r1
 800c8b8:	42ab      	cmp	r3, r5
 800c8ba:	dcf2      	bgt.n	800c8a2 <_printf_i+0x21e>
 800c8bc:	e7eb      	b.n	800c896 <_printf_i+0x212>
 800c8be:	2500      	movs	r5, #0
 800c8c0:	f104 0619 	add.w	r6, r4, #25
 800c8c4:	e7f5      	b.n	800c8b2 <_printf_i+0x22e>
 800c8c6:	bf00      	nop
 800c8c8:	0800db8f 	.word	0x0800db8f
 800c8cc:	0800dba0 	.word	0x0800dba0

0800c8d0 <_sbrk_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d06      	ldr	r5, [pc, #24]	; (800c8ec <_sbrk_r+0x1c>)
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	4608      	mov	r0, r1
 800c8da:	602b      	str	r3, [r5, #0]
 800c8dc:	f7f9 fc0e 	bl	80060fc <_sbrk>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d102      	bne.n	800c8ea <_sbrk_r+0x1a>
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	b103      	cbz	r3, 800c8ea <_sbrk_r+0x1a>
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	2000cfb0 	.word	0x2000cfb0

0800c8f0 <__swbuf_r>:
 800c8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f2:	460e      	mov	r6, r1
 800c8f4:	4614      	mov	r4, r2
 800c8f6:	4605      	mov	r5, r0
 800c8f8:	b118      	cbz	r0, 800c902 <__swbuf_r+0x12>
 800c8fa:	6983      	ldr	r3, [r0, #24]
 800c8fc:	b90b      	cbnz	r3, 800c902 <__swbuf_r+0x12>
 800c8fe:	f000 f9d9 	bl	800ccb4 <__sinit>
 800c902:	4b21      	ldr	r3, [pc, #132]	; (800c988 <__swbuf_r+0x98>)
 800c904:	429c      	cmp	r4, r3
 800c906:	d12b      	bne.n	800c960 <__swbuf_r+0x70>
 800c908:	686c      	ldr	r4, [r5, #4]
 800c90a:	69a3      	ldr	r3, [r4, #24]
 800c90c:	60a3      	str	r3, [r4, #8]
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	071a      	lsls	r2, r3, #28
 800c912:	d52f      	bpl.n	800c974 <__swbuf_r+0x84>
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	b36b      	cbz	r3, 800c974 <__swbuf_r+0x84>
 800c918:	6923      	ldr	r3, [r4, #16]
 800c91a:	6820      	ldr	r0, [r4, #0]
 800c91c:	1ac0      	subs	r0, r0, r3
 800c91e:	6963      	ldr	r3, [r4, #20]
 800c920:	b2f6      	uxtb	r6, r6
 800c922:	4283      	cmp	r3, r0
 800c924:	4637      	mov	r7, r6
 800c926:	dc04      	bgt.n	800c932 <__swbuf_r+0x42>
 800c928:	4621      	mov	r1, r4
 800c92a:	4628      	mov	r0, r5
 800c92c:	f000 f92e 	bl	800cb8c <_fflush_r>
 800c930:	bb30      	cbnz	r0, 800c980 <__swbuf_r+0x90>
 800c932:	68a3      	ldr	r3, [r4, #8]
 800c934:	3b01      	subs	r3, #1
 800c936:	60a3      	str	r3, [r4, #8]
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	1c5a      	adds	r2, r3, #1
 800c93c:	6022      	str	r2, [r4, #0]
 800c93e:	701e      	strb	r6, [r3, #0]
 800c940:	6963      	ldr	r3, [r4, #20]
 800c942:	3001      	adds	r0, #1
 800c944:	4283      	cmp	r3, r0
 800c946:	d004      	beq.n	800c952 <__swbuf_r+0x62>
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	07db      	lsls	r3, r3, #31
 800c94c:	d506      	bpl.n	800c95c <__swbuf_r+0x6c>
 800c94e:	2e0a      	cmp	r6, #10
 800c950:	d104      	bne.n	800c95c <__swbuf_r+0x6c>
 800c952:	4621      	mov	r1, r4
 800c954:	4628      	mov	r0, r5
 800c956:	f000 f919 	bl	800cb8c <_fflush_r>
 800c95a:	b988      	cbnz	r0, 800c980 <__swbuf_r+0x90>
 800c95c:	4638      	mov	r0, r7
 800c95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c960:	4b0a      	ldr	r3, [pc, #40]	; (800c98c <__swbuf_r+0x9c>)
 800c962:	429c      	cmp	r4, r3
 800c964:	d101      	bne.n	800c96a <__swbuf_r+0x7a>
 800c966:	68ac      	ldr	r4, [r5, #8]
 800c968:	e7cf      	b.n	800c90a <__swbuf_r+0x1a>
 800c96a:	4b09      	ldr	r3, [pc, #36]	; (800c990 <__swbuf_r+0xa0>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	bf08      	it	eq
 800c970:	68ec      	ldreq	r4, [r5, #12]
 800c972:	e7ca      	b.n	800c90a <__swbuf_r+0x1a>
 800c974:	4621      	mov	r1, r4
 800c976:	4628      	mov	r0, r5
 800c978:	f000 f80c 	bl	800c994 <__swsetup_r>
 800c97c:	2800      	cmp	r0, #0
 800c97e:	d0cb      	beq.n	800c918 <__swbuf_r+0x28>
 800c980:	f04f 37ff 	mov.w	r7, #4294967295
 800c984:	e7ea      	b.n	800c95c <__swbuf_r+0x6c>
 800c986:	bf00      	nop
 800c988:	0800dbd4 	.word	0x0800dbd4
 800c98c:	0800dbf4 	.word	0x0800dbf4
 800c990:	0800dbb4 	.word	0x0800dbb4

0800c994 <__swsetup_r>:
 800c994:	4b32      	ldr	r3, [pc, #200]	; (800ca60 <__swsetup_r+0xcc>)
 800c996:	b570      	push	{r4, r5, r6, lr}
 800c998:	681d      	ldr	r5, [r3, #0]
 800c99a:	4606      	mov	r6, r0
 800c99c:	460c      	mov	r4, r1
 800c99e:	b125      	cbz	r5, 800c9aa <__swsetup_r+0x16>
 800c9a0:	69ab      	ldr	r3, [r5, #24]
 800c9a2:	b913      	cbnz	r3, 800c9aa <__swsetup_r+0x16>
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	f000 f985 	bl	800ccb4 <__sinit>
 800c9aa:	4b2e      	ldr	r3, [pc, #184]	; (800ca64 <__swsetup_r+0xd0>)
 800c9ac:	429c      	cmp	r4, r3
 800c9ae:	d10f      	bne.n	800c9d0 <__swsetup_r+0x3c>
 800c9b0:	686c      	ldr	r4, [r5, #4]
 800c9b2:	89a3      	ldrh	r3, [r4, #12]
 800c9b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9b8:	0719      	lsls	r1, r3, #28
 800c9ba:	d42c      	bmi.n	800ca16 <__swsetup_r+0x82>
 800c9bc:	06dd      	lsls	r5, r3, #27
 800c9be:	d411      	bmi.n	800c9e4 <__swsetup_r+0x50>
 800c9c0:	2309      	movs	r3, #9
 800c9c2:	6033      	str	r3, [r6, #0]
 800c9c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9c8:	81a3      	strh	r3, [r4, #12]
 800c9ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ce:	e03e      	b.n	800ca4e <__swsetup_r+0xba>
 800c9d0:	4b25      	ldr	r3, [pc, #148]	; (800ca68 <__swsetup_r+0xd4>)
 800c9d2:	429c      	cmp	r4, r3
 800c9d4:	d101      	bne.n	800c9da <__swsetup_r+0x46>
 800c9d6:	68ac      	ldr	r4, [r5, #8]
 800c9d8:	e7eb      	b.n	800c9b2 <__swsetup_r+0x1e>
 800c9da:	4b24      	ldr	r3, [pc, #144]	; (800ca6c <__swsetup_r+0xd8>)
 800c9dc:	429c      	cmp	r4, r3
 800c9de:	bf08      	it	eq
 800c9e0:	68ec      	ldreq	r4, [r5, #12]
 800c9e2:	e7e6      	b.n	800c9b2 <__swsetup_r+0x1e>
 800c9e4:	0758      	lsls	r0, r3, #29
 800c9e6:	d512      	bpl.n	800ca0e <__swsetup_r+0x7a>
 800c9e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9ea:	b141      	cbz	r1, 800c9fe <__swsetup_r+0x6a>
 800c9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9f0:	4299      	cmp	r1, r3
 800c9f2:	d002      	beq.n	800c9fa <__swsetup_r+0x66>
 800c9f4:	4630      	mov	r0, r6
 800c9f6:	f7ff fa41 	bl	800be7c <_free_r>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	6363      	str	r3, [r4, #52]	; 0x34
 800c9fe:	89a3      	ldrh	r3, [r4, #12]
 800ca00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca04:	81a3      	strh	r3, [r4, #12]
 800ca06:	2300      	movs	r3, #0
 800ca08:	6063      	str	r3, [r4, #4]
 800ca0a:	6923      	ldr	r3, [r4, #16]
 800ca0c:	6023      	str	r3, [r4, #0]
 800ca0e:	89a3      	ldrh	r3, [r4, #12]
 800ca10:	f043 0308 	orr.w	r3, r3, #8
 800ca14:	81a3      	strh	r3, [r4, #12]
 800ca16:	6923      	ldr	r3, [r4, #16]
 800ca18:	b94b      	cbnz	r3, 800ca2e <__swsetup_r+0x9a>
 800ca1a:	89a3      	ldrh	r3, [r4, #12]
 800ca1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca24:	d003      	beq.n	800ca2e <__swsetup_r+0x9a>
 800ca26:	4621      	mov	r1, r4
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f000 fa09 	bl	800ce40 <__smakebuf_r>
 800ca2e:	89a0      	ldrh	r0, [r4, #12]
 800ca30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca34:	f010 0301 	ands.w	r3, r0, #1
 800ca38:	d00a      	beq.n	800ca50 <__swsetup_r+0xbc>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60a3      	str	r3, [r4, #8]
 800ca3e:	6963      	ldr	r3, [r4, #20]
 800ca40:	425b      	negs	r3, r3
 800ca42:	61a3      	str	r3, [r4, #24]
 800ca44:	6923      	ldr	r3, [r4, #16]
 800ca46:	b943      	cbnz	r3, 800ca5a <__swsetup_r+0xc6>
 800ca48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca4c:	d1ba      	bne.n	800c9c4 <__swsetup_r+0x30>
 800ca4e:	bd70      	pop	{r4, r5, r6, pc}
 800ca50:	0781      	lsls	r1, r0, #30
 800ca52:	bf58      	it	pl
 800ca54:	6963      	ldrpl	r3, [r4, #20]
 800ca56:	60a3      	str	r3, [r4, #8]
 800ca58:	e7f4      	b.n	800ca44 <__swsetup_r+0xb0>
 800ca5a:	2000      	movs	r0, #0
 800ca5c:	e7f7      	b.n	800ca4e <__swsetup_r+0xba>
 800ca5e:	bf00      	nop
 800ca60:	20000018 	.word	0x20000018
 800ca64:	0800dbd4 	.word	0x0800dbd4
 800ca68:	0800dbf4 	.word	0x0800dbf4
 800ca6c:	0800dbb4 	.word	0x0800dbb4

0800ca70 <abort>:
 800ca70:	b508      	push	{r3, lr}
 800ca72:	2006      	movs	r0, #6
 800ca74:	f000 faa2 	bl	800cfbc <raise>
 800ca78:	2001      	movs	r0, #1
 800ca7a:	f7f9 fac7 	bl	800600c <_exit>
	...

0800ca80 <__sflush_r>:
 800ca80:	898a      	ldrh	r2, [r1, #12]
 800ca82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca86:	4605      	mov	r5, r0
 800ca88:	0710      	lsls	r0, r2, #28
 800ca8a:	460c      	mov	r4, r1
 800ca8c:	d458      	bmi.n	800cb40 <__sflush_r+0xc0>
 800ca8e:	684b      	ldr	r3, [r1, #4]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	dc05      	bgt.n	800caa0 <__sflush_r+0x20>
 800ca94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	dc02      	bgt.n	800caa0 <__sflush_r+0x20>
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800caa2:	2e00      	cmp	r6, #0
 800caa4:	d0f9      	beq.n	800ca9a <__sflush_r+0x1a>
 800caa6:	2300      	movs	r3, #0
 800caa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caac:	682f      	ldr	r7, [r5, #0]
 800caae:	602b      	str	r3, [r5, #0]
 800cab0:	d032      	beq.n	800cb18 <__sflush_r+0x98>
 800cab2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	075a      	lsls	r2, r3, #29
 800cab8:	d505      	bpl.n	800cac6 <__sflush_r+0x46>
 800caba:	6863      	ldr	r3, [r4, #4]
 800cabc:	1ac0      	subs	r0, r0, r3
 800cabe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cac0:	b10b      	cbz	r3, 800cac6 <__sflush_r+0x46>
 800cac2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cac4:	1ac0      	subs	r0, r0, r3
 800cac6:	2300      	movs	r3, #0
 800cac8:	4602      	mov	r2, r0
 800caca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cacc:	6a21      	ldr	r1, [r4, #32]
 800cace:	4628      	mov	r0, r5
 800cad0:	47b0      	blx	r6
 800cad2:	1c43      	adds	r3, r0, #1
 800cad4:	89a3      	ldrh	r3, [r4, #12]
 800cad6:	d106      	bne.n	800cae6 <__sflush_r+0x66>
 800cad8:	6829      	ldr	r1, [r5, #0]
 800cada:	291d      	cmp	r1, #29
 800cadc:	d82c      	bhi.n	800cb38 <__sflush_r+0xb8>
 800cade:	4a2a      	ldr	r2, [pc, #168]	; (800cb88 <__sflush_r+0x108>)
 800cae0:	40ca      	lsrs	r2, r1
 800cae2:	07d6      	lsls	r6, r2, #31
 800cae4:	d528      	bpl.n	800cb38 <__sflush_r+0xb8>
 800cae6:	2200      	movs	r2, #0
 800cae8:	6062      	str	r2, [r4, #4]
 800caea:	04d9      	lsls	r1, r3, #19
 800caec:	6922      	ldr	r2, [r4, #16]
 800caee:	6022      	str	r2, [r4, #0]
 800caf0:	d504      	bpl.n	800cafc <__sflush_r+0x7c>
 800caf2:	1c42      	adds	r2, r0, #1
 800caf4:	d101      	bne.n	800cafa <__sflush_r+0x7a>
 800caf6:	682b      	ldr	r3, [r5, #0]
 800caf8:	b903      	cbnz	r3, 800cafc <__sflush_r+0x7c>
 800cafa:	6560      	str	r0, [r4, #84]	; 0x54
 800cafc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cafe:	602f      	str	r7, [r5, #0]
 800cb00:	2900      	cmp	r1, #0
 800cb02:	d0ca      	beq.n	800ca9a <__sflush_r+0x1a>
 800cb04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb08:	4299      	cmp	r1, r3
 800cb0a:	d002      	beq.n	800cb12 <__sflush_r+0x92>
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	f7ff f9b5 	bl	800be7c <_free_r>
 800cb12:	2000      	movs	r0, #0
 800cb14:	6360      	str	r0, [r4, #52]	; 0x34
 800cb16:	e7c1      	b.n	800ca9c <__sflush_r+0x1c>
 800cb18:	6a21      	ldr	r1, [r4, #32]
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	4628      	mov	r0, r5
 800cb1e:	47b0      	blx	r6
 800cb20:	1c41      	adds	r1, r0, #1
 800cb22:	d1c7      	bne.n	800cab4 <__sflush_r+0x34>
 800cb24:	682b      	ldr	r3, [r5, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0c4      	beq.n	800cab4 <__sflush_r+0x34>
 800cb2a:	2b1d      	cmp	r3, #29
 800cb2c:	d001      	beq.n	800cb32 <__sflush_r+0xb2>
 800cb2e:	2b16      	cmp	r3, #22
 800cb30:	d101      	bne.n	800cb36 <__sflush_r+0xb6>
 800cb32:	602f      	str	r7, [r5, #0]
 800cb34:	e7b1      	b.n	800ca9a <__sflush_r+0x1a>
 800cb36:	89a3      	ldrh	r3, [r4, #12]
 800cb38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb3c:	81a3      	strh	r3, [r4, #12]
 800cb3e:	e7ad      	b.n	800ca9c <__sflush_r+0x1c>
 800cb40:	690f      	ldr	r7, [r1, #16]
 800cb42:	2f00      	cmp	r7, #0
 800cb44:	d0a9      	beq.n	800ca9a <__sflush_r+0x1a>
 800cb46:	0793      	lsls	r3, r2, #30
 800cb48:	680e      	ldr	r6, [r1, #0]
 800cb4a:	bf08      	it	eq
 800cb4c:	694b      	ldreq	r3, [r1, #20]
 800cb4e:	600f      	str	r7, [r1, #0]
 800cb50:	bf18      	it	ne
 800cb52:	2300      	movne	r3, #0
 800cb54:	eba6 0807 	sub.w	r8, r6, r7
 800cb58:	608b      	str	r3, [r1, #8]
 800cb5a:	f1b8 0f00 	cmp.w	r8, #0
 800cb5e:	dd9c      	ble.n	800ca9a <__sflush_r+0x1a>
 800cb60:	6a21      	ldr	r1, [r4, #32]
 800cb62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb64:	4643      	mov	r3, r8
 800cb66:	463a      	mov	r2, r7
 800cb68:	4628      	mov	r0, r5
 800cb6a:	47b0      	blx	r6
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	dc06      	bgt.n	800cb7e <__sflush_r+0xfe>
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb76:	81a3      	strh	r3, [r4, #12]
 800cb78:	f04f 30ff 	mov.w	r0, #4294967295
 800cb7c:	e78e      	b.n	800ca9c <__sflush_r+0x1c>
 800cb7e:	4407      	add	r7, r0
 800cb80:	eba8 0800 	sub.w	r8, r8, r0
 800cb84:	e7e9      	b.n	800cb5a <__sflush_r+0xda>
 800cb86:	bf00      	nop
 800cb88:	20400001 	.word	0x20400001

0800cb8c <_fflush_r>:
 800cb8c:	b538      	push	{r3, r4, r5, lr}
 800cb8e:	690b      	ldr	r3, [r1, #16]
 800cb90:	4605      	mov	r5, r0
 800cb92:	460c      	mov	r4, r1
 800cb94:	b913      	cbnz	r3, 800cb9c <_fflush_r+0x10>
 800cb96:	2500      	movs	r5, #0
 800cb98:	4628      	mov	r0, r5
 800cb9a:	bd38      	pop	{r3, r4, r5, pc}
 800cb9c:	b118      	cbz	r0, 800cba6 <_fflush_r+0x1a>
 800cb9e:	6983      	ldr	r3, [r0, #24]
 800cba0:	b90b      	cbnz	r3, 800cba6 <_fflush_r+0x1a>
 800cba2:	f000 f887 	bl	800ccb4 <__sinit>
 800cba6:	4b14      	ldr	r3, [pc, #80]	; (800cbf8 <_fflush_r+0x6c>)
 800cba8:	429c      	cmp	r4, r3
 800cbaa:	d11b      	bne.n	800cbe4 <_fflush_r+0x58>
 800cbac:	686c      	ldr	r4, [r5, #4]
 800cbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0ef      	beq.n	800cb96 <_fflush_r+0xa>
 800cbb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbb8:	07d0      	lsls	r0, r2, #31
 800cbba:	d404      	bmi.n	800cbc6 <_fflush_r+0x3a>
 800cbbc:	0599      	lsls	r1, r3, #22
 800cbbe:	d402      	bmi.n	800cbc6 <_fflush_r+0x3a>
 800cbc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbc2:	f000 f915 	bl	800cdf0 <__retarget_lock_acquire_recursive>
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	4621      	mov	r1, r4
 800cbca:	f7ff ff59 	bl	800ca80 <__sflush_r>
 800cbce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbd0:	07da      	lsls	r2, r3, #31
 800cbd2:	4605      	mov	r5, r0
 800cbd4:	d4e0      	bmi.n	800cb98 <_fflush_r+0xc>
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	059b      	lsls	r3, r3, #22
 800cbda:	d4dd      	bmi.n	800cb98 <_fflush_r+0xc>
 800cbdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbde:	f000 f908 	bl	800cdf2 <__retarget_lock_release_recursive>
 800cbe2:	e7d9      	b.n	800cb98 <_fflush_r+0xc>
 800cbe4:	4b05      	ldr	r3, [pc, #20]	; (800cbfc <_fflush_r+0x70>)
 800cbe6:	429c      	cmp	r4, r3
 800cbe8:	d101      	bne.n	800cbee <_fflush_r+0x62>
 800cbea:	68ac      	ldr	r4, [r5, #8]
 800cbec:	e7df      	b.n	800cbae <_fflush_r+0x22>
 800cbee:	4b04      	ldr	r3, [pc, #16]	; (800cc00 <_fflush_r+0x74>)
 800cbf0:	429c      	cmp	r4, r3
 800cbf2:	bf08      	it	eq
 800cbf4:	68ec      	ldreq	r4, [r5, #12]
 800cbf6:	e7da      	b.n	800cbae <_fflush_r+0x22>
 800cbf8:	0800dbd4 	.word	0x0800dbd4
 800cbfc:	0800dbf4 	.word	0x0800dbf4
 800cc00:	0800dbb4 	.word	0x0800dbb4

0800cc04 <std>:
 800cc04:	2300      	movs	r3, #0
 800cc06:	b510      	push	{r4, lr}
 800cc08:	4604      	mov	r4, r0
 800cc0a:	e9c0 3300 	strd	r3, r3, [r0]
 800cc0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc12:	6083      	str	r3, [r0, #8]
 800cc14:	8181      	strh	r1, [r0, #12]
 800cc16:	6643      	str	r3, [r0, #100]	; 0x64
 800cc18:	81c2      	strh	r2, [r0, #14]
 800cc1a:	6183      	str	r3, [r0, #24]
 800cc1c:	4619      	mov	r1, r3
 800cc1e:	2208      	movs	r2, #8
 800cc20:	305c      	adds	r0, #92	; 0x5c
 800cc22:	f7ff f88d 	bl	800bd40 <memset>
 800cc26:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <std+0x38>)
 800cc28:	6263      	str	r3, [r4, #36]	; 0x24
 800cc2a:	4b05      	ldr	r3, [pc, #20]	; (800cc40 <std+0x3c>)
 800cc2c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <std+0x40>)
 800cc30:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc32:	4b05      	ldr	r3, [pc, #20]	; (800cc48 <std+0x44>)
 800cc34:	6224      	str	r4, [r4, #32]
 800cc36:	6323      	str	r3, [r4, #48]	; 0x30
 800cc38:	bd10      	pop	{r4, pc}
 800cc3a:	bf00      	nop
 800cc3c:	0800cff5 	.word	0x0800cff5
 800cc40:	0800d017 	.word	0x0800d017
 800cc44:	0800d04f 	.word	0x0800d04f
 800cc48:	0800d073 	.word	0x0800d073

0800cc4c <_cleanup_r>:
 800cc4c:	4901      	ldr	r1, [pc, #4]	; (800cc54 <_cleanup_r+0x8>)
 800cc4e:	f000 b8af 	b.w	800cdb0 <_fwalk_reent>
 800cc52:	bf00      	nop
 800cc54:	0800cb8d 	.word	0x0800cb8d

0800cc58 <__sfmoreglue>:
 800cc58:	b570      	push	{r4, r5, r6, lr}
 800cc5a:	2268      	movs	r2, #104	; 0x68
 800cc5c:	1e4d      	subs	r5, r1, #1
 800cc5e:	4355      	muls	r5, r2
 800cc60:	460e      	mov	r6, r1
 800cc62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc66:	f7ff f975 	bl	800bf54 <_malloc_r>
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	b140      	cbz	r0, 800cc80 <__sfmoreglue+0x28>
 800cc6e:	2100      	movs	r1, #0
 800cc70:	e9c0 1600 	strd	r1, r6, [r0]
 800cc74:	300c      	adds	r0, #12
 800cc76:	60a0      	str	r0, [r4, #8]
 800cc78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc7c:	f7ff f860 	bl	800bd40 <memset>
 800cc80:	4620      	mov	r0, r4
 800cc82:	bd70      	pop	{r4, r5, r6, pc}

0800cc84 <__sfp_lock_acquire>:
 800cc84:	4801      	ldr	r0, [pc, #4]	; (800cc8c <__sfp_lock_acquire+0x8>)
 800cc86:	f000 b8b3 	b.w	800cdf0 <__retarget_lock_acquire_recursive>
 800cc8a:	bf00      	nop
 800cc8c:	2000cfad 	.word	0x2000cfad

0800cc90 <__sfp_lock_release>:
 800cc90:	4801      	ldr	r0, [pc, #4]	; (800cc98 <__sfp_lock_release+0x8>)
 800cc92:	f000 b8ae 	b.w	800cdf2 <__retarget_lock_release_recursive>
 800cc96:	bf00      	nop
 800cc98:	2000cfad 	.word	0x2000cfad

0800cc9c <__sinit_lock_acquire>:
 800cc9c:	4801      	ldr	r0, [pc, #4]	; (800cca4 <__sinit_lock_acquire+0x8>)
 800cc9e:	f000 b8a7 	b.w	800cdf0 <__retarget_lock_acquire_recursive>
 800cca2:	bf00      	nop
 800cca4:	2000cfae 	.word	0x2000cfae

0800cca8 <__sinit_lock_release>:
 800cca8:	4801      	ldr	r0, [pc, #4]	; (800ccb0 <__sinit_lock_release+0x8>)
 800ccaa:	f000 b8a2 	b.w	800cdf2 <__retarget_lock_release_recursive>
 800ccae:	bf00      	nop
 800ccb0:	2000cfae 	.word	0x2000cfae

0800ccb4 <__sinit>:
 800ccb4:	b510      	push	{r4, lr}
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	f7ff fff0 	bl	800cc9c <__sinit_lock_acquire>
 800ccbc:	69a3      	ldr	r3, [r4, #24]
 800ccbe:	b11b      	cbz	r3, 800ccc8 <__sinit+0x14>
 800ccc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc4:	f7ff bff0 	b.w	800cca8 <__sinit_lock_release>
 800ccc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cccc:	6523      	str	r3, [r4, #80]	; 0x50
 800ccce:	4b13      	ldr	r3, [pc, #76]	; (800cd1c <__sinit+0x68>)
 800ccd0:	4a13      	ldr	r2, [pc, #76]	; (800cd20 <__sinit+0x6c>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccd6:	42a3      	cmp	r3, r4
 800ccd8:	bf04      	itt	eq
 800ccda:	2301      	moveq	r3, #1
 800ccdc:	61a3      	streq	r3, [r4, #24]
 800ccde:	4620      	mov	r0, r4
 800cce0:	f000 f820 	bl	800cd24 <__sfp>
 800cce4:	6060      	str	r0, [r4, #4]
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 f81c 	bl	800cd24 <__sfp>
 800ccec:	60a0      	str	r0, [r4, #8]
 800ccee:	4620      	mov	r0, r4
 800ccf0:	f000 f818 	bl	800cd24 <__sfp>
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	60e0      	str	r0, [r4, #12]
 800ccf8:	2104      	movs	r1, #4
 800ccfa:	6860      	ldr	r0, [r4, #4]
 800ccfc:	f7ff ff82 	bl	800cc04 <std>
 800cd00:	68a0      	ldr	r0, [r4, #8]
 800cd02:	2201      	movs	r2, #1
 800cd04:	2109      	movs	r1, #9
 800cd06:	f7ff ff7d 	bl	800cc04 <std>
 800cd0a:	68e0      	ldr	r0, [r4, #12]
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	2112      	movs	r1, #18
 800cd10:	f7ff ff78 	bl	800cc04 <std>
 800cd14:	2301      	movs	r3, #1
 800cd16:	61a3      	str	r3, [r4, #24]
 800cd18:	e7d2      	b.n	800ccc0 <__sinit+0xc>
 800cd1a:	bf00      	nop
 800cd1c:	0800dacc 	.word	0x0800dacc
 800cd20:	0800cc4d 	.word	0x0800cc4d

0800cd24 <__sfp>:
 800cd24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd26:	4607      	mov	r7, r0
 800cd28:	f7ff ffac 	bl	800cc84 <__sfp_lock_acquire>
 800cd2c:	4b1e      	ldr	r3, [pc, #120]	; (800cda8 <__sfp+0x84>)
 800cd2e:	681e      	ldr	r6, [r3, #0]
 800cd30:	69b3      	ldr	r3, [r6, #24]
 800cd32:	b913      	cbnz	r3, 800cd3a <__sfp+0x16>
 800cd34:	4630      	mov	r0, r6
 800cd36:	f7ff ffbd 	bl	800ccb4 <__sinit>
 800cd3a:	3648      	adds	r6, #72	; 0x48
 800cd3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	d503      	bpl.n	800cd4c <__sfp+0x28>
 800cd44:	6833      	ldr	r3, [r6, #0]
 800cd46:	b30b      	cbz	r3, 800cd8c <__sfp+0x68>
 800cd48:	6836      	ldr	r6, [r6, #0]
 800cd4a:	e7f7      	b.n	800cd3c <__sfp+0x18>
 800cd4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd50:	b9d5      	cbnz	r5, 800cd88 <__sfp+0x64>
 800cd52:	4b16      	ldr	r3, [pc, #88]	; (800cdac <__sfp+0x88>)
 800cd54:	60e3      	str	r3, [r4, #12]
 800cd56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd5a:	6665      	str	r5, [r4, #100]	; 0x64
 800cd5c:	f000 f847 	bl	800cdee <__retarget_lock_init_recursive>
 800cd60:	f7ff ff96 	bl	800cc90 <__sfp_lock_release>
 800cd64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd6c:	6025      	str	r5, [r4, #0]
 800cd6e:	61a5      	str	r5, [r4, #24]
 800cd70:	2208      	movs	r2, #8
 800cd72:	4629      	mov	r1, r5
 800cd74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd78:	f7fe ffe2 	bl	800bd40 <memset>
 800cd7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd84:	4620      	mov	r0, r4
 800cd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd88:	3468      	adds	r4, #104	; 0x68
 800cd8a:	e7d9      	b.n	800cd40 <__sfp+0x1c>
 800cd8c:	2104      	movs	r1, #4
 800cd8e:	4638      	mov	r0, r7
 800cd90:	f7ff ff62 	bl	800cc58 <__sfmoreglue>
 800cd94:	4604      	mov	r4, r0
 800cd96:	6030      	str	r0, [r6, #0]
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d1d5      	bne.n	800cd48 <__sfp+0x24>
 800cd9c:	f7ff ff78 	bl	800cc90 <__sfp_lock_release>
 800cda0:	230c      	movs	r3, #12
 800cda2:	603b      	str	r3, [r7, #0]
 800cda4:	e7ee      	b.n	800cd84 <__sfp+0x60>
 800cda6:	bf00      	nop
 800cda8:	0800dacc 	.word	0x0800dacc
 800cdac:	ffff0001 	.word	0xffff0001

0800cdb0 <_fwalk_reent>:
 800cdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb4:	4606      	mov	r6, r0
 800cdb6:	4688      	mov	r8, r1
 800cdb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdbc:	2700      	movs	r7, #0
 800cdbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdc2:	f1b9 0901 	subs.w	r9, r9, #1
 800cdc6:	d505      	bpl.n	800cdd4 <_fwalk_reent+0x24>
 800cdc8:	6824      	ldr	r4, [r4, #0]
 800cdca:	2c00      	cmp	r4, #0
 800cdcc:	d1f7      	bne.n	800cdbe <_fwalk_reent+0xe>
 800cdce:	4638      	mov	r0, r7
 800cdd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdd4:	89ab      	ldrh	r3, [r5, #12]
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d907      	bls.n	800cdea <_fwalk_reent+0x3a>
 800cdda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdde:	3301      	adds	r3, #1
 800cde0:	d003      	beq.n	800cdea <_fwalk_reent+0x3a>
 800cde2:	4629      	mov	r1, r5
 800cde4:	4630      	mov	r0, r6
 800cde6:	47c0      	blx	r8
 800cde8:	4307      	orrs	r7, r0
 800cdea:	3568      	adds	r5, #104	; 0x68
 800cdec:	e7e9      	b.n	800cdc2 <_fwalk_reent+0x12>

0800cdee <__retarget_lock_init_recursive>:
 800cdee:	4770      	bx	lr

0800cdf0 <__retarget_lock_acquire_recursive>:
 800cdf0:	4770      	bx	lr

0800cdf2 <__retarget_lock_release_recursive>:
 800cdf2:	4770      	bx	lr

0800cdf4 <__swhatbuf_r>:
 800cdf4:	b570      	push	{r4, r5, r6, lr}
 800cdf6:	460e      	mov	r6, r1
 800cdf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdfc:	2900      	cmp	r1, #0
 800cdfe:	b096      	sub	sp, #88	; 0x58
 800ce00:	4614      	mov	r4, r2
 800ce02:	461d      	mov	r5, r3
 800ce04:	da08      	bge.n	800ce18 <__swhatbuf_r+0x24>
 800ce06:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	602a      	str	r2, [r5, #0]
 800ce0e:	061a      	lsls	r2, r3, #24
 800ce10:	d410      	bmi.n	800ce34 <__swhatbuf_r+0x40>
 800ce12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce16:	e00e      	b.n	800ce36 <__swhatbuf_r+0x42>
 800ce18:	466a      	mov	r2, sp
 800ce1a:	f000 f951 	bl	800d0c0 <_fstat_r>
 800ce1e:	2800      	cmp	r0, #0
 800ce20:	dbf1      	blt.n	800ce06 <__swhatbuf_r+0x12>
 800ce22:	9a01      	ldr	r2, [sp, #4]
 800ce24:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce28:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce2c:	425a      	negs	r2, r3
 800ce2e:	415a      	adcs	r2, r3
 800ce30:	602a      	str	r2, [r5, #0]
 800ce32:	e7ee      	b.n	800ce12 <__swhatbuf_r+0x1e>
 800ce34:	2340      	movs	r3, #64	; 0x40
 800ce36:	2000      	movs	r0, #0
 800ce38:	6023      	str	r3, [r4, #0]
 800ce3a:	b016      	add	sp, #88	; 0x58
 800ce3c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce40 <__smakebuf_r>:
 800ce40:	898b      	ldrh	r3, [r1, #12]
 800ce42:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce44:	079d      	lsls	r5, r3, #30
 800ce46:	4606      	mov	r6, r0
 800ce48:	460c      	mov	r4, r1
 800ce4a:	d507      	bpl.n	800ce5c <__smakebuf_r+0x1c>
 800ce4c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	6123      	str	r3, [r4, #16]
 800ce54:	2301      	movs	r3, #1
 800ce56:	6163      	str	r3, [r4, #20]
 800ce58:	b002      	add	sp, #8
 800ce5a:	bd70      	pop	{r4, r5, r6, pc}
 800ce5c:	ab01      	add	r3, sp, #4
 800ce5e:	466a      	mov	r2, sp
 800ce60:	f7ff ffc8 	bl	800cdf4 <__swhatbuf_r>
 800ce64:	9900      	ldr	r1, [sp, #0]
 800ce66:	4605      	mov	r5, r0
 800ce68:	4630      	mov	r0, r6
 800ce6a:	f7ff f873 	bl	800bf54 <_malloc_r>
 800ce6e:	b948      	cbnz	r0, 800ce84 <__smakebuf_r+0x44>
 800ce70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce74:	059a      	lsls	r2, r3, #22
 800ce76:	d4ef      	bmi.n	800ce58 <__smakebuf_r+0x18>
 800ce78:	f023 0303 	bic.w	r3, r3, #3
 800ce7c:	f043 0302 	orr.w	r3, r3, #2
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	e7e3      	b.n	800ce4c <__smakebuf_r+0xc>
 800ce84:	4b0d      	ldr	r3, [pc, #52]	; (800cebc <__smakebuf_r+0x7c>)
 800ce86:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	6020      	str	r0, [r4, #0]
 800ce8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce90:	81a3      	strh	r3, [r4, #12]
 800ce92:	9b00      	ldr	r3, [sp, #0]
 800ce94:	6163      	str	r3, [r4, #20]
 800ce96:	9b01      	ldr	r3, [sp, #4]
 800ce98:	6120      	str	r0, [r4, #16]
 800ce9a:	b15b      	cbz	r3, 800ceb4 <__smakebuf_r+0x74>
 800ce9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cea0:	4630      	mov	r0, r6
 800cea2:	f000 f91f 	bl	800d0e4 <_isatty_r>
 800cea6:	b128      	cbz	r0, 800ceb4 <__smakebuf_r+0x74>
 800cea8:	89a3      	ldrh	r3, [r4, #12]
 800ceaa:	f023 0303 	bic.w	r3, r3, #3
 800ceae:	f043 0301 	orr.w	r3, r3, #1
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	89a0      	ldrh	r0, [r4, #12]
 800ceb6:	4305      	orrs	r5, r0
 800ceb8:	81a5      	strh	r5, [r4, #12]
 800ceba:	e7cd      	b.n	800ce58 <__smakebuf_r+0x18>
 800cebc:	0800cc4d 	.word	0x0800cc4d

0800cec0 <memmove>:
 800cec0:	4288      	cmp	r0, r1
 800cec2:	b510      	push	{r4, lr}
 800cec4:	eb01 0402 	add.w	r4, r1, r2
 800cec8:	d902      	bls.n	800ced0 <memmove+0x10>
 800ceca:	4284      	cmp	r4, r0
 800cecc:	4623      	mov	r3, r4
 800cece:	d807      	bhi.n	800cee0 <memmove+0x20>
 800ced0:	1e43      	subs	r3, r0, #1
 800ced2:	42a1      	cmp	r1, r4
 800ced4:	d008      	beq.n	800cee8 <memmove+0x28>
 800ced6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cede:	e7f8      	b.n	800ced2 <memmove+0x12>
 800cee0:	4402      	add	r2, r0
 800cee2:	4601      	mov	r1, r0
 800cee4:	428a      	cmp	r2, r1
 800cee6:	d100      	bne.n	800ceea <memmove+0x2a>
 800cee8:	bd10      	pop	{r4, pc}
 800ceea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ceee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cef2:	e7f7      	b.n	800cee4 <memmove+0x24>

0800cef4 <__malloc_lock>:
 800cef4:	4801      	ldr	r0, [pc, #4]	; (800cefc <__malloc_lock+0x8>)
 800cef6:	f7ff bf7b 	b.w	800cdf0 <__retarget_lock_acquire_recursive>
 800cefa:	bf00      	nop
 800cefc:	2000cfac 	.word	0x2000cfac

0800cf00 <__malloc_unlock>:
 800cf00:	4801      	ldr	r0, [pc, #4]	; (800cf08 <__malloc_unlock+0x8>)
 800cf02:	f7ff bf76 	b.w	800cdf2 <__retarget_lock_release_recursive>
 800cf06:	bf00      	nop
 800cf08:	2000cfac 	.word	0x2000cfac

0800cf0c <_realloc_r>:
 800cf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf10:	4680      	mov	r8, r0
 800cf12:	4614      	mov	r4, r2
 800cf14:	460e      	mov	r6, r1
 800cf16:	b921      	cbnz	r1, 800cf22 <_realloc_r+0x16>
 800cf18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf1c:	4611      	mov	r1, r2
 800cf1e:	f7ff b819 	b.w	800bf54 <_malloc_r>
 800cf22:	b92a      	cbnz	r2, 800cf30 <_realloc_r+0x24>
 800cf24:	f7fe ffaa 	bl	800be7c <_free_r>
 800cf28:	4625      	mov	r5, r4
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf30:	f000 f8fa 	bl	800d128 <_malloc_usable_size_r>
 800cf34:	4284      	cmp	r4, r0
 800cf36:	4607      	mov	r7, r0
 800cf38:	d802      	bhi.n	800cf40 <_realloc_r+0x34>
 800cf3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cf3e:	d812      	bhi.n	800cf66 <_realloc_r+0x5a>
 800cf40:	4621      	mov	r1, r4
 800cf42:	4640      	mov	r0, r8
 800cf44:	f7ff f806 	bl	800bf54 <_malloc_r>
 800cf48:	4605      	mov	r5, r0
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d0ed      	beq.n	800cf2a <_realloc_r+0x1e>
 800cf4e:	42bc      	cmp	r4, r7
 800cf50:	4622      	mov	r2, r4
 800cf52:	4631      	mov	r1, r6
 800cf54:	bf28      	it	cs
 800cf56:	463a      	movcs	r2, r7
 800cf58:	f7fe fee4 	bl	800bd24 <memcpy>
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4640      	mov	r0, r8
 800cf60:	f7fe ff8c 	bl	800be7c <_free_r>
 800cf64:	e7e1      	b.n	800cf2a <_realloc_r+0x1e>
 800cf66:	4635      	mov	r5, r6
 800cf68:	e7df      	b.n	800cf2a <_realloc_r+0x1e>

0800cf6a <_raise_r>:
 800cf6a:	291f      	cmp	r1, #31
 800cf6c:	b538      	push	{r3, r4, r5, lr}
 800cf6e:	4604      	mov	r4, r0
 800cf70:	460d      	mov	r5, r1
 800cf72:	d904      	bls.n	800cf7e <_raise_r+0x14>
 800cf74:	2316      	movs	r3, #22
 800cf76:	6003      	str	r3, [r0, #0]
 800cf78:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7c:	bd38      	pop	{r3, r4, r5, pc}
 800cf7e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf80:	b112      	cbz	r2, 800cf88 <_raise_r+0x1e>
 800cf82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf86:	b94b      	cbnz	r3, 800cf9c <_raise_r+0x32>
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f000 f831 	bl	800cff0 <_getpid_r>
 800cf8e:	462a      	mov	r2, r5
 800cf90:	4601      	mov	r1, r0
 800cf92:	4620      	mov	r0, r4
 800cf94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf98:	f000 b818 	b.w	800cfcc <_kill_r>
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d00a      	beq.n	800cfb6 <_raise_r+0x4c>
 800cfa0:	1c59      	adds	r1, r3, #1
 800cfa2:	d103      	bne.n	800cfac <_raise_r+0x42>
 800cfa4:	2316      	movs	r3, #22
 800cfa6:	6003      	str	r3, [r0, #0]
 800cfa8:	2001      	movs	r0, #1
 800cfaa:	e7e7      	b.n	800cf7c <_raise_r+0x12>
 800cfac:	2400      	movs	r4, #0
 800cfae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfb2:	4628      	mov	r0, r5
 800cfb4:	4798      	blx	r3
 800cfb6:	2000      	movs	r0, #0
 800cfb8:	e7e0      	b.n	800cf7c <_raise_r+0x12>
	...

0800cfbc <raise>:
 800cfbc:	4b02      	ldr	r3, [pc, #8]	; (800cfc8 <raise+0xc>)
 800cfbe:	4601      	mov	r1, r0
 800cfc0:	6818      	ldr	r0, [r3, #0]
 800cfc2:	f7ff bfd2 	b.w	800cf6a <_raise_r>
 800cfc6:	bf00      	nop
 800cfc8:	20000018 	.word	0x20000018

0800cfcc <_kill_r>:
 800cfcc:	b538      	push	{r3, r4, r5, lr}
 800cfce:	4d07      	ldr	r5, [pc, #28]	; (800cfec <_kill_r+0x20>)
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	4608      	mov	r0, r1
 800cfd6:	4611      	mov	r1, r2
 800cfd8:	602b      	str	r3, [r5, #0]
 800cfda:	f7f9 f807 	bl	8005fec <_kill>
 800cfde:	1c43      	adds	r3, r0, #1
 800cfe0:	d102      	bne.n	800cfe8 <_kill_r+0x1c>
 800cfe2:	682b      	ldr	r3, [r5, #0]
 800cfe4:	b103      	cbz	r3, 800cfe8 <_kill_r+0x1c>
 800cfe6:	6023      	str	r3, [r4, #0]
 800cfe8:	bd38      	pop	{r3, r4, r5, pc}
 800cfea:	bf00      	nop
 800cfec:	2000cfb0 	.word	0x2000cfb0

0800cff0 <_getpid_r>:
 800cff0:	f7f8 bff4 	b.w	8005fdc <_getpid>

0800cff4 <__sread>:
 800cff4:	b510      	push	{r4, lr}
 800cff6:	460c      	mov	r4, r1
 800cff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cffc:	f000 f89c 	bl	800d138 <_read_r>
 800d000:	2800      	cmp	r0, #0
 800d002:	bfab      	itete	ge
 800d004:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d006:	89a3      	ldrhlt	r3, [r4, #12]
 800d008:	181b      	addge	r3, r3, r0
 800d00a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d00e:	bfac      	ite	ge
 800d010:	6563      	strge	r3, [r4, #84]	; 0x54
 800d012:	81a3      	strhlt	r3, [r4, #12]
 800d014:	bd10      	pop	{r4, pc}

0800d016 <__swrite>:
 800d016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d01a:	461f      	mov	r7, r3
 800d01c:	898b      	ldrh	r3, [r1, #12]
 800d01e:	05db      	lsls	r3, r3, #23
 800d020:	4605      	mov	r5, r0
 800d022:	460c      	mov	r4, r1
 800d024:	4616      	mov	r6, r2
 800d026:	d505      	bpl.n	800d034 <__swrite+0x1e>
 800d028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d02c:	2302      	movs	r3, #2
 800d02e:	2200      	movs	r2, #0
 800d030:	f000 f868 	bl	800d104 <_lseek_r>
 800d034:	89a3      	ldrh	r3, [r4, #12]
 800d036:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d03a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d03e:	81a3      	strh	r3, [r4, #12]
 800d040:	4632      	mov	r2, r6
 800d042:	463b      	mov	r3, r7
 800d044:	4628      	mov	r0, r5
 800d046:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d04a:	f000 b817 	b.w	800d07c <_write_r>

0800d04e <__sseek>:
 800d04e:	b510      	push	{r4, lr}
 800d050:	460c      	mov	r4, r1
 800d052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d056:	f000 f855 	bl	800d104 <_lseek_r>
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	89a3      	ldrh	r3, [r4, #12]
 800d05e:	bf15      	itete	ne
 800d060:	6560      	strne	r0, [r4, #84]	; 0x54
 800d062:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d066:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d06a:	81a3      	strheq	r3, [r4, #12]
 800d06c:	bf18      	it	ne
 800d06e:	81a3      	strhne	r3, [r4, #12]
 800d070:	bd10      	pop	{r4, pc}

0800d072 <__sclose>:
 800d072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d076:	f000 b813 	b.w	800d0a0 <_close_r>
	...

0800d07c <_write_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4d07      	ldr	r5, [pc, #28]	; (800d09c <_write_r+0x20>)
 800d080:	4604      	mov	r4, r0
 800d082:	4608      	mov	r0, r1
 800d084:	4611      	mov	r1, r2
 800d086:	2200      	movs	r2, #0
 800d088:	602a      	str	r2, [r5, #0]
 800d08a:	461a      	mov	r2, r3
 800d08c:	f7f8 ffe5 	bl	800605a <_write>
 800d090:	1c43      	adds	r3, r0, #1
 800d092:	d102      	bne.n	800d09a <_write_r+0x1e>
 800d094:	682b      	ldr	r3, [r5, #0]
 800d096:	b103      	cbz	r3, 800d09a <_write_r+0x1e>
 800d098:	6023      	str	r3, [r4, #0]
 800d09a:	bd38      	pop	{r3, r4, r5, pc}
 800d09c:	2000cfb0 	.word	0x2000cfb0

0800d0a0 <_close_r>:
 800d0a0:	b538      	push	{r3, r4, r5, lr}
 800d0a2:	4d06      	ldr	r5, [pc, #24]	; (800d0bc <_close_r+0x1c>)
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	4604      	mov	r4, r0
 800d0a8:	4608      	mov	r0, r1
 800d0aa:	602b      	str	r3, [r5, #0]
 800d0ac:	f7f8 fff1 	bl	8006092 <_close>
 800d0b0:	1c43      	adds	r3, r0, #1
 800d0b2:	d102      	bne.n	800d0ba <_close_r+0x1a>
 800d0b4:	682b      	ldr	r3, [r5, #0]
 800d0b6:	b103      	cbz	r3, 800d0ba <_close_r+0x1a>
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	bd38      	pop	{r3, r4, r5, pc}
 800d0bc:	2000cfb0 	.word	0x2000cfb0

0800d0c0 <_fstat_r>:
 800d0c0:	b538      	push	{r3, r4, r5, lr}
 800d0c2:	4d07      	ldr	r5, [pc, #28]	; (800d0e0 <_fstat_r+0x20>)
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	4604      	mov	r4, r0
 800d0c8:	4608      	mov	r0, r1
 800d0ca:	4611      	mov	r1, r2
 800d0cc:	602b      	str	r3, [r5, #0]
 800d0ce:	f7f8 ffec 	bl	80060aa <_fstat>
 800d0d2:	1c43      	adds	r3, r0, #1
 800d0d4:	d102      	bne.n	800d0dc <_fstat_r+0x1c>
 800d0d6:	682b      	ldr	r3, [r5, #0]
 800d0d8:	b103      	cbz	r3, 800d0dc <_fstat_r+0x1c>
 800d0da:	6023      	str	r3, [r4, #0]
 800d0dc:	bd38      	pop	{r3, r4, r5, pc}
 800d0de:	bf00      	nop
 800d0e0:	2000cfb0 	.word	0x2000cfb0

0800d0e4 <_isatty_r>:
 800d0e4:	b538      	push	{r3, r4, r5, lr}
 800d0e6:	4d06      	ldr	r5, [pc, #24]	; (800d100 <_isatty_r+0x1c>)
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	4604      	mov	r4, r0
 800d0ec:	4608      	mov	r0, r1
 800d0ee:	602b      	str	r3, [r5, #0]
 800d0f0:	f7f8 ffeb 	bl	80060ca <_isatty>
 800d0f4:	1c43      	adds	r3, r0, #1
 800d0f6:	d102      	bne.n	800d0fe <_isatty_r+0x1a>
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	b103      	cbz	r3, 800d0fe <_isatty_r+0x1a>
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	bd38      	pop	{r3, r4, r5, pc}
 800d100:	2000cfb0 	.word	0x2000cfb0

0800d104 <_lseek_r>:
 800d104:	b538      	push	{r3, r4, r5, lr}
 800d106:	4d07      	ldr	r5, [pc, #28]	; (800d124 <_lseek_r+0x20>)
 800d108:	4604      	mov	r4, r0
 800d10a:	4608      	mov	r0, r1
 800d10c:	4611      	mov	r1, r2
 800d10e:	2200      	movs	r2, #0
 800d110:	602a      	str	r2, [r5, #0]
 800d112:	461a      	mov	r2, r3
 800d114:	f7f8 ffe4 	bl	80060e0 <_lseek>
 800d118:	1c43      	adds	r3, r0, #1
 800d11a:	d102      	bne.n	800d122 <_lseek_r+0x1e>
 800d11c:	682b      	ldr	r3, [r5, #0]
 800d11e:	b103      	cbz	r3, 800d122 <_lseek_r+0x1e>
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	bd38      	pop	{r3, r4, r5, pc}
 800d124:	2000cfb0 	.word	0x2000cfb0

0800d128 <_malloc_usable_size_r>:
 800d128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d12c:	1f18      	subs	r0, r3, #4
 800d12e:	2b00      	cmp	r3, #0
 800d130:	bfbc      	itt	lt
 800d132:	580b      	ldrlt	r3, [r1, r0]
 800d134:	18c0      	addlt	r0, r0, r3
 800d136:	4770      	bx	lr

0800d138 <_read_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4d07      	ldr	r5, [pc, #28]	; (800d158 <_read_r+0x20>)
 800d13c:	4604      	mov	r4, r0
 800d13e:	4608      	mov	r0, r1
 800d140:	4611      	mov	r1, r2
 800d142:	2200      	movs	r2, #0
 800d144:	602a      	str	r2, [r5, #0]
 800d146:	461a      	mov	r2, r3
 800d148:	f7f8 ff6a 	bl	8006020 <_read>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_read_r+0x1e>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	b103      	cbz	r3, 800d156 <_read_r+0x1e>
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	2000cfb0 	.word	0x2000cfb0

0800d15c <_init>:
 800d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d15e:	bf00      	nop
 800d160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d162:	bc08      	pop	{r3}
 800d164:	469e      	mov	lr, r3
 800d166:	4770      	bx	lr

0800d168 <_fini>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	bf00      	nop
 800d16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16e:	bc08      	pop	{r3}
 800d170:	469e      	mov	lr, r3
 800d172:	4770      	bx	lr
