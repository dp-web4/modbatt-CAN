
VCU Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a924  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800aa64  0800aa64  0001aa64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b210  0800b210  0001b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b218  0800b218  0001b218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b21c  0800b21c  0001b21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000008  0800b220  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cd98  2000007c  0800b294  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000ce14  0800b294  0002ce14  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028ea0  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e8e  00000000  00000000  00048f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024e8  00000000  00000000  0004cde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000023c0  00000000  00000000  0004f2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000260bb  00000000  00000000  00051688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021d39  00000000  00000000  00077743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f3f8a  00000000  00000000  0009947c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0018d406  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aad8  00000000  00000000  0018d458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000007c 	.word	0x2000007c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800aa4c 	.word	0x0800aa4c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000080 	.word	0x20000080
 800017c:	0800aa4c 	.word	0x0800aa4c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APP_LED_Clear>:
*                   Section: Application Local Functions                                 V C U   E M U L A T O R
*
***************************************************************************************************************/

void APP_LED_Clear(uint8_t led)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d012      	beq.n	800056a <APP_LED_Clear+0x36>
 8000544:	2b02      	cmp	r3, #2
 8000546:	dc16      	bgt.n	8000576 <APP_LED_Clear+0x42>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <APP_LED_Clear+0x1e>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d006      	beq.n	800055e <APP_LED_Clear+0x2a>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8000550:	e011      	b.n	8000576 <APP_LED_Clear+0x42>
        	HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2102      	movs	r1, #2
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <APP_LED_Clear+0x4c>)
 8000558:	f004 fac6 	bl	8004ae8 <HAL_GPIO_WritePin>
            break;
 800055c:	e00c      	b.n	8000578 <APP_LED_Clear+0x44>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <APP_LED_Clear+0x4c>)
 8000564:	f004 fac0 	bl	8004ae8 <HAL_GPIO_WritePin>
            break;
 8000568:	e006      	b.n	8000578 <APP_LED_Clear+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <APP_LED_Clear+0x4c>)
 8000570:	f004 faba 	bl	8004ae8 <HAL_GPIO_WritePin>
            break;
 8000574:	e000      	b.n	8000578 <APP_LED_Clear+0x44>
        default: break;
 8000576:	bf00      	nop
    }
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	48000400 	.word	0x48000400

08000584 <APP_LED_Set>:

void APP_LED_Set(uint8_t led)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d012      	beq.n	80005ba <APP_LED_Set+0x36>
 8000594:	2b02      	cmp	r3, #2
 8000596:	dc16      	bgt.n	80005c6 <APP_LED_Set+0x42>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <APP_LED_Set+0x1e>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d006      	beq.n	80005ae <APP_LED_Set+0x2a>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80005a0:	e011      	b.n	80005c6 <APP_LED_Set+0x42>
        	HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <APP_LED_Set+0x4c>)
 80005a8:	f004 fa9e 	bl	8004ae8 <HAL_GPIO_WritePin>
            break;
 80005ac:	e00c      	b.n	80005c8 <APP_LED_Set+0x44>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <APP_LED_Set+0x4c>)
 80005b4:	f004 fa98 	bl	8004ae8 <HAL_GPIO_WritePin>
            break;
 80005b8:	e006      	b.n	80005c8 <APP_LED_Set+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2120      	movs	r1, #32
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <APP_LED_Set+0x4c>)
 80005c0:	f004 fa92 	bl	8004ae8 <HAL_GPIO_WritePin>
            break;
 80005c4:	e000      	b.n	80005c8 <APP_LED_Set+0x44>
        default: break;
 80005c6:	bf00      	nop
    }
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <VCU_Initialize>:

/***************************************************************************************************************
*     A P P _ I n i t i a l i z e                                                        V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_Initialize(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0



  //clear the batteryModule Array
  memset(module,0,sizeof(module));
 80005d8:	f44f 4246 	mov.w	r2, #50688	; 0xc600
 80005dc:	2100      	movs	r1, #0
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <VCU_Initialize+0x50>)
 80005e0:	f009 f826 	bl	8009630 <memset>


  serialOut("");
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <VCU_Initialize+0x54>)
 80005e6:	f002 ffd7 	bl	8003598 <serialOut>
  serialOut("");
 80005ea:	480f      	ldr	r0, [pc, #60]	; (8000628 <VCU_Initialize+0x54>)
 80005ec:	f002 ffd4 	bl	8003598 <serialOut>
  serialOut("        ██    ██");
 80005f0:	480e      	ldr	r0, [pc, #56]	; (800062c <VCU_Initialize+0x58>)
 80005f2:	f002 ffd1 	bl	8003598 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <VCU_Initialize+0x5c>)
 80005f8:	f002 ffce 	bl	8003598 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     VCU Emulator V1.0        (c) 2023");
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <VCU_Initialize+0x60>)
 80005fe:	f002 ffcb 	bl	8003598 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <VCU_Initialize+0x64>)
 8000604:	f002 ffc8 	bl	8003598 <serialOut>
  serialOut("     ██    ██    ██");
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <VCU_Initialize+0x68>)
 800060a:	f002 ffc5 	bl	8003598 <serialOut>
  serialOut("     m o d b a t t");
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <VCU_Initialize+0x6c>)
 8000610:	f002 ffc2 	bl	8003598 <serialOut>
  serialOut("");
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <VCU_Initialize+0x54>)
 8000616:	f002 ffbf 	bl	8003598 <serialOut>

    appData.state = APP_STATE_TEST_RAM_ACCESS;

#else
    /* Place the App state machine in its initial state. */
    vcuData.state = VCU_STATE_TEST_RAM_ACCESS;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <VCU_Initialize+0x70>)
 800061c:	2202      	movs	r2, #2
 800061e:	701a      	strb	r2, [r3, #0]
#endif

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000154 	.word	0x20000154
 8000628:	0800aa64 	.word	0x0800aa64
 800062c:	0800aa68 	.word	0x0800aa68
 8000630:	0800aa84 	.word	0x0800aa84
 8000634:	0800aaac 	.word	0x0800aaac
 8000638:	0800aafc 	.word	0x0800aafc
 800063c:	0800ab4c 	.word	0x0800ab4c
 8000640:	0800ab6c 	.word	0x0800ab6c
 8000644:	20000098 	.word	0x20000098

08000648 <VCU_Tasks>:

/***************************************************************************************************************
*     A P P _ T a s k s                                                                  V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_Tasks(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0


    /* Check the application's current state. */
    switch (vcuData.state) {
 800064e:	4b4c      	ldr	r3, [pc, #304]	; (8000780 <VCU_Tasks+0x138>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b03      	cmp	r3, #3
 8000654:	f200 808a 	bhi.w	800076c <VCU_Tasks+0x124>
 8000658:	a201      	add	r2, pc, #4	; (adr r2, 8000660 <VCU_Tasks+0x18>)
 800065a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065e:	bf00      	nop
 8000660:	08000671 	.word	0x08000671
 8000664:	0800069d 	.word	0x0800069d
 8000668:	080006f7 	.word	0x080006f7
 800066c:	0800072b 	.word	0x0800072b
            /* Application's initial state. */
        case VCU_STATE_INIT:
        {
          if (DEBUG > 1) serialOut("APP_STATE_INIT");
          //Nop();
          APP_LED_Set(APP_INIT_LED);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ff87 	bl	8000584 <APP_LED_Set>
          APP_CANFDSPI_Init();
 8000676:	f000 f8a1 	bl	80007bc <APP_CANFDSPI_Init>
          APP_LED_Clear(APP_INIT_LED);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff5a 	bl	8000534 <APP_LED_Clear>

          //reset counter since last contact
          pack.lastFrame.ticks = htim1.Instance->CNT;
 8000680:	4b40      	ldr	r3, [pc, #256]	; (8000784 <VCU_Tasks+0x13c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b3f      	ldr	r3, [pc, #252]	; (8000788 <VCU_Tasks+0x140>)
 800068a:	861a      	strh	r2, [r3, #48]	; 0x30
          pack.lastFrame.overflows = etTimerOverflows;
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <VCU_Tasks+0x144>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a3d      	ldr	r2, [pc, #244]	; (8000788 <VCU_Tasks+0x140>)
 8000692:	6353      	str	r3, [r2, #52]	; 0x34

          vcuData.state = VCU_STATE_RUN;
 8000694:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <VCU_Tasks+0x138>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]

          break;
 800069a:	e06c      	b.n	8000776 <VCU_Tasks+0x12e>
        }
        case VCU_STATE_RUN:
        {
          // Check for incoing messages
          VCU_ReceiveMessage_Tasks();
 800069c:	f000 f930 	bl	8000900 <VCU_ReceiveMessage_Tasks>

          //Check for expired last contact from Pack Controller
          if(VCU_TicksSinceLastMessage() > PCU_ET_TIMEOUT){
 80006a0:	f000 fc78 	bl	8000f94 <VCU_TicksSinceLastMessage>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d912      	bls.n	80006d4 <VCU_Tasks+0x8c>
            vcuState = packOff;
 80006ae:	4b38      	ldr	r3, [pc, #224]	; (8000790 <VCU_Tasks+0x148>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
            activeConnection = 0;
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <VCU_Tasks+0x14c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
            if(debugLevel & (DBG_PCU)){ sprintf(tempBuffer,"PC LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 80006ba:	4b37      	ldr	r3, [pc, #220]	; (8000798 <VCU_Tasks+0x150>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <VCU_Tasks+0x8c>
 80006c6:	4935      	ldr	r1, [pc, #212]	; (800079c <VCU_Tasks+0x154>)
 80006c8:	4835      	ldr	r0, [pc, #212]	; (80007a0 <VCU_Tasks+0x158>)
 80006ca:	f008 fff7 	bl	80096bc <siprintf>
 80006ce:	4834      	ldr	r0, [pc, #208]	; (80007a0 <VCU_Tasks+0x158>)
 80006d0:	f002 ff62 	bl	8003598 <serialOut>
          }

          // only start sending state data once pack controller has contacted us
          if(activeConnection){
 80006d4:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <VCU_Tasks+0x14c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d04b      	beq.n	8000774 <VCU_Tasks+0x12c>
            // sendState set every 200mS in timer overflow callback
            if (sendState){
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <VCU_Tasks+0x15c>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d047      	beq.n	8000774 <VCU_Tasks+0x12c>
              VCU_TransmitState(vcuState);
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <VCU_Tasks+0x148>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fbef 	bl	8000ecc <VCU_TransmitState>
              sendState = 0;
 80006ee:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <VCU_Tasks+0x15c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
            }
          }

          break;
 80006f4:	e03e      	b.n	8000774 <VCU_Tasks+0x12c>
        }

        case VCU_STATE_TEST_RAM_ACCESS:             // RAM access test
        {
          bool passed = VCU_TestRamAccess();
 80006f6:	f000 fcfb 	bl	80010f0 <VCU_TestRamAccess>
 80006fa:	4603      	mov	r3, r0
 80006fc:	71bb      	strb	r3, [r7, #6]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD RAM TEST      : PASSED"); serialOut(tempBuffer);
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <VCU_Tasks+0xcc>
 8000704:	4928      	ldr	r1, [pc, #160]	; (80007a8 <VCU_Tasks+0x160>)
 8000706:	4826      	ldr	r0, [pc, #152]	; (80007a0 <VCU_Tasks+0x158>)
 8000708:	f008 ffd8 	bl	80096bc <siprintf>
 800070c:	4824      	ldr	r0, [pc, #144]	; (80007a0 <VCU_Tasks+0x158>)
 800070e:	f002 ff43 	bl	8003598 <serialOut>
 8000712:	e006      	b.n	8000722 <VCU_Tasks+0xda>
          }else{        sprintf(tempBuffer,"     MCP2518FD RAM TEST      : FAILED"); serialOut(tempBuffer);
 8000714:	4925      	ldr	r1, [pc, #148]	; (80007ac <VCU_Tasks+0x164>)
 8000716:	4822      	ldr	r0, [pc, #136]	; (80007a0 <VCU_Tasks+0x158>)
 8000718:	f008 ffd0 	bl	80096bc <siprintf>
 800071c:	4820      	ldr	r0, [pc, #128]	; (80007a0 <VCU_Tasks+0x158>)
 800071e:	f002 ff3b 	bl	8003598 <serialOut>
          }
          vcuData.state = VCU_STATE_TEST_REGISTER_ACCESS;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <VCU_Tasks+0x138>)
 8000724:	2203      	movs	r2, #3
 8000726:	701a      	strb	r2, [r3, #0]
          break;
 8000728:	e025      	b.n	8000776 <VCU_Tasks+0x12e>
        }
        case VCU_STATE_TEST_REGISTER_ACCESS: /* Register access test */
        {
          bool passed = VCU_TestRegisterAccess();
 800072a:	f000 fc69 	bl	8001000 <VCU_TestRegisterAccess>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : PASSED"); serialOut(tempBuffer);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d007      	beq.n	8000748 <VCU_Tasks+0x100>
 8000738:	491d      	ldr	r1, [pc, #116]	; (80007b0 <VCU_Tasks+0x168>)
 800073a:	4819      	ldr	r0, [pc, #100]	; (80007a0 <VCU_Tasks+0x158>)
 800073c:	f008 ffbe 	bl	80096bc <siprintf>
 8000740:	4817      	ldr	r0, [pc, #92]	; (80007a0 <VCU_Tasks+0x158>)
 8000742:	f002 ff29 	bl	8003598 <serialOut>
 8000746:	e006      	b.n	8000756 <VCU_Tasks+0x10e>
          }else{        sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : FAILED"); serialOut(tempBuffer);
 8000748:	491a      	ldr	r1, [pc, #104]	; (80007b4 <VCU_Tasks+0x16c>)
 800074a:	4815      	ldr	r0, [pc, #84]	; (80007a0 <VCU_Tasks+0x158>)
 800074c:	f008 ffb6 	bl	80096bc <siprintf>
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <VCU_Tasks+0x158>)
 8000752:	f002 ff21 	bl	8003598 <serialOut>
          }
          sprintf(tempBuffer," "); serialOut(tempBuffer);
 8000756:	4918      	ldr	r1, [pc, #96]	; (80007b8 <VCU_Tasks+0x170>)
 8000758:	4811      	ldr	r0, [pc, #68]	; (80007a0 <VCU_Tasks+0x158>)
 800075a:	f008 ffaf 	bl	80096bc <siprintf>
 800075e:	4810      	ldr	r0, [pc, #64]	; (80007a0 <VCU_Tasks+0x158>)
 8000760:	f002 ff1a 	bl	8003598 <serialOut>
          vcuData.state = VCU_STATE_INIT;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <VCU_Tasks+0x138>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
          break;
 800076a:	e004      	b.n	8000776 <VCU_Tasks+0x12e>
        }
        // The default state should never be executed
        default:
        {
          /* TODO: Handle error in application's state machine. */
          vcuData.state = VCU_STATE_INIT;
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <VCU_Tasks+0x138>)
 800076e:	2200      	movs	r2, #0
 8000770:	701a      	strb	r2, [r3, #0]
          break;
 8000772:	e000      	b.n	8000776 <VCU_Tasks+0x12e>
          break;
 8000774:	bf00      	nop
        }
    }
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000098 	.word	0x20000098
 8000784:	2000c948 	.word	0x2000c948
 8000788:	2000c754 	.word	0x2000c754
 800078c:	2000cdf4 	.word	0x2000cdf4
 8000790:	2000c78d 	.word	0x2000c78d
 8000794:	2000c78c 	.word	0x2000c78c
 8000798:	20000008 	.word	0x20000008
 800079c:	0800ab80 	.word	0x0800ab80
 80007a0:	2000cd8c 	.word	0x2000cd8c
 80007a4:	2000cdf9 	.word	0x2000cdf9
 80007a8:	0800ab9c 	.word	0x0800ab9c
 80007ac:	0800abc4 	.word	0x0800abc4
 80007b0:	0800abec 	.word	0x0800abec
 80007b4:	0800ac14 	.word	0x0800ac14
 80007b8:	0800ac3c 	.word	0x0800ac3c

080007bc <APP_CANFDSPI_Init>:

/***************************************************************************************************************
*     A P P _ C A N F D S P I _ I n i t                                                  V C U   E M U L A T O R
***************************************************************************************************************/
void APP_CANFDSPI_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
    // Reset device
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 80007c0:	2000      	movs	r0, #0
 80007c2:	f000 fd09 	bl	80011d8 <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 80007c6:	2000      	movs	r0, #0
 80007c8:	f001 fe9b 	bl	8002502 <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 80007cc:	21ff      	movs	r1, #255	; 0xff
 80007ce:	2000      	movs	r0, #0
 80007d0:	f001 fecb 	bl	800256a <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 80007d4:	4845      	ldr	r0, [pc, #276]	; (80008ec <APP_CANFDSPI_Init+0x130>)
 80007d6:	f001 f8d7 	bl	8001988 <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 80007da:	4a44      	ldr	r2, [pc, #272]	; (80008ec <APP_CANFDSPI_Init+0x130>)
 80007dc:	7813      	ldrb	r3, [r2, #0]
 80007de:	f043 0320 	orr.w	r3, r3, #32
 80007e2:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 80007e4:	4a41      	ldr	r2, [pc, #260]	; (80008ec <APP_CANFDSPI_Init+0x130>)
 80007e6:	7853      	ldrb	r3, [r2, #1]
 80007e8:	f36f 1386 	bfc	r3, #6, #1
 80007ec:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 80007ee:	493f      	ldr	r1, [pc, #252]	; (80008ec <APP_CANFDSPI_Init+0x130>)
 80007f0:	2000      	movs	r0, #0
 80007f2:	f001 f83b 	bl	800186c <DRV_CANFDSPI_Configure>

    // Setup TX FIFO
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 80007f6:	483e      	ldr	r0, [pc, #248]	; (80008f0 <APP_CANFDSPI_Init+0x134>)
 80007f8:	f001 f9d6 	bl	8001ba8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txConfig.FifoSize = 7;
 80007fc:	4a3c      	ldr	r2, [pc, #240]	; (80008f0 <APP_CANFDSPI_Init+0x134>)
 80007fe:	7853      	ldrb	r3, [r2, #1]
 8000800:	2107      	movs	r1, #7
 8000802:	f361 0304 	bfi	r3, r1, #0, #5
 8000806:	7053      	strb	r3, [r2, #1]
    txConfig.PayLoadSize = CAN_PLSIZE_64;
 8000808:	4a39      	ldr	r2, [pc, #228]	; (80008f0 <APP_CANFDSPI_Init+0x134>)
 800080a:	7853      	ldrb	r3, [r2, #1]
 800080c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000810:	7053      	strb	r3, [r2, #1]
    txConfig.TxPriority = 1;
 8000812:	4a37      	ldr	r2, [pc, #220]	; (80008f0 <APP_CANFDSPI_Init+0x134>)
 8000814:	7813      	ldrb	r3, [r2, #0]
 8000816:	2101      	movs	r1, #1
 8000818:	f361 0345 	bfi	r3, r1, #1, #5
 800081c:	7013      	strb	r3, [r2, #0]

    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txConfig);
 800081e:	4a34      	ldr	r2, [pc, #208]	; (80008f0 <APP_CANFDSPI_Init+0x134>)
 8000820:	2102      	movs	r1, #2
 8000822:	2000      	movs	r0, #0
 8000824:	f001 f968 	bl	8001af8 <DRV_CANFDSPI_TransmitChannelConfigure>

    // Setup RX FIFO
    DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8000828:	4832      	ldr	r0, [pc, #200]	; (80008f4 <APP_CANFDSPI_Init+0x138>)
 800082a:	f001 fbeb 	bl	8002004 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
    rxConfig.FifoSize = 15;
 800082e:	4a31      	ldr	r2, [pc, #196]	; (80008f4 <APP_CANFDSPI_Init+0x138>)
 8000830:	7813      	ldrb	r3, [r2, #0]
 8000832:	210f      	movs	r1, #15
 8000834:	f361 0345 	bfi	r3, r1, #1, #5
 8000838:	7013      	strb	r3, [r2, #0]
    rxConfig.PayLoadSize = CAN_PLSIZE_64;
 800083a:	4a2e      	ldr	r2, [pc, #184]	; (80008f4 <APP_CANFDSPI_Init+0x138>)
 800083c:	8813      	ldrh	r3, [r2, #0]
 800083e:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8000842:	8013      	strh	r3, [r2, #0]

    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxConfig);
 8000844:	4a2b      	ldr	r2, [pc, #172]	; (80008f4 <APP_CANFDSPI_Init+0x138>)
 8000846:	2101      	movs	r1, #1
 8000848:	2000      	movs	r0, #0
 800084a:	f001 fb8f 	bl	8001f6c <DRV_CANFDSPI_ReceiveChannelConfigure>

    // Setup RX Filter
    fObj.word = 0;
 800084e:	4b2a      	ldr	r3, [pc, #168]	; (80008f8 <APP_CANFDSPI_Init+0x13c>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
    //fObj.bF.SID = 0xda;
    fObj.bF.SID = 0x00;
 8000854:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <APP_CANFDSPI_Init+0x13c>)
 8000856:	8813      	ldrh	r3, [r2, #0]
 8000858:	f36f 030a 	bfc	r3, #0, #11
 800085c:	8013      	strh	r3, [r2, #0]
    fObj.bF.EXIDE = 0;
 800085e:	4a26      	ldr	r2, [pc, #152]	; (80008f8 <APP_CANFDSPI_Init+0x13c>)
 8000860:	78d3      	ldrb	r3, [r2, #3]
 8000862:	f36f 1386 	bfc	r3, #6, #1
 8000866:	70d3      	strb	r3, [r2, #3]
    fObj.bF.EID = 0x00;
 8000868:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <APP_CANFDSPI_Init+0x13c>)
 800086a:	6813      	ldr	r3, [r2, #0]
 800086c:	f36f 23dc 	bfc	r3, #11, #18
 8000870:	6013      	str	r3, [r2, #0]

    DRV_CANFDSPI_FilterObjectConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &fObj.bF);
 8000872:	4a21      	ldr	r2, [pc, #132]	; (80008f8 <APP_CANFDSPI_Init+0x13c>)
 8000874:	2100      	movs	r1, #0
 8000876:	2000      	movs	r0, #0
 8000878:	f001 fafa 	bl	8001e70 <DRV_CANFDSPI_FilterObjectConfigure>

    // Setup RX Mask
    mObj.word = 0;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <APP_CANFDSPI_Init+0x140>)
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
    mObj.bF.MSID = 0x0;
 8000882:	4a1e      	ldr	r2, [pc, #120]	; (80008fc <APP_CANFDSPI_Init+0x140>)
 8000884:	8813      	ldrh	r3, [r2, #0]
 8000886:	f36f 030a 	bfc	r3, #0, #11
 800088a:	8013      	strh	r3, [r2, #0]
    mObj.bF.MIDE = 1; // Only allow standard IDs
 800088c:	4a1b      	ldr	r2, [pc, #108]	; (80008fc <APP_CANFDSPI_Init+0x140>)
 800088e:	78d3      	ldrb	r3, [r2, #3]
 8000890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000894:	70d3      	strb	r3, [r2, #3]
    mObj.bF.MEID = 0x0;
 8000896:	4a19      	ldr	r2, [pc, #100]	; (80008fc <APP_CANFDSPI_Init+0x140>)
 8000898:	6813      	ldr	r3, [r2, #0]
 800089a:	f36f 23dc 	bfc	r3, #11, #18
 800089e:	6013      	str	r3, [r2, #0]
    DRV_CANFDSPI_FilterMaskConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &mObj.bF);
 80008a0:	4a16      	ldr	r2, [pc, #88]	; (80008fc <APP_CANFDSPI_Init+0x140>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f001 fb05 	bl	8001eb4 <DRV_CANFDSPI_FilterMaskConfigure>

    // Link FIFO and Filter
    DRV_CANFDSPI_FilterToFifoLink(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, APP_RX_FIFO, true);
 80008aa:	2301      	movs	r3, #1
 80008ac:	2201      	movs	r2, #1
 80008ae:	2100      	movs	r1, #0
 80008b0:	2000      	movs	r0, #0
 80008b2:	f001 fb23 	bl	8001efc <DRV_CANFDSPI_FilterToFifoLink>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 80008b6:	2300      	movs	r3, #0
 80008b8:	2202      	movs	r2, #2
 80008ba:	2101      	movs	r1, #1
 80008bc:	2000      	movs	r0, #0
 80008be:	f001 fe94 	bl	80025ea <DRV_CANFDSPI_BitTimeConfigure>

    // Setup Transmit and Receive Interrupts
    DRV_CANFDSPI_GpioModeConfigure(DRV_CANFDSPI_INDEX_0, GPIO_MODE_INT, GPIO_MODE_INT);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2100      	movs	r1, #0
 80008c6:	2000      	movs	r0, #0
 80008c8:	f002 fdae 	bl	8003428 <DRV_CANFDSPI_GpioModeConfigure>
	#ifdef APP_USE_TX_INT
    DRV_CANFDSPI_TransmitChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
	#endif
    DRV_CANFDSPI_ReceiveChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	2000      	movs	r0, #0
 80008d2:	f001 fd96 	bl	8002402 <DRV_CANFDSPI_ReceiveChannelEventEnable>
    DRV_CANFDSPI_ModuleEventEnable(DRV_CANFDSPI_INDEX_0, CAN_TX_EVENT | CAN_RX_EVENT);
 80008d6:	2103      	movs	r1, #3
 80008d8:	2000      	movs	r0, #0
 80008da:	f001 fce6 	bl	80022aa <DRV_CANFDSPI_ModuleEventEnable>

    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 80008de:	2100      	movs	r1, #0
 80008e0:	2000      	movs	r0, #0
 80008e2:	f001 f8cd 	bl	8001a80 <DRV_CANFDSPI_OperationModeSelect>
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000009c 	.word	0x2000009c
 80008f0:	200000a0 	.word	0x200000a0
 80008f4:	200000f4 	.word	0x200000f4
 80008f8:	200000f8 	.word	0x200000f8
 80008fc:	200000fc 	.word	0x200000fc

08000900 <VCU_ReceiveMessage_Tasks>:

/***************************************************************************************************************
*     A P P _ R e c e i v e M e s s a g e _ T a s k s                                    V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_ReceiveMessage_Tasks(void)
{
 8000900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af08      	add	r7, sp, #32

    // CANPKT_REGISTER registration;
    //uint8_t index;

    // Check if FIFO is not empty
    DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 8000906:	4a9f      	ldr	r2, [pc, #636]	; (8000b84 <VCU_ReceiveMessage_Tasks+0x284>)
 8000908:	2101      	movs	r1, #1
 800090a:	2000      	movs	r0, #0
 800090c:	f001 fd40 	bl	8002390 <DRV_CANFDSPI_ReceiveChannelEventGet>

    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000910:	e26f      	b.n	8000df2 <VCU_ReceiveMessage_Tasks+0x4f2>

      // Get message
      DRV_CANFDSPI_ReceiveMessageGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8000912:	2340      	movs	r3, #64	; 0x40
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	4b9c      	ldr	r3, [pc, #624]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000918:	4a9c      	ldr	r2, [pc, #624]	; (8000b8c <VCU_ReceiveMessage_Tasks+0x28c>)
 800091a:	2101      	movs	r1, #1
 800091c:	2000      	movs	r0, #0
 800091e:	f001 fb9b 	bl	8002058 <DRV_CANFDSPI_ReceiveMessageGet>

      activeConnection = 1;
 8000922:	4b9b      	ldr	r3, [pc, #620]	; (8000b90 <VCU_ReceiveMessage_Tasks+0x290>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
      // reset last contact
      pack.lastFrame.ticks = htim1.Instance->CNT;
 8000928:	4b9a      	ldr	r3, [pc, #616]	; (8000b94 <VCU_ReceiveMessage_Tasks+0x294>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b99      	ldr	r3, [pc, #612]	; (8000b98 <VCU_ReceiveMessage_Tasks+0x298>)
 8000932:	861a      	strh	r2, [r3, #48]	; 0x30
      pack.lastFrame.overflows = etTimerOverflows;
 8000934:	4b99      	ldr	r3, [pc, #612]	; (8000b9c <VCU_ReceiveMessage_Tasks+0x29c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a97      	ldr	r2, [pc, #604]	; (8000b98 <VCU_ReceiveMessage_Tasks+0x298>)
 800093a:	6353      	str	r3, [r2, #52]	; 0x34

      switch (rxObj.bF.id.SID) {
 800093c:	4b93      	ldr	r3, [pc, #588]	; (8000b8c <VCU_ReceiveMessage_Tasks+0x28c>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000944:	b29b      	uxth	r3, r3
 8000946:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800094a:	2b20      	cmp	r3, #32
 800094c:	f200 8207 	bhi.w	8000d5e <VCU_ReceiveMessage_Tasks+0x45e>
 8000950:	a201      	add	r2, pc, #4	; (adr r2, 8000958 <VCU_ReceiveMessage_Tasks+0x58>)
 8000952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000956:	bf00      	nop
 8000958:	08000cf7 	.word	0x08000cf7
 800095c:	08000d5f 	.word	0x08000d5f
 8000960:	08000d5f 	.word	0x08000d5f
 8000964:	08000d5f 	.word	0x08000d5f
 8000968:	08000d5f 	.word	0x08000d5f
 800096c:	08000d5f 	.word	0x08000d5f
 8000970:	08000d5f 	.word	0x08000d5f
 8000974:	08000d5f 	.word	0x08000d5f
 8000978:	08000d5f 	.word	0x08000d5f
 800097c:	08000d5f 	.word	0x08000d5f
 8000980:	08000d5f 	.word	0x08000d5f
 8000984:	08000d5f 	.word	0x08000d5f
 8000988:	08000d5f 	.word	0x08000d5f
 800098c:	08000d5f 	.word	0x08000d5f
 8000990:	08000d5f 	.word	0x08000d5f
 8000994:	08000d5f 	.word	0x08000d5f
 8000998:	08000d5f 	.word	0x08000d5f
 800099c:	080009dd 	.word	0x080009dd
 80009a0:	08000a47 	.word	0x08000a47
 80009a4:	08000ab1 	.word	0x08000ab1
 80009a8:	08000d5f 	.word	0x08000d5f
 80009ac:	08000b1b 	.word	0x08000b1b
 80009b0:	08000d5f 	.word	0x08000d5f
 80009b4:	08000d5f 	.word	0x08000d5f
 80009b8:	08000bb9 	.word	0x08000bb9
 80009bc:	08000c23 	.word	0x08000c23
 80009c0:	08000d5f 	.word	0x08000d5f
 80009c4:	08000d5f 	.word	0x08000d5f
 80009c8:	08000d5f 	.word	0x08000d5f
 80009cc:	08000d5f 	.word	0x08000d5f
 80009d0:	08000d5f 	.word	0x08000d5f
 80009d4:	08000d5f 	.word	0x08000d5f
 80009d8:	08000c8d 	.word	0x08000c8d
        case ID_BMS_DATA_1:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_DATA_1 SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 80009dc:	4b70      	ldr	r3, [pc, #448]	; (8000ba0 <VCU_ReceiveMessage_Tasks+0x2a0>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	f003 030a 	and.w	r3, r3, #10
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	f000 81ee 	beq.w	8000dc6 <VCU_ReceiveMessage_Tasks+0x4c6>
 80009ea:	4b68      	ldr	r3, [pc, #416]	; (8000b8c <VCU_ReceiveMessage_Tasks+0x28c>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	469c      	mov	ip, r3
 80009f6:	4b64      	ldr	r3, [pc, #400]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	469e      	mov	lr, r3
 80009fc:	4b62      	ldr	r3, [pc, #392]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 80009fe:	785b      	ldrb	r3, [r3, #1]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b61      	ldr	r3, [pc, #388]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a04:	789b      	ldrb	r3, [r3, #2]
 8000a06:	4619      	mov	r1, r3
 8000a08:	4b5f      	ldr	r3, [pc, #380]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a0a:	78db      	ldrb	r3, [r3, #3]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	4b5e      	ldr	r3, [pc, #376]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a10:	791b      	ldrb	r3, [r3, #4]
 8000a12:	461c      	mov	r4, r3
 8000a14:	4b5c      	ldr	r3, [pc, #368]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a16:	795b      	ldrb	r3, [r3, #5]
 8000a18:	461d      	mov	r5, r3
 8000a1a:	4b5b      	ldr	r3, [pc, #364]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a1c:	799b      	ldrb	r3, [r3, #6]
 8000a1e:	461e      	mov	r6, r3
 8000a20:	4b59      	ldr	r3, [pc, #356]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a22:	79db      	ldrb	r3, [r3, #7]
 8000a24:	9306      	str	r3, [sp, #24]
 8000a26:	9605      	str	r6, [sp, #20]
 8000a28:	9504      	str	r5, [sp, #16]
 8000a2a:	9403      	str	r4, [sp, #12]
 8000a2c:	9002      	str	r0, [sp, #8]
 8000a2e:	9101      	str	r1, [sp, #4]
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	4673      	mov	r3, lr
 8000a34:	4662      	mov	r2, ip
 8000a36:	495b      	ldr	r1, [pc, #364]	; (8000ba4 <VCU_ReceiveMessage_Tasks+0x2a4>)
 8000a38:	485b      	ldr	r0, [pc, #364]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000a3a:	f008 fe3f 	bl	80096bc <siprintf>
 8000a3e:	485a      	ldr	r0, [pc, #360]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000a40:	f002 fdaa 	bl	8003598 <serialOut>
          break;
 8000a44:	e1bf      	b.n	8000dc6 <VCU_ReceiveMessage_Tasks+0x4c6>
        case ID_BMS_DATA_2:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_DATA_2 SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000a46:	4b56      	ldr	r3, [pc, #344]	; (8000ba0 <VCU_ReceiveMessage_Tasks+0x2a0>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	f003 030a 	and.w	r3, r3, #10
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f000 81bb 	beq.w	8000dca <VCU_ReceiveMessage_Tasks+0x4ca>
 8000a54:	4b4d      	ldr	r3, [pc, #308]	; (8000b8c <VCU_ReceiveMessage_Tasks+0x28c>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	469c      	mov	ip, r3
 8000a60:	4b49      	ldr	r3, [pc, #292]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	469e      	mov	lr, r3
 8000a66:	4b48      	ldr	r3, [pc, #288]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b46      	ldr	r3, [pc, #280]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a6e:	789b      	ldrb	r3, [r3, #2]
 8000a70:	4619      	mov	r1, r3
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a74:	78db      	ldrb	r3, [r3, #3]
 8000a76:	4618      	mov	r0, r3
 8000a78:	4b43      	ldr	r3, [pc, #268]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a7a:	791b      	ldrb	r3, [r3, #4]
 8000a7c:	461c      	mov	r4, r3
 8000a7e:	4b42      	ldr	r3, [pc, #264]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a80:	795b      	ldrb	r3, [r3, #5]
 8000a82:	461d      	mov	r5, r3
 8000a84:	4b40      	ldr	r3, [pc, #256]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a86:	799b      	ldrb	r3, [r3, #6]
 8000a88:	461e      	mov	r6, r3
 8000a8a:	4b3f      	ldr	r3, [pc, #252]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000a8c:	79db      	ldrb	r3, [r3, #7]
 8000a8e:	9306      	str	r3, [sp, #24]
 8000a90:	9605      	str	r6, [sp, #20]
 8000a92:	9504      	str	r5, [sp, #16]
 8000a94:	9403      	str	r4, [sp, #12]
 8000a96:	9002      	str	r0, [sp, #8]
 8000a98:	9101      	str	r1, [sp, #4]
 8000a9a:	9200      	str	r2, [sp, #0]
 8000a9c:	4673      	mov	r3, lr
 8000a9e:	4662      	mov	r2, ip
 8000aa0:	4942      	ldr	r1, [pc, #264]	; (8000bac <VCU_ReceiveMessage_Tasks+0x2ac>)
 8000aa2:	4841      	ldr	r0, [pc, #260]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000aa4:	f008 fe0a 	bl	80096bc <siprintf>
 8000aa8:	483f      	ldr	r0, [pc, #252]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000aaa:	f002 fd75 	bl	8003598 <serialOut>
          break;
 8000aae:	e18c      	b.n	8000dca <VCU_ReceiveMessage_Tasks+0x4ca>
        case ID_BMS_DATA_3:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_DATA_3 SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000ab0:	4b3b      	ldr	r3, [pc, #236]	; (8000ba0 <VCU_ReceiveMessage_Tasks+0x2a0>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	f003 030a 	and.w	r3, r3, #10
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	f000 8188 	beq.w	8000dce <VCU_ReceiveMessage_Tasks+0x4ce>
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <VCU_ReceiveMessage_Tasks+0x28c>)
 8000ac0:	881b      	ldrh	r3, [r3, #0]
 8000ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	469c      	mov	ip, r3
 8000aca:	4b2f      	ldr	r3, [pc, #188]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	469e      	mov	lr, r3
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000ad2:	785b      	ldrb	r3, [r3, #1]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000ad8:	789b      	ldrb	r3, [r3, #2]
 8000ada:	4619      	mov	r1, r3
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000ade:	78db      	ldrb	r3, [r3, #3]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	461c      	mov	r4, r3
 8000ae8:	4b27      	ldr	r3, [pc, #156]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000aea:	795b      	ldrb	r3, [r3, #5]
 8000aec:	461d      	mov	r5, r3
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000af0:	799b      	ldrb	r3, [r3, #6]
 8000af2:	461e      	mov	r6, r3
 8000af4:	4b24      	ldr	r3, [pc, #144]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000af6:	79db      	ldrb	r3, [r3, #7]
 8000af8:	9306      	str	r3, [sp, #24]
 8000afa:	9605      	str	r6, [sp, #20]
 8000afc:	9504      	str	r5, [sp, #16]
 8000afe:	9403      	str	r4, [sp, #12]
 8000b00:	9002      	str	r0, [sp, #8]
 8000b02:	9101      	str	r1, [sp, #4]
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	4673      	mov	r3, lr
 8000b08:	4662      	mov	r2, ip
 8000b0a:	4929      	ldr	r1, [pc, #164]	; (8000bb0 <VCU_ReceiveMessage_Tasks+0x2b0>)
 8000b0c:	4826      	ldr	r0, [pc, #152]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000b0e:	f008 fdd5 	bl	80096bc <siprintf>
 8000b12:	4825      	ldr	r0, [pc, #148]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000b14:	f002 fd40 	bl	8003598 <serialOut>
          break;
 8000b18:	e159      	b.n	8000dce <VCU_ReceiveMessage_Tasks+0x4ce>
        case ID_BMS_DATA_5:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_DATA_5 SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000b1a:	4b21      	ldr	r3, [pc, #132]	; (8000ba0 <VCU_ReceiveMessage_Tasks+0x2a0>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	f003 030a 	and.w	r3, r3, #10
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8155 	beq.w	8000dd2 <VCU_ReceiveMessage_Tasks+0x4d2>
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <VCU_ReceiveMessage_Tasks+0x28c>)
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	469c      	mov	ip, r3
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	469e      	mov	lr, r3
 8000b3a:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b3c:	785b      	ldrb	r3, [r3, #1]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b42:	789b      	ldrb	r3, [r3, #2]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4b10      	ldr	r3, [pc, #64]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b48:	78db      	ldrb	r3, [r3, #3]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b4e:	791b      	ldrb	r3, [r3, #4]
 8000b50:	461c      	mov	r4, r3
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b54:	795b      	ldrb	r3, [r3, #5]
 8000b56:	461d      	mov	r5, r3
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b5a:	799b      	ldrb	r3, [r3, #6]
 8000b5c:	461e      	mov	r6, r3
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <VCU_ReceiveMessage_Tasks+0x288>)
 8000b60:	79db      	ldrb	r3, [r3, #7]
 8000b62:	9306      	str	r3, [sp, #24]
 8000b64:	9605      	str	r6, [sp, #20]
 8000b66:	9504      	str	r5, [sp, #16]
 8000b68:	9403      	str	r4, [sp, #12]
 8000b6a:	9002      	str	r0, [sp, #8]
 8000b6c:	9101      	str	r1, [sp, #4]
 8000b6e:	9200      	str	r2, [sp, #0]
 8000b70:	4673      	mov	r3, lr
 8000b72:	4662      	mov	r2, ip
 8000b74:	490f      	ldr	r1, [pc, #60]	; (8000bb4 <VCU_ReceiveMessage_Tasks+0x2b4>)
 8000b76:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000b78:	f008 fda0 	bl	80096bc <siprintf>
 8000b7c:	480a      	ldr	r0, [pc, #40]	; (8000ba8 <VCU_ReceiveMessage_Tasks+0x2a8>)
 8000b7e:	f002 fd0b 	bl	8003598 <serialOut>
          break;
 8000b82:	e126      	b.n	8000dd2 <VCU_ReceiveMessage_Tasks+0x4d2>
 8000b84:	20000100 	.word	0x20000100
 8000b88:	20000110 	.word	0x20000110
 8000b8c:	20000104 	.word	0x20000104
 8000b90:	2000c78c 	.word	0x2000c78c
 8000b94:	2000c948 	.word	0x2000c948
 8000b98:	2000c754 	.word	0x2000c754
 8000b9c:	2000cdf4 	.word	0x2000cdf4
 8000ba0:	20000008 	.word	0x20000008
 8000ba4:	0800ac40 	.word	0x0800ac40
 8000ba8:	2000cd8c 	.word	0x2000cd8c
 8000bac:	0800aca0 	.word	0x0800aca0
 8000bb0:	0800ad00 	.word	0x0800ad00
 8000bb4:	0800ad60 	.word	0x0800ad60
        case ID_BMS_DATA_8:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_DATA_8 SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000bb8:	4b95      	ldr	r3, [pc, #596]	; (8000e10 <VCU_ReceiveMessage_Tasks+0x510>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	f003 030a 	and.w	r3, r3, #10
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 8108 	beq.w	8000dd6 <VCU_ReceiveMessage_Tasks+0x4d6>
 8000bc6:	4b93      	ldr	r3, [pc, #588]	; (8000e14 <VCU_ReceiveMessage_Tasks+0x514>)
 8000bc8:	881b      	ldrh	r3, [r3, #0]
 8000bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	4b91      	ldr	r3, [pc, #580]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	469e      	mov	lr, r3
 8000bd8:	4b8f      	ldr	r3, [pc, #572]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b8e      	ldr	r3, [pc, #568]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000be0:	789b      	ldrb	r3, [r3, #2]
 8000be2:	4619      	mov	r1, r3
 8000be4:	4b8c      	ldr	r3, [pc, #560]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000be6:	78db      	ldrb	r3, [r3, #3]
 8000be8:	4618      	mov	r0, r3
 8000bea:	4b8b      	ldr	r3, [pc, #556]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000bec:	791b      	ldrb	r3, [r3, #4]
 8000bee:	461c      	mov	r4, r3
 8000bf0:	4b89      	ldr	r3, [pc, #548]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000bf2:	795b      	ldrb	r3, [r3, #5]
 8000bf4:	461d      	mov	r5, r3
 8000bf6:	4b88      	ldr	r3, [pc, #544]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000bf8:	799b      	ldrb	r3, [r3, #6]
 8000bfa:	461e      	mov	r6, r3
 8000bfc:	4b86      	ldr	r3, [pc, #536]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000bfe:	79db      	ldrb	r3, [r3, #7]
 8000c00:	9306      	str	r3, [sp, #24]
 8000c02:	9605      	str	r6, [sp, #20]
 8000c04:	9504      	str	r5, [sp, #16]
 8000c06:	9403      	str	r4, [sp, #12]
 8000c08:	9002      	str	r0, [sp, #8]
 8000c0a:	9101      	str	r1, [sp, #4]
 8000c0c:	9200      	str	r2, [sp, #0]
 8000c0e:	4673      	mov	r3, lr
 8000c10:	4662      	mov	r2, ip
 8000c12:	4982      	ldr	r1, [pc, #520]	; (8000e1c <VCU_ReceiveMessage_Tasks+0x51c>)
 8000c14:	4882      	ldr	r0, [pc, #520]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000c16:	f008 fd51 	bl	80096bc <siprintf>
 8000c1a:	4881      	ldr	r0, [pc, #516]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000c1c:	f002 fcbc 	bl	8003598 <serialOut>
          break;
 8000c20:	e0d9      	b.n	8000dd6 <VCU_ReceiveMessage_Tasks+0x4d6>
        case ID_BMS_DATA_9:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_DATA_9 SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000c22:	4b7b      	ldr	r3, [pc, #492]	; (8000e10 <VCU_ReceiveMessage_Tasks+0x510>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	f003 030a 	and.w	r3, r3, #10
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f000 80d5 	beq.w	8000dda <VCU_ReceiveMessage_Tasks+0x4da>
 8000c30:	4b78      	ldr	r3, [pc, #480]	; (8000e14 <VCU_ReceiveMessage_Tasks+0x514>)
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	469c      	mov	ip, r3
 8000c3c:	4b76      	ldr	r3, [pc, #472]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	469e      	mov	lr, r3
 8000c42:	4b75      	ldr	r3, [pc, #468]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c44:	785b      	ldrb	r3, [r3, #1]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b73      	ldr	r3, [pc, #460]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4b72      	ldr	r3, [pc, #456]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c50:	78db      	ldrb	r3, [r3, #3]
 8000c52:	4618      	mov	r0, r3
 8000c54:	4b70      	ldr	r3, [pc, #448]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	461c      	mov	r4, r3
 8000c5a:	4b6f      	ldr	r3, [pc, #444]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c5c:	795b      	ldrb	r3, [r3, #5]
 8000c5e:	461d      	mov	r5, r3
 8000c60:	4b6d      	ldr	r3, [pc, #436]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c62:	799b      	ldrb	r3, [r3, #6]
 8000c64:	461e      	mov	r6, r3
 8000c66:	4b6c      	ldr	r3, [pc, #432]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000c68:	79db      	ldrb	r3, [r3, #7]
 8000c6a:	9306      	str	r3, [sp, #24]
 8000c6c:	9605      	str	r6, [sp, #20]
 8000c6e:	9504      	str	r5, [sp, #16]
 8000c70:	9403      	str	r4, [sp, #12]
 8000c72:	9002      	str	r0, [sp, #8]
 8000c74:	9101      	str	r1, [sp, #4]
 8000c76:	9200      	str	r2, [sp, #0]
 8000c78:	4673      	mov	r3, lr
 8000c7a:	4662      	mov	r2, ip
 8000c7c:	4969      	ldr	r1, [pc, #420]	; (8000e24 <VCU_ReceiveMessage_Tasks+0x524>)
 8000c7e:	4868      	ldr	r0, [pc, #416]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000c80:	f008 fd1c 	bl	80096bc <siprintf>
 8000c84:	4866      	ldr	r0, [pc, #408]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000c86:	f002 fc87 	bl	8003598 <serialOut>
          break;
 8000c8a:	e0a6      	b.n	8000dda <VCU_ReceiveMessage_Tasks+0x4da>
        case ID_BMS_DATA_10:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_DATA_19 SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000c8c:	4b60      	ldr	r3, [pc, #384]	; (8000e10 <VCU_ReceiveMessage_Tasks+0x510>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f003 030a 	and.w	r3, r3, #10
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 80a2 	beq.w	8000dde <VCU_ReceiveMessage_Tasks+0x4de>
 8000c9a:	4b5e      	ldr	r3, [pc, #376]	; (8000e14 <VCU_ReceiveMessage_Tasks+0x514>)
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	469c      	mov	ip, r3
 8000ca6:	4b5c      	ldr	r3, [pc, #368]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	469e      	mov	lr, r3
 8000cac:	4b5a      	ldr	r3, [pc, #360]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000cae:	785b      	ldrb	r3, [r3, #1]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4b59      	ldr	r3, [pc, #356]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000cb4:	789b      	ldrb	r3, [r3, #2]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4b57      	ldr	r3, [pc, #348]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000cba:	78db      	ldrb	r3, [r3, #3]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	4b56      	ldr	r3, [pc, #344]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000cc0:	791b      	ldrb	r3, [r3, #4]
 8000cc2:	461c      	mov	r4, r3
 8000cc4:	4b54      	ldr	r3, [pc, #336]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000cc6:	795b      	ldrb	r3, [r3, #5]
 8000cc8:	461d      	mov	r5, r3
 8000cca:	4b53      	ldr	r3, [pc, #332]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000ccc:	799b      	ldrb	r3, [r3, #6]
 8000cce:	461e      	mov	r6, r3
 8000cd0:	4b51      	ldr	r3, [pc, #324]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000cd2:	79db      	ldrb	r3, [r3, #7]
 8000cd4:	9306      	str	r3, [sp, #24]
 8000cd6:	9605      	str	r6, [sp, #20]
 8000cd8:	9504      	str	r5, [sp, #16]
 8000cda:	9403      	str	r4, [sp, #12]
 8000cdc:	9002      	str	r0, [sp, #8]
 8000cde:	9101      	str	r1, [sp, #4]
 8000ce0:	9200      	str	r2, [sp, #0]
 8000ce2:	4673      	mov	r3, lr
 8000ce4:	4662      	mov	r2, ip
 8000ce6:	4950      	ldr	r1, [pc, #320]	; (8000e28 <VCU_ReceiveMessage_Tasks+0x528>)
 8000ce8:	484d      	ldr	r0, [pc, #308]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000cea:	f008 fce7 	bl	80096bc <siprintf>
 8000cee:	484c      	ldr	r0, [pc, #304]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000cf0:	f002 fc52 	bl	8003598 <serialOut>
          break;
 8000cf4:	e073      	b.n	8000dde <VCU_ReceiveMessage_Tasks+0x4de>
        case ID_BMS_STATE:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX BMS_STATE SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000cf6:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <VCU_ReceiveMessage_Tasks+0x510>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f003 030a 	and.w	r3, r3, #10
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d06f      	beq.n	8000de2 <VCU_ReceiveMessage_Tasks+0x4e2>
 8000d02:	4b44      	ldr	r3, [pc, #272]	; (8000e14 <VCU_ReceiveMessage_Tasks+0x514>)
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	4b42      	ldr	r3, [pc, #264]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	469e      	mov	lr, r3
 8000d14:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d16:	785b      	ldrb	r3, [r3, #1]
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d1c:	789b      	ldrb	r3, [r3, #2]
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4b3d      	ldr	r3, [pc, #244]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d22:	78db      	ldrb	r3, [r3, #3]
 8000d24:	4618      	mov	r0, r3
 8000d26:	4b3c      	ldr	r3, [pc, #240]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d28:	791b      	ldrb	r3, [r3, #4]
 8000d2a:	461c      	mov	r4, r3
 8000d2c:	4b3a      	ldr	r3, [pc, #232]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d2e:	795b      	ldrb	r3, [r3, #5]
 8000d30:	461d      	mov	r5, r3
 8000d32:	4b39      	ldr	r3, [pc, #228]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	461e      	mov	r6, r3
 8000d38:	4b37      	ldr	r3, [pc, #220]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d3a:	79db      	ldrb	r3, [r3, #7]
 8000d3c:	9306      	str	r3, [sp, #24]
 8000d3e:	9605      	str	r6, [sp, #20]
 8000d40:	9504      	str	r5, [sp, #16]
 8000d42:	9403      	str	r4, [sp, #12]
 8000d44:	9002      	str	r0, [sp, #8]
 8000d46:	9101      	str	r1, [sp, #4]
 8000d48:	9200      	str	r2, [sp, #0]
 8000d4a:	4673      	mov	r3, lr
 8000d4c:	4662      	mov	r2, ip
 8000d4e:	4937      	ldr	r1, [pc, #220]	; (8000e2c <VCU_ReceiveMessage_Tasks+0x52c>)
 8000d50:	4833      	ldr	r0, [pc, #204]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000d52:	f008 fcb3 	bl	80096bc <siprintf>
 8000d56:	4832      	ldr	r0, [pc, #200]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000d58:	f002 fc1e 	bl	8003598 <serialOut>
          break;
 8000d5c:	e041      	b.n	8000de2 <VCU_ReceiveMessage_Tasks+0x4e2>
        default:
          if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"RX UNKNOWN ID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8000d5e:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <VCU_ReceiveMessage_Tasks+0x510>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	f003 030a 	and.w	r3, r3, #10
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d03d      	beq.n	8000de6 <VCU_ReceiveMessage_Tasks+0x4e6>
 8000d6a:	4b2a      	ldr	r3, [pc, #168]	; (8000e14 <VCU_ReceiveMessage_Tasks+0x514>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	469c      	mov	ip, r3
 8000d76:	4b28      	ldr	r3, [pc, #160]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	469e      	mov	lr, r3
 8000d7c:	4b26      	ldr	r3, [pc, #152]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d7e:	785b      	ldrb	r3, [r3, #1]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d84:	789b      	ldrb	r3, [r3, #2]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4b23      	ldr	r3, [pc, #140]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d8a:	78db      	ldrb	r3, [r3, #3]
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d90:	791b      	ldrb	r3, [r3, #4]
 8000d92:	461c      	mov	r4, r3
 8000d94:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d96:	795b      	ldrb	r3, [r3, #5]
 8000d98:	461d      	mov	r5, r3
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000d9c:	799b      	ldrb	r3, [r3, #6]
 8000d9e:	461e      	mov	r6, r3
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <VCU_ReceiveMessage_Tasks+0x518>)
 8000da2:	79db      	ldrb	r3, [r3, #7]
 8000da4:	9306      	str	r3, [sp, #24]
 8000da6:	9605      	str	r6, [sp, #20]
 8000da8:	9504      	str	r5, [sp, #16]
 8000daa:	9403      	str	r4, [sp, #12]
 8000dac:	9002      	str	r0, [sp, #8]
 8000dae:	9101      	str	r1, [sp, #4]
 8000db0:	9200      	str	r2, [sp, #0]
 8000db2:	4673      	mov	r3, lr
 8000db4:	4662      	mov	r2, ip
 8000db6:	491e      	ldr	r1, [pc, #120]	; (8000e30 <VCU_ReceiveMessage_Tasks+0x530>)
 8000db8:	4819      	ldr	r0, [pc, #100]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000dba:	f008 fc7f 	bl	80096bc <siprintf>
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <VCU_ReceiveMessage_Tasks+0x520>)
 8000dc0:	f002 fbea 	bl	8003598 <serialOut>
          break;
 8000dc4:	e00f      	b.n	8000de6 <VCU_ReceiveMessage_Tasks+0x4e6>
          break;
 8000dc6:	bf00      	nop
 8000dc8:	e00e      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000dca:	bf00      	nop
 8000dcc:	e00c      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000dce:	bf00      	nop
 8000dd0:	e00a      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000dd2:	bf00      	nop
 8000dd4:	e008      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000dd6:	bf00      	nop
 8000dd8:	e006      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000dda:	bf00      	nop
 8000ddc:	e004      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000dde:	bf00      	nop
 8000de0:	e002      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000de2:	bf00      	nop
 8000de4:	e000      	b.n	8000de8 <VCU_ReceiveMessage_Tasks+0x4e8>
          break;
 8000de6:	bf00      	nop
      }


      // check for any more messages
      DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <VCU_ReceiveMessage_Tasks+0x534>)
 8000dea:	2101      	movs	r1, #1
 8000dec:	2000      	movs	r0, #0
 8000dee:	f001 facf 	bl	8002390 <DRV_CANFDSPI_ReceiveChannelEventGet>
    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <VCU_ReceiveMessage_Tasks+0x534>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f47f ad89 	bne.w	8000912 <VCU_ReceiveMessage_Tasks+0x12>
    }

    //    APP_LED_Clear(APP_RX_LED);


    canRxInterrupt = 0;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <VCU_ReceiveMessage_Tasks+0x538>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]

}
 8000e06:	bf00      	nop
 8000e08:	3704      	adds	r7, #4
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000008 	.word	0x20000008
 8000e14:	20000104 	.word	0x20000104
 8000e18:	20000110 	.word	0x20000110
 8000e1c:	0800adc0 	.word	0x0800adc0
 8000e20:	2000cd8c 	.word	0x2000cd8c
 8000e24:	0800ae20 	.word	0x0800ae20
 8000e28:	0800ae80 	.word	0x0800ae80
 8000e2c:	0800aee0 	.word	0x0800aee0
 8000e30:	0800af40 	.word	0x0800af40
 8000e34:	20000100 	.word	0x20000100
 8000e38:	2000cdf0 	.word	0x2000cdf0

08000e3c <VCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     A P P _ T r a n s m i t M e s s a g e Q u e u e                                    V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af02      	add	r7, sp, #8
    APP_LED_Set(APP_TX_LED);
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff fb9e 	bl	8000584 <APP_LED_Set>

    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8000e48:	2332      	movs	r3, #50	; 0x32
 8000e4a:	71fb      	strb	r3, [r7, #7]

    // Check if FIFO is not full
    do {
        DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 8000e4c:	4a19      	ldr	r2, [pc, #100]	; (8000eb4 <VCU_TransmitMessageQueue+0x78>)
 8000e4e:	2102      	movs	r1, #2
 8000e50:	2000      	movs	r0, #0
 8000e52:	f001 fa6a 	bl	800232a <DRV_CANFDSPI_TransmitChannelEventGet>
        if (attempts == 0) {
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d108      	bne.n	8000e6e <VCU_TransmitMessageQueue+0x32>
            Nop();
 8000e5c:	bf00      	nop
            Nop();
 8000e5e:	bf00      	nop
            DRV_CANFDSPI_ErrorCountStateGet(DRV_CANFDSPI_INDEX_0, &tec, &rec, &errorFlags);
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <VCU_TransmitMessageQueue+0x7c>)
 8000e62:	4a16      	ldr	r2, [pc, #88]	; (8000ebc <VCU_TransmitMessageQueue+0x80>)
 8000e64:	4916      	ldr	r1, [pc, #88]	; (8000ec0 <VCU_TransmitMessageQueue+0x84>)
 8000e66:	2000      	movs	r0, #0
 8000e68:	f001 fb19 	bl	800249e <DRV_CANFDSPI_ErrorCountStateGet>
            return;
 8000e6c:	e01f      	b.n	8000eae <VCU_TransmitMessageQueue+0x72>
        }
        attempts--;
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	3b01      	subs	r3, #1
 8000e72:	71fb      	strb	r3, [r7, #7]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <VCU_TransmitMessageQueue+0x78>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0e5      	beq.n	8000e4c <VCU_TransmitMessageQueue+0x10>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8000e80:	4b10      	ldr	r3, [pc, #64]	; (8000ec4 <VCU_TransmitMessageQueue+0x88>)
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f002 fb14 	bl	80034b8 <DRV_CANFDSPI_DlcToDataBytes>
 8000e90:	4603      	mov	r3, r0
 8000e92:	71bb      	strb	r3, [r7, #6]

    DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, true);
 8000e94:	79bb      	ldrb	r3, [r7, #6]
 8000e96:	2201      	movs	r2, #1
 8000e98:	9201      	str	r2, [sp, #4]
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <VCU_TransmitMessageQueue+0x8c>)
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <VCU_TransmitMessageQueue+0x88>)
 8000ea0:	2102      	movs	r1, #2
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 febc 	bl	8001c20 <DRV_CANFDSPI_TransmitChannelLoad>

    APP_LED_Clear(APP_TX_LED);
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f7ff fb43 	bl	8000534 <APP_LED_Clear>
}
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000a4 	.word	0x200000a4
 8000eb8:	20000153 	.word	0x20000153
 8000ebc:	20000152 	.word	0x20000152
 8000ec0:	20000151 	.word	0x20000151
 8000ec4:	200000a8 	.word	0x200000a8
 8000ec8:	200000b4 	.word	0x200000b4

08000ecc <VCU_TransmitState>:
/***************************************************************************************************************
*     V C U _ T  r a n s m i t S t a t e                                                 V C U   E M U L A T O R
***************************************************************************************************************/


void VCU_TransmitState(packState state){
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]

  CANFRM_0x400_VCU_COMMAND command;
  memset(&command,0,sizeof(command));
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	2208      	movs	r2, #8
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f008 fba6 	bl	8009630 <memset>

  command.vcu_contactor_ctrl = state;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	7a3b      	ldrb	r3, [r7, #8]
 8000eee:	f362 0301 	bfi	r3, r2, #0, #2
 8000ef2:	723b      	strb	r3, [r7, #8]

  txObj.word[0] = 0;                              // Configure transmit message
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]

  memcpy(txd, &command, 12);
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	481d      	ldr	r0, [pc, #116]	; (8000f84 <VCU_TransmitState+0xb8>)
 8000f10:	f008 fb80 	bl	8009614 <memcpy>

  txObj.bF.id.SID = ID_VCU_COMMAND  ;          // Standard ID
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000f16:	8813      	ldrh	r3, [r2, #0]
 8000f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1c:	f361 030a 	bfi	r3, r1, #0, #11
 8000f20:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8000f22:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000f24:	6813      	ldr	r3, [r2, #0]
 8000f26:	f36f 23dc 	bfc	r3, #11, #18
 8000f2a:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000f2e:	7913      	ldrb	r3, [r2, #4]
 8000f30:	f36f 1386 	bfc	r3, #6, #1
 8000f34:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8000f36:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000f38:	7913      	ldrb	r3, [r2, #4]
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	f361 0303 	bfi	r3, r1, #0, #4
 8000f40:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000f44:	7913      	ldrb	r3, [r2, #4]
 8000f46:	f36f 13c7 	bfc	r3, #7, #1
 8000f4a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8000f4c:	4a0c      	ldr	r2, [pc, #48]	; (8000f80 <VCU_TransmitState+0xb4>)
 8000f4e:	7913      	ldrb	r3, [r2, #4]
 8000f50:	f36f 1304 	bfc	r3, #4, #1
 8000f54:	7113      	strb	r3, [r2, #4]

  if(debugLevel & (DBG_PCU + DBG_VERBOSE)){sprintf(tempBuffer,"TX 0x400 Command: STATE=%02x",state); serialOut(tempBuffer);}
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <VCU_TransmitState+0xbc>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	f003 030a 	and.w	r3, r3, #10
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d008      	beq.n	8000f74 <VCU_TransmitState+0xa8>
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4909      	ldr	r1, [pc, #36]	; (8000f8c <VCU_TransmitState+0xc0>)
 8000f68:	4809      	ldr	r0, [pc, #36]	; (8000f90 <VCU_TransmitState+0xc4>)
 8000f6a:	f008 fba7 	bl	80096bc <siprintf>
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <VCU_TransmitState+0xc4>)
 8000f70:	f002 fb12 	bl	8003598 <serialOut>
  VCU_TransmitMessageQueue();                     // Send it
 8000f74:	f7ff ff62 	bl	8000e3c <VCU_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200000a8 	.word	0x200000a8
 8000f84:	200000b4 	.word	0x200000b4
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	0800af9c 	.word	0x0800af9c
 8000f90:	2000cd8c 	.word	0x2000cd8c

08000f94 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     V C U _ T i c k s S i n c e L a s t M e s s a g e                                  V C U   E M U L A T O R
***************************************************************************************************************/
uint32_t VCU_TicksSinceLastMessage(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;

  if ((etTimerOverflows - pack.lastFrame.overflows) == 0){
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <VCU_TicksSinceLastMessage+0x60>)
 8000f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <VCU_TicksSinceLastMessage+0x64>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d107      	bne.n	8000fb6 <VCU_TicksSinceLastMessage+0x22>
    elapsedTicks = htim1.Instance->CNT - pack.lastFrame.ticks;
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <VCU_TicksSinceLastMessage+0x68>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <VCU_TicksSinceLastMessage+0x60>)
 8000fae:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	e016      	b.n	8000fe4 <VCU_TicksSinceLastMessage+0x50>
  }else{
    //             (ticks last contact to overflow point)         + (              ticks in completed overflows                                 )                               + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.lastFrame.ticks) + ( (htim1.Init.Period +1) * (etTimerOverflows - (pack.lastFrame.overflows +1))) + (htim1.Instance->CNT);
 8000fb6:	4b11      	ldr	r3, [pc, #68]	; (8000ffc <VCU_TicksSinceLastMessage+0x68>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <VCU_TicksSinceLastMessage+0x60>)
 8000fbc:	8e12      	ldrh	r2, [r2, #48]	; 0x30
 8000fbe:	1a9a      	subs	r2, r3, r2
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <VCU_TicksSinceLastMessage+0x68>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <VCU_TicksSinceLastMessage+0x64>)
 8000fc8:	6808      	ldr	r0, [r1, #0]
 8000fca:	490a      	ldr	r1, [pc, #40]	; (8000ff4 <VCU_TicksSinceLastMessage+0x60>)
 8000fcc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000fce:	1a41      	subs	r1, r0, r1
 8000fd0:	3901      	subs	r1, #1
 8000fd2:	fb01 f303 	mul.w	r3, r1, r3
 8000fd6:	441a      	add	r2, r3
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <VCU_TicksSinceLastMessage+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fde:	4413      	add	r3, r2
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
  }
  return elapsedTicks;
 8000fe4:	687b      	ldr	r3, [r7, #4]

}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	2000c754 	.word	0x2000c754
 8000ff8:	2000cdf4 	.word	0x2000cdf4
 8000ffc:	2000c948 	.word	0x2000c948

08001000 <VCU_TestRegisterAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R e g i s t e r A c c e s s                                        V C U   E M U L A T O R
***************************************************************************************************************/
bool VCU_TestRegisterAccess(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8001006:	2300      	movs	r3, #0
 8001008:	71bb      	strb	r3, [r7, #6]

    Nop();
 800100a:	bf00      	nop

    // Verify read/write with different access length
    // Note: registers can be accessed in multiples of bytes
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800100c:	2301      	movs	r3, #1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	e05d      	b.n	80010ce <VCU_TestRegisterAccess+0xce>
        for (i = 0; i < length; i++) {
 8001012:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e016      	b.n	8001048 <VCU_TestRegisterAccess+0x48>
            txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800101a:	f008 fb11 	bl	8009640 <rand>
 800101e:	4603      	mov	r3, r0
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4a30      	ldr	r2, [pc, #192]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800102a:	b2d9      	uxtb	r1, r3
 800102c:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <VCU_TestRegisterAccess+0xe8>)
 800102e:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 8001030:	4b2c      	ldr	r3, [pc, #176]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <VCU_TestRegisterAccess+0xec>)
 8001038:	21ff      	movs	r1, #255	; 0xff
 800103a:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 800103c:	4b29      	ldr	r3, [pc, #164]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b27      	ldr	r3, [pc, #156]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	79fa      	ldrb	r2, [r7, #7]
 800104e:	429a      	cmp	r2, r3
 8001050:	d8e3      	bhi.n	800101a <VCU_TestRegisterAccess+0x1a>
        }

        Nop();
 8001052:	bf00      	nop

        // Write data to registers
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, txd, length);
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <VCU_TestRegisterAccess+0xe8>)
 800105a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800105e:	2000      	movs	r0, #0
 8001060:	f000 fb28 	bl	80016b4 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from registers
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, rxd, length);
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	b29b      	uxth	r3, r3
 8001068:	4a20      	ldr	r2, [pc, #128]	; (80010ec <VCU_TestRegisterAccess+0xec>)
 800106a:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800106e:	2000      	movs	r0, #0
 8001070:	f000 faba 	bl	80015e8 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8001074:	2300      	movs	r3, #0
 8001076:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 800107a:	2200      	movs	r2, #0
 800107c:	701a      	strb	r2, [r3, #0]
 800107e:	e01e      	b.n	80010be <VCU_TestRegisterAccess+0xbe>
            good = txd[i] == rxd[i];
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <VCU_TestRegisterAccess+0xe8>)
 8001088:	5c9a      	ldrb	r2, [r3, r2]
 800108a:	4b16      	ldr	r3, [pc, #88]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <VCU_TestRegisterAccess+0xec>)
 8001092:	5c5b      	ldrb	r3, [r3, r1]
 8001094:	429a      	cmp	r2, r3
 8001096:	bf0c      	ite	eq
 8001098:	2301      	moveq	r3, #1
 800109a:	2300      	movne	r3, #0
 800109c:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	f083 0301 	eor.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <VCU_TestRegisterAccess+0xb2>
                Nop();
 80010aa:	bf00      	nop
                Nop();
 80010ac:	bf00      	nop
                // Data mismatch
                return false;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e013      	b.n	80010da <VCU_TestRegisterAccess+0xda>
        for (i = 0; i < length; i++) {
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <VCU_TestRegisterAccess+0xe4>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	79fa      	ldrb	r2, [r7, #7]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8db      	bhi.n	8001080 <VCU_TestRegisterAccess+0x80>
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 80010c8:	79fb      	ldrb	r3, [r7, #7]
 80010ca:	3301      	adds	r3, #1
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b40      	cmp	r3, #64	; 0x40
 80010d2:	d99e      	bls.n	8001012 <VCU_TestRegisterAccess+0x12>
            }
        }
    }
    Nop();
 80010d4:	bf00      	nop
    Nop();
 80010d6:	bf00      	nop
    return true;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000150 	.word	0x20000150
 80010e8:	200000b4 	.word	0x200000b4
 80010ec:	20000110 	.word	0x20000110

080010f0 <VCU_TestRamAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R a m A c c e s s                                                  V C U   E M U L A T O R
***************************************************************************************************************/
bool VCU_TestRamAccess(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 80010f6:	2300      	movs	r3, #0
 80010f8:	71bb      	strb	r3, [r7, #6]

    Nop();
 80010fa:	bf00      	nop

    // Verify read/write with different access length
    // Note: RAM can only be accessed in multiples of 4 bytes
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 80010fc:	2304      	movs	r3, #4
 80010fe:	71fb      	strb	r3, [r7, #7]
 8001100:	e05b      	b.n	80011ba <VCU_TestRamAccess+0xca>
        for (i = 0; i < length; i++) {
 8001102:	4b32      	ldr	r3, [pc, #200]	; (80011cc <VCU_TestRamAccess+0xdc>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e014      	b.n	8001134 <VCU_TestRamAccess+0x44>
            txd[i] = rand() & 0xff;
 800110a:	f008 fa99 	bl	8009640 <rand>
 800110e:	4601      	mov	r1, r0
 8001110:	4b2e      	ldr	r3, [pc, #184]	; (80011cc <VCU_TestRamAccess+0xdc>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	b2c9      	uxtb	r1, r1
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <VCU_TestRamAccess+0xe0>)
 800111a:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <VCU_TestRamAccess+0xdc>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	461a      	mov	r2, r3
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <VCU_TestRamAccess+0xe4>)
 8001124:	21ff      	movs	r1, #255	; 0xff
 8001126:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <VCU_TestRamAccess+0xdc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	b2da      	uxtb	r2, r3
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <VCU_TestRamAccess+0xdc>)
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	4b25      	ldr	r3, [pc, #148]	; (80011cc <VCU_TestRamAccess+0xdc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	79fa      	ldrb	r2, [r7, #7]
 800113a:	429a      	cmp	r2, r3
 800113c:	d8e5      	bhi.n	800110a <VCU_TestRamAccess+0x1a>
        }

        Nop();
 800113e:	bf00      	nop

        // Write data to RAM
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, txd, length);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <VCU_TestRamAccess+0xe0>)
 8001146:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800114a:	2000      	movs	r0, #0
 800114c:	f000 fab2 	bl	80016b4 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from RAM
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, rxd, length);
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <VCU_TestRamAccess+0xe4>)
 8001156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115a:	2000      	movs	r0, #0
 800115c:	f000 fa44 	bl	80015e8 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8001160:	2300      	movs	r3, #0
 8001162:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <VCU_TestRamAccess+0xdc>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	e01e      	b.n	80011aa <VCU_TestRamAccess+0xba>
            good = txd[i] == rxd[i];
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <VCU_TestRamAccess+0xdc>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	461a      	mov	r2, r3
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <VCU_TestRamAccess+0xe0>)
 8001174:	5c9a      	ldrb	r2, [r3, r2]
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <VCU_TestRamAccess+0xdc>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <VCU_TestRamAccess+0xe4>)
 800117e:	5c5b      	ldrb	r3, [r3, r1]
 8001180:	429a      	cmp	r2, r3
 8001182:	bf0c      	ite	eq
 8001184:	2301      	moveq	r3, #1
 8001186:	2300      	movne	r3, #0
 8001188:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 800118a:	79bb      	ldrb	r3, [r7, #6]
 800118c:	f083 0301 	eor.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <VCU_TestRamAccess+0xae>
                Nop();
 8001196:	bf00      	nop
                Nop();
 8001198:	bf00      	nop

                // Data mismatch
                return false;
 800119a:	2300      	movs	r3, #0
 800119c:	e011      	b.n	80011c2 <VCU_TestRamAccess+0xd2>
        for (i = 0; i < length; i++) {
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <VCU_TestRamAccess+0xdc>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <VCU_TestRamAccess+0xdc>)
 80011a8:	701a      	strb	r2, [r3, #0]
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <VCU_TestRamAccess+0xdc>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	79fa      	ldrb	r2, [r7, #7]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8db      	bhi.n	800116c <VCU_TestRamAccess+0x7c>
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	3304      	adds	r3, #4
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2b40      	cmp	r3, #64	; 0x40
 80011be:	d9a0      	bls.n	8001102 <VCU_TestRamAccess+0x12>
            }
        }
    }

    return true;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000150 	.word	0x20000150
 80011d0:	200000b4 	.word	0x200000b4
 80011d4:	20000110 	.word	0x20000110

080011d8 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af02      	add	r7, sp, #8
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  uint16_t spiTransferSize = 2;
 80011e2:	2302      	movs	r3, #2
 80011e4:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <DRV_CANFDSPI_Reset+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = 0;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <DRV_CANFDSPI_Reset+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	705a      	strb	r2, [r3, #1]

  //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);


	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2120      	movs	r1, #32
 80011f6:	480d      	ldr	r0, [pc, #52]	; (800122c <DRV_CANFDSPI_Reset+0x54>)
 80011f8:	f003 fc76 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011fc:	89fb      	ldrh	r3, [r7, #14]
 80011fe:	2264      	movs	r2, #100	; 0x64
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <DRV_CANFDSPI_Reset+0x58>)
 8001204:	4908      	ldr	r1, [pc, #32]	; (8001228 <DRV_CANFDSPI_Reset+0x50>)
 8001206:	480b      	ldr	r0, [pc, #44]	; (8001234 <DRV_CANFDSPI_Reset+0x5c>)
 8001208:	f005 ffc6 	bl	8007198 <HAL_SPI_TransmitReceive>
 800120c:	4603      	mov	r3, r0
 800120e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001210:	2201      	movs	r2, #1
 8001212:	2120      	movs	r1, #32
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <DRV_CANFDSPI_Reset+0x54>)
 8001216:	f003 fc67 	bl	8004ae8 <HAL_GPIO_WritePin>

  return spiTransferError;
 800121a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	2000c790 	.word	0x2000c790
 800122c:	48000800 	.word	0x48000800
 8001230:	2000c7f0 	.word	0x2000c7f0
 8001234:	2000c880 	.word	0x2000c880

08001238 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af02      	add	r7, sp, #8
 800123e:	4603      	mov	r3, r0
 8001240:	603a      	str	r2, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	460b      	mov	r3, r1
 8001246:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 8001248:	2303      	movs	r3, #3
 800124a:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	0a1b      	lsrs	r3, r3, #8
 8001250:	b29b      	uxth	r3, r3
 8001252:	b2db      	uxtb	r3, r3
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3330      	adds	r3, #48	; 0x30
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b13      	ldr	r3, [pc, #76]	; (80012ac <DRV_CANFDSPI_ReadByte+0x74>)
 8001260:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <DRV_CANFDSPI_ReadByte+0x74>)
 8001268:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <DRV_CANFDSPI_ReadByte+0x74>)
 800126c:	2200      	movs	r2, #0
 800126e:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001270:	2200      	movs	r2, #0
 8001272:	2120      	movs	r1, #32
 8001274:	480e      	ldr	r0, [pc, #56]	; (80012b0 <DRV_CANFDSPI_ReadByte+0x78>)
 8001276:	f003 fc37 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	2264      	movs	r2, #100	; 0x64
 800127e:	9200      	str	r2, [sp, #0]
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <DRV_CANFDSPI_ReadByte+0x7c>)
 8001282:	490a      	ldr	r1, [pc, #40]	; (80012ac <DRV_CANFDSPI_ReadByte+0x74>)
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <DRV_CANFDSPI_ReadByte+0x80>)
 8001286:	f005 ff87 	bl	8007198 <HAL_SPI_TransmitReceive>
 800128a:	4603      	mov	r3, r0
 800128c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2120      	movs	r1, #32
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <DRV_CANFDSPI_ReadByte+0x78>)
 8001294:	f003 fc28 	bl	8004ae8 <HAL_GPIO_WritePin>

  // Update data
  *rxd = spiReceiveBuffer[2];
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <DRV_CANFDSPI_ReadByte+0x7c>)
 800129a:	789a      	ldrb	r2, [r3, #2]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 80012a0:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000c790 	.word	0x2000c790
 80012b0:	48000800 	.word	0x48000800
 80012b4:	2000c7f0 	.word	0x2000c7f0
 80012b8:	2000c880 	.word	0x2000c880

080012bc <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af02      	add	r7, sp, #8
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	460b      	mov	r3, r1
 80012c8:	80bb      	strh	r3, [r7, #4]
 80012ca:	4613      	mov	r3, r2
 80012cc:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 80012ce:	2303      	movs	r3, #3
 80012d0:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	3320      	adds	r3, #32
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <DRV_CANFDSPI_WriteByte+0x70>)
 80012e6:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <DRV_CANFDSPI_WriteByte+0x70>)
 80012ee:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <DRV_CANFDSPI_WriteByte+0x70>)
 80012f2:	79bb      	ldrb	r3, [r7, #6]
 80012f4:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2120      	movs	r1, #32
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <DRV_CANFDSPI_WriteByte+0x74>)
 80012fc:	f003 fbf4 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	2264      	movs	r2, #100	; 0x64
 8001304:	9200      	str	r2, [sp, #0]
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <DRV_CANFDSPI_WriteByte+0x78>)
 8001308:	4908      	ldr	r1, [pc, #32]	; (800132c <DRV_CANFDSPI_WriteByte+0x70>)
 800130a:	480b      	ldr	r0, [pc, #44]	; (8001338 <DRV_CANFDSPI_WriteByte+0x7c>)
 800130c:	f005 ff44 	bl	8007198 <HAL_SPI_TransmitReceive>
 8001310:	4603      	mov	r3, r0
 8001312:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001314:	2201      	movs	r2, #1
 8001316:	2120      	movs	r1, #32
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <DRV_CANFDSPI_WriteByte+0x74>)
 800131a:	f003 fbe5 	bl	8004ae8 <HAL_GPIO_WritePin>

  return spiTransferError;
 800131e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000c790 	.word	0x2000c790
 8001330:	48000800 	.word	0x48000800
 8001334:	2000c7f0 	.word	0x2000c7f0
 8001338:	2000c880 	.word	0x2000c880

0800133c <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af02      	add	r7, sp, #8
 8001342:	4603      	mov	r3, r0
 8001344:	603a      	str	r2, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	460b      	mov	r3, r1
 800134a:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 800134c:	2306      	movs	r3, #6
 800134e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001350:	88bb      	ldrh	r3, [r7, #4]
 8001352:	0a1b      	lsrs	r3, r3, #8
 8001354:	b29b      	uxth	r3, r3
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	b2db      	uxtb	r3, r3
 800135e:	3330      	adds	r3, #48	; 0x30
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <DRV_CANFDSPI_ReadWord+0xa8>)
 8001364:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001366:	88bb      	ldrh	r3, [r7, #4]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <DRV_CANFDSPI_ReadWord+0xa8>)
 800136c:	705a      	strb	r2, [r3, #1]

  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	2120      	movs	r1, #32
 8001372:	481d      	ldr	r0, [pc, #116]	; (80013e8 <DRV_CANFDSPI_ReadWord+0xac>)
 8001374:	f003 fbb8 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001378:	8abb      	ldrh	r3, [r7, #20]
 800137a:	2264      	movs	r2, #100	; 0x64
 800137c:	9200      	str	r2, [sp, #0]
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <DRV_CANFDSPI_ReadWord+0xb0>)
 8001380:	4918      	ldr	r1, [pc, #96]	; (80013e4 <DRV_CANFDSPI_ReadWord+0xa8>)
 8001382:	481b      	ldr	r0, [pc, #108]	; (80013f0 <DRV_CANFDSPI_ReadWord+0xb4>)
 8001384:	f005 ff08 	bl	8007198 <HAL_SPI_TransmitReceive>
 8001388:	4603      	mov	r3, r0
 800138a:	74fb      	strb	r3, [r7, #19]
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2120      	movs	r1, #32
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <DRV_CANFDSPI_ReadWord+0xac>)
 8001392:	f003 fba9 	bl	8004ae8 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 8001396:	7cfb      	ldrb	r3, [r7, #19]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <DRV_CANFDSPI_ReadWord+0x66>
      return spiTransferError;
 800139c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80013a0:	e01c      	b.n	80013dc <DRV_CANFDSPI_ReadWord+0xa0>
  }

  // Update data
  *rxd = 0;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 80013a8:	2302      	movs	r3, #2
 80013aa:	75fb      	strb	r3, [r7, #23]
 80013ac:	e011      	b.n	80013d2 <DRV_CANFDSPI_ReadWord+0x96>
      x = (uint32_t) spiReceiveBuffer[i];
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <DRV_CANFDSPI_ReadWord+0xb0>)
 80013b2:	5cd3      	ldrb	r3, [r2, r3]
 80013b4:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	3b02      	subs	r3, #2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	68f9      	ldr	r1, [r7, #12]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	441a      	add	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	3301      	adds	r3, #1
 80013d0:	75fb      	strb	r3, [r7, #23]
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d9ea      	bls.n	80013ae <DRV_CANFDSPI_ReadWord+0x72>
  }

  return spiTransferError;
 80013d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	2000c790 	.word	0x2000c790
 80013e8:	48000800 	.word	0x48000800
 80013ec:	2000c7f0 	.word	0x2000c7f0
 80013f0:	2000c880 	.word	0x2000c880

080013f4 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4603      	mov	r3, r0
 80013fc:	603a      	str	r2, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
 8001400:	460b      	mov	r3, r1
 8001402:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint16_t spiTransferSize = 6;
 8001404:	2306      	movs	r3, #6
 8001406:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	0a1b      	lsrs	r3, r3, #8
 800140c:	b29b      	uxth	r3, r3
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 030f 	and.w	r3, r3, #15
 8001414:	b2db      	uxtb	r3, r3
 8001416:	3320      	adds	r3, #32
 8001418:	b2da      	uxtb	r2, r3
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <DRV_CANFDSPI_WriteWord+0x8c>)
 800141c:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <DRV_CANFDSPI_WriteWord+0x8c>)
 8001424:	705a      	strb	r2, [r3, #1]

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	e00b      	b.n	8001444 <DRV_CANFDSPI_WriteWord+0x50>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	40da      	lsrs	r2, r3
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3302      	adds	r3, #2
 8001438:	b2d1      	uxtb	r1, r2
 800143a:	4a11      	ldr	r2, [pc, #68]	; (8001480 <DRV_CANFDSPI_WriteWord+0x8c>)
 800143c:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 4; i++) {
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	2b03      	cmp	r3, #3
 8001448:	d9f0      	bls.n	800142c <DRV_CANFDSPI_WriteWord+0x38>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2120      	movs	r1, #32
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <DRV_CANFDSPI_WriteWord+0x90>)
 8001450:	f003 fb4a 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001454:	89bb      	ldrh	r3, [r7, #12]
 8001456:	2264      	movs	r2, #100	; 0x64
 8001458:	9200      	str	r2, [sp, #0]
 800145a:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <DRV_CANFDSPI_WriteWord+0x94>)
 800145c:	4908      	ldr	r1, [pc, #32]	; (8001480 <DRV_CANFDSPI_WriteWord+0x8c>)
 800145e:	480b      	ldr	r0, [pc, #44]	; (800148c <DRV_CANFDSPI_WriteWord+0x98>)
 8001460:	f005 fe9a 	bl	8007198 <HAL_SPI_TransmitReceive>
 8001464:	4603      	mov	r3, r0
 8001466:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001468:	2201      	movs	r2, #1
 800146a:	2120      	movs	r1, #32
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <DRV_CANFDSPI_WriteWord+0x90>)
 800146e:	f003 fb3b 	bl	8004ae8 <HAL_GPIO_WritePin>

  return spiTransferError;
 8001472:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000c790 	.word	0x2000c790
 8001484:	48000800 	.word	0x48000800
 8001488:	2000c7f0 	.word	0x2000c7f0
 800148c:	2000c880 	.word	0x2000c880

08001490 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af02      	add	r7, sp, #8
 8001496:	4603      	mov	r3, r0
 8001498:	603a      	str	r2, [r7, #0]
 800149a:	71fb      	strb	r3, [r7, #7]
 800149c:	460b      	mov	r3, r1
 800149e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 4;
 80014a0:	2304      	movs	r3, #4
 80014a2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80014a4:	88bb      	ldrh	r3, [r7, #4]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	f003 030f 	and.w	r3, r3, #15
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3330      	adds	r3, #48	; 0x30
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <DRV_CANFDSPI_ReadHalfWord+0xac>)
 80014b8:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80014ba:	88bb      	ldrh	r3, [r7, #4]
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <DRV_CANFDSPI_ReadHalfWord+0xac>)
 80014c0:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2120      	movs	r1, #32
 80014c6:	481e      	ldr	r0, [pc, #120]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 80014c8:	f003 fb0e 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014cc:	8abb      	ldrh	r3, [r7, #20]
 80014ce:	2264      	movs	r2, #100	; 0x64
 80014d0:	9200      	str	r2, [sp, #0]
 80014d2:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 80014d4:	4919      	ldr	r1, [pc, #100]	; (800153c <DRV_CANFDSPI_ReadHalfWord+0xac>)
 80014d6:	481c      	ldr	r0, [pc, #112]	; (8001548 <DRV_CANFDSPI_ReadHalfWord+0xb8>)
 80014d8:	f005 fe5e 	bl	8007198 <HAL_SPI_TransmitReceive>
 80014dc:	4603      	mov	r3, r0
 80014de:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2120      	movs	r1, #32
 80014e4:	4816      	ldr	r0, [pc, #88]	; (8001540 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 80014e6:	f003 faff 	bl	8004ae8 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 80014ea:	7cfb      	ldrb	r3, [r7, #19]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <DRV_CANFDSPI_ReadHalfWord+0x66>
      return spiTransferError;
 80014f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80014f4:	e01e      	b.n	8001534 <DRV_CANFDSPI_ReadHalfWord+0xa4>
  }

  // Update data
  *rxd = 0;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2200      	movs	r2, #0
 80014fa:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 80014fc:	2302      	movs	r3, #2
 80014fe:	75fb      	strb	r3, [r7, #23]
 8001500:	e013      	b.n	800152a <DRV_CANFDSPI_ReadHalfWord+0x9a>
      x = (uint32_t) spiReceiveBuffer[i];
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	881a      	ldrh	r2, [r3, #0]
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	3b02      	subs	r3, #2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	fa01 f303 	lsl.w	r3, r1, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	4413      	add	r3, r2
 800151e:	b29a      	uxth	r2, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 8001524:	7dfb      	ldrb	r3, [r7, #23]
 8001526:	3301      	adds	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
 800152a:	7dfb      	ldrb	r3, [r7, #23]
 800152c:	2b03      	cmp	r3, #3
 800152e:	d9e8      	bls.n	8001502 <DRV_CANFDSPI_ReadHalfWord+0x72>
  }

  return spiTransferError;
 8001530:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000c790 	.word	0x2000c790
 8001540:	48000800 	.word	0x48000800
 8001544:	2000c7f0 	.word	0x2000c7f0
 8001548:	2000c880 	.word	0x2000c880

0800154c <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af02      	add	r7, sp, #8
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	460b      	mov	r3, r1
 8001558:	80bb      	strh	r3, [r7, #4]
 800155a:	4613      	mov	r3, r2
 800155c:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  uint16_t spiTransferSize = 4;
 800155e:	2304      	movs	r3, #4
 8001560:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	b29b      	uxth	r3, r3
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	b2db      	uxtb	r3, r3
 8001570:	3320      	adds	r3, #32
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 8001576:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001578:	88bb      	ldrh	r3, [r7, #4]
 800157a:	b2da      	uxtb	r2, r3
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 800157e:	705a      	strb	r2, [r3, #1]

  // Split word into 2 bytes and add them to buffer
  for (i = 0; i < 2; i++) {
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]
 8001584:	e00b      	b.n	800159e <DRV_CANFDSPI_WriteHalfWord+0x52>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	7bfb      	ldrb	r3, [r7, #15]
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	411a      	asrs	r2, r3
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	3302      	adds	r3, #2
 8001592:	b2d1      	uxtb	r1, r2
 8001594:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 8001596:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 2; i++) {
 8001598:	7bfb      	ldrb	r3, [r7, #15]
 800159a:	3301      	adds	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	7bfb      	ldrb	r3, [r7, #15]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d9f0      	bls.n	8001586 <DRV_CANFDSPI_WriteHalfWord+0x3a>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2120      	movs	r1, #32
 80015a8:	480c      	ldr	r0, [pc, #48]	; (80015dc <DRV_CANFDSPI_WriteHalfWord+0x90>)
 80015aa:	f003 fa9d 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015ae:	89bb      	ldrh	r3, [r7, #12]
 80015b0:	2264      	movs	r2, #100	; 0x64
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	4a0a      	ldr	r2, [pc, #40]	; (80015e0 <DRV_CANFDSPI_WriteHalfWord+0x94>)
 80015b6:	4908      	ldr	r1, [pc, #32]	; (80015d8 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 80015b8:	480a      	ldr	r0, [pc, #40]	; (80015e4 <DRV_CANFDSPI_WriteHalfWord+0x98>)
 80015ba:	f005 fded 	bl	8007198 <HAL_SPI_TransmitReceive>
 80015be:	4603      	mov	r3, r0
 80015c0:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 80015c2:	2201      	movs	r2, #1
 80015c4:	2120      	movs	r1, #32
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <DRV_CANFDSPI_WriteHalfWord+0x90>)
 80015c8:	f003 fa8e 	bl	8004ae8 <HAL_GPIO_WritePin>


    return spiTransferError;
 80015cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000c790 	.word	0x2000c790
 80015dc:	48000800 	.word	0x48000800
 80015e0:	2000c7f0 	.word	0x2000c7f0
 80015e4:	2000c880 	.word	0x2000c880

080015e8 <DRV_CANFDSPI_ReadByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af02      	add	r7, sp, #8
 80015ee:	60ba      	str	r2, [r7, #8]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4603      	mov	r3, r0
 80015f4:	73fb      	strb	r3, [r7, #15]
 80015f6:	460b      	mov	r3, r1
 80015f8:	81bb      	strh	r3, [r7, #12]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	3302      	adds	r3, #2
 8001602:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001604:	8abb      	ldrh	r3, [r7, #20]
 8001606:	2b60      	cmp	r3, #96	; 0x60
 8001608:	d902      	bls.n	8001610 <DRV_CANFDSPI_ReadByteArray+0x28>
      return -1;
 800160a:	f04f 33ff 	mov.w	r3, #4294967295
 800160e:	e044      	b.n	800169a <DRV_CANFDSPI_ReadByteArray+0xb2>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001610:	89bb      	ldrh	r3, [r7, #12]
 8001612:	0a1b      	lsrs	r3, r3, #8
 8001614:	b29b      	uxth	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f003 030f 	and.w	r3, r3, #15
 800161c:	b2db      	uxtb	r3, r3
 800161e:	3330      	adds	r3, #48	; 0x30
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b20      	ldr	r3, [pc, #128]	; (80016a4 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 8001624:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 800162c:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 800162e:	2302      	movs	r3, #2
 8001630:	82fb      	strh	r3, [r7, #22]
 8001632:	e006      	b.n	8001642 <DRV_CANFDSPI_ReadByteArray+0x5a>
      spiTransmitBuffer[i] = 0;
 8001634:	8afb      	ldrh	r3, [r7, #22]
 8001636:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 8001638:	2100      	movs	r1, #0
 800163a:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 800163c:	8afb      	ldrh	r3, [r7, #22]
 800163e:	3301      	adds	r3, #1
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	8afa      	ldrh	r2, [r7, #22]
 8001644:	8abb      	ldrh	r3, [r7, #20]
 8001646:	429a      	cmp	r2, r3
 8001648:	d3f4      	bcc.n	8001634 <DRV_CANFDSPI_ReadByteArray+0x4c>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	2120      	movs	r1, #32
 800164e:	4816      	ldr	r0, [pc, #88]	; (80016a8 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 8001650:	f003 fa4a 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001654:	8abb      	ldrh	r3, [r7, #20]
 8001656:	2264      	movs	r2, #100	; 0x64
 8001658:	9200      	str	r2, [sp, #0]
 800165a:	4a14      	ldr	r2, [pc, #80]	; (80016ac <DRV_CANFDSPI_ReadByteArray+0xc4>)
 800165c:	4911      	ldr	r1, [pc, #68]	; (80016a4 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <DRV_CANFDSPI_ReadByteArray+0xc8>)
 8001660:	f005 fd9a 	bl	8007198 <HAL_SPI_TransmitReceive>
 8001664:	4603      	mov	r3, r0
 8001666:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2120      	movs	r1, #32
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 800166e:	f003 fa3b 	bl	8004ae8 <HAL_GPIO_WritePin>


  // Update data
  for (i = 0; i < nBytes; i++) {
 8001672:	2300      	movs	r3, #0
 8001674:	82fb      	strh	r3, [r7, #22]
 8001676:	e00a      	b.n	800168e <DRV_CANFDSPI_ReadByteArray+0xa6>
      rxd[i] = spiReceiveBuffer[i + 2];
 8001678:	8afb      	ldrh	r3, [r7, #22]
 800167a:	1c9a      	adds	r2, r3, #2
 800167c:	8afb      	ldrh	r3, [r7, #22]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	440b      	add	r3, r1
 8001682:	490a      	ldr	r1, [pc, #40]	; (80016ac <DRV_CANFDSPI_ReadByteArray+0xc4>)
 8001684:	5c8a      	ldrb	r2, [r1, r2]
 8001686:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < nBytes; i++) {
 8001688:	8afb      	ldrh	r3, [r7, #22]
 800168a:	3301      	adds	r3, #1
 800168c:	82fb      	strh	r3, [r7, #22]
 800168e:	8afa      	ldrh	r2, [r7, #22]
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	429a      	cmp	r2, r3
 8001694:	d3f0      	bcc.n	8001678 <DRV_CANFDSPI_ReadByteArray+0x90>
  }

  return spiTransferError;
 8001696:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000c790 	.word	0x2000c790
 80016a8:	48000800 	.word	0x48000800
 80016ac:	2000c7f0 	.word	0x2000c7f0
 80016b0:	2000c880 	.word	0x2000c880

080016b4 <DRV_CANFDSPI_WriteByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b088      	sub	sp, #32
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	461a      	mov	r2, r3
 80016be:	4603      	mov	r3, r0
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	460b      	mov	r3, r1
 80016c4:	81bb      	strh	r3, [r7, #12]
 80016c6:	4613      	mov	r3, r2
 80016c8:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 80016ca:	88fb      	ldrh	r3, [r7, #6]
 80016cc:	3302      	adds	r3, #2
 80016ce:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80016d0:	8abb      	ldrh	r3, [r7, #20]
 80016d2:	2b60      	cmp	r3, #96	; 0x60
 80016d4:	d902      	bls.n	80016dc <DRV_CANFDSPI_WriteByteArray+0x28>
      return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
 80016da:	e036      	b.n	800174a <DRV_CANFDSPI_WriteByteArray+0x96>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80016dc:	89bb      	ldrh	r3, [r7, #12]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	3320      	adds	r3, #32
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b19      	ldr	r3, [pc, #100]	; (8001754 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 80016f0:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80016f2:	89bb      	ldrh	r3, [r7, #12]
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 80016f8:	705a      	strb	r2, [r3, #1]

  // Add data
  for (i = 0; i < nBytes; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	82fb      	strh	r3, [r7, #22]
 80016fe:	e00a      	b.n	8001716 <DRV_CANFDSPI_WriteByteArray+0x62>
      spiTransmitBuffer[i+2] = txd[i];
 8001700:	8afb      	ldrh	r3, [r7, #22]
 8001702:	68ba      	ldr	r2, [r7, #8]
 8001704:	441a      	add	r2, r3
 8001706:	8afb      	ldrh	r3, [r7, #22]
 8001708:	3302      	adds	r3, #2
 800170a:	7811      	ldrb	r1, [r2, #0]
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 800170e:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < nBytes; i++) {
 8001710:	8afb      	ldrh	r3, [r7, #22]
 8001712:	3301      	adds	r3, #1
 8001714:	82fb      	strh	r3, [r7, #22]
 8001716:	8afa      	ldrh	r2, [r7, #22]
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	429a      	cmp	r2, r3
 800171c:	d3f0      	bcc.n	8001700 <DRV_CANFDSPI_WriteByteArray+0x4c>
  }
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2120      	movs	r1, #32
 8001722:	480d      	ldr	r0, [pc, #52]	; (8001758 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8001724:	f003 f9e0 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001728:	8abb      	ldrh	r3, [r7, #20]
 800172a:	2264      	movs	r2, #100	; 0x64
 800172c:	9200      	str	r2, [sp, #0]
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <DRV_CANFDSPI_WriteByteArray+0xa8>)
 8001730:	4908      	ldr	r1, [pc, #32]	; (8001754 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 8001732:	480b      	ldr	r0, [pc, #44]	; (8001760 <DRV_CANFDSPI_WriteByteArray+0xac>)
 8001734:	f005 fd30 	bl	8007198 <HAL_SPI_TransmitReceive>
 8001738:	4603      	mov	r3, r0
 800173a:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2120      	movs	r1, #32
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8001742:	f003 f9d1 	bl	8004ae8 <HAL_GPIO_WritePin>


  return spiTransferError;
 8001746:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	2000c790 	.word	0x2000c790
 8001758:	48000800 	.word	0x48000800
 800175c:	2000c7f0 	.word	0x2000c7f0
 8001760:	2000c880 	.word	0x2000c880

08001764 <DRV_CANFDSPI_ReadWordArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af02      	add	r7, sp, #8
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	461a      	mov	r2, r3
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]
 8001772:	460b      	mov	r3, r1
 8001774:	81bb      	strh	r3, [r7, #12]
 8001776:	4613      	mov	r3, r2
 8001778:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	b29b      	uxth	r3, r3
 8001780:	3302      	adds	r3, #2
 8001782:	833b      	strh	r3, [r7, #24]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001784:	8b3b      	ldrh	r3, [r7, #24]
 8001786:	2b60      	cmp	r3, #96	; 0x60
 8001788:	d902      	bls.n	8001790 <DRV_CANFDSPI_ReadWordArray+0x2c>
      return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
 800178e:	e060      	b.n	8001852 <DRV_CANFDSPI_ReadWordArray+0xee>
  }

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001790:	89bb      	ldrh	r3, [r7, #12]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	f003 030f 	and.w	r3, r3, #15
 800179c:	b2db      	uxtb	r3, r3
 800179e:	3330      	adds	r3, #48	; 0x30
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <DRV_CANFDSPI_ReadWordArray+0xf8>)
 80017a4:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = address & 0xFF;
 80017a6:	89bb      	ldrh	r3, [r7, #12]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <DRV_CANFDSPI_ReadWordArray+0xf8>)
 80017ac:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 80017ae:	2302      	movs	r3, #2
 80017b0:	83fb      	strh	r3, [r7, #30]
 80017b2:	e006      	b.n	80017c2 <DRV_CANFDSPI_ReadWordArray+0x5e>
      spiTransmitBuffer[i] = 0;
 80017b4:	8bfb      	ldrh	r3, [r7, #30]
 80017b6:	4a29      	ldr	r2, [pc, #164]	; (800185c <DRV_CANFDSPI_ReadWordArray+0xf8>)
 80017b8:	2100      	movs	r1, #0
 80017ba:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 80017bc:	8bfb      	ldrh	r3, [r7, #30]
 80017be:	3301      	adds	r3, #1
 80017c0:	83fb      	strh	r3, [r7, #30]
 80017c2:	8bfa      	ldrh	r2, [r7, #30]
 80017c4:	8b3b      	ldrh	r3, [r7, #24]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3f4      	bcc.n	80017b4 <DRV_CANFDSPI_ReadWordArray+0x50>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2120      	movs	r1, #32
 80017ce:	4824      	ldr	r0, [pc, #144]	; (8001860 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 80017d0:	f003 f98a 	bl	8004ae8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017d4:	8b3b      	ldrh	r3, [r7, #24]
 80017d6:	2264      	movs	r2, #100	; 0x64
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	4a22      	ldr	r2, [pc, #136]	; (8001864 <DRV_CANFDSPI_ReadWordArray+0x100>)
 80017dc:	491f      	ldr	r1, [pc, #124]	; (800185c <DRV_CANFDSPI_ReadWordArray+0xf8>)
 80017de:	4822      	ldr	r0, [pc, #136]	; (8001868 <DRV_CANFDSPI_ReadWordArray+0x104>)
 80017e0:	f005 fcda 	bl	8007198 <HAL_SPI_TransmitReceive>
 80017e4:	4603      	mov	r3, r0
 80017e6:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 80017e8:	2201      	movs	r2, #1
 80017ea:	2120      	movs	r1, #32
 80017ec:	481c      	ldr	r0, [pc, #112]	; (8001860 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 80017ee:	f003 f97b 	bl	8004ae8 <HAL_GPIO_WritePin>

  if (spiTransferError) {
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <DRV_CANFDSPI_ReadWordArray+0x9a>
      return spiTransferError;
 80017f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80017fc:	e029      	b.n	8001852 <DRV_CANFDSPI_ReadWordArray+0xee>
  }

  // Convert Byte array to Word array
  n = 2;
 80017fe:	2302      	movs	r3, #2
 8001800:	837b      	strh	r3, [r7, #26]
  for (i = 0; i < nWords; i++) {
 8001802:	2300      	movs	r3, #0
 8001804:	83fb      	strh	r3, [r7, #30]
 8001806:	e01e      	b.n	8001846 <DRV_CANFDSPI_ReadWordArray+0xe2>
      w.word = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	613b      	str	r3, [r7, #16]
      for (j = 0; j < 4; j++, n++) {
 800180c:	2300      	movs	r3, #0
 800180e:	83bb      	strh	r3, [r7, #28]
 8001810:	e00d      	b.n	800182e <DRV_CANFDSPI_ReadWordArray+0xca>
          w.byte[j] = spiReceiveBuffer[n];
 8001812:	8b7a      	ldrh	r2, [r7, #26]
 8001814:	8bbb      	ldrh	r3, [r7, #28]
 8001816:	4913      	ldr	r1, [pc, #76]	; (8001864 <DRV_CANFDSPI_ReadWordArray+0x100>)
 8001818:	5c8a      	ldrb	r2, [r1, r2]
 800181a:	3320      	adds	r3, #32
 800181c:	443b      	add	r3, r7
 800181e:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (j = 0; j < 4; j++, n++) {
 8001822:	8bbb      	ldrh	r3, [r7, #28]
 8001824:	3301      	adds	r3, #1
 8001826:	83bb      	strh	r3, [r7, #28]
 8001828:	8b7b      	ldrh	r3, [r7, #26]
 800182a:	3301      	adds	r3, #1
 800182c:	837b      	strh	r3, [r7, #26]
 800182e:	8bbb      	ldrh	r3, [r7, #28]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d9ee      	bls.n	8001812 <DRV_CANFDSPI_ReadWordArray+0xae>
      }
      rxd[i] = w.word;
 8001834:	8bfb      	ldrh	r3, [r7, #30]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	4413      	add	r3, r2
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nWords; i++) {
 8001840:	8bfb      	ldrh	r3, [r7, #30]
 8001842:	3301      	adds	r3, #1
 8001844:	83fb      	strh	r3, [r7, #30]
 8001846:	8bfa      	ldrh	r2, [r7, #30]
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	429a      	cmp	r2, r3
 800184c:	d3dc      	bcc.n	8001808 <DRV_CANFDSPI_ReadWordArray+0xa4>
  }

  return spiTransferError;
 800184e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3720      	adds	r7, #32
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	2000c790 	.word	0x2000c790
 8001860:	48000800 	.word	0x48000800
 8001864:	2000c7f0 	.word	0x2000c7f0
 8001868:	2000c880 	.word	0x2000c880

0800186c <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  REG_CiCON ciCon;
  int8_t spiTransferError = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 800187c:	4b41      	ldr	r3, [pc, #260]	; (8001984 <DRV_CANFDSPI_Configure+0x118>)
 800187e:	60bb      	str	r3, [r7, #8]

  ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001888:	b2da      	uxtb	r2, r3
 800188a:	7a3b      	ldrb	r3, [r7, #8]
 800188c:	f362 0304 	bfi	r3, r2, #0, #5
 8001890:	723b      	strb	r3, [r7, #8]
  ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	7a3b      	ldrb	r3, [r7, #8]
 800189e:	f362 1345 	bfi	r3, r2, #5, #1
 80018a2:	723b      	strb	r3, [r7, #8]
  ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	7a3b      	ldrb	r3, [r7, #8]
 80018b0:	f362 1386 	bfi	r3, r2, #6, #1
 80018b4:	723b      	strb	r3, [r7, #8]
  ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	7a7b      	ldrb	r3, [r7, #9]
 80018c2:	f362 0300 	bfi	r3, r2, #0, #1
 80018c6:	727b      	strb	r3, [r7, #9]
  ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	785b      	ldrb	r3, [r3, #1]
 80018cc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	7a7b      	ldrb	r3, [r7, #9]
 80018d4:	f362 0342 	bfi	r3, r2, #1, #2
 80018d8:	727b      	strb	r3, [r7, #9]
  ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	785b      	ldrb	r3, [r3, #1]
 80018de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	7a7b      	ldrb	r3, [r7, #9]
 80018e6:	f362 1304 	bfi	r3, r2, #4, #1
 80018ea:	727b      	strb	r3, [r7, #9]
  ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	785b      	ldrb	r3, [r3, #1]
 80018f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	7abb      	ldrb	r3, [r7, #10]
 80018f8:	f362 0300 	bfi	r3, r2, #0, #1
 80018fc:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001906:	b2da      	uxtb	r2, r3
 8001908:	7abb      	ldrb	r3, [r7, #10]
 800190a:	f362 0341 	bfi	r3, r2, #1, #1
 800190e:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	785b      	ldrb	r3, [r3, #1]
 8001914:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	7abb      	ldrb	r3, [r7, #10]
 800191c:	f362 0382 	bfi	r3, r2, #2, #1
 8001920:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	7abb      	ldrb	r3, [r7, #10]
 800192e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001932:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TXQEnable = config->TXQEnable;
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	785b      	ldrb	r3, [r3, #1]
 8001938:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7abb      	ldrb	r3, [r7, #10]
 8001940:	f362 1304 	bfi	r3, r2, #4, #1
 8001944:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	789b      	ldrb	r3, [r3, #2]
 800194a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800194e:	b2da      	uxtb	r2, r3
 8001950:	7afb      	ldrb	r3, [r7, #11]
 8001952:	f362 1307 	bfi	r3, r2, #4, #4
 8001956:	72fb      	strb	r3, [r7, #11]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2100      	movs	r1, #0
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd48 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8001964:	4603      	mov	r3, r0
 8001966:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 8001968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <DRV_CANFDSPI_Configure+0x10a>
      return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	e001      	b.n	800197a <DRV_CANFDSPI_Configure+0x10e>
  }

  return spiTransferError;
 8001976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	04980760 	.word	0x04980760

08001988 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  REG_CiCON ciCon;
  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001990:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001992:	60fb      	str	r3, [r7, #12]

  config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001994:	7b3b      	ldrb	r3, [r7, #12]
 8001996:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800199a:	b2d9      	uxtb	r1, r3
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	7813      	ldrb	r3, [r2, #0]
 80019a0:	f361 0304 	bfi	r3, r1, #0, #5
 80019a4:	7013      	strb	r3, [r2, #0]
  config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 80019a6:	7b3b      	ldrb	r3, [r7, #12]
 80019a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80019ac:	b2d9      	uxtb	r1, r3
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	7813      	ldrb	r3, [r2, #0]
 80019b2:	f361 1345 	bfi	r3, r1, #5, #1
 80019b6:	7013      	strb	r3, [r2, #0]
  config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 80019b8:	7b3b      	ldrb	r3, [r7, #12]
 80019ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80019be:	b2d9      	uxtb	r1, r3
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	7813      	ldrb	r3, [r2, #0]
 80019c4:	f361 1386 	bfi	r3, r1, #6, #1
 80019c8:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 80019ca:	7b7b      	ldrb	r3, [r7, #13]
 80019cc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80019d0:	b2d9      	uxtb	r1, r3
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	7813      	ldrb	r3, [r2, #0]
 80019d6:	f361 13c7 	bfi	r3, r1, #7, #1
 80019da:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 80019dc:	7b7b      	ldrb	r3, [r7, #13]
 80019de:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80019e2:	b2d9      	uxtb	r1, r3
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	7853      	ldrb	r3, [r2, #1]
 80019e8:	f361 0301 	bfi	r3, r1, #0, #2
 80019ec:	7053      	strb	r3, [r2, #1]
  config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 80019ee:	7b7b      	ldrb	r3, [r7, #13]
 80019f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80019f4:	b2d9      	uxtb	r1, r3
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	7853      	ldrb	r3, [r2, #1]
 80019fa:	f361 0382 	bfi	r3, r1, #2, #1
 80019fe:	7053      	strb	r3, [r2, #1]
  config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001a06:	b2d9      	uxtb	r1, r3
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	7853      	ldrb	r3, [r2, #1]
 8001a0c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001a10:	7053      	strb	r3, [r2, #1]
  config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001a12:	7bbb      	ldrb	r3, [r7, #14]
 8001a14:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001a18:	b2d9      	uxtb	r1, r3
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	7853      	ldrb	r3, [r2, #1]
 8001a1e:	f361 1304 	bfi	r3, r1, #4, #1
 8001a22:	7053      	strb	r3, [r2, #1]
  config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001a24:	7bbb      	ldrb	r3, [r7, #14]
 8001a26:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001a2a:	b2d9      	uxtb	r1, r3
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	7853      	ldrb	r3, [r2, #1]
 8001a30:	f361 1345 	bfi	r3, r1, #5, #1
 8001a34:	7053      	strb	r3, [r2, #1]
  config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001a3c:	b2d9      	uxtb	r1, r3
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	7853      	ldrb	r3, [r2, #1]
 8001a42:	f361 1386 	bfi	r3, r1, #6, #1
 8001a46:	7053      	strb	r3, [r2, #1]
  config->TXQEnable = ciCon.bF.TXQEnable;
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001a4e:	b2d9      	uxtb	r1, r3
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	7853      	ldrb	r3, [r2, #1]
 8001a54:	f361 13c7 	bfi	r3, r1, #7, #1
 8001a58:	7053      	strb	r3, [r2, #1]
  config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a60:	b2d9      	uxtb	r1, r3
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	7893      	ldrb	r3, [r2, #2]
 8001a66:	f361 0303 	bfi	r3, r1, #0, #4
 8001a6a:	7093      	strb	r3, [r2, #2]

  return 0;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	04980760 	.word	0x04980760

08001a80 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	460a      	mov	r2, r1
 8001a8a:	71fb      	strb	r3, [r7, #7]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	71bb      	strb	r3, [r7, #6]
  uint8_t d = 0;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73bb      	strb	r3, [r7, #14]
  int8_t spiTransferError = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	73fb      	strb	r3, [r7, #15]

  // Read
  spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001a98:	f107 020e 	add.w	r2, r7, #14
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2103      	movs	r1, #3
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fbc9 	bl	8001238 <DRV_CANFDSPI_ReadByte>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <DRV_CANFDSPI_OperationModeSelect+0x38>
      return -1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e01a      	b.n	8001aee <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  // Modify
  d &= ~0x07;
 8001ab8:	7bbb      	ldrb	r3, [r7, #14]
 8001aba:	f023 0307 	bic.w	r3, r3, #7
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	73bb      	strb	r3, [r7, #14]
  d |= opMode;
 8001ac2:	7bba      	ldrb	r2, [r7, #14]
 8001ac4:	79bb      	ldrb	r3, [r7, #6]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	73bb      	strb	r3, [r7, #14]

  // Write
  spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001acc:	7bba      	ldrb	r2, [r7, #14]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2103      	movs	r1, #3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fbf2 	bl	80012bc <DRV_CANFDSPI_WriteByte>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 8001adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <DRV_CANFDSPI_OperationModeSelect+0x6a>
      return -2;
 8001ae4:	f06f 0301 	mvn.w	r3, #1
 8001ae8:	e001      	b.n	8001aee <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  return spiTransferError;
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	603a      	str	r2, [r7, #0]
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	460b      	mov	r3, r1
 8001b06:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	81bb      	strh	r3, [r7, #12]

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8001b10:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001b12:	60bb      	str	r3, [r7, #8]

  ciFifoCon.txBF.TxEnable = 1;
 8001b14:	7a3b      	ldrb	r3, [r7, #8]
 8001b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1a:	723b      	strb	r3, [r7, #8]
  ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	785b      	ldrb	r3, [r3, #1]
 8001b20:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	7afb      	ldrb	r3, [r7, #11]
 8001b28:	f362 0304 	bfi	r3, r2, #0, #5
 8001b2c:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	785b      	ldrb	r3, [r3, #1]
 8001b32:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001b36:	b2da      	uxtb	r2, r3
 8001b38:	7afb      	ldrb	r3, [r7, #11]
 8001b3a:	f362 1347 	bfi	r3, r2, #5, #3
 8001b3e:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001b48:	b2da      	uxtb	r2, r3
 8001b4a:	7abb      	ldrb	r3, [r7, #10]
 8001b4c:	f362 1346 	bfi	r3, r2, #5, #2
 8001b50:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	7abb      	ldrb	r3, [r7, #10]
 8001b5e:	f362 0304 	bfi	r3, r2, #0, #5
 8001b62:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	7a3b      	ldrb	r3, [r7, #8]
 8001b70:	f362 1386 	bfi	r3, r2, #6, #1
 8001b74:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	0052      	lsls	r2, r2, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	3350      	adds	r3, #80	; 0x50
 8001b86:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001b88:	68ba      	ldr	r2, [r7, #8]
 8001b8a:	89b9      	ldrh	r1, [r7, #12]
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff fc30 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8001b94:	4603      	mov	r3, r0
 8001b96:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	00600400 	.word	0x00600400

08001ba8 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8001bb0:	4b1a      	ldr	r3, [pc, #104]	; (8001c1c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001bb2:	60fb      	str	r3, [r7, #12]

  config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001bb4:	7b3b      	ldrb	r3, [r7, #12]
 8001bb6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001bba:	b2d9      	uxtb	r1, r3
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	7813      	ldrb	r3, [r2, #0]
 8001bc0:	f361 0300 	bfi	r3, r1, #0, #1
 8001bc4:	7013      	strb	r3, [r2, #0]
  config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001bc6:	7bbb      	ldrb	r3, [r7, #14]
 8001bc8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001bcc:	b2d9      	uxtb	r1, r3
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	7813      	ldrb	r3, [r2, #0]
 8001bd2:	f361 0345 	bfi	r3, r1, #1, #5
 8001bd6:	7013      	strb	r3, [r2, #0]
  config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001bd8:	7bbb      	ldrb	r3, [r7, #14]
 8001bda:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001bde:	b2d9      	uxtb	r1, r3
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	7813      	ldrb	r3, [r2, #0]
 8001be4:	f361 1387 	bfi	r3, r1, #6, #2
 8001be8:	7013      	strb	r3, [r2, #0]
  config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001bea:	7bfb      	ldrb	r3, [r7, #15]
 8001bec:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001bf0:	b2d9      	uxtb	r1, r3
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	7853      	ldrb	r3, [r2, #1]
 8001bf6:	f361 0304 	bfi	r3, r1, #0, #5
 8001bfa:	7053      	strb	r3, [r2, #1]
  config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001c02:	b2d9      	uxtb	r1, r3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	7853      	ldrb	r3, [r2, #1]
 8001c08:	f361 1347 	bfi	r3, r1, #5, #3
 8001c0c:	7053      	strb	r3, [r2, #1]

  return 0;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	00600400 	.word	0x00600400

08001c20 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0a0      	sub	sp, #128	; 0x80
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60ba      	str	r2, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	73fb      	strb	r3, [r7, #15]
 8001c2e:	460b      	mov	r3, r1
 8001c30:	73bb      	strb	r3, [r7, #14]
  uint32_t fifoReg[3];
  uint32_t dataBytesInObject;
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001c38:	7bbb      	ldrb	r3, [r7, #14]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	0052      	lsls	r2, r2, #1
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3350      	adds	r3, #80	; 0x50
 8001c48:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8001c4c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001c50:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001c54:	7bf8      	ldrb	r0, [r7, #15]
 8001c56:	2303      	movs	r3, #3
 8001c58:	f7ff fd84 	bl	8001764 <DRV_CANFDSPI_ReadWordArray>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 8001c62:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
      return -1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e0c5      	b.n	8001dfc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that it is a transmit buffer
  ciFifoCon.word = fifoReg[0];
 8001c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c72:	667b      	str	r3, [r7, #100]	; 0x64
  if (!ciFifoCon.txBF.TxEnable) {
 8001c74:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001c78:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
      return -2;
 8001c82:	f06f 0301 	mvn.w	r3, #1
 8001c86:	e0b9      	b.n	8001dfc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that DLC is big enough for data
  dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 fc10 	bl	80034b8 <DRV_CANFDSPI_DlcToDataBytes>
 8001c98:	6778      	str	r0, [r7, #116]	; 0x74
  if (dataBytesInObject < txdNumBytes) {
 8001c9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d202      	bcs.n	8001caa <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
      return -3;
 8001ca4:	f06f 0302 	mvn.w	r3, #2
 8001ca8:	e0a8      	b.n	8001dfc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Get status
  ciFifoSta.word = fifoReg[1];
 8001caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cac:	663b      	str	r3, [r7, #96]	; 0x60

  // Get address
  ciFifoUa.word = fifoReg[2];
 8001cae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 8001cb2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001cb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
  a += cRAMADDR_START;
 8001cc0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  uint8_t txBuffer[MAX_MSG_SIZE];

  txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	743b      	strb	r3, [r7, #16]
  txBuffer[1] = txObj->byte[1];
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	785b      	ldrb	r3, [r3, #1]
 8001cd6:	747b      	strb	r3, [r7, #17]
  txBuffer[2] = txObj->byte[2];
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	789b      	ldrb	r3, [r3, #2]
 8001cdc:	74bb      	strb	r3, [r7, #18]
  txBuffer[3] = txObj->byte[3];
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	78db      	ldrb	r3, [r3, #3]
 8001ce2:	74fb      	strb	r3, [r7, #19]

  txBuffer[4] = txObj->byte[4];
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	791b      	ldrb	r3, [r3, #4]
 8001ce8:	753b      	strb	r3, [r7, #20]
  txBuffer[5] = txObj->byte[5];
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	757b      	strb	r3, [r7, #21]
  txBuffer[6] = txObj->byte[6];
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	799b      	ldrb	r3, [r3, #6]
 8001cf4:	75bb      	strb	r3, [r7, #22]
  txBuffer[7] = txObj->byte[7];
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	79db      	ldrb	r3, [r3, #7]
 8001cfa:	75fb      	strb	r3, [r7, #23]

  uint8_t i;
  for (i = 0; i < txdNumBytes; i++) {
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001d02:	e010      	b.n	8001d26 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
      txBuffer[i + 8] = txd[i];
 8001d04:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	441a      	add	r2, r3
 8001d0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d10:	3308      	adds	r3, #8
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	3380      	adds	r3, #128	; 0x80
 8001d16:	443b      	add	r3, r7
 8001d18:	f803 2c70 	strb.w	r2, [r3, #-112]
  for (i = 0; i < txdNumBytes; i++) {
 8001d1c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d20:	3301      	adds	r3, #1
 8001d22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001d26:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d2a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d8e8      	bhi.n	8001d04 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
  }

  // Make sure we write a multiple of 4 bytes to RAM
  uint16_t n = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  uint8_t j = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  if (txdNumBytes % 4) {
 8001d3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d02b      	beq.n	8001da2 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
      // Need to add bytes
      n = 4 - (txdNumBytes % 4);
 8001d4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	f1c3 0304 	rsb	r3, r3, #4
 8001d5a:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      i = txdNumBytes + 8;
 8001d5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	3308      	adds	r3, #8
 8001d66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

      for (j = 0; j < n; j++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001d70:	e010      	b.n	8001d94 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
          txBuffer[i + 8 + j] = 0;
 8001d72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d76:	f103 0208 	add.w	r2, r3, #8
 8001d7a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001d7e:	4413      	add	r3, r2
 8001d80:	3380      	adds	r3, #128	; 0x80
 8001d82:	443b      	add	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	f803 2c70 	strb.w	r2, [r3, #-112]
      for (j = 0; j < n; j++) {
 8001d8a:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001d94:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d8e7      	bhi.n	8001d72 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
      }
  }

  spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8001da2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001dac:	4413      	add	r3, r2
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	3308      	adds	r3, #8
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	f107 0210 	add.w	r2, r7, #16
 8001db8:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8001dbc:	7bf8      	ldrb	r0, [r7, #15]
 8001dbe:	f7ff fc79 	bl	80016b4 <DRV_CANFDSPI_WriteByteArray>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 8001dc8:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
      return -4;
 8001dd0:	f06f 0303 	mvn.w	r3, #3
 8001dd4:	e012      	b.n	8001dfc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Set UINC and TXREQ
  spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8001dd6:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 8001dda:	7bb9      	ldrb	r1, [r7, #14]
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f810 	bl	8001e04 <DRV_CANFDSPI_TransmitChannelUpdate>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 8001dea:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
      return -5;
 8001df2:	f06f 0304 	mvn.w	r3, #4
 8001df6:	e001      	b.n	8001dfc <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  return spiTransferError;
 8001df8:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3780      	adds	r7, #128	; 0x80
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <DRV_CANFDSPI_TransmitChannelUpdate>:
  return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	71bb      	strb	r3, [r7, #6]
 8001e12:	4613      	mov	r3, r2
 8001e14:	717b      	strb	r3, [r7, #5]
  uint16_t a;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8001e1a:	79bb      	ldrb	r3, [r7, #6]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	0052      	lsls	r2, r2, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	3351      	adds	r3, #81	; 0x51
 8001e2a:	81bb      	strh	r3, [r7, #12]
  ciFifoCon.word = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  ciFifoCon.txBF.UINC = 1;
 8001e30:	7a7b      	ldrb	r3, [r7, #9]
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	727b      	strb	r3, [r7, #9]

  // Set TXREQ
  if (flush) {
 8001e38:	797b      	ldrb	r3, [r7, #5]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
      ciFifoCon.txBF.TxRequest = 1;
 8001e3e:	7a7b      	ldrb	r3, [r7, #9]
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	727b      	strb	r3, [r7, #9]
  }

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8001e46:	7a7a      	ldrb	r2, [r7, #9]
 8001e48:	89b9      	ldrh	r1, [r7, #12]
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fa35 	bl	80012bc <DRV_CANFDSPI_WriteByte>
 8001e52:	4603      	mov	r3, r0
 8001e54:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
      return -1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e001      	b.n	8001e68 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
  }

  return spiTransferError;
 8001e64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	603a      	str	r2, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiFLTOBJ fObj;
  int8_t spiTransferError = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	73fb      	strb	r3, [r7, #15]

  // Setup
  fObj.word = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
  fObj.bF = *id;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8001e8e:	79bb      	ldrb	r3, [r7, #6]
 8001e90:	333e      	adds	r3, #62	; 0x3e
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	89b9      	ldrh	r1, [r7, #12]
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff faa8 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	603a      	str	r2, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiMASK mObj;
  int8_t spiTransferError = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]

  // Setup
  mObj.word = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  mObj.bF = *mask;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8001ed2:	79bb      	ldrb	r3, [r7, #6]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001ede:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	89b9      	ldrh	r1, [r7, #12]
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fa84 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3710      	adds	r7, #16
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4604      	mov	r4, r0
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71bb      	strb	r3, [r7, #6]
 8001f12:	460b      	mov	r3, r1
 8001f14:	717b      	strb	r3, [r7, #5]
 8001f16:	4613      	mov	r3, r2
 8001f18:	713b      	strb	r3, [r7, #4]
  uint16_t a;
  REG_CiFLTCON_BYTE fCtrl;
  int8_t spiTransferError = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	73fb      	strb	r3, [r7, #15]

  // Enable
  if (enable) {
 8001f1e:	793b      	ldrb	r3, [r7, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d004      	beq.n	8001f2e <DRV_CANFDSPI_FilterToFifoLink+0x32>
      fCtrl.bF.Enable = 1;
 8001f24:	7a3b      	ldrb	r3, [r7, #8]
 8001f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2a:	723b      	strb	r3, [r7, #8]
 8001f2c:	e003      	b.n	8001f36 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
  } else {
      fCtrl.bF.Enable = 0;
 8001f2e:	7a3b      	ldrb	r3, [r7, #8]
 8001f30:	f36f 13c7 	bfc	r3, #7, #1
 8001f34:	723b      	strb	r3, [r7, #8]
  }

  // Link
  fCtrl.bF.BufferPointer = channel;
 8001f36:	797b      	ldrb	r3, [r7, #5]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	b2da      	uxtb	r2, r3
 8001f3e:	7a3b      	ldrb	r3, [r7, #8]
 8001f40:	f362 0304 	bfi	r3, r2, #0, #5
 8001f44:	723b      	strb	r3, [r7, #8]
  a = cREGADDR_CiFLTCON + filter;
 8001f46:	79bb      	ldrb	r3, [r7, #6]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8001f4e:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8001f50:	7a3a      	ldrb	r2, [r7, #8]
 8001f52:	89b9      	ldrh	r1, [r7, #12]
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff f9b0 	bl	80012bc <DRV_CANFDSPI_WriteByte>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd90      	pop	{r4, r7, pc}

08001f6c <DRV_CANFDSPI_ReceiveChannelConfigure>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	603a      	str	r2, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	81bb      	strh	r3, [r7, #12]

  if (channel == CAN_TXQUEUE_CH0) {
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d102      	bne.n	8001f90 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
      return -100;
 8001f8a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001f8e:	e033      	b.n	8001ff8 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
  }

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8001f90:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8001f92:	60bb      	str	r3, [r7, #8]

  ciFifoCon.rxBF.TxEnable = 0;
 8001f94:	7a3b      	ldrb	r3, [r7, #8]
 8001f96:	f36f 13c7 	bfc	r3, #7, #1
 8001f9a:	723b      	strb	r3, [r7, #8]
  ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	f362 0304 	bfi	r3, r2, #0, #5
 8001fac:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	7afb      	ldrb	r3, [r7, #11]
 8001fba:	f362 1347 	bfi	r3, r2, #5, #3
 8001fbe:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	7a3b      	ldrb	r3, [r7, #8]
 8001fcc:	f362 1345 	bfi	r3, r2, #5, #1
 8001fd0:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	0052      	lsls	r2, r2, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3350      	adds	r3, #80	; 0x50
 8001fe2:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	89b9      	ldrh	r1, [r7, #12]
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fa02 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001ff4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	00600400 	.word	0x00600400

08002004 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 800200e:	60fb      	str	r3, [r7, #12]

  config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002016:	b2d9      	uxtb	r1, r3
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	7813      	ldrb	r3, [r2, #0]
 800201c:	f361 0345 	bfi	r3, r1, #1, #5
 8002020:	7013      	strb	r3, [r2, #0]
  config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002028:	b2d9      	uxtb	r1, r3
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	8813      	ldrh	r3, [r2, #0]
 800202e:	f361 1388 	bfi	r3, r1, #6, #3
 8002032:	8013      	strh	r3, [r2, #0]
  config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 8002034:	7b3b      	ldrb	r3, [r7, #12]
 8002036:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800203a:	b2d9      	uxtb	r1, r3
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	7813      	ldrb	r3, [r2, #0]
 8002040:	f361 0300 	bfi	r3, r1, #0, #1
 8002044:	7013      	strb	r3, [r2, #0]

  return 0;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	00600400 	.word	0x00600400

08002058 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b0a0      	sub	sp, #128	; 0x80
 800205c:	af00      	add	r7, sp, #0
 800205e:	60ba      	str	r2, [r7, #8]
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4603      	mov	r3, r0
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	460b      	mov	r3, r1
 8002068:	73bb      	strb	r3, [r7, #14]
  uint8_t n = 0;
 800206a:	2300      	movs	r3, #0
 800206c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint8_t i = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  uint16_t a;
  uint32_t fifoReg[3];
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800207c:	7bbb      	ldrb	r3, [r7, #14]
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	0052      	lsls	r2, r2, #1
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	b29b      	uxth	r3, r3
 800208a:	3350      	adds	r3, #80	; 0x50
 800208c:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002090:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002094:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8002098:	7bf8      	ldrb	r0, [r7, #15]
 800209a:	2303      	movs	r3, #3
 800209c:	f7ff fb62 	bl	8001764 <DRV_CANFDSPI_ReadWordArray>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 80020a6:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
      return -1;
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295
 80020b2:	e0cd      	b.n	8002250 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Check that it is a receive buffer
  ciFifoCon.word = fifoReg[0];
 80020b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (ciFifoCon.txBF.TxEnable) {
 80020b8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80020bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d002      	beq.n	80020cc <DRV_CANFDSPI_ReceiveMessageGet+0x74>
      return -2;
 80020c6:	f06f 0301 	mvn.w	r3, #1
 80020ca:	e0c1      	b.n	8002250 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Get Status
  ciFifoSta.word = fifoReg[1];
 80020cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ce:	667b      	str	r3, [r7, #100]	; 0x64

  // Get address
  ciFifoUa.word = fifoReg[2];
 80020d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020d2:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 80020d4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
  a += cRAMADDR_START;
 80020e2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80020e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  // Number of bytes to read
  n = nBytes + 8; // Add 8 header bytes
 80020ee:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80020f2:	3308      	adds	r3, #8
 80020f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80020f8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80020fc:	f003 0320 	and.w	r3, r3, #32
 8002100:	b2db      	uxtb	r3, r3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
      n += 4; // Add 4 time stamp bytes
 8002106:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800210a:	3304      	adds	r3, #4
 800210c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Make sure we read a multiple of 4 bytes from RAM
  if (n % 4) {
 8002110:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
      n = n + 4 - (n % 4);
 800211e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	b2db      	uxtb	r3, r3
 8002128:	3304      	adds	r3, #4
 800212a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Read rxObj using one access
  uint8_t ba[MAX_MSG_SIZE];

  if (n > MAX_MSG_SIZE) {
 800212e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002132:	2b4c      	cmp	r3, #76	; 0x4c
 8002134:	d902      	bls.n	800213c <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
      n = MAX_MSG_SIZE;
 8002136:	234c      	movs	r3, #76	; 0x4c
 8002138:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 800213c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002140:	b29b      	uxth	r3, r3
 8002142:	f107 0214 	add.w	r2, r7, #20
 8002146:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800214a:	7bf8      	ldrb	r0, [r7, #15]
 800214c:	f7ff fa4c 	bl	80015e8 <DRV_CANFDSPI_ReadByteArray>
 8002150:	4603      	mov	r3, r0
 8002152:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 8002156:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
      return -3;
 800215e:	f06f 0302 	mvn.w	r3, #2
 8002162:	e075      	b.n	8002250 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Assign message header
  REG_t myReg;

  myReg.byte[0] = ba[0];
 8002164:	7d3b      	ldrb	r3, [r7, #20]
 8002166:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[1];
 8002168:	7d7b      	ldrb	r3, [r7, #21]
 800216a:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[2];
 800216c:	7dbb      	ldrb	r3, [r7, #22]
 800216e:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[3];
 8002170:	7dfb      	ldrb	r3, [r7, #23]
 8002172:	74fb      	strb	r3, [r7, #19]
  rxObj->word[0] = myReg.word;
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	601a      	str	r2, [r3, #0]

  myReg.byte[0] = ba[4];
 800217a:	7e3b      	ldrb	r3, [r7, #24]
 800217c:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[5];
 800217e:	7e7b      	ldrb	r3, [r7, #25]
 8002180:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[6];
 8002182:	7ebb      	ldrb	r3, [r7, #26]
 8002184:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[7];
 8002186:	7efb      	ldrb	r3, [r7, #27]
 8002188:	74fb      	strb	r3, [r7, #19]
  rxObj->word[1] = myReg.word;
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	605a      	str	r2, [r3, #4]

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002190:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d027      	beq.n	80021ee <DRV_CANFDSPI_ReceiveMessageGet+0x196>
      myReg.byte[0] = ba[8];
 800219e:	7f3b      	ldrb	r3, [r7, #28]
 80021a0:	743b      	strb	r3, [r7, #16]
      myReg.byte[1] = ba[9];
 80021a2:	7f7b      	ldrb	r3, [r7, #29]
 80021a4:	747b      	strb	r3, [r7, #17]
      myReg.byte[2] = ba[10];
 80021a6:	7fbb      	ldrb	r3, [r7, #30]
 80021a8:	74bb      	strb	r3, [r7, #18]
      myReg.byte[3] = ba[11];
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
 80021ac:	74fb      	strb	r3, [r7, #19]
      rxObj->word[2] = myReg.word;
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 80021b4:	2300      	movs	r3, #0
 80021b6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80021ba:	e011      	b.n	80021e0 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
          rxd[i] = ba[i + 12];
 80021bc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80021c0:	f103 020c 	add.w	r2, r3, #12
 80021c4:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	440b      	add	r3, r1
 80021cc:	3280      	adds	r2, #128	; 0x80
 80021ce:	443a      	add	r2, r7
 80021d0:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80021d4:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 80021d6:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80021da:	3301      	adds	r3, #1
 80021dc:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80021e0:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80021e4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d3e7      	bcc.n	80021bc <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 80021ec:	e01e      	b.n	800222c <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
      }
  } else {
      rxObj->word[2] = 0;
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 80021f4:	2300      	movs	r3, #0
 80021f6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80021fa:	e011      	b.n	8002220 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
          rxd[i] = ba[i + 8];
 80021fc:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002200:	f103 0208 	add.w	r2, r3, #8
 8002204:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	440b      	add	r3, r1
 800220c:	3280      	adds	r2, #128	; 0x80
 800220e:	443a      	add	r2, r7
 8002210:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002214:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 8002216:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800221a:	3301      	adds	r3, #1
 800221c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002220:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002224:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002228:	429a      	cmp	r2, r3
 800222a:	d3e7      	bcc.n	80021fc <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
      }
  }

  // UINC channel
  spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 800222c:	7bba      	ldrb	r2, [r7, #14]
 800222e:	7bfb      	ldrb	r3, [r7, #15]
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f810 	bl	8002258 <DRV_CANFDSPI_ReceiveChannelUpdate>
 8002238:	4603      	mov	r3, r0
 800223a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 800223e:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
      return -4;
 8002246:	f06f 0303 	mvn.w	r3, #3
 800224a:	e001      	b.n	8002250 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  return spiTransferError;
 800224c:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8002250:	4618      	mov	r0, r3
 8002252:	3780      	adds	r7, #128	; 0x80
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <DRV_CANFDSPI_ReceiveChannelUpdate>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
      CAN_FIFO_CHANNEL channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	460a      	mov	r2, r1
 8002262:	71fb      	strb	r3, [r7, #7]
 8002264:	4613      	mov	r3, r2
 8002266:	71bb      	strb	r3, [r7, #6]
  uint16_t a = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	81fb      	strh	r3, [r7, #14]
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	737b      	strb	r3, [r7, #13]
  ciFifoCon.word = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	60bb      	str	r3, [r7, #8]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	0052      	lsls	r2, r2, #1
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	b29b      	uxth	r3, r3
 8002282:	3351      	adds	r3, #81	; 0x51
 8002284:	81fb      	strh	r3, [r7, #14]
  ciFifoCon.rxBF.UINC = 1;
 8002286:	7a7b      	ldrb	r3, [r7, #9]
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	727b      	strb	r3, [r7, #9]

  // Write byte
  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 800228e:	7a7a      	ldrb	r2, [r7, #9]
 8002290:	89f9      	ldrh	r1, [r7, #14]
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff f811 	bl	80012bc <DRV_CANFDSPI_WriteByte>
 800229a:	4603      	mov	r3, r0
 800229c:	737b      	strb	r3, [r7, #13]

  return spiTransferError;
 800229e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	460a      	mov	r2, r1
 80022b4:	71fb      	strb	r3, [r7, #7]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 80022c2:	231e      	movs	r3, #30
 80022c4:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 80022ca:	f107 0208 	add.w	r2, r7, #8
 80022ce:	89b9      	ldrh	r1, [r7, #12]
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f8dc 	bl	8001490 <DRV_CANFDSPI_ReadHalfWord>
 80022d8:	4603      	mov	r3, r0
 80022da:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80022dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d002      	beq.n	80022ea <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 80022e4:	f04f 33ff 	mov.w	r3, #4294967295
 80022e8:	e01b      	b.n	8002322 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 80022ea:	893b      	ldrh	r3, [r7, #8]
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022f2:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80022f6:	b21b      	sxth	r3, r3
 80022f8:	4313      	orrs	r3, r2
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002300:	893a      	ldrh	r2, [r7, #8]
 8002302:	89b9      	ldrh	r1, [r7, #12]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f920 	bl	800154c <DRV_CANFDSPI_WriteHalfWord>
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 8002318:	f06f 0301 	mvn.w	r3, #1
 800231c:	e001      	b.n	8002322 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	603a      	str	r2, [r7, #0]
 8002334:	71fb      	strb	r3, [r7, #7]
 8002336:	460b      	mov	r3, r1
 8002338:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800233e:	2300      	movs	r3, #0
 8002340:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002346:	79bb      	ldrb	r3, [r7, #6]
 8002348:	b29b      	uxth	r3, r3
 800234a:	461a      	mov	r2, r3
 800234c:	0052      	lsls	r2, r2, #1
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	b29b      	uxth	r3, r3
 8002354:	3354      	adds	r3, #84	; 0x54
 8002356:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8002358:	f107 0208 	add.w	r2, r7, #8
 800235c:	89b9      	ldrh	r1, [r7, #12]
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4618      	mov	r0, r3
 8002362:	f7fe ff69 	bl	8001238 <DRV_CANFDSPI_ReadByte>
 8002366:	4603      	mov	r3, r0
 8002368:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800236a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	e007      	b.n	8002388 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8002378:	7a3b      	ldrb	r3, [r7, #8]
 800237a:	f003 0317 	and.w	r3, r3, #23
 800237e:	b2da      	uxtb	r2, r3
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002384:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	603a      	str	r2, [r7, #0]
 800239a:	71fb      	strb	r3, [r7, #7]
 800239c:	460b      	mov	r3, r1
 800239e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d102      	bne.n	80023b4 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 80023ae:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80023b2:	e022      	b.n	80023fa <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80023b8:	79bb      	ldrb	r3, [r7, #6]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	0052      	lsls	r2, r2, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3354      	adds	r3, #84	; 0x54
 80023c8:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80023ca:	f107 0208 	add.w	r2, r7, #8
 80023ce:	89b9      	ldrh	r1, [r7, #12]
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe ff30 	bl	8001238 <DRV_CANFDSPI_ReadByte>
 80023d8:	4603      	mov	r3, r0
 80023da:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80023dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 80023e4:	f04f 33ff 	mov.w	r3, #4294967295
 80023e8:	e007      	b.n	80023fa <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 80023ea:	7a3b      	ldrb	r3, [r7, #8]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80023f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
 800240c:	460b      	mov	r3, r1
 800240e:	71bb      	strb	r3, [r7, #6]
 8002410:	4613      	mov	r3, r2
 8002412:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 800241c:	79bb      	ldrb	r3, [r7, #6]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8002422:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002426:	e036      	b.n	8002496 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	b29b      	uxth	r3, r3
 800242c:	461a      	mov	r2, r3
 800242e:	0052      	lsls	r2, r2, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	b29b      	uxth	r3, r3
 8002436:	3350      	adds	r3, #80	; 0x50
 8002438:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 800243e:	f107 0208 	add.w	r2, r7, #8
 8002442:	89b9      	ldrh	r1, [r7, #12]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe fef6 	bl	8001238 <DRV_CANFDSPI_ReadByte>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	e01b      	b.n	8002496 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 800245e:	7a3b      	ldrb	r3, [r7, #8]
 8002460:	b25a      	sxtb	r2, r3
 8002462:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	b25b      	sxtb	r3, r3
 800246c:	4313      	orrs	r3, r2
 800246e:	b25b      	sxtb	r3, r3
 8002470:	b2db      	uxtb	r3, r3
 8002472:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002474:	7a3a      	ldrb	r2, [r7, #8]
 8002476:	89b9      	ldrh	r1, [r7, #12]
 8002478:	79fb      	ldrb	r3, [r7, #7]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe ff1e 	bl	80012bc <DRV_CANFDSPI_WriteByte>
 8002480:	4603      	mov	r3, r0
 8002482:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d002      	beq.n	8002492 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 800248c:	f06f 0301 	mvn.w	r3, #1
 8002490:	e001      	b.n	8002496 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 80024b6:	2334      	movs	r3, #52	; 0x34
 80024b8:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 80024be:	f107 0210 	add.w	r2, r7, #16
 80024c2:	8ab9      	ldrh	r1, [r7, #20]
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe ff38 	bl	800133c <DRV_CANFDSPI_ReadWord>
 80024cc:	4603      	mov	r3, r0
 80024ce:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80024d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 80024d8:	f04f 33ff 	mov.w	r3, #4294967295
 80024dc:	e00d      	b.n	80024fa <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 80024de:	7c7a      	ldrb	r2, [r7, #17]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 80024e4:	7c3a      	ldrb	r2, [r7, #16]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 80024ea:	7cbb      	ldrb	r3, [r7, #18]
 80024ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80024f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8002514:	f107 020e 	add.w	r2, r7, #14
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	f640 610c 	movw	r1, #3596	; 0xe0c
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fe8a 	bl	8001238 <DRV_CANFDSPI_ReadByte>
 8002524:	4603      	mov	r3, r0
 8002526:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d002      	beq.n	8002536 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8002530:	f04f 33ff 	mov.w	r3, #4294967295
 8002534:	e015      	b.n	8002562 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8002536:	7bbb      	ldrb	r3, [r7, #14]
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 8002540:	7bba      	ldrb	r2, [r7, #14]
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	f640 610c 	movw	r1, #3596	; 0xe0c
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe feb7 	bl	80012bc <DRV_CANFDSPI_WriteByte>
 800254e:	4603      	mov	r3, r0
 8002550:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d002      	beq.n	8002560 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 800255a:	f06f 0301 	mvn.w	r3, #1
 800255e:	e000      	b.n	8002562 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b090      	sub	sp, #64	; 0x40
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	460a      	mov	r2, r1
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	4613      	mov	r3, r2
 8002578:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002580:	2300      	movs	r3, #0
 8002582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002584:	e008      	b.n	8002598 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8002586:	f107 0208 	add.w	r2, r7, #8
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	4413      	add	r3, r2
 800258e:	79ba      	ldrb	r2, [r7, #6]
 8002590:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002594:	3301      	adds	r3, #1
 8002596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800259a:	2b2f      	cmp	r3, #47	; 0x2f
 800259c:	d9f3      	bls.n	8002586 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 800259e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025a2:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 80025a4:	2300      	movs	r3, #0
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025a8:	e016      	b.n	80025d8 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 80025aa:	f107 0208 	add.w	r2, r7, #8
 80025ae:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 80025b0:	79f8      	ldrb	r0, [r7, #7]
 80025b2:	2330      	movs	r3, #48	; 0x30
 80025b4:	f7ff f87e 	bl	80016b4 <DRV_CANFDSPI_WriteByteArray>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 80025be:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 80025c6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ca:	e00a      	b.n	80025e2 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 80025cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80025ce:	3330      	adds	r3, #48	; 0x30
 80025d0:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 80025d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025d4:	3301      	adds	r3, #1
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025da:	2b29      	cmp	r3, #41	; 0x29
 80025dc:	d9e5      	bls.n	80025aa <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 80025de:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3740      	adds	r7, #64	; 0x40
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 80025ea:	b590      	push	{r4, r7, lr}
 80025ec:	b085      	sub	sp, #20
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	4604      	mov	r4, r0
 80025f2:	4608      	mov	r0, r1
 80025f4:	4611      	mov	r1, r2
 80025f6:	461a      	mov	r2, r3
 80025f8:	4623      	mov	r3, r4
 80025fa:	71fb      	strb	r3, [r7, #7]
 80025fc:	4603      	mov	r3, r0
 80025fe:	71bb      	strb	r3, [r7, #6]
 8002600:	460b      	mov	r3, r1
 8002602:	717b      	strb	r3, [r7, #5]
 8002604:	4613      	mov	r3, r2
 8002606:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002608:	2300      	movs	r3, #0
 800260a:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 800260c:	793b      	ldrb	r3, [r7, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d036      	beq.n	8002680 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002612:	2b02      	cmp	r3, #2
 8002614:	dc4c      	bgt.n	80026b0 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002616:	2b00      	cmp	r3, #0
 8002618:	d002      	beq.n	8002620 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 800261a:	2b01      	cmp	r3, #1
 800261c:	d018      	beq.n	8002650 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 800261e:	e047      	b.n	80026b0 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002620:	79ba      	ldrb	r2, [r7, #6]
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f000 f84c 	bl	80026c4 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 800262c:	4603      	mov	r3, r0
 800262e:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263c:	e03d      	b.n	80026ba <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 800263e:	797a      	ldrb	r2, [r7, #5]
 8002640:	79b9      	ldrb	r1, [r7, #6]
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f8c3 	bl	80027d0 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 800264a:	4603      	mov	r3, r0
 800264c:	73fb      	strb	r3, [r7, #15]
            break;
 800264e:	e032      	b.n	80026b6 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002650:	79ba      	ldrb	r2, [r7, #6]
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	4611      	mov	r1, r2
 8002656:	4618      	mov	r0, r3
 8002658:	f000 faf2 	bl	8002c40 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 800265c:	4603      	mov	r3, r0
 800265e:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800266c:	e025      	b.n	80026ba <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 800266e:	797a      	ldrb	r2, [r7, #5]
 8002670:	79b9      	ldrb	r1, [r7, #6]
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fb6f 	bl	8002d58 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 800267a:	4603      	mov	r3, r0
 800267c:	73fb      	strb	r3, [r7, #15]
            break;
 800267e:	e01a      	b.n	80026b6 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002680:	79ba      	ldrb	r2, [r7, #6]
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	4611      	mov	r1, r2
 8002686:	4618      	mov	r0, r3
 8002688:	f000 fd10 	bl	80030ac <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 800268c:	4603      	mov	r3, r0
 800268e:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002690:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269c:	e00d      	b.n	80026ba <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 800269e:	797a      	ldrb	r2, [r7, #5]
 80026a0:	79b9      	ldrb	r1, [r7, #6]
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fd8d 	bl	80031c4 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 80026aa:	4603      	mov	r3, r0
 80026ac:	73fb      	strb	r3, [r7, #15]
            break;
 80026ae:	e002      	b.n	80026b6 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 80026b0:	23ff      	movs	r3, #255	; 0xff
 80026b2:	73fb      	strb	r3, [r7, #15]
            break;
 80026b4:	bf00      	nop
    }

    return spiTransferError;
 80026b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd90      	pop	{r4, r7, pc}
	...

080026c4 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	460a      	mov	r2, r1
 80026ce:	71fb      	strb	r3, [r7, #7]
 80026d0:	4613      	mov	r3, r2
 80026d2:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80026d8:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 80026da:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80026dc:	79bb      	ldrb	r3, [r7, #6]
 80026de:	2b11      	cmp	r3, #17
 80026e0:	d862      	bhi.n	80027a8 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 80026e2:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	08002731 	.word	0x08002731
 80026ec:	08002731 	.word	0x08002731
 80026f0:	08002731 	.word	0x08002731
 80026f4:	08002731 	.word	0x08002731
 80026f8:	08002731 	.word	0x08002731
 80026fc:	08002731 	.word	0x08002731
 8002700:	08002731 	.word	0x08002731
 8002704:	08002731 	.word	0x08002731
 8002708:	0800274f 	.word	0x0800274f
 800270c:	0800274f 	.word	0x0800274f
 8002710:	0800274f 	.word	0x0800274f
 8002714:	0800274f 	.word	0x0800274f
 8002718:	0800274f 	.word	0x0800274f
 800271c:	0800274f 	.word	0x0800274f
 8002720:	0800274f 	.word	0x0800274f
 8002724:	0800276d 	.word	0x0800276d
 8002728:	0800276d 	.word	0x0800276d
 800272c:	0800278b 	.word	0x0800278b
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002734:	233e      	movs	r3, #62	; 0x3e
 8002736:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002738:	7a7b      	ldrb	r3, [r7, #9]
 800273a:	220f      	movs	r2, #15
 800273c:	f362 0306 	bfi	r3, r2, #0, #7
 8002740:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002742:	7a3b      	ldrb	r3, [r7, #8]
 8002744:	220f      	movs	r2, #15
 8002746:	f362 0306 	bfi	r3, r2, #0, #7
 800274a:	723b      	strb	r3, [r7, #8]
            break;
 800274c:	e02f      	b.n	80027ae <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002752:	237e      	movs	r3, #126	; 0x7e
 8002754:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002756:	7a7b      	ldrb	r3, [r7, #9]
 8002758:	221f      	movs	r2, #31
 800275a:	f362 0306 	bfi	r3, r2, #0, #7
 800275e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002760:	7a3b      	ldrb	r3, [r7, #8]
 8002762:	221f      	movs	r2, #31
 8002764:	f362 0306 	bfi	r3, r2, #0, #7
 8002768:	723b      	strb	r3, [r7, #8]
            break;
 800276a:	e020      	b.n	80027ae <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 800276c:	2300      	movs	r3, #0
 800276e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002770:	231e      	movs	r3, #30
 8002772:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002774:	7a7b      	ldrb	r3, [r7, #9]
 8002776:	2207      	movs	r2, #7
 8002778:	f362 0306 	bfi	r3, r2, #0, #7
 800277c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800277e:	7a3b      	ldrb	r3, [r7, #8]
 8002780:	2207      	movs	r2, #7
 8002782:	f362 0306 	bfi	r3, r2, #0, #7
 8002786:	723b      	strb	r3, [r7, #8]
            break;
 8002788:	e011      	b.n	80027ae <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 800278e:	23fe      	movs	r3, #254	; 0xfe
 8002790:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002792:	7a7b      	ldrb	r3, [r7, #9]
 8002794:	223f      	movs	r2, #63	; 0x3f
 8002796:	f362 0306 	bfi	r3, r2, #0, #7
 800279a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 800279c:	7a3b      	ldrb	r3, [r7, #8]
 800279e:	223f      	movs	r2, #63	; 0x3f
 80027a0:	f362 0306 	bfi	r3, r2, #0, #7
 80027a4:	723b      	strb	r3, [r7, #8]
            break;
 80027a6:	e002      	b.n	80027ae <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 80027a8:	f04f 33ff 	mov.w	r3, #4294967295
 80027ac:	e009      	b.n	80027c2 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2104      	movs	r1, #4
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fe fe1d 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 80027ba:	4603      	mov	r3, r0
 80027bc:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80027be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	003e0f0f 	.word	0x003e0f0f

080027d0 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
 80027da:	460b      	mov	r3, r1
 80027dc:	71bb      	strb	r3, [r7, #6]
 80027de:	4613      	mov	r3, r2
 80027e0:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80027e6:	4be2      	ldr	r3, [pc, #904]	; (8002b70 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 80027e8:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80027ee:	7abb      	ldrb	r3, [r7, #10]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f362 0301 	bfi	r3, r2, #0, #2
 80027f6:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80027fc:	79bb      	ldrb	r3, [r7, #6]
 80027fe:	2b11      	cmp	r3, #17
 8002800:	f200 81f6 	bhi.w	8002bf0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	08002855 	.word	0x08002855
 8002810:	08002893 	.word	0x08002893
 8002814:	080028d1 	.word	0x080028d1
 8002818:	0800290f 	.word	0x0800290f
 800281c:	0800294d 	.word	0x0800294d
 8002820:	0800298b 	.word	0x0800298b
 8002824:	080029c5 	.word	0x080029c5
 8002828:	080029f9 	.word	0x080029f9
 800282c:	08002a2b 	.word	0x08002a2b
 8002830:	08002a71 	.word	0x08002a71
 8002834:	08002ab7 	.word	0x08002ab7
 8002838:	08002af5 	.word	0x08002af5
 800283c:	08002b33 	.word	0x08002b33
 8002840:	08002b75 	.word	0x08002b75
 8002844:	08002bb3 	.word	0x08002bb3
 8002848:	0800290f 	.word	0x0800290f
 800284c:	080029c5 	.word	0x080029c5
 8002850:	08002a2b 	.word	0x08002a2b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	221e      	movs	r2, #30
 800285c:	f362 0304 	bfi	r3, r2, #0, #5
 8002860:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002862:	7b7b      	ldrb	r3, [r7, #13]
 8002864:	2207      	movs	r2, #7
 8002866:	f362 0303 	bfi	r3, r2, #0, #4
 800286a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800286c:	7b3b      	ldrb	r3, [r7, #12]
 800286e:	2207      	movs	r2, #7
 8002870:	f362 0303 	bfi	r3, r2, #0, #4
 8002874:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002876:	7a7b      	ldrb	r3, [r7, #9]
 8002878:	221f      	movs	r2, #31
 800287a:	f362 0306 	bfi	r3, r2, #0, #7
 800287e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002886:	b2da      	uxtb	r2, r3
 8002888:	7a3b      	ldrb	r3, [r7, #8]
 800288a:	f362 0305 	bfi	r3, r2, #0, #6
 800288e:	723b      	strb	r3, [r7, #8]
            break;
 8002890:	e1b1      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002896:	7bbb      	ldrb	r3, [r7, #14]
 8002898:	220e      	movs	r2, #14
 800289a:	f362 0304 	bfi	r3, r2, #0, #5
 800289e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80028a0:	7b7b      	ldrb	r3, [r7, #13]
 80028a2:	2203      	movs	r2, #3
 80028a4:	f362 0303 	bfi	r3, r2, #0, #4
 80028a8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80028aa:	7b3b      	ldrb	r3, [r7, #12]
 80028ac:	2203      	movs	r2, #3
 80028ae:	f362 0303 	bfi	r3, r2, #0, #4
 80028b2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80028b4:	7a7b      	ldrb	r3, [r7, #9]
 80028b6:	220f      	movs	r2, #15
 80028b8:	f362 0306 	bfi	r3, r2, #0, #7
 80028bc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	7a3b      	ldrb	r3, [r7, #8]
 80028c8:	f362 0305 	bfi	r3, r2, #0, #6
 80028cc:	723b      	strb	r3, [r7, #8]
            break;
 80028ce:	e192      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80028d4:	7bbb      	ldrb	r3, [r7, #14]
 80028d6:	2208      	movs	r2, #8
 80028d8:	f362 0304 	bfi	r3, r2, #0, #5
 80028dc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80028de:	7b7b      	ldrb	r3, [r7, #13]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f362 0303 	bfi	r3, r2, #0, #4
 80028e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80028e8:	7b3b      	ldrb	r3, [r7, #12]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f362 0303 	bfi	r3, r2, #0, #4
 80028f0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80028f2:	7a7b      	ldrb	r3, [r7, #9]
 80028f4:	2209      	movs	r2, #9
 80028f6:	f362 0306 	bfi	r3, r2, #0, #7
 80028fa:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002902:	b2da      	uxtb	r2, r3
 8002904:	7a3b      	ldrb	r3, [r7, #8]
 8002906:	f362 0305 	bfi	r3, r2, #0, #6
 800290a:	723b      	strb	r3, [r7, #8]
            break;
 800290c:	e173      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002912:	7bbb      	ldrb	r3, [r7, #14]
 8002914:	2206      	movs	r2, #6
 8002916:	f362 0304 	bfi	r3, r2, #0, #5
 800291a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800291c:	7b7b      	ldrb	r3, [r7, #13]
 800291e:	2201      	movs	r2, #1
 8002920:	f362 0303 	bfi	r3, r2, #0, #4
 8002924:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002926:	7b3b      	ldrb	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f362 0303 	bfi	r3, r2, #0, #4
 800292e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002930:	7a7b      	ldrb	r3, [r7, #9]
 8002932:	2207      	movs	r2, #7
 8002934:	f362 0306 	bfi	r3, r2, #0, #7
 8002938:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002940:	b2da      	uxtb	r2, r3
 8002942:	7a3b      	ldrb	r3, [r7, #8]
 8002944:	f362 0305 	bfi	r3, r2, #0, #6
 8002948:	723b      	strb	r3, [r7, #8]
            break;
 800294a:	e154      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002950:	7bbb      	ldrb	r3, [r7, #14]
 8002952:	2204      	movs	r2, #4
 8002954:	f362 0304 	bfi	r3, r2, #0, #5
 8002958:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800295a:	7b7b      	ldrb	r3, [r7, #13]
 800295c:	2201      	movs	r2, #1
 800295e:	f362 0303 	bfi	r3, r2, #0, #4
 8002962:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002964:	7b3b      	ldrb	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f362 0303 	bfi	r3, r2, #0, #4
 800296c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 800296e:	7a7b      	ldrb	r3, [r7, #9]
 8002970:	2205      	movs	r2, #5
 8002972:	f362 0306 	bfi	r3, r2, #0, #7
 8002976:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800297e:	b2da      	uxtb	r2, r3
 8002980:	7a3b      	ldrb	r3, [r7, #8]
 8002982:	f362 0305 	bfi	r3, r2, #0, #6
 8002986:	723b      	strb	r3, [r7, #8]
            break;
 8002988:	e135      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 800298e:	7bbb      	ldrb	r3, [r7, #14]
 8002990:	2203      	movs	r2, #3
 8002992:	f362 0304 	bfi	r3, r2, #0, #5
 8002996:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002998:	7b7b      	ldrb	r3, [r7, #13]
 800299a:	f36f 0303 	bfc	r3, #0, #4
 800299e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80029a0:	7b3b      	ldrb	r3, [r7, #12]
 80029a2:	f36f 0303 	bfc	r3, #0, #4
 80029a6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 80029a8:	7a7b      	ldrb	r3, [r7, #9]
 80029aa:	2204      	movs	r2, #4
 80029ac:	f362 0306 	bfi	r3, r2, #0, #7
 80029b0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	7a3b      	ldrb	r3, [r7, #8]
 80029bc:	f362 0305 	bfi	r3, r2, #0, #6
 80029c0:	723b      	strb	r3, [r7, #8]
            break;
 80029c2:	e118      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80029c8:	7bbb      	ldrb	r3, [r7, #14]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f362 0304 	bfi	r3, r2, #0, #5
 80029d0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80029d2:	7b7b      	ldrb	r3, [r7, #13]
 80029d4:	f36f 0303 	bfc	r3, #0, #4
 80029d8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80029da:	7b3b      	ldrb	r3, [r7, #12]
 80029dc:	f36f 0303 	bfc	r3, #0, #4
 80029e0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80029e2:	7a7b      	ldrb	r3, [r7, #9]
 80029e4:	2203      	movs	r2, #3
 80029e6:	f362 0306 	bfi	r3, r2, #0, #7
 80029ea:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 80029ec:	7a3b      	ldrb	r3, [r7, #8]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f362 0305 	bfi	r3, r2, #0, #6
 80029f4:	723b      	strb	r3, [r7, #8]
            break;
 80029f6:	e0fe      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80029fc:	7bbb      	ldrb	r3, [r7, #14]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f362 0304 	bfi	r3, r2, #0, #5
 8002a04:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002a06:	7b7b      	ldrb	r3, [r7, #13]
 8002a08:	f36f 0303 	bfc	r3, #0, #4
 8002a0c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002a0e:	7b3b      	ldrb	r3, [r7, #12]
 8002a10:	f36f 0303 	bfc	r3, #0, #4
 8002a14:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002a16:	7a7b      	ldrb	r3, [r7, #9]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	f362 0306 	bfi	r3, r2, #0, #7
 8002a1e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002a20:	7a3b      	ldrb	r3, [r7, #8]
 8002a22:	f36f 0305 	bfc	r3, #0, #6
 8002a26:	723b      	strb	r3, [r7, #8]
            break;
 8002a28:	e0e5      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002a2e:	7bbb      	ldrb	r3, [r7, #14]
 8002a30:	221e      	movs	r2, #30
 8002a32:	f362 0304 	bfi	r3, r2, #0, #5
 8002a36:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002a38:	7b7b      	ldrb	r3, [r7, #13]
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	f362 0303 	bfi	r3, r2, #0, #4
 8002a40:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002a42:	7b3b      	ldrb	r3, [r7, #12]
 8002a44:	2207      	movs	r2, #7
 8002a46:	f362 0303 	bfi	r3, r2, #0, #4
 8002a4a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002a4c:	7a7b      	ldrb	r3, [r7, #9]
 8002a4e:	221f      	movs	r2, #31
 8002a50:	f362 0306 	bfi	r3, r2, #0, #7
 8002a54:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	7a3b      	ldrb	r3, [r7, #8]
 8002a60:	f362 0305 	bfi	r3, r2, #0, #6
 8002a64:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002a66:	7abb      	ldrb	r3, [r7, #10]
 8002a68:	f36f 0301 	bfc	r3, #0, #2
 8002a6c:	72bb      	strb	r3, [r7, #10]
            break;
 8002a6e:	e0c2      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002a74:	7bbb      	ldrb	r3, [r7, #14]
 8002a76:	2211      	movs	r2, #17
 8002a78:	f362 0304 	bfi	r3, r2, #0, #5
 8002a7c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002a7e:	7b7b      	ldrb	r3, [r7, #13]
 8002a80:	2204      	movs	r2, #4
 8002a82:	f362 0303 	bfi	r3, r2, #0, #4
 8002a86:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002a88:	7b3b      	ldrb	r3, [r7, #12]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	f362 0303 	bfi	r3, r2, #0, #4
 8002a90:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002a92:	7a7b      	ldrb	r3, [r7, #9]
 8002a94:	2212      	movs	r2, #18
 8002a96:	f362 0306 	bfi	r3, r2, #0, #7
 8002a9a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	7a3b      	ldrb	r3, [r7, #8]
 8002aa6:	f362 0305 	bfi	r3, r2, #0, #6
 8002aaa:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002aac:	7abb      	ldrb	r3, [r7, #10]
 8002aae:	f36f 0301 	bfc	r3, #0, #2
 8002ab2:	72bb      	strb	r3, [r7, #10]
            break;
 8002ab4:	e09f      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	221e      	movs	r2, #30
 8002abe:	f362 0304 	bfi	r3, r2, #0, #5
 8002ac2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002ac4:	7b7b      	ldrb	r3, [r7, #13]
 8002ac6:	2207      	movs	r2, #7
 8002ac8:	f362 0303 	bfi	r3, r2, #0, #4
 8002acc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002ace:	7b3b      	ldrb	r3, [r7, #12]
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	f362 0303 	bfi	r3, r2, #0, #4
 8002ad6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002ad8:	7a7b      	ldrb	r3, [r7, #9]
 8002ada:	221f      	movs	r2, #31
 8002adc:	f362 0306 	bfi	r3, r2, #0, #7
 8002ae0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	7a3b      	ldrb	r3, [r7, #8]
 8002aec:	f362 0305 	bfi	r3, r2, #0, #6
 8002af0:	723b      	strb	r3, [r7, #8]
            break;
 8002af2:	e080      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002af8:	7bbb      	ldrb	r3, [r7, #14]
 8002afa:	2212      	movs	r2, #18
 8002afc:	f362 0304 	bfi	r3, r2, #0, #5
 8002b00:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002b02:	7b7b      	ldrb	r3, [r7, #13]
 8002b04:	2205      	movs	r2, #5
 8002b06:	f362 0303 	bfi	r3, r2, #0, #4
 8002b0a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002b0c:	7b3b      	ldrb	r3, [r7, #12]
 8002b0e:	2205      	movs	r2, #5
 8002b10:	f362 0303 	bfi	r3, r2, #0, #4
 8002b14:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002b16:	7a7b      	ldrb	r3, [r7, #9]
 8002b18:	2213      	movs	r2, #19
 8002b1a:	f362 0306 	bfi	r3, r2, #0, #7
 8002b1e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	7a3b      	ldrb	r3, [r7, #8]
 8002b2a:	f362 0305 	bfi	r3, r2, #0, #6
 8002b2e:	723b      	strb	r3, [r7, #8]
            break;
 8002b30:	e061      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002b36:	7bbb      	ldrb	r3, [r7, #14]
 8002b38:	220e      	movs	r2, #14
 8002b3a:	f362 0304 	bfi	r3, r2, #0, #5
 8002b3e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002b40:	7b7b      	ldrb	r3, [r7, #13]
 8002b42:	2203      	movs	r2, #3
 8002b44:	f362 0303 	bfi	r3, r2, #0, #4
 8002b48:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002b4a:	7b3b      	ldrb	r3, [r7, #12]
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	f362 0303 	bfi	r3, r2, #0, #4
 8002b52:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002b54:	7a7b      	ldrb	r3, [r7, #9]
 8002b56:	220f      	movs	r2, #15
 8002b58:	f362 0306 	bfi	r3, r2, #0, #7
 8002b5c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b64:	b2da      	uxtb	r2, r3
 8002b66:	7a3b      	ldrb	r3, [r7, #8]
 8002b68:	f362 0305 	bfi	r3, r2, #0, #6
 8002b6c:	723b      	strb	r3, [r7, #8]
            break;
 8002b6e:	e042      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002b70:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002b78:	7bbb      	ldrb	r3, [r7, #14]
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	f362 0304 	bfi	r3, r2, #0, #5
 8002b80:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002b82:	7b7b      	ldrb	r3, [r7, #13]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f362 0303 	bfi	r3, r2, #0, #4
 8002b8a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002b8c:	7b3b      	ldrb	r3, [r7, #12]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f362 0303 	bfi	r3, r2, #0, #4
 8002b94:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002b96:	7a7b      	ldrb	r3, [r7, #9]
 8002b98:	2209      	movs	r2, #9
 8002b9a:	f362 0306 	bfi	r3, r2, #0, #7
 8002b9e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	7a3b      	ldrb	r3, [r7, #8]
 8002baa:	f362 0305 	bfi	r3, r2, #0, #6
 8002bae:	723b      	strb	r3, [r7, #8]
            break;
 8002bb0:	e021      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002bb6:	7bbb      	ldrb	r3, [r7, #14]
 8002bb8:	2206      	movs	r2, #6
 8002bba:	f362 0304 	bfi	r3, r2, #0, #5
 8002bbe:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002bc0:	7b7b      	ldrb	r3, [r7, #13]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002bc8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002bca:	7b3b      	ldrb	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f362 0303 	bfi	r3, r2, #0, #4
 8002bd2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002bd4:	7a7b      	ldrb	r3, [r7, #9]
 8002bd6:	2207      	movs	r2, #7
 8002bd8:	f362 0306 	bfi	r3, r2, #0, #7
 8002bdc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	7a3b      	ldrb	r3, [r7, #8]
 8002be8:	f362 0305 	bfi	r3, r2, #0, #6
 8002bec:	723b      	strb	r3, [r7, #8]
            break;
 8002bee:	e002      	b.n	8002bf6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8002bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf4:	e01f      	b.n	8002c36 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fbf9 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8002c02:	4603      	mov	r3, r0
 8002c04:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 8002c0e:	f06f 0301 	mvn.w	r3, #1
 8002c12:	e010      	b.n	8002c36 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	79fb      	ldrb	r3, [r7, #7]
 8002c18:	210c      	movs	r1, #12
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe fbea 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8002c20:	4603      	mov	r3, r0
 8002c22:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8002c2c:	f06f 0302 	mvn.w	r3, #2
 8002c30:	e001      	b.n	8002c36 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8002c32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop

08002c40 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	460a      	mov	r2, r1
 8002c4a:	71fb      	strb	r3, [r7, #7]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002c54:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 8002c56:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	d862      	bhi.n	8002d24 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8002c5e:	a201      	add	r2, pc, #4	; (adr r2, 8002c64 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8002c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c64:	08002cad 	.word	0x08002cad
 8002c68:	08002cad 	.word	0x08002cad
 8002c6c:	08002d25 	.word	0x08002d25
 8002c70:	08002cad 	.word	0x08002cad
 8002c74:	08002cad 	.word	0x08002cad
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cad 	.word	0x08002cad
 8002c80:	08002cad 	.word	0x08002cad
 8002c84:	08002ccb 	.word	0x08002ccb
 8002c88:	08002ccb 	.word	0x08002ccb
 8002c8c:	08002ccb 	.word	0x08002ccb
 8002c90:	08002ccb 	.word	0x08002ccb
 8002c94:	08002ccb 	.word	0x08002ccb
 8002c98:	08002ccb 	.word	0x08002ccb
 8002c9c:	08002ccb 	.word	0x08002ccb
 8002ca0:	08002ce9 	.word	0x08002ce9
 8002ca4:	08002ce9 	.word	0x08002ce9
 8002ca8:	08002d07 	.word	0x08002d07
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002cb0:	231e      	movs	r3, #30
 8002cb2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002cb4:	7a7b      	ldrb	r3, [r7, #9]
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	f362 0306 	bfi	r3, r2, #0, #7
 8002cbc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002cbe:	7a3b      	ldrb	r3, [r7, #8]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	f362 0306 	bfi	r3, r2, #0, #7
 8002cc6:	723b      	strb	r3, [r7, #8]
            break;
 8002cc8:	e02f      	b.n	8002d2a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002cce:	233e      	movs	r3, #62	; 0x3e
 8002cd0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002cd2:	7a7b      	ldrb	r3, [r7, #9]
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	f362 0306 	bfi	r3, r2, #0, #7
 8002cda:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002cdc:	7a3b      	ldrb	r3, [r7, #8]
 8002cde:	220f      	movs	r2, #15
 8002ce0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ce4:	723b      	strb	r3, [r7, #8]
            break;
 8002ce6:	e020      	b.n	8002d2a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8002cec:	230e      	movs	r3, #14
 8002cee:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002cf0:	7a7b      	ldrb	r3, [r7, #9]
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	f362 0306 	bfi	r3, r2, #0, #7
 8002cf8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8002cfa:	7a3b      	ldrb	r3, [r7, #8]
 8002cfc:	2203      	movs	r2, #3
 8002cfe:	f362 0306 	bfi	r3, r2, #0, #7
 8002d02:	723b      	strb	r3, [r7, #8]
            break;
 8002d04:	e011      	b.n	8002d2a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002d0a:	237e      	movs	r3, #126	; 0x7e
 8002d0c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002d0e:	7a7b      	ldrb	r3, [r7, #9]
 8002d10:	221f      	movs	r2, #31
 8002d12:	f362 0306 	bfi	r3, r2, #0, #7
 8002d16:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002d18:	7a3b      	ldrb	r3, [r7, #8]
 8002d1a:	221f      	movs	r2, #31
 8002d1c:	f362 0306 	bfi	r3, r2, #0, #7
 8002d20:	723b      	strb	r3, [r7, #8]
            break;
 8002d22:	e002      	b.n	8002d2a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
 8002d28:	e010      	b.n	8002d4c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	2104      	movs	r1, #4
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fb5f 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 8002d42:	f06f 0301 	mvn.w	r3, #1
 8002d46:	e001      	b.n	8002d4c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 8002d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	003e0f0f 	.word	0x003e0f0f

08002d58 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
 8002d62:	460b      	mov	r3, r1
 8002d64:	71bb      	strb	r3, [r7, #6]
 8002d66:	4613      	mov	r3, r2
 8002d68:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002d6e:	4bce      	ldr	r3, [pc, #824]	; (80030a8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8002d70:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002d76:	7abb      	ldrb	r3, [r7, #10]
 8002d78:	2202      	movs	r2, #2
 8002d7a:	f362 0301 	bfi	r3, r2, #0, #2
 8002d7e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002d84:	79bb      	ldrb	r3, [r7, #6]
 8002d86:	2b11      	cmp	r3, #17
 8002d88:	f200 8166 	bhi.w	8003058 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8002d8c:	a201      	add	r2, pc, #4	; (adr r2, 8002d94 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002ddd 	.word	0x08002ddd
 8002d98:	08002e1b 	.word	0x08002e1b
 8002d9c:	08003059 	.word	0x08003059
 8002da0:	08002e59 	.word	0x08002e59
 8002da4:	08002e93 	.word	0x08002e93
 8002da8:	08002ecd 	.word	0x08002ecd
 8002dac:	08002ecd 	.word	0x08002ecd
 8002db0:	08002ecd 	.word	0x08002ecd
 8002db4:	08002ed3 	.word	0x08002ed3
 8002db8:	08002f19 	.word	0x08002f19
 8002dbc:	08002f5f 	.word	0x08002f5f
 8002dc0:	08002f9d 	.word	0x08002f9d
 8002dc4:	08002fdb 	.word	0x08002fdb
 8002dc8:	08003019 	.word	0x08003019
 8002dcc:	0800301f 	.word	0x0800301f
 8002dd0:	08002e59 	.word	0x08002e59
 8002dd4:	08002ecd 	.word	0x08002ecd
 8002dd8:	08002ed3 	.word	0x08002ed3
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002de0:	7bbb      	ldrb	r3, [r7, #14]
 8002de2:	220e      	movs	r2, #14
 8002de4:	f362 0304 	bfi	r3, r2, #0, #5
 8002de8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002dea:	7b7b      	ldrb	r3, [r7, #13]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f362 0303 	bfi	r3, r2, #0, #4
 8002df2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002df4:	7b3b      	ldrb	r3, [r7, #12]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f362 0303 	bfi	r3, r2, #0, #4
 8002dfc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002dfe:	7a7b      	ldrb	r3, [r7, #9]
 8002e00:	220f      	movs	r2, #15
 8002e02:	f362 0306 	bfi	r3, r2, #0, #7
 8002e06:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	7a3b      	ldrb	r3, [r7, #8]
 8002e12:	f362 0305 	bfi	r3, r2, #0, #6
 8002e16:	723b      	strb	r3, [r7, #8]
            break;
 8002e18:	e121      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002e1e:	7bbb      	ldrb	r3, [r7, #14]
 8002e20:	2206      	movs	r2, #6
 8002e22:	f362 0304 	bfi	r3, r2, #0, #5
 8002e26:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002e28:	7b7b      	ldrb	r3, [r7, #13]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f362 0303 	bfi	r3, r2, #0, #4
 8002e30:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002e32:	7b3b      	ldrb	r3, [r7, #12]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f362 0303 	bfi	r3, r2, #0, #4
 8002e3a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002e3c:	7a7b      	ldrb	r3, [r7, #9]
 8002e3e:	2207      	movs	r2, #7
 8002e40:	f362 0306 	bfi	r3, r2, #0, #7
 8002e44:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	7a3b      	ldrb	r3, [r7, #8]
 8002e50:	f362 0305 	bfi	r3, r2, #0, #6
 8002e54:	723b      	strb	r3, [r7, #8]
            break;
 8002e56:	e102      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002e5c:	7bbb      	ldrb	r3, [r7, #14]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f362 0304 	bfi	r3, r2, #0, #5
 8002e64:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e66:	7b7b      	ldrb	r3, [r7, #13]
 8002e68:	f36f 0303 	bfc	r3, #0, #4
 8002e6c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e6e:	7b3b      	ldrb	r3, [r7, #12]
 8002e70:	f36f 0303 	bfc	r3, #0, #4
 8002e74:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e76:	7a7b      	ldrb	r3, [r7, #9]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	7a3b      	ldrb	r3, [r7, #8]
 8002e8a:	f362 0305 	bfi	r3, r2, #0, #6
 8002e8e:	723b      	strb	r3, [r7, #8]
            break;
 8002e90:	e0e5      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002e96:	7bbb      	ldrb	r3, [r7, #14]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f362 0304 	bfi	r3, r2, #0, #5
 8002e9e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002ea0:	7b7b      	ldrb	r3, [r7, #13]
 8002ea2:	f36f 0303 	bfc	r3, #0, #4
 8002ea6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002ea8:	7b3b      	ldrb	r3, [r7, #12]
 8002eaa:	f36f 0303 	bfc	r3, #0, #4
 8002eae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002eb0:	7a7b      	ldrb	r3, [r7, #9]
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	f362 0306 	bfi	r3, r2, #0, #7
 8002eb8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	7a3b      	ldrb	r3, [r7, #8]
 8002ec4:	f362 0305 	bfi	r3, r2, #0, #6
 8002ec8:	723b      	strb	r3, [r7, #8]
            break;
 8002eca:	e0c8      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8002ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed0:	e0e5      	b.n	800309e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002ed6:	7bbb      	ldrb	r3, [r7, #14]
 8002ed8:	221e      	movs	r2, #30
 8002eda:	f362 0304 	bfi	r3, r2, #0, #5
 8002ede:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002ee0:	7b7b      	ldrb	r3, [r7, #13]
 8002ee2:	2207      	movs	r2, #7
 8002ee4:	f362 0303 	bfi	r3, r2, #0, #4
 8002ee8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002eea:	7b3b      	ldrb	r3, [r7, #12]
 8002eec:	2207      	movs	r2, #7
 8002eee:	f362 0303 	bfi	r3, r2, #0, #4
 8002ef2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002ef4:	7a7b      	ldrb	r3, [r7, #9]
 8002ef6:	221f      	movs	r2, #31
 8002ef8:	f362 0306 	bfi	r3, r2, #0, #7
 8002efc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	7a3b      	ldrb	r3, [r7, #8]
 8002f08:	f362 0305 	bfi	r3, r2, #0, #6
 8002f0c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f0e:	7abb      	ldrb	r3, [r7, #10]
 8002f10:	f36f 0301 	bfc	r3, #0, #2
 8002f14:	72bb      	strb	r3, [r7, #10]
            break;
 8002f16:	e0a2      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002f1c:	7bbb      	ldrb	r3, [r7, #14]
 8002f1e:	2211      	movs	r2, #17
 8002f20:	f362 0304 	bfi	r3, r2, #0, #5
 8002f24:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002f26:	7b7b      	ldrb	r3, [r7, #13]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	f362 0303 	bfi	r3, r2, #0, #4
 8002f2e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002f30:	7b3b      	ldrb	r3, [r7, #12]
 8002f32:	2204      	movs	r2, #4
 8002f34:	f362 0303 	bfi	r3, r2, #0, #4
 8002f38:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002f3a:	7a7b      	ldrb	r3, [r7, #9]
 8002f3c:	2212      	movs	r2, #18
 8002f3e:	f362 0306 	bfi	r3, r2, #0, #7
 8002f42:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	7a3b      	ldrb	r3, [r7, #8]
 8002f4e:	f362 0305 	bfi	r3, r2, #0, #6
 8002f52:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f54:	7abb      	ldrb	r3, [r7, #10]
 8002f56:	f36f 0301 	bfc	r3, #0, #2
 8002f5a:	72bb      	strb	r3, [r7, #10]
            break;
 8002f5c:	e07f      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f62:	7bbb      	ldrb	r3, [r7, #14]
 8002f64:	220e      	movs	r2, #14
 8002f66:	f362 0304 	bfi	r3, r2, #0, #5
 8002f6a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f6c:	7b7b      	ldrb	r3, [r7, #13]
 8002f6e:	2203      	movs	r2, #3
 8002f70:	f362 0303 	bfi	r3, r2, #0, #4
 8002f74:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002f76:	7b3b      	ldrb	r3, [r7, #12]
 8002f78:	2203      	movs	r2, #3
 8002f7a:	f362 0303 	bfi	r3, r2, #0, #4
 8002f7e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002f80:	7a7b      	ldrb	r3, [r7, #9]
 8002f82:	220f      	movs	r2, #15
 8002f84:	f362 0306 	bfi	r3, r2, #0, #7
 8002f88:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	7a3b      	ldrb	r3, [r7, #8]
 8002f94:	f362 0305 	bfi	r3, r2, #0, #6
 8002f98:	723b      	strb	r3, [r7, #8]
            break;
 8002f9a:	e060      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002fa0:	7bbb      	ldrb	r3, [r7, #14]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	f362 0304 	bfi	r3, r2, #0, #5
 8002fa8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002faa:	7b7b      	ldrb	r3, [r7, #13]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f362 0303 	bfi	r3, r2, #0, #4
 8002fb2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002fb4:	7b3b      	ldrb	r3, [r7, #12]
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	f362 0303 	bfi	r3, r2, #0, #4
 8002fbc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002fbe:	7a7b      	ldrb	r3, [r7, #9]
 8002fc0:	2209      	movs	r2, #9
 8002fc2:	f362 0306 	bfi	r3, r2, #0, #7
 8002fc6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	7a3b      	ldrb	r3, [r7, #8]
 8002fd2:	f362 0305 	bfi	r3, r2, #0, #6
 8002fd6:	723b      	strb	r3, [r7, #8]
            break;
 8002fd8:	e041      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002fde:	7bbb      	ldrb	r3, [r7, #14]
 8002fe0:	2206      	movs	r2, #6
 8002fe2:	f362 0304 	bfi	r3, r2, #0, #5
 8002fe6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002fe8:	7b7b      	ldrb	r3, [r7, #13]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f362 0303 	bfi	r3, r2, #0, #4
 8002ff0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002ff2:	7b3b      	ldrb	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f362 0303 	bfi	r3, r2, #0, #4
 8002ffa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ffc:	7a7b      	ldrb	r3, [r7, #9]
 8002ffe:	2207      	movs	r2, #7
 8003000:	f362 0306 	bfi	r3, r2, #0, #7
 8003004:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	b2da      	uxtb	r2, r3
 800300e:	7a3b      	ldrb	r3, [r7, #8]
 8003010:	f362 0305 	bfi	r3, r2, #0, #6
 8003014:	723b      	strb	r3, [r7, #8]
            break;
 8003016:	e022      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
 800301c:	e03f      	b.n	800309e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003022:	7bbb      	ldrb	r3, [r7, #14]
 8003024:	2202      	movs	r2, #2
 8003026:	f362 0304 	bfi	r3, r2, #0, #5
 800302a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800302c:	7b7b      	ldrb	r3, [r7, #13]
 800302e:	f36f 0303 	bfc	r3, #0, #4
 8003032:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003034:	7b3b      	ldrb	r3, [r7, #12]
 8003036:	f36f 0303 	bfc	r3, #0, #4
 800303a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800303c:	7a7b      	ldrb	r3, [r7, #9]
 800303e:	2203      	movs	r2, #3
 8003040:	f362 0306 	bfi	r3, r2, #0, #7
 8003044:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304c:	b2da      	uxtb	r2, r3
 800304e:	7a3b      	ldrb	r3, [r7, #8]
 8003050:	f362 0305 	bfi	r3, r2, #0, #6
 8003054:	723b      	strb	r3, [r7, #8]
            break;
 8003056:	e002      	b.n	800305e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	e01f      	b.n	800309e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2108      	movs	r1, #8
 8003064:	4618      	mov	r0, r3
 8003066:	f7fe f9c5 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 800306a:	4603      	mov	r3, r0
 800306c:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800306e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8003076:	f06f 0301 	mvn.w	r3, #1
 800307a:	e010      	b.n	800309e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	210c      	movs	r1, #12
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe f9b6 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800308c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003094:	f06f 0302 	mvn.w	r3, #2
 8003098:	e001      	b.n	800309e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800309a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	000e0303 	.word	0x000e0303

080030ac <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	460a      	mov	r2, r1
 80030b6:	71fb      	strb	r3, [r7, #7]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80030c0:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 80030c2:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80030c4:	79bb      	ldrb	r3, [r7, #6]
 80030c6:	2b11      	cmp	r3, #17
 80030c8:	d862      	bhi.n	8003190 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 80030ca:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 80030cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d0:	08003119 	.word	0x08003119
 80030d4:	08003119 	.word	0x08003119
 80030d8:	08003191 	.word	0x08003191
 80030dc:	08003119 	.word	0x08003119
 80030e0:	08003119 	.word	0x08003119
 80030e4:	08003119 	.word	0x08003119
 80030e8:	08003119 	.word	0x08003119
 80030ec:	08003119 	.word	0x08003119
 80030f0:	08003137 	.word	0x08003137
 80030f4:	08003137 	.word	0x08003137
 80030f8:	08003137 	.word	0x08003137
 80030fc:	08003137 	.word	0x08003137
 8003100:	08003137 	.word	0x08003137
 8003104:	08003137 	.word	0x08003137
 8003108:	08003137 	.word	0x08003137
 800310c:	08003155 	.word	0x08003155
 8003110:	08003155 	.word	0x08003155
 8003114:	08003173 	.word	0x08003173
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003118:	2300      	movs	r3, #0
 800311a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 800311c:	230e      	movs	r3, #14
 800311e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8003120:	7a7b      	ldrb	r3, [r7, #9]
 8003122:	2203      	movs	r2, #3
 8003124:	f362 0306 	bfi	r3, r2, #0, #7
 8003128:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800312a:	7a3b      	ldrb	r3, [r7, #8]
 800312c:	2203      	movs	r2, #3
 800312e:	f362 0306 	bfi	r3, r2, #0, #7
 8003132:	723b      	strb	r3, [r7, #8]
            break;
 8003134:	e02f      	b.n	8003196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 800313a:	231e      	movs	r3, #30
 800313c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 800313e:	7a7b      	ldrb	r3, [r7, #9]
 8003140:	2207      	movs	r2, #7
 8003142:	f362 0306 	bfi	r3, r2, #0, #7
 8003146:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003148:	7a3b      	ldrb	r3, [r7, #8]
 800314a:	2207      	movs	r2, #7
 800314c:	f362 0306 	bfi	r3, r2, #0, #7
 8003150:	723b      	strb	r3, [r7, #8]
            break;
 8003152:	e020      	b.n	8003196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8003158:	2307      	movs	r3, #7
 800315a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 800315c:	7a7b      	ldrb	r3, [r7, #9]
 800315e:	2202      	movs	r2, #2
 8003160:	f362 0306 	bfi	r3, r2, #0, #7
 8003164:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8003166:	7a3b      	ldrb	r3, [r7, #8]
 8003168:	2202      	movs	r2, #2
 800316a:	f362 0306 	bfi	r3, r2, #0, #7
 800316e:	723b      	strb	r3, [r7, #8]
            break;
 8003170:	e011      	b.n	8003196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003176:	233e      	movs	r3, #62	; 0x3e
 8003178:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800317a:	7a7b      	ldrb	r3, [r7, #9]
 800317c:	220f      	movs	r2, #15
 800317e:	f362 0306 	bfi	r3, r2, #0, #7
 8003182:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003184:	7a3b      	ldrb	r3, [r7, #8]
 8003186:	220f      	movs	r2, #15
 8003188:	f362 0306 	bfi	r3, r2, #0, #7
 800318c:	723b      	strb	r3, [r7, #8]
            break;
 800318e:	e002      	b.n	8003196 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003190:	f04f 33ff 	mov.w	r3, #4294967295
 8003194:	e010      	b.n	80031b8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2104      	movs	r1, #4
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe f929 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 80031a2:	4603      	mov	r3, r0
 80031a4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80031a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 80031ae:	f06f 0301 	mvn.w	r3, #1
 80031b2:	e001      	b.n	80031b8 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 80031b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	003e0f0f 	.word	0x003e0f0f

080031c4 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
 80031ce:	460b      	mov	r3, r1
 80031d0:	71bb      	strb	r3, [r7, #6]
 80031d2:	4613      	mov	r3, r2
 80031d4:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80031da:	4b92      	ldr	r3, [pc, #584]	; (8003424 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 80031dc:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80031e2:	7abb      	ldrb	r3, [r7, #10]
 80031e4:	2202      	movs	r2, #2
 80031e6:	f362 0301 	bfi	r3, r2, #0, #2
 80031ea:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80031f0:	79bb      	ldrb	r3, [r7, #6]
 80031f2:	2b11      	cmp	r3, #17
 80031f4:	f200 80ef 	bhi.w	80033d6 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80031f8:	a201      	add	r2, pc, #4	; (adr r2, 8003200 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80031fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fe:	bf00      	nop
 8003200:	08003249 	.word	0x08003249
 8003204:	08003287 	.word	0x08003287
 8003208:	080033d7 	.word	0x080033d7
 800320c:	080032c1 	.word	0x080032c1
 8003210:	080032c1 	.word	0x080032c1
 8003214:	080032c1 	.word	0x080032c1
 8003218:	080032c1 	.word	0x080032c1
 800321c:	080032c1 	.word	0x080032c1
 8003220:	080032c7 	.word	0x080032c7
 8003224:	0800330d 	.word	0x0800330d
 8003228:	08003353 	.word	0x08003353
 800322c:	08003391 	.word	0x08003391
 8003230:	08003397 	.word	0x08003397
 8003234:	080033d1 	.word	0x080033d1
 8003238:	080033d1 	.word	0x080033d1
 800323c:	080032c1 	.word	0x080032c1
 8003240:	080032c1 	.word	0x080032c1
 8003244:	080032c7 	.word	0x080032c7
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800324c:	7bbb      	ldrb	r3, [r7, #14]
 800324e:	2206      	movs	r2, #6
 8003250:	f362 0304 	bfi	r3, r2, #0, #5
 8003254:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003256:	7b7b      	ldrb	r3, [r7, #13]
 8003258:	2201      	movs	r2, #1
 800325a:	f362 0303 	bfi	r3, r2, #0, #4
 800325e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003260:	7b3b      	ldrb	r3, [r7, #12]
 8003262:	2201      	movs	r2, #1
 8003264:	f362 0303 	bfi	r3, r2, #0, #4
 8003268:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800326a:	7a7b      	ldrb	r3, [r7, #9]
 800326c:	2207      	movs	r2, #7
 800326e:	f362 0306 	bfi	r3, r2, #0, #7
 8003272:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800327a:	b2da      	uxtb	r2, r3
 800327c:	7a3b      	ldrb	r3, [r7, #8]
 800327e:	f362 0305 	bfi	r3, r2, #0, #6
 8003282:	723b      	strb	r3, [r7, #8]
            break;
 8003284:	e0aa      	b.n	80033dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800328a:	7bbb      	ldrb	r3, [r7, #14]
 800328c:	2202      	movs	r2, #2
 800328e:	f362 0304 	bfi	r3, r2, #0, #5
 8003292:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003294:	7b7b      	ldrb	r3, [r7, #13]
 8003296:	f36f 0303 	bfc	r3, #0, #4
 800329a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800329c:	7b3b      	ldrb	r3, [r7, #12]
 800329e:	f36f 0303 	bfc	r3, #0, #4
 80032a2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80032a4:	7a7b      	ldrb	r3, [r7, #9]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f362 0306 	bfi	r3, r2, #0, #7
 80032ac:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	7a3b      	ldrb	r3, [r7, #8]
 80032b8:	f362 0305 	bfi	r3, r2, #0, #6
 80032bc:	723b      	strb	r3, [r7, #8]
            break;
 80032be:	e08d      	b.n	80033dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295
 80032c4:	e0aa      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80032ca:	7bbb      	ldrb	r3, [r7, #14]
 80032cc:	220e      	movs	r2, #14
 80032ce:	f362 0304 	bfi	r3, r2, #0, #5
 80032d2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80032d4:	7b7b      	ldrb	r3, [r7, #13]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f362 0303 	bfi	r3, r2, #0, #4
 80032dc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80032de:	7b3b      	ldrb	r3, [r7, #12]
 80032e0:	2203      	movs	r2, #3
 80032e2:	f362 0303 	bfi	r3, r2, #0, #4
 80032e6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80032e8:	7a7b      	ldrb	r3, [r7, #9]
 80032ea:	220f      	movs	r2, #15
 80032ec:	f362 0306 	bfi	r3, r2, #0, #7
 80032f0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	7a3b      	ldrb	r3, [r7, #8]
 80032fc:	f362 0305 	bfi	r3, r2, #0, #6
 8003300:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003302:	7abb      	ldrb	r3, [r7, #10]
 8003304:	f36f 0301 	bfc	r3, #0, #2
 8003308:	72bb      	strb	r3, [r7, #10]
            break;
 800330a:	e067      	b.n	80033dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8003310:	7bbb      	ldrb	r3, [r7, #14]
 8003312:	2207      	movs	r2, #7
 8003314:	f362 0304 	bfi	r3, r2, #0, #5
 8003318:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800331a:	7b7b      	ldrb	r3, [r7, #13]
 800331c:	2202      	movs	r2, #2
 800331e:	f362 0303 	bfi	r3, r2, #0, #4
 8003322:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003324:	7b3b      	ldrb	r3, [r7, #12]
 8003326:	2202      	movs	r2, #2
 8003328:	f362 0303 	bfi	r3, r2, #0, #4
 800332c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 800332e:	7a7b      	ldrb	r3, [r7, #9]
 8003330:	2208      	movs	r2, #8
 8003332:	f362 0306 	bfi	r3, r2, #0, #7
 8003336:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800333e:	b2da      	uxtb	r2, r3
 8003340:	7a3b      	ldrb	r3, [r7, #8]
 8003342:	f362 0305 	bfi	r3, r2, #0, #6
 8003346:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003348:	7abb      	ldrb	r3, [r7, #10]
 800334a:	f36f 0301 	bfc	r3, #0, #2
 800334e:	72bb      	strb	r3, [r7, #10]
            break;
 8003350:	e044      	b.n	80033dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003356:	7bbb      	ldrb	r3, [r7, #14]
 8003358:	2206      	movs	r2, #6
 800335a:	f362 0304 	bfi	r3, r2, #0, #5
 800335e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003360:	7b7b      	ldrb	r3, [r7, #13]
 8003362:	2201      	movs	r2, #1
 8003364:	f362 0303 	bfi	r3, r2, #0, #4
 8003368:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800336a:	7b3b      	ldrb	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f362 0303 	bfi	r3, r2, #0, #4
 8003372:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003374:	7a7b      	ldrb	r3, [r7, #9]
 8003376:	2207      	movs	r2, #7
 8003378:	f362 0306 	bfi	r3, r2, #0, #7
 800337c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003384:	b2da      	uxtb	r2, r3
 8003386:	7a3b      	ldrb	r3, [r7, #8]
 8003388:	f362 0305 	bfi	r3, r2, #0, #6
 800338c:	723b      	strb	r3, [r7, #8]
            break;
 800338e:	e025      	b.n	80033dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003390:	f04f 33ff 	mov.w	r3, #4294967295
 8003394:	e042      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003396:	2300      	movs	r3, #0
 8003398:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800339a:	7bbb      	ldrb	r3, [r7, #14]
 800339c:	2202      	movs	r2, #2
 800339e:	f362 0304 	bfi	r3, r2, #0, #5
 80033a2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80033a4:	7b7b      	ldrb	r3, [r7, #13]
 80033a6:	f36f 0303 	bfc	r3, #0, #4
 80033aa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80033ac:	7b3b      	ldrb	r3, [r7, #12]
 80033ae:	f36f 0303 	bfc	r3, #0, #4
 80033b2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80033b4:	7a7b      	ldrb	r3, [r7, #9]
 80033b6:	2203      	movs	r2, #3
 80033b8:	f362 0306 	bfi	r3, r2, #0, #7
 80033bc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c4:	b2da      	uxtb	r2, r3
 80033c6:	7a3b      	ldrb	r3, [r7, #8]
 80033c8:	f362 0305 	bfi	r3, r2, #0, #6
 80033cc:	723b      	strb	r3, [r7, #8]
            break;
 80033ce:	e005      	b.n	80033dc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80033d0:	f04f 33ff 	mov.w	r3, #4294967295
 80033d4:	e022      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 80033d6:	f04f 33ff 	mov.w	r3, #4294967295
 80033da:	e01f      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	2108      	movs	r1, #8
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fe f806 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 80033e8:	4603      	mov	r3, r0
 80033ea:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80033ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 80033f4:	f06f 0301 	mvn.w	r3, #1
 80033f8:	e010      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	79fb      	ldrb	r3, [r7, #7]
 80033fe:	210c      	movs	r1, #12
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fff7 	bl	80013f4 <DRV_CANFDSPI_WriteWord>
 8003406:	4603      	mov	r3, r0
 8003408:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800340a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8003412:	f06f 0302 	mvn.w	r3, #2
 8003416:	e001      	b.n	800341c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8003418:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	000e0303 	.word	0x000e0303

08003428 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
 8003432:	460b      	mov	r3, r1
 8003434:	71bb      	strb	r3, [r7, #6]
 8003436:	4613      	mov	r3, r2
 8003438:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800343e:	2300      	movs	r3, #0
 8003440:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8003442:	f640 6307 	movw	r3, #3591	; 0xe07
 8003446:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	1cda      	adds	r2, r3, #3
 8003452:	89b9      	ldrh	r1, [r7, #12]
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fd feee 	bl	8001238 <DRV_CANFDSPI_ReadByte>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8003468:	f04f 33ff 	mov.w	r3, #4294967295
 800346c:	e020      	b.n	80034b0 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 800346e:	79bb      	ldrb	r3, [r7, #6]
 8003470:	f003 0301 	and.w	r3, r3, #1
 8003474:	b2da      	uxtb	r2, r3
 8003476:	7afb      	ldrb	r3, [r7, #11]
 8003478:	f362 0300 	bfi	r3, r2, #0, #1
 800347c:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 800347e:	797b      	ldrb	r3, [r7, #5]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	f362 0341 	bfi	r3, r2, #1, #1
 800348c:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 800348e:	7afa      	ldrb	r2, [r7, #11]
 8003490:	89b9      	ldrh	r1, [r7, #12]
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	4618      	mov	r0, r3
 8003496:	f7fd ff11 	bl	80012bc <DRV_CANFDSPI_WriteByte>
 800349a:	4603      	mov	r3, r0
 800349c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800349e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d002      	beq.n	80034ac <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 80034a6:	f06f 0301 	mvn.w	r3, #1
 80034aa:	e001      	b.n	80034b0 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 80034ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d802      	bhi.n	80034d2 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e02a      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	3b09      	subs	r3, #9
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d825      	bhi.n	8003526 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 80034da:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 80034dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e0:	080034fd 	.word	0x080034fd
 80034e4:	08003503 	.word	0x08003503
 80034e8:	08003509 	.word	0x08003509
 80034ec:	0800350f 	.word	0x0800350f
 80034f0:	08003515 	.word	0x08003515
 80034f4:	0800351b 	.word	0x0800351b
 80034f8:	08003521 	.word	0x08003521
            case CAN_DLC_12:
                dataBytesInObject = 12;
 80034fc:	230c      	movs	r3, #12
 80034fe:	60fb      	str	r3, [r7, #12]
                break;
 8003500:	e012      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003502:	2310      	movs	r3, #16
 8003504:	60fb      	str	r3, [r7, #12]
                break;
 8003506:	e00f      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8003508:	2314      	movs	r3, #20
 800350a:	60fb      	str	r3, [r7, #12]
                break;
 800350c:	e00c      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800350e:	2318      	movs	r3, #24
 8003510:	60fb      	str	r3, [r7, #12]
                break;
 8003512:	e009      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8003514:	2320      	movs	r3, #32
 8003516:	60fb      	str	r3, [r7, #12]
                break;
 8003518:	e006      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 800351a:	2330      	movs	r3, #48	; 0x30
 800351c:	60fb      	str	r3, [r7, #12]
                break;
 800351e:	e003      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8003520:	2340      	movs	r3, #64	; 0x40
 8003522:	60fb      	str	r3, [r7, #12]
                break;
 8003524:	e000      	b.n	8003528 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8003526:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8003528:	68fb      	ldr	r3, [r7, #12]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop

08003538 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f023 0218 	bic.w	r2, r3, #24
 800354c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4313      	orrs	r3, r2
 800357a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800357c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4013      	ands	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003588:	68fb      	ldr	r3, [r7, #12]
}
 800358a:	bf00      	nop
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                              P A C K   E M U L A T O R
***************************************************************************************************************/
void serialOut(char* message){
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	getTime();
 80035a0:	f000 f822 	bl	80035e8 <getTime>
  sprintf(txBuffer,"%s %s\r\n",time, message);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <serialOut+0x40>)
 80035a8:	490c      	ldr	r1, [pc, #48]	; (80035dc <serialOut+0x44>)
 80035aa:	480d      	ldr	r0, [pc, #52]	; (80035e0 <serialOut+0x48>)
 80035ac:	f006 f886 	bl	80096bc <siprintf>

	if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 80035b0:	480b      	ldr	r0, [pc, #44]	; (80035e0 <serialOut+0x48>)
 80035b2:	f7fc fde5 	bl	8000180 <strlen>
 80035b6:	4603      	mov	r3, r0
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <serialOut+0x48>)
 80035c0:	4808      	ldr	r0, [pc, #32]	; (80035e4 <serialOut+0x4c>)
 80035c2:	f005 f9ef 	bl	80089a4 <HAL_UART_Transmit>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <serialOut+0x38>
		Error_Handler();
 80035cc:	f000 fc00 	bl	8003dd0 <Error_Handler>
	}
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	2000cd1c 	.word	0x2000cd1c
 80035dc:	0800afbc 	.word	0x0800afbc
 80035e0:	2000cd28 	.word	0x2000cd28
 80035e4:	2000c994 	.word	0x2000c994

080035e8 <getTime>:

/***************************************************************************************************************
*     T I M E S T A M P                                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void getTime(void){
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 80035ee:	f107 0308 	add.w	r3, r7, #8
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	605a      	str	r2, [r3, #4]
 80035f8:	609a      	str	r2, [r3, #8]
 80035fa:	60da      	str	r2, [r3, #12]
 80035fc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 8003602:	f107 0308 	add.w	r3, r7, #8
 8003606:	2201      	movs	r2, #1
 8003608:	4619      	mov	r1, r3
 800360a:	480e      	ldr	r0, [pc, #56]	; (8003644 <getTime+0x5c>)
 800360c:	f003 fb3e 	bl	8006c8c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	2201      	movs	r2, #1
 8003614:	4619      	mov	r1, r3
 8003616:	480b      	ldr	r0, [pc, #44]	; (8003644 <getTime+0x5c>)
 8003618:	f003 fc42 	bl	8006ea0 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 800361c:	7abb      	ldrb	r3, [r7, #10]
 800361e:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 8003620:	7a7b      	ldrb	r3, [r7, #9]
 8003622:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 8003624:	7a3b      	ldrb	r3, [r7, #8]
 8003626:	777b      	strb	r3, [r7, #29]
  sprintf(time,"%02x:%02x:%02x",hours,minutes,seconds);
 8003628:	7f7a      	ldrb	r2, [r7, #29]
 800362a:	7fb9      	ldrb	r1, [r7, #30]
 800362c:	7ffb      	ldrb	r3, [r7, #31]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	460b      	mov	r3, r1
 8003632:	4905      	ldr	r1, [pc, #20]	; (8003648 <getTime+0x60>)
 8003634:	4805      	ldr	r0, [pc, #20]	; (800364c <getTime+0x64>)
 8003636:	f006 f841 	bl	80096bc <siprintf>
}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	2000c85c 	.word	0x2000c85c
 8003648:	0800afc4 	.word	0x0800afc4
 800364c:	2000cd1c 	.word	0x2000cd1c

08003650 <HAL_TIM_PeriodElapsedCallback>:


/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                    P A C K   E M U L A T O R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	4b26      	ldr	r3, [pc, #152]	; (80036f8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d144      	bne.n	80036ee <HAL_TIM_PeriodElapsedCallback+0x9e>
    // last contact timer overflow
    etTimerOverflows++;
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3301      	adds	r3, #1
 800366a:	4a24      	ldr	r2, [pc, #144]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800366c:	6013      	str	r3, [r2, #0]
    decSec++;
 800366e:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	b2da      	uxtb	r2, r3
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003678:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 800367a:	4b21      	ldr	r3, [pc, #132]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b0a      	cmp	r3, #10
 8003680:	d12b      	bne.n	80036da <HAL_TIM_PeriodElapsedCallback+0x8a>
      decSec = 0;
 8003682:	4b1f      	ldr	r3, [pc, #124]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED_RED_GPIO_Port,  LED_RED_Pin); // This should happen every 1 sec = 10 overflows.
 8003688:	2102      	movs	r1, #2
 800368a:	481e      	ldr	r0, [pc, #120]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800368c:	f001 fa44 	bl	8004b18 <HAL_GPIO_TogglePin>
      if(activeConnection){
 8003690:	4b1d      	ldr	r3, [pc, #116]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01a      	beq.n	80036ce <HAL_TIM_PeriodElapsedCallback+0x7e>
        secondCounter++;
 8003698:	4b1c      	ldr	r3, [pc, #112]	; (800370c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	3301      	adds	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80036a2:	801a      	strh	r2, [r3, #0]
        if(secondCounter == STATE_CHANGE_INTERVAL){ // 1 minute state changes once contact has been made
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	2b14      	cmp	r3, #20
 80036aa:	d116      	bne.n	80036da <HAL_TIM_PeriodElapsedCallback+0x8a>
          secondCounter = 0;
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	801a      	strh	r2, [r3, #0]
          vcuState++;
 80036b2:	4b17      	ldr	r3, [pc, #92]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80036bc:	701a      	strb	r2, [r3, #0]
          if(vcuState > packOn) vcuState=packOff;
 80036be:	4b14      	ldr	r3, [pc, #80]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d909      	bls.n	80036da <HAL_TIM_PeriodElapsedCallback+0x8a>
 80036c6:	4b12      	ldr	r3, [pc, #72]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
 80036cc:	e005      	b.n	80036da <HAL_TIM_PeriodElapsedCallback+0x8a>
        }
      }else{
        vcuState = packOff;
 80036ce:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
        secondCounter=0; //reset the second counter should the firstContact be set to 0
 80036d4:	4b0d      	ldr	r3, [pc, #52]	; (800370c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	801a      	strh	r2, [r3, #0]
      }
    }
   if((decSec % 2) == 0) sendState =1;
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <HAL_TIM_PeriodElapsedCallback+0x9e>
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	701a      	strb	r2, [r3, #0]
  }
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	2000c948 	.word	0x2000c948
 80036fc:	2000cdf4 	.word	0x2000cdf4
 8003700:	2000cdf8 	.word	0x2000cdf8
 8003704:	48000400 	.word	0x48000400
 8003708:	2000c78c 	.word	0x2000c78c
 800370c:	2000cdfa 	.word	0x2000cdfa
 8003710:	2000c78d 	.word	0x2000c78d
 8003714:	2000cdf9 	.word	0x2000cdf9

08003718 <HAL_GPIO_EXTI_Callback>:

/***************************************************************************************************************
 *     G P I O     I N T E R R U P T    H A N D L E R   &   C A L L B A C K            P A C K   E M U L A T O R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN_INT_Pin){
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003728:	d00e      	beq.n	8003748 <HAL_GPIO_EXTI_Callback+0x30>
    // Interrupt
  }
  else if (GPIO_Pin == CAN_INT0_Pin){
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003730:	d103      	bne.n	800373a <HAL_GPIO_EXTI_Callback+0x22>
    // TX Interrupt
    canTxInterrupt = 1;
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
  }
  else if(GPIO_Pin == BUTTON2_Pin){
  }
  else if(GPIO_Pin == BUTTON3_Pin){
  }
}
 8003738:	e006      	b.n	8003748 <HAL_GPIO_EXTI_Callback+0x30>
  else if (GPIO_Pin == CAN_INT1_Pin){
 800373a:	88fb      	ldrh	r3, [r7, #6]
 800373c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003740:	d102      	bne.n	8003748 <HAL_GPIO_EXTI_Callback+0x30>
    canRxInterrupt = 1;
 8003742:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_GPIO_EXTI_Callback+0x40>)
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	2000cdf1 	.word	0x2000cdf1
 8003758:	2000cdf0 	.word	0x2000cdf0

0800375c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003760:	f000 febc 	bl	80044dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003764:	f000 f820 	bl	80037a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003768:	f000 f892 	bl	8003890 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800376c:	f000 fabe 	bl	8003cec <MX_GPIO_Init>
  MX_SPI1_Init();
 8003770:	f000 f91e 	bl	80039b0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003774:	f000 f95a 	bl	8003a2c <MX_SPI2_Init>
  MX_USB_PCD_Init();
 8003778:	f000 fa90 	bl	8003c9c <MX_USB_PCD_Init>
  MX_PKA_Init();
 800377c:	f000 f8a6 	bl	80038cc <MX_PKA_Init>
  MX_RTC_Init();
 8003780:	f000 f8b8 	bl	80038f4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003784:	f000 fa3e 	bl	8003c04 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003788:	f000 f98e 	bl	8003aa8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on

  DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 800378c:	2000      	movs	r0, #0
 800378e:	f7fd fd23 	bl	80011d8 <DRV_CANFDSPI_Reset>
  VCU_Initialize();
 8003792:	f7fc ff1f 	bl	80005d4 <VCU_Initialize>

  HAL_TIM_Base_Start_IT(&htim1);
 8003796:	4803      	ldr	r0, [pc, #12]	; (80037a4 <main+0x48>)
 8003798:	f004 f8ce 	bl	8007938 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    VCU_Tasks();
 800379c:	f7fc ff54 	bl	8000648 <VCU_Tasks>
 80037a0:	e7fc      	b.n	800379c <main+0x40>
 80037a2:	bf00      	nop
 80037a4:	2000c948 	.word	0x2000c948

080037a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b09a      	sub	sp, #104	; 0x68
 80037ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037ae:	f107 0320 	add.w	r3, r7, #32
 80037b2:	2248      	movs	r2, #72	; 0x48
 80037b4:	2100      	movs	r1, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	f005 ff3a 	bl	8009630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037bc:	1d3b      	adds	r3, r7, #4
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	609a      	str	r2, [r3, #8]
 80037c6:	60da      	str	r2, [r3, #12]
 80037c8:	611a      	str	r2, [r3, #16]
 80037ca:	615a      	str	r2, [r3, #20]
 80037cc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037ce:	f001 fb07 	bl	8004de0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80037d2:	2010      	movs	r0, #16
 80037d4:	f7ff feb0 	bl	8003538 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <SystemClock_Config+0xe4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037e0:	4a2a      	ldr	r2, [pc, #168]	; (800388c <SystemClock_Config+0xe4>)
 80037e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <SystemClock_Config+0xe4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037f0:	603b      	str	r3, [r7, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80037f4:	2327      	movs	r3, #39	; 0x27
 80037f6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037fe:	2301      	movs	r3, #1
 8003800:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003802:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003806:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003808:	2301      	movs	r3, #1
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800380c:	2340      	movs	r3, #64	; 0x40
 800380e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8003810:	2300      	movs	r3, #0
 8003812:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003814:	2360      	movs	r3, #96	; 0x60
 8003816:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003818:	2302      	movs	r3, #2
 800381a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800381c:	2301      	movs	r3, #1
 800381e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003820:	2300      	movs	r3, #0
 8003822:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8003824:	2320      	movs	r3, #32
 8003826:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003828:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800382c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800382e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003832:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003838:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800383a:	f107 0320 	add.w	r3, r7, #32
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fe62 	bl	8005508 <HAL_RCC_OscConfig>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800384a:	f000 fac1 	bl	8003dd0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800384e:	236f      	movs	r3, #111	; 0x6f
 8003850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003852:	2303      	movs	r3, #3
 8003854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800385a:	2300      	movs	r3, #0
 800385c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8003862:	2380      	movs	r3, #128	; 0x80
 8003864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800386a:	1d3b      	adds	r3, r7, #4
 800386c:	2103      	movs	r1, #3
 800386e:	4618      	mov	r0, r3
 8003870:	f002 f9be 	bl	8005bf0 <HAL_RCC_ClockConfig>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800387a:	f000 faa9 	bl	8003dd0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800387e:	f002 ff79 	bl	8006774 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003882:	bf00      	nop
 8003884:	3768      	adds	r7, #104	; 0x68
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	58000400 	.word	0x58000400

08003890 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b094      	sub	sp, #80	; 0x50
 8003894:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003896:	463b      	mov	r3, r7
 8003898:	2250      	movs	r2, #80	; 0x50
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f005 fec7 	bl	8009630 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80038a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038a6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80038a8:	2300      	movs	r3, #0
 80038aa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80038ac:	2310      	movs	r3, #16
 80038ae:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038b0:	463b      	mov	r3, r7
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 fde8 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80038be:	f000 fa87 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80038c2:	bf00      	nop
 80038c4:	3750      	adds	r7, #80	; 0x50
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 80038d0:	4b06      	ldr	r3, [pc, #24]	; (80038ec <MX_PKA_Init+0x20>)
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <MX_PKA_Init+0x24>)
 80038d4:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 80038d6:	4805      	ldr	r0, [pc, #20]	; (80038ec <MX_PKA_Init+0x20>)
 80038d8:	f001 fa53 	bl	8004d82 <HAL_PKA_Init>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 80038e2:	f000 fa75 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	2000c850 	.word	0x2000c850
 80038f0:	58002000 	.word	0x58002000

080038f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	605a      	str	r2, [r3, #4]
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	60da      	str	r2, [r3, #12]
 8003906:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003908:	2300      	movs	r3, #0
 800390a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800390c:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <MX_RTC_Init+0xb4>)
 800390e:	4a27      	ldr	r2, [pc, #156]	; (80039ac <MX_RTC_Init+0xb8>)
 8003910:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <MX_RTC_Init+0xb4>)
 8003914:	2200      	movs	r2, #0
 8003916:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <MX_RTC_Init+0xb4>)
 800391a:	227f      	movs	r2, #127	; 0x7f
 800391c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800391e:	4b22      	ldr	r3, [pc, #136]	; (80039a8 <MX_RTC_Init+0xb4>)
 8003920:	22ff      	movs	r2, #255	; 0xff
 8003922:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003924:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <MX_RTC_Init+0xb4>)
 8003926:	2200      	movs	r2, #0
 8003928:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800392a:	4b1f      	ldr	r3, [pc, #124]	; (80039a8 <MX_RTC_Init+0xb4>)
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003930:	4b1d      	ldr	r3, [pc, #116]	; (80039a8 <MX_RTC_Init+0xb4>)
 8003932:	2200      	movs	r2, #0
 8003934:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003936:	4b1c      	ldr	r3, [pc, #112]	; (80039a8 <MX_RTC_Init+0xb4>)
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800393c:	481a      	ldr	r0, [pc, #104]	; (80039a8 <MX_RTC_Init+0xb4>)
 800393e:	f003 f831 	bl	80069a4 <HAL_RTC_Init>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003948:	f000 fa42 	bl	8003dd0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800394c:	2300      	movs	r3, #0
 800394e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003950:	2300      	movs	r3, #0
 8003952:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003954:	2300      	movs	r3, #0
 8003956:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8003958:	2300      	movs	r3, #0
 800395a:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	2201      	movs	r2, #1
 8003968:	4619      	mov	r1, r3
 800396a:	480f      	ldr	r0, [pc, #60]	; (80039a8 <MX_RTC_Init+0xb4>)
 800396c:	f003 f8ca 	bl	8006b04 <HAL_RTC_SetTime>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_RTC_Init+0x86>
  {
    Error_Handler();
 8003976:	f000 fa2b 	bl	8003dd0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800397a:	2301      	movs	r3, #1
 800397c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800397e:	2301      	movs	r3, #1
 8003980:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003982:	2301      	movs	r3, #1
 8003984:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003986:	2300      	movs	r3, #0
 8003988:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800398a:	463b      	mov	r3, r7
 800398c:	2201      	movs	r2, #1
 800398e:	4619      	mov	r1, r3
 8003990:	4805      	ldr	r0, [pc, #20]	; (80039a8 <MX_RTC_Init+0xb4>)
 8003992:	f003 f9d7 	bl	8006d44 <HAL_RTC_SetDate>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 800399c:	f000 fa18 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80039a0:	bf00      	nop
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	2000c85c 	.word	0x2000c85c
 80039ac:	40002800 	.word	0x40002800

080039b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039b6:	4a1c      	ldr	r2, [pc, #112]	; (8003a28 <MX_SPI1_Init+0x78>)
 80039b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039ba:	4b1a      	ldr	r3, [pc, #104]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039c2:	4b18      	ldr	r3, [pc, #96]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80039ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039d0:	4b14      	ldr	r3, [pc, #80]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039d6:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039d8:	2200      	movs	r2, #0
 80039da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039dc:	4b11      	ldr	r3, [pc, #68]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80039e4:	4b0f      	ldr	r3, [pc, #60]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039e6:	2208      	movs	r2, #8
 80039e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80039f0:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <MX_SPI1_Init+0x74>)
 80039fe:	2207      	movs	r2, #7
 8003a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a02:	4b08      	ldr	r3, [pc, #32]	; (8003a24 <MX_SPI1_Init+0x74>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <MX_SPI1_Init+0x74>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a0e:	4805      	ldr	r0, [pc, #20]	; (8003a24 <MX_SPI1_Init+0x74>)
 8003a10:	f003 fb1f 	bl	8007052 <HAL_SPI_Init>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a1a:	f000 f9d9 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	2000c880 	.word	0x2000c880
 8003a28:	40013000 	.word	0x40013000

08003a2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a30:	4b1b      	ldr	r3, [pc, #108]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <MX_SPI2_Init+0x78>)
 8003a34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a3e:	4b18      	ldr	r3, [pc, #96]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8003a44:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a46:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003a4a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003a52:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003a58:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a5e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a66:	4b0e      	ldr	r3, [pc, #56]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a7e:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a86:	2208      	movs	r2, #8
 8003a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <MX_SPI2_Init+0x74>)
 8003a8c:	f003 fae1 	bl	8007052 <HAL_SPI_Init>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003a96:	f000 f99b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	2000c8e4 	.word	0x2000c8e4
 8003aa4:	40003800 	.word	0x40003800

08003aa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b09c      	sub	sp, #112	; 0x70
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003aae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003abc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ac8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	605a      	str	r2, [r3, #4]
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	611a      	str	r2, [r3, #16]
 8003ad8:	615a      	str	r2, [r3, #20]
 8003ada:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003adc:	1d3b      	adds	r3, r7, #4
 8003ade:	2234      	movs	r2, #52	; 0x34
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f005 fda4 	bl	8009630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003ae8:	4b44      	ldr	r3, [pc, #272]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003aea:	4a45      	ldr	r2, [pc, #276]	; (8003c00 <MX_TIM1_Init+0x158>)
 8003aec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 8003aee:	4b43      	ldr	r3, [pc, #268]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003af0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003af4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8003afc:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003afe:	2263      	movs	r2, #99	; 0x63
 8003b00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b02:	4b3e      	ldr	r3, [pc, #248]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b08:	4b3c      	ldr	r3, [pc, #240]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003b14:	4839      	ldr	r0, [pc, #228]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b16:	f003 feb7 	bl	8007888 <HAL_TIM_Base_Init>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003b20:	f000 f956 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b28:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003b2a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4832      	ldr	r0, [pc, #200]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b32:	f004 f949 	bl	8007dc8 <HAL_TIM_ConfigClockSource>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003b3c:	f000 f948 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003b40:	482e      	ldr	r0, [pc, #184]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b42:	f003 ff47 	bl	80079d4 <HAL_TIM_OC_Init>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d001      	beq.n	8003b50 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003b4c:	f000 f940 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b50:	2300      	movs	r3, #0
 8003b52:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003b54:	2300      	movs	r3, #0
 8003b56:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003b60:	4619      	mov	r1, r3
 8003b62:	4826      	ldr	r0, [pc, #152]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b64:	f004 fda0 	bl	80086a8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003b6e:	f000 f92f 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003b72:	2300      	movs	r3, #0
 8003b74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b82:	2300      	movs	r3, #0
 8003b84:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b86:	2300      	movs	r3, #0
 8003b88:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b92:	2200      	movs	r2, #0
 8003b94:	4619      	mov	r1, r3
 8003b96:	4819      	ldr	r0, [pc, #100]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003b98:	f004 f89c 	bl	8007cd4 <HAL_TIM_OC_ConfigChannel>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003ba2:	f000 f915 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003bcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4806      	ldr	r0, [pc, #24]	; (8003bfc <MX_TIM1_Init+0x154>)
 8003be4:	f004 fdc0 	bl	8008768 <HAL_TIMEx_ConfigBreakDeadTime>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8003bee:	f000 f8ef 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003bf2:	bf00      	nop
 8003bf4:	3770      	adds	r7, #112	; 0x70
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000c948 	.word	0x2000c948
 8003c00:	40012c00 	.word	0x40012c00

08003c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c0a:	4a23      	ldr	r2, [pc, #140]	; (8003c98 <MX_USART1_UART_Init+0x94>)
 8003c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003c0e:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c16:	4b1f      	ldr	r3, [pc, #124]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c22:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c2a:	220c      	movs	r2, #12
 8003c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c2e:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c34:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c3a:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003c40:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c46:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c4c:	4811      	ldr	r0, [pc, #68]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c4e:	f004 fe59 	bl	8008904 <HAL_UART_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003c58:	f000 f8ba 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	480d      	ldr	r0, [pc, #52]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c60:	f005 fba8 	bl	80093b4 <HAL_UARTEx_SetTxFifoThreshold>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003c6a:	f000 f8b1 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003c6e:	2100      	movs	r1, #0
 8003c70:	4808      	ldr	r0, [pc, #32]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c72:	f005 fbdd 	bl	8009430 <HAL_UARTEx_SetRxFifoThreshold>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003c7c:	f000 f8a8 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c80:	4804      	ldr	r0, [pc, #16]	; (8003c94 <MX_USART1_UART_Init+0x90>)
 8003c82:	f005 fb5e 	bl	8009342 <HAL_UARTEx_DisableFifoMode>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c8c:	f000 f8a0 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c90:	bf00      	nop
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	2000c994 	.word	0x2000c994
 8003c98:	40013800 	.word	0x40013800

08003c9c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003ca0:	4b10      	ldr	r3, [pc, #64]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003ca2:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <MX_USB_PCD_Init+0x4c>)
 8003ca4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003ca8:	2208      	movs	r2, #8
 8003caa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003cac:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003cae:	2202      	movs	r2, #2
 8003cb0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003cb2:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003cbe:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003ccc:	2200      	movs	r2, #0
 8003cce:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003cd0:	4804      	ldr	r0, [pc, #16]	; (8003ce4 <MX_USB_PCD_Init+0x48>)
 8003cd2:	f000 ff53 	bl	8004b7c <HAL_PCD_Init>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8003cdc:	f000 f878 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003ce0:	bf00      	nop
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	2000ca28 	.word	0x2000ca28
 8003ce8:	40006800 	.word	0x40006800

08003cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	605a      	str	r2, [r3, #4]
 8003cfa:	609a      	str	r2, [r3, #8]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d00:	2004      	movs	r0, #4
 8003d02:	f7ff fc2f 	bl	8003564 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7ff fc2c 	bl	8003564 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d0c:	2002      	movs	r0, #2
 8003d0e:	f7ff fc29 	bl	8003564 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d12:	2008      	movs	r0, #8
 8003d14:	f7ff fc26 	bl	8003564 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN_CS_Pin, GPIO_PIN_RESET);
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2129      	movs	r1, #41	; 0x29
 8003d1c:	4829      	ldr	r0, [pc, #164]	; (8003dc4 <MX_GPIO_Init+0xd8>)
 8003d1e:	f000 fee3 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2123      	movs	r1, #35	; 0x23
 8003d26:	4828      	ldr	r0, [pc, #160]	; (8003dc8 <MX_GPIO_Init+0xdc>)
 8003d28:	f000 fede 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN_CS_Pin;
 8003d2c:	2329      	movs	r3, #41	; 0x29
 8003d2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d30:	2301      	movs	r3, #1
 8003d32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4820      	ldr	r0, [pc, #128]	; (8003dc4 <MX_GPIO_Init+0xd8>)
 8003d42:	f000 fd61 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 8003d46:	2310      	movs	r3, #16
 8003d48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d50:	2301      	movs	r3, #1
 8003d52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8003d54:	1d3b      	adds	r3, r7, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	481a      	ldr	r0, [pc, #104]	; (8003dc4 <MX_GPIO_Init+0xd8>)
 8003d5a:	f000 fd55 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8003d5e:	2323      	movs	r3, #35	; 0x23
 8003d60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d62:	2301      	movs	r3, #1
 8003d64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4815      	ldr	r0, [pc, #84]	; (8003dc8 <MX_GPIO_Init+0xdc>)
 8003d74:	f000 fd48 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_INT_Pin CAN_INT0_Pin CAN_INT1_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin|CAN_INT0_Pin|CAN_INT1_Pin;
 8003d78:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003d7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003d7e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003d82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d84:	2301      	movs	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d88:	1d3b      	adds	r3, r7, #4
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	480e      	ldr	r0, [pc, #56]	; (8003dc8 <MX_GPIO_Init+0xdc>)
 8003d8e:	f000 fd3b 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 8003d92:	2303      	movs	r3, #3
 8003d94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da0:	1d3b      	adds	r3, r7, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4809      	ldr	r0, [pc, #36]	; (8003dcc <MX_GPIO_Init+0xe0>)
 8003da6:	f000 fd2f 	bl	8004808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	2100      	movs	r1, #0
 8003dae:	2028      	movs	r0, #40	; 0x28
 8003db0:	f000 fcf5 	bl	800479e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003db4:	2028      	movs	r0, #40	; 0x28
 8003db6:	f000 fd0c 	bl	80047d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	48000800 	.word	0x48000800
 8003dc8:	48000400 	.word	0x48000400
 8003dcc:	48000c00 	.word	0x48000c00

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd4:	b672      	cpsid	i
}
 8003dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003dd8:	e7fe      	b.n	8003dd8 <Error_Handler+0x8>

08003dda <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003df2:	bf00      	nop
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_AHB2_GRP1_EnableClock>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e20:	68fb      	ldr	r3, [r7, #12]
}
 8003e22:	bf00      	nop
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e52:	68fb      	ldr	r3, [r7, #12]
}
 8003e54:	bf00      	nop
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4013      	ands	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e84:	68fb      	ldr	r3, [r7, #12]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a05      	ldr	r2, [pc, #20]	; (8003ef8 <HAL_PKA_MspInit+0x24>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 8003ee6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8003eea:	f7ff ffa0 	bl	8003e2e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 8003eee:	bf00      	nop
 8003ef0:	3708      	adds	r7, #8
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	58002000 	.word	0x58002000

08003efc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b096      	sub	sp, #88	; 0x58
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f04:	f107 0308 	add.w	r3, r7, #8
 8003f08:	2250      	movs	r2, #80	; 0x50
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f005 fb8f 	bl	8009630 <memset>
  if(hrtc->Instance==RTC)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_RTC_MspInit+0x54>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d115      	bne.n	8003f48 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003f1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f20:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003f22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f26:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f28:	f107 0308 	add.w	r3, r7, #8
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 faab 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003f38:	f7ff ff4a 	bl	8003dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f3c:	f7ff ff4d 	bl	8003dda <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003f40:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f44:	f7ff ff8c 	bl	8003e60 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f48:	bf00      	nop
 8003f4a:	3758      	adds	r7, #88	; 0x58
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40002800 	.word	0x40002800

08003f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f5c:	f107 030c 	add.w	r3, r7, #12
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
 8003f66:	609a      	str	r2, [r3, #8]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a30      	ldr	r2, [pc, #192]	; (8004034 <HAL_SPI_MspInit+0xe0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d118      	bne.n	8003fa8 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f76:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f7a:	f7ff ff8a 	bl	8003e92 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	2001      	movs	r0, #1
 8003f80:	f7ff ff3c 	bl	8003dfc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003f84:	23c2      	movs	r3, #194	; 0xc2
 8003f86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f94:	2305      	movs	r3, #5
 8003f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f98:	f107 030c 	add.w	r3, r7, #12
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003fa2:	f000 fc31 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003fa6:	e040      	b.n	800402a <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_SPI_MspInit+0xe4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d13b      	bne.n	800402a <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003fb6:	f7ff ff53 	bl	8003e60 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fba:	2004      	movs	r0, #4
 8003fbc:	f7ff ff1e 	bl	8003dfc <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	f7ff ff1b 	bl	8003dfc <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fca:	2302      	movs	r3, #2
 8003fcc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fda:	f107 030c 	add.w	r3, r7, #12
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4816      	ldr	r0, [pc, #88]	; (800403c <HAL_SPI_MspInit+0xe8>)
 8003fe2:	f000 fc11 	bl	8004808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	2302      	movs	r3, #2
 8003fec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ff6:	2305      	movs	r3, #5
 8003ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ffa:	f107 030c 	add.w	r3, r7, #12
 8003ffe:	4619      	mov	r1, r3
 8004000:	480e      	ldr	r0, [pc, #56]	; (800403c <HAL_SPI_MspInit+0xe8>)
 8004002:	f000 fc01 	bl	8004808 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004006:	f44f 7300 	mov.w	r3, #512	; 0x200
 800400a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004018:	2305      	movs	r3, #5
 800401a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401c:	f107 030c 	add.w	r3, r7, #12
 8004020:	4619      	mov	r1, r3
 8004022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004026:	f000 fbef 	bl	8004808 <HAL_GPIO_Init>
}
 800402a:	bf00      	nop
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40013000 	.word	0x40013000
 8004038:	40003800 	.word	0x40003800
 800403c:	48000800 	.word	0x48000800

08004040 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a09      	ldr	r2, [pc, #36]	; (8004074 <HAL_TIM_Base_MspInit+0x34>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10b      	bne.n	800406a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004052:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004056:	f7ff ff1c 	bl	8003e92 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800405a:	2200      	movs	r2, #0
 800405c:	2100      	movs	r1, #0
 800405e:	2019      	movs	r0, #25
 8004060:	f000 fb9d 	bl	800479e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004064:	2019      	movs	r0, #25
 8004066:	f000 fbb4 	bl	80047d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00

08004078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b09c      	sub	sp, #112	; 0x70
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004080:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	605a      	str	r2, [r3, #4]
 800408a:	609a      	str	r2, [r3, #8]
 800408c:	60da      	str	r2, [r3, #12]
 800408e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	2250      	movs	r2, #80	; 0x50
 8004096:	2100      	movs	r1, #0
 8004098:	4618      	mov	r0, r3
 800409a:	f005 fac9 	bl	8009630 <memset>
  if(huart->Instance==USART1)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a16      	ldr	r2, [pc, #88]	; (80040fc <HAL_UART_MspInit+0x84>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d124      	bne.n	80040f2 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80040a8:	2301      	movs	r3, #1
 80040aa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80040ac:	2302      	movs	r3, #2
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040b0:	f107 030c 	add.w	r3, r7, #12
 80040b4:	4618      	mov	r0, r3
 80040b6:	f002 f9e7 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80040c0:	f7ff fe86 	bl	8003dd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80040c8:	f7ff fee3 	bl	8003e92 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040cc:	2002      	movs	r0, #2
 80040ce:	f7ff fe95 	bl	8003dfc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040d2:	23c0      	movs	r3, #192	; 0xc0
 80040d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d6:	2302      	movs	r3, #2
 80040d8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	2300      	movs	r3, #0
 80040dc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040de:	2300      	movs	r3, #0
 80040e0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040e2:	2307      	movs	r3, #7
 80040e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80040ea:	4619      	mov	r1, r3
 80040ec:	4804      	ldr	r0, [pc, #16]	; (8004100 <HAL_UART_MspInit+0x88>)
 80040ee:	f000 fb8b 	bl	8004808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80040f2:	bf00      	nop
 80040f4:	3770      	adds	r7, #112	; 0x70
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	40013800 	.word	0x40013800
 8004100:	48000400 	.word	0x48000400

08004104 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b09c      	sub	sp, #112	; 0x70
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800410c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	2250      	movs	r2, #80	; 0x50
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f005 fa83 	bl	8009630 <memset>
  if(hpcd->Instance==USB)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HAL_PCD_MspInit+0xa8>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d136      	bne.n	80041a2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004134:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004138:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800413a:	2318      	movs	r3, #24
 800413c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800413e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004142:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8004144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004148:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800414a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800414e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8004150:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004154:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004156:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800415a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800415c:	f107 030c 	add.w	r3, r7, #12
 8004160:	4618      	mov	r0, r3
 8004162:	f002 f991 	bl	8006488 <HAL_RCCEx_PeriphCLKConfig>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800416c:	f7ff fe30 	bl	8003dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004170:	2001      	movs	r0, #1
 8004172:	f7ff fe43 	bl	8003dfc <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004176:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800417a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417c:	2302      	movs	r3, #2
 800417e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	2300      	movs	r3, #0
 8004182:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004184:	2300      	movs	r3, #0
 8004186:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8004188:	230a      	movs	r3, #10
 800418a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800418c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004196:	f000 fb37 	bl	8004808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800419a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800419e:	f7ff fe5f 	bl	8003e60 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80041a2:	bf00      	nop
 80041a4:	3770      	adds	r7, #112	; 0x70
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40006800 	.word	0x40006800

080041b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041b4:	e7fe      	b.n	80041b4 <NMI_Handler+0x4>

080041b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041ba:	e7fe      	b.n	80041ba <HardFault_Handler+0x4>

080041bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041c0:	e7fe      	b.n	80041c0 <MemManage_Handler+0x4>

080041c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041c2:	b480      	push	{r7}
 80041c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041c6:	e7fe      	b.n	80041c6 <BusFault_Handler+0x4>

080041c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041cc:	e7fe      	b.n	80041cc <UsageFault_Handler+0x4>

080041ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80041e0:	bf00      	nop
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80041ea:	b480      	push	{r7}
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041fc:	f000 f9c8 	bl	8004590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004200:	bf00      	nop
 8004202:	bd80      	pop	{r7, pc}

08004204 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004208:	4802      	ldr	r0, [pc, #8]	; (8004214 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800420a:	f003 fc44 	bl	8007a96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	2000c948 	.word	0x2000c948

08004218 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 800421c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004220:	f000 fc94 	bl	8004b4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT0_Pin);
 8004224:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004228:	f000 fc90 	bl	8004b4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT1_Pin);
 800422c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004230:	f000 fc8c 	bl	8004b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004234:	bf00      	nop
 8004236:	bd80      	pop	{r7, pc}

08004238 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return 1;
 800423c:	2301      	movs	r3, #1
}
 800423e:	4618      	mov	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <_kill>:

int _kill(int pid, int sig)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004252:	f005 f9b5 	bl	80095c0 <__errno>
 8004256:	4603      	mov	r3, r0
 8004258:	2216      	movs	r2, #22
 800425a:	601a      	str	r2, [r3, #0]
  return -1;
 800425c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004260:	4618      	mov	r0, r3
 8004262:	3708      	adds	r7, #8
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <_exit>:

void _exit (int status)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004270:	f04f 31ff 	mov.w	r1, #4294967295
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ffe7 	bl	8004248 <_kill>
  while (1) {}    /* Make sure we hang here */
 800427a:	e7fe      	b.n	800427a <_exit+0x12>

0800427c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	e00a      	b.n	80042a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800428e:	f3af 8000 	nop.w
 8004292:	4601      	mov	r1, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	60ba      	str	r2, [r7, #8]
 800429a:	b2ca      	uxtb	r2, r1
 800429c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	3301      	adds	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	dbf0      	blt.n	800428e <_read+0x12>
  }

  return len;
 80042ac:	687b      	ldr	r3, [r7, #4]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042c2:	2300      	movs	r3, #0
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e009      	b.n	80042dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	60ba      	str	r2, [r7, #8]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	4618      	mov	r0, r3
 80042d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	3301      	adds	r3, #1
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	dbf1      	blt.n	80042c8 <_write+0x12>
  }
  return len;
 80042e4:	687b      	ldr	r3, [r7, #4]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <_close>:

int _close(int file)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004316:	605a      	str	r2, [r3, #4]
  return 0;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr

08004326 <_isatty>:

int _isatty(int file)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800432e:	2301      	movs	r3, #1
}
 8004330:	4618      	mov	r0, r3
 8004332:	370c      	adds	r7, #12
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800433c:	b480      	push	{r7}
 800433e:	b085      	sub	sp, #20
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b086      	sub	sp, #24
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004360:	4a14      	ldr	r2, [pc, #80]	; (80043b4 <_sbrk+0x5c>)
 8004362:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <_sbrk+0x60>)
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800436c:	4b13      	ldr	r3, [pc, #76]	; (80043bc <_sbrk+0x64>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004374:	4b11      	ldr	r3, [pc, #68]	; (80043bc <_sbrk+0x64>)
 8004376:	4a12      	ldr	r2, [pc, #72]	; (80043c0 <_sbrk+0x68>)
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800437a:	4b10      	ldr	r3, [pc, #64]	; (80043bc <_sbrk+0x64>)
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4413      	add	r3, r2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	429a      	cmp	r2, r3
 8004386:	d207      	bcs.n	8004398 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004388:	f005 f91a 	bl	80095c0 <__errno>
 800438c:	4603      	mov	r3, r0
 800438e:	220c      	movs	r2, #12
 8004390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004392:	f04f 33ff 	mov.w	r3, #4294967295
 8004396:	e009      	b.n	80043ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004398:	4b08      	ldr	r3, [pc, #32]	; (80043bc <_sbrk+0x64>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800439e:	4b07      	ldr	r3, [pc, #28]	; (80043bc <_sbrk+0x64>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4413      	add	r3, r2
 80043a6:	4a05      	ldr	r2, [pc, #20]	; (80043bc <_sbrk+0x64>)
 80043a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043aa:	68fb      	ldr	r3, [r7, #12]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20030000 	.word	0x20030000
 80043b8:	00000400 	.word	0x00000400
 80043bc:	2000cdfc 	.word	0x2000cdfc
 80043c0:	2000ce18 	.word	0x2000ce18

080043c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80043c8:	4b24      	ldr	r3, [pc, #144]	; (800445c <SystemInit+0x98>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	4a23      	ldr	r2, [pc, #140]	; (800445c <SystemInit+0x98>)
 80043d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80043d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80043f0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80043f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <SystemInit+0x9c>)
 80043fe:	4013      	ands	r3, r2
 8004400:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800440e:	f023 0305 	bic.w	r3, r3, #5
 8004412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800441a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800441e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442e:	4a0d      	ldr	r2, [pc, #52]	; (8004464 <SystemInit+0xa0>)
 8004430:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004436:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <SystemInit+0xa0>)
 8004438:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800443a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004444:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004448:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800444a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444e:	2200      	movs	r2, #0
 8004450:	619a      	str	r2, [r3, #24]
}
 8004452:	bf00      	nop
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	e000ed00 	.word	0xe000ed00
 8004460:	faf6fefb 	.word	0xfaf6fefb
 8004464:	22041000 	.word	0x22041000

08004468 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004468:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800446a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446c:	3304      	adds	r3, #4

0800446e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800446e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004470:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004472:	d3f9      	bcc.n	8004468 <CopyDataInit>
  bx lr
 8004474:	4770      	bx	lr

08004476 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004476:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004478:	3004      	adds	r0, #4

0800447a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800447a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800447c:	d3fb      	bcc.n	8004476 <FillZerobss>
  bx lr
 800447e:	4770      	bx	lr

08004480 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004480:	480c      	ldr	r0, [pc, #48]	; (80044b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004482:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004484:	f7ff ff9e 	bl	80043c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004488:	480b      	ldr	r0, [pc, #44]	; (80044b8 <LoopForever+0x6>)
 800448a:	490c      	ldr	r1, [pc, #48]	; (80044bc <LoopForever+0xa>)
 800448c:	4a0c      	ldr	r2, [pc, #48]	; (80044c0 <LoopForever+0xe>)
 800448e:	2300      	movs	r3, #0
 8004490:	f7ff ffed 	bl	800446e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004494:	480b      	ldr	r0, [pc, #44]	; (80044c4 <LoopForever+0x12>)
 8004496:	490c      	ldr	r1, [pc, #48]	; (80044c8 <LoopForever+0x16>)
 8004498:	4a0c      	ldr	r2, [pc, #48]	; (80044cc <LoopForever+0x1a>)
 800449a:	2300      	movs	r3, #0
 800449c:	f7ff ffe7 	bl	800446e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80044a0:	480b      	ldr	r0, [pc, #44]	; (80044d0 <LoopForever+0x1e>)
 80044a2:	490c      	ldr	r1, [pc, #48]	; (80044d4 <LoopForever+0x22>)
 80044a4:	2300      	movs	r3, #0
 80044a6:	f7ff ffe8 	bl	800447a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80044aa:	f005 f88f 	bl	80095cc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80044ae:	f7ff f955 	bl	800375c <main>

080044b2 <LoopForever>:

LoopForever:
  b LoopForever
 80044b2:	e7fe      	b.n	80044b2 <LoopForever>
  ldr   r0, =_estack
 80044b4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80044b8:	20000008 	.word	0x20000008
 80044bc:	2000007c 	.word	0x2000007c
 80044c0:	0800b220 	.word	0x0800b220
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80044c4:	20030000 	.word	0x20030000
 80044c8:	20030000 	.word	0x20030000
 80044cc:	0800b294 	.word	0x0800b294
  INIT_BSS _sbss, _ebss
 80044d0:	2000007c 	.word	0x2000007c
 80044d4:	2000ce14 	.word	0x2000ce14

080044d8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044d8:	e7fe      	b.n	80044d8 <ADC1_IRQHandler>
	...

080044dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044e6:	4b0c      	ldr	r3, [pc, #48]	; (8004518 <HAL_Init+0x3c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a0b      	ldr	r2, [pc, #44]	; (8004518 <HAL_Init+0x3c>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044f2:	2003      	movs	r0, #3
 80044f4:	f000 f948 	bl	8004788 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044f8:	200f      	movs	r0, #15
 80044fa:	f000 f80f 	bl	800451c <HAL_InitTick>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	71fb      	strb	r3, [r7, #7]
 8004508:	e001      	b.n	800450e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800450a:	f7ff fcdb 	bl	8003ec4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800450e:	79fb      	ldrb	r3, [r7, #7]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	58004000 	.word	0x58004000

0800451c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <HAL_InitTick+0x6c>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d024      	beq.n	800457a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004530:	f001 fd0a 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <HAL_InitTick+0x6c>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	4619      	mov	r1, r3
 800453c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004540:	fbb3 f3f1 	udiv	r3, r3, r1
 8004544:	fbb2 f3f3 	udiv	r3, r2, r3
 8004548:	4618      	mov	r0, r3
 800454a:	f000 f950 	bl	80047ee <HAL_SYSTICK_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10f      	bne.n	8004574 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b0f      	cmp	r3, #15
 8004558:	d809      	bhi.n	800456e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800455a:	2200      	movs	r2, #0
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	f04f 30ff 	mov.w	r0, #4294967295
 8004562:	f000 f91c 	bl	800479e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004566:	4a09      	ldr	r2, [pc, #36]	; (800458c <HAL_InitTick+0x70>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6013      	str	r3, [r2, #0]
 800456c:	e007      	b.n	800457e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
 8004572:	e004      	b.n	800457e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e001      	b.n	800457e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	20000014 	.word	0x20000014
 800458c:	20000010 	.word	0x20000010

08004590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004594:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_IncTick+0x20>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	461a      	mov	r2, r3
 800459a:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <HAL_IncTick+0x24>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4413      	add	r3, r2
 80045a0:	4a04      	ldr	r2, [pc, #16]	; (80045b4 <HAL_IncTick+0x24>)
 80045a2:	6013      	str	r3, [r2, #0]
}
 80045a4:	bf00      	nop
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000014 	.word	0x20000014
 80045b4:	2000ce00 	.word	0x2000ce00

080045b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	af00      	add	r7, sp, #0
  return uwTick;
 80045bc:	4b03      	ldr	r3, [pc, #12]	; (80045cc <HAL_GetTick+0x14>)
 80045be:	681b      	ldr	r3, [r3, #0]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	2000ce00 	.word	0x2000ce00

080045d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80045d0:	b480      	push	{r7}
 80045d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80045d4:	4b03      	ldr	r3, [pc, #12]	; (80045e4 <HAL_GetTickPrio+0x14>)
 80045d6:	681b      	ldr	r3, [r3, #0]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000010 	.word	0x20000010

080045e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <__NVIC_SetPriorityGrouping+0x44>)
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004604:	4013      	ands	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800461a:	4a04      	ldr	r2, [pc, #16]	; (800462c <__NVIC_SetPriorityGrouping+0x44>)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	60d3      	str	r3, [r2, #12]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	e000ed00 	.word	0xe000ed00

08004630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <__NVIC_GetPriorityGrouping+0x18>)
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	0a1b      	lsrs	r3, r3, #8
 800463a:	f003 0307 	and.w	r3, r3, #7
}
 800463e:	4618      	mov	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000ed00 	.word	0xe000ed00

0800464c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	2b00      	cmp	r3, #0
 800465c:	db0b      	blt.n	8004676 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	f003 021f 	and.w	r2, r3, #31
 8004664:	4907      	ldr	r1, [pc, #28]	; (8004684 <__NVIC_EnableIRQ+0x38>)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	095b      	lsrs	r3, r3, #5
 800466c:	2001      	movs	r0, #1
 800466e:	fa00 f202 	lsl.w	r2, r0, r2
 8004672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	e000e100 	.word	0xe000e100

08004688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004698:	2b00      	cmp	r3, #0
 800469a:	db0a      	blt.n	80046b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	490c      	ldr	r1, [pc, #48]	; (80046d4 <__NVIC_SetPriority+0x4c>)
 80046a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a6:	0112      	lsls	r2, r2, #4
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	440b      	add	r3, r1
 80046ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046b0:	e00a      	b.n	80046c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	b2da      	uxtb	r2, r3
 80046b6:	4908      	ldr	r1, [pc, #32]	; (80046d8 <__NVIC_SetPriority+0x50>)
 80046b8:	79fb      	ldrb	r3, [r7, #7]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	3b04      	subs	r3, #4
 80046c0:	0112      	lsls	r2, r2, #4
 80046c2:	b2d2      	uxtb	r2, r2
 80046c4:	440b      	add	r3, r1
 80046c6:	761a      	strb	r2, [r3, #24]
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000e100 	.word	0xe000e100
 80046d8:	e000ed00 	.word	0xe000ed00

080046dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046dc:	b480      	push	{r7}
 80046de:	b089      	sub	sp, #36	; 0x24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f1c3 0307 	rsb	r3, r3, #7
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	bf28      	it	cs
 80046fa:	2304      	movcs	r3, #4
 80046fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	3304      	adds	r3, #4
 8004702:	2b06      	cmp	r3, #6
 8004704:	d902      	bls.n	800470c <NVIC_EncodePriority+0x30>
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3b03      	subs	r3, #3
 800470a:	e000      	b.n	800470e <NVIC_EncodePriority+0x32>
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004710:	f04f 32ff 	mov.w	r2, #4294967295
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43da      	mvns	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	401a      	ands	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004724:	f04f 31ff 	mov.w	r1, #4294967295
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	43d9      	mvns	r1, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004734:	4313      	orrs	r3, r2
         );
}
 8004736:	4618      	mov	r0, r3
 8004738:	3724      	adds	r7, #36	; 0x24
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
	...

08004744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004754:	d301      	bcc.n	800475a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004756:	2301      	movs	r3, #1
 8004758:	e00f      	b.n	800477a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800475a:	4a0a      	ldr	r2, [pc, #40]	; (8004784 <SysTick_Config+0x40>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3b01      	subs	r3, #1
 8004760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004762:	210f      	movs	r1, #15
 8004764:	f04f 30ff 	mov.w	r0, #4294967295
 8004768:	f7ff ff8e 	bl	8004688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <SysTick_Config+0x40>)
 800476e:	2200      	movs	r2, #0
 8004770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004772:	4b04      	ldr	r3, [pc, #16]	; (8004784 <SysTick_Config+0x40>)
 8004774:	2207      	movs	r2, #7
 8004776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000e010 	.word	0xe000e010

08004788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ff29 	bl	80045e8 <__NVIC_SetPriorityGrouping>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b086      	sub	sp, #24
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	4603      	mov	r3, r0
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047ac:	f7ff ff40 	bl	8004630 <__NVIC_GetPriorityGrouping>
 80047b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	68b9      	ldr	r1, [r7, #8]
 80047b6:	6978      	ldr	r0, [r7, #20]
 80047b8:	f7ff ff90 	bl	80046dc <NVIC_EncodePriority>
 80047bc:	4602      	mov	r2, r0
 80047be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047c2:	4611      	mov	r1, r2
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff ff5f 	bl	8004688 <__NVIC_SetPriority>
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b082      	sub	sp, #8
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	4603      	mov	r3, r0
 80047da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff ff33 	bl	800464c <__NVIC_EnableIRQ>
}
 80047e6:	bf00      	nop
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f7ff ffa4 	bl	8004744 <SysTick_Config>
 80047fc:	4603      	mov	r3, r0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004816:	e14c      	b.n	8004ab2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2101      	movs	r1, #1
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	fa01 f303 	lsl.w	r3, r1, r3
 8004824:	4013      	ands	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	f000 813e 	beq.w	8004aac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b01      	cmp	r3, #1
 800483a:	d005      	beq.n	8004848 <HAL_GPIO_Init+0x40>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f003 0303 	and.w	r3, r3, #3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d130      	bne.n	80048aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	4013      	ands	r3, r2
 800485e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	fa02 f303 	lsl.w	r3, r2, r3
 800486c:	693a      	ldr	r2, [r7, #16]
 800486e:	4313      	orrs	r3, r2
 8004870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800487e:	2201      	movs	r2, #1
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 0201 	and.w	r2, r3, #1
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	fa02 f303 	lsl.w	r3, r2, r3
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d017      	beq.n	80048e6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	2203      	movs	r2, #3
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	4013      	ands	r3, r2
 80048cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	693a      	ldr	r2, [r7, #16]
 80048dc:	4313      	orrs	r3, r2
 80048de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d123      	bne.n	800493a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	08da      	lsrs	r2, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3208      	adds	r2, #8
 80048fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	220f      	movs	r2, #15
 800490a:	fa02 f303 	lsl.w	r3, r2, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4013      	ands	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	08da      	lsrs	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3208      	adds	r2, #8
 8004934:	6939      	ldr	r1, [r7, #16]
 8004936:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	2203      	movs	r2, #3
 8004946:	fa02 f303 	lsl.w	r3, r2, r3
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f003 0203 	and.w	r2, r3, #3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	4313      	orrs	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8098 	beq.w	8004aac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800497c:	4a54      	ldr	r2, [pc, #336]	; (8004ad0 <HAL_GPIO_Init+0x2c8>)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	3302      	adds	r3, #2
 8004984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f003 0303 	and.w	r3, r3, #3
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	220f      	movs	r2, #15
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	43db      	mvns	r3, r3
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80049a6:	d019      	beq.n	80049dc <HAL_GPIO_Init+0x1d4>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a4a      	ldr	r2, [pc, #296]	; (8004ad4 <HAL_GPIO_Init+0x2cc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d013      	beq.n	80049d8 <HAL_GPIO_Init+0x1d0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a49      	ldr	r2, [pc, #292]	; (8004ad8 <HAL_GPIO_Init+0x2d0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00d      	beq.n	80049d4 <HAL_GPIO_Init+0x1cc>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a48      	ldr	r2, [pc, #288]	; (8004adc <HAL_GPIO_Init+0x2d4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <HAL_GPIO_Init+0x1c8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a47      	ldr	r2, [pc, #284]	; (8004ae0 <HAL_GPIO_Init+0x2d8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d101      	bne.n	80049cc <HAL_GPIO_Init+0x1c4>
 80049c8:	2304      	movs	r3, #4
 80049ca:	e008      	b.n	80049de <HAL_GPIO_Init+0x1d6>
 80049cc:	2307      	movs	r3, #7
 80049ce:	e006      	b.n	80049de <HAL_GPIO_Init+0x1d6>
 80049d0:	2303      	movs	r3, #3
 80049d2:	e004      	b.n	80049de <HAL_GPIO_Init+0x1d6>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e002      	b.n	80049de <HAL_GPIO_Init+0x1d6>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <HAL_GPIO_Init+0x1d6>
 80049dc:	2300      	movs	r3, #0
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	f002 0203 	and.w	r2, r2, #3
 80049e4:	0092      	lsls	r2, r2, #2
 80049e6:	4093      	lsls	r3, r2
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049ee:	4938      	ldr	r1, [pc, #224]	; (8004ad0 <HAL_GPIO_Init+0x2c8>)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	3302      	adds	r3, #2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049fc:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a20:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a4a:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a76:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004a7e:	4b19      	ldr	r3, [pc, #100]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d003      	beq.n	8004aa4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004aa4:	4a0f      	ldr	r2, [pc, #60]	; (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3301      	adds	r3, #1
 8004ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f47f aeab 	bne.w	8004818 <HAL_GPIO_Init+0x10>
  }
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	48000400 	.word	0x48000400
 8004ad8:	48000800 	.word	0x48000800
 8004adc:	48000c00 	.word	0x48000c00
 8004ae0:	48001000 	.word	0x48001000
 8004ae4:	58000800 	.word	0x58000800

08004ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
 8004af4:	4613      	mov	r3, r2
 8004af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004af8:	787b      	ldrb	r3, [r7, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b04:	e002      	b.n	8004b0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b085      	sub	sp, #20
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	460b      	mov	r3, r1
 8004b22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	041a      	lsls	r2, r3, #16
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	43d9      	mvns	r1, r3
 8004b36:	887b      	ldrh	r3, [r7, #2]
 8004b38:	400b      	ands	r3, r1
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	619a      	str	r2, [r3, #24]
}
 8004b40:	bf00      	nop
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	4603      	mov	r3, r0
 8004b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fdd4 	bl	8003718 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	58000800 	.word	0x58000800

08004b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7e:	b08b      	sub	sp, #44	; 0x2c
 8004b80:	af06      	add	r7, sp, #24
 8004b82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e0cb      	b.n	8004d26 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff faae 	bl	8004104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2203      	movs	r2, #3
 8004bac:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f004 fcc7 	bl	8009548 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
 8004bbe:	e040      	b.n	8004c42 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bc0:	7bfb      	ldrb	r3, [r7, #15]
 8004bc2:	6879      	ldr	r1, [r7, #4]
 8004bc4:	1c5a      	adds	r2, r3, #1
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	440b      	add	r3, r1
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	440b      	add	r3, r1
 8004be6:	7bfa      	ldrb	r2, [r7, #15]
 8004be8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004bea:	7bfb      	ldrb	r3, [r7, #15]
 8004bec:	6879      	ldr	r1, [r7, #4]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3303      	adds	r3, #3
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c00:	7bfa      	ldrb	r2, [r7, #15]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	440b      	add	r3, r1
 8004c0e:	3338      	adds	r3, #56	; 0x38
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c14:	7bfa      	ldrb	r2, [r7, #15]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	440b      	add	r3, r1
 8004c22:	333c      	adds	r3, #60	; 0x3c
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	440b      	add	r3, r1
 8004c36:	3340      	adds	r3, #64	; 0x40
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c3c:	7bfb      	ldrb	r3, [r7, #15]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	73fb      	strb	r3, [r7, #15]
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d3b9      	bcc.n	8004bc0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e044      	b.n	8004cdc <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	440b      	add	r3, r1
 8004c60:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c68:	7bfa      	ldrb	r2, [r7, #15]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	4413      	add	r3, r2
 8004c72:	00db      	lsls	r3, r3, #3
 8004c74:	440b      	add	r3, r1
 8004c76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004c7a:	7bfa      	ldrb	r2, [r7, #15]
 8004c7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	440b      	add	r3, r1
 8004c8c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004c94:	7bfa      	ldrb	r2, [r7, #15]
 8004c96:	6879      	ldr	r1, [r7, #4]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	440b      	add	r3, r1
 8004ca2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	00db      	lsls	r3, r3, #3
 8004cb6:	440b      	add	r3, r1
 8004cb8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cc0:	7bfa      	ldrb	r2, [r7, #15]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	440b      	add	r3, r1
 8004cce:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	73fb      	strb	r3, [r7, #15]
 8004cdc:	7bfa      	ldrb	r2, [r7, #15]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d3b5      	bcc.n	8004c52 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	687e      	ldr	r6, [r7, #4]
 8004cee:	466d      	mov	r5, sp
 8004cf0:	f106 0410 	add.w	r4, r6, #16
 8004cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	602b      	str	r3, [r5, #0]
 8004cfc:	1d33      	adds	r3, r6, #4
 8004cfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d00:	6838      	ldr	r0, [r7, #0]
 8004d02:	f004 fc3c 	bl	800957e <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2201      	movs	r2, #1
 8004d12:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d102      	bne.n	8004d24 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f805 	bl	8004d2e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d2e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	f043 0302 	orr.w	r3, r3, #2
 8004d6c:	b29a      	uxth	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d01d      	beq.n	8004dd0 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	791b      	ldrb	r3, [r3, #4]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d102      	bne.n	8004da4 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff f898 	bl	8003ed4 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 8004dc0:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	711a      	strb	r2, [r3, #4]
 8004dce:	e001      	b.n	8004dd4 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a04      	ldr	r2, [pc, #16]	; (8004dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dee:	6013      	str	r3, [r2, #0]
}
 8004df0:	bf00      	nop
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	58000400 	.word	0x58000400

08004e00 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004e04:	4b04      	ldr	r3, [pc, #16]	; (8004e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	58000400 	.word	0x58000400

08004e1c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2e:	d101      	bne.n	8004e34 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004e30:	2301      	movs	r3, #1
 8004e32:	e000      	b.n	8004e36 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5c:	4770      	bx	lr

08004e5e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e70:	6013      	str	r3, [r2, #0]
}
 8004e72:	bf00      	nop
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e8e:	d101      	bne.n	8004e94 <LL_RCC_HSE_IsReady+0x18>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <LL_RCC_HSE_IsReady+0x1a>
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eb2:	6013      	str	r3, [r2, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr

08004ebe <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8004ebe:	b480      	push	{r7}
 8004ec0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed0:	6013      	str	r3, [r2, #0]
}
 8004ed2:	bf00      	nop
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d101      	bne.n	8004ef4 <LL_RCC_HSI_IsReady+0x18>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <LL_RCC_HSI_IsReady+0x1a>
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	061b      	lsls	r3, r3, #24
 8004f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	604b      	str	r3, [r1, #4]
}
 8004f1e:	bf00      	nop
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004f42:	bf00      	nop
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5c:	f023 0301 	bic.w	r3, r3, #1
 8004f60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr

08004f6e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004f72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d101      	bne.n	8004f86 <LL_RCC_HSI48_IsReady+0x18>
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <LL_RCC_HSI48_IsReady+0x1a>
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8004f92:	b480      	push	{r7}
 8004f94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fcc:	bf00      	nop
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fe6:	f043 0304 	orr.w	r3, r3, #4
 8004fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800501a:	b480      	push	{r7}
 800501c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d101      	bne.n	8005032 <LL_RCC_LSE_IsReady+0x18>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <LL_RCC_LSE_IsReady+0x1a>
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800503e:	b480      	push	{r7}
 8005040:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800504a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800504e:	f043 0301 	orr.w	r3, r3, #1
 8005052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005056:	bf00      	nop
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005068:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800506c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005070:	f023 0301 	bic.w	r3, r3, #1
 8005074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005078:	bf00      	nop
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8005082:	b480      	push	{r7}
 8005084:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b02      	cmp	r3, #2
 8005094:	d101      	bne.n	800509a <LL_RCC_LSI1_IsReady+0x18>
 8005096:	2301      	movs	r3, #1
 8005098:	e000      	b.n	800509c <LL_RCC_LSI1_IsReady+0x1a>
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80050a6:	b480      	push	{r7}
 80050a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80050aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b6:	f043 0304 	orr.w	r3, r3, #4
 80050ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050be:	bf00      	nop
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d8:	f023 0304 	bic.w	r3, r3, #4
 80050dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80050e0:	bf00      	nop
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80050ea:	b480      	push	{r7}
 80050ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80050ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d101      	bne.n	8005102 <LL_RCC_LSI2_IsReady+0x18>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <LL_RCC_LSI2_IsReady+0x1a>
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800511e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800515a:	b480      	push	{r7}
 800515c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800515e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	6013      	str	r3, [r2, #0]
}
 800516e:	bf00      	nop
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800517c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d101      	bne.n	800518e <LL_RCC_MSI_IsReady+0x16>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <LL_RCC_MSI_IsReady+0x18>
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80051a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80051c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2bb0      	cmp	r3, #176	; 0xb0
 80051d8:	d901      	bls.n	80051de <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80051da:	23b0      	movs	r3, #176	; 0xb0
 80051dc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80051de:	687b      	ldr	r3, [r7, #4]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80051f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005206:	4313      	orrs	r3, r2
 8005208:	604b      	str	r3, [r1, #4]
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800521e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f023 0203 	bic.w	r2, r3, #3
 8005228:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800523e:	b480      	push	{r7}
 8005240:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f003 030c 	and.w	r3, r3, #12
}
 800524c:	4618      	mov	r0, r3
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800525e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
}
 8005272:	bf00      	nop
 8005274:	370c      	adds	r7, #12
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800527e:	b480      	push	{r7}
 8005280:	b083      	sub	sp, #12
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800528e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4313      	orrs	r3, r2
 800529a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800529e:	bf00      	nop
 80052a0:	370c      	adds	r7, #12
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80052b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80052ba:	f023 020f 	bic.w	r2, r3, #15
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	091b      	lsrs	r3, r3, #4
 80052c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80052e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	608b      	str	r3, [r1, #8]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4313      	orrs	r3, r2
 800531a:	608b      	str	r3, [r1, #8]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800532c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005336:	4618      	mov	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005344:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005348:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800536a:	4618      	mov	r0, r3
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005382:	4618      	mov	r0, r3
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800539a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80053aa:	b480      	push	{r7}
 80053ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80053ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053bc:	6013      	str	r3, [r2, #0]
}
 80053be:	bf00      	nop
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80053c8:	b480      	push	{r7}
 80053ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80053cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80053da:	d101      	bne.n	80053e0 <LL_RCC_PLL_IsReady+0x18>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <LL_RCC_PLL_IsReady+0x1a>
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80053f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8005414:	4618      	mov	r0, r3
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800541e:	b480      	push	{r7}
 8005420:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr

08005436 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8005436:	b480      	push	{r7}
 8005438:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800543a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f003 0303 	and.w	r3, r3, #3
}
 8005444:	4618      	mov	r0, r3
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800544e:	b480      	push	{r7}
 8005450:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800545c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005460:	d101      	bne.n	8005466 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005462:	2301      	movs	r3, #1
 8005464:	e000      	b.n	8005468 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8005472:	b480      	push	{r7}
 8005474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005486:	d101      	bne.n	800548c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005498:	b480      	push	{r7}
 800549a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800549c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80054a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054ac:	d101      	bne.n	80054b2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	46bd      	mov	sp, r7
 80054b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054bc:	4770      	bx	lr

080054be <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80054be:	b480      	push	{r7}
 80054c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80054c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054d0:	d101      	bne.n	80054d6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80054e2:	b480      	push	{r7}
 80054e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80054e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054f4:	d101      	bne.n	80054fa <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
	...

08005508 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005508:	b590      	push	{r4, r7, lr}
 800550a:	b08d      	sub	sp, #52	; 0x34
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e363      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 808d 	beq.w	8005642 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005528:	f7ff fe89 	bl	800523e <LL_RCC_GetSysClkSource>
 800552c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800552e:	f7ff ff82 	bl	8005436 <LL_RCC_PLL_GetMainSource>
 8005532:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_RCC_OscConfig+0x3e>
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b0c      	cmp	r3, #12
 800553e:	d147      	bne.n	80055d0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	2b01      	cmp	r3, #1
 8005544:	d144      	bne.n	80055d0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	69db      	ldr	r3, [r3, #28]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e347      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005556:	f7ff fe34 	bl	80051c2 <LL_RCC_MSI_GetRange>
 800555a:	4603      	mov	r3, r0
 800555c:	429c      	cmp	r4, r3
 800555e:	d914      	bls.n	800558a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	4618      	mov	r0, r3
 8005566:	f000 fd2f 	bl	8005fc8 <RCC_SetFlashLatencyFromMSIRange>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e336      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fe0e 	bl	800519a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff fe32 	bl	80051ec <LL_RCC_MSI_SetCalibTrimming>
 8005588:	e013      	b.n	80055b2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fe03 	bl	800519a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fe27 	bl	80051ec <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fd10 	bl	8005fc8 <RCC_SetFlashLatencyFromMSIRange>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e317      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80055b2:	f000 fcc9 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4aa4      	ldr	r2, [pc, #656]	; (800584c <HAL_RCC_OscConfig+0x344>)
 80055ba:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80055bc:	4ba4      	ldr	r3, [pc, #656]	; (8005850 <HAL_RCC_OscConfig+0x348>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fe ffab 	bl	800451c <HAL_InitTick>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d039      	beq.n	8005640 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e308      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	69db      	ldr	r3, [r3, #28]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01e      	beq.n	8005616 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80055d8:	f7ff fdb0 	bl	800513c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80055dc:	f7fe ffec 	bl	80045b8 <HAL_GetTick>
 80055e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80055e4:	f7fe ffe8 	bl	80045b8 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e2f5      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80055f6:	f7ff fdbf 	bl	8005178 <LL_RCC_MSI_IsReady>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f1      	beq.n	80055e4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fdc8 	bl	800519a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff fdec 	bl	80051ec <LL_RCC_MSI_SetCalibTrimming>
 8005614:	e015      	b.n	8005642 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005616:	f7ff fda0 	bl	800515a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800561a:	f7fe ffcd 	bl	80045b8 <HAL_GetTick>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005622:	f7fe ffc9 	bl	80045b8 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e2d6      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005634:	f7ff fda0 	bl	8005178 <LL_RCC_MSI_IsReady>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f1      	bne.n	8005622 <HAL_RCC_OscConfig+0x11a>
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005640:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d047      	beq.n	80056de <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800564e:	f7ff fdf6 	bl	800523e <LL_RCC_GetSysClkSource>
 8005652:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005654:	f7ff feef 	bl	8005436 <LL_RCC_PLL_GetMainSource>
 8005658:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	2b08      	cmp	r3, #8
 800565e:	d005      	beq.n	800566c <HAL_RCC_OscConfig+0x164>
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d108      	bne.n	8005678 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	2b03      	cmp	r3, #3
 800566a:	d105      	bne.n	8005678 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d134      	bne.n	80056de <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e2b4      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d102      	bne.n	8005688 <HAL_RCC_OscConfig+0x180>
 8005682:	f7ff fbdd 	bl	8004e40 <LL_RCC_HSE_Enable>
 8005686:	e001      	b.n	800568c <HAL_RCC_OscConfig+0x184>
 8005688:	f7ff fbe9 	bl	8004e5e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d012      	beq.n	80056ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005694:	f7fe ff90 	bl	80045b8 <HAL_GetTick>
 8005698:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800569c:	f7fe ff8c 	bl	80045b8 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	; 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e299      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80056ae:	f7ff fbe5 	bl	8004e7c <LL_RCC_HSE_IsReady>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f1      	beq.n	800569c <HAL_RCC_OscConfig+0x194>
 80056b8:	e011      	b.n	80056de <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ba:	f7fe ff7d 	bl	80045b8 <HAL_GetTick>
 80056be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056c2:	f7fe ff79 	bl	80045b8 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b64      	cmp	r3, #100	; 0x64
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e286      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80056d4:	f7ff fbd2 	bl	8004e7c <LL_RCC_HSE_IsReady>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1f1      	bne.n	80056c2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d04c      	beq.n	8005784 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056ea:	f7ff fda8 	bl	800523e <LL_RCC_GetSysClkSource>
 80056ee:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056f0:	f7ff fea1 	bl	8005436 <LL_RCC_PLL_GetMainSource>
 80056f4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d005      	beq.n	8005708 <HAL_RCC_OscConfig+0x200>
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	2b0c      	cmp	r3, #12
 8005700:	d10e      	bne.n	8005720 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b02      	cmp	r3, #2
 8005706:	d10b      	bne.n	8005720 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e266      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff fbf1 	bl	8004f00 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800571e:	e031      	b.n	8005784 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005728:	f7ff fbba 	bl	8004ea0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572c:	f7fe ff44 	bl	80045b8 <HAL_GetTick>
 8005730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005732:	e008      	b.n	8005746 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005734:	f7fe ff40 	bl	80045b8 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d901      	bls.n	8005746 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e24d      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005746:	f7ff fbc9 	bl	8004edc <LL_RCC_HSI_IsReady>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f1      	beq.n	8005734 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	4618      	mov	r0, r3
 8005756:	f7ff fbd3 	bl	8004f00 <LL_RCC_HSI_SetCalibTrimming>
 800575a:	e013      	b.n	8005784 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800575c:	f7ff fbaf 	bl	8004ebe <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fe ff2a 	bl	80045b8 <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005768:	f7fe ff26 	bl	80045b8 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e233      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800577a:	f7ff fbaf 	bl	8004edc <LL_RCC_HSI_IsReady>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f1      	bne.n	8005768 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0308 	and.w	r3, r3, #8
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 80a3 	beq.w	80058e4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d076      	beq.n	8005894 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0310 	and.w	r3, r3, #16
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d046      	beq.n	8005840 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80057b2:	f7ff fc66 	bl	8005082 <LL_RCC_LSI1_IsReady>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d113      	bne.n	80057e4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80057bc:	f7ff fc3f 	bl	800503e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057c0:	f7fe fefa 	bl	80045b8 <HAL_GetTick>
 80057c4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80057c6:	e008      	b.n	80057da <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80057c8:	f7fe fef6 	bl	80045b8 <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e203      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80057da:	f7ff fc52 	bl	8005082 <LL_RCC_LSI1_IsReady>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f1      	beq.n	80057c8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80057e4:	f7ff fc5f 	bl	80050a6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fe fee6 	bl	80045b8 <HAL_GetTick>
 80057ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80057f0:	f7fe fee2 	bl	80045b8 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e1ef      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005802:	f7ff fc72 	bl	80050ea <LL_RCC_LSI2_IsReady>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0f1      	beq.n	80057f0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	4618      	mov	r0, r3
 8005812:	f7ff fc7c 	bl	800510e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005816:	f7ff fc23 	bl	8005060 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7fe fecd 	bl	80045b8 <HAL_GetTick>
 800581e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005822:	f7fe fec9 	bl	80045b8 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e1d6      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005834:	f7ff fc25 	bl	8005082 <LL_RCC_LSI1_IsReady>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1f1      	bne.n	8005822 <HAL_RCC_OscConfig+0x31a>
 800583e:	e051      	b.n	80058e4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005840:	f7ff fbfd 	bl	800503e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005844:	f7fe feb8 	bl	80045b8 <HAL_GetTick>
 8005848:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800584a:	e00c      	b.n	8005866 <HAL_RCC_OscConfig+0x35e>
 800584c:	2000000c 	.word	0x2000000c
 8005850:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005854:	f7fe feb0 	bl	80045b8 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e1bd      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005866:	f7ff fc0c 	bl	8005082 <LL_RCC_LSI1_IsReady>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0f1      	beq.n	8005854 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005870:	f7ff fc2a 	bl	80050c8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005876:	f7fe fe9f 	bl	80045b8 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b03      	cmp	r3, #3
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e1ac      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005888:	f7ff fc2f 	bl	80050ea <LL_RCC_LSI2_IsReady>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f1      	bne.n	8005876 <HAL_RCC_OscConfig+0x36e>
 8005892:	e027      	b.n	80058e4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005894:	f7ff fc18 	bl	80050c8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005898:	f7fe fe8e 	bl	80045b8 <HAL_GetTick>
 800589c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800589e:	e008      	b.n	80058b2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80058a0:	f7fe fe8a 	bl	80045b8 <HAL_GetTick>
 80058a4:	4602      	mov	r2, r0
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d901      	bls.n	80058b2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e197      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80058b2:	f7ff fc1a 	bl	80050ea <LL_RCC_LSI2_IsReady>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1f1      	bne.n	80058a0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80058bc:	f7ff fbd0 	bl	8005060 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058c0:	f7fe fe7a 	bl	80045b8 <HAL_GetTick>
 80058c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80058c6:	e008      	b.n	80058da <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80058c8:	f7fe fe76 	bl	80045b8 <HAL_GetTick>
 80058cc:	4602      	mov	r2, r0
 80058ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	d901      	bls.n	80058da <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e183      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80058da:	f7ff fbd2 	bl	8005082 <LL_RCC_LSI1_IsReady>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f1      	bne.n	80058c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0304 	and.w	r3, r3, #4
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d05b      	beq.n	80059a8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058f0:	4ba7      	ldr	r3, [pc, #668]	; (8005b90 <HAL_RCC_OscConfig+0x688>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d114      	bne.n	8005926 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80058fc:	f7ff fa70 	bl	8004de0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005900:	f7fe fe5a 	bl	80045b8 <HAL_GetTick>
 8005904:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005906:	e008      	b.n	800591a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005908:	f7fe fe56 	bl	80045b8 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d901      	bls.n	800591a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005916:	2303      	movs	r3, #3
 8005918:	e163      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800591a:	4b9d      	ldr	r3, [pc, #628]	; (8005b90 <HAL_RCC_OscConfig+0x688>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f0      	beq.n	8005908 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d102      	bne.n	8005934 <HAL_RCC_OscConfig+0x42c>
 800592e:	f7ff fb30 	bl	8004f92 <LL_RCC_LSE_Enable>
 8005932:	e00c      	b.n	800594e <HAL_RCC_OscConfig+0x446>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b05      	cmp	r3, #5
 800593a:	d104      	bne.n	8005946 <HAL_RCC_OscConfig+0x43e>
 800593c:	f7ff fb4b 	bl	8004fd6 <LL_RCC_LSE_EnableBypass>
 8005940:	f7ff fb27 	bl	8004f92 <LL_RCC_LSE_Enable>
 8005944:	e003      	b.n	800594e <HAL_RCC_OscConfig+0x446>
 8005946:	f7ff fb35 	bl	8004fb4 <LL_RCC_LSE_Disable>
 800594a:	f7ff fb55 	bl	8004ff8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d014      	beq.n	8005980 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005956:	f7fe fe2f 	bl	80045b8 <HAL_GetTick>
 800595a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800595c:	e00a      	b.n	8005974 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fe fe2b 	bl	80045b8 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	f241 3288 	movw	r2, #5000	; 0x1388
 800596c:	4293      	cmp	r3, r2
 800596e:	d901      	bls.n	8005974 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e136      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005974:	f7ff fb51 	bl	800501a <LL_RCC_LSE_IsReady>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0ef      	beq.n	800595e <HAL_RCC_OscConfig+0x456>
 800597e:	e013      	b.n	80059a8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005980:	f7fe fe1a 	bl	80045b8 <HAL_GetTick>
 8005984:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005986:	e00a      	b.n	800599e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005988:	f7fe fe16 	bl	80045b8 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e121      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800599e:	f7ff fb3c 	bl	800501a <LL_RCC_LSE_IsReady>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ef      	bne.n	8005988 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d02c      	beq.n	8005a0e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d014      	beq.n	80059e6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80059bc:	f7ff fab5 	bl	8004f2a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c0:	f7fe fdfa 	bl	80045b8 <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059c8:	f7fe fdf6 	bl	80045b8 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e103      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80059da:	f7ff fac8 	bl	8004f6e <LL_RCC_HSI48_IsReady>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0f1      	beq.n	80059c8 <HAL_RCC_OscConfig+0x4c0>
 80059e4:	e013      	b.n	8005a0e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059e6:	f7ff fab1 	bl	8004f4c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ea:	f7fe fde5 	bl	80045b8 <HAL_GetTick>
 80059ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80059f0:	e008      	b.n	8005a04 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059f2:	f7fe fde1 	bl	80045b8 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e0ee      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005a04:	f7ff fab3 	bl	8004f6e <LL_RCC_HSI48_IsReady>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f1      	bne.n	80059f2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 80e4 	beq.w	8005be0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a18:	f7ff fc11 	bl	800523e <LL_RCC_GetSysClkSource>
 8005a1c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	f040 80b4 	bne.w	8005b98 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f003 0203 	and.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d123      	bne.n	8005a86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d11c      	bne.n	8005a86 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	0a1b      	lsrs	r3, r3, #8
 8005a50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d114      	bne.n	8005a86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d10d      	bne.n	8005a86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d106      	bne.n	8005a86 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d05d      	beq.n	8005b42 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	2b0c      	cmp	r3, #12
 8005a8a:	d058      	beq.n	8005b3e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d001      	beq.n	8005a9e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e0a1      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a9e:	f7ff fc84 	bl	80053aa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005aa2:	f7fe fd89 	bl	80045b8 <HAL_GetTick>
 8005aa6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa8:	e008      	b.n	8005abc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aaa:	f7fe fd85 	bl	80045b8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	2b02      	cmp	r3, #2
 8005ab6:	d901      	bls.n	8005abc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e092      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1ef      	bne.n	8005aaa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	4b30      	ldr	r3, [pc, #192]	; (8005b94 <HAL_RCC_OscConfig+0x68c>)
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005adc:	4311      	orrs	r1, r2
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae2:	0212      	lsls	r2, r2, #8
 8005ae4:	4311      	orrs	r1, r2
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005aea:	4311      	orrs	r1, r2
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005af0:	4311      	orrs	r1, r2
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005af6:	430a      	orrs	r2, r1
 8005af8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005afc:	4313      	orrs	r3, r2
 8005afe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005b00:	f7ff fc44 	bl	800538c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b14:	f7fe fd50 	bl	80045b8 <HAL_GetTick>
 8005b18:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b1a:	e008      	b.n	8005b2e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b1c:	f7fe fd4c 	bl	80045b8 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d901      	bls.n	8005b2e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e059      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d0ef      	beq.n	8005b1c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b3c:	e050      	b.n	8005be0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e04f      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d147      	bne.n	8005be0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005b50:	f7ff fc1c 	bl	800538c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b64:	f7fe fd28 	bl	80045b8 <HAL_GetTick>
 8005b68:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b6c:	f7fe fd24 	bl	80045b8 <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e031      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d0ef      	beq.n	8005b6c <HAL_RCC_OscConfig+0x664>
 8005b8c:	e028      	b.n	8005be0 <HAL_RCC_OscConfig+0x6d8>
 8005b8e:	bf00      	nop
 8005b90:	58000400 	.word	0x58000400
 8005b94:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d01e      	beq.n	8005bdc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9e:	f7ff fc04 	bl	80053aa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba2:	f7fe fd09 	bl	80045b8 <HAL_GetTick>
 8005ba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005baa:	f7fe fd05 	bl	80045b8 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e012      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1ef      	bne.n	8005baa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bd4:	4b05      	ldr	r3, [pc, #20]	; (8005bec <HAL_RCC_OscConfig+0x6e4>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	60cb      	str	r3, [r1, #12]
 8005bda:	e001      	b.n	8005be0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3734      	adds	r7, #52	; 0x34
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd90      	pop	{r4, r7, pc}
 8005bea:	bf00      	nop
 8005bec:	eefefffc 	.word	0xeefefffc

08005bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e12d      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c04:	4b98      	ldr	r3, [pc, #608]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d91b      	bls.n	8005c4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c12:	4b95      	ldr	r3, [pc, #596]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f023 0207 	bic.w	r2, r3, #7
 8005c1a:	4993      	ldr	r1, [pc, #588]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c22:	f7fe fcc9 	bl	80045b8 <HAL_GetTick>
 8005c26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c2a:	f7fe fcc5 	bl	80045b8 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e111      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3c:	4b8a      	ldr	r3, [pc, #552]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d1ef      	bne.n	8005c2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff fafb 	bl	8005256 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c60:	f7fe fcaa 	bl	80045b8 <HAL_GetTick>
 8005c64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c68:	f7fe fca6 	bl	80045b8 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e0f2      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005c7a:	f7ff fbe8 	bl	800544e <LL_RCC_IsActiveFlag_HPRE>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0f1      	beq.n	8005c68 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d016      	beq.n	8005cbe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff faf2 	bl	800527e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005c9a:	f7fe fc8d 	bl	80045b8 <HAL_GetTick>
 8005c9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ca2:	f7fe fc89 	bl	80045b8 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0d5      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005cb4:	f7ff fbdd 	bl	8005472 <LL_RCC_IsActiveFlag_C2HPRE>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d0f1      	beq.n	8005ca2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d016      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff faeb 	bl	80052aa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005cd4:	f7fe fc70 	bl	80045b8 <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cdc:	f7fe fc6c 	bl	80045b8 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e0b8      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005cee:	f7ff fbd3 	bl	8005498 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f1      	beq.n	8005cdc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fae5 	bl	80052d8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d0e:	f7fe fc53 	bl	80045b8 <HAL_GetTick>
 8005d12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d14:	e008      	b.n	8005d28 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d16:	f7fe fc4f 	bl	80045b8 <HAL_GetTick>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d901      	bls.n	8005d28 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e09b      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d28:	f7ff fbc9 	bl	80054be <LL_RCC_IsActiveFlag_PPRE1>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f1      	beq.n	8005d16 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d017      	beq.n	8005d6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff fadb 	bl	8005300 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d4a:	f7fe fc35 	bl	80045b8 <HAL_GetTick>
 8005d4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d52:	f7fe fc31 	bl	80045b8 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e07d      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d64:	f7ff fbbd 	bl	80054e2 <LL_RCC_IsActiveFlag_PPRE2>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f1      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d043      	beq.n	8005e02 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d106      	bne.n	8005d90 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005d82:	f7ff f87b 	bl	8004e7c <LL_RCC_HSE_IsReady>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d11e      	bne.n	8005dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e067      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b03      	cmp	r3, #3
 8005d96:	d106      	bne.n	8005da6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005d98:	f7ff fb16 	bl	80053c8 <LL_RCC_PLL_IsReady>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d113      	bne.n	8005dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e05c      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005dae:	f7ff f9e3 	bl	8005178 <LL_RCC_MSI_IsReady>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d108      	bne.n	8005dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e051      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005dbc:	f7ff f88e 	bl	8004edc <LL_RCC_HSI_IsReady>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e04a      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fa21 	bl	8005216 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dd4:	f7fe fbf0 	bl	80045b8 <HAL_GetTick>
 8005dd8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ddc:	f7fe fbec 	bl	80045b8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e036      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005df2:	f7ff fa24 	bl	800523e <LL_RCC_GetSysClkSource>
 8005df6:	4602      	mov	r2, r0
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d1ec      	bne.n	8005ddc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e02:	4b19      	ldr	r3, [pc, #100]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	683a      	ldr	r2, [r7, #0]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d21b      	bcs.n	8005e48 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e10:	4b15      	ldr	r3, [pc, #84]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f023 0207 	bic.w	r2, r3, #7
 8005e18:	4913      	ldr	r1, [pc, #76]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e20:	f7fe fbca 	bl	80045b8 <HAL_GetTick>
 8005e24:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e28:	f7fe fbc6 	bl	80045b8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e012      	b.n	8005e60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <HAL_RCC_ClockConfig+0x278>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d1ef      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e48:	f000 f87e 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4a07      	ldr	r2, [pc, #28]	; (8005e6c <HAL_RCC_ClockConfig+0x27c>)
 8005e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005e52:	f7fe fbbd 	bl	80045d0 <HAL_GetTickPrio>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fb5f 	bl	800451c <HAL_InitTick>
 8005e5e:	4603      	mov	r3, r0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	58004000 	.word	0x58004000
 8005e6c:	2000000c 	.word	0x2000000c

08005e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e70:	b590      	push	{r4, r7, lr}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e76:	f7ff f9e2 	bl	800523e <LL_RCC_GetSysClkSource>
 8005e7a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005e82:	f7ff f99e 	bl	80051c2 <LL_RCC_MSI_GetRange>
 8005e86:	4603      	mov	r3, r0
 8005e88:	091b      	lsrs	r3, r3, #4
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	4a2b      	ldr	r2, [pc, #172]	; (8005f3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	e04b      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b04      	cmp	r3, #4
 8005e9c:	d102      	bne.n	8005ea4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e9e:	4b28      	ldr	r3, [pc, #160]	; (8005f40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e045      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d10a      	bne.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005eaa:	f7fe ffb7 	bl	8004e1c <LL_RCC_HSE_IsEnabledDiv2>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d102      	bne.n	8005eba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e03a      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005eba:	4b22      	ldr	r3, [pc, #136]	; (8005f44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e037      	b.n	8005f30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005ec0:	f7ff fab9 	bl	8005436 <LL_RCC_PLL_GetMainSource>
 8005ec4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d003      	beq.n	8005ed4 <HAL_RCC_GetSysClockFreq+0x64>
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d003      	beq.n	8005eda <HAL_RCC_GetSysClockFreq+0x6a>
 8005ed2:	e00d      	b.n	8005ef0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005ed4:	4b1a      	ldr	r3, [pc, #104]	; (8005f40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ed6:	60bb      	str	r3, [r7, #8]
        break;
 8005ed8:	e015      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005eda:	f7fe ff9f 	bl	8004e1c <LL_RCC_HSE_IsEnabledDiv2>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d102      	bne.n	8005eea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005ee4:	4b16      	ldr	r3, [pc, #88]	; (8005f40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005ee6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005ee8:	e00d      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005eea:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005eec:	60bb      	str	r3, [r7, #8]
        break;
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005ef0:	f7ff f967 	bl	80051c2 <LL_RCC_MSI_GetRange>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	091b      	lsrs	r3, r3, #4
 8005ef8:	f003 030f 	and.w	r3, r3, #15
 8005efc:	4a0f      	ldr	r2, [pc, #60]	; (8005f3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f02:	60bb      	str	r3, [r7, #8]
        break;
 8005f04:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005f06:	f7ff fa71 	bl	80053ec <LL_RCC_PLL_GetN>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	fb03 f402 	mul.w	r4, r3, r2
 8005f12:	f7ff fa84 	bl	800541e <LL_RCC_PLL_GetDivider>
 8005f16:	4603      	mov	r3, r0
 8005f18:	091b      	lsrs	r3, r3, #4
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005f20:	f7ff fa71 	bl	8005406 <LL_RCC_PLL_GetR>
 8005f24:	4603      	mov	r3, r0
 8005f26:	0f5b      	lsrs	r3, r3, #29
 8005f28:	3301      	adds	r3, #1
 8005f2a:	fbb4 f3f3 	udiv	r3, r4, r3
 8005f2e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005f30:	68fb      	ldr	r3, [r7, #12]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3714      	adds	r7, #20
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	0800b060 	.word	0x0800b060
 8005f40:	00f42400 	.word	0x00f42400
 8005f44:	01e84800 	.word	0x01e84800

08005f48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f48:	b598      	push	{r3, r4, r7, lr}
 8005f4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005f4c:	f7ff ff90 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8005f50:	4604      	mov	r4, r0
 8005f52:	f7ff f9e9 	bl	8005328 <LL_RCC_GetAHBPrescaler>
 8005f56:	4603      	mov	r3, r0
 8005f58:	091b      	lsrs	r3, r3, #4
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	4a03      	ldr	r2, [pc, #12]	; (8005f6c <HAL_RCC_GetHCLKFreq+0x24>)
 8005f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	bd98      	pop	{r3, r4, r7, pc}
 8005f6c:	0800b000 	.word	0x0800b000

08005f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f70:	b598      	push	{r3, r4, r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005f74:	f7ff ffe8 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8005f78:	4604      	mov	r4, r0
 8005f7a:	f7ff f9ef 	bl	800535c <LL_RCC_GetAPB1Prescaler>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	4a04      	ldr	r2, [pc, #16]	; (8005f98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f8c:	f003 031f 	and.w	r3, r3, #31
 8005f90:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	bd98      	pop	{r3, r4, r7, pc}
 8005f98:	0800b040 	.word	0x0800b040

08005f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f9c:	b598      	push	{r3, r4, r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005fa0:	f7ff ffd2 	bl	8005f48 <HAL_RCC_GetHCLKFreq>
 8005fa4:	4604      	mov	r4, r0
 8005fa6:	f7ff f9e5 	bl	8005374 <LL_RCC_GetAPB2Prescaler>
 8005faa:	4603      	mov	r3, r0
 8005fac:	0adb      	lsrs	r3, r3, #11
 8005fae:	f003 0307 	and.w	r3, r3, #7
 8005fb2:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fb8:	f003 031f 	and.w	r3, r3, #31
 8005fbc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd98      	pop	{r3, r4, r7, pc}
 8005fc4:	0800b040 	.word	0x0800b040

08005fc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005fc8:	b590      	push	{r4, r7, lr}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2bb0      	cmp	r3, #176	; 0xb0
 8005fd4:	d903      	bls.n	8005fde <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005fd6:	4b15      	ldr	r3, [pc, #84]	; (800602c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	e007      	b.n	8005fee <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	091b      	lsrs	r3, r3, #4
 8005fe2:	f003 030f 	and.w	r3, r3, #15
 8005fe6:	4a11      	ldr	r2, [pc, #68]	; (800602c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005fe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fec:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005fee:	f7ff f9a7 	bl	8005340 <LL_RCC_GetAHB4Prescaler>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	091b      	lsrs	r3, r3, #4
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	4a0d      	ldr	r2, [pc, #52]	; (8006030 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	fbb2 f3f3 	udiv	r3, r2, r3
 8006006:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	0c9c      	lsrs	r4, r3, #18
 8006012:	f7fe fef5 	bl	8004e00 <HAL_PWREx_GetVoltageRange>
 8006016:	4603      	mov	r3, r0
 8006018:	4619      	mov	r1, r3
 800601a:	4620      	mov	r0, r4
 800601c:	f000 f80c 	bl	8006038 <RCC_SetFlashLatency>
 8006020:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006022:	4618      	mov	r0, r3
 8006024:	3714      	adds	r7, #20
 8006026:	46bd      	mov	sp, r7
 8006028:	bd90      	pop	{r4, r7, pc}
 800602a:	bf00      	nop
 800602c:	0800b060 	.word	0x0800b060
 8006030:	0800b000 	.word	0x0800b000
 8006034:	431bde83 	.word	0x431bde83

08006038 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006038:	b590      	push	{r4, r7, lr}
 800603a:	b093      	sub	sp, #76	; 0x4c
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006042:	4b37      	ldr	r3, [pc, #220]	; (8006120 <RCC_SetFlashLatency+0xe8>)
 8006044:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800604a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800604e:	4a35      	ldr	r2, [pc, #212]	; (8006124 <RCC_SetFlashLatency+0xec>)
 8006050:	f107 031c 	add.w	r3, r7, #28
 8006054:	ca07      	ldmia	r2, {r0, r1, r2}
 8006056:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800605a:	4b33      	ldr	r3, [pc, #204]	; (8006128 <RCC_SetFlashLatency+0xf0>)
 800605c:	f107 040c 	add.w	r4, r7, #12
 8006060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006062:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006066:	2300      	movs	r3, #0
 8006068:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006070:	d11a      	bne.n	80060a8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006072:	2300      	movs	r3, #0
 8006074:	643b      	str	r3, [r7, #64]	; 0x40
 8006076:	e013      	b.n	80060a0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	3348      	adds	r3, #72	; 0x48
 800607e:	443b      	add	r3, r7
 8006080:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	429a      	cmp	r2, r3
 8006088:	d807      	bhi.n	800609a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800608a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	3348      	adds	r3, #72	; 0x48
 8006090:	443b      	add	r3, r7
 8006092:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006096:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006098:	e020      	b.n	80060dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800609a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609c:	3301      	adds	r3, #1
 800609e:	643b      	str	r3, [r7, #64]	; 0x40
 80060a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d9e8      	bls.n	8006078 <RCC_SetFlashLatency+0x40>
 80060a6:	e019      	b.n	80060dc <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060a8:	2300      	movs	r3, #0
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060ac:	e013      	b.n	80060d6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80060ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	3348      	adds	r3, #72	; 0x48
 80060b4:	443b      	add	r3, r7
 80060b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d807      	bhi.n	80060d0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80060c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	3348      	adds	r3, #72	; 0x48
 80060c6:	443b      	add	r3, r7
 80060c8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80060cc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80060ce:	e005      	b.n	80060dc <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80060d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d2:	3301      	adds	r3, #1
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d9e8      	bls.n	80060ae <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <RCC_SetFlashLatency+0xf4>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f023 0207 	bic.w	r2, r3, #7
 80060e4:	4911      	ldr	r1, [pc, #68]	; (800612c <RCC_SetFlashLatency+0xf4>)
 80060e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060e8:	4313      	orrs	r3, r2
 80060ea:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060ec:	f7fe fa64 	bl	80045b8 <HAL_GetTick>
 80060f0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80060f2:	e008      	b.n	8006106 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80060f4:	f7fe fa60 	bl	80045b8 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d901      	bls.n	8006106 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e007      	b.n	8006116 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006106:	4b09      	ldr	r3, [pc, #36]	; (800612c <RCC_SetFlashLatency+0xf4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006110:	429a      	cmp	r2, r3
 8006112:	d1ef      	bne.n	80060f4 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	374c      	adds	r7, #76	; 0x4c
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	0800afd4 	.word	0x0800afd4
 8006124:	0800afe4 	.word	0x0800afe4
 8006128:	0800aff0 	.word	0x0800aff0
 800612c:	58004000 	.word	0x58004000

08006130 <LL_RCC_LSE_IsEnabled>:
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <LL_RCC_LSE_IsEnabled+0x18>
 8006144:	2301      	movs	r3, #1
 8006146:	e000      	b.n	800614a <LL_RCC_LSE_IsEnabled+0x1a>
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <LL_RCC_LSE_IsReady>:
{
 8006154:	b480      	push	{r7}
 8006156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b02      	cmp	r3, #2
 8006166:	d101      	bne.n	800616c <LL_RCC_LSE_IsReady+0x18>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <LL_RCC_LSE_IsReady+0x1a>
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <LL_RCC_MSI_EnablePLLMode>:
{
 8006178:	b480      	push	{r7}
 800617a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800617c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006186:	f043 0304 	orr.w	r3, r3, #4
 800618a:	6013      	str	r3, [r2, #0]
}
 800618c:	bf00      	nop
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <LL_RCC_SetRFWKPClockSource>:
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800619e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80061b6:	bf00      	nop
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <LL_RCC_SetSMPSClockSource>:
{
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f023 0203 	bic.w	r2, r3, #3
 80061d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4313      	orrs	r3, r2
 80061dc:	624b      	str	r3, [r1, #36]	; 0x24
}
 80061de:	bf00      	nop
 80061e0:	370c      	adds	r7, #12
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <LL_RCC_SetSMPSPrescaler>:
{
 80061ea:	b480      	push	{r7}
 80061ec:	b083      	sub	sp, #12
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80061f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80061fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4313      	orrs	r3, r2
 8006204:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006206:	bf00      	nop
 8006208:	370c      	adds	r7, #12
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <LL_RCC_SetUSARTClockSource>:
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800621a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006222:	f023 0203 	bic.w	r2, r3, #3
 8006226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4313      	orrs	r3, r2
 800622e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <LL_RCC_SetLPUARTClockSource>:
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <LL_RCC_SetI2CClockSource>:
{
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006276:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	091b      	lsrs	r3, r3, #4
 800627e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006282:	43db      	mvns	r3, r3
 8006284:	401a      	ands	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800628e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006292:	4313      	orrs	r3, r2
 8006294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006298:	bf00      	nop
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <LL_RCC_SetLPTIMClockSource>:
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80062ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	0c1b      	lsrs	r3, r3, #16
 80062b8:	041b      	lsls	r3, r3, #16
 80062ba:	43db      	mvns	r3, r3
 80062bc:	401a      	ands	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	041b      	lsls	r3, r3, #16
 80062c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr

080062d8 <LL_RCC_SetSAIClockSource>:
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80062e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <LL_RCC_SetRNGClockSource>:
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800630c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006314:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006318:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4313      	orrs	r3, r2
 8006320:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <LL_RCC_SetCLK48ClockSource>:
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8006338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800633c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006340:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <LL_RCC_SetUSBClockSource>:
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f7ff ffe3 	bl	8006330 <LL_RCC_SetCLK48ClockSource>
}
 800636a:	bf00      	nop
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <LL_RCC_SetADCClockSource>:
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800637a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <LL_RCC_SetRTCClockSource>:
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80063a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <LL_RCC_GetRTCClockSource>:
{
 80063ca:	b480      	push	{r7}
 80063cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80063ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80063da:	4618      	mov	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_RCC_ForceBackupDomainReset>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80063e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80063fc:	bf00      	nop
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006406:	b480      	push	{r7}
 8006408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800640a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800641a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800641e:	bf00      	nop
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_RCC_PLLSAI1_Enable>:
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800642c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <LL_RCC_PLLSAI1_Disable>:
{
 8006446:	b480      	push	{r7}
 8006448:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800644a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006454:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006458:	6013      	str	r3, [r2, #0]
}
 800645a:	bf00      	nop
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <LL_RCC_PLLSAI1_IsReady>:
{
 8006464:	b480      	push	{r7}
 8006466:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8006468:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006472:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006476:	d101      	bne.n	800647c <LL_RCC_PLLSAI1_IsReady+0x18>
 8006478:	2301      	movs	r3, #1
 800647a:	e000      	b.n	800647e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b088      	sub	sp, #32
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006490:	2300      	movs	r3, #0
 8006492:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006494:	2300      	movs	r3, #0
 8006496:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d034      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064ac:	d021      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80064ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80064b2:	d81b      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064b8:	d01d      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80064ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064be:	d815      	bhi.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x54>
 80064c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064c8:	d110      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80064ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80064da:	e00d      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f94d 	bl	8006780 <RCCEx_PLLSAI1_ConfigNP>
 80064e6:	4603      	mov	r3, r0
 80064e8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064ea:	e005      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	77fb      	strb	r3, [r7, #31]
        break;
 80064f0:	e002      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80064f2:	bf00      	nop
 80064f4:	e000      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80064f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064f8:	7ffb      	ldrb	r3, [r7, #31]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fee8 	bl	80062d8 <LL_RCC_SetSAIClockSource>
 8006508:	e001      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650a:	7ffb      	ldrb	r3, [r7, #31]
 800650c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006516:	2b00      	cmp	r3, #0
 8006518:	d046      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800651a:	f7ff ff56 	bl	80063ca <LL_RCC_GetRTCClockSource>
 800651e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	429a      	cmp	r2, r3
 8006528:	d03c      	beq.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800652a:	f7fe fc59 	bl	8004de0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d105      	bne.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	4618      	mov	r0, r3
 800653a:	f7ff ff30 	bl	800639e <LL_RCC_SetRTCClockSource>
 800653e:	e02e      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006548:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800654a:	f7ff ff4b 	bl	80063e4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800654e:	f7ff ff5a 	bl	8006406 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800656a:	f7ff fde1 	bl	8006130 <LL_RCC_LSE_IsEnabled>
 800656e:	4603      	mov	r3, r0
 8006570:	2b01      	cmp	r3, #1
 8006572:	d114      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006574:	f7fe f820 	bl	80045b8 <HAL_GetTick>
 8006578:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800657a:	e00b      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fe f81c 	bl	80045b8 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	; 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d902      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	77fb      	strb	r3, [r7, #31]
              break;
 8006592:	e004      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8006594:	f7ff fdde 	bl	8006154 <LL_RCC_LSE_IsReady>
 8006598:	4603      	mov	r3, r0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d1ee      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800659e:	7ffb      	ldrb	r3, [r7, #31]
 80065a0:	77bb      	strb	r3, [r7, #30]
 80065a2:	e001      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	7ffb      	ldrb	r3, [r7, #31]
 80065a6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d004      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fe2a 	bl	8006212 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0302 	and.w	r3, r3, #2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d004      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7ff fe35 	bl	800623e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff fe5d 	bl	80062a4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0320 	and.w	r3, r3, #32
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d004      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7ff fe52 	bl	80062a4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fe2a 	bl	800626a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b00      	cmp	r3, #0
 8006620:	d004      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006626:	4618      	mov	r0, r3
 8006628:	f7ff fe1f 	bl	800626a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006634:	2b00      	cmp	r3, #0
 8006636:	d022      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff fe8d 	bl	800635c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800664a:	d107      	bne.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800664c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800665a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006664:	d10b      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f000 f8e3 	bl	8006836 <RCCEx_PLLSAI1_ConfigNQ>
 8006670:	4603      	mov	r3, r0
 8006672:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006674:	7ffb      	ldrb	r3, [r7, #31]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800667a:	7ffb      	ldrb	r3, [r7, #31]
 800667c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006686:	2b00      	cmp	r3, #0
 8006688:	d02b      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006692:	d008      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800669c:	d003      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d105      	bne.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff fe2a 	bl	8006304 <LL_RCC_SetRNGClockSource>
 80066b0:	e00a      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	2000      	movs	r0, #0
 80066be:	f7ff fe21 	bl	8006304 <LL_RCC_SetRNGClockSource>
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fe34 	bl	8006330 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066cc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80066d0:	d107      	bne.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80066d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066e0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d022      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7ff fe3d 	bl	8006372 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006700:	d107      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800670c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006710:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006716:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800671a:	d10b      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f8e3 	bl	80068ec <RCCEx_PLLSAI1_ConfigNR>
 8006726:	4603      	mov	r3, r0
 8006728:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800672a:	7ffb      	ldrb	r3, [r7, #31]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006730:	7ffb      	ldrb	r3, [r7, #31]
 8006732:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006744:	4618      	mov	r0, r3
 8006746:	f7ff fd26 	bl	8006196 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d009      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff fd45 	bl	80061ea <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006764:	4618      	mov	r0, r3
 8006766:	f7ff fd2c 	bl	80061c2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800676a:	7fbb      	ldrb	r3, [r7, #30]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3720      	adds	r7, #32
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006778:	f7ff fcfe 	bl	8006178 <LL_RCC_MSI_EnablePLLMode>
}
 800677c:	bf00      	nop
 800677e:	bd80      	pop	{r7, pc}

08006780 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800678c:	f7ff fe5b 	bl	8006446 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006790:	f7fd ff12 	bl	80045b8 <HAL_GetTick>
 8006794:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006796:	e009      	b.n	80067ac <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006798:	f7fd ff0e 	bl	80045b8 <HAL_GetTick>
 800679c:	4602      	mov	r2, r0
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d902      	bls.n	80067ac <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	73fb      	strb	r3, [r7, #15]
      break;
 80067aa:	e004      	b.n	80067b6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80067ac:	f7ff fe5a 	bl	8006464 <LL_RCC_PLLSAI1_IsReady>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1f0      	bne.n	8006798 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d137      	bne.n	800682c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80067bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	021b      	lsls	r3, r3, #8
 80067cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067d0:	4313      	orrs	r3, r2
 80067d2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80067d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80067e6:	4313      	orrs	r3, r2
 80067e8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80067ea:	f7ff fe1d 	bl	8006428 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067ee:	f7fd fee3 	bl	80045b8 <HAL_GetTick>
 80067f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80067f4:	e009      	b.n	800680a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80067f6:	f7fd fedf 	bl	80045b8 <HAL_GetTick>
 80067fa:	4602      	mov	r2, r0
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d902      	bls.n	800680a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	73fb      	strb	r3, [r7, #15]
        break;
 8006808:	e004      	b.n	8006814 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800680a:	f7ff fe2b 	bl	8006464 <LL_RCC_PLLSAI1_IsReady>
 800680e:	4603      	mov	r3, r0
 8006810:	2b01      	cmp	r3, #1
 8006812:	d1f0      	bne.n	80067f6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800681a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800681e:	691a      	ldr	r2, [r3, #16]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006828:	4313      	orrs	r3, r2
 800682a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800682c:	7bfb      	ldrb	r3, [r7, #15]
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006842:	f7ff fe00 	bl	8006446 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006846:	f7fd feb7 	bl	80045b8 <HAL_GetTick>
 800684a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800684c:	e009      	b.n	8006862 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800684e:	f7fd feb3 	bl	80045b8 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d902      	bls.n	8006862 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	73fb      	strb	r3, [r7, #15]
      break;
 8006860:	e004      	b.n	800686c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006862:	f7ff fdff 	bl	8006464 <LL_RCC_PLLSAI1_IsReady>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1f0      	bne.n	800684e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800686c:	7bfb      	ldrb	r3, [r7, #15]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d137      	bne.n	80068e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	021b      	lsls	r3, r3, #8
 8006882:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006886:	4313      	orrs	r3, r2
 8006888:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800688a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800689c:	4313      	orrs	r3, r2
 800689e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80068a0:	f7ff fdc2 	bl	8006428 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068a4:	f7fd fe88 	bl	80045b8 <HAL_GetTick>
 80068a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068aa:	e009      	b.n	80068c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80068ac:	f7fd fe84 	bl	80045b8 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d902      	bls.n	80068c0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	73fb      	strb	r3, [r7, #15]
        break;
 80068be:	e004      	b.n	80068ca <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80068c0:	f7ff fdd0 	bl	8006464 <LL_RCC_PLLSAI1_IsReady>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d1f0      	bne.n	80068ac <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d108      	bne.n	80068e2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80068d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d4:	691a      	ldr	r2, [r3, #16]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068de:	4313      	orrs	r3, r2
 80068e0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068f4:	2300      	movs	r3, #0
 80068f6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80068f8:	f7ff fda5 	bl	8006446 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80068fc:	f7fd fe5c 	bl	80045b8 <HAL_GetTick>
 8006900:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006902:	e009      	b.n	8006918 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006904:	f7fd fe58 	bl	80045b8 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d902      	bls.n	8006918 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	73fb      	strb	r3, [r7, #15]
      break;
 8006916:	e004      	b.n	8006922 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006918:	f7ff fda4 	bl	8006464 <LL_RCC_PLLSAI1_IsReady>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d137      	bne.n	8006998 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	021b      	lsls	r3, r3, #8
 8006938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800693c:	4313      	orrs	r3, r2
 800693e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006952:	4313      	orrs	r3, r2
 8006954:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006956:	f7ff fd67 	bl	8006428 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800695a:	f7fd fe2d 	bl	80045b8 <HAL_GetTick>
 800695e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006960:	e009      	b.n	8006976 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006962:	f7fd fe29 	bl	80045b8 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d902      	bls.n	8006976 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	73fb      	strb	r3, [r7, #15]
        break;
 8006974:	e004      	b.n	8006980 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006976:	f7ff fd75 	bl	8006464 <LL_RCC_PLLSAI1_IsReady>
 800697a:	4603      	mov	r3, r0
 800697c:	2b01      	cmp	r3, #1
 800697e:	d1f0      	bne.n	8006962 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006980:	7bfb      	ldrb	r3, [r7, #15]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d108      	bne.n	8006998 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800698a:	691a      	ldr	r2, [r3, #16]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006994:	4313      	orrs	r3, r2
 8006996:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006998:	7bfb      	ldrb	r3, [r7, #15]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
	...

080069a4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d101      	bne.n	80069b6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e09f      	b.n	8006af6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d106      	bne.n	80069d0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f7fd fa96 	bl	8003efc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2202      	movs	r2, #2
 80069d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80069d8:	4b49      	ldr	r3, [pc, #292]	; (8006b00 <HAL_RTC_Init+0x15c>)
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	d07e      	beq.n	8006ae2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	22ca      	movs	r2, #202	; 0xca
 80069ea:	625a      	str	r2, [r3, #36]	; 0x24
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2253      	movs	r2, #83	; 0x53
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 fac6 	bl	8006f86 <RTC_EnterInitMode>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00a      	beq.n	8006a16 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	22ff      	movs	r2, #255	; 0xff
 8006a06:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2204      	movs	r2, #4
 8006a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	73fb      	strb	r3, [r7, #15]
 8006a14:	e067      	b.n	8006ae6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6812      	ldr	r2, [r2, #0]
 8006a20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a28:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	6899      	ldr	r1, [r3, #8]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68d2      	ldr	r2, [r2, #12]
 8006a50:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6919      	ldr	r1, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	041a      	lsls	r2, r3, #16
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	430a      	orrs	r2, r1
 8006a64:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a74:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0203 	bic.w	r2, r2, #3
 8006a84:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69da      	ldr	r2, [r3, #28]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	431a      	orrs	r2, r3
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d113      	bne.n	8006ad4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fa44 	bl	8006f3a <HAL_RTC_WaitForSynchro>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00d      	beq.n	8006ad4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	22ff      	movs	r2, #255	; 0xff
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e010      	b.n	8006af6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	22ff      	movs	r2, #255	; 0xff
 8006ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	e001      	b.n	8006ae6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006ae6:	7bfb      	ldrb	r3, [r7, #15]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40002800 	.word	0x40002800

08006b04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006b04:	b590      	push	{r4, r7, lr}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_RTC_SetTime+0x1a>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e0b2      	b.n	8006c84 <HAL_RTC_SetTime+0x180>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d126      	bne.n	8006b82 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d102      	bne.n	8006b48 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2200      	movs	r2, #0
 8006b46:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fa44 	bl	8006fda <RTC_ByteToBcd2>
 8006b52:	4603      	mov	r3, r0
 8006b54:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	785b      	ldrb	r3, [r3, #1]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f000 fa3d 	bl	8006fda <RTC_ByteToBcd2>
 8006b60:	4603      	mov	r3, r0
 8006b62:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b64:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	789b      	ldrb	r3, [r3, #2]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fa35 	bl	8006fda <RTC_ByteToBcd2>
 8006b70:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b72:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	78db      	ldrb	r3, [r3, #3]
 8006b7a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	e018      	b.n	8006bb4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2200      	movs	r2, #0
 8006b94:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	785b      	ldrb	r3, [r3, #1]
 8006ba0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006ba2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006ba8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	78db      	ldrb	r3, [r3, #3]
 8006bae:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	22ca      	movs	r2, #202	; 0xca
 8006bba:	625a      	str	r2, [r3, #36]	; 0x24
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2253      	movs	r2, #83	; 0x53
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f9de 	bl	8006f86 <RTC_EnterInitMode>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00d      	beq.n	8006bec <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	22ff      	movs	r2, #255	; 0xff
 8006bd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e04b      	b.n	8006c84 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681a      	ldr	r2, [r3, #0]
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006bf6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006bfa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c0a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	431a      	orrs	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	68da      	ldr	r2, [r3, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c32:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d113      	bne.n	8006c6a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f979 	bl	8006f3a <HAL_RTC_WaitForSynchro>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00d      	beq.n	8006c6a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	22ff      	movs	r2, #255	; 0xff
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2204      	movs	r2, #4
 8006c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e00c      	b.n	8006c84 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	22ff      	movs	r2, #255	; 0xff
 8006c70:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006c82:	2300      	movs	r3, #0
  }
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	371c      	adds	r7, #28
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd90      	pop	{r4, r7, pc}

08006c8c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006cba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006cbe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	0c1b      	lsrs	r3, r3, #16
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	0a1b      	lsrs	r3, r3, #8
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ce8:	b2da      	uxtb	r2, r3
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	0c1b      	lsrs	r3, r3, #16
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d11a      	bne.n	8006d3a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 f986 	bl	800701a <RTC_Bcd2ToByte>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	785b      	ldrb	r3, [r3, #1]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f000 f97d 	bl	800701a <RTC_Bcd2ToByte>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	789b      	ldrb	r3, [r3, #2]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 f974 	bl	800701a <RTC_Bcd2ToByte>
 8006d32:	4603      	mov	r3, r0
 8006d34:	461a      	mov	r2, r3
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006d44:	b590      	push	{r4, r7, lr}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d101      	bne.n	8006d5e <HAL_RTC_SetDate+0x1a>
 8006d5a:	2302      	movs	r3, #2
 8006d5c:	e09c      	b.n	8006e98 <HAL_RTC_SetDate+0x154>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2202      	movs	r2, #2
 8006d6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10e      	bne.n	8006d92 <HAL_RTC_SetDate+0x4e>
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	785b      	ldrb	r3, [r3, #1]
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d008      	beq.n	8006d92 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	785b      	ldrb	r3, [r3, #1]
 8006d84:	f023 0310 	bic.w	r3, r3, #16
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	330a      	adds	r3, #10
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d11c      	bne.n	8006dd2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 f91c 	bl	8006fda <RTC_ByteToBcd2>
 8006da2:	4603      	mov	r3, r0
 8006da4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f000 f915 	bl	8006fda <RTC_ByteToBcd2>
 8006db0:	4603      	mov	r3, r0
 8006db2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006db4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	789b      	ldrb	r3, [r3, #2]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 f90d 	bl	8006fda <RTC_ByteToBcd2>
 8006dc0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006dc2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e00e      	b.n	8006df0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	78db      	ldrb	r3, [r3, #3]
 8006dd6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	785b      	ldrb	r3, [r3, #1]
 8006ddc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dde:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006de4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006dec:	4313      	orrs	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	22ca      	movs	r2, #202	; 0xca
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2253      	movs	r2, #83	; 0x53
 8006dfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006e00:	68f8      	ldr	r0, [r7, #12]
 8006e02:	f000 f8c0 	bl	8006f86 <RTC_EnterInitMode>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00d      	beq.n	8006e28 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	22ff      	movs	r2, #255	; 0xff
 8006e12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2204      	movs	r2, #4
 8006e18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e037      	b.n	8006e98 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006e32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006e36:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68da      	ldr	r2, [r3, #12]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e46:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 0320 	and.w	r3, r3, #32
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d113      	bne.n	8006e7e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f86f 	bl	8006f3a <HAL_RTC_WaitForSynchro>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00d      	beq.n	8006e7e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	22ff      	movs	r2, #255	; 0xff
 8006e68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2204      	movs	r2, #4
 8006e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e00c      	b.n	8006e98 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	22ff      	movs	r2, #255	; 0xff
 8006e84:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006e96:	2300      	movs	r3, #0
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd90      	pop	{r4, r7, pc}

08006ea0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b086      	sub	sp, #24
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006eb6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006eba:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	0c1b      	lsrs	r3, r3, #16
 8006ec0:	b2da      	uxtb	r2, r3
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	0a1b      	lsrs	r3, r3, #8
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 031f 	and.w	r3, r3, #31
 8006ed0:	b2da      	uxtb	r2, r3
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ede:	b2da      	uxtb	r2, r3
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	0b5b      	lsrs	r3, r3, #13
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	b2da      	uxtb	r2, r3
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d11a      	bne.n	8006f30 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	78db      	ldrb	r3, [r3, #3]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f88b 	bl	800701a <RTC_Bcd2ToByte>
 8006f04:	4603      	mov	r3, r0
 8006f06:	461a      	mov	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f000 f882 	bl	800701a <RTC_Bcd2ToByte>
 8006f16:	4603      	mov	r3, r0
 8006f18:	461a      	mov	r2, r3
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	789b      	ldrb	r3, [r3, #2]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 f879 	bl	800701a <RTC_Bcd2ToByte>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}

08006f3a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f3a:	b580      	push	{r7, lr}
 8006f3c:	b084      	sub	sp, #16
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f50:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006f52:	f7fd fb31 	bl	80045b8 <HAL_GetTick>
 8006f56:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f58:	e009      	b.n	8006f6e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f5a:	f7fd fb2d 	bl	80045b8 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f68:	d901      	bls.n	8006f6e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	e007      	b.n	8006f7e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	f003 0320 	and.w	r3, r3, #32
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0ee      	beq.n	8006f5a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d119      	bne.n	8006fd0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006fa6:	f7fd fb07 	bl	80045b8 <HAL_GetTick>
 8006faa:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fac:	e009      	b.n	8006fc2 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006fae:	f7fd fb03 	bl	80045b8 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fbc:	d901      	bls.n	8006fc2 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e007      	b.n	8006fd2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0ee      	beq.n	8006fae <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006fe8:	79fb      	ldrb	r3, [r7, #7]
 8006fea:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006fec:	e005      	b.n	8006ffa <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006ff4:	7afb      	ldrb	r3, [r7, #11]
 8006ff6:	3b0a      	subs	r3, #10
 8006ff8:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006ffa:	7afb      	ldrb	r3, [r7, #11]
 8006ffc:	2b09      	cmp	r3, #9
 8006ffe:	d8f6      	bhi.n	8006fee <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	b2db      	uxtb	r3, r3
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	b2da      	uxtb	r2, r3
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	4313      	orrs	r3, r2
 800700c:	b2db      	uxtb	r3, r3
}
 800700e:	4618      	mov	r0, r3
 8007010:	3714      	adds	r7, #20
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800701a:	b480      	push	{r7}
 800701c:	b085      	sub	sp, #20
 800701e:	af00      	add	r7, sp, #0
 8007020:	4603      	mov	r3, r0
 8007022:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	091b      	lsrs	r3, r3, #4
 8007028:	b2db      	uxtb	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	4613      	mov	r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4413      	add	r3, r2
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	b2da      	uxtb	r2, r3
 800703a:	79fb      	ldrb	r3, [r7, #7]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	b2db      	uxtb	r3, r3
 8007042:	4413      	add	r3, r2
 8007044:	b2db      	uxtb	r3, r3
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr

08007052 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b084      	sub	sp, #16
 8007056:	af00      	add	r7, sp, #0
 8007058:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	e095      	b.n	8007190 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007068:	2b00      	cmp	r3, #0
 800706a:	d108      	bne.n	800707e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007074:	d009      	beq.n	800708a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	61da      	str	r2, [r3, #28]
 800707c:	e005      	b.n	800708a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fc ff55 	bl	8003f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2202      	movs	r2, #2
 80070ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070ca:	d902      	bls.n	80070d2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e002      	b.n	80070d8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80070d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80070e0:	d007      	beq.n	80070f2 <HAL_SPI_Init+0xa0>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070ea:	d002      	beq.n	80070f2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	431a      	orrs	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	699b      	ldr	r3, [r3, #24]
 800711c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007120:	431a      	orrs	r2, r3
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69db      	ldr	r3, [r3, #28]
 8007126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800712a:	431a      	orrs	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a1b      	ldr	r3, [r3, #32]
 8007130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007134:	ea42 0103 	orr.w	r1, r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	0c1b      	lsrs	r3, r3, #16
 800714e:	f003 0204 	and.w	r2, r3, #4
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	f003 0310 	and.w	r3, r3, #16
 800715a:	431a      	orrs	r2, r3
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800716e:	ea42 0103 	orr.w	r1, r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800718e:	2300      	movs	r3, #0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b08a      	sub	sp, #40	; 0x28
 800719c:	af00      	add	r7, sp, #0
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	607a      	str	r2, [r7, #4]
 80071a4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071a6:	2301      	movs	r3, #1
 80071a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_SPI_TransmitReceive+0x26>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e1fb      	b.n	80075b6 <HAL_SPI_TransmitReceive+0x41e>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071c6:	f7fd f9f7 	bl	80045b8 <HAL_GetTick>
 80071ca:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80071d2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80071da:	887b      	ldrh	r3, [r7, #2]
 80071dc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80071de:	887b      	ldrh	r3, [r7, #2]
 80071e0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071e2:	7efb      	ldrb	r3, [r7, #27]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d00e      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x6e>
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071ee:	d106      	bne.n	80071fe <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <HAL_SPI_TransmitReceive+0x66>
 80071f8:	7efb      	ldrb	r3, [r7, #27]
 80071fa:	2b04      	cmp	r3, #4
 80071fc:	d003      	beq.n	8007206 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80071fe:	2302      	movs	r3, #2
 8007200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007204:	e1cd      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_SPI_TransmitReceive+0x80>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d002      	beq.n	8007218 <HAL_SPI_TransmitReceive+0x80>
 8007212:	887b      	ldrh	r3, [r7, #2]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d103      	bne.n	8007220 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800721e:	e1c0      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b04      	cmp	r3, #4
 800722a:	d003      	beq.n	8007234 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2205      	movs	r2, #5
 8007230:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2200      	movs	r2, #0
 8007238:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	687a      	ldr	r2, [r7, #4]
 800723e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	887a      	ldrh	r2, [r7, #2]
 8007244:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	887a      	ldrh	r2, [r7, #2]
 800724c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	887a      	ldrh	r2, [r7, #2]
 800725a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	887a      	ldrh	r2, [r7, #2]
 8007260:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007276:	d802      	bhi.n	800727e <HAL_SPI_TransmitReceive+0xe6>
 8007278:	8a3b      	ldrh	r3, [r7, #16]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d908      	bls.n	8007290 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800728c:	605a      	str	r2, [r3, #4]
 800728e:	e007      	b.n	80072a0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	685a      	ldr	r2, [r3, #4]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800729e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b40      	cmp	r3, #64	; 0x40
 80072ac:	d007      	beq.n	80072be <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80072c6:	d97c      	bls.n	80073c2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d002      	beq.n	80072d6 <HAL_SPI_TransmitReceive+0x13e>
 80072d0:	8a7b      	ldrh	r3, [r7, #18]
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d169      	bne.n	80073aa <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	881a      	ldrh	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e6:	1c9a      	adds	r2, r3, #2
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	3b01      	subs	r3, #1
 80072f4:	b29a      	uxth	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072fa:	e056      	b.n	80073aa <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 0302 	and.w	r3, r3, #2
 8007306:	2b02      	cmp	r3, #2
 8007308:	d11b      	bne.n	8007342 <HAL_SPI_TransmitReceive+0x1aa>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730e:	b29b      	uxth	r3, r3
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <HAL_SPI_TransmitReceive+0x1aa>
 8007314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007316:	2b01      	cmp	r3, #1
 8007318:	d113      	bne.n	8007342 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731e:	881a      	ldrh	r2, [r3, #0]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007334:	b29b      	uxth	r3, r3
 8007336:	3b01      	subs	r3, #1
 8007338:	b29a      	uxth	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0301 	and.w	r3, r3, #1
 800734c:	2b01      	cmp	r3, #1
 800734e:	d11c      	bne.n	800738a <HAL_SPI_TransmitReceive+0x1f2>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007356:	b29b      	uxth	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d016      	beq.n	800738a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	b292      	uxth	r2, r2
 8007368:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736e:	1c9a      	adds	r2, r3, #2
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007386:	2301      	movs	r3, #1
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800738a:	f7fd f915 	bl	80045b8 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007396:	429a      	cmp	r2, r3
 8007398:	d807      	bhi.n	80073aa <HAL_SPI_TransmitReceive+0x212>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a0:	d003      	beq.n	80073aa <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80073a2:	2303      	movs	r3, #3
 80073a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80073a8:	e0fb      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d1a3      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x164>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d19d      	bne.n	80072fc <HAL_SPI_TransmitReceive+0x164>
 80073c0:	e0df      	b.n	8007582 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0x23a>
 80073ca:	8a7b      	ldrh	r3, [r7, #18]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	f040 80cb 	bne.w	8007568 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d912      	bls.n	8007402 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	1c9a      	adds	r2, r3, #2
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	3b02      	subs	r3, #2
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007400:	e0b2      	b.n	8007568 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	7812      	ldrb	r2, [r2, #0]
 800740e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741e:	b29b      	uxth	r3, r3
 8007420:	3b01      	subs	r3, #1
 8007422:	b29a      	uxth	r2, r3
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007428:	e09e      	b.n	8007568 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b02      	cmp	r3, #2
 8007436:	d134      	bne.n	80074a2 <HAL_SPI_TransmitReceive+0x30a>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d02f      	beq.n	80074a2 <HAL_SPI_TransmitReceive+0x30a>
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	2b01      	cmp	r3, #1
 8007446:	d12c      	bne.n	80074a2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744c:	b29b      	uxth	r3, r3
 800744e:	2b01      	cmp	r3, #1
 8007450:	d912      	bls.n	8007478 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007456:	881a      	ldrh	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007462:	1c9a      	adds	r2, r3, #2
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b02      	subs	r3, #2
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007476:	e012      	b.n	800749e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	330c      	adds	r3, #12
 8007482:	7812      	ldrb	r2, [r2, #0]
 8007484:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	1c5a      	adds	r2, r3, #1
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007494:	b29b      	uxth	r3, r3
 8007496:	3b01      	subs	r3, #1
 8007498:	b29a      	uxth	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d148      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x3aa>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d042      	beq.n	8007542 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d923      	bls.n	8007510 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68da      	ldr	r2, [r3, #12]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	b292      	uxth	r2, r2
 80074d4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074da:	1c9a      	adds	r2, r3, #2
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b02      	subs	r3, #2
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d81f      	bhi.n	800753e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800750c:	605a      	str	r2, [r3, #4]
 800750e:	e016      	b.n	800753e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f103 020c 	add.w	r2, r3, #12
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751c:	7812      	ldrb	r2, [r2, #0]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800753e:	2301      	movs	r3, #1
 8007540:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007542:	f7fd f839 	bl	80045b8 <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800754e:	429a      	cmp	r2, r3
 8007550:	d803      	bhi.n	800755a <HAL_SPI_TransmitReceive+0x3c2>
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007558:	d102      	bne.n	8007560 <HAL_SPI_TransmitReceive+0x3c8>
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	2b00      	cmp	r3, #0
 800755e:	d103      	bne.n	8007568 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007566:	e01c      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800756c:	b29b      	uxth	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	f47f af5b 	bne.w	800742a <HAL_SPI_TransmitReceive+0x292>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800757a:	b29b      	uxth	r3, r3
 800757c:	2b00      	cmp	r3, #0
 800757e:	f47f af54 	bne.w	800742a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f938 	bl	80077fc <SPI_EndRxTxTransaction>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d006      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2220      	movs	r2, #32
 800759c:	661a      	str	r2, [r3, #96]	; 0x60
 800759e:	e000      	b.n	80075a2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80075a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80075b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3728      	adds	r7, #40	; 0x28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b088      	sub	sp, #32
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80075d0:	f7fc fff2 	bl	80045b8 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	1a9b      	subs	r3, r3, r2
 80075da:	683a      	ldr	r2, [r7, #0]
 80075dc:	4413      	add	r3, r2
 80075de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80075e0:	f7fc ffea 	bl	80045b8 <HAL_GetTick>
 80075e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80075e6:	4b39      	ldr	r3, [pc, #228]	; (80076cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	015b      	lsls	r3, r3, #5
 80075ec:	0d1b      	lsrs	r3, r3, #20
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	fb02 f303 	mul.w	r3, r2, r3
 80075f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075f6:	e054      	b.n	80076a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fe:	d050      	beq.n	80076a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007600:	f7fc ffda 	bl	80045b8 <HAL_GetTick>
 8007604:	4602      	mov	r2, r0
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	1ad3      	subs	r3, r2, r3
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	429a      	cmp	r2, r3
 800760e:	d902      	bls.n	8007616 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d13d      	bne.n	8007692 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007624:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800762e:	d111      	bne.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007638:	d004      	beq.n	8007644 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007642:	d107      	bne.n	8007654 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007652:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800765c:	d10f      	bne.n	800767e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800767c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e017      	b.n	80076c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	3b01      	subs	r3, #1
 80076a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	4013      	ands	r3, r2
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	bf0c      	ite	eq
 80076b2:	2301      	moveq	r3, #1
 80076b4:	2300      	movne	r3, #0
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d19b      	bne.n	80075f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3720      	adds	r7, #32
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	2000000c 	.word	0x2000000c

080076d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b08a      	sub	sp, #40	; 0x28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
 80076dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80076e2:	f7fc ff69 	bl	80045b8 <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ea:	1a9b      	subs	r3, r3, r2
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	4413      	add	r3, r2
 80076f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80076f2:	f7fc ff61 	bl	80045b8 <HAL_GetTick>
 80076f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	330c      	adds	r3, #12
 80076fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007700:	4b3d      	ldr	r3, [pc, #244]	; (80077f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	00da      	lsls	r2, r3, #3
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	0d1b      	lsrs	r3, r3, #20
 8007710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007712:	fb02 f303 	mul.w	r3, r2, r3
 8007716:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007718:	e060      	b.n	80077dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007720:	d107      	bne.n	8007732 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d104      	bne.n	8007732 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	b2db      	uxtb	r3, r3
 800772e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007730:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007738:	d050      	beq.n	80077dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800773a:	f7fc ff3d 	bl	80045b8 <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007746:	429a      	cmp	r2, r3
 8007748:	d902      	bls.n	8007750 <SPI_WaitFifoStateUntilTimeout+0x80>
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	2b00      	cmp	r3, #0
 800774e:	d13d      	bne.n	80077cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685a      	ldr	r2, [r3, #4]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800775e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007768:	d111      	bne.n	800778e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007772:	d004      	beq.n	800777e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800777c:	d107      	bne.n	800778e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800778c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007796:	d10f      	bne.n	80077b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077a6:	601a      	str	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e010      	b.n	80077ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	3b01      	subs	r3, #1
 80077da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	4013      	ands	r3, r2
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d196      	bne.n	800771a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3728      	adds	r7, #40	; 0x28
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	2000000c 	.word	0x2000000c

080077fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af02      	add	r7, sp, #8
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f7ff ff5b 	bl	80076d0 <SPI_WaitFifoStateUntilTimeout>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d007      	beq.n	8007830 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007824:	f043 0220 	orr.w	r2, r3, #32
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800782c:	2303      	movs	r3, #3
 800782e:	e027      	b.n	8007880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	2200      	movs	r2, #0
 8007838:	2180      	movs	r1, #128	; 0x80
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f7ff fec0 	bl	80075c0 <SPI_WaitFlagStateUntilTimeout>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d007      	beq.n	8007856 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800784a:	f043 0220 	orr.w	r2, r3, #32
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e014      	b.n	8007880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2200      	movs	r2, #0
 800785e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff ff34 	bl	80076d0 <SPI_WaitFifoStateUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d007      	beq.n	800787e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e000      	b.n	8007880 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	3710      	adds	r7, #16
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}

08007888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d101      	bne.n	800789a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e049      	b.n	800792e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a0:	b2db      	uxtb	r3, r3
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d106      	bne.n	80078b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f7fc fbc6 	bl	8004040 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f000 fb70 	bl	8007fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	d001      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e036      	b.n	80079be <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0201 	orr.w	r2, r2, #1
 8007966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a17      	ldr	r2, [pc, #92]	; (80079cc <HAL_TIM_Base_Start_IT+0x94>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d004      	beq.n	800797c <HAL_TIM_Base_Start_IT+0x44>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d115      	bne.n	80079a8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689a      	ldr	r2, [r3, #8]
 8007982:	4b13      	ldr	r3, [pc, #76]	; (80079d0 <HAL_TIM_Base_Start_IT+0x98>)
 8007984:	4013      	ands	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b06      	cmp	r3, #6
 800798c:	d015      	beq.n	80079ba <HAL_TIM_Base_Start_IT+0x82>
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007994:	d011      	beq.n	80079ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0201 	orr.w	r2, r2, #1
 80079a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079a6:	e008      	b.n	80079ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0201 	orr.w	r2, r2, #1
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	e000      	b.n	80079bc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	40012c00 	.word	0x40012c00
 80079d0:	00010007 	.word	0x00010007

080079d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e049      	b.n	8007a7a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d106      	bne.n	8007a00 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f841 	bl	8007a82 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4619      	mov	r1, r3
 8007a12:	4610      	mov	r0, r2
 8007a14:	f000 faca 	bl	8007fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b083      	sub	sp, #12
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	f003 0302 	and.w	r3, r3, #2
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d122      	bne.n	8007af2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d11b      	bne.n	8007af2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f06f 0202 	mvn.w	r2, #2
 8007ac2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	f003 0303 	and.w	r3, r3, #3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fa48 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007ade:	e005      	b.n	8007aec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fa3a 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa4b 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f003 0304 	and.w	r3, r3, #4
 8007afc:	2b04      	cmp	r3, #4
 8007afe:	d122      	bne.n	8007b46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d11b      	bne.n	8007b46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f06f 0204 	mvn.w	r2, #4
 8007b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa1e 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007b32:	e005      	b.n	8007b40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fa10 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa21 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	f003 0308 	and.w	r3, r3, #8
 8007b50:	2b08      	cmp	r3, #8
 8007b52:	d122      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68db      	ldr	r3, [r3, #12]
 8007b5a:	f003 0308 	and.w	r3, r3, #8
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d11b      	bne.n	8007b9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f06f 0208 	mvn.w	r2, #8
 8007b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2204      	movs	r2, #4
 8007b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f003 0303 	and.w	r3, r3, #3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d003      	beq.n	8007b88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f9f4 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007b86:	e005      	b.n	8007b94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9e6 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f9f7 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	f003 0310 	and.w	r3, r3, #16
 8007ba4:	2b10      	cmp	r3, #16
 8007ba6:	d122      	bne.n	8007bee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d11b      	bne.n	8007bee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f06f 0210 	mvn.w	r2, #16
 8007bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69db      	ldr	r3, [r3, #28]
 8007bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d003      	beq.n	8007bdc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9ca 	bl	8007f6e <HAL_TIM_IC_CaptureCallback>
 8007bda:	e005      	b.n	8007be8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f000 f9bc 	bl	8007f5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9cd 	bl	8007f82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d10e      	bne.n	8007c1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f003 0301 	and.w	r3, r3, #1
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d107      	bne.n	8007c1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f06f 0201 	mvn.w	r2, #1
 8007c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f7fb fd1b 	bl	8003650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	691b      	ldr	r3, [r3, #16]
 8007c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c24:	2b80      	cmp	r3, #128	; 0x80
 8007c26:	d10e      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d107      	bne.n	8007c46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fe2b 	bl	800889c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c54:	d10e      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c60:	2b80      	cmp	r3, #128	; 0x80
 8007c62:	d107      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fe1e 	bl	80088b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b40      	cmp	r3, #64	; 0x40
 8007c80:	d10e      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d107      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f97b 	bl	8007f96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b20      	cmp	r3, #32
 8007cac:	d10e      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0320 	and.w	r3, r3, #32
 8007cb8:	2b20      	cmp	r3, #32
 8007cba:	d107      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0220 	mvn.w	r2, #32
 8007cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 fdde 	bl	8008888 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ccc:	bf00      	nop
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e066      	b.n	8007dc0 <HAL_TIM_OC_ConfigChannel+0xec>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b14      	cmp	r3, #20
 8007cfe:	d857      	bhi.n	8007db0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d5d 	.word	0x08007d5d
 8007d0c:	08007db1 	.word	0x08007db1
 8007d10:	08007db1 	.word	0x08007db1
 8007d14:	08007db1 	.word	0x08007db1
 8007d18:	08007d6b 	.word	0x08007d6b
 8007d1c:	08007db1 	.word	0x08007db1
 8007d20:	08007db1 	.word	0x08007db1
 8007d24:	08007db1 	.word	0x08007db1
 8007d28:	08007d79 	.word	0x08007d79
 8007d2c:	08007db1 	.word	0x08007db1
 8007d30:	08007db1 	.word	0x08007db1
 8007d34:	08007db1 	.word	0x08007db1
 8007d38:	08007d87 	.word	0x08007d87
 8007d3c:	08007db1 	.word	0x08007db1
 8007d40:	08007db1 	.word	0x08007db1
 8007d44:	08007db1 	.word	0x08007db1
 8007d48:	08007d95 	.word	0x08007d95
 8007d4c:	08007db1 	.word	0x08007db1
 8007d50:	08007db1 	.word	0x08007db1
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007da3 	.word	0x08007da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68b9      	ldr	r1, [r7, #8]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 f986 	bl	8008074 <TIM_OC1_SetConfig>
      break;
 8007d68:	e025      	b.n	8007db6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	68b9      	ldr	r1, [r7, #8]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f9fb 	bl	800816c <TIM_OC2_SetConfig>
      break;
 8007d76:	e01e      	b.n	8007db6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 fa6e 	bl	8008260 <TIM_OC3_SetConfig>
      break;
 8007d84:	e017      	b.n	8007db6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fadf 	bl	8008350 <TIM_OC4_SetConfig>
      break;
 8007d92:	e010      	b.n	8007db6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68b9      	ldr	r1, [r7, #8]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f000 fb36 	bl	800840c <TIM_OC5_SetConfig>
      break;
 8007da0:	e009      	b.n	8007db6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68b9      	ldr	r1, [r7, #8]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fb87 	bl	80084bc <TIM_OC6_SetConfig>
      break;
 8007dae:	e002      	b.n	8007db6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	75fb      	strb	r3, [r7, #23]
      break;
 8007db4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3718      	adds	r7, #24
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d101      	bne.n	8007de4 <HAL_TIM_ConfigClockSource+0x1c>
 8007de0:	2302      	movs	r3, #2
 8007de2:	e0b6      	b.n	8007f52 <HAL_TIM_ConfigClockSource+0x18a>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2202      	movs	r2, #2
 8007df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007e02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e20:	d03e      	beq.n	8007ea0 <HAL_TIM_ConfigClockSource+0xd8>
 8007e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e26:	f200 8087 	bhi.w	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e2e:	f000 8086 	beq.w	8007f3e <HAL_TIM_ConfigClockSource+0x176>
 8007e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e36:	d87f      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e38:	2b70      	cmp	r3, #112	; 0x70
 8007e3a:	d01a      	beq.n	8007e72 <HAL_TIM_ConfigClockSource+0xaa>
 8007e3c:	2b70      	cmp	r3, #112	; 0x70
 8007e3e:	d87b      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e40:	2b60      	cmp	r3, #96	; 0x60
 8007e42:	d050      	beq.n	8007ee6 <HAL_TIM_ConfigClockSource+0x11e>
 8007e44:	2b60      	cmp	r3, #96	; 0x60
 8007e46:	d877      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e48:	2b50      	cmp	r3, #80	; 0x50
 8007e4a:	d03c      	beq.n	8007ec6 <HAL_TIM_ConfigClockSource+0xfe>
 8007e4c:	2b50      	cmp	r3, #80	; 0x50
 8007e4e:	d873      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e50:	2b40      	cmp	r3, #64	; 0x40
 8007e52:	d058      	beq.n	8007f06 <HAL_TIM_ConfigClockSource+0x13e>
 8007e54:	2b40      	cmp	r3, #64	; 0x40
 8007e56:	d86f      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e58:	2b30      	cmp	r3, #48	; 0x30
 8007e5a:	d064      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15e>
 8007e5c:	2b30      	cmp	r3, #48	; 0x30
 8007e5e:	d86b      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d060      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15e>
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d867      	bhi.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d05c      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15e>
 8007e6c:	2b10      	cmp	r3, #16
 8007e6e:	d05a      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x15e>
 8007e70:	e062      	b.n	8007f38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6818      	ldr	r0, [r3, #0]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	6899      	ldr	r1, [r3, #8]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	f000 fbf1 	bl	8008668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007e94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	609a      	str	r2, [r3, #8]
      break;
 8007e9e:	e04f      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	6899      	ldr	r1, [r3, #8]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	f000 fbda 	bl	8008668 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689a      	ldr	r2, [r3, #8]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ec2:	609a      	str	r2, [r3, #8]
      break;
 8007ec4:	e03c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6818      	ldr	r0, [r3, #0]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	6859      	ldr	r1, [r3, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	461a      	mov	r2, r3
 8007ed4:	f000 fb4c 	bl	8008570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	2150      	movs	r1, #80	; 0x50
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fba5 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007ee4:	e02c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	6859      	ldr	r1, [r3, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f000 fb6b 	bl	80085ce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2160      	movs	r1, #96	; 0x60
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fb95 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007f04:	e01c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	6859      	ldr	r1, [r3, #4]
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f000 fb2c 	bl	8008570 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2140      	movs	r1, #64	; 0x40
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fb85 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007f24:	e00c      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4610      	mov	r0, r2
 8007f32:	f000 fb7c 	bl	800862e <TIM_ITRx_SetConfig>
      break;
 8007f36:	e003      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007f38:	2301      	movs	r3, #1
 8007f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f3c:	e000      	b.n	8007f40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007f3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
	...

08007fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a2a      	ldr	r2, [pc, #168]	; (8008068 <TIM_Base_SetConfig+0xbc>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d003      	beq.n	8007fcc <TIM_Base_SetConfig+0x20>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fca:	d108      	bne.n	8007fde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4a21      	ldr	r2, [pc, #132]	; (8008068 <TIM_Base_SetConfig+0xbc>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d00b      	beq.n	8007ffe <TIM_Base_SetConfig+0x52>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fec:	d007      	beq.n	8007ffe <TIM_Base_SetConfig+0x52>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a1e      	ldr	r2, [pc, #120]	; (800806c <TIM_Base_SetConfig+0xc0>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d003      	beq.n	8007ffe <TIM_Base_SetConfig+0x52>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a1d      	ldr	r2, [pc, #116]	; (8008070 <TIM_Base_SetConfig+0xc4>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d108      	bne.n	8008010 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008004:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	68fa      	ldr	r2, [r7, #12]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a0c      	ldr	r2, [pc, #48]	; (8008068 <TIM_Base_SetConfig+0xbc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d007      	beq.n	800804c <TIM_Base_SetConfig+0xa0>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a0b      	ldr	r2, [pc, #44]	; (800806c <TIM_Base_SetConfig+0xc0>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d003      	beq.n	800804c <TIM_Base_SetConfig+0xa0>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a0a      	ldr	r2, [pc, #40]	; (8008070 <TIM_Base_SetConfig+0xc4>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d103      	bne.n	8008054 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	691a      	ldr	r2, [r3, #16]
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	615a      	str	r2, [r3, #20]
}
 800805a:	bf00      	nop
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	40012c00 	.word	0x40012c00
 800806c:	40014400 	.word	0x40014400
 8008070:	40014800 	.word	0x40014800

08008074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6a1b      	ldr	r3, [r3, #32]
 8008082:	f023 0201 	bic.w	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	699b      	ldr	r3, [r3, #24]
 800809a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0303 	bic.w	r3, r3, #3
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 0302 	bic.w	r3, r3, #2
 80080c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4a24      	ldr	r2, [pc, #144]	; (8008160 <TIM_OC1_SetConfig+0xec>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d007      	beq.n	80080e4 <TIM_OC1_SetConfig+0x70>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a23      	ldr	r2, [pc, #140]	; (8008164 <TIM_OC1_SetConfig+0xf0>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <TIM_OC1_SetConfig+0x70>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a22      	ldr	r2, [pc, #136]	; (8008168 <TIM_OC1_SetConfig+0xf4>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d10c      	bne.n	80080fe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f023 0308 	bic.w	r3, r3, #8
 80080ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f023 0304 	bic.w	r3, r3, #4
 80080fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a17      	ldr	r2, [pc, #92]	; (8008160 <TIM_OC1_SetConfig+0xec>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d007      	beq.n	8008116 <TIM_OC1_SetConfig+0xa2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a17      	ldr	r2, [pc, #92]	; (8008168 <TIM_OC1_SetConfig+0xf4>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d003      	beq.n	8008116 <TIM_OC1_SetConfig+0xa2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a14      	ldr	r2, [pc, #80]	; (8008164 <TIM_OC1_SetConfig+0xf0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d111      	bne.n	800813a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800811c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	699b      	ldr	r3, [r3, #24]
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	4313      	orrs	r3, r2
 8008138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68fa      	ldr	r2, [r7, #12]
 8008144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	685a      	ldr	r2, [r3, #4]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	621a      	str	r2, [r3, #32]
}
 8008154:	bf00      	nop
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr
 8008160:	40012c00 	.word	0x40012c00
 8008164:	40014800 	.word	0x40014800
 8008168:	40014400 	.word	0x40014400

0800816c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f023 0210 	bic.w	r2, r3, #16
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	699b      	ldr	r3, [r3, #24]
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	021b      	lsls	r3, r3, #8
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f023 0320 	bic.w	r3, r3, #32
 80081ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	011b      	lsls	r3, r3, #4
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a22      	ldr	r2, [pc, #136]	; (8008254 <TIM_OC2_SetConfig+0xe8>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d10d      	bne.n	80081ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	68db      	ldr	r3, [r3, #12]
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a19      	ldr	r2, [pc, #100]	; (8008254 <TIM_OC2_SetConfig+0xe8>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d007      	beq.n	8008204 <TIM_OC2_SetConfig+0x98>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a18      	ldr	r2, [pc, #96]	; (8008258 <TIM_OC2_SetConfig+0xec>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d003      	beq.n	8008204 <TIM_OC2_SetConfig+0x98>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a17      	ldr	r2, [pc, #92]	; (800825c <TIM_OC2_SetConfig+0xf0>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d113      	bne.n	800822c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800820a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	4313      	orrs	r3, r2
 800822a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	621a      	str	r2, [r3, #32]
}
 8008246:	bf00      	nop
 8008248:	371c      	adds	r7, #28
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	40012c00 	.word	0x40012c00
 8008258:	40014400 	.word	0x40014400
 800825c:	40014800 	.word	0x40014800

08008260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a21      	ldr	r2, [pc, #132]	; (8008344 <TIM_OC3_SetConfig+0xe4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d10d      	bne.n	80082de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a18      	ldr	r2, [pc, #96]	; (8008344 <TIM_OC3_SetConfig+0xe4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_OC3_SetConfig+0x96>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a17      	ldr	r2, [pc, #92]	; (8008348 <TIM_OC3_SetConfig+0xe8>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC3_SetConfig+0x96>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a16      	ldr	r2, [pc, #88]	; (800834c <TIM_OC3_SetConfig+0xec>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d113      	bne.n	800831e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40012c00 	.word	0x40012c00
 8008348:	40014400 	.word	0x40014400
 800834c:	40014800 	.word	0x40014800

08008350 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800837e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800838a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	021b      	lsls	r3, r3, #8
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800839e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	031b      	lsls	r3, r3, #12
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a14      	ldr	r2, [pc, #80]	; (8008400 <TIM_OC4_SetConfig+0xb0>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d007      	beq.n	80083c4 <TIM_OC4_SetConfig+0x74>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a13      	ldr	r2, [pc, #76]	; (8008404 <TIM_OC4_SetConfig+0xb4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d003      	beq.n	80083c4 <TIM_OC4_SetConfig+0x74>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <TIM_OC4_SetConfig+0xb8>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d109      	bne.n	80083d8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	695b      	ldr	r3, [r3, #20]
 80083d0:	019b      	lsls	r3, r3, #6
 80083d2:	697a      	ldr	r2, [r7, #20]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	621a      	str	r2, [r3, #32]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40012c00 	.word	0x40012c00
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800

0800840c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800840c:	b480      	push	{r7}
 800840e:	b087      	sub	sp, #28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800843a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800843e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	4313      	orrs	r3, r2
 8008448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008450:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	041b      	lsls	r3, r3, #16
 8008458:	693a      	ldr	r2, [r7, #16]
 800845a:	4313      	orrs	r3, r2
 800845c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <TIM_OC5_SetConfig+0xa4>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d007      	beq.n	8008476 <TIM_OC5_SetConfig+0x6a>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a12      	ldr	r2, [pc, #72]	; (80084b4 <TIM_OC5_SetConfig+0xa8>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_OC5_SetConfig+0x6a>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <TIM_OC5_SetConfig+0xac>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d109      	bne.n	800848a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800847c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68fa      	ldr	r2, [r7, #12]
 8008494:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	621a      	str	r2, [r3, #32]
}
 80084a4:	bf00      	nop
 80084a6:	371c      	adds	r7, #28
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	40012c00 	.word	0x40012c00
 80084b4:	40014400 	.word	0x40014400
 80084b8:	40014800 	.word	0x40014800

080084bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084bc:	b480      	push	{r7}
 80084be:	b087      	sub	sp, #28
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	021b      	lsls	r3, r3, #8
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	051b      	lsls	r3, r3, #20
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	4313      	orrs	r3, r2
 800850e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a14      	ldr	r2, [pc, #80]	; (8008564 <TIM_OC6_SetConfig+0xa8>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d007      	beq.n	8008528 <TIM_OC6_SetConfig+0x6c>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a13      	ldr	r2, [pc, #76]	; (8008568 <TIM_OC6_SetConfig+0xac>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d003      	beq.n	8008528 <TIM_OC6_SetConfig+0x6c>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	4a12      	ldr	r2, [pc, #72]	; (800856c <TIM_OC6_SetConfig+0xb0>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d109      	bne.n	800853c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800852e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	029b      	lsls	r3, r3, #10
 8008536:	697a      	ldr	r2, [r7, #20]
 8008538:	4313      	orrs	r3, r2
 800853a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	697a      	ldr	r2, [r7, #20]
 8008540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68fa      	ldr	r2, [r7, #12]
 8008546:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	621a      	str	r2, [r3, #32]
}
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	40012c00 	.word	0x40012c00
 8008568:	40014400 	.word	0x40014400
 800856c:	40014800 	.word	0x40014800

08008570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6a1b      	ldr	r3, [r3, #32]
 8008586:	f023 0201 	bic.w	r2, r3, #1
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800859a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	011b      	lsls	r3, r3, #4
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	f023 030a 	bic.w	r3, r3, #10
 80085ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4313      	orrs	r3, r2
 80085b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	693a      	ldr	r2, [r7, #16]
 80085ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	621a      	str	r2, [r3, #32]
}
 80085c2:	bf00      	nop
 80085c4:	371c      	adds	r7, #28
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr

080085ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ce:	b480      	push	{r7}
 80085d0:	b087      	sub	sp, #28
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	60f8      	str	r0, [r7, #12]
 80085d6:	60b9      	str	r1, [r7, #8]
 80085d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	f023 0210 	bic.w	r2, r3, #16
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a1b      	ldr	r3, [r3, #32]
 80085f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	031b      	lsls	r3, r3, #12
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	4313      	orrs	r3, r2
 8008602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800860a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4313      	orrs	r3, r2
 8008614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	621a      	str	r2, [r3, #32]
}
 8008622:	bf00      	nop
 8008624:	371c      	adds	r7, #28
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800862e:	b480      	push	{r7}
 8008630:	b085      	sub	sp, #20
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008648:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4313      	orrs	r3, r2
 8008650:	f043 0307 	orr.w	r3, r3, #7
 8008654:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	609a      	str	r2, [r3, #8]
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008668:	b480      	push	{r7}
 800866a:	b087      	sub	sp, #28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008682:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	021a      	lsls	r2, r3, #8
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	431a      	orrs	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	4313      	orrs	r3, r2
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	609a      	str	r2, [r3, #8]
}
 800869c:	bf00      	nop
 800869e:	371c      	adds	r7, #28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d101      	bne.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086bc:	2302      	movs	r3, #2
 80086be:	e04a      	b.n	8008756 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2202      	movs	r2, #2
 80086cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a1f      	ldr	r2, [pc, #124]	; (8008764 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d108      	bne.n	80086fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4313      	orrs	r3, r2
 800870c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68fa      	ldr	r2, [r7, #12]
 8008714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a12      	ldr	r2, [pc, #72]	; (8008764 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d004      	beq.n	800872a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008728:	d10c      	bne.n	8008744 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008730:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	68ba      	ldr	r2, [r7, #8]
 8008738:	4313      	orrs	r3, r2
 800873a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	40012c00 	.word	0x40012c00

08008768 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800877c:	2b01      	cmp	r3, #1
 800877e:	d101      	bne.n	8008784 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008780:	2302      	movs	r3, #2
 8008782:	e078      	b.n	8008876 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	4313      	orrs	r3, r2
 8008798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	699b      	ldr	r3, [r3, #24]
 80087f8:	041b      	lsls	r3, r3, #16
 80087fa:	4313      	orrs	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a20      	ldr	r2, [pc, #128]	; (8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d106      	bne.n	8008816 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a1a      	ldr	r2, [pc, #104]	; (8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d121      	bne.n	8008864 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	051b      	lsls	r3, r3, #20
 800882c:	4313      	orrs	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6a1b      	ldr	r3, [r3, #32]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a0c      	ldr	r2, [pc, #48]	; (8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d106      	bne.n	8008864 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008860:	4313      	orrs	r3, r2
 8008862:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	40012c00 	.word	0x40012c00

08008888 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr

0800889c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800889c:	b480      	push	{r7}
 800889e:	b083      	sub	sp, #12
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088b8:	bf00      	nop
 80088ba:	370c      	adds	r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <LL_RCC_GetUSARTClockSource>:
{
 80088c4:	b480      	push	{r7}
 80088c6:	b083      	sub	sp, #12
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80088cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4013      	ands	r3, r2
}
 80088d8:	4618      	mov	r0, r3
 80088da:	370c      	adds	r7, #12
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <LL_RCC_GetLPUARTClockSource>:
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80088ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4013      	ands	r3, r2
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	370c      	adds	r7, #12
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e042      	b.n	800899c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891c:	2b00      	cmp	r3, #0
 800891e:	d106      	bne.n	800892e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fb fba5 	bl	8004078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2224      	movs	r2, #36	; 0x24
 8008932:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0201 	bic.w	r2, r2, #1
 8008944:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 f8ba 	bl	8008ac0 <UART_SetConfig>
 800894c:	4603      	mov	r3, r0
 800894e:	2b01      	cmp	r3, #1
 8008950:	d101      	bne.n	8008956 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e022      	b.n	800899c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	2b00      	cmp	r3, #0
 800895c:	d002      	beq.n	8008964 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fad6 	bl	8008f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685a      	ldr	r2, [r3, #4]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008972:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008982:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0201 	orr.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fb5d 	bl	8009054 <UART_CheckIdleState>
 800899a:	4603      	mov	r3, r0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3708      	adds	r7, #8
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b08a      	sub	sp, #40	; 0x28
 80089a8:	af02      	add	r7, sp, #8
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	603b      	str	r3, [r7, #0]
 80089b0:	4613      	mov	r3, r2
 80089b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ba:	2b20      	cmp	r3, #32
 80089bc:	d17b      	bne.n	8008ab6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <HAL_UART_Transmit+0x26>
 80089c4:	88fb      	ldrh	r3, [r7, #6]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e074      	b.n	8008ab8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2221      	movs	r2, #33	; 0x21
 80089da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089de:	f7fb fdeb 	bl	80045b8 <HAL_GetTick>
 80089e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	88fa      	ldrh	r2, [r7, #6]
 80089e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	88fa      	ldrh	r2, [r7, #6]
 80089f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089fc:	d108      	bne.n	8008a10 <HAL_UART_Transmit+0x6c>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d104      	bne.n	8008a10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	61bb      	str	r3, [r7, #24]
 8008a0e:	e003      	b.n	8008a18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a14:	2300      	movs	r3, #0
 8008a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a18:	e030      	b.n	8008a7c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	9300      	str	r3, [sp, #0]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2200      	movs	r2, #0
 8008a22:	2180      	movs	r1, #128	; 0x80
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 fbbf 	bl	80091a8 <UART_WaitOnFlagUntilTimeout>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e03d      	b.n	8008ab8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d10b      	bne.n	8008a5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	881b      	ldrh	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a50:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	3302      	adds	r3, #2
 8008a56:	61bb      	str	r3, [r7, #24]
 8008a58:	e007      	b.n	8008a6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	781a      	ldrb	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	3301      	adds	r3, #1
 8008a68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	3b01      	subs	r3, #1
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1c8      	bne.n	8008a1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2140      	movs	r1, #64	; 0x40
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fb88 	bl	80091a8 <UART_WaitOnFlagUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d005      	beq.n	8008aaa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e006      	b.n	8008ab8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2220      	movs	r2, #32
 8008aae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e000      	b.n	8008ab8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008ab6:	2302      	movs	r3, #2
  }
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3720      	adds	r7, #32
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ac4:	b08c      	sub	sp, #48	; 0x30
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	69db      	ldr	r3, [r3, #28]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	4baf      	ldr	r3, [pc, #700]	; (8008dac <UART_SetConfig+0x2ec>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	697a      	ldr	r2, [r7, #20]
 8008af4:	6812      	ldr	r2, [r2, #0]
 8008af6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008af8:	430b      	orrs	r3, r1
 8008afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	68da      	ldr	r2, [r3, #12]
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4aa4      	ldr	r2, [pc, #656]	; (8008db0 <UART_SetConfig+0x2f0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d004      	beq.n	8008b2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	6a1b      	ldr	r3, [r3, #32]
 8008b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008b36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008b3a:	697a      	ldr	r2, [r7, #20]
 8008b3c:	6812      	ldr	r2, [r2, #0]
 8008b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b40:	430b      	orrs	r3, r1
 8008b42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4a:	f023 010f 	bic.w	r1, r3, #15
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a95      	ldr	r2, [pc, #596]	; (8008db4 <UART_SetConfig+0x2f4>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d125      	bne.n	8008bb0 <UART_SetConfig+0xf0>
 8008b64:	2003      	movs	r0, #3
 8008b66:	f7ff fead 	bl	80088c4 <LL_RCC_GetUSARTClockSource>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b03      	cmp	r3, #3
 8008b6e:	d81b      	bhi.n	8008ba8 <UART_SetConfig+0xe8>
 8008b70:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <UART_SetConfig+0xb8>)
 8008b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b76:	bf00      	nop
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008b99 	.word	0x08008b99
 8008b80:	08008b91 	.word	0x08008b91
 8008b84:	08008ba1 	.word	0x08008ba1
 8008b88:	2301      	movs	r3, #1
 8008b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b8e:	e042      	b.n	8008c16 <UART_SetConfig+0x156>
 8008b90:	2302      	movs	r3, #2
 8008b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b96:	e03e      	b.n	8008c16 <UART_SetConfig+0x156>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008b9e:	e03a      	b.n	8008c16 <UART_SetConfig+0x156>
 8008ba0:	2308      	movs	r3, #8
 8008ba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ba6:	e036      	b.n	8008c16 <UART_SetConfig+0x156>
 8008ba8:	2310      	movs	r3, #16
 8008baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bae:	e032      	b.n	8008c16 <UART_SetConfig+0x156>
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a7e      	ldr	r2, [pc, #504]	; (8008db0 <UART_SetConfig+0x2f0>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d12a      	bne.n	8008c10 <UART_SetConfig+0x150>
 8008bba:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008bbe:	f7ff fe91 	bl	80088e4 <LL_RCC_GetLPUARTClockSource>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bc8:	d01a      	beq.n	8008c00 <UART_SetConfig+0x140>
 8008bca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008bce:	d81b      	bhi.n	8008c08 <UART_SetConfig+0x148>
 8008bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bd4:	d00c      	beq.n	8008bf0 <UART_SetConfig+0x130>
 8008bd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bda:	d815      	bhi.n	8008c08 <UART_SetConfig+0x148>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <UART_SetConfig+0x128>
 8008be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be4:	d008      	beq.n	8008bf8 <UART_SetConfig+0x138>
 8008be6:	e00f      	b.n	8008c08 <UART_SetConfig+0x148>
 8008be8:	2300      	movs	r3, #0
 8008bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bee:	e012      	b.n	8008c16 <UART_SetConfig+0x156>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bf6:	e00e      	b.n	8008c16 <UART_SetConfig+0x156>
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008bfe:	e00a      	b.n	8008c16 <UART_SetConfig+0x156>
 8008c00:	2308      	movs	r3, #8
 8008c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c06:	e006      	b.n	8008c16 <UART_SetConfig+0x156>
 8008c08:	2310      	movs	r3, #16
 8008c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008c0e:	e002      	b.n	8008c16 <UART_SetConfig+0x156>
 8008c10:	2310      	movs	r3, #16
 8008c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008c16:	697b      	ldr	r3, [r7, #20]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a65      	ldr	r2, [pc, #404]	; (8008db0 <UART_SetConfig+0x2f0>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	f040 8097 	bne.w	8008d50 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008c26:	2b08      	cmp	r3, #8
 8008c28:	d823      	bhi.n	8008c72 <UART_SetConfig+0x1b2>
 8008c2a:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <UART_SetConfig+0x170>)
 8008c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c30:	08008c55 	.word	0x08008c55
 8008c34:	08008c73 	.word	0x08008c73
 8008c38:	08008c5d 	.word	0x08008c5d
 8008c3c:	08008c73 	.word	0x08008c73
 8008c40:	08008c63 	.word	0x08008c63
 8008c44:	08008c73 	.word	0x08008c73
 8008c48:	08008c73 	.word	0x08008c73
 8008c4c:	08008c73 	.word	0x08008c73
 8008c50:	08008c6b 	.word	0x08008c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c54:	f7fd f98c 	bl	8005f70 <HAL_RCC_GetPCLK1Freq>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c5a:	e010      	b.n	8008c7e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c5c:	4b56      	ldr	r3, [pc, #344]	; (8008db8 <UART_SetConfig+0x2f8>)
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c60:	e00d      	b.n	8008c7e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c62:	f7fd f905 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8008c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008c68:	e009      	b.n	8008c7e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008c70:	e005      	b.n	8008c7e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008c72:	2300      	movs	r3, #0
 8008c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008c76:	2301      	movs	r3, #1
 8008c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f000 812b 	beq.w	8008edc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c8a:	4a4c      	ldr	r2, [pc, #304]	; (8008dbc <UART_SetConfig+0x2fc>)
 8008c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	005b      	lsls	r3, r3, #1
 8008ca2:	4413      	add	r3, r2
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d305      	bcc.n	8008cb6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d903      	bls.n	8008cbe <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008cbc:	e10e      	b.n	8008edc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	60bb      	str	r3, [r7, #8]
 8008cc4:	60fa      	str	r2, [r7, #12]
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cca:	4a3c      	ldr	r2, [pc, #240]	; (8008dbc <UART_SetConfig+0x2fc>)
 8008ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cd0:	b29b      	uxth	r3, r3
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	603b      	str	r3, [r7, #0]
 8008cd6:	607a      	str	r2, [r7, #4]
 8008cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008ce0:	f7f7 faa6 	bl	8000230 <__aeabi_uldivmod>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	4610      	mov	r0, r2
 8008cea:	4619      	mov	r1, r3
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	020b      	lsls	r3, r1, #8
 8008cf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008cfa:	0202      	lsls	r2, r0, #8
 8008cfc:	6979      	ldr	r1, [r7, #20]
 8008cfe:	6849      	ldr	r1, [r1, #4]
 8008d00:	0849      	lsrs	r1, r1, #1
 8008d02:	2000      	movs	r0, #0
 8008d04:	460c      	mov	r4, r1
 8008d06:	4605      	mov	r5, r0
 8008d08:	eb12 0804 	adds.w	r8, r2, r4
 8008d0c:	eb43 0905 	adc.w	r9, r3, r5
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	469a      	mov	sl, r3
 8008d18:	4693      	mov	fp, r2
 8008d1a:	4652      	mov	r2, sl
 8008d1c:	465b      	mov	r3, fp
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4649      	mov	r1, r9
 8008d22:	f7f7 fa85 	bl	8000230 <__aeabi_uldivmod>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d2e:	6a3b      	ldr	r3, [r7, #32]
 8008d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d34:	d308      	bcc.n	8008d48 <UART_SetConfig+0x288>
 8008d36:	6a3b      	ldr	r3, [r7, #32]
 8008d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d3c:	d204      	bcs.n	8008d48 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6a3a      	ldr	r2, [r7, #32]
 8008d44:	60da      	str	r2, [r3, #12]
 8008d46:	e0c9      	b.n	8008edc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008d4e:	e0c5      	b.n	8008edc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d58:	d16d      	bne.n	8008e36 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	2b07      	cmp	r3, #7
 8008d62:	d82d      	bhi.n	8008dc0 <UART_SetConfig+0x300>
 8008d64:	a201      	add	r2, pc, #4	; (adr r2, 8008d6c <UART_SetConfig+0x2ac>)
 8008d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d6a:	bf00      	nop
 8008d6c:	08008d8d 	.word	0x08008d8d
 8008d70:	08008d95 	.word	0x08008d95
 8008d74:	08008dc1 	.word	0x08008dc1
 8008d78:	08008d9b 	.word	0x08008d9b
 8008d7c:	08008dc1 	.word	0x08008dc1
 8008d80:	08008dc1 	.word	0x08008dc1
 8008d84:	08008dc1 	.word	0x08008dc1
 8008d88:	08008da3 	.word	0x08008da3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d8c:	f7fd f906 	bl	8005f9c <HAL_RCC_GetPCLK2Freq>
 8008d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008d92:	e01b      	b.n	8008dcc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d94:	4b08      	ldr	r3, [pc, #32]	; (8008db8 <UART_SetConfig+0x2f8>)
 8008d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008d98:	e018      	b.n	8008dcc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d9a:	f7fd f869 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8008d9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008da0:	e014      	b.n	8008dcc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008da8:	e010      	b.n	8008dcc <UART_SetConfig+0x30c>
 8008daa:	bf00      	nop
 8008dac:	cfff69f3 	.word	0xcfff69f3
 8008db0:	40008000 	.word	0x40008000
 8008db4:	40013800 	.word	0x40013800
 8008db8:	00f42400 	.word	0x00f42400
 8008dbc:	0800b0a0 	.word	0x0800b0a0
      default:
        pclk = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	f000 8084 	beq.w	8008edc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd8:	4a4b      	ldr	r2, [pc, #300]	; (8008f08 <UART_SetConfig+0x448>)
 8008dda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008dde:	461a      	mov	r2, r3
 8008de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008de6:	005a      	lsls	r2, r3, #1
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	085b      	lsrs	r3, r3, #1
 8008dee:	441a      	add	r2, r3
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	2b0f      	cmp	r3, #15
 8008dfe:	d916      	bls.n	8008e2e <UART_SetConfig+0x36e>
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e06:	d212      	bcs.n	8008e2e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e08:	6a3b      	ldr	r3, [r7, #32]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f023 030f 	bic.w	r3, r3, #15
 8008e10:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e12:	6a3b      	ldr	r3, [r7, #32]
 8008e14:	085b      	lsrs	r3, r3, #1
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	f003 0307 	and.w	r3, r3, #7
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	8bfb      	ldrh	r3, [r7, #30]
 8008e20:	4313      	orrs	r3, r2
 8008e22:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	8bfa      	ldrh	r2, [r7, #30]
 8008e2a:	60da      	str	r2, [r3, #12]
 8008e2c:	e056      	b.n	8008edc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008e34:	e052      	b.n	8008edc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008e36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	2b07      	cmp	r3, #7
 8008e3e:	d822      	bhi.n	8008e86 <UART_SetConfig+0x3c6>
 8008e40:	a201      	add	r2, pc, #4	; (adr r2, 8008e48 <UART_SetConfig+0x388>)
 8008e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e46:	bf00      	nop
 8008e48:	08008e69 	.word	0x08008e69
 8008e4c:	08008e71 	.word	0x08008e71
 8008e50:	08008e87 	.word	0x08008e87
 8008e54:	08008e77 	.word	0x08008e77
 8008e58:	08008e87 	.word	0x08008e87
 8008e5c:	08008e87 	.word	0x08008e87
 8008e60:	08008e87 	.word	0x08008e87
 8008e64:	08008e7f 	.word	0x08008e7f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e68:	f7fd f898 	bl	8005f9c <HAL_RCC_GetPCLK2Freq>
 8008e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e6e:	e010      	b.n	8008e92 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e70:	4b26      	ldr	r3, [pc, #152]	; (8008f0c <UART_SetConfig+0x44c>)
 8008e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e74:	e00d      	b.n	8008e92 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e76:	f7fc fffb 	bl	8005e70 <HAL_RCC_GetSysClockFreq>
 8008e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008e7c:	e009      	b.n	8008e92 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008e84:	e005      	b.n	8008e92 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008e90:	bf00      	nop
    }

    if (pclk != 0U)
 8008e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d021      	beq.n	8008edc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	; (8008f08 <UART_SetConfig+0x448>)
 8008e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	fbb3 f2f2 	udiv	r2, r3, r2
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	085b      	lsrs	r3, r3, #1
 8008eb0:	441a      	add	r2, r3
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ebc:	6a3b      	ldr	r3, [r7, #32]
 8008ebe:	2b0f      	cmp	r3, #15
 8008ec0:	d909      	bls.n	8008ed6 <UART_SetConfig+0x416>
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ec8:	d205      	bcs.n	8008ed6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60da      	str	r2, [r3, #12]
 8008ed4:	e002      	b.n	8008edc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008ef8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3730      	adds	r7, #48	; 0x30
 8008f00:	46bd      	mov	sp, r7
 8008f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f06:	bf00      	nop
 8008f08:	0800b0a0 	.word	0x0800b0a0
 8008f0c:	00f42400 	.word	0x00f42400

08008f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1c:	f003 0301 	and.w	r3, r3, #1
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00a      	beq.n	8008f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	430a      	orrs	r2, r1
 8008f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00a      	beq.n	8008f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	430a      	orrs	r2, r1
 8008f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	f003 0308 	and.w	r3, r3, #8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fa4:	f003 0310 	and.w	r3, r3, #16
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00a      	beq.n	8008fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01a      	beq.n	8009026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	430a      	orrs	r2, r1
 8009004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800900a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800900e:	d10a      	bne.n	8009026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	430a      	orrs	r2, r1
 8009024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	430a      	orrs	r2, r1
 8009046:	605a      	str	r2, [r3, #4]
  }
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b098      	sub	sp, #96	; 0x60
 8009058:	af02      	add	r7, sp, #8
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009064:	f7fb faa8 	bl	80045b8 <HAL_GetTick>
 8009068:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b08      	cmp	r3, #8
 8009076:	d12f      	bne.n	80090d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009080:	2200      	movs	r2, #0
 8009082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f88e 	bl	80091a8 <UART_WaitOnFlagUntilTimeout>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d022      	beq.n	80090d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909a:	e853 3f00 	ldrex	r3, [r3]
 800909e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80090a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090a6:	653b      	str	r3, [r7, #80]	; 0x50
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	461a      	mov	r2, r3
 80090ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b0:	647b      	str	r3, [r7, #68]	; 0x44
 80090b2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090b8:	e841 2300 	strex	r3, r2, [r1]
 80090bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80090be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e6      	bne.n	8009092 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090d4:	2303      	movs	r3, #3
 80090d6:	e063      	b.n	80091a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0304 	and.w	r3, r3, #4
 80090e2:	2b04      	cmp	r3, #4
 80090e4:	d149      	bne.n	800917a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090e6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090ea:	9300      	str	r3, [sp, #0]
 80090ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090ee:	2200      	movs	r2, #0
 80090f0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f857 	bl	80091a8 <UART_WaitOnFlagUntilTimeout>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d03c      	beq.n	800917a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	e853 3f00 	ldrex	r3, [r3]
 800910c:	623b      	str	r3, [r7, #32]
   return(result);
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911e:	633b      	str	r3, [r7, #48]	; 0x30
 8009120:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009126:	e841 2300 	strex	r3, r2, [r1]
 800912a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1e6      	bne.n	8009100 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	e853 3f00 	ldrex	r3, [r3]
 8009140:	60fb      	str	r3, [r7, #12]
   return(result);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f023 0301 	bic.w	r3, r3, #1
 8009148:	64bb      	str	r3, [r7, #72]	; 0x48
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3308      	adds	r3, #8
 8009150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009152:	61fa      	str	r2, [r7, #28]
 8009154:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009156:	69b9      	ldr	r1, [r7, #24]
 8009158:	69fa      	ldr	r2, [r7, #28]
 800915a:	e841 2300 	strex	r3, r2, [r1]
 800915e:	617b      	str	r3, [r7, #20]
   return(result);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1e5      	bne.n	8009132 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e012      	b.n	80091a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2220      	movs	r2, #32
 800917e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2220      	movs	r2, #32
 8009186:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3758      	adds	r7, #88	; 0x58
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b8:	e049      	b.n	800924e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d045      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80091c2:	f7fb f9f9 	bl	80045b8 <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	69ba      	ldr	r2, [r7, #24]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d302      	bcc.n	80091d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d101      	bne.n	80091dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e048      	b.n	800926e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0304 	and.w	r3, r3, #4
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d031      	beq.n	800924e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69db      	ldr	r3, [r3, #28]
 80091f0:	f003 0308 	and.w	r3, r3, #8
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d110      	bne.n	800921a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2208      	movs	r2, #8
 80091fe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009200:	68f8      	ldr	r0, [r7, #12]
 8009202:	f000 f838 	bl	8009276 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2208      	movs	r2, #8
 800920a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e029      	b.n	800926e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	69db      	ldr	r3, [r3, #28]
 8009220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009228:	d111      	bne.n	800924e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009232:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009234:	68f8      	ldr	r0, [r7, #12]
 8009236:	f000 f81e 	bl	8009276 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e00f      	b.n	800926e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	69da      	ldr	r2, [r3, #28]
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4013      	ands	r3, r2
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	429a      	cmp	r2, r3
 800925c:	bf0c      	ite	eq
 800925e:	2301      	moveq	r3, #1
 8009260:	2300      	movne	r3, #0
 8009262:	b2db      	uxtb	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	79fb      	ldrb	r3, [r7, #7]
 8009268:	429a      	cmp	r2, r3
 800926a:	d0a6      	beq.n	80091ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009276:	b480      	push	{r7}
 8009278:	b095      	sub	sp, #84	; 0x54
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009286:	e853 3f00 	ldrex	r3, [r3]
 800928a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800928c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	461a      	mov	r2, r3
 800929a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800929c:	643b      	str	r3, [r7, #64]	; 0x40
 800929e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80092a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80092a4:	e841 2300 	strex	r3, r2, [r1]
 80092a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e6      	bne.n	800927e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	3308      	adds	r3, #8
 80092b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	6a3b      	ldr	r3, [r7, #32]
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	61fb      	str	r3, [r7, #28]
   return(result);
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092c6:	f023 0301 	bic.w	r3, r3, #1
 80092ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e3      	bne.n	80092b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ec:	2b01      	cmp	r3, #1
 80092ee:	d118      	bne.n	8009322 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	e853 3f00 	ldrex	r3, [r3]
 80092fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f023 0310 	bic.w	r3, r3, #16
 8009304:	647b      	str	r3, [r7, #68]	; 0x44
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	461a      	mov	r2, r3
 800930c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800930e:	61bb      	str	r3, [r7, #24]
 8009310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009312:	6979      	ldr	r1, [r7, #20]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	e841 2300 	strex	r3, r2, [r1]
 800931a:	613b      	str	r3, [r7, #16]
   return(result);
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1e6      	bne.n	80092f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009336:	bf00      	nop
 8009338:	3754      	adds	r7, #84	; 0x54
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009342:	b480      	push	{r7}
 8009344:	b085      	sub	sp, #20
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009350:	2b01      	cmp	r3, #1
 8009352:	d101      	bne.n	8009358 <HAL_UARTEx_DisableFifoMode+0x16>
 8009354:	2302      	movs	r3, #2
 8009356:	e027      	b.n	80093a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2224      	movs	r2, #36	; 0x24
 8009364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f022 0201 	bic.w	r2, r2, #1
 800937e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009386:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2220      	movs	r2, #32
 800939a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d101      	bne.n	80093cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80093c8:	2302      	movs	r3, #2
 80093ca:	e02d      	b.n	8009428 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2224      	movs	r2, #36	; 0x24
 80093d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0201 	bic.w	r2, r2, #1
 80093f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f84f 	bl	80094ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2220      	movs	r2, #32
 800941a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b084      	sub	sp, #16
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009440:	2b01      	cmp	r3, #1
 8009442:	d101      	bne.n	8009448 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009444:	2302      	movs	r3, #2
 8009446:	e02d      	b.n	80094a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2224      	movs	r2, #36	; 0x24
 8009454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f022 0201 	bic.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f811 	bl	80094ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2220      	movs	r2, #32
 8009496:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d108      	bne.n	80094ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2201      	movs	r2, #1
 80094c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80094cc:	e031      	b.n	8009532 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80094ce:	2308      	movs	r3, #8
 80094d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80094d2:	2308      	movs	r3, #8
 80094d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	0e5b      	lsrs	r3, r3, #25
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	f003 0307 	and.w	r3, r3, #7
 80094e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	0f5b      	lsrs	r3, r3, #29
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f003 0307 	and.w	r3, r3, #7
 80094f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80094f6:	7bbb      	ldrb	r3, [r7, #14]
 80094f8:	7b3a      	ldrb	r2, [r7, #12]
 80094fa:	4911      	ldr	r1, [pc, #68]	; (8009540 <UARTEx_SetNbDataToProcess+0x94>)
 80094fc:	5c8a      	ldrb	r2, [r1, r2]
 80094fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009502:	7b3a      	ldrb	r2, [r7, #12]
 8009504:	490f      	ldr	r1, [pc, #60]	; (8009544 <UARTEx_SetNbDataToProcess+0x98>)
 8009506:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009508:	fb93 f3f2 	sdiv	r3, r3, r2
 800950c:	b29a      	uxth	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009514:	7bfb      	ldrb	r3, [r7, #15]
 8009516:	7b7a      	ldrb	r2, [r7, #13]
 8009518:	4909      	ldr	r1, [pc, #36]	; (8009540 <UARTEx_SetNbDataToProcess+0x94>)
 800951a:	5c8a      	ldrb	r2, [r1, r2]
 800951c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009520:	7b7a      	ldrb	r2, [r7, #13]
 8009522:	4908      	ldr	r1, [pc, #32]	; (8009544 <UARTEx_SetNbDataToProcess+0x98>)
 8009524:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009526:	fb93 f3f2 	sdiv	r3, r3, r2
 800952a:	b29a      	uxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	0800b0b8 	.word	0x0800b0b8
 8009544:	0800b0c0 	.word	0x0800b0c0

08009548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009550:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009554:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800955c:	b29a      	uxth	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	b29b      	uxth	r3, r3
 8009562:	43db      	mvns	r3, r3
 8009564:	b29b      	uxth	r3, r3
 8009566:	4013      	ands	r3, r2
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800957e:	b084      	sub	sp, #16
 8009580:	b480      	push	{r7}
 8009582:	b083      	sub	sp, #12
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	f107 0014 	add.w	r0, r7, #20
 800958c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	370c      	adds	r7, #12
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	b004      	add	sp, #16
 80095be:	4770      	bx	lr

080095c0 <__errno>:
 80095c0:	4b01      	ldr	r3, [pc, #4]	; (80095c8 <__errno+0x8>)
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	20000018 	.word	0x20000018

080095cc <__libc_init_array>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	4d0d      	ldr	r5, [pc, #52]	; (8009604 <__libc_init_array+0x38>)
 80095d0:	4c0d      	ldr	r4, [pc, #52]	; (8009608 <__libc_init_array+0x3c>)
 80095d2:	1b64      	subs	r4, r4, r5
 80095d4:	10a4      	asrs	r4, r4, #2
 80095d6:	2600      	movs	r6, #0
 80095d8:	42a6      	cmp	r6, r4
 80095da:	d109      	bne.n	80095f0 <__libc_init_array+0x24>
 80095dc:	4d0b      	ldr	r5, [pc, #44]	; (800960c <__libc_init_array+0x40>)
 80095de:	4c0c      	ldr	r4, [pc, #48]	; (8009610 <__libc_init_array+0x44>)
 80095e0:	f001 fa34 	bl	800aa4c <_init>
 80095e4:	1b64      	subs	r4, r4, r5
 80095e6:	10a4      	asrs	r4, r4, #2
 80095e8:	2600      	movs	r6, #0
 80095ea:	42a6      	cmp	r6, r4
 80095ec:	d105      	bne.n	80095fa <__libc_init_array+0x2e>
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f4:	4798      	blx	r3
 80095f6:	3601      	adds	r6, #1
 80095f8:	e7ee      	b.n	80095d8 <__libc_init_array+0xc>
 80095fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80095fe:	4798      	blx	r3
 8009600:	3601      	adds	r6, #1
 8009602:	e7f2      	b.n	80095ea <__libc_init_array+0x1e>
 8009604:	0800b218 	.word	0x0800b218
 8009608:	0800b218 	.word	0x0800b218
 800960c:	0800b218 	.word	0x0800b218
 8009610:	0800b21c 	.word	0x0800b21c

08009614 <memcpy>:
 8009614:	440a      	add	r2, r1
 8009616:	4291      	cmp	r1, r2
 8009618:	f100 33ff 	add.w	r3, r0, #4294967295
 800961c:	d100      	bne.n	8009620 <memcpy+0xc>
 800961e:	4770      	bx	lr
 8009620:	b510      	push	{r4, lr}
 8009622:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800962a:	4291      	cmp	r1, r2
 800962c:	d1f9      	bne.n	8009622 <memcpy+0xe>
 800962e:	bd10      	pop	{r4, pc}

08009630 <memset>:
 8009630:	4402      	add	r2, r0
 8009632:	4603      	mov	r3, r0
 8009634:	4293      	cmp	r3, r2
 8009636:	d100      	bne.n	800963a <memset+0xa>
 8009638:	4770      	bx	lr
 800963a:	f803 1b01 	strb.w	r1, [r3], #1
 800963e:	e7f9      	b.n	8009634 <memset+0x4>

08009640 <rand>:
 8009640:	4b16      	ldr	r3, [pc, #88]	; (800969c <rand+0x5c>)
 8009642:	b510      	push	{r4, lr}
 8009644:	681c      	ldr	r4, [r3, #0]
 8009646:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009648:	b9b3      	cbnz	r3, 8009678 <rand+0x38>
 800964a:	2018      	movs	r0, #24
 800964c:	f000 f886 	bl	800975c <malloc>
 8009650:	63a0      	str	r0, [r4, #56]	; 0x38
 8009652:	b928      	cbnz	r0, 8009660 <rand+0x20>
 8009654:	4602      	mov	r2, r0
 8009656:	4b12      	ldr	r3, [pc, #72]	; (80096a0 <rand+0x60>)
 8009658:	4812      	ldr	r0, [pc, #72]	; (80096a4 <rand+0x64>)
 800965a:	214e      	movs	r1, #78	; 0x4e
 800965c:	f000 f84e 	bl	80096fc <__assert_func>
 8009660:	4a11      	ldr	r2, [pc, #68]	; (80096a8 <rand+0x68>)
 8009662:	4b12      	ldr	r3, [pc, #72]	; (80096ac <rand+0x6c>)
 8009664:	e9c0 2300 	strd	r2, r3, [r0]
 8009668:	4b11      	ldr	r3, [pc, #68]	; (80096b0 <rand+0x70>)
 800966a:	6083      	str	r3, [r0, #8]
 800966c:	230b      	movs	r3, #11
 800966e:	8183      	strh	r3, [r0, #12]
 8009670:	2201      	movs	r2, #1
 8009672:	2300      	movs	r3, #0
 8009674:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8009678:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800967a:	4a0e      	ldr	r2, [pc, #56]	; (80096b4 <rand+0x74>)
 800967c:	6920      	ldr	r0, [r4, #16]
 800967e:	6963      	ldr	r3, [r4, #20]
 8009680:	490d      	ldr	r1, [pc, #52]	; (80096b8 <rand+0x78>)
 8009682:	4342      	muls	r2, r0
 8009684:	fb01 2203 	mla	r2, r1, r3, r2
 8009688:	fba0 0101 	umull	r0, r1, r0, r1
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	eb42 0001 	adc.w	r0, r2, r1
 8009692:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8009696:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800969a:	bd10      	pop	{r4, pc}
 800969c:	20000018 	.word	0x20000018
 80096a0:	0800b0cc 	.word	0x0800b0cc
 80096a4:	0800b0e3 	.word	0x0800b0e3
 80096a8:	abcd330e 	.word	0xabcd330e
 80096ac:	e66d1234 	.word	0xe66d1234
 80096b0:	0005deec 	.word	0x0005deec
 80096b4:	5851f42d 	.word	0x5851f42d
 80096b8:	4c957f2d 	.word	0x4c957f2d

080096bc <siprintf>:
 80096bc:	b40e      	push	{r1, r2, r3}
 80096be:	b500      	push	{lr}
 80096c0:	b09c      	sub	sp, #112	; 0x70
 80096c2:	ab1d      	add	r3, sp, #116	; 0x74
 80096c4:	9002      	str	r0, [sp, #8]
 80096c6:	9006      	str	r0, [sp, #24]
 80096c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80096cc:	4809      	ldr	r0, [pc, #36]	; (80096f4 <siprintf+0x38>)
 80096ce:	9107      	str	r1, [sp, #28]
 80096d0:	9104      	str	r1, [sp, #16]
 80096d2:	4909      	ldr	r1, [pc, #36]	; (80096f8 <siprintf+0x3c>)
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	9105      	str	r1, [sp, #20]
 80096da:	6800      	ldr	r0, [r0, #0]
 80096dc:	9301      	str	r3, [sp, #4]
 80096de:	a902      	add	r1, sp, #8
 80096e0:	f000 f980 	bl	80099e4 <_svfiprintf_r>
 80096e4:	9b02      	ldr	r3, [sp, #8]
 80096e6:	2200      	movs	r2, #0
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	b01c      	add	sp, #112	; 0x70
 80096ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80096f0:	b003      	add	sp, #12
 80096f2:	4770      	bx	lr
 80096f4:	20000018 	.word	0x20000018
 80096f8:	ffff0208 	.word	0xffff0208

080096fc <__assert_func>:
 80096fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096fe:	4614      	mov	r4, r2
 8009700:	461a      	mov	r2, r3
 8009702:	4b09      	ldr	r3, [pc, #36]	; (8009728 <__assert_func+0x2c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4605      	mov	r5, r0
 8009708:	68d8      	ldr	r0, [r3, #12]
 800970a:	b14c      	cbz	r4, 8009720 <__assert_func+0x24>
 800970c:	4b07      	ldr	r3, [pc, #28]	; (800972c <__assert_func+0x30>)
 800970e:	9100      	str	r1, [sp, #0]
 8009710:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009714:	4906      	ldr	r1, [pc, #24]	; (8009730 <__assert_func+0x34>)
 8009716:	462b      	mov	r3, r5
 8009718:	f000 f80e 	bl	8009738 <fiprintf>
 800971c:	f000 fe20 	bl	800a360 <abort>
 8009720:	4b04      	ldr	r3, [pc, #16]	; (8009734 <__assert_func+0x38>)
 8009722:	461c      	mov	r4, r3
 8009724:	e7f3      	b.n	800970e <__assert_func+0x12>
 8009726:	bf00      	nop
 8009728:	20000018 	.word	0x20000018
 800972c:	0800b13e 	.word	0x0800b13e
 8009730:	0800b14b 	.word	0x0800b14b
 8009734:	0800b179 	.word	0x0800b179

08009738 <fiprintf>:
 8009738:	b40e      	push	{r1, r2, r3}
 800973a:	b503      	push	{r0, r1, lr}
 800973c:	4601      	mov	r1, r0
 800973e:	ab03      	add	r3, sp, #12
 8009740:	4805      	ldr	r0, [pc, #20]	; (8009758 <fiprintf+0x20>)
 8009742:	f853 2b04 	ldr.w	r2, [r3], #4
 8009746:	6800      	ldr	r0, [r0, #0]
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	f000 fa75 	bl	8009c38 <_vfiprintf_r>
 800974e:	b002      	add	sp, #8
 8009750:	f85d eb04 	ldr.w	lr, [sp], #4
 8009754:	b003      	add	sp, #12
 8009756:	4770      	bx	lr
 8009758:	20000018 	.word	0x20000018

0800975c <malloc>:
 800975c:	4b02      	ldr	r3, [pc, #8]	; (8009768 <malloc+0xc>)
 800975e:	4601      	mov	r1, r0
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	f000 b86f 	b.w	8009844 <_malloc_r>
 8009766:	bf00      	nop
 8009768:	20000018 	.word	0x20000018

0800976c <_free_r>:
 800976c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800976e:	2900      	cmp	r1, #0
 8009770:	d044      	beq.n	80097fc <_free_r+0x90>
 8009772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009776:	9001      	str	r0, [sp, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	f1a1 0404 	sub.w	r4, r1, #4
 800977e:	bfb8      	it	lt
 8009780:	18e4      	addlt	r4, r4, r3
 8009782:	f001 f82f 	bl	800a7e4 <__malloc_lock>
 8009786:	4a1e      	ldr	r2, [pc, #120]	; (8009800 <_free_r+0x94>)
 8009788:	9801      	ldr	r0, [sp, #4]
 800978a:	6813      	ldr	r3, [r2, #0]
 800978c:	b933      	cbnz	r3, 800979c <_free_r+0x30>
 800978e:	6063      	str	r3, [r4, #4]
 8009790:	6014      	str	r4, [r2, #0]
 8009792:	b003      	add	sp, #12
 8009794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009798:	f001 b82a 	b.w	800a7f0 <__malloc_unlock>
 800979c:	42a3      	cmp	r3, r4
 800979e:	d908      	bls.n	80097b2 <_free_r+0x46>
 80097a0:	6825      	ldr	r5, [r4, #0]
 80097a2:	1961      	adds	r1, r4, r5
 80097a4:	428b      	cmp	r3, r1
 80097a6:	bf01      	itttt	eq
 80097a8:	6819      	ldreq	r1, [r3, #0]
 80097aa:	685b      	ldreq	r3, [r3, #4]
 80097ac:	1949      	addeq	r1, r1, r5
 80097ae:	6021      	streq	r1, [r4, #0]
 80097b0:	e7ed      	b.n	800978e <_free_r+0x22>
 80097b2:	461a      	mov	r2, r3
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	b10b      	cbz	r3, 80097bc <_free_r+0x50>
 80097b8:	42a3      	cmp	r3, r4
 80097ba:	d9fa      	bls.n	80097b2 <_free_r+0x46>
 80097bc:	6811      	ldr	r1, [r2, #0]
 80097be:	1855      	adds	r5, r2, r1
 80097c0:	42a5      	cmp	r5, r4
 80097c2:	d10b      	bne.n	80097dc <_free_r+0x70>
 80097c4:	6824      	ldr	r4, [r4, #0]
 80097c6:	4421      	add	r1, r4
 80097c8:	1854      	adds	r4, r2, r1
 80097ca:	42a3      	cmp	r3, r4
 80097cc:	6011      	str	r1, [r2, #0]
 80097ce:	d1e0      	bne.n	8009792 <_free_r+0x26>
 80097d0:	681c      	ldr	r4, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	6053      	str	r3, [r2, #4]
 80097d6:	4421      	add	r1, r4
 80097d8:	6011      	str	r1, [r2, #0]
 80097da:	e7da      	b.n	8009792 <_free_r+0x26>
 80097dc:	d902      	bls.n	80097e4 <_free_r+0x78>
 80097de:	230c      	movs	r3, #12
 80097e0:	6003      	str	r3, [r0, #0]
 80097e2:	e7d6      	b.n	8009792 <_free_r+0x26>
 80097e4:	6825      	ldr	r5, [r4, #0]
 80097e6:	1961      	adds	r1, r4, r5
 80097e8:	428b      	cmp	r3, r1
 80097ea:	bf04      	itt	eq
 80097ec:	6819      	ldreq	r1, [r3, #0]
 80097ee:	685b      	ldreq	r3, [r3, #4]
 80097f0:	6063      	str	r3, [r4, #4]
 80097f2:	bf04      	itt	eq
 80097f4:	1949      	addeq	r1, r1, r5
 80097f6:	6021      	streq	r1, [r4, #0]
 80097f8:	6054      	str	r4, [r2, #4]
 80097fa:	e7ca      	b.n	8009792 <_free_r+0x26>
 80097fc:	b003      	add	sp, #12
 80097fe:	bd30      	pop	{r4, r5, pc}
 8009800:	2000ce04 	.word	0x2000ce04

08009804 <sbrk_aligned>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	4e0e      	ldr	r6, [pc, #56]	; (8009840 <sbrk_aligned+0x3c>)
 8009808:	460c      	mov	r4, r1
 800980a:	6831      	ldr	r1, [r6, #0]
 800980c:	4605      	mov	r5, r0
 800980e:	b911      	cbnz	r1, 8009816 <sbrk_aligned+0x12>
 8009810:	f000 fcd6 	bl	800a1c0 <_sbrk_r>
 8009814:	6030      	str	r0, [r6, #0]
 8009816:	4621      	mov	r1, r4
 8009818:	4628      	mov	r0, r5
 800981a:	f000 fcd1 	bl	800a1c0 <_sbrk_r>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d00a      	beq.n	8009838 <sbrk_aligned+0x34>
 8009822:	1cc4      	adds	r4, r0, #3
 8009824:	f024 0403 	bic.w	r4, r4, #3
 8009828:	42a0      	cmp	r0, r4
 800982a:	d007      	beq.n	800983c <sbrk_aligned+0x38>
 800982c:	1a21      	subs	r1, r4, r0
 800982e:	4628      	mov	r0, r5
 8009830:	f000 fcc6 	bl	800a1c0 <_sbrk_r>
 8009834:	3001      	adds	r0, #1
 8009836:	d101      	bne.n	800983c <sbrk_aligned+0x38>
 8009838:	f04f 34ff 	mov.w	r4, #4294967295
 800983c:	4620      	mov	r0, r4
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	2000ce08 	.word	0x2000ce08

08009844 <_malloc_r>:
 8009844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009848:	1ccd      	adds	r5, r1, #3
 800984a:	f025 0503 	bic.w	r5, r5, #3
 800984e:	3508      	adds	r5, #8
 8009850:	2d0c      	cmp	r5, #12
 8009852:	bf38      	it	cc
 8009854:	250c      	movcc	r5, #12
 8009856:	2d00      	cmp	r5, #0
 8009858:	4607      	mov	r7, r0
 800985a:	db01      	blt.n	8009860 <_malloc_r+0x1c>
 800985c:	42a9      	cmp	r1, r5
 800985e:	d905      	bls.n	800986c <_malloc_r+0x28>
 8009860:	230c      	movs	r3, #12
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	2600      	movs	r6, #0
 8009866:	4630      	mov	r0, r6
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986c:	4e2e      	ldr	r6, [pc, #184]	; (8009928 <_malloc_r+0xe4>)
 800986e:	f000 ffb9 	bl	800a7e4 <__malloc_lock>
 8009872:	6833      	ldr	r3, [r6, #0]
 8009874:	461c      	mov	r4, r3
 8009876:	bb34      	cbnz	r4, 80098c6 <_malloc_r+0x82>
 8009878:	4629      	mov	r1, r5
 800987a:	4638      	mov	r0, r7
 800987c:	f7ff ffc2 	bl	8009804 <sbrk_aligned>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	4604      	mov	r4, r0
 8009884:	d14d      	bne.n	8009922 <_malloc_r+0xde>
 8009886:	6834      	ldr	r4, [r6, #0]
 8009888:	4626      	mov	r6, r4
 800988a:	2e00      	cmp	r6, #0
 800988c:	d140      	bne.n	8009910 <_malloc_r+0xcc>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	4631      	mov	r1, r6
 8009892:	4638      	mov	r0, r7
 8009894:	eb04 0803 	add.w	r8, r4, r3
 8009898:	f000 fc92 	bl	800a1c0 <_sbrk_r>
 800989c:	4580      	cmp	r8, r0
 800989e:	d13a      	bne.n	8009916 <_malloc_r+0xd2>
 80098a0:	6821      	ldr	r1, [r4, #0]
 80098a2:	3503      	adds	r5, #3
 80098a4:	1a6d      	subs	r5, r5, r1
 80098a6:	f025 0503 	bic.w	r5, r5, #3
 80098aa:	3508      	adds	r5, #8
 80098ac:	2d0c      	cmp	r5, #12
 80098ae:	bf38      	it	cc
 80098b0:	250c      	movcc	r5, #12
 80098b2:	4629      	mov	r1, r5
 80098b4:	4638      	mov	r0, r7
 80098b6:	f7ff ffa5 	bl	8009804 <sbrk_aligned>
 80098ba:	3001      	adds	r0, #1
 80098bc:	d02b      	beq.n	8009916 <_malloc_r+0xd2>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	442b      	add	r3, r5
 80098c2:	6023      	str	r3, [r4, #0]
 80098c4:	e00e      	b.n	80098e4 <_malloc_r+0xa0>
 80098c6:	6822      	ldr	r2, [r4, #0]
 80098c8:	1b52      	subs	r2, r2, r5
 80098ca:	d41e      	bmi.n	800990a <_malloc_r+0xc6>
 80098cc:	2a0b      	cmp	r2, #11
 80098ce:	d916      	bls.n	80098fe <_malloc_r+0xba>
 80098d0:	1961      	adds	r1, r4, r5
 80098d2:	42a3      	cmp	r3, r4
 80098d4:	6025      	str	r5, [r4, #0]
 80098d6:	bf18      	it	ne
 80098d8:	6059      	strne	r1, [r3, #4]
 80098da:	6863      	ldr	r3, [r4, #4]
 80098dc:	bf08      	it	eq
 80098de:	6031      	streq	r1, [r6, #0]
 80098e0:	5162      	str	r2, [r4, r5]
 80098e2:	604b      	str	r3, [r1, #4]
 80098e4:	4638      	mov	r0, r7
 80098e6:	f104 060b 	add.w	r6, r4, #11
 80098ea:	f000 ff81 	bl	800a7f0 <__malloc_unlock>
 80098ee:	f026 0607 	bic.w	r6, r6, #7
 80098f2:	1d23      	adds	r3, r4, #4
 80098f4:	1af2      	subs	r2, r6, r3
 80098f6:	d0b6      	beq.n	8009866 <_malloc_r+0x22>
 80098f8:	1b9b      	subs	r3, r3, r6
 80098fa:	50a3      	str	r3, [r4, r2]
 80098fc:	e7b3      	b.n	8009866 <_malloc_r+0x22>
 80098fe:	6862      	ldr	r2, [r4, #4]
 8009900:	42a3      	cmp	r3, r4
 8009902:	bf0c      	ite	eq
 8009904:	6032      	streq	r2, [r6, #0]
 8009906:	605a      	strne	r2, [r3, #4]
 8009908:	e7ec      	b.n	80098e4 <_malloc_r+0xa0>
 800990a:	4623      	mov	r3, r4
 800990c:	6864      	ldr	r4, [r4, #4]
 800990e:	e7b2      	b.n	8009876 <_malloc_r+0x32>
 8009910:	4634      	mov	r4, r6
 8009912:	6876      	ldr	r6, [r6, #4]
 8009914:	e7b9      	b.n	800988a <_malloc_r+0x46>
 8009916:	230c      	movs	r3, #12
 8009918:	603b      	str	r3, [r7, #0]
 800991a:	4638      	mov	r0, r7
 800991c:	f000 ff68 	bl	800a7f0 <__malloc_unlock>
 8009920:	e7a1      	b.n	8009866 <_malloc_r+0x22>
 8009922:	6025      	str	r5, [r4, #0]
 8009924:	e7de      	b.n	80098e4 <_malloc_r+0xa0>
 8009926:	bf00      	nop
 8009928:	2000ce04 	.word	0x2000ce04

0800992c <__ssputs_r>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	688e      	ldr	r6, [r1, #8]
 8009932:	429e      	cmp	r6, r3
 8009934:	4682      	mov	sl, r0
 8009936:	460c      	mov	r4, r1
 8009938:	4690      	mov	r8, r2
 800993a:	461f      	mov	r7, r3
 800993c:	d838      	bhi.n	80099b0 <__ssputs_r+0x84>
 800993e:	898a      	ldrh	r2, [r1, #12]
 8009940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009944:	d032      	beq.n	80099ac <__ssputs_r+0x80>
 8009946:	6825      	ldr	r5, [r4, #0]
 8009948:	6909      	ldr	r1, [r1, #16]
 800994a:	eba5 0901 	sub.w	r9, r5, r1
 800994e:	6965      	ldr	r5, [r4, #20]
 8009950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009958:	3301      	adds	r3, #1
 800995a:	444b      	add	r3, r9
 800995c:	106d      	asrs	r5, r5, #1
 800995e:	429d      	cmp	r5, r3
 8009960:	bf38      	it	cc
 8009962:	461d      	movcc	r5, r3
 8009964:	0553      	lsls	r3, r2, #21
 8009966:	d531      	bpl.n	80099cc <__ssputs_r+0xa0>
 8009968:	4629      	mov	r1, r5
 800996a:	f7ff ff6b 	bl	8009844 <_malloc_r>
 800996e:	4606      	mov	r6, r0
 8009970:	b950      	cbnz	r0, 8009988 <__ssputs_r+0x5c>
 8009972:	230c      	movs	r3, #12
 8009974:	f8ca 3000 	str.w	r3, [sl]
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800997e:	81a3      	strh	r3, [r4, #12]
 8009980:	f04f 30ff 	mov.w	r0, #4294967295
 8009984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009988:	6921      	ldr	r1, [r4, #16]
 800998a:	464a      	mov	r2, r9
 800998c:	f7ff fe42 	bl	8009614 <memcpy>
 8009990:	89a3      	ldrh	r3, [r4, #12]
 8009992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	6126      	str	r6, [r4, #16]
 800999e:	6165      	str	r5, [r4, #20]
 80099a0:	444e      	add	r6, r9
 80099a2:	eba5 0509 	sub.w	r5, r5, r9
 80099a6:	6026      	str	r6, [r4, #0]
 80099a8:	60a5      	str	r5, [r4, #8]
 80099aa:	463e      	mov	r6, r7
 80099ac:	42be      	cmp	r6, r7
 80099ae:	d900      	bls.n	80099b2 <__ssputs_r+0x86>
 80099b0:	463e      	mov	r6, r7
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	4632      	mov	r2, r6
 80099b6:	4641      	mov	r1, r8
 80099b8:	f000 fefa 	bl	800a7b0 <memmove>
 80099bc:	68a3      	ldr	r3, [r4, #8]
 80099be:	1b9b      	subs	r3, r3, r6
 80099c0:	60a3      	str	r3, [r4, #8]
 80099c2:	6823      	ldr	r3, [r4, #0]
 80099c4:	4433      	add	r3, r6
 80099c6:	6023      	str	r3, [r4, #0]
 80099c8:	2000      	movs	r0, #0
 80099ca:	e7db      	b.n	8009984 <__ssputs_r+0x58>
 80099cc:	462a      	mov	r2, r5
 80099ce:	f000 ff15 	bl	800a7fc <_realloc_r>
 80099d2:	4606      	mov	r6, r0
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d1e1      	bne.n	800999c <__ssputs_r+0x70>
 80099d8:	6921      	ldr	r1, [r4, #16]
 80099da:	4650      	mov	r0, sl
 80099dc:	f7ff fec6 	bl	800976c <_free_r>
 80099e0:	e7c7      	b.n	8009972 <__ssputs_r+0x46>
	...

080099e4 <_svfiprintf_r>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4698      	mov	r8, r3
 80099ea:	898b      	ldrh	r3, [r1, #12]
 80099ec:	061b      	lsls	r3, r3, #24
 80099ee:	b09d      	sub	sp, #116	; 0x74
 80099f0:	4607      	mov	r7, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	4614      	mov	r4, r2
 80099f6:	d50e      	bpl.n	8009a16 <_svfiprintf_r+0x32>
 80099f8:	690b      	ldr	r3, [r1, #16]
 80099fa:	b963      	cbnz	r3, 8009a16 <_svfiprintf_r+0x32>
 80099fc:	2140      	movs	r1, #64	; 0x40
 80099fe:	f7ff ff21 	bl	8009844 <_malloc_r>
 8009a02:	6028      	str	r0, [r5, #0]
 8009a04:	6128      	str	r0, [r5, #16]
 8009a06:	b920      	cbnz	r0, 8009a12 <_svfiprintf_r+0x2e>
 8009a08:	230c      	movs	r3, #12
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a10:	e0d1      	b.n	8009bb6 <_svfiprintf_r+0x1d2>
 8009a12:	2340      	movs	r3, #64	; 0x40
 8009a14:	616b      	str	r3, [r5, #20]
 8009a16:	2300      	movs	r3, #0
 8009a18:	9309      	str	r3, [sp, #36]	; 0x24
 8009a1a:	2320      	movs	r3, #32
 8009a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a24:	2330      	movs	r3, #48	; 0x30
 8009a26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009bd0 <_svfiprintf_r+0x1ec>
 8009a2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a2e:	f04f 0901 	mov.w	r9, #1
 8009a32:	4623      	mov	r3, r4
 8009a34:	469a      	mov	sl, r3
 8009a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a3a:	b10a      	cbz	r2, 8009a40 <_svfiprintf_r+0x5c>
 8009a3c:	2a25      	cmp	r2, #37	; 0x25
 8009a3e:	d1f9      	bne.n	8009a34 <_svfiprintf_r+0x50>
 8009a40:	ebba 0b04 	subs.w	fp, sl, r4
 8009a44:	d00b      	beq.n	8009a5e <_svfiprintf_r+0x7a>
 8009a46:	465b      	mov	r3, fp
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ff6d 	bl	800992c <__ssputs_r>
 8009a52:	3001      	adds	r0, #1
 8009a54:	f000 80aa 	beq.w	8009bac <_svfiprintf_r+0x1c8>
 8009a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a5a:	445a      	add	r2, fp
 8009a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 80a2 	beq.w	8009bac <_svfiprintf_r+0x1c8>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a72:	f10a 0a01 	add.w	sl, sl, #1
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	9307      	str	r3, [sp, #28]
 8009a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a80:	4654      	mov	r4, sl
 8009a82:	2205      	movs	r2, #5
 8009a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a88:	4851      	ldr	r0, [pc, #324]	; (8009bd0 <_svfiprintf_r+0x1ec>)
 8009a8a:	f7f6 fb81 	bl	8000190 <memchr>
 8009a8e:	9a04      	ldr	r2, [sp, #16]
 8009a90:	b9d8      	cbnz	r0, 8009aca <_svfiprintf_r+0xe6>
 8009a92:	06d0      	lsls	r0, r2, #27
 8009a94:	bf44      	itt	mi
 8009a96:	2320      	movmi	r3, #32
 8009a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a9c:	0711      	lsls	r1, r2, #28
 8009a9e:	bf44      	itt	mi
 8009aa0:	232b      	movmi	r3, #43	; 0x2b
 8009aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8009aac:	d015      	beq.n	8009ada <_svfiprintf_r+0xf6>
 8009aae:	9a07      	ldr	r2, [sp, #28]
 8009ab0:	4654      	mov	r4, sl
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	f04f 0c0a 	mov.w	ip, #10
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009abe:	3b30      	subs	r3, #48	; 0x30
 8009ac0:	2b09      	cmp	r3, #9
 8009ac2:	d94e      	bls.n	8009b62 <_svfiprintf_r+0x17e>
 8009ac4:	b1b0      	cbz	r0, 8009af4 <_svfiprintf_r+0x110>
 8009ac6:	9207      	str	r2, [sp, #28]
 8009ac8:	e014      	b.n	8009af4 <_svfiprintf_r+0x110>
 8009aca:	eba0 0308 	sub.w	r3, r0, r8
 8009ace:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	46a2      	mov	sl, r4
 8009ad8:	e7d2      	b.n	8009a80 <_svfiprintf_r+0x9c>
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	1d19      	adds	r1, r3, #4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	9103      	str	r1, [sp, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfbb      	ittet	lt
 8009ae6:	425b      	neglt	r3, r3
 8009ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8009aec:	9307      	strge	r3, [sp, #28]
 8009aee:	9307      	strlt	r3, [sp, #28]
 8009af0:	bfb8      	it	lt
 8009af2:	9204      	strlt	r2, [sp, #16]
 8009af4:	7823      	ldrb	r3, [r4, #0]
 8009af6:	2b2e      	cmp	r3, #46	; 0x2e
 8009af8:	d10c      	bne.n	8009b14 <_svfiprintf_r+0x130>
 8009afa:	7863      	ldrb	r3, [r4, #1]
 8009afc:	2b2a      	cmp	r3, #42	; 0x2a
 8009afe:	d135      	bne.n	8009b6c <_svfiprintf_r+0x188>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	1d1a      	adds	r2, r3, #4
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	9203      	str	r2, [sp, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	bfb8      	it	lt
 8009b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b10:	3402      	adds	r4, #2
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009be0 <_svfiprintf_r+0x1fc>
 8009b18:	7821      	ldrb	r1, [r4, #0]
 8009b1a:	2203      	movs	r2, #3
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	f7f6 fb37 	bl	8000190 <memchr>
 8009b22:	b140      	cbz	r0, 8009b36 <_svfiprintf_r+0x152>
 8009b24:	2340      	movs	r3, #64	; 0x40
 8009b26:	eba0 000a 	sub.w	r0, r0, sl
 8009b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	4303      	orrs	r3, r0
 8009b32:	3401      	adds	r4, #1
 8009b34:	9304      	str	r3, [sp, #16]
 8009b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b3a:	4826      	ldr	r0, [pc, #152]	; (8009bd4 <_svfiprintf_r+0x1f0>)
 8009b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b40:	2206      	movs	r2, #6
 8009b42:	f7f6 fb25 	bl	8000190 <memchr>
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d038      	beq.n	8009bbc <_svfiprintf_r+0x1d8>
 8009b4a:	4b23      	ldr	r3, [pc, #140]	; (8009bd8 <_svfiprintf_r+0x1f4>)
 8009b4c:	bb1b      	cbnz	r3, 8009b96 <_svfiprintf_r+0x1b2>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	3307      	adds	r3, #7
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	3308      	adds	r3, #8
 8009b58:	9303      	str	r3, [sp, #12]
 8009b5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b5c:	4433      	add	r3, r6
 8009b5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b60:	e767      	b.n	8009a32 <_svfiprintf_r+0x4e>
 8009b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b66:	460c      	mov	r4, r1
 8009b68:	2001      	movs	r0, #1
 8009b6a:	e7a5      	b.n	8009ab8 <_svfiprintf_r+0xd4>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	3401      	adds	r4, #1
 8009b70:	9305      	str	r3, [sp, #20]
 8009b72:	4619      	mov	r1, r3
 8009b74:	f04f 0c0a 	mov.w	ip, #10
 8009b78:	4620      	mov	r0, r4
 8009b7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7e:	3a30      	subs	r2, #48	; 0x30
 8009b80:	2a09      	cmp	r2, #9
 8009b82:	d903      	bls.n	8009b8c <_svfiprintf_r+0x1a8>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0c5      	beq.n	8009b14 <_svfiprintf_r+0x130>
 8009b88:	9105      	str	r1, [sp, #20]
 8009b8a:	e7c3      	b.n	8009b14 <_svfiprintf_r+0x130>
 8009b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b90:	4604      	mov	r4, r0
 8009b92:	2301      	movs	r3, #1
 8009b94:	e7f0      	b.n	8009b78 <_svfiprintf_r+0x194>
 8009b96:	ab03      	add	r3, sp, #12
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	462a      	mov	r2, r5
 8009b9c:	4b0f      	ldr	r3, [pc, #60]	; (8009bdc <_svfiprintf_r+0x1f8>)
 8009b9e:	a904      	add	r1, sp, #16
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f3af 8000 	nop.w
 8009ba6:	1c42      	adds	r2, r0, #1
 8009ba8:	4606      	mov	r6, r0
 8009baa:	d1d6      	bne.n	8009b5a <_svfiprintf_r+0x176>
 8009bac:	89ab      	ldrh	r3, [r5, #12]
 8009bae:	065b      	lsls	r3, r3, #25
 8009bb0:	f53f af2c 	bmi.w	8009a0c <_svfiprintf_r+0x28>
 8009bb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bb6:	b01d      	add	sp, #116	; 0x74
 8009bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bbc:	ab03      	add	r3, sp, #12
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	462a      	mov	r2, r5
 8009bc2:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <_svfiprintf_r+0x1f8>)
 8009bc4:	a904      	add	r1, sp, #16
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	f000 f9d4 	bl	8009f74 <_printf_i>
 8009bcc:	e7eb      	b.n	8009ba6 <_svfiprintf_r+0x1c2>
 8009bce:	bf00      	nop
 8009bd0:	0800b17a 	.word	0x0800b17a
 8009bd4:	0800b184 	.word	0x0800b184
 8009bd8:	00000000 	.word	0x00000000
 8009bdc:	0800992d 	.word	0x0800992d
 8009be0:	0800b180 	.word	0x0800b180

08009be4 <__sfputc_r>:
 8009be4:	6893      	ldr	r3, [r2, #8]
 8009be6:	3b01      	subs	r3, #1
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	b410      	push	{r4}
 8009bec:	6093      	str	r3, [r2, #8]
 8009bee:	da08      	bge.n	8009c02 <__sfputc_r+0x1e>
 8009bf0:	6994      	ldr	r4, [r2, #24]
 8009bf2:	42a3      	cmp	r3, r4
 8009bf4:	db01      	blt.n	8009bfa <__sfputc_r+0x16>
 8009bf6:	290a      	cmp	r1, #10
 8009bf8:	d103      	bne.n	8009c02 <__sfputc_r+0x1e>
 8009bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bfe:	f000 baef 	b.w	800a1e0 <__swbuf_r>
 8009c02:	6813      	ldr	r3, [r2, #0]
 8009c04:	1c58      	adds	r0, r3, #1
 8009c06:	6010      	str	r0, [r2, #0]
 8009c08:	7019      	strb	r1, [r3, #0]
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <__sfputs_r>:
 8009c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c14:	4606      	mov	r6, r0
 8009c16:	460f      	mov	r7, r1
 8009c18:	4614      	mov	r4, r2
 8009c1a:	18d5      	adds	r5, r2, r3
 8009c1c:	42ac      	cmp	r4, r5
 8009c1e:	d101      	bne.n	8009c24 <__sfputs_r+0x12>
 8009c20:	2000      	movs	r0, #0
 8009c22:	e007      	b.n	8009c34 <__sfputs_r+0x22>
 8009c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c28:	463a      	mov	r2, r7
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	f7ff ffda 	bl	8009be4 <__sfputc_r>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d1f3      	bne.n	8009c1c <__sfputs_r+0xa>
 8009c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c38 <_vfiprintf_r>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	b09d      	sub	sp, #116	; 0x74
 8009c40:	4614      	mov	r4, r2
 8009c42:	4698      	mov	r8, r3
 8009c44:	4606      	mov	r6, r0
 8009c46:	b118      	cbz	r0, 8009c50 <_vfiprintf_r+0x18>
 8009c48:	6983      	ldr	r3, [r0, #24]
 8009c4a:	b90b      	cbnz	r3, 8009c50 <_vfiprintf_r+0x18>
 8009c4c:	f000 fcaa 	bl	800a5a4 <__sinit>
 8009c50:	4b89      	ldr	r3, [pc, #548]	; (8009e78 <_vfiprintf_r+0x240>)
 8009c52:	429d      	cmp	r5, r3
 8009c54:	d11b      	bne.n	8009c8e <_vfiprintf_r+0x56>
 8009c56:	6875      	ldr	r5, [r6, #4]
 8009c58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	d405      	bmi.n	8009c6a <_vfiprintf_r+0x32>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_vfiprintf_r+0x32>
 8009c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c66:	f000 fd3b 	bl	800a6e0 <__retarget_lock_acquire_recursive>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	071b      	lsls	r3, r3, #28
 8009c6e:	d501      	bpl.n	8009c74 <_vfiprintf_r+0x3c>
 8009c70:	692b      	ldr	r3, [r5, #16]
 8009c72:	b9eb      	cbnz	r3, 8009cb0 <_vfiprintf_r+0x78>
 8009c74:	4629      	mov	r1, r5
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 fb04 	bl	800a284 <__swsetup_r>
 8009c7c:	b1c0      	cbz	r0, 8009cb0 <_vfiprintf_r+0x78>
 8009c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c80:	07dc      	lsls	r4, r3, #31
 8009c82:	d50e      	bpl.n	8009ca2 <_vfiprintf_r+0x6a>
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	b01d      	add	sp, #116	; 0x74
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	4b7b      	ldr	r3, [pc, #492]	; (8009e7c <_vfiprintf_r+0x244>)
 8009c90:	429d      	cmp	r5, r3
 8009c92:	d101      	bne.n	8009c98 <_vfiprintf_r+0x60>
 8009c94:	68b5      	ldr	r5, [r6, #8]
 8009c96:	e7df      	b.n	8009c58 <_vfiprintf_r+0x20>
 8009c98:	4b79      	ldr	r3, [pc, #484]	; (8009e80 <_vfiprintf_r+0x248>)
 8009c9a:	429d      	cmp	r5, r3
 8009c9c:	bf08      	it	eq
 8009c9e:	68f5      	ldreq	r5, [r6, #12]
 8009ca0:	e7da      	b.n	8009c58 <_vfiprintf_r+0x20>
 8009ca2:	89ab      	ldrh	r3, [r5, #12]
 8009ca4:	0598      	lsls	r0, r3, #22
 8009ca6:	d4ed      	bmi.n	8009c84 <_vfiprintf_r+0x4c>
 8009ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009caa:	f000 fd1a 	bl	800a6e2 <__retarget_lock_release_recursive>
 8009cae:	e7e9      	b.n	8009c84 <_vfiprintf_r+0x4c>
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8009cb4:	2320      	movs	r3, #32
 8009cb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cbe:	2330      	movs	r3, #48	; 0x30
 8009cc0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e84 <_vfiprintf_r+0x24c>
 8009cc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cc8:	f04f 0901 	mov.w	r9, #1
 8009ccc:	4623      	mov	r3, r4
 8009cce:	469a      	mov	sl, r3
 8009cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cd4:	b10a      	cbz	r2, 8009cda <_vfiprintf_r+0xa2>
 8009cd6:	2a25      	cmp	r2, #37	; 0x25
 8009cd8:	d1f9      	bne.n	8009cce <_vfiprintf_r+0x96>
 8009cda:	ebba 0b04 	subs.w	fp, sl, r4
 8009cde:	d00b      	beq.n	8009cf8 <_vfiprintf_r+0xc0>
 8009ce0:	465b      	mov	r3, fp
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	4629      	mov	r1, r5
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff93 	bl	8009c12 <__sfputs_r>
 8009cec:	3001      	adds	r0, #1
 8009cee:	f000 80aa 	beq.w	8009e46 <_vfiprintf_r+0x20e>
 8009cf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cf4:	445a      	add	r2, fp
 8009cf6:	9209      	str	r2, [sp, #36]	; 0x24
 8009cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 80a2 	beq.w	8009e46 <_vfiprintf_r+0x20e>
 8009d02:	2300      	movs	r3, #0
 8009d04:	f04f 32ff 	mov.w	r2, #4294967295
 8009d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d0c:	f10a 0a01 	add.w	sl, sl, #1
 8009d10:	9304      	str	r3, [sp, #16]
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d18:	931a      	str	r3, [sp, #104]	; 0x68
 8009d1a:	4654      	mov	r4, sl
 8009d1c:	2205      	movs	r2, #5
 8009d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d22:	4858      	ldr	r0, [pc, #352]	; (8009e84 <_vfiprintf_r+0x24c>)
 8009d24:	f7f6 fa34 	bl	8000190 <memchr>
 8009d28:	9a04      	ldr	r2, [sp, #16]
 8009d2a:	b9d8      	cbnz	r0, 8009d64 <_vfiprintf_r+0x12c>
 8009d2c:	06d1      	lsls	r1, r2, #27
 8009d2e:	bf44      	itt	mi
 8009d30:	2320      	movmi	r3, #32
 8009d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d36:	0713      	lsls	r3, r2, #28
 8009d38:	bf44      	itt	mi
 8009d3a:	232b      	movmi	r3, #43	; 0x2b
 8009d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d40:	f89a 3000 	ldrb.w	r3, [sl]
 8009d44:	2b2a      	cmp	r3, #42	; 0x2a
 8009d46:	d015      	beq.n	8009d74 <_vfiprintf_r+0x13c>
 8009d48:	9a07      	ldr	r2, [sp, #28]
 8009d4a:	4654      	mov	r4, sl
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	f04f 0c0a 	mov.w	ip, #10
 8009d52:	4621      	mov	r1, r4
 8009d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d58:	3b30      	subs	r3, #48	; 0x30
 8009d5a:	2b09      	cmp	r3, #9
 8009d5c:	d94e      	bls.n	8009dfc <_vfiprintf_r+0x1c4>
 8009d5e:	b1b0      	cbz	r0, 8009d8e <_vfiprintf_r+0x156>
 8009d60:	9207      	str	r2, [sp, #28]
 8009d62:	e014      	b.n	8009d8e <_vfiprintf_r+0x156>
 8009d64:	eba0 0308 	sub.w	r3, r0, r8
 8009d68:	fa09 f303 	lsl.w	r3, r9, r3
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	9304      	str	r3, [sp, #16]
 8009d70:	46a2      	mov	sl, r4
 8009d72:	e7d2      	b.n	8009d1a <_vfiprintf_r+0xe2>
 8009d74:	9b03      	ldr	r3, [sp, #12]
 8009d76:	1d19      	adds	r1, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	9103      	str	r1, [sp, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	bfbb      	ittet	lt
 8009d80:	425b      	neglt	r3, r3
 8009d82:	f042 0202 	orrlt.w	r2, r2, #2
 8009d86:	9307      	strge	r3, [sp, #28]
 8009d88:	9307      	strlt	r3, [sp, #28]
 8009d8a:	bfb8      	it	lt
 8009d8c:	9204      	strlt	r2, [sp, #16]
 8009d8e:	7823      	ldrb	r3, [r4, #0]
 8009d90:	2b2e      	cmp	r3, #46	; 0x2e
 8009d92:	d10c      	bne.n	8009dae <_vfiprintf_r+0x176>
 8009d94:	7863      	ldrb	r3, [r4, #1]
 8009d96:	2b2a      	cmp	r3, #42	; 0x2a
 8009d98:	d135      	bne.n	8009e06 <_vfiprintf_r+0x1ce>
 8009d9a:	9b03      	ldr	r3, [sp, #12]
 8009d9c:	1d1a      	adds	r2, r3, #4
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	9203      	str	r2, [sp, #12]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bfb8      	it	lt
 8009da6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009daa:	3402      	adds	r4, #2
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e94 <_vfiprintf_r+0x25c>
 8009db2:	7821      	ldrb	r1, [r4, #0]
 8009db4:	2203      	movs	r2, #3
 8009db6:	4650      	mov	r0, sl
 8009db8:	f7f6 f9ea 	bl	8000190 <memchr>
 8009dbc:	b140      	cbz	r0, 8009dd0 <_vfiprintf_r+0x198>
 8009dbe:	2340      	movs	r3, #64	; 0x40
 8009dc0:	eba0 000a 	sub.w	r0, r0, sl
 8009dc4:	fa03 f000 	lsl.w	r0, r3, r0
 8009dc8:	9b04      	ldr	r3, [sp, #16]
 8009dca:	4303      	orrs	r3, r0
 8009dcc:	3401      	adds	r4, #1
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dd4:	482c      	ldr	r0, [pc, #176]	; (8009e88 <_vfiprintf_r+0x250>)
 8009dd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009dda:	2206      	movs	r2, #6
 8009ddc:	f7f6 f9d8 	bl	8000190 <memchr>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d03f      	beq.n	8009e64 <_vfiprintf_r+0x22c>
 8009de4:	4b29      	ldr	r3, [pc, #164]	; (8009e8c <_vfiprintf_r+0x254>)
 8009de6:	bb1b      	cbnz	r3, 8009e30 <_vfiprintf_r+0x1f8>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	3307      	adds	r3, #7
 8009dec:	f023 0307 	bic.w	r3, r3, #7
 8009df0:	3308      	adds	r3, #8
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009df6:	443b      	add	r3, r7
 8009df8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dfa:	e767      	b.n	8009ccc <_vfiprintf_r+0x94>
 8009dfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e00:	460c      	mov	r4, r1
 8009e02:	2001      	movs	r0, #1
 8009e04:	e7a5      	b.n	8009d52 <_vfiprintf_r+0x11a>
 8009e06:	2300      	movs	r3, #0
 8009e08:	3401      	adds	r4, #1
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	f04f 0c0a 	mov.w	ip, #10
 8009e12:	4620      	mov	r0, r4
 8009e14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e18:	3a30      	subs	r2, #48	; 0x30
 8009e1a:	2a09      	cmp	r2, #9
 8009e1c:	d903      	bls.n	8009e26 <_vfiprintf_r+0x1ee>
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d0c5      	beq.n	8009dae <_vfiprintf_r+0x176>
 8009e22:	9105      	str	r1, [sp, #20]
 8009e24:	e7c3      	b.n	8009dae <_vfiprintf_r+0x176>
 8009e26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e7f0      	b.n	8009e12 <_vfiprintf_r+0x1da>
 8009e30:	ab03      	add	r3, sp, #12
 8009e32:	9300      	str	r3, [sp, #0]
 8009e34:	462a      	mov	r2, r5
 8009e36:	4b16      	ldr	r3, [pc, #88]	; (8009e90 <_vfiprintf_r+0x258>)
 8009e38:	a904      	add	r1, sp, #16
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f3af 8000 	nop.w
 8009e40:	4607      	mov	r7, r0
 8009e42:	1c78      	adds	r0, r7, #1
 8009e44:	d1d6      	bne.n	8009df4 <_vfiprintf_r+0x1bc>
 8009e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e48:	07d9      	lsls	r1, r3, #31
 8009e4a:	d405      	bmi.n	8009e58 <_vfiprintf_r+0x220>
 8009e4c:	89ab      	ldrh	r3, [r5, #12]
 8009e4e:	059a      	lsls	r2, r3, #22
 8009e50:	d402      	bmi.n	8009e58 <_vfiprintf_r+0x220>
 8009e52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e54:	f000 fc45 	bl	800a6e2 <__retarget_lock_release_recursive>
 8009e58:	89ab      	ldrh	r3, [r5, #12]
 8009e5a:	065b      	lsls	r3, r3, #25
 8009e5c:	f53f af12 	bmi.w	8009c84 <_vfiprintf_r+0x4c>
 8009e60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e62:	e711      	b.n	8009c88 <_vfiprintf_r+0x50>
 8009e64:	ab03      	add	r3, sp, #12
 8009e66:	9300      	str	r3, [sp, #0]
 8009e68:	462a      	mov	r2, r5
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <_vfiprintf_r+0x258>)
 8009e6c:	a904      	add	r1, sp, #16
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f000 f880 	bl	8009f74 <_printf_i>
 8009e74:	e7e4      	b.n	8009e40 <_vfiprintf_r+0x208>
 8009e76:	bf00      	nop
 8009e78:	0800b1d0 	.word	0x0800b1d0
 8009e7c:	0800b1f0 	.word	0x0800b1f0
 8009e80:	0800b1b0 	.word	0x0800b1b0
 8009e84:	0800b17a 	.word	0x0800b17a
 8009e88:	0800b184 	.word	0x0800b184
 8009e8c:	00000000 	.word	0x00000000
 8009e90:	08009c13 	.word	0x08009c13
 8009e94:	0800b180 	.word	0x0800b180

08009e98 <_printf_common>:
 8009e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e9c:	4616      	mov	r6, r2
 8009e9e:	4699      	mov	r9, r3
 8009ea0:	688a      	ldr	r2, [r1, #8]
 8009ea2:	690b      	ldr	r3, [r1, #16]
 8009ea4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	bfb8      	it	lt
 8009eac:	4613      	movlt	r3, r2
 8009eae:	6033      	str	r3, [r6, #0]
 8009eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	460c      	mov	r4, r1
 8009eb8:	b10a      	cbz	r2, 8009ebe <_printf_common+0x26>
 8009eba:	3301      	adds	r3, #1
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	0699      	lsls	r1, r3, #26
 8009ec2:	bf42      	ittt	mi
 8009ec4:	6833      	ldrmi	r3, [r6, #0]
 8009ec6:	3302      	addmi	r3, #2
 8009ec8:	6033      	strmi	r3, [r6, #0]
 8009eca:	6825      	ldr	r5, [r4, #0]
 8009ecc:	f015 0506 	ands.w	r5, r5, #6
 8009ed0:	d106      	bne.n	8009ee0 <_printf_common+0x48>
 8009ed2:	f104 0a19 	add.w	sl, r4, #25
 8009ed6:	68e3      	ldr	r3, [r4, #12]
 8009ed8:	6832      	ldr	r2, [r6, #0]
 8009eda:	1a9b      	subs	r3, r3, r2
 8009edc:	42ab      	cmp	r3, r5
 8009ede:	dc26      	bgt.n	8009f2e <_printf_common+0x96>
 8009ee0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ee4:	1e13      	subs	r3, r2, #0
 8009ee6:	6822      	ldr	r2, [r4, #0]
 8009ee8:	bf18      	it	ne
 8009eea:	2301      	movne	r3, #1
 8009eec:	0692      	lsls	r2, r2, #26
 8009eee:	d42b      	bmi.n	8009f48 <_printf_common+0xb0>
 8009ef0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ef4:	4649      	mov	r1, r9
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	47c0      	blx	r8
 8009efa:	3001      	adds	r0, #1
 8009efc:	d01e      	beq.n	8009f3c <_printf_common+0xa4>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	68e5      	ldr	r5, [r4, #12]
 8009f02:	6832      	ldr	r2, [r6, #0]
 8009f04:	f003 0306 	and.w	r3, r3, #6
 8009f08:	2b04      	cmp	r3, #4
 8009f0a:	bf08      	it	eq
 8009f0c:	1aad      	subeq	r5, r5, r2
 8009f0e:	68a3      	ldr	r3, [r4, #8]
 8009f10:	6922      	ldr	r2, [r4, #16]
 8009f12:	bf0c      	ite	eq
 8009f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f18:	2500      	movne	r5, #0
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	bfc4      	itt	gt
 8009f1e:	1a9b      	subgt	r3, r3, r2
 8009f20:	18ed      	addgt	r5, r5, r3
 8009f22:	2600      	movs	r6, #0
 8009f24:	341a      	adds	r4, #26
 8009f26:	42b5      	cmp	r5, r6
 8009f28:	d11a      	bne.n	8009f60 <_printf_common+0xc8>
 8009f2a:	2000      	movs	r0, #0
 8009f2c:	e008      	b.n	8009f40 <_printf_common+0xa8>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	4652      	mov	r2, sl
 8009f32:	4649      	mov	r1, r9
 8009f34:	4638      	mov	r0, r7
 8009f36:	47c0      	blx	r8
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d103      	bne.n	8009f44 <_printf_common+0xac>
 8009f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f44:	3501      	adds	r5, #1
 8009f46:	e7c6      	b.n	8009ed6 <_printf_common+0x3e>
 8009f48:	18e1      	adds	r1, r4, r3
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	2030      	movs	r0, #48	; 0x30
 8009f4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f52:	4422      	add	r2, r4
 8009f54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f5c:	3302      	adds	r3, #2
 8009f5e:	e7c7      	b.n	8009ef0 <_printf_common+0x58>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4622      	mov	r2, r4
 8009f64:	4649      	mov	r1, r9
 8009f66:	4638      	mov	r0, r7
 8009f68:	47c0      	blx	r8
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	d0e6      	beq.n	8009f3c <_printf_common+0xa4>
 8009f6e:	3601      	adds	r6, #1
 8009f70:	e7d9      	b.n	8009f26 <_printf_common+0x8e>
	...

08009f74 <_printf_i>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	7e0f      	ldrb	r7, [r1, #24]
 8009f7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f7c:	2f78      	cmp	r7, #120	; 0x78
 8009f7e:	4691      	mov	r9, r2
 8009f80:	4680      	mov	r8, r0
 8009f82:	460c      	mov	r4, r1
 8009f84:	469a      	mov	sl, r3
 8009f86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f8a:	d807      	bhi.n	8009f9c <_printf_i+0x28>
 8009f8c:	2f62      	cmp	r7, #98	; 0x62
 8009f8e:	d80a      	bhi.n	8009fa6 <_printf_i+0x32>
 8009f90:	2f00      	cmp	r7, #0
 8009f92:	f000 80d8 	beq.w	800a146 <_printf_i+0x1d2>
 8009f96:	2f58      	cmp	r7, #88	; 0x58
 8009f98:	f000 80a3 	beq.w	800a0e2 <_printf_i+0x16e>
 8009f9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fa4:	e03a      	b.n	800a01c <_printf_i+0xa8>
 8009fa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009faa:	2b15      	cmp	r3, #21
 8009fac:	d8f6      	bhi.n	8009f9c <_printf_i+0x28>
 8009fae:	a101      	add	r1, pc, #4	; (adr r1, 8009fb4 <_printf_i+0x40>)
 8009fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fb4:	0800a00d 	.word	0x0800a00d
 8009fb8:	0800a021 	.word	0x0800a021
 8009fbc:	08009f9d 	.word	0x08009f9d
 8009fc0:	08009f9d 	.word	0x08009f9d
 8009fc4:	08009f9d 	.word	0x08009f9d
 8009fc8:	08009f9d 	.word	0x08009f9d
 8009fcc:	0800a021 	.word	0x0800a021
 8009fd0:	08009f9d 	.word	0x08009f9d
 8009fd4:	08009f9d 	.word	0x08009f9d
 8009fd8:	08009f9d 	.word	0x08009f9d
 8009fdc:	08009f9d 	.word	0x08009f9d
 8009fe0:	0800a12d 	.word	0x0800a12d
 8009fe4:	0800a051 	.word	0x0800a051
 8009fe8:	0800a10f 	.word	0x0800a10f
 8009fec:	08009f9d 	.word	0x08009f9d
 8009ff0:	08009f9d 	.word	0x08009f9d
 8009ff4:	0800a14f 	.word	0x0800a14f
 8009ff8:	08009f9d 	.word	0x08009f9d
 8009ffc:	0800a051 	.word	0x0800a051
 800a000:	08009f9d 	.word	0x08009f9d
 800a004:	08009f9d 	.word	0x08009f9d
 800a008:	0800a117 	.word	0x0800a117
 800a00c:	682b      	ldr	r3, [r5, #0]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	602a      	str	r2, [r5, #0]
 800a014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a018:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a01c:	2301      	movs	r3, #1
 800a01e:	e0a3      	b.n	800a168 <_printf_i+0x1f4>
 800a020:	6820      	ldr	r0, [r4, #0]
 800a022:	6829      	ldr	r1, [r5, #0]
 800a024:	0606      	lsls	r6, r0, #24
 800a026:	f101 0304 	add.w	r3, r1, #4
 800a02a:	d50a      	bpl.n	800a042 <_printf_i+0xce>
 800a02c:	680e      	ldr	r6, [r1, #0]
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	2e00      	cmp	r6, #0
 800a032:	da03      	bge.n	800a03c <_printf_i+0xc8>
 800a034:	232d      	movs	r3, #45	; 0x2d
 800a036:	4276      	negs	r6, r6
 800a038:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a03c:	485e      	ldr	r0, [pc, #376]	; (800a1b8 <_printf_i+0x244>)
 800a03e:	230a      	movs	r3, #10
 800a040:	e019      	b.n	800a076 <_printf_i+0x102>
 800a042:	680e      	ldr	r6, [r1, #0]
 800a044:	602b      	str	r3, [r5, #0]
 800a046:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a04a:	bf18      	it	ne
 800a04c:	b236      	sxthne	r6, r6
 800a04e:	e7ef      	b.n	800a030 <_printf_i+0xbc>
 800a050:	682b      	ldr	r3, [r5, #0]
 800a052:	6820      	ldr	r0, [r4, #0]
 800a054:	1d19      	adds	r1, r3, #4
 800a056:	6029      	str	r1, [r5, #0]
 800a058:	0601      	lsls	r1, r0, #24
 800a05a:	d501      	bpl.n	800a060 <_printf_i+0xec>
 800a05c:	681e      	ldr	r6, [r3, #0]
 800a05e:	e002      	b.n	800a066 <_printf_i+0xf2>
 800a060:	0646      	lsls	r6, r0, #25
 800a062:	d5fb      	bpl.n	800a05c <_printf_i+0xe8>
 800a064:	881e      	ldrh	r6, [r3, #0]
 800a066:	4854      	ldr	r0, [pc, #336]	; (800a1b8 <_printf_i+0x244>)
 800a068:	2f6f      	cmp	r7, #111	; 0x6f
 800a06a:	bf0c      	ite	eq
 800a06c:	2308      	moveq	r3, #8
 800a06e:	230a      	movne	r3, #10
 800a070:	2100      	movs	r1, #0
 800a072:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a076:	6865      	ldr	r5, [r4, #4]
 800a078:	60a5      	str	r5, [r4, #8]
 800a07a:	2d00      	cmp	r5, #0
 800a07c:	bfa2      	ittt	ge
 800a07e:	6821      	ldrge	r1, [r4, #0]
 800a080:	f021 0104 	bicge.w	r1, r1, #4
 800a084:	6021      	strge	r1, [r4, #0]
 800a086:	b90e      	cbnz	r6, 800a08c <_printf_i+0x118>
 800a088:	2d00      	cmp	r5, #0
 800a08a:	d04d      	beq.n	800a128 <_printf_i+0x1b4>
 800a08c:	4615      	mov	r5, r2
 800a08e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a092:	fb03 6711 	mls	r7, r3, r1, r6
 800a096:	5dc7      	ldrb	r7, [r0, r7]
 800a098:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a09c:	4637      	mov	r7, r6
 800a09e:	42bb      	cmp	r3, r7
 800a0a0:	460e      	mov	r6, r1
 800a0a2:	d9f4      	bls.n	800a08e <_printf_i+0x11a>
 800a0a4:	2b08      	cmp	r3, #8
 800a0a6:	d10b      	bne.n	800a0c0 <_printf_i+0x14c>
 800a0a8:	6823      	ldr	r3, [r4, #0]
 800a0aa:	07de      	lsls	r6, r3, #31
 800a0ac:	d508      	bpl.n	800a0c0 <_printf_i+0x14c>
 800a0ae:	6923      	ldr	r3, [r4, #16]
 800a0b0:	6861      	ldr	r1, [r4, #4]
 800a0b2:	4299      	cmp	r1, r3
 800a0b4:	bfde      	ittt	le
 800a0b6:	2330      	movle	r3, #48	; 0x30
 800a0b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0c0:	1b52      	subs	r2, r2, r5
 800a0c2:	6122      	str	r2, [r4, #16]
 800a0c4:	f8cd a000 	str.w	sl, [sp]
 800a0c8:	464b      	mov	r3, r9
 800a0ca:	aa03      	add	r2, sp, #12
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	4640      	mov	r0, r8
 800a0d0:	f7ff fee2 	bl	8009e98 <_printf_common>
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d14c      	bne.n	800a172 <_printf_i+0x1fe>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0dc:	b004      	add	sp, #16
 800a0de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e2:	4835      	ldr	r0, [pc, #212]	; (800a1b8 <_printf_i+0x244>)
 800a0e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a0e8:	6829      	ldr	r1, [r5, #0]
 800a0ea:	6823      	ldr	r3, [r4, #0]
 800a0ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a0f0:	6029      	str	r1, [r5, #0]
 800a0f2:	061d      	lsls	r5, r3, #24
 800a0f4:	d514      	bpl.n	800a120 <_printf_i+0x1ac>
 800a0f6:	07df      	lsls	r7, r3, #31
 800a0f8:	bf44      	itt	mi
 800a0fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a0fe:	6023      	strmi	r3, [r4, #0]
 800a100:	b91e      	cbnz	r6, 800a10a <_printf_i+0x196>
 800a102:	6823      	ldr	r3, [r4, #0]
 800a104:	f023 0320 	bic.w	r3, r3, #32
 800a108:	6023      	str	r3, [r4, #0]
 800a10a:	2310      	movs	r3, #16
 800a10c:	e7b0      	b.n	800a070 <_printf_i+0xfc>
 800a10e:	6823      	ldr	r3, [r4, #0]
 800a110:	f043 0320 	orr.w	r3, r3, #32
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	2378      	movs	r3, #120	; 0x78
 800a118:	4828      	ldr	r0, [pc, #160]	; (800a1bc <_printf_i+0x248>)
 800a11a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a11e:	e7e3      	b.n	800a0e8 <_printf_i+0x174>
 800a120:	0659      	lsls	r1, r3, #25
 800a122:	bf48      	it	mi
 800a124:	b2b6      	uxthmi	r6, r6
 800a126:	e7e6      	b.n	800a0f6 <_printf_i+0x182>
 800a128:	4615      	mov	r5, r2
 800a12a:	e7bb      	b.n	800a0a4 <_printf_i+0x130>
 800a12c:	682b      	ldr	r3, [r5, #0]
 800a12e:	6826      	ldr	r6, [r4, #0]
 800a130:	6961      	ldr	r1, [r4, #20]
 800a132:	1d18      	adds	r0, r3, #4
 800a134:	6028      	str	r0, [r5, #0]
 800a136:	0635      	lsls	r5, r6, #24
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	d501      	bpl.n	800a140 <_printf_i+0x1cc>
 800a13c:	6019      	str	r1, [r3, #0]
 800a13e:	e002      	b.n	800a146 <_printf_i+0x1d2>
 800a140:	0670      	lsls	r0, r6, #25
 800a142:	d5fb      	bpl.n	800a13c <_printf_i+0x1c8>
 800a144:	8019      	strh	r1, [r3, #0]
 800a146:	2300      	movs	r3, #0
 800a148:	6123      	str	r3, [r4, #16]
 800a14a:	4615      	mov	r5, r2
 800a14c:	e7ba      	b.n	800a0c4 <_printf_i+0x150>
 800a14e:	682b      	ldr	r3, [r5, #0]
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	602a      	str	r2, [r5, #0]
 800a154:	681d      	ldr	r5, [r3, #0]
 800a156:	6862      	ldr	r2, [r4, #4]
 800a158:	2100      	movs	r1, #0
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7f6 f818 	bl	8000190 <memchr>
 800a160:	b108      	cbz	r0, 800a166 <_printf_i+0x1f2>
 800a162:	1b40      	subs	r0, r0, r5
 800a164:	6060      	str	r0, [r4, #4]
 800a166:	6863      	ldr	r3, [r4, #4]
 800a168:	6123      	str	r3, [r4, #16]
 800a16a:	2300      	movs	r3, #0
 800a16c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a170:	e7a8      	b.n	800a0c4 <_printf_i+0x150>
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	462a      	mov	r2, r5
 800a176:	4649      	mov	r1, r9
 800a178:	4640      	mov	r0, r8
 800a17a:	47d0      	blx	sl
 800a17c:	3001      	adds	r0, #1
 800a17e:	d0ab      	beq.n	800a0d8 <_printf_i+0x164>
 800a180:	6823      	ldr	r3, [r4, #0]
 800a182:	079b      	lsls	r3, r3, #30
 800a184:	d413      	bmi.n	800a1ae <_printf_i+0x23a>
 800a186:	68e0      	ldr	r0, [r4, #12]
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	4298      	cmp	r0, r3
 800a18c:	bfb8      	it	lt
 800a18e:	4618      	movlt	r0, r3
 800a190:	e7a4      	b.n	800a0dc <_printf_i+0x168>
 800a192:	2301      	movs	r3, #1
 800a194:	4632      	mov	r2, r6
 800a196:	4649      	mov	r1, r9
 800a198:	4640      	mov	r0, r8
 800a19a:	47d0      	blx	sl
 800a19c:	3001      	adds	r0, #1
 800a19e:	d09b      	beq.n	800a0d8 <_printf_i+0x164>
 800a1a0:	3501      	adds	r5, #1
 800a1a2:	68e3      	ldr	r3, [r4, #12]
 800a1a4:	9903      	ldr	r1, [sp, #12]
 800a1a6:	1a5b      	subs	r3, r3, r1
 800a1a8:	42ab      	cmp	r3, r5
 800a1aa:	dcf2      	bgt.n	800a192 <_printf_i+0x21e>
 800a1ac:	e7eb      	b.n	800a186 <_printf_i+0x212>
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	f104 0619 	add.w	r6, r4, #25
 800a1b4:	e7f5      	b.n	800a1a2 <_printf_i+0x22e>
 800a1b6:	bf00      	nop
 800a1b8:	0800b18b 	.word	0x0800b18b
 800a1bc:	0800b19c 	.word	0x0800b19c

0800a1c0 <_sbrk_r>:
 800a1c0:	b538      	push	{r3, r4, r5, lr}
 800a1c2:	4d06      	ldr	r5, [pc, #24]	; (800a1dc <_sbrk_r+0x1c>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	4604      	mov	r4, r0
 800a1c8:	4608      	mov	r0, r1
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7fa f8c4 	bl	8004358 <_sbrk>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d102      	bne.n	800a1da <_sbrk_r+0x1a>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	b103      	cbz	r3, 800a1da <_sbrk_r+0x1a>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	bd38      	pop	{r3, r4, r5, pc}
 800a1dc:	2000ce10 	.word	0x2000ce10

0800a1e0 <__swbuf_r>:
 800a1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e2:	460e      	mov	r6, r1
 800a1e4:	4614      	mov	r4, r2
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	b118      	cbz	r0, 800a1f2 <__swbuf_r+0x12>
 800a1ea:	6983      	ldr	r3, [r0, #24]
 800a1ec:	b90b      	cbnz	r3, 800a1f2 <__swbuf_r+0x12>
 800a1ee:	f000 f9d9 	bl	800a5a4 <__sinit>
 800a1f2:	4b21      	ldr	r3, [pc, #132]	; (800a278 <__swbuf_r+0x98>)
 800a1f4:	429c      	cmp	r4, r3
 800a1f6:	d12b      	bne.n	800a250 <__swbuf_r+0x70>
 800a1f8:	686c      	ldr	r4, [r5, #4]
 800a1fa:	69a3      	ldr	r3, [r4, #24]
 800a1fc:	60a3      	str	r3, [r4, #8]
 800a1fe:	89a3      	ldrh	r3, [r4, #12]
 800a200:	071a      	lsls	r2, r3, #28
 800a202:	d52f      	bpl.n	800a264 <__swbuf_r+0x84>
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	b36b      	cbz	r3, 800a264 <__swbuf_r+0x84>
 800a208:	6923      	ldr	r3, [r4, #16]
 800a20a:	6820      	ldr	r0, [r4, #0]
 800a20c:	1ac0      	subs	r0, r0, r3
 800a20e:	6963      	ldr	r3, [r4, #20]
 800a210:	b2f6      	uxtb	r6, r6
 800a212:	4283      	cmp	r3, r0
 800a214:	4637      	mov	r7, r6
 800a216:	dc04      	bgt.n	800a222 <__swbuf_r+0x42>
 800a218:	4621      	mov	r1, r4
 800a21a:	4628      	mov	r0, r5
 800a21c:	f000 f92e 	bl	800a47c <_fflush_r>
 800a220:	bb30      	cbnz	r0, 800a270 <__swbuf_r+0x90>
 800a222:	68a3      	ldr	r3, [r4, #8]
 800a224:	3b01      	subs	r3, #1
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	6022      	str	r2, [r4, #0]
 800a22e:	701e      	strb	r6, [r3, #0]
 800a230:	6963      	ldr	r3, [r4, #20]
 800a232:	3001      	adds	r0, #1
 800a234:	4283      	cmp	r3, r0
 800a236:	d004      	beq.n	800a242 <__swbuf_r+0x62>
 800a238:	89a3      	ldrh	r3, [r4, #12]
 800a23a:	07db      	lsls	r3, r3, #31
 800a23c:	d506      	bpl.n	800a24c <__swbuf_r+0x6c>
 800a23e:	2e0a      	cmp	r6, #10
 800a240:	d104      	bne.n	800a24c <__swbuf_r+0x6c>
 800a242:	4621      	mov	r1, r4
 800a244:	4628      	mov	r0, r5
 800a246:	f000 f919 	bl	800a47c <_fflush_r>
 800a24a:	b988      	cbnz	r0, 800a270 <__swbuf_r+0x90>
 800a24c:	4638      	mov	r0, r7
 800a24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a250:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <__swbuf_r+0x9c>)
 800a252:	429c      	cmp	r4, r3
 800a254:	d101      	bne.n	800a25a <__swbuf_r+0x7a>
 800a256:	68ac      	ldr	r4, [r5, #8]
 800a258:	e7cf      	b.n	800a1fa <__swbuf_r+0x1a>
 800a25a:	4b09      	ldr	r3, [pc, #36]	; (800a280 <__swbuf_r+0xa0>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	bf08      	it	eq
 800a260:	68ec      	ldreq	r4, [r5, #12]
 800a262:	e7ca      	b.n	800a1fa <__swbuf_r+0x1a>
 800a264:	4621      	mov	r1, r4
 800a266:	4628      	mov	r0, r5
 800a268:	f000 f80c 	bl	800a284 <__swsetup_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	d0cb      	beq.n	800a208 <__swbuf_r+0x28>
 800a270:	f04f 37ff 	mov.w	r7, #4294967295
 800a274:	e7ea      	b.n	800a24c <__swbuf_r+0x6c>
 800a276:	bf00      	nop
 800a278:	0800b1d0 	.word	0x0800b1d0
 800a27c:	0800b1f0 	.word	0x0800b1f0
 800a280:	0800b1b0 	.word	0x0800b1b0

0800a284 <__swsetup_r>:
 800a284:	4b32      	ldr	r3, [pc, #200]	; (800a350 <__swsetup_r+0xcc>)
 800a286:	b570      	push	{r4, r5, r6, lr}
 800a288:	681d      	ldr	r5, [r3, #0]
 800a28a:	4606      	mov	r6, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	b125      	cbz	r5, 800a29a <__swsetup_r+0x16>
 800a290:	69ab      	ldr	r3, [r5, #24]
 800a292:	b913      	cbnz	r3, 800a29a <__swsetup_r+0x16>
 800a294:	4628      	mov	r0, r5
 800a296:	f000 f985 	bl	800a5a4 <__sinit>
 800a29a:	4b2e      	ldr	r3, [pc, #184]	; (800a354 <__swsetup_r+0xd0>)
 800a29c:	429c      	cmp	r4, r3
 800a29e:	d10f      	bne.n	800a2c0 <__swsetup_r+0x3c>
 800a2a0:	686c      	ldr	r4, [r5, #4]
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2a8:	0719      	lsls	r1, r3, #28
 800a2aa:	d42c      	bmi.n	800a306 <__swsetup_r+0x82>
 800a2ac:	06dd      	lsls	r5, r3, #27
 800a2ae:	d411      	bmi.n	800a2d4 <__swsetup_r+0x50>
 800a2b0:	2309      	movs	r3, #9
 800a2b2:	6033      	str	r3, [r6, #0]
 800a2b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a2be:	e03e      	b.n	800a33e <__swsetup_r+0xba>
 800a2c0:	4b25      	ldr	r3, [pc, #148]	; (800a358 <__swsetup_r+0xd4>)
 800a2c2:	429c      	cmp	r4, r3
 800a2c4:	d101      	bne.n	800a2ca <__swsetup_r+0x46>
 800a2c6:	68ac      	ldr	r4, [r5, #8]
 800a2c8:	e7eb      	b.n	800a2a2 <__swsetup_r+0x1e>
 800a2ca:	4b24      	ldr	r3, [pc, #144]	; (800a35c <__swsetup_r+0xd8>)
 800a2cc:	429c      	cmp	r4, r3
 800a2ce:	bf08      	it	eq
 800a2d0:	68ec      	ldreq	r4, [r5, #12]
 800a2d2:	e7e6      	b.n	800a2a2 <__swsetup_r+0x1e>
 800a2d4:	0758      	lsls	r0, r3, #29
 800a2d6:	d512      	bpl.n	800a2fe <__swsetup_r+0x7a>
 800a2d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a2da:	b141      	cbz	r1, 800a2ee <__swsetup_r+0x6a>
 800a2dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2e0:	4299      	cmp	r1, r3
 800a2e2:	d002      	beq.n	800a2ea <__swsetup_r+0x66>
 800a2e4:	4630      	mov	r0, r6
 800a2e6:	f7ff fa41 	bl	800976c <_free_r>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a2ee:	89a3      	ldrh	r3, [r4, #12]
 800a2f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2f4:	81a3      	strh	r3, [r4, #12]
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	6923      	ldr	r3, [r4, #16]
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	89a3      	ldrh	r3, [r4, #12]
 800a300:	f043 0308 	orr.w	r3, r3, #8
 800a304:	81a3      	strh	r3, [r4, #12]
 800a306:	6923      	ldr	r3, [r4, #16]
 800a308:	b94b      	cbnz	r3, 800a31e <__swsetup_r+0x9a>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a314:	d003      	beq.n	800a31e <__swsetup_r+0x9a>
 800a316:	4621      	mov	r1, r4
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 fa09 	bl	800a730 <__smakebuf_r>
 800a31e:	89a0      	ldrh	r0, [r4, #12]
 800a320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a324:	f010 0301 	ands.w	r3, r0, #1
 800a328:	d00a      	beq.n	800a340 <__swsetup_r+0xbc>
 800a32a:	2300      	movs	r3, #0
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	6963      	ldr	r3, [r4, #20]
 800a330:	425b      	negs	r3, r3
 800a332:	61a3      	str	r3, [r4, #24]
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	b943      	cbnz	r3, 800a34a <__swsetup_r+0xc6>
 800a338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a33c:	d1ba      	bne.n	800a2b4 <__swsetup_r+0x30>
 800a33e:	bd70      	pop	{r4, r5, r6, pc}
 800a340:	0781      	lsls	r1, r0, #30
 800a342:	bf58      	it	pl
 800a344:	6963      	ldrpl	r3, [r4, #20]
 800a346:	60a3      	str	r3, [r4, #8]
 800a348:	e7f4      	b.n	800a334 <__swsetup_r+0xb0>
 800a34a:	2000      	movs	r0, #0
 800a34c:	e7f7      	b.n	800a33e <__swsetup_r+0xba>
 800a34e:	bf00      	nop
 800a350:	20000018 	.word	0x20000018
 800a354:	0800b1d0 	.word	0x0800b1d0
 800a358:	0800b1f0 	.word	0x0800b1f0
 800a35c:	0800b1b0 	.word	0x0800b1b0

0800a360 <abort>:
 800a360:	b508      	push	{r3, lr}
 800a362:	2006      	movs	r0, #6
 800a364:	f000 faa2 	bl	800a8ac <raise>
 800a368:	2001      	movs	r0, #1
 800a36a:	f7f9 ff7d 	bl	8004268 <_exit>
	...

0800a370 <__sflush_r>:
 800a370:	898a      	ldrh	r2, [r1, #12]
 800a372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a376:	4605      	mov	r5, r0
 800a378:	0710      	lsls	r0, r2, #28
 800a37a:	460c      	mov	r4, r1
 800a37c:	d458      	bmi.n	800a430 <__sflush_r+0xc0>
 800a37e:	684b      	ldr	r3, [r1, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	dc05      	bgt.n	800a390 <__sflush_r+0x20>
 800a384:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a386:	2b00      	cmp	r3, #0
 800a388:	dc02      	bgt.n	800a390 <__sflush_r+0x20>
 800a38a:	2000      	movs	r0, #0
 800a38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a390:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a392:	2e00      	cmp	r6, #0
 800a394:	d0f9      	beq.n	800a38a <__sflush_r+0x1a>
 800a396:	2300      	movs	r3, #0
 800a398:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a39c:	682f      	ldr	r7, [r5, #0]
 800a39e:	602b      	str	r3, [r5, #0]
 800a3a0:	d032      	beq.n	800a408 <__sflush_r+0x98>
 800a3a2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	075a      	lsls	r2, r3, #29
 800a3a8:	d505      	bpl.n	800a3b6 <__sflush_r+0x46>
 800a3aa:	6863      	ldr	r3, [r4, #4]
 800a3ac:	1ac0      	subs	r0, r0, r3
 800a3ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3b0:	b10b      	cbz	r3, 800a3b6 <__sflush_r+0x46>
 800a3b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3b4:	1ac0      	subs	r0, r0, r3
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3bc:	6a21      	ldr	r1, [r4, #32]
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b0      	blx	r6
 800a3c2:	1c43      	adds	r3, r0, #1
 800a3c4:	89a3      	ldrh	r3, [r4, #12]
 800a3c6:	d106      	bne.n	800a3d6 <__sflush_r+0x66>
 800a3c8:	6829      	ldr	r1, [r5, #0]
 800a3ca:	291d      	cmp	r1, #29
 800a3cc:	d82c      	bhi.n	800a428 <__sflush_r+0xb8>
 800a3ce:	4a2a      	ldr	r2, [pc, #168]	; (800a478 <__sflush_r+0x108>)
 800a3d0:	40ca      	lsrs	r2, r1
 800a3d2:	07d6      	lsls	r6, r2, #31
 800a3d4:	d528      	bpl.n	800a428 <__sflush_r+0xb8>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	6062      	str	r2, [r4, #4]
 800a3da:	04d9      	lsls	r1, r3, #19
 800a3dc:	6922      	ldr	r2, [r4, #16]
 800a3de:	6022      	str	r2, [r4, #0]
 800a3e0:	d504      	bpl.n	800a3ec <__sflush_r+0x7c>
 800a3e2:	1c42      	adds	r2, r0, #1
 800a3e4:	d101      	bne.n	800a3ea <__sflush_r+0x7a>
 800a3e6:	682b      	ldr	r3, [r5, #0]
 800a3e8:	b903      	cbnz	r3, 800a3ec <__sflush_r+0x7c>
 800a3ea:	6560      	str	r0, [r4, #84]	; 0x54
 800a3ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3ee:	602f      	str	r7, [r5, #0]
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	d0ca      	beq.n	800a38a <__sflush_r+0x1a>
 800a3f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3f8:	4299      	cmp	r1, r3
 800a3fa:	d002      	beq.n	800a402 <__sflush_r+0x92>
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f7ff f9b5 	bl	800976c <_free_r>
 800a402:	2000      	movs	r0, #0
 800a404:	6360      	str	r0, [r4, #52]	; 0x34
 800a406:	e7c1      	b.n	800a38c <__sflush_r+0x1c>
 800a408:	6a21      	ldr	r1, [r4, #32]
 800a40a:	2301      	movs	r3, #1
 800a40c:	4628      	mov	r0, r5
 800a40e:	47b0      	blx	r6
 800a410:	1c41      	adds	r1, r0, #1
 800a412:	d1c7      	bne.n	800a3a4 <__sflush_r+0x34>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0c4      	beq.n	800a3a4 <__sflush_r+0x34>
 800a41a:	2b1d      	cmp	r3, #29
 800a41c:	d001      	beq.n	800a422 <__sflush_r+0xb2>
 800a41e:	2b16      	cmp	r3, #22
 800a420:	d101      	bne.n	800a426 <__sflush_r+0xb6>
 800a422:	602f      	str	r7, [r5, #0]
 800a424:	e7b1      	b.n	800a38a <__sflush_r+0x1a>
 800a426:	89a3      	ldrh	r3, [r4, #12]
 800a428:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42c:	81a3      	strh	r3, [r4, #12]
 800a42e:	e7ad      	b.n	800a38c <__sflush_r+0x1c>
 800a430:	690f      	ldr	r7, [r1, #16]
 800a432:	2f00      	cmp	r7, #0
 800a434:	d0a9      	beq.n	800a38a <__sflush_r+0x1a>
 800a436:	0793      	lsls	r3, r2, #30
 800a438:	680e      	ldr	r6, [r1, #0]
 800a43a:	bf08      	it	eq
 800a43c:	694b      	ldreq	r3, [r1, #20]
 800a43e:	600f      	str	r7, [r1, #0]
 800a440:	bf18      	it	ne
 800a442:	2300      	movne	r3, #0
 800a444:	eba6 0807 	sub.w	r8, r6, r7
 800a448:	608b      	str	r3, [r1, #8]
 800a44a:	f1b8 0f00 	cmp.w	r8, #0
 800a44e:	dd9c      	ble.n	800a38a <__sflush_r+0x1a>
 800a450:	6a21      	ldr	r1, [r4, #32]
 800a452:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a454:	4643      	mov	r3, r8
 800a456:	463a      	mov	r2, r7
 800a458:	4628      	mov	r0, r5
 800a45a:	47b0      	blx	r6
 800a45c:	2800      	cmp	r0, #0
 800a45e:	dc06      	bgt.n	800a46e <__sflush_r+0xfe>
 800a460:	89a3      	ldrh	r3, [r4, #12]
 800a462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295
 800a46c:	e78e      	b.n	800a38c <__sflush_r+0x1c>
 800a46e:	4407      	add	r7, r0
 800a470:	eba8 0800 	sub.w	r8, r8, r0
 800a474:	e7e9      	b.n	800a44a <__sflush_r+0xda>
 800a476:	bf00      	nop
 800a478:	20400001 	.word	0x20400001

0800a47c <_fflush_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	690b      	ldr	r3, [r1, #16]
 800a480:	4605      	mov	r5, r0
 800a482:	460c      	mov	r4, r1
 800a484:	b913      	cbnz	r3, 800a48c <_fflush_r+0x10>
 800a486:	2500      	movs	r5, #0
 800a488:	4628      	mov	r0, r5
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	b118      	cbz	r0, 800a496 <_fflush_r+0x1a>
 800a48e:	6983      	ldr	r3, [r0, #24]
 800a490:	b90b      	cbnz	r3, 800a496 <_fflush_r+0x1a>
 800a492:	f000 f887 	bl	800a5a4 <__sinit>
 800a496:	4b14      	ldr	r3, [pc, #80]	; (800a4e8 <_fflush_r+0x6c>)
 800a498:	429c      	cmp	r4, r3
 800a49a:	d11b      	bne.n	800a4d4 <_fflush_r+0x58>
 800a49c:	686c      	ldr	r4, [r5, #4]
 800a49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d0ef      	beq.n	800a486 <_fflush_r+0xa>
 800a4a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4a8:	07d0      	lsls	r0, r2, #31
 800a4aa:	d404      	bmi.n	800a4b6 <_fflush_r+0x3a>
 800a4ac:	0599      	lsls	r1, r3, #22
 800a4ae:	d402      	bmi.n	800a4b6 <_fflush_r+0x3a>
 800a4b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4b2:	f000 f915 	bl	800a6e0 <__retarget_lock_acquire_recursive>
 800a4b6:	4628      	mov	r0, r5
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	f7ff ff59 	bl	800a370 <__sflush_r>
 800a4be:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4c0:	07da      	lsls	r2, r3, #31
 800a4c2:	4605      	mov	r5, r0
 800a4c4:	d4e0      	bmi.n	800a488 <_fflush_r+0xc>
 800a4c6:	89a3      	ldrh	r3, [r4, #12]
 800a4c8:	059b      	lsls	r3, r3, #22
 800a4ca:	d4dd      	bmi.n	800a488 <_fflush_r+0xc>
 800a4cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4ce:	f000 f908 	bl	800a6e2 <__retarget_lock_release_recursive>
 800a4d2:	e7d9      	b.n	800a488 <_fflush_r+0xc>
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <_fflush_r+0x70>)
 800a4d6:	429c      	cmp	r4, r3
 800a4d8:	d101      	bne.n	800a4de <_fflush_r+0x62>
 800a4da:	68ac      	ldr	r4, [r5, #8]
 800a4dc:	e7df      	b.n	800a49e <_fflush_r+0x22>
 800a4de:	4b04      	ldr	r3, [pc, #16]	; (800a4f0 <_fflush_r+0x74>)
 800a4e0:	429c      	cmp	r4, r3
 800a4e2:	bf08      	it	eq
 800a4e4:	68ec      	ldreq	r4, [r5, #12]
 800a4e6:	e7da      	b.n	800a49e <_fflush_r+0x22>
 800a4e8:	0800b1d0 	.word	0x0800b1d0
 800a4ec:	0800b1f0 	.word	0x0800b1f0
 800a4f0:	0800b1b0 	.word	0x0800b1b0

0800a4f4 <std>:
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	b510      	push	{r4, lr}
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a4fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a502:	6083      	str	r3, [r0, #8]
 800a504:	8181      	strh	r1, [r0, #12]
 800a506:	6643      	str	r3, [r0, #100]	; 0x64
 800a508:	81c2      	strh	r2, [r0, #14]
 800a50a:	6183      	str	r3, [r0, #24]
 800a50c:	4619      	mov	r1, r3
 800a50e:	2208      	movs	r2, #8
 800a510:	305c      	adds	r0, #92	; 0x5c
 800a512:	f7ff f88d 	bl	8009630 <memset>
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <std+0x38>)
 800a518:	6263      	str	r3, [r4, #36]	; 0x24
 800a51a:	4b05      	ldr	r3, [pc, #20]	; (800a530 <std+0x3c>)
 800a51c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <std+0x40>)
 800a520:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a522:	4b05      	ldr	r3, [pc, #20]	; (800a538 <std+0x44>)
 800a524:	6224      	str	r4, [r4, #32]
 800a526:	6323      	str	r3, [r4, #48]	; 0x30
 800a528:	bd10      	pop	{r4, pc}
 800a52a:	bf00      	nop
 800a52c:	0800a8e5 	.word	0x0800a8e5
 800a530:	0800a907 	.word	0x0800a907
 800a534:	0800a93f 	.word	0x0800a93f
 800a538:	0800a963 	.word	0x0800a963

0800a53c <_cleanup_r>:
 800a53c:	4901      	ldr	r1, [pc, #4]	; (800a544 <_cleanup_r+0x8>)
 800a53e:	f000 b8af 	b.w	800a6a0 <_fwalk_reent>
 800a542:	bf00      	nop
 800a544:	0800a47d 	.word	0x0800a47d

0800a548 <__sfmoreglue>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	2268      	movs	r2, #104	; 0x68
 800a54c:	1e4d      	subs	r5, r1, #1
 800a54e:	4355      	muls	r5, r2
 800a550:	460e      	mov	r6, r1
 800a552:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a556:	f7ff f975 	bl	8009844 <_malloc_r>
 800a55a:	4604      	mov	r4, r0
 800a55c:	b140      	cbz	r0, 800a570 <__sfmoreglue+0x28>
 800a55e:	2100      	movs	r1, #0
 800a560:	e9c0 1600 	strd	r1, r6, [r0]
 800a564:	300c      	adds	r0, #12
 800a566:	60a0      	str	r0, [r4, #8]
 800a568:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a56c:	f7ff f860 	bl	8009630 <memset>
 800a570:	4620      	mov	r0, r4
 800a572:	bd70      	pop	{r4, r5, r6, pc}

0800a574 <__sfp_lock_acquire>:
 800a574:	4801      	ldr	r0, [pc, #4]	; (800a57c <__sfp_lock_acquire+0x8>)
 800a576:	f000 b8b3 	b.w	800a6e0 <__retarget_lock_acquire_recursive>
 800a57a:	bf00      	nop
 800a57c:	2000ce0d 	.word	0x2000ce0d

0800a580 <__sfp_lock_release>:
 800a580:	4801      	ldr	r0, [pc, #4]	; (800a588 <__sfp_lock_release+0x8>)
 800a582:	f000 b8ae 	b.w	800a6e2 <__retarget_lock_release_recursive>
 800a586:	bf00      	nop
 800a588:	2000ce0d 	.word	0x2000ce0d

0800a58c <__sinit_lock_acquire>:
 800a58c:	4801      	ldr	r0, [pc, #4]	; (800a594 <__sinit_lock_acquire+0x8>)
 800a58e:	f000 b8a7 	b.w	800a6e0 <__retarget_lock_acquire_recursive>
 800a592:	bf00      	nop
 800a594:	2000ce0e 	.word	0x2000ce0e

0800a598 <__sinit_lock_release>:
 800a598:	4801      	ldr	r0, [pc, #4]	; (800a5a0 <__sinit_lock_release+0x8>)
 800a59a:	f000 b8a2 	b.w	800a6e2 <__retarget_lock_release_recursive>
 800a59e:	bf00      	nop
 800a5a0:	2000ce0e 	.word	0x2000ce0e

0800a5a4 <__sinit>:
 800a5a4:	b510      	push	{r4, lr}
 800a5a6:	4604      	mov	r4, r0
 800a5a8:	f7ff fff0 	bl	800a58c <__sinit_lock_acquire>
 800a5ac:	69a3      	ldr	r3, [r4, #24]
 800a5ae:	b11b      	cbz	r3, 800a5b8 <__sinit+0x14>
 800a5b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5b4:	f7ff bff0 	b.w	800a598 <__sinit_lock_release>
 800a5b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5bc:	6523      	str	r3, [r4, #80]	; 0x50
 800a5be:	4b13      	ldr	r3, [pc, #76]	; (800a60c <__sinit+0x68>)
 800a5c0:	4a13      	ldr	r2, [pc, #76]	; (800a610 <__sinit+0x6c>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5c6:	42a3      	cmp	r3, r4
 800a5c8:	bf04      	itt	eq
 800a5ca:	2301      	moveq	r3, #1
 800a5cc:	61a3      	streq	r3, [r4, #24]
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f000 f820 	bl	800a614 <__sfp>
 800a5d4:	6060      	str	r0, [r4, #4]
 800a5d6:	4620      	mov	r0, r4
 800a5d8:	f000 f81c 	bl	800a614 <__sfp>
 800a5dc:	60a0      	str	r0, [r4, #8]
 800a5de:	4620      	mov	r0, r4
 800a5e0:	f000 f818 	bl	800a614 <__sfp>
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	60e0      	str	r0, [r4, #12]
 800a5e8:	2104      	movs	r1, #4
 800a5ea:	6860      	ldr	r0, [r4, #4]
 800a5ec:	f7ff ff82 	bl	800a4f4 <std>
 800a5f0:	68a0      	ldr	r0, [r4, #8]
 800a5f2:	2201      	movs	r2, #1
 800a5f4:	2109      	movs	r1, #9
 800a5f6:	f7ff ff7d 	bl	800a4f4 <std>
 800a5fa:	68e0      	ldr	r0, [r4, #12]
 800a5fc:	2202      	movs	r2, #2
 800a5fe:	2112      	movs	r1, #18
 800a600:	f7ff ff78 	bl	800a4f4 <std>
 800a604:	2301      	movs	r3, #1
 800a606:	61a3      	str	r3, [r4, #24]
 800a608:	e7d2      	b.n	800a5b0 <__sinit+0xc>
 800a60a:	bf00      	nop
 800a60c:	0800b0c8 	.word	0x0800b0c8
 800a610:	0800a53d 	.word	0x0800a53d

0800a614 <__sfp>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	4607      	mov	r7, r0
 800a618:	f7ff ffac 	bl	800a574 <__sfp_lock_acquire>
 800a61c:	4b1e      	ldr	r3, [pc, #120]	; (800a698 <__sfp+0x84>)
 800a61e:	681e      	ldr	r6, [r3, #0]
 800a620:	69b3      	ldr	r3, [r6, #24]
 800a622:	b913      	cbnz	r3, 800a62a <__sfp+0x16>
 800a624:	4630      	mov	r0, r6
 800a626:	f7ff ffbd 	bl	800a5a4 <__sinit>
 800a62a:	3648      	adds	r6, #72	; 0x48
 800a62c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a630:	3b01      	subs	r3, #1
 800a632:	d503      	bpl.n	800a63c <__sfp+0x28>
 800a634:	6833      	ldr	r3, [r6, #0]
 800a636:	b30b      	cbz	r3, 800a67c <__sfp+0x68>
 800a638:	6836      	ldr	r6, [r6, #0]
 800a63a:	e7f7      	b.n	800a62c <__sfp+0x18>
 800a63c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a640:	b9d5      	cbnz	r5, 800a678 <__sfp+0x64>
 800a642:	4b16      	ldr	r3, [pc, #88]	; (800a69c <__sfp+0x88>)
 800a644:	60e3      	str	r3, [r4, #12]
 800a646:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a64a:	6665      	str	r5, [r4, #100]	; 0x64
 800a64c:	f000 f847 	bl	800a6de <__retarget_lock_init_recursive>
 800a650:	f7ff ff96 	bl	800a580 <__sfp_lock_release>
 800a654:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a658:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a65c:	6025      	str	r5, [r4, #0]
 800a65e:	61a5      	str	r5, [r4, #24]
 800a660:	2208      	movs	r2, #8
 800a662:	4629      	mov	r1, r5
 800a664:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a668:	f7fe ffe2 	bl	8009630 <memset>
 800a66c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a670:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a674:	4620      	mov	r0, r4
 800a676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a678:	3468      	adds	r4, #104	; 0x68
 800a67a:	e7d9      	b.n	800a630 <__sfp+0x1c>
 800a67c:	2104      	movs	r1, #4
 800a67e:	4638      	mov	r0, r7
 800a680:	f7ff ff62 	bl	800a548 <__sfmoreglue>
 800a684:	4604      	mov	r4, r0
 800a686:	6030      	str	r0, [r6, #0]
 800a688:	2800      	cmp	r0, #0
 800a68a:	d1d5      	bne.n	800a638 <__sfp+0x24>
 800a68c:	f7ff ff78 	bl	800a580 <__sfp_lock_release>
 800a690:	230c      	movs	r3, #12
 800a692:	603b      	str	r3, [r7, #0]
 800a694:	e7ee      	b.n	800a674 <__sfp+0x60>
 800a696:	bf00      	nop
 800a698:	0800b0c8 	.word	0x0800b0c8
 800a69c:	ffff0001 	.word	0xffff0001

0800a6a0 <_fwalk_reent>:
 800a6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	4688      	mov	r8, r1
 800a6a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6ac:	2700      	movs	r7, #0
 800a6ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6b2:	f1b9 0901 	subs.w	r9, r9, #1
 800a6b6:	d505      	bpl.n	800a6c4 <_fwalk_reent+0x24>
 800a6b8:	6824      	ldr	r4, [r4, #0]
 800a6ba:	2c00      	cmp	r4, #0
 800a6bc:	d1f7      	bne.n	800a6ae <_fwalk_reent+0xe>
 800a6be:	4638      	mov	r0, r7
 800a6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6c4:	89ab      	ldrh	r3, [r5, #12]
 800a6c6:	2b01      	cmp	r3, #1
 800a6c8:	d907      	bls.n	800a6da <_fwalk_reent+0x3a>
 800a6ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	d003      	beq.n	800a6da <_fwalk_reent+0x3a>
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	47c0      	blx	r8
 800a6d8:	4307      	orrs	r7, r0
 800a6da:	3568      	adds	r5, #104	; 0x68
 800a6dc:	e7e9      	b.n	800a6b2 <_fwalk_reent+0x12>

0800a6de <__retarget_lock_init_recursive>:
 800a6de:	4770      	bx	lr

0800a6e0 <__retarget_lock_acquire_recursive>:
 800a6e0:	4770      	bx	lr

0800a6e2 <__retarget_lock_release_recursive>:
 800a6e2:	4770      	bx	lr

0800a6e4 <__swhatbuf_r>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	460e      	mov	r6, r1
 800a6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	b096      	sub	sp, #88	; 0x58
 800a6f0:	4614      	mov	r4, r2
 800a6f2:	461d      	mov	r5, r3
 800a6f4:	da08      	bge.n	800a708 <__swhatbuf_r+0x24>
 800a6f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	602a      	str	r2, [r5, #0]
 800a6fe:	061a      	lsls	r2, r3, #24
 800a700:	d410      	bmi.n	800a724 <__swhatbuf_r+0x40>
 800a702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a706:	e00e      	b.n	800a726 <__swhatbuf_r+0x42>
 800a708:	466a      	mov	r2, sp
 800a70a:	f000 f951 	bl	800a9b0 <_fstat_r>
 800a70e:	2800      	cmp	r0, #0
 800a710:	dbf1      	blt.n	800a6f6 <__swhatbuf_r+0x12>
 800a712:	9a01      	ldr	r2, [sp, #4]
 800a714:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a718:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a71c:	425a      	negs	r2, r3
 800a71e:	415a      	adcs	r2, r3
 800a720:	602a      	str	r2, [r5, #0]
 800a722:	e7ee      	b.n	800a702 <__swhatbuf_r+0x1e>
 800a724:	2340      	movs	r3, #64	; 0x40
 800a726:	2000      	movs	r0, #0
 800a728:	6023      	str	r3, [r4, #0]
 800a72a:	b016      	add	sp, #88	; 0x58
 800a72c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a730 <__smakebuf_r>:
 800a730:	898b      	ldrh	r3, [r1, #12]
 800a732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a734:	079d      	lsls	r5, r3, #30
 800a736:	4606      	mov	r6, r0
 800a738:	460c      	mov	r4, r1
 800a73a:	d507      	bpl.n	800a74c <__smakebuf_r+0x1c>
 800a73c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	6123      	str	r3, [r4, #16]
 800a744:	2301      	movs	r3, #1
 800a746:	6163      	str	r3, [r4, #20]
 800a748:	b002      	add	sp, #8
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	ab01      	add	r3, sp, #4
 800a74e:	466a      	mov	r2, sp
 800a750:	f7ff ffc8 	bl	800a6e4 <__swhatbuf_r>
 800a754:	9900      	ldr	r1, [sp, #0]
 800a756:	4605      	mov	r5, r0
 800a758:	4630      	mov	r0, r6
 800a75a:	f7ff f873 	bl	8009844 <_malloc_r>
 800a75e:	b948      	cbnz	r0, 800a774 <__smakebuf_r+0x44>
 800a760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a764:	059a      	lsls	r2, r3, #22
 800a766:	d4ef      	bmi.n	800a748 <__smakebuf_r+0x18>
 800a768:	f023 0303 	bic.w	r3, r3, #3
 800a76c:	f043 0302 	orr.w	r3, r3, #2
 800a770:	81a3      	strh	r3, [r4, #12]
 800a772:	e7e3      	b.n	800a73c <__smakebuf_r+0xc>
 800a774:	4b0d      	ldr	r3, [pc, #52]	; (800a7ac <__smakebuf_r+0x7c>)
 800a776:	62b3      	str	r3, [r6, #40]	; 0x28
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	6020      	str	r0, [r4, #0]
 800a77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a780:	81a3      	strh	r3, [r4, #12]
 800a782:	9b00      	ldr	r3, [sp, #0]
 800a784:	6163      	str	r3, [r4, #20]
 800a786:	9b01      	ldr	r3, [sp, #4]
 800a788:	6120      	str	r0, [r4, #16]
 800a78a:	b15b      	cbz	r3, 800a7a4 <__smakebuf_r+0x74>
 800a78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a790:	4630      	mov	r0, r6
 800a792:	f000 f91f 	bl	800a9d4 <_isatty_r>
 800a796:	b128      	cbz	r0, 800a7a4 <__smakebuf_r+0x74>
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	f023 0303 	bic.w	r3, r3, #3
 800a79e:	f043 0301 	orr.w	r3, r3, #1
 800a7a2:	81a3      	strh	r3, [r4, #12]
 800a7a4:	89a0      	ldrh	r0, [r4, #12]
 800a7a6:	4305      	orrs	r5, r0
 800a7a8:	81a5      	strh	r5, [r4, #12]
 800a7aa:	e7cd      	b.n	800a748 <__smakebuf_r+0x18>
 800a7ac:	0800a53d 	.word	0x0800a53d

0800a7b0 <memmove>:
 800a7b0:	4288      	cmp	r0, r1
 800a7b2:	b510      	push	{r4, lr}
 800a7b4:	eb01 0402 	add.w	r4, r1, r2
 800a7b8:	d902      	bls.n	800a7c0 <memmove+0x10>
 800a7ba:	4284      	cmp	r4, r0
 800a7bc:	4623      	mov	r3, r4
 800a7be:	d807      	bhi.n	800a7d0 <memmove+0x20>
 800a7c0:	1e43      	subs	r3, r0, #1
 800a7c2:	42a1      	cmp	r1, r4
 800a7c4:	d008      	beq.n	800a7d8 <memmove+0x28>
 800a7c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7ce:	e7f8      	b.n	800a7c2 <memmove+0x12>
 800a7d0:	4402      	add	r2, r0
 800a7d2:	4601      	mov	r1, r0
 800a7d4:	428a      	cmp	r2, r1
 800a7d6:	d100      	bne.n	800a7da <memmove+0x2a>
 800a7d8:	bd10      	pop	{r4, pc}
 800a7da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7e2:	e7f7      	b.n	800a7d4 <memmove+0x24>

0800a7e4 <__malloc_lock>:
 800a7e4:	4801      	ldr	r0, [pc, #4]	; (800a7ec <__malloc_lock+0x8>)
 800a7e6:	f7ff bf7b 	b.w	800a6e0 <__retarget_lock_acquire_recursive>
 800a7ea:	bf00      	nop
 800a7ec:	2000ce0c 	.word	0x2000ce0c

0800a7f0 <__malloc_unlock>:
 800a7f0:	4801      	ldr	r0, [pc, #4]	; (800a7f8 <__malloc_unlock+0x8>)
 800a7f2:	f7ff bf76 	b.w	800a6e2 <__retarget_lock_release_recursive>
 800a7f6:	bf00      	nop
 800a7f8:	2000ce0c 	.word	0x2000ce0c

0800a7fc <_realloc_r>:
 800a7fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a800:	4680      	mov	r8, r0
 800a802:	4614      	mov	r4, r2
 800a804:	460e      	mov	r6, r1
 800a806:	b921      	cbnz	r1, 800a812 <_realloc_r+0x16>
 800a808:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a80c:	4611      	mov	r1, r2
 800a80e:	f7ff b819 	b.w	8009844 <_malloc_r>
 800a812:	b92a      	cbnz	r2, 800a820 <_realloc_r+0x24>
 800a814:	f7fe ffaa 	bl	800976c <_free_r>
 800a818:	4625      	mov	r5, r4
 800a81a:	4628      	mov	r0, r5
 800a81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a820:	f000 f8fa 	bl	800aa18 <_malloc_usable_size_r>
 800a824:	4284      	cmp	r4, r0
 800a826:	4607      	mov	r7, r0
 800a828:	d802      	bhi.n	800a830 <_realloc_r+0x34>
 800a82a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a82e:	d812      	bhi.n	800a856 <_realloc_r+0x5a>
 800a830:	4621      	mov	r1, r4
 800a832:	4640      	mov	r0, r8
 800a834:	f7ff f806 	bl	8009844 <_malloc_r>
 800a838:	4605      	mov	r5, r0
 800a83a:	2800      	cmp	r0, #0
 800a83c:	d0ed      	beq.n	800a81a <_realloc_r+0x1e>
 800a83e:	42bc      	cmp	r4, r7
 800a840:	4622      	mov	r2, r4
 800a842:	4631      	mov	r1, r6
 800a844:	bf28      	it	cs
 800a846:	463a      	movcs	r2, r7
 800a848:	f7fe fee4 	bl	8009614 <memcpy>
 800a84c:	4631      	mov	r1, r6
 800a84e:	4640      	mov	r0, r8
 800a850:	f7fe ff8c 	bl	800976c <_free_r>
 800a854:	e7e1      	b.n	800a81a <_realloc_r+0x1e>
 800a856:	4635      	mov	r5, r6
 800a858:	e7df      	b.n	800a81a <_realloc_r+0x1e>

0800a85a <_raise_r>:
 800a85a:	291f      	cmp	r1, #31
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4604      	mov	r4, r0
 800a860:	460d      	mov	r5, r1
 800a862:	d904      	bls.n	800a86e <_raise_r+0x14>
 800a864:	2316      	movs	r3, #22
 800a866:	6003      	str	r3, [r0, #0]
 800a868:	f04f 30ff 	mov.w	r0, #4294967295
 800a86c:	bd38      	pop	{r3, r4, r5, pc}
 800a86e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a870:	b112      	cbz	r2, 800a878 <_raise_r+0x1e>
 800a872:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a876:	b94b      	cbnz	r3, 800a88c <_raise_r+0x32>
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 f831 	bl	800a8e0 <_getpid_r>
 800a87e:	462a      	mov	r2, r5
 800a880:	4601      	mov	r1, r0
 800a882:	4620      	mov	r0, r4
 800a884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a888:	f000 b818 	b.w	800a8bc <_kill_r>
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	d00a      	beq.n	800a8a6 <_raise_r+0x4c>
 800a890:	1c59      	adds	r1, r3, #1
 800a892:	d103      	bne.n	800a89c <_raise_r+0x42>
 800a894:	2316      	movs	r3, #22
 800a896:	6003      	str	r3, [r0, #0]
 800a898:	2001      	movs	r0, #1
 800a89a:	e7e7      	b.n	800a86c <_raise_r+0x12>
 800a89c:	2400      	movs	r4, #0
 800a89e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	4798      	blx	r3
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	e7e0      	b.n	800a86c <_raise_r+0x12>
	...

0800a8ac <raise>:
 800a8ac:	4b02      	ldr	r3, [pc, #8]	; (800a8b8 <raise+0xc>)
 800a8ae:	4601      	mov	r1, r0
 800a8b0:	6818      	ldr	r0, [r3, #0]
 800a8b2:	f7ff bfd2 	b.w	800a85a <_raise_r>
 800a8b6:	bf00      	nop
 800a8b8:	20000018 	.word	0x20000018

0800a8bc <_kill_r>:
 800a8bc:	b538      	push	{r3, r4, r5, lr}
 800a8be:	4d07      	ldr	r5, [pc, #28]	; (800a8dc <_kill_r+0x20>)
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	4604      	mov	r4, r0
 800a8c4:	4608      	mov	r0, r1
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	602b      	str	r3, [r5, #0]
 800a8ca:	f7f9 fcbd 	bl	8004248 <_kill>
 800a8ce:	1c43      	adds	r3, r0, #1
 800a8d0:	d102      	bne.n	800a8d8 <_kill_r+0x1c>
 800a8d2:	682b      	ldr	r3, [r5, #0]
 800a8d4:	b103      	cbz	r3, 800a8d8 <_kill_r+0x1c>
 800a8d6:	6023      	str	r3, [r4, #0]
 800a8d8:	bd38      	pop	{r3, r4, r5, pc}
 800a8da:	bf00      	nop
 800a8dc:	2000ce10 	.word	0x2000ce10

0800a8e0 <_getpid_r>:
 800a8e0:	f7f9 bcaa 	b.w	8004238 <_getpid>

0800a8e4 <__sread>:
 800a8e4:	b510      	push	{r4, lr}
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ec:	f000 f89c 	bl	800aa28 <_read_r>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	bfab      	itete	ge
 800a8f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a8f8:	181b      	addge	r3, r3, r0
 800a8fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8fe:	bfac      	ite	ge
 800a900:	6563      	strge	r3, [r4, #84]	; 0x54
 800a902:	81a3      	strhlt	r3, [r4, #12]
 800a904:	bd10      	pop	{r4, pc}

0800a906 <__swrite>:
 800a906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a90a:	461f      	mov	r7, r3
 800a90c:	898b      	ldrh	r3, [r1, #12]
 800a90e:	05db      	lsls	r3, r3, #23
 800a910:	4605      	mov	r5, r0
 800a912:	460c      	mov	r4, r1
 800a914:	4616      	mov	r6, r2
 800a916:	d505      	bpl.n	800a924 <__swrite+0x1e>
 800a918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a91c:	2302      	movs	r3, #2
 800a91e:	2200      	movs	r2, #0
 800a920:	f000 f868 	bl	800a9f4 <_lseek_r>
 800a924:	89a3      	ldrh	r3, [r4, #12]
 800a926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a92a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a92e:	81a3      	strh	r3, [r4, #12]
 800a930:	4632      	mov	r2, r6
 800a932:	463b      	mov	r3, r7
 800a934:	4628      	mov	r0, r5
 800a936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a93a:	f000 b817 	b.w	800a96c <_write_r>

0800a93e <__sseek>:
 800a93e:	b510      	push	{r4, lr}
 800a940:	460c      	mov	r4, r1
 800a942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a946:	f000 f855 	bl	800a9f4 <_lseek_r>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	89a3      	ldrh	r3, [r4, #12]
 800a94e:	bf15      	itete	ne
 800a950:	6560      	strne	r0, [r4, #84]	; 0x54
 800a952:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a956:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a95a:	81a3      	strheq	r3, [r4, #12]
 800a95c:	bf18      	it	ne
 800a95e:	81a3      	strhne	r3, [r4, #12]
 800a960:	bd10      	pop	{r4, pc}

0800a962 <__sclose>:
 800a962:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a966:	f000 b813 	b.w	800a990 <_close_r>
	...

0800a96c <_write_r>:
 800a96c:	b538      	push	{r3, r4, r5, lr}
 800a96e:	4d07      	ldr	r5, [pc, #28]	; (800a98c <_write_r+0x20>)
 800a970:	4604      	mov	r4, r0
 800a972:	4608      	mov	r0, r1
 800a974:	4611      	mov	r1, r2
 800a976:	2200      	movs	r2, #0
 800a978:	602a      	str	r2, [r5, #0]
 800a97a:	461a      	mov	r2, r3
 800a97c:	f7f9 fc9b 	bl	80042b6 <_write>
 800a980:	1c43      	adds	r3, r0, #1
 800a982:	d102      	bne.n	800a98a <_write_r+0x1e>
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	b103      	cbz	r3, 800a98a <_write_r+0x1e>
 800a988:	6023      	str	r3, [r4, #0]
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	2000ce10 	.word	0x2000ce10

0800a990 <_close_r>:
 800a990:	b538      	push	{r3, r4, r5, lr}
 800a992:	4d06      	ldr	r5, [pc, #24]	; (800a9ac <_close_r+0x1c>)
 800a994:	2300      	movs	r3, #0
 800a996:	4604      	mov	r4, r0
 800a998:	4608      	mov	r0, r1
 800a99a:	602b      	str	r3, [r5, #0]
 800a99c:	f7f9 fca7 	bl	80042ee <_close>
 800a9a0:	1c43      	adds	r3, r0, #1
 800a9a2:	d102      	bne.n	800a9aa <_close_r+0x1a>
 800a9a4:	682b      	ldr	r3, [r5, #0]
 800a9a6:	b103      	cbz	r3, 800a9aa <_close_r+0x1a>
 800a9a8:	6023      	str	r3, [r4, #0]
 800a9aa:	bd38      	pop	{r3, r4, r5, pc}
 800a9ac:	2000ce10 	.word	0x2000ce10

0800a9b0 <_fstat_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	4d07      	ldr	r5, [pc, #28]	; (800a9d0 <_fstat_r+0x20>)
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	f7f9 fca2 	bl	8004306 <_fstat>
 800a9c2:	1c43      	adds	r3, r0, #1
 800a9c4:	d102      	bne.n	800a9cc <_fstat_r+0x1c>
 800a9c6:	682b      	ldr	r3, [r5, #0]
 800a9c8:	b103      	cbz	r3, 800a9cc <_fstat_r+0x1c>
 800a9ca:	6023      	str	r3, [r4, #0]
 800a9cc:	bd38      	pop	{r3, r4, r5, pc}
 800a9ce:	bf00      	nop
 800a9d0:	2000ce10 	.word	0x2000ce10

0800a9d4 <_isatty_r>:
 800a9d4:	b538      	push	{r3, r4, r5, lr}
 800a9d6:	4d06      	ldr	r5, [pc, #24]	; (800a9f0 <_isatty_r+0x1c>)
 800a9d8:	2300      	movs	r3, #0
 800a9da:	4604      	mov	r4, r0
 800a9dc:	4608      	mov	r0, r1
 800a9de:	602b      	str	r3, [r5, #0]
 800a9e0:	f7f9 fca1 	bl	8004326 <_isatty>
 800a9e4:	1c43      	adds	r3, r0, #1
 800a9e6:	d102      	bne.n	800a9ee <_isatty_r+0x1a>
 800a9e8:	682b      	ldr	r3, [r5, #0]
 800a9ea:	b103      	cbz	r3, 800a9ee <_isatty_r+0x1a>
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	bd38      	pop	{r3, r4, r5, pc}
 800a9f0:	2000ce10 	.word	0x2000ce10

0800a9f4 <_lseek_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d07      	ldr	r5, [pc, #28]	; (800aa14 <_lseek_r+0x20>)
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	4608      	mov	r0, r1
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	2200      	movs	r2, #0
 800aa00:	602a      	str	r2, [r5, #0]
 800aa02:	461a      	mov	r2, r3
 800aa04:	f7f9 fc9a 	bl	800433c <_lseek>
 800aa08:	1c43      	adds	r3, r0, #1
 800aa0a:	d102      	bne.n	800aa12 <_lseek_r+0x1e>
 800aa0c:	682b      	ldr	r3, [r5, #0]
 800aa0e:	b103      	cbz	r3, 800aa12 <_lseek_r+0x1e>
 800aa10:	6023      	str	r3, [r4, #0]
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	2000ce10 	.word	0x2000ce10

0800aa18 <_malloc_usable_size_r>:
 800aa18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1c:	1f18      	subs	r0, r3, #4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfbc      	itt	lt
 800aa22:	580b      	ldrlt	r3, [r1, r0]
 800aa24:	18c0      	addlt	r0, r0, r3
 800aa26:	4770      	bx	lr

0800aa28 <_read_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	; (800aa48 <_read_r+0x20>)
 800aa2c:	4604      	mov	r4, r0
 800aa2e:	4608      	mov	r0, r1
 800aa30:	4611      	mov	r1, r2
 800aa32:	2200      	movs	r2, #0
 800aa34:	602a      	str	r2, [r5, #0]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f7f9 fc20 	bl	800427c <_read>
 800aa3c:	1c43      	adds	r3, r0, #1
 800aa3e:	d102      	bne.n	800aa46 <_read_r+0x1e>
 800aa40:	682b      	ldr	r3, [r5, #0]
 800aa42:	b103      	cbz	r3, 800aa46 <_read_r+0x1e>
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	bd38      	pop	{r3, r4, r5, pc}
 800aa48:	2000ce10 	.word	0x2000ce10

0800aa4c <_init>:
 800aa4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4e:	bf00      	nop
 800aa50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa52:	bc08      	pop	{r3}
 800aa54:	469e      	mov	lr, r3
 800aa56:	4770      	bx	lr

0800aa58 <_fini>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	bf00      	nop
 800aa5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa5e:	bc08      	pop	{r3}
 800aa60:	469e      	mov	lr, r3
 800aa62:	4770      	bx	lr
