
VCU Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a398  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800a4d8  0800a4d8  0001a4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a978  0800a978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a980  0800a980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000008  0800a988  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000cd58  20000078  0800a9f8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000cdd0  0800a9f8  0002cdd0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028c15  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003e7f  00000000  00000000  00048cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000024e8  00000000  00000000  0004cb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000023c0  00000000  00000000  0004f028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00026088  00000000  00000000  000513e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00021748  00000000  00000000  00077470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f3d03  00000000  00000000  00098bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0018c8bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000aad8  00000000  00000000  0018c90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a4c0 	.word	0x0800a4c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	0800a4c0 	.word	0x0800a4c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	468e      	mov	lr, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14d      	bne.n	800030a <__udivmoddi4+0xaa>
 800026e:	428a      	cmp	r2, r1
 8000270:	4694      	mov	ip, r2
 8000272:	d969      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b152      	cbz	r2, 8000290 <__udivmoddi4+0x30>
 800027a:	fa01 f302 	lsl.w	r3, r1, r2
 800027e:	f1c2 0120 	rsb	r1, r2, #32
 8000282:	fa20 f101 	lsr.w	r1, r0, r1
 8000286:	fa0c fc02 	lsl.w	ip, ip, r2
 800028a:	ea41 0e03 	orr.w	lr, r1, r3
 800028e:	4094      	lsls	r4, r2
 8000290:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000294:	0c21      	lsrs	r1, r4, #16
 8000296:	fbbe f6f8 	udiv	r6, lr, r8
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fb08 e316 	mls	r3, r8, r6, lr
 80002a2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a6:	fb06 f107 	mul.w	r1, r6, r7
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002b6:	f080 811f 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 811c 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c0:	3e02      	subs	r6, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a5b      	subs	r3, r3, r1
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002cc:	fb08 3310 	mls	r3, r8, r0, r3
 80002d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d4:	fb00 f707 	mul.w	r7, r0, r7
 80002d8:	42a7      	cmp	r7, r4
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x92>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e4:	f080 810a 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	f240 8107 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002ee:	4464      	add	r4, ip
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	2600      	movs	r6, #0
 80002fa:	b11d      	cbz	r5, 8000304 <__udivmoddi4+0xa4>
 80002fc:	40d4      	lsrs	r4, r2
 80002fe:	2300      	movs	r3, #0
 8000300:	e9c5 4300 	strd	r4, r3, [r5]
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0xc2>
 800030e:	2d00      	cmp	r5, #0
 8000310:	f000 80ef 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000314:	2600      	movs	r6, #0
 8000316:	e9c5 0100 	strd	r0, r1, [r5]
 800031a:	4630      	mov	r0, r6
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f683 	clz	r6, r3
 8000326:	2e00      	cmp	r6, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	428b      	cmp	r3, r1
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb61 0303 	sbc.w	r3, r1, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e0      	beq.n	8000304 <__udivmoddi4+0xa4>
 8000342:	e9c5 4e00 	strd	r4, lr, [r5]
 8000346:	e7dd      	b.n	8000304 <__udivmoddi4+0xa4>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8092 	bne.w	800047a <__udivmoddi4+0x21a>
 8000356:	eba1 010c 	sub.w	r1, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f3f7 	udiv	r3, r1, r7
 800036a:	fb07 1113 	mls	r1, r7, r3, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	4288      	cmp	r0, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	4288      	cmp	r0, r1
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a09      	subs	r1, r1, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb1 f0f7 	udiv	r0, r1, r7
 8000394:	fb07 1110 	mls	r1, r7, r0, r1
 8000398:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4608      	mov	r0, r1
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79c      	b.n	80002fa <__udivmoddi4+0x9a>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa01 f306 	lsl.w	r3, r1, r6
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40f9      	lsrs	r1, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f306 	lsl.w	r3, r0, r6
 80003e2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 1118 	mls	r1, r9, r8, r1
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	4288      	cmp	r0, r1
 80003fa:	fa02 f206 	lsl.w	r2, r2, r6
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	4288      	cmp	r0, r1
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4461      	add	r1, ip
 8000418:	1a09      	subs	r1, r1, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000420:	fb09 1110 	mls	r1, r9, r0, r1
 8000424:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	458e      	cmp	lr, r1
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0101 	adds.w	r1, ip, r1
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	458e      	cmp	lr, r1
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4461      	add	r1, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	42a1      	cmp	r1, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb61 010e 	sbc.w	r1, r1, lr
 8000462:	fa01 f707 	lsl.w	r7, r1, r7
 8000466:	fa22 f306 	lsr.w	r3, r2, r6
 800046a:	40f1      	lsrs	r1, r6
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c5 7100 	strd	r7, r1, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	f1c2 0320 	rsb	r3, r2, #32
 800047e:	40d8      	lsrs	r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa21 f303 	lsr.w	r3, r1, r3
 8000488:	4091      	lsls	r1, r2
 800048a:	4301      	orrs	r1, r0
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f0f7 	udiv	r0, r3, r7
 8000498:	fb07 3610 	mls	r6, r7, r0, r3
 800049c:	0c0b      	lsrs	r3, r1, #16
 800049e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004a2:	fb00 f60e 	mul.w	r6, r0, lr
 80004a6:	429e      	cmp	r6, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	429e      	cmp	r6, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3802      	subs	r0, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1b9b      	subs	r3, r3, r6
 80004c2:	b289      	uxth	r1, r1
 80004c4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004c8:	fb07 3316 	mls	r3, r7, r6, r3
 80004cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d0:	fb06 f30e 	mul.w	r3, r6, lr
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3e02      	subs	r6, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	462e      	mov	r6, r5
 80004f4:	4628      	mov	r0, r5
 80004f6:	e705      	b.n	8000304 <__udivmoddi4+0xa4>
 80004f8:	4606      	mov	r6, r0
 80004fa:	e6e3      	b.n	80002c4 <__udivmoddi4+0x64>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6f8      	b.n	80002f2 <__udivmoddi4+0x92>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4646      	mov	r6, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4461      	add	r1, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4630      	mov	r0, r6
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <APP_LED_Clear>:
*                   Section: Application Local Functions                                 V C U   E M U L A T O R
*
***************************************************************************************************************/

void APP_LED_Clear(uint8_t led)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b02      	cmp	r3, #2
 8000542:	d012      	beq.n	800056a <APP_LED_Clear+0x36>
 8000544:	2b02      	cmp	r3, #2
 8000546:	dc16      	bgt.n	8000576 <APP_LED_Clear+0x42>
 8000548:	2b00      	cmp	r3, #0
 800054a:	d002      	beq.n	8000552 <APP_LED_Clear+0x1e>
 800054c:	2b01      	cmp	r3, #1
 800054e:	d006      	beq.n	800055e <APP_LED_Clear+0x2a>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 8000550:	e011      	b.n	8000576 <APP_LED_Clear+0x42>
        	HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2102      	movs	r1, #2
 8000556:	480a      	ldr	r0, [pc, #40]	; (8000580 <APP_LED_Clear+0x4c>)
 8000558:	f004 f84e 	bl	80045f8 <HAL_GPIO_WritePin>
            break;
 800055c:	e00c      	b.n	8000578 <APP_LED_Clear+0x44>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	4807      	ldr	r0, [pc, #28]	; (8000580 <APP_LED_Clear+0x4c>)
 8000564:	f004 f848 	bl	80045f8 <HAL_GPIO_WritePin>
            break;
 8000568:	e006      	b.n	8000578 <APP_LED_Clear+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	4804      	ldr	r0, [pc, #16]	; (8000580 <APP_LED_Clear+0x4c>)
 8000570:	f004 f842 	bl	80045f8 <HAL_GPIO_WritePin>
            break;
 8000574:	e000      	b.n	8000578 <APP_LED_Clear+0x44>
        default: break;
 8000576:	bf00      	nop
    }
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	48000400 	.word	0x48000400

08000584 <APP_LED_Set>:

void APP_LED_Set(uint8_t led)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d012      	beq.n	80005ba <APP_LED_Set+0x36>
 8000594:	2b02      	cmp	r3, #2
 8000596:	dc16      	bgt.n	80005c6 <APP_LED_Set+0x42>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <APP_LED_Set+0x1e>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d006      	beq.n	80005ae <APP_LED_Set+0x2a>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80005a0:	e011      	b.n	80005c6 <APP_LED_Set+0x42>
        	HAL_GPIO_WritePin(LED_RED_GPIO_Port,  LED_RED_Pin , GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2102      	movs	r1, #2
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <APP_LED_Set+0x4c>)
 80005a8:	f004 f826 	bl	80045f8 <HAL_GPIO_WritePin>
            break;
 80005ac:	e00c      	b.n	80005c8 <APP_LED_Set+0x44>
        	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2101      	movs	r1, #1
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <APP_LED_Set+0x4c>)
 80005b4:	f004 f820 	bl	80045f8 <HAL_GPIO_WritePin>
            break;
 80005b8:	e006      	b.n	80005c8 <APP_LED_Set+0x44>
            HAL_GPIO_WritePin(LED_BLUE_GPIO_Port,  LED_BLUE_Pin , GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2120      	movs	r1, #32
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <APP_LED_Set+0x4c>)
 80005c0:	f004 f81a 	bl	80045f8 <HAL_GPIO_WritePin>
            break;
 80005c4:	e000      	b.n	80005c8 <APP_LED_Set+0x44>
        default: break;
 80005c6:	bf00      	nop
    }
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	48000400 	.word	0x48000400

080005d4 <VCU_Initialize>:

/***************************************************************************************************************
*     A P P _ I n i t i a l i z e                                                        V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_Initialize(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0



  //clear the batteryModule Array
  memset(module,0,sizeof(module));
 80005d8:	f44f 4246 	mov.w	r2, #50688	; 0xc600
 80005dc:	2100      	movs	r1, #0
 80005de:	4811      	ldr	r0, [pc, #68]	; (8000624 <VCU_Initialize+0x50>)
 80005e0:	f008 fd60 	bl	80090a4 <memset>



  serialOut("");
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <VCU_Initialize+0x54>)
 80005e6:	f002 fd87 	bl	80030f8 <serialOut>
  serialOut("");
 80005ea:	480f      	ldr	r0, [pc, #60]	; (8000628 <VCU_Initialize+0x54>)
 80005ec:	f002 fd84 	bl	80030f8 <serialOut>
  serialOut("        ██    ██");
 80005f0:	480e      	ldr	r0, [pc, #56]	; (800062c <VCU_Initialize+0x58>)
 80005f2:	f002 fd81 	bl	80030f8 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 80005f6:	480e      	ldr	r0, [pc, #56]	; (8000630 <VCU_Initialize+0x5c>)
 80005f8:	f002 fd7e 	bl	80030f8 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     VCU Emulator V1.0        (c) 2023");
 80005fc:	480d      	ldr	r0, [pc, #52]	; (8000634 <VCU_Initialize+0x60>)
 80005fe:	f002 fd7b 	bl	80030f8 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 8000602:	480d      	ldr	r0, [pc, #52]	; (8000638 <VCU_Initialize+0x64>)
 8000604:	f002 fd78 	bl	80030f8 <serialOut>
  serialOut("     ██    ██    ██");
 8000608:	480c      	ldr	r0, [pc, #48]	; (800063c <VCU_Initialize+0x68>)
 800060a:	f002 fd75 	bl	80030f8 <serialOut>
  serialOut("     m o d b a t t");
 800060e:	480c      	ldr	r0, [pc, #48]	; (8000640 <VCU_Initialize+0x6c>)
 8000610:	f002 fd72 	bl	80030f8 <serialOut>
  serialOut("");
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <VCU_Initialize+0x54>)
 8000616:	f002 fd6f 	bl	80030f8 <serialOut>

    appData.state = APP_STATE_TEST_RAM_ACCESS;

#else
    /* Place the App state machine in its initial state. */
    vcuData.state = VCU_STATE_TEST_RAM_ACCESS;
 800061a:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <VCU_Initialize+0x70>)
 800061c:	2203      	movs	r2, #3
 800061e:	701a      	strb	r2, [r3, #0]
#endif

}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000150 	.word	0x20000150
 8000628:	0800a4d8 	.word	0x0800a4d8
 800062c:	0800a4dc 	.word	0x0800a4dc
 8000630:	0800a4f8 	.word	0x0800a4f8
 8000634:	0800a520 	.word	0x0800a520
 8000638:	0800a570 	.word	0x0800a570
 800063c:	0800a5c0 	.word	0x0800a5c0
 8000640:	0800a5e0 	.word	0x0800a5e0
 8000644:	20000094 	.word	0x20000094

08000648 <VCU_Tasks>:

/***************************************************************************************************************
*     A P P _ T a s k s                                                                  V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_Tasks(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0


    /* Check the application's current state. */
    switch (vcuData.state) {
 800064e:	4b3f      	ldr	r3, [pc, #252]	; (800074c <VCU_Tasks+0x104>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b04      	cmp	r3, #4
 8000654:	d872      	bhi.n	800073c <VCU_Tasks+0xf4>
 8000656:	a201      	add	r2, pc, #4	; (adr r2, 800065c <VCU_Tasks+0x14>)
 8000658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065c:	08000671 	.word	0x08000671
 8000660:	08000689 	.word	0x08000689
 8000664:	0800073d 	.word	0x0800073d
 8000668:	080006c7 	.word	0x080006c7
 800066c:	080006fb 	.word	0x080006fb
            /* Application's initial state. */
        case VCU_STATE_INIT:
        {
          if (DEBUG > 1) serialOut("APP_STATE_INIT");
          //Nop();
          APP_LED_Set(APP_INIT_LED);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff ff87 	bl	8000584 <APP_LED_Set>
          APP_CANFDSPI_Init();
 8000676:	f000 f877 	bl	8000768 <APP_CANFDSPI_Init>
          APP_LED_Clear(APP_INIT_LED);
 800067a:	2000      	movs	r0, #0
 800067c:	f7ff ff5a 	bl	8000534 <APP_LED_Clear>

          vcuData.state = VCU_STATE_IDLE;
 8000680:	4b32      	ldr	r3, [pc, #200]	; (800074c <VCU_Tasks+0x104>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
          break;
 8000686:	e05d      	b.n	8000744 <VCU_Tasks+0xfc>
        }
        case VCU_STATE_IDLE:
        {
          // Here we want to send the current state to the pack controller every 10s

          VCU_ReceiveMessage_Tasks();
 8000688:	f000 f910 	bl	80008ac <VCU_ReceiveMessage_Tasks>

          //Send Off
          VCU_TransmitState(packOff);
 800068c:	2000      	movs	r0, #0
 800068e:	f000 fa0b 	bl	8000aa8 <VCU_TransmitState>
          HAL_Delay(10000);
 8000692:	f242 7010 	movw	r0, #10000	; 0x2710
 8000696:	f003 fd0b 	bl	80040b0 <HAL_Delay>

          //Send Standby
          VCU_TransmitState(packStandby);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fa04 	bl	8000aa8 <VCU_TransmitState>
          HAL_Delay(10000);
 80006a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80006a4:	f003 fd04 	bl	80040b0 <HAL_Delay>


          //Send Precharge
          VCU_TransmitState(packPrecharge);
 80006a8:	2002      	movs	r0, #2
 80006aa:	f000 f9fd 	bl	8000aa8 <VCU_TransmitState>
          HAL_Delay(10000);
 80006ae:	f242 7010 	movw	r0, #10000	; 0x2710
 80006b2:	f003 fcfd 	bl	80040b0 <HAL_Delay>


          //Send On
          VCU_TransmitState(packOn);
 80006b6:	2003      	movs	r0, #3
 80006b8:	f000 f9f6 	bl	8000aa8 <VCU_TransmitState>
          HAL_Delay(10000);
 80006bc:	f242 7010 	movw	r0, #10000	; 0x2710
 80006c0:	f003 fcf6 	bl	80040b0 <HAL_Delay>



          break;
 80006c4:	e03e      	b.n	8000744 <VCU_Tasks+0xfc>
        }

        case VCU_STATE_TEST_RAM_ACCESS:             // RAM access test
        {
          bool passed = VCU_TestRamAccess();
 80006c6:	f000 fac3 	bl	8000c50 <VCU_TestRamAccess>
 80006ca:	4603      	mov	r3, r0
 80006cc:	71bb      	strb	r3, [r7, #6]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD RAM TEST      : PASSED"); serialOut(tempBuffer);
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d007      	beq.n	80006e4 <VCU_Tasks+0x9c>
 80006d4:	491e      	ldr	r1, [pc, #120]	; (8000750 <VCU_Tasks+0x108>)
 80006d6:	481f      	ldr	r0, [pc, #124]	; (8000754 <VCU_Tasks+0x10c>)
 80006d8:	f008 fd2a 	bl	8009130 <siprintf>
 80006dc:	481d      	ldr	r0, [pc, #116]	; (8000754 <VCU_Tasks+0x10c>)
 80006de:	f002 fd0b 	bl	80030f8 <serialOut>
 80006e2:	e006      	b.n	80006f2 <VCU_Tasks+0xaa>
          }else{        sprintf(tempBuffer,"     MCP2518FD RAM TEST      : FAILED"); serialOut(tempBuffer);
 80006e4:	491c      	ldr	r1, [pc, #112]	; (8000758 <VCU_Tasks+0x110>)
 80006e6:	481b      	ldr	r0, [pc, #108]	; (8000754 <VCU_Tasks+0x10c>)
 80006e8:	f008 fd22 	bl	8009130 <siprintf>
 80006ec:	4819      	ldr	r0, [pc, #100]	; (8000754 <VCU_Tasks+0x10c>)
 80006ee:	f002 fd03 	bl	80030f8 <serialOut>
          }
          vcuData.state = VCU_STATE_TEST_REGISTER_ACCESS;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <VCU_Tasks+0x104>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	701a      	strb	r2, [r3, #0]
          break;
 80006f8:	e024      	b.n	8000744 <VCU_Tasks+0xfc>
        }
        case VCU_STATE_TEST_REGISTER_ACCESS: /* Register access test */
        {
          bool passed = VCU_TestRegisterAccess();
 80006fa:	f000 fa31 	bl	8000b60 <VCU_TestRegisterAccess>
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : PASSED"); serialOut(tempBuffer);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d007      	beq.n	8000718 <VCU_Tasks+0xd0>
 8000708:	4914      	ldr	r1, [pc, #80]	; (800075c <VCU_Tasks+0x114>)
 800070a:	4812      	ldr	r0, [pc, #72]	; (8000754 <VCU_Tasks+0x10c>)
 800070c:	f008 fd10 	bl	8009130 <siprintf>
 8000710:	4810      	ldr	r0, [pc, #64]	; (8000754 <VCU_Tasks+0x10c>)
 8000712:	f002 fcf1 	bl	80030f8 <serialOut>
 8000716:	e006      	b.n	8000726 <VCU_Tasks+0xde>
          }else{        sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : FAILED"); serialOut(tempBuffer);
 8000718:	4911      	ldr	r1, [pc, #68]	; (8000760 <VCU_Tasks+0x118>)
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <VCU_Tasks+0x10c>)
 800071c:	f008 fd08 	bl	8009130 <siprintf>
 8000720:	480c      	ldr	r0, [pc, #48]	; (8000754 <VCU_Tasks+0x10c>)
 8000722:	f002 fce9 	bl	80030f8 <serialOut>
          }
          sprintf(tempBuffer," "); serialOut(tempBuffer);
 8000726:	490f      	ldr	r1, [pc, #60]	; (8000764 <VCU_Tasks+0x11c>)
 8000728:	480a      	ldr	r0, [pc, #40]	; (8000754 <VCU_Tasks+0x10c>)
 800072a:	f008 fd01 	bl	8009130 <siprintf>
 800072e:	4809      	ldr	r0, [pc, #36]	; (8000754 <VCU_Tasks+0x10c>)
 8000730:	f002 fce2 	bl	80030f8 <serialOut>
          vcuData.state = VCU_STATE_INIT;
 8000734:	4b05      	ldr	r3, [pc, #20]	; (800074c <VCU_Tasks+0x104>)
 8000736:	2200      	movs	r2, #0
 8000738:	701a      	strb	r2, [r3, #0]
          break;
 800073a:	e003      	b.n	8000744 <VCU_Tasks+0xfc>
        }
        // The default state should never be executed
        default:
        {
          /* TODO: Handle error in application's state machine. */
          vcuData.state = VCU_STATE_INIT;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <VCU_Tasks+0x104>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
          break;
 8000742:	bf00      	nop
        }
    }
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000094 	.word	0x20000094
 8000750:	0800a5f4 	.word	0x0800a5f4
 8000754:	2000cd4c 	.word	0x2000cd4c
 8000758:	0800a61c 	.word	0x0800a61c
 800075c:	0800a644 	.word	0x0800a644
 8000760:	0800a66c 	.word	0x0800a66c
 8000764:	0800a694 	.word	0x0800a694

08000768 <APP_CANFDSPI_Init>:

/***************************************************************************************************************
*     A P P _ C A N F D S P I _ I n i t                                                  V C U   E M U L A T O R
***************************************************************************************************************/
void APP_CANFDSPI_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
    // Reset device
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 800076c:	2000      	movs	r0, #0
 800076e:	f000 fae3 	bl	8000d38 <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 8000772:	2000      	movs	r0, #0
 8000774:	f001 fc75 	bl	8002062 <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 8000778:	21ff      	movs	r1, #255	; 0xff
 800077a:	2000      	movs	r0, #0
 800077c:	f001 fca5 	bl	80020ca <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 8000780:	4845      	ldr	r0, [pc, #276]	; (8000898 <APP_CANFDSPI_Init+0x130>)
 8000782:	f000 feb1 	bl	80014e8 <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 8000786:	4a44      	ldr	r2, [pc, #272]	; (8000898 <APP_CANFDSPI_Init+0x130>)
 8000788:	7813      	ldrb	r3, [r2, #0]
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 8000790:	4a41      	ldr	r2, [pc, #260]	; (8000898 <APP_CANFDSPI_Init+0x130>)
 8000792:	7853      	ldrb	r3, [r2, #1]
 8000794:	f36f 1386 	bfc	r3, #6, #1
 8000798:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 800079a:	493f      	ldr	r1, [pc, #252]	; (8000898 <APP_CANFDSPI_Init+0x130>)
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fe15 	bl	80013cc <DRV_CANFDSPI_Configure>

    // Setup TX FIFO
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 80007a2:	483e      	ldr	r0, [pc, #248]	; (800089c <APP_CANFDSPI_Init+0x134>)
 80007a4:	f000 ffb0 	bl	8001708 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txConfig.FifoSize = 7;
 80007a8:	4a3c      	ldr	r2, [pc, #240]	; (800089c <APP_CANFDSPI_Init+0x134>)
 80007aa:	7853      	ldrb	r3, [r2, #1]
 80007ac:	2107      	movs	r1, #7
 80007ae:	f361 0304 	bfi	r3, r1, #0, #5
 80007b2:	7053      	strb	r3, [r2, #1]
    txConfig.PayLoadSize = CAN_PLSIZE_64;
 80007b4:	4a39      	ldr	r2, [pc, #228]	; (800089c <APP_CANFDSPI_Init+0x134>)
 80007b6:	7853      	ldrb	r3, [r2, #1]
 80007b8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80007bc:	7053      	strb	r3, [r2, #1]
    txConfig.TxPriority = 1;
 80007be:	4a37      	ldr	r2, [pc, #220]	; (800089c <APP_CANFDSPI_Init+0x134>)
 80007c0:	7813      	ldrb	r3, [r2, #0]
 80007c2:	2101      	movs	r1, #1
 80007c4:	f361 0345 	bfi	r3, r1, #1, #5
 80007c8:	7013      	strb	r3, [r2, #0]

    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txConfig);
 80007ca:	4a34      	ldr	r2, [pc, #208]	; (800089c <APP_CANFDSPI_Init+0x134>)
 80007cc:	2102      	movs	r1, #2
 80007ce:	2000      	movs	r0, #0
 80007d0:	f000 ff42 	bl	8001658 <DRV_CANFDSPI_TransmitChannelConfigure>

    // Setup RX FIFO
    DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 80007d4:	4832      	ldr	r0, [pc, #200]	; (80008a0 <APP_CANFDSPI_Init+0x138>)
 80007d6:	f001 f9c5 	bl	8001b64 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
    rxConfig.FifoSize = 15;
 80007da:	4a31      	ldr	r2, [pc, #196]	; (80008a0 <APP_CANFDSPI_Init+0x138>)
 80007dc:	7813      	ldrb	r3, [r2, #0]
 80007de:	210f      	movs	r1, #15
 80007e0:	f361 0345 	bfi	r3, r1, #1, #5
 80007e4:	7013      	strb	r3, [r2, #0]
    rxConfig.PayLoadSize = CAN_PLSIZE_64;
 80007e6:	4a2e      	ldr	r2, [pc, #184]	; (80008a0 <APP_CANFDSPI_Init+0x138>)
 80007e8:	8813      	ldrh	r3, [r2, #0]
 80007ea:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 80007ee:	8013      	strh	r3, [r2, #0]

    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxConfig);
 80007f0:	4a2b      	ldr	r2, [pc, #172]	; (80008a0 <APP_CANFDSPI_Init+0x138>)
 80007f2:	2101      	movs	r1, #1
 80007f4:	2000      	movs	r0, #0
 80007f6:	f001 f969 	bl	8001acc <DRV_CANFDSPI_ReceiveChannelConfigure>

    // Setup RX Filter
    fObj.word = 0;
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <APP_CANFDSPI_Init+0x13c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
    //fObj.bF.SID = 0xda;
    fObj.bF.SID = 0x00;
 8000800:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <APP_CANFDSPI_Init+0x13c>)
 8000802:	8813      	ldrh	r3, [r2, #0]
 8000804:	f36f 030a 	bfc	r3, #0, #11
 8000808:	8013      	strh	r3, [r2, #0]
    fObj.bF.EXIDE = 0;
 800080a:	4a26      	ldr	r2, [pc, #152]	; (80008a4 <APP_CANFDSPI_Init+0x13c>)
 800080c:	78d3      	ldrb	r3, [r2, #3]
 800080e:	f36f 1386 	bfc	r3, #6, #1
 8000812:	70d3      	strb	r3, [r2, #3]
    fObj.bF.EID = 0x00;
 8000814:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <APP_CANFDSPI_Init+0x13c>)
 8000816:	6813      	ldr	r3, [r2, #0]
 8000818:	f36f 23dc 	bfc	r3, #11, #18
 800081c:	6013      	str	r3, [r2, #0]

    DRV_CANFDSPI_FilterObjectConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &fObj.bF);
 800081e:	4a21      	ldr	r2, [pc, #132]	; (80008a4 <APP_CANFDSPI_Init+0x13c>)
 8000820:	2100      	movs	r1, #0
 8000822:	2000      	movs	r0, #0
 8000824:	f001 f8d4 	bl	80019d0 <DRV_CANFDSPI_FilterObjectConfigure>

    // Setup RX Mask
    mObj.word = 0;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <APP_CANFDSPI_Init+0x140>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
    mObj.bF.MSID = 0x0;
 800082e:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <APP_CANFDSPI_Init+0x140>)
 8000830:	8813      	ldrh	r3, [r2, #0]
 8000832:	f36f 030a 	bfc	r3, #0, #11
 8000836:	8013      	strh	r3, [r2, #0]
    mObj.bF.MIDE = 1; // Only allow standard IDs
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <APP_CANFDSPI_Init+0x140>)
 800083a:	78d3      	ldrb	r3, [r2, #3]
 800083c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000840:	70d3      	strb	r3, [r2, #3]
    mObj.bF.MEID = 0x0;
 8000842:	4a19      	ldr	r2, [pc, #100]	; (80008a8 <APP_CANFDSPI_Init+0x140>)
 8000844:	6813      	ldr	r3, [r2, #0]
 8000846:	f36f 23dc 	bfc	r3, #11, #18
 800084a:	6013      	str	r3, [r2, #0]
    DRV_CANFDSPI_FilterMaskConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &mObj.bF);
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <APP_CANFDSPI_Init+0x140>)
 800084e:	2100      	movs	r1, #0
 8000850:	2000      	movs	r0, #0
 8000852:	f001 f8df 	bl	8001a14 <DRV_CANFDSPI_FilterMaskConfigure>

    // Link FIFO and Filter
    DRV_CANFDSPI_FilterToFifoLink(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, APP_RX_FIFO, true);
 8000856:	2301      	movs	r3, #1
 8000858:	2201      	movs	r2, #1
 800085a:	2100      	movs	r1, #0
 800085c:	2000      	movs	r0, #0
 800085e:	f001 f8fd 	bl	8001a5c <DRV_CANFDSPI_FilterToFifoLink>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8000862:	2300      	movs	r3, #0
 8000864:	2202      	movs	r2, #2
 8000866:	2101      	movs	r1, #1
 8000868:	2000      	movs	r0, #0
 800086a:	f001 fc6e 	bl	800214a <DRV_CANFDSPI_BitTimeConfigure>

    // Setup Transmit and Receive Interrupts
    DRV_CANFDSPI_GpioModeConfigure(DRV_CANFDSPI_INDEX_0, GPIO_MODE_INT, GPIO_MODE_INT);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f002 fb88 	bl	8002f88 <DRV_CANFDSPI_GpioModeConfigure>
	#ifdef APP_USE_TX_INT
    DRV_CANFDSPI_TransmitChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
	#endif
    DRV_CANFDSPI_ReceiveChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8000878:	2201      	movs	r2, #1
 800087a:	2101      	movs	r1, #1
 800087c:	2000      	movs	r0, #0
 800087e:	f001 fb70 	bl	8001f62 <DRV_CANFDSPI_ReceiveChannelEventEnable>
    DRV_CANFDSPI_ModuleEventEnable(DRV_CANFDSPI_INDEX_0, CAN_TX_EVENT | CAN_RX_EVENT);
 8000882:	2103      	movs	r1, #3
 8000884:	2000      	movs	r0, #0
 8000886:	f001 fac0 	bl	8001e0a <DRV_CANFDSPI_ModuleEventEnable>

    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 800088a:	2100      	movs	r1, #0
 800088c:	2000      	movs	r0, #0
 800088e:	f000 fea7 	bl	80015e0 <DRV_CANFDSPI_OperationModeSelect>
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000098 	.word	0x20000098
 800089c:	2000009c 	.word	0x2000009c
 80008a0:	200000f0 	.word	0x200000f0
 80008a4:	200000f4 	.word	0x200000f4
 80008a8:	200000f8 	.word	0x200000f8

080008ac <VCU_ReceiveMessage_Tasks>:

/***************************************************************************************************************
*     A P P _ R e c e i v e M e s s a g e _ T a s k s                                    V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_ReceiveMessage_Tasks(void)
{
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	b08b      	sub	sp, #44	; 0x2c
 80008b0:	af08      	add	r7, sp, #32

    // CANPKT_REGISTER registration;
    //uint8_t index;

    // Check if FIFO is not empty
    DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 80008b2:	4a53      	ldr	r2, [pc, #332]	; (8000a00 <VCU_ReceiveMessage_Tasks+0x154>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	2000      	movs	r0, #0
 80008b8:	f001 fb1a 	bl	8001ef0 <DRV_CANFDSPI_ReceiveChannelEventGet>

    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 80008bc:	e091      	b.n	80009e2 <VCU_ReceiveMessage_Tasks+0x136>

      // Get message
      DRV_CANFDSPI_ReceiveMessageGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	4b50      	ldr	r3, [pc, #320]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 80008c4:	4a50      	ldr	r2, [pc, #320]	; (8000a08 <VCU_ReceiveMessage_Tasks+0x15c>)
 80008c6:	2101      	movs	r1, #1
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 f975 	bl	8001bb8 <DRV_CANFDSPI_ReceiveMessageGet>

      switch (rxObj.bF.id.SID) {
 80008ce:	4b4e      	ldr	r3, [pc, #312]	; (8000a08 <VCU_ReceiveMessage_Tasks+0x15c>)
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80008dc:	2b20      	cmp	r3, #32
 80008de:	d845      	bhi.n	800096c <VCU_ReceiveMessage_Tasks+0xc0>
 80008e0:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <VCU_ReceiveMessage_Tasks+0x3c>)
 80008e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e6:	bf00      	nop
 80008e8:	080009d7 	.word	0x080009d7
 80008ec:	0800096d 	.word	0x0800096d
 80008f0:	0800096d 	.word	0x0800096d
 80008f4:	0800096d 	.word	0x0800096d
 80008f8:	0800096d 	.word	0x0800096d
 80008fc:	0800096d 	.word	0x0800096d
 8000900:	0800096d 	.word	0x0800096d
 8000904:	0800096d 	.word	0x0800096d
 8000908:	0800096d 	.word	0x0800096d
 800090c:	0800096d 	.word	0x0800096d
 8000910:	0800096d 	.word	0x0800096d
 8000914:	0800096d 	.word	0x0800096d
 8000918:	0800096d 	.word	0x0800096d
 800091c:	0800096d 	.word	0x0800096d
 8000920:	0800096d 	.word	0x0800096d
 8000924:	0800096d 	.word	0x0800096d
 8000928:	0800096d 	.word	0x0800096d
 800092c:	080009d7 	.word	0x080009d7
 8000930:	080009d7 	.word	0x080009d7
 8000934:	080009d7 	.word	0x080009d7
 8000938:	0800096d 	.word	0x0800096d
 800093c:	080009d7 	.word	0x080009d7
 8000940:	0800096d 	.word	0x0800096d
 8000944:	0800096d 	.word	0x0800096d
 8000948:	080009d7 	.word	0x080009d7
 800094c:	080009d7 	.word	0x080009d7
 8000950:	0800096d 	.word	0x0800096d
 8000954:	0800096d 	.word	0x0800096d
 8000958:	0800096d 	.word	0x0800096d
 800095c:	0800096d 	.word	0x0800096d
 8000960:	0800096d 	.word	0x0800096d
 8000964:	0800096d 	.word	0x0800096d
 8000968:	080009d7 	.word	0x080009d7
        case ID_BMS_DATA_10:
          break;
        case ID_BMS_STATE:
          break;
        default:
          sprintf(tempBuffer,"MC RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);
 800096c:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <VCU_ReceiveMessage_Tasks+0x15c>)
 800096e:	881b      	ldrh	r3, [r3, #0]
 8000970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000974:	b29b      	uxth	r3, r3
 8000976:	469c      	mov	ip, r3
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <VCU_ReceiveMessage_Tasks+0x15c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8000980:	469e      	mov	lr, r3
 8000982:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4b1e      	ldr	r3, [pc, #120]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 800098a:	785b      	ldrb	r3, [r3, #1]
 800098c:	4619      	mov	r1, r3
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 8000990:	789b      	ldrb	r3, [r3, #2]
 8000992:	4618      	mov	r0, r3
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 8000996:	78db      	ldrb	r3, [r3, #3]
 8000998:	461c      	mov	r4, r3
 800099a:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 800099c:	791b      	ldrb	r3, [r3, #4]
 800099e:	461d      	mov	r5, r3
 80009a0:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 80009a2:	795b      	ldrb	r3, [r3, #5]
 80009a4:	461e      	mov	r6, r3
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 80009a8:	799b      	ldrb	r3, [r3, #6]
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <VCU_ReceiveMessage_Tasks+0x158>)
 80009ae:	79db      	ldrb	r3, [r3, #7]
 80009b0:	9307      	str	r3, [sp, #28]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	9306      	str	r3, [sp, #24]
 80009b6:	9605      	str	r6, [sp, #20]
 80009b8:	9504      	str	r5, [sp, #16]
 80009ba:	9403      	str	r4, [sp, #12]
 80009bc:	9002      	str	r0, [sp, #8]
 80009be:	9101      	str	r1, [sp, #4]
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	4673      	mov	r3, lr
 80009c4:	4662      	mov	r2, ip
 80009c6:	4911      	ldr	r1, [pc, #68]	; (8000a0c <VCU_ReceiveMessage_Tasks+0x160>)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <VCU_ReceiveMessage_Tasks+0x164>)
 80009ca:	f008 fbb1 	bl	8009130 <siprintf>
 80009ce:	4810      	ldr	r0, [pc, #64]	; (8000a10 <VCU_ReceiveMessage_Tasks+0x164>)
 80009d0:	f002 fb92 	bl	80030f8 <serialOut>
          break;
 80009d4:	e000      	b.n	80009d8 <VCU_ReceiveMessage_Tasks+0x12c>
          break;
 80009d6:	bf00      	nop
      }


      // check for any more messages
      DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <VCU_ReceiveMessage_Tasks+0x154>)
 80009da:	2101      	movs	r1, #1
 80009dc:	2000      	movs	r0, #0
 80009de:	f001 fa87 	bl	8001ef0 <DRV_CANFDSPI_ReceiveChannelEventGet>
    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 80009e2:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <VCU_ReceiveMessage_Tasks+0x154>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	f47f af67 	bne.w	80008be <VCU_ReceiveMessage_Tasks+0x12>
    }

    //    APP_LED_Clear(APP_RX_LED);


    canRxInterrupt = 0;
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <VCU_ReceiveMessage_Tasks+0x168>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]

}
 80009f6:	bf00      	nop
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000fc 	.word	0x200000fc
 8000a04:	2000010c 	.word	0x2000010c
 8000a08:	20000100 	.word	0x20000100
 8000a0c:	0800a698 	.word	0x0800a698
 8000a10:	2000cd4c 	.word	0x2000cd4c
 8000a14:	2000cdb0 	.word	0x2000cdb0

08000a18 <VCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     A P P _ T r a n s m i t M e s s a g e Q u e u e                                    V C U   E M U L A T O R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af02      	add	r7, sp, #8
    APP_LED_Set(APP_TX_LED);
 8000a1e:	2002      	movs	r0, #2
 8000a20:	f7ff fdb0 	bl	8000584 <APP_LED_Set>

    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8000a24:	2332      	movs	r3, #50	; 0x32
 8000a26:	71fb      	strb	r3, [r7, #7]

    // Check if FIFO is not full
    do {
        DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <VCU_TransmitMessageQueue+0x78>)
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	f001 fa2c 	bl	8001e8a <DRV_CANFDSPI_TransmitChannelEventGet>
        if (attempts == 0) {
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d108      	bne.n	8000a4a <VCU_TransmitMessageQueue+0x32>
            Nop();
 8000a38:	bf00      	nop
            Nop();
 8000a3a:	bf00      	nop
            DRV_CANFDSPI_ErrorCountStateGet(DRV_CANFDSPI_INDEX_0, &tec, &rec, &errorFlags);
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <VCU_TransmitMessageQueue+0x7c>)
 8000a3e:	4a16      	ldr	r2, [pc, #88]	; (8000a98 <VCU_TransmitMessageQueue+0x80>)
 8000a40:	4916      	ldr	r1, [pc, #88]	; (8000a9c <VCU_TransmitMessageQueue+0x84>)
 8000a42:	2000      	movs	r0, #0
 8000a44:	f001 fadb 	bl	8001ffe <DRV_CANFDSPI_ErrorCountStateGet>
            return;
 8000a48:	e01f      	b.n	8000a8a <VCU_TransmitMessageQueue+0x72>
        }
        attempts--;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	71fb      	strb	r3, [r7, #7]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <VCU_TransmitMessageQueue+0x78>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0e5      	beq.n	8000a28 <VCU_TransmitMessageQueue+0x10>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8000a5c:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <VCU_TransmitMessageQueue+0x88>)
 8000a5e:	791b      	ldrb	r3, [r3, #4]
 8000a60:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fad6 	bl	8003018 <DRV_CANFDSPI_DlcToDataBytes>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	71bb      	strb	r3, [r7, #6]

    DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, true);
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	2201      	movs	r2, #1
 8000a74:	9201      	str	r2, [sp, #4]
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <VCU_TransmitMessageQueue+0x8c>)
 8000a7a:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <VCU_TransmitMessageQueue+0x88>)
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 fe7e 	bl	8001780 <DRV_CANFDSPI_TransmitChannelLoad>

    APP_LED_Clear(APP_TX_LED);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f7ff fd55 	bl	8000534 <APP_LED_Clear>
}
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000a0 	.word	0x200000a0
 8000a94:	2000014f 	.word	0x2000014f
 8000a98:	2000014e 	.word	0x2000014e
 8000a9c:	2000014d 	.word	0x2000014d
 8000aa0:	200000a4 	.word	0x200000a4
 8000aa4:	200000b0 	.word	0x200000b0

08000aa8 <VCU_TransmitState>:
/***************************************************************************************************************
*     V C U _ T  r a n s m i t S t a t e                                                 V C U   E M U L A T O R
***************************************************************************************************************/


void VCU_TransmitState(packState state){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]

  CANFRM_0x400_VCU_COMMAND command;
  memset(&command,0,sizeof(command));
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	2208      	movs	r2, #8
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f008 faf2 	bl	80090a4 <memset>

  command.vcu_contactor_ctrl = state;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 0303 	and.w	r3, r3, #3
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	7a3b      	ldrb	r3, [r7, #8]
 8000aca:	f362 0301 	bfi	r3, r2, #0, #2
 8000ace:	723b      	strb	r3, [r7, #8]

  txObj.word[0] = 0;                              // Configure transmit message
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8000ad6:	4b1e      	ldr	r3, [pc, #120]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]

  memcpy(txd, &command, 12);
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	4619      	mov	r1, r3
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <VCU_TransmitState+0xac>)
 8000aec:	f008 facc 	bl	8009088 <memcpy>

  txObj.bF.id.SID = ID_VCU_COMMAND  ;          // Standard ID
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000af2:	8813      	ldrh	r3, [r2, #0]
 8000af4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af8:	f361 030a 	bfi	r3, r1, #0, #11
 8000afc:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8000afe:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000b00:	6813      	ldr	r3, [r2, #0]
 8000b02:	f36f 23dc 	bfc	r3, #11, #18
 8000b06:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8000b08:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000b0a:	7913      	ldrb	r3, [r2, #4]
 8000b0c:	f36f 1386 	bfc	r3, #6, #1
 8000b10:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_24;                  // 8 bytes to transmit
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000b14:	7913      	ldrb	r3, [r2, #4]
 8000b16:	210c      	movs	r1, #12
 8000b18:	f361 0303 	bfi	r3, r1, #0, #4
 8000b1c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8000b1e:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000b20:	7913      	ldrb	r3, [r2, #4]
 8000b22:	f36f 13c7 	bfc	r3, #7, #1
 8000b26:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <VCU_TransmitState+0xa8>)
 8000b2a:	7913      	ldrb	r3, [r2, #4]
 8000b2c:	f36f 1304 	bfc	r3, #4, #1
 8000b30:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x400 Command: STATE=%02x",state); serialOut(tempBuffer);
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <VCU_TransmitState+0xb0>)
 8000b38:	4808      	ldr	r0, [pc, #32]	; (8000b5c <VCU_TransmitState+0xb4>)
 8000b3a:	f008 faf9 	bl	8009130 <siprintf>
 8000b3e:	4807      	ldr	r0, [pc, #28]	; (8000b5c <VCU_TransmitState+0xb4>)
 8000b40:	f002 fada 	bl	80030f8 <serialOut>
  VCU_TransmitMessageQueue();                     // Send it
 8000b44:	f7ff ff68 	bl	8000a18 <VCU_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 8000b48:	bf00      	nop
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200000a4 	.word	0x200000a4
 8000b54:	200000b0 	.word	0x200000b0
 8000b58:	0800a704 	.word	0x0800a704
 8000b5c:	2000cd4c 	.word	0x2000cd4c

08000b60 <VCU_TestRegisterAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R e g i s t e r A c c e s s                                        V C U   E M U L A T O R
***************************************************************************************************************/
bool VCU_TestRegisterAccess(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8000b66:	2300      	movs	r3, #0
 8000b68:	71bb      	strb	r3, [r7, #6]

    Nop();
 8000b6a:	bf00      	nop

    // Verify read/write with different access length
    // Note: registers can be accessed in multiples of bytes
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	e05d      	b.n	8000c2e <VCU_TestRegisterAccess+0xce>
        for (i = 0; i < length; i++) {
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e016      	b.n	8000ba8 <VCU_TestRegisterAccess+0x48>
            txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 8000b7a:	f008 fa9b 	bl	80090b4 <rand>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	4a30      	ldr	r2, [pc, #192]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000b84:	7812      	ldrb	r2, [r2, #0]
 8000b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b8a:	b2d9      	uxtb	r1, r3
 8000b8c:	4b2e      	ldr	r3, [pc, #184]	; (8000c48 <VCU_TestRegisterAccess+0xe8>)
 8000b8e:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 8000b90:	4b2c      	ldr	r3, [pc, #176]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <VCU_TestRegisterAccess+0xec>)
 8000b98:	21ff      	movs	r1, #255	; 0xff
 8000b9a:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	79fa      	ldrb	r2, [r7, #7]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d8e3      	bhi.n	8000b7a <VCU_TestRegisterAccess+0x1a>
        }

        Nop();
 8000bb2:	bf00      	nop

        // Write data to registers
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, txd, length);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <VCU_TestRegisterAccess+0xe8>)
 8000bba:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fb28 	bl	8001214 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from registers
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, rxd, length);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <VCU_TestRegisterAccess+0xec>)
 8000bca:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 faba 	bl	8001148 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e01e      	b.n	8000c1e <VCU_TestRegisterAccess+0xbe>
            good = txd[i] == rxd[i];
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <VCU_TestRegisterAccess+0xe8>)
 8000be8:	5c9a      	ldrb	r2, [r3, r2]
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <VCU_TestRegisterAccess+0xec>)
 8000bf2:	5c5b      	ldrb	r3, [r3, r1]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	f083 0301 	eor.w	r3, r3, #1
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d003      	beq.n	8000c12 <VCU_TestRegisterAccess+0xb2>
                Nop();
 8000c0a:	bf00      	nop
                Nop();
 8000c0c:	bf00      	nop
                // Data mismatch
                return false;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e013      	b.n	8000c3a <VCU_TestRegisterAccess+0xda>
        for (i = 0; i < length; i++) {
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000c1c:	701a      	strb	r2, [r3, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <VCU_TestRegisterAccess+0xe4>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	79fa      	ldrb	r2, [r7, #7]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d8db      	bhi.n	8000be0 <VCU_TestRegisterAccess+0x80>
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b40      	cmp	r3, #64	; 0x40
 8000c32:	d99e      	bls.n	8000b72 <VCU_TestRegisterAccess+0x12>
            }
        }
    }
    Nop();
 8000c34:	bf00      	nop
    Nop();
 8000c36:	bf00      	nop
    return true;
 8000c38:	2301      	movs	r3, #1
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000014c 	.word	0x2000014c
 8000c48:	200000b0 	.word	0x200000b0
 8000c4c:	2000010c 	.word	0x2000010c

08000c50 <VCU_TestRamAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R a m A c c e s s                                                  V C U   E M U L A T O R
***************************************************************************************************************/
bool VCU_TestRamAccess(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8000c56:	2300      	movs	r3, #0
 8000c58:	71bb      	strb	r3, [r7, #6]

    Nop();
 8000c5a:	bf00      	nop

    // Verify read/write with different access length
    // Note: RAM can only be accessed in multiples of 4 bytes
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	71fb      	strb	r3, [r7, #7]
 8000c60:	e05b      	b.n	8000d1a <VCU_TestRamAccess+0xca>
        for (i = 0; i < length; i++) {
 8000c62:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	e014      	b.n	8000c94 <VCU_TestRamAccess+0x44>
            txd[i] = rand() & 0xff;
 8000c6a:	f008 fa23 	bl	80090b4 <rand>
 8000c6e:	4601      	mov	r1, r0
 8000c70:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	b2c9      	uxtb	r1, r1
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <VCU_TestRamAccess+0xe0>)
 8000c7a:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <VCU_TestRamAccess+0xe4>)
 8000c84:	21ff      	movs	r1, #255	; 0xff
 8000c86:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 8000c88:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b26      	ldr	r3, [pc, #152]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	4b25      	ldr	r3, [pc, #148]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	79fa      	ldrb	r2, [r7, #7]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d8e5      	bhi.n	8000c6a <VCU_TestRamAccess+0x1a>
        }

        Nop();
 8000c9e:	bf00      	nop

        // Write data to RAM
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, txd, length);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <VCU_TestRamAccess+0xe0>)
 8000ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 fab2 	bl	8001214 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from RAM
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, rxd, length);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4a1f      	ldr	r2, [pc, #124]	; (8000d34 <VCU_TestRamAccess+0xe4>)
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 fa44 	bl	8001148 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	e01e      	b.n	8000d0a <VCU_TestRamAccess+0xba>
            good = txd[i] == rxd[i];
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <VCU_TestRamAccess+0xe0>)
 8000cd4:	5c9a      	ldrb	r2, [r3, r2]
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <VCU_TestRamAccess+0xe4>)
 8000cde:	5c5b      	ldrb	r3, [r3, r1]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	bf0c      	ite	eq
 8000ce4:	2301      	moveq	r3, #1
 8000ce6:	2300      	movne	r3, #0
 8000ce8:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	f083 0301 	eor.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <VCU_TestRamAccess+0xae>
                Nop();
 8000cf6:	bf00      	nop
                Nop();
 8000cf8:	bf00      	nop

                // Data mismatch
                return false;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e011      	b.n	8000d22 <VCU_TestRamAccess+0xd2>
        for (i = 0; i < length; i++) {
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <VCU_TestRamAccess+0xdc>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8db      	bhi.n	8000ccc <VCU_TestRamAccess+0x7c>
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8000d14:	79fb      	ldrb	r3, [r7, #7]
 8000d16:	3304      	adds	r3, #4
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	2b40      	cmp	r3, #64	; 0x40
 8000d1e:	d9a0      	bls.n	8000c62 <VCU_TestRamAccess+0x12>
            }
        }
    }

    return true;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	2000014c 	.word	0x2000014c
 8000d30:	200000b0 	.word	0x200000b0
 8000d34:	2000010c 	.word	0x2000010c

08000d38 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af02      	add	r7, sp, #8
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  uint16_t spiTransferSize = 2;
 8000d42:	2302      	movs	r3, #2
 8000d44:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000d46:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <DRV_CANFDSPI_Reset+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = 0;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <DRV_CANFDSPI_Reset+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	705a      	strb	r2, [r3, #1]

  //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);


	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2120      	movs	r1, #32
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <DRV_CANFDSPI_Reset+0x54>)
 8000d58:	f003 fc4e 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8000d5c:	89fb      	ldrh	r3, [r7, #14]
 8000d5e:	2264      	movs	r2, #100	; 0x64
 8000d60:	9200      	str	r2, [sp, #0]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <DRV_CANFDSPI_Reset+0x58>)
 8000d64:	4908      	ldr	r1, [pc, #32]	; (8000d88 <DRV_CANFDSPI_Reset+0x50>)
 8000d66:	480b      	ldr	r0, [pc, #44]	; (8000d94 <DRV_CANFDSPI_Reset+0x5c>)
 8000d68:	f005 ff9e 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	2120      	movs	r1, #32
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <DRV_CANFDSPI_Reset+0x54>)
 8000d76:	f003 fc3f 	bl	80045f8 <HAL_GPIO_WritePin>

  return spiTransferError;
 8000d7a:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000c750 	.word	0x2000c750
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	2000c7b0 	.word	0x2000c7b0
 8000d94:	2000c840 	.word	0x2000c840

08000d98 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af02      	add	r7, sp, #8
 8000d9e:	4603      	mov	r3, r0
 8000da0:	603a      	str	r2, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
 8000da4:	460b      	mov	r3, r1
 8000da6:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 8000da8:	2303      	movs	r3, #3
 8000daa:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8000dac:	88bb      	ldrh	r3, [r7, #4]
 8000dae:	0a1b      	lsrs	r3, r3, #8
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f003 030f 	and.w	r3, r3, #15
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	3330      	adds	r3, #48	; 0x30
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <DRV_CANFDSPI_ReadByte+0x74>)
 8000dc0:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8000dc2:	88bb      	ldrh	r3, [r7, #4]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <DRV_CANFDSPI_ReadByte+0x74>)
 8000dc8:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <DRV_CANFDSPI_ReadByte+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2120      	movs	r1, #32
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <DRV_CANFDSPI_ReadByte+0x78>)
 8000dd6:	f003 fc0f 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8000dda:	89fb      	ldrh	r3, [r7, #14]
 8000ddc:	2264      	movs	r2, #100	; 0x64
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	4a0c      	ldr	r2, [pc, #48]	; (8000e14 <DRV_CANFDSPI_ReadByte+0x7c>)
 8000de2:	490a      	ldr	r1, [pc, #40]	; (8000e0c <DRV_CANFDSPI_ReadByte+0x74>)
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <DRV_CANFDSPI_ReadByte+0x80>)
 8000de6:	f005 ff5f 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 8000dea:	4603      	mov	r3, r0
 8000dec:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2120      	movs	r1, #32
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <DRV_CANFDSPI_ReadByte+0x78>)
 8000df4:	f003 fc00 	bl	80045f8 <HAL_GPIO_WritePin>

  // Update data
  *rxd = spiReceiveBuffer[2];
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <DRV_CANFDSPI_ReadByte+0x7c>)
 8000dfa:	789a      	ldrb	r2, [r3, #2]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8000e00:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000c750 	.word	0x2000c750
 8000e10:	48000800 	.word	0x48000800
 8000e14:	2000c7b0 	.word	0x2000c7b0
 8000e18:	2000c840 	.word	0x2000c840

08000e1c <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	460b      	mov	r3, r1
 8000e28:	80bb      	strh	r3, [r7, #4]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8000e32:	88bb      	ldrh	r3, [r7, #4]
 8000e34:	0a1b      	lsrs	r3, r3, #8
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	3320      	adds	r3, #32
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <DRV_CANFDSPI_WriteByte+0x70>)
 8000e46:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8000e48:	88bb      	ldrh	r3, [r7, #4]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <DRV_CANFDSPI_WriteByte+0x70>)
 8000e4e:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <DRV_CANFDSPI_WriteByte+0x70>)
 8000e52:	79bb      	ldrb	r3, [r7, #6]
 8000e54:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2120      	movs	r1, #32
 8000e5a:	480d      	ldr	r0, [pc, #52]	; (8000e90 <DRV_CANFDSPI_WriteByte+0x74>)
 8000e5c:	f003 fbcc 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	2264      	movs	r2, #100	; 0x64
 8000e64:	9200      	str	r2, [sp, #0]
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <DRV_CANFDSPI_WriteByte+0x78>)
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <DRV_CANFDSPI_WriteByte+0x70>)
 8000e6a:	480b      	ldr	r0, [pc, #44]	; (8000e98 <DRV_CANFDSPI_WriteByte+0x7c>)
 8000e6c:	f005 ff1c 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 8000e70:	4603      	mov	r3, r0
 8000e72:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	2120      	movs	r1, #32
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <DRV_CANFDSPI_WriteByte+0x74>)
 8000e7a:	f003 fbbd 	bl	80045f8 <HAL_GPIO_WritePin>

  return spiTransferError;
 8000e7e:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000c750 	.word	0x2000c750
 8000e90:	48000800 	.word	0x48000800
 8000e94:	2000c7b0 	.word	0x2000c7b0
 8000e98:	2000c840 	.word	0x2000c840

08000e9c <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	603a      	str	r2, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8000eac:	2306      	movs	r3, #6
 8000eae:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8000eb0:	88bb      	ldrh	r3, [r7, #4]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	f003 030f 	and.w	r3, r3, #15
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	3330      	adds	r3, #48	; 0x30
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <DRV_CANFDSPI_ReadWord+0xa8>)
 8000ec4:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8000ec6:	88bb      	ldrh	r3, [r7, #4]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <DRV_CANFDSPI_ReadWord+0xa8>)
 8000ecc:	705a      	strb	r2, [r3, #1]

  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	481d      	ldr	r0, [pc, #116]	; (8000f48 <DRV_CANFDSPI_ReadWord+0xac>)
 8000ed4:	f003 fb90 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8000ed8:	8abb      	ldrh	r3, [r7, #20]
 8000eda:	2264      	movs	r2, #100	; 0x64
 8000edc:	9200      	str	r2, [sp, #0]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <DRV_CANFDSPI_ReadWord+0xb0>)
 8000ee0:	4918      	ldr	r1, [pc, #96]	; (8000f44 <DRV_CANFDSPI_ReadWord+0xa8>)
 8000ee2:	481b      	ldr	r0, [pc, #108]	; (8000f50 <DRV_CANFDSPI_ReadWord+0xb4>)
 8000ee4:	f005 fee0 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	74fb      	strb	r3, [r7, #19]
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8000eec:	2201      	movs	r2, #1
 8000eee:	2120      	movs	r1, #32
 8000ef0:	4815      	ldr	r0, [pc, #84]	; (8000f48 <DRV_CANFDSPI_ReadWord+0xac>)
 8000ef2:	f003 fb81 	bl	80045f8 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 8000ef6:	7cfb      	ldrb	r3, [r7, #19]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <DRV_CANFDSPI_ReadWord+0x66>
      return spiTransferError;
 8000efc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000f00:	e01c      	b.n	8000f3c <DRV_CANFDSPI_ReadWord+0xa0>
  }

  // Update data
  *rxd = 0;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8000f08:	2302      	movs	r3, #2
 8000f0a:	75fb      	strb	r3, [r7, #23]
 8000f0c:	e011      	b.n	8000f32 <DRV_CANFDSPI_ReadWord+0x96>
      x = (uint32_t) spiReceiveBuffer[i];
 8000f0e:	7dfb      	ldrb	r3, [r7, #23]
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <DRV_CANFDSPI_ReadWord+0xb0>)
 8000f12:	5cd3      	ldrb	r3, [r2, r3]
 8000f14:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
 8000f1c:	3b02      	subs	r3, #2
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	68f9      	ldr	r1, [r7, #12]
 8000f22:	fa01 f303 	lsl.w	r3, r1, r3
 8000f26:	441a      	add	r2, r3
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	75fb      	strb	r3, [r7, #23]
 8000f32:	7dfb      	ldrb	r3, [r7, #23]
 8000f34:	2b05      	cmp	r3, #5
 8000f36:	d9ea      	bls.n	8000f0e <DRV_CANFDSPI_ReadWord+0x72>
  }

  return spiTransferError;
 8000f38:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000c750 	.word	0x2000c750
 8000f48:	48000800 	.word	0x48000800
 8000f4c:	2000c7b0 	.word	0x2000c7b0
 8000f50:	2000c840 	.word	0x2000c840

08000f54 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	603a      	str	r2, [r7, #0]
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	460b      	mov	r3, r1
 8000f62:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint16_t spiTransferSize = 6;
 8000f64:	2306      	movs	r3, #6
 8000f66:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8000f68:	88bb      	ldrh	r3, [r7, #4]
 8000f6a:	0a1b      	lsrs	r3, r3, #8
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	3320      	adds	r3, #32
 8000f78:	b2da      	uxtb	r2, r3
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <DRV_CANFDSPI_WriteWord+0x8c>)
 8000f7c:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <DRV_CANFDSPI_WriteWord+0x8c>)
 8000f84:	705a      	strb	r2, [r3, #1]

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	e00b      	b.n	8000fa4 <DRV_CANFDSPI_WriteWord+0x50>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	40da      	lsrs	r2, r3
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	3302      	adds	r3, #2
 8000f98:	b2d1      	uxtb	r1, r2
 8000f9a:	4a11      	ldr	r2, [pc, #68]	; (8000fe0 <DRV_CANFDSPI_WriteWord+0x8c>)
 8000f9c:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 4; i++) {
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d9f0      	bls.n	8000f8c <DRV_CANFDSPI_WriteWord+0x38>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2120      	movs	r1, #32
 8000fae:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <DRV_CANFDSPI_WriteWord+0x90>)
 8000fb0:	f003 fb22 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8000fb4:	89bb      	ldrh	r3, [r7, #12]
 8000fb6:	2264      	movs	r2, #100	; 0x64
 8000fb8:	9200      	str	r2, [sp, #0]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <DRV_CANFDSPI_WriteWord+0x94>)
 8000fbc:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <DRV_CANFDSPI_WriteWord+0x8c>)
 8000fbe:	480b      	ldr	r0, [pc, #44]	; (8000fec <DRV_CANFDSPI_WriteWord+0x98>)
 8000fc0:	f005 fe72 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2120      	movs	r1, #32
 8000fcc:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <DRV_CANFDSPI_WriteWord+0x90>)
 8000fce:	f003 fb13 	bl	80045f8 <HAL_GPIO_WritePin>

  return spiTransferError;
 8000fd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000c750 	.word	0x2000c750
 8000fe4:	48000800 	.word	0x48000800
 8000fe8:	2000c7b0 	.word	0x2000c7b0
 8000fec:	2000c840 	.word	0x2000c840

08000ff0 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	603a      	str	r2, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 4;
 8001000:	2304      	movs	r3, #4
 8001002:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	0a1b      	lsrs	r3, r3, #8
 8001008:	b29b      	uxth	r3, r3
 800100a:	b2db      	uxtb	r3, r3
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	b2db      	uxtb	r3, r3
 8001012:	3330      	adds	r3, #48	; 0x30
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <DRV_CANFDSPI_ReadHalfWord+0xac>)
 8001018:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 800101a:	88bb      	ldrh	r3, [r7, #4]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <DRV_CANFDSPI_ReadHalfWord+0xac>)
 8001020:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	2120      	movs	r1, #32
 8001026:	481e      	ldr	r0, [pc, #120]	; (80010a0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8001028:	f003 fae6 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800102c:	8abb      	ldrh	r3, [r7, #20]
 800102e:	2264      	movs	r2, #100	; 0x64
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 8001034:	4919      	ldr	r1, [pc, #100]	; (800109c <DRV_CANFDSPI_ReadHalfWord+0xac>)
 8001036:	481c      	ldr	r0, [pc, #112]	; (80010a8 <DRV_CANFDSPI_ReadHalfWord+0xb8>)
 8001038:	f005 fe36 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 800103c:	4603      	mov	r3, r0
 800103e:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001040:	2201      	movs	r2, #1
 8001042:	2120      	movs	r1, #32
 8001044:	4816      	ldr	r0, [pc, #88]	; (80010a0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8001046:	f003 fad7 	bl	80045f8 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 800104a:	7cfb      	ldrb	r3, [r7, #19]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <DRV_CANFDSPI_ReadHalfWord+0x66>
      return spiTransferError;
 8001050:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001054:	e01e      	b.n	8001094 <DRV_CANFDSPI_ReadHalfWord+0xa4>
  }

  // Update data
  *rxd = 0;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 800105c:	2302      	movs	r3, #2
 800105e:	75fb      	strb	r3, [r7, #23]
 8001060:	e013      	b.n	800108a <DRV_CANFDSPI_ReadHalfWord+0x9a>
      x = (uint32_t) spiReceiveBuffer[i];
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 8001066:	5cd3      	ldrb	r3, [r2, r3]
 8001068:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	3b02      	subs	r3, #2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	4413      	add	r3, r2
 800107e:	b29a      	uxth	r2, r3
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 8001084:	7dfb      	ldrb	r3, [r7, #23]
 8001086:	3301      	adds	r3, #1
 8001088:	75fb      	strb	r3, [r7, #23]
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	2b03      	cmp	r3, #3
 800108e:	d9e8      	bls.n	8001062 <DRV_CANFDSPI_ReadHalfWord+0x72>
  }

  return spiTransferError;
 8001090:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000c750 	.word	0x2000c750
 80010a0:	48000800 	.word	0x48000800
 80010a4:	2000c7b0 	.word	0x2000c7b0
 80010a8:	2000c840 	.word	0x2000c840

080010ac <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
 80010b6:	460b      	mov	r3, r1
 80010b8:	80bb      	strh	r3, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  uint16_t spiTransferSize = 4;
 80010be:	2304      	movs	r3, #4
 80010c0:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 030f 	and.w	r3, r3, #15
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	3320      	adds	r3, #32
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 80010d6:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 80010de:	705a      	strb	r2, [r3, #1]

  // Split word into 2 bytes and add them to buffer
  for (i = 0; i < 2; i++) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e00b      	b.n	80010fe <DRV_CANFDSPI_WriteHalfWord+0x52>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	411a      	asrs	r2, r3
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	3302      	adds	r3, #2
 80010f2:	b2d1      	uxtb	r1, r2
 80010f4:	4a10      	ldr	r2, [pc, #64]	; (8001138 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 80010f6:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 2; i++) {
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	3301      	adds	r3, #1
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d9f0      	bls.n	80010e6 <DRV_CANFDSPI_WriteHalfWord+0x3a>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2120      	movs	r1, #32
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <DRV_CANFDSPI_WriteHalfWord+0x90>)
 800110a:	f003 fa75 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	2264      	movs	r2, #100	; 0x64
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <DRV_CANFDSPI_WriteHalfWord+0x94>)
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <DRV_CANFDSPI_WriteHalfWord+0x8c>)
 8001118:	480a      	ldr	r0, [pc, #40]	; (8001144 <DRV_CANFDSPI_WriteHalfWord+0x98>)
 800111a:	f005 fdc5 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 800111e:	4603      	mov	r3, r0
 8001120:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2120      	movs	r1, #32
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <DRV_CANFDSPI_WriteHalfWord+0x90>)
 8001128:	f003 fa66 	bl	80045f8 <HAL_GPIO_WritePin>


    return spiTransferError;
 800112c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	2000c750 	.word	0x2000c750
 800113c:	48000800 	.word	0x48000800
 8001140:	2000c7b0 	.word	0x2000c7b0
 8001144:	2000c840 	.word	0x2000c840

08001148 <DRV_CANFDSPI_ReadByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af02      	add	r7, sp, #8
 800114e:	60ba      	str	r2, [r7, #8]
 8001150:	461a      	mov	r2, r3
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	460b      	mov	r3, r1
 8001158:	81bb      	strh	r3, [r7, #12]
 800115a:	4613      	mov	r3, r2
 800115c:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	3302      	adds	r3, #2
 8001162:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001164:	8abb      	ldrh	r3, [r7, #20]
 8001166:	2b60      	cmp	r3, #96	; 0x60
 8001168:	d902      	bls.n	8001170 <DRV_CANFDSPI_ReadByteArray+0x28>
      return -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e044      	b.n	80011fa <DRV_CANFDSPI_ReadByteArray+0xb2>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001170:	89bb      	ldrh	r3, [r7, #12]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	f003 030f 	and.w	r3, r3, #15
 800117c:	b2db      	uxtb	r3, r3
 800117e:	3330      	adds	r3, #48	; 0x30
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 8001184:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 800118c:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 800118e:	2302      	movs	r3, #2
 8001190:	82fb      	strh	r3, [r7, #22]
 8001192:	e006      	b.n	80011a2 <DRV_CANFDSPI_ReadByteArray+0x5a>
      spiTransmitBuffer[i] = 0;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 8001198:	2100      	movs	r1, #0
 800119a:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 800119c:	8afb      	ldrh	r3, [r7, #22]
 800119e:	3301      	adds	r3, #1
 80011a0:	82fb      	strh	r3, [r7, #22]
 80011a2:	8afa      	ldrh	r2, [r7, #22]
 80011a4:	8abb      	ldrh	r3, [r7, #20]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d3f4      	bcc.n	8001194 <DRV_CANFDSPI_ReadByteArray+0x4c>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2120      	movs	r1, #32
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 80011b0:	f003 fa22 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011b4:	8abb      	ldrh	r3, [r7, #20]
 80011b6:	2264      	movs	r2, #100	; 0x64
 80011b8:	9200      	str	r2, [sp, #0]
 80011ba:	4a14      	ldr	r2, [pc, #80]	; (800120c <DRV_CANFDSPI_ReadByteArray+0xc4>)
 80011bc:	4911      	ldr	r1, [pc, #68]	; (8001204 <DRV_CANFDSPI_ReadByteArray+0xbc>)
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <DRV_CANFDSPI_ReadByteArray+0xc8>)
 80011c0:	f005 fd72 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 80011c4:	4603      	mov	r3, r0
 80011c6:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2120      	movs	r1, #32
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 80011ce:	f003 fa13 	bl	80045f8 <HAL_GPIO_WritePin>


  // Update data
  for (i = 0; i < nBytes; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	82fb      	strh	r3, [r7, #22]
 80011d6:	e00a      	b.n	80011ee <DRV_CANFDSPI_ReadByteArray+0xa6>
      rxd[i] = spiReceiveBuffer[i + 2];
 80011d8:	8afb      	ldrh	r3, [r7, #22]
 80011da:	1c9a      	adds	r2, r3, #2
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	440b      	add	r3, r1
 80011e2:	490a      	ldr	r1, [pc, #40]	; (800120c <DRV_CANFDSPI_ReadByteArray+0xc4>)
 80011e4:	5c8a      	ldrb	r2, [r1, r2]
 80011e6:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < nBytes; i++) {
 80011e8:	8afb      	ldrh	r3, [r7, #22]
 80011ea:	3301      	adds	r3, #1
 80011ec:	82fb      	strh	r3, [r7, #22]
 80011ee:	8afa      	ldrh	r2, [r7, #22]
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d3f0      	bcc.n	80011d8 <DRV_CANFDSPI_ReadByteArray+0x90>
  }

  return spiTransferError;
 80011f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000c750 	.word	0x2000c750
 8001208:	48000800 	.word	0x48000800
 800120c:	2000c7b0 	.word	0x2000c7b0
 8001210:	2000c840 	.word	0x2000c840

08001214 <DRV_CANFDSPI_WriteByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af02      	add	r7, sp, #8
 800121a:	60ba      	str	r2, [r7, #8]
 800121c:	461a      	mov	r2, r3
 800121e:	4603      	mov	r3, r0
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	460b      	mov	r3, r1
 8001224:	81bb      	strh	r3, [r7, #12]
 8001226:	4613      	mov	r3, r2
 8001228:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	3302      	adds	r3, #2
 800122e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001230:	8abb      	ldrh	r3, [r7, #20]
 8001232:	2b60      	cmp	r3, #96	; 0x60
 8001234:	d902      	bls.n	800123c <DRV_CANFDSPI_WriteByteArray+0x28>
      return -1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e036      	b.n	80012aa <DRV_CANFDSPI_WriteByteArray+0x96>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800123c:	89bb      	ldrh	r3, [r7, #12]
 800123e:	0a1b      	lsrs	r3, r3, #8
 8001240:	b29b      	uxth	r3, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	f003 030f 	and.w	r3, r3, #15
 8001248:	b2db      	uxtb	r3, r3
 800124a:	3320      	adds	r3, #32
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 8001250:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 8001258:	705a      	strb	r2, [r3, #1]

  // Add data
  for (i = 0; i < nBytes; i++) {
 800125a:	2300      	movs	r3, #0
 800125c:	82fb      	strh	r3, [r7, #22]
 800125e:	e00a      	b.n	8001276 <DRV_CANFDSPI_WriteByteArray+0x62>
      spiTransmitBuffer[i+2] = txd[i];
 8001260:	8afb      	ldrh	r3, [r7, #22]
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	441a      	add	r2, r3
 8001266:	8afb      	ldrh	r3, [r7, #22]
 8001268:	3302      	adds	r3, #2
 800126a:	7811      	ldrb	r1, [r2, #0]
 800126c:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 800126e:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < nBytes; i++) {
 8001270:	8afb      	ldrh	r3, [r7, #22]
 8001272:	3301      	adds	r3, #1
 8001274:	82fb      	strh	r3, [r7, #22]
 8001276:	8afa      	ldrh	r2, [r7, #22]
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	429a      	cmp	r2, r3
 800127c:	d3f0      	bcc.n	8001260 <DRV_CANFDSPI_WriteByteArray+0x4c>
  }
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2120      	movs	r1, #32
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8001284:	f003 f9b8 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001288:	8abb      	ldrh	r3, [r7, #20]
 800128a:	2264      	movs	r2, #100	; 0x64
 800128c:	9200      	str	r2, [sp, #0]
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <DRV_CANFDSPI_WriteByteArray+0xa8>)
 8001290:	4908      	ldr	r1, [pc, #32]	; (80012b4 <DRV_CANFDSPI_WriteByteArray+0xa0>)
 8001292:	480b      	ldr	r0, [pc, #44]	; (80012c0 <DRV_CANFDSPI_WriteByteArray+0xac>)
 8001294:	f005 fd08 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 8001298:	4603      	mov	r3, r0
 800129a:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	2120      	movs	r1, #32
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 80012a2:	f003 f9a9 	bl	80045f8 <HAL_GPIO_WritePin>


  return spiTransferError;
 80012a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000c750 	.word	0x2000c750
 80012b8:	48000800 	.word	0x48000800
 80012bc:	2000c7b0 	.word	0x2000c7b0
 80012c0:	2000c840 	.word	0x2000c840

080012c4 <DRV_CANFDSPI_ReadWordArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	; 0x28
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60ba      	str	r2, [r7, #8]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	460b      	mov	r3, r1
 80012d4:	81bb      	strh	r3, [r7, #12]
 80012d6:	4613      	mov	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
 80012da:	88fb      	ldrh	r3, [r7, #6]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	b29b      	uxth	r3, r3
 80012e0:	3302      	adds	r3, #2
 80012e2:	833b      	strh	r3, [r7, #24]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80012e4:	8b3b      	ldrh	r3, [r7, #24]
 80012e6:	2b60      	cmp	r3, #96	; 0x60
 80012e8:	d902      	bls.n	80012f0 <DRV_CANFDSPI_ReadWordArray+0x2c>
      return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e060      	b.n	80013b2 <DRV_CANFDSPI_ReadWordArray+0xee>
  }

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	0a1b      	lsrs	r3, r3, #8
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b2e      	ldr	r3, [pc, #184]	; (80013bc <DRV_CANFDSPI_ReadWordArray+0xf8>)
 8001304:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = address & 0xFF;
 8001306:	89bb      	ldrh	r3, [r7, #12]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b2c      	ldr	r3, [pc, #176]	; (80013bc <DRV_CANFDSPI_ReadWordArray+0xf8>)
 800130c:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 800130e:	2302      	movs	r3, #2
 8001310:	83fb      	strh	r3, [r7, #30]
 8001312:	e006      	b.n	8001322 <DRV_CANFDSPI_ReadWordArray+0x5e>
      spiTransmitBuffer[i] = 0;
 8001314:	8bfb      	ldrh	r3, [r7, #30]
 8001316:	4a29      	ldr	r2, [pc, #164]	; (80013bc <DRV_CANFDSPI_ReadWordArray+0xf8>)
 8001318:	2100      	movs	r1, #0
 800131a:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 800131c:	8bfb      	ldrh	r3, [r7, #30]
 800131e:	3301      	adds	r3, #1
 8001320:	83fb      	strh	r3, [r7, #30]
 8001322:	8bfa      	ldrh	r2, [r7, #30]
 8001324:	8b3b      	ldrh	r3, [r7, #24]
 8001326:	429a      	cmp	r2, r3
 8001328:	d3f4      	bcc.n	8001314 <DRV_CANFDSPI_ReadWordArray+0x50>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	2120      	movs	r1, #32
 800132e:	4824      	ldr	r0, [pc, #144]	; (80013c0 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8001330:	f003 f962 	bl	80045f8 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001334:	8b3b      	ldrh	r3, [r7, #24]
 8001336:	2264      	movs	r2, #100	; 0x64
 8001338:	9200      	str	r2, [sp, #0]
 800133a:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <DRV_CANFDSPI_ReadWordArray+0x100>)
 800133c:	491f      	ldr	r1, [pc, #124]	; (80013bc <DRV_CANFDSPI_ReadWordArray+0xf8>)
 800133e:	4822      	ldr	r0, [pc, #136]	; (80013c8 <DRV_CANFDSPI_ReadWordArray+0x104>)
 8001340:	f005 fcb2 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001348:	2201      	movs	r2, #1
 800134a:	2120      	movs	r1, #32
 800134c:	481c      	ldr	r0, [pc, #112]	; (80013c0 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 800134e:	f003 f953 	bl	80045f8 <HAL_GPIO_WritePin>

  if (spiTransferError) {
 8001352:	7dfb      	ldrb	r3, [r7, #23]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <DRV_CANFDSPI_ReadWordArray+0x9a>
      return spiTransferError;
 8001358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800135c:	e029      	b.n	80013b2 <DRV_CANFDSPI_ReadWordArray+0xee>
  }

  // Convert Byte array to Word array
  n = 2;
 800135e:	2302      	movs	r3, #2
 8001360:	837b      	strh	r3, [r7, #26]
  for (i = 0; i < nWords; i++) {
 8001362:	2300      	movs	r3, #0
 8001364:	83fb      	strh	r3, [r7, #30]
 8001366:	e01e      	b.n	80013a6 <DRV_CANFDSPI_ReadWordArray+0xe2>
      w.word = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
      for (j = 0; j < 4; j++, n++) {
 800136c:	2300      	movs	r3, #0
 800136e:	83bb      	strh	r3, [r7, #28]
 8001370:	e00d      	b.n	800138e <DRV_CANFDSPI_ReadWordArray+0xca>
          w.byte[j] = spiReceiveBuffer[n];
 8001372:	8b7a      	ldrh	r2, [r7, #26]
 8001374:	8bbb      	ldrh	r3, [r7, #28]
 8001376:	4913      	ldr	r1, [pc, #76]	; (80013c4 <DRV_CANFDSPI_ReadWordArray+0x100>)
 8001378:	5c8a      	ldrb	r2, [r1, r2]
 800137a:	3320      	adds	r3, #32
 800137c:	443b      	add	r3, r7
 800137e:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (j = 0; j < 4; j++, n++) {
 8001382:	8bbb      	ldrh	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	83bb      	strh	r3, [r7, #28]
 8001388:	8b7b      	ldrh	r3, [r7, #26]
 800138a:	3301      	adds	r3, #1
 800138c:	837b      	strh	r3, [r7, #26]
 800138e:	8bbb      	ldrh	r3, [r7, #28]
 8001390:	2b03      	cmp	r3, #3
 8001392:	d9ee      	bls.n	8001372 <DRV_CANFDSPI_ReadWordArray+0xae>
      }
      rxd[i] = w.word;
 8001394:	8bfb      	ldrh	r3, [r7, #30]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	4413      	add	r3, r2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nWords; i++) {
 80013a0:	8bfb      	ldrh	r3, [r7, #30]
 80013a2:	3301      	adds	r3, #1
 80013a4:	83fb      	strh	r3, [r7, #30]
 80013a6:	8bfa      	ldrh	r2, [r7, #30]
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3dc      	bcc.n	8001368 <DRV_CANFDSPI_ReadWordArray+0xa4>
  }

  return spiTransferError;
 80013ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000c750 	.word	0x2000c750
 80013c0:	48000800 	.word	0x48000800
 80013c4:	2000c7b0 	.word	0x2000c7b0
 80013c8:	2000c840 	.word	0x2000c840

080013cc <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  REG_CiCON ciCon;
  int8_t spiTransferError = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	73fb      	strb	r3, [r7, #15]

  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80013dc:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <DRV_CANFDSPI_Configure+0x118>)
 80013de:	60bb      	str	r3, [r7, #8]

  ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	7a3b      	ldrb	r3, [r7, #8]
 80013ec:	f362 0304 	bfi	r3, r2, #0, #5
 80013f0:	723b      	strb	r3, [r7, #8]
  ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	7a3b      	ldrb	r3, [r7, #8]
 80013fe:	f362 1345 	bfi	r3, r2, #5, #1
 8001402:	723b      	strb	r3, [r7, #8]
  ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800140c:	b2da      	uxtb	r2, r3
 800140e:	7a3b      	ldrb	r3, [r7, #8]
 8001410:	f362 1386 	bfi	r3, r2, #6, #1
 8001414:	723b      	strb	r3, [r7, #8]
  ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800141e:	b2da      	uxtb	r2, r3
 8001420:	7a7b      	ldrb	r3, [r7, #9]
 8001422:	f362 0300 	bfi	r3, r2, #0, #1
 8001426:	727b      	strb	r3, [r7, #9]
  ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	785b      	ldrb	r3, [r3, #1]
 800142c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001430:	b2da      	uxtb	r2, r3
 8001432:	7a7b      	ldrb	r3, [r7, #9]
 8001434:	f362 0342 	bfi	r3, r2, #1, #2
 8001438:	727b      	strb	r3, [r7, #9]
  ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001442:	b2da      	uxtb	r2, r3
 8001444:	7a7b      	ldrb	r3, [r7, #9]
 8001446:	f362 1304 	bfi	r3, r2, #4, #1
 800144a:	727b      	strb	r3, [r7, #9]
  ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	785b      	ldrb	r3, [r3, #1]
 8001450:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	7abb      	ldrb	r3, [r7, #10]
 8001458:	f362 0300 	bfi	r3, r2, #0, #1
 800145c:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	785b      	ldrb	r3, [r3, #1]
 8001462:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001466:	b2da      	uxtb	r2, r3
 8001468:	7abb      	ldrb	r3, [r7, #10]
 800146a:	f362 0341 	bfi	r3, r2, #1, #1
 800146e:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	7abb      	ldrb	r3, [r7, #10]
 800147c:	f362 0382 	bfi	r3, r2, #2, #1
 8001480:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800148a:	b2da      	uxtb	r2, r3
 800148c:	7abb      	ldrb	r3, [r7, #10]
 800148e:	f362 03c3 	bfi	r3, r2, #3, #1
 8001492:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TXQEnable = config->TXQEnable;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	7abb      	ldrb	r3, [r7, #10]
 80014a0:	f362 1304 	bfi	r3, r2, #4, #1
 80014a4:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	789b      	ldrb	r3, [r3, #2]
 80014aa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	7afb      	ldrb	r3, [r7, #11]
 80014b2:	f362 1307 	bfi	r3, r2, #4, #4
 80014b6:	72fb      	strb	r3, [r7, #11]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 80014b8:	68ba      	ldr	r2, [r7, #8]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fd48 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 80014c4:	4603      	mov	r3, r0
 80014c6:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 80014c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <DRV_CANFDSPI_Configure+0x10a>
      return -1;
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	e001      	b.n	80014da <DRV_CANFDSPI_Configure+0x10e>
  }

  return spiTransferError;
 80014d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	04980760 	.word	0x04980760

080014e8 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  REG_CiCON ciCon;
  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 80014f0:	4b3a      	ldr	r3, [pc, #232]	; (80015dc <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 80014f2:	60fb      	str	r3, [r7, #12]

  config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 80014f4:	7b3b      	ldrb	r3, [r7, #12]
 80014f6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80014fa:	b2d9      	uxtb	r1, r3
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	7813      	ldrb	r3, [r2, #0]
 8001500:	f361 0304 	bfi	r3, r1, #0, #5
 8001504:	7013      	strb	r3, [r2, #0]
  config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001506:	7b3b      	ldrb	r3, [r7, #12]
 8001508:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	7813      	ldrb	r3, [r2, #0]
 8001512:	f361 1345 	bfi	r3, r1, #5, #1
 8001516:	7013      	strb	r3, [r2, #0]
  config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001518:	7b3b      	ldrb	r3, [r7, #12]
 800151a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800151e:	b2d9      	uxtb	r1, r3
 8001520:	687a      	ldr	r2, [r7, #4]
 8001522:	7813      	ldrb	r3, [r2, #0]
 8001524:	f361 1386 	bfi	r3, r1, #6, #1
 8001528:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 800152a:	7b7b      	ldrb	r3, [r7, #13]
 800152c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001530:	b2d9      	uxtb	r1, r3
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	7813      	ldrb	r3, [r2, #0]
 8001536:	f361 13c7 	bfi	r3, r1, #7, #1
 800153a:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 800153c:	7b7b      	ldrb	r3, [r7, #13]
 800153e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001542:	b2d9      	uxtb	r1, r3
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	7853      	ldrb	r3, [r2, #1]
 8001548:	f361 0301 	bfi	r3, r1, #0, #2
 800154c:	7053      	strb	r3, [r2, #1]
  config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 800154e:	7b7b      	ldrb	r3, [r7, #13]
 8001550:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001554:	b2d9      	uxtb	r1, r3
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	7853      	ldrb	r3, [r2, #1]
 800155a:	f361 0382 	bfi	r3, r1, #2, #1
 800155e:	7053      	strb	r3, [r2, #1]
  config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001560:	7bbb      	ldrb	r3, [r7, #14]
 8001562:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001566:	b2d9      	uxtb	r1, r3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	7853      	ldrb	r3, [r2, #1]
 800156c:	f361 03c3 	bfi	r3, r1, #3, #1
 8001570:	7053      	strb	r3, [r2, #1]
  config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001578:	b2d9      	uxtb	r1, r3
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	7853      	ldrb	r3, [r2, #1]
 800157e:	f361 1304 	bfi	r3, r1, #4, #1
 8001582:	7053      	strb	r3, [r2, #1]
  config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800158a:	b2d9      	uxtb	r1, r3
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	7853      	ldrb	r3, [r2, #1]
 8001590:	f361 1345 	bfi	r3, r1, #5, #1
 8001594:	7053      	strb	r3, [r2, #1]
  config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001596:	7bbb      	ldrb	r3, [r7, #14]
 8001598:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800159c:	b2d9      	uxtb	r1, r3
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	7853      	ldrb	r3, [r2, #1]
 80015a2:	f361 1386 	bfi	r3, r1, #6, #1
 80015a6:	7053      	strb	r3, [r2, #1]
  config->TXQEnable = ciCon.bF.TXQEnable;
 80015a8:	7bbb      	ldrb	r3, [r7, #14]
 80015aa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015ae:	b2d9      	uxtb	r1, r3
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	7853      	ldrb	r3, [r2, #1]
 80015b4:	f361 13c7 	bfi	r3, r1, #7, #1
 80015b8:	7053      	strb	r3, [r2, #1]
  config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80015c0:	b2d9      	uxtb	r1, r3
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	7893      	ldrb	r3, [r2, #2]
 80015c6:	f361 0303 	bfi	r3, r1, #0, #4
 80015ca:	7093      	strb	r3, [r2, #2]

  return 0;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	04980760 	.word	0x04980760

080015e0 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	460a      	mov	r2, r1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	4613      	mov	r3, r2
 80015ee:	71bb      	strb	r3, [r7, #6]
  uint8_t d = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73bb      	strb	r3, [r7, #14]
  int8_t spiTransferError = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	73fb      	strb	r3, [r7, #15]

  // Read
  spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 80015f8:	f107 020e 	add.w	r2, r7, #14
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	2103      	movs	r1, #3
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff fbc9 	bl	8000d98 <DRV_CANFDSPI_ReadByte>
 8001606:	4603      	mov	r3, r0
 8001608:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 800160a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <DRV_CANFDSPI_OperationModeSelect+0x38>
      return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e01a      	b.n	800164e <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  // Modify
  d &= ~0x07;
 8001618:	7bbb      	ldrb	r3, [r7, #14]
 800161a:	f023 0307 	bic.w	r3, r3, #7
 800161e:	b2db      	uxtb	r3, r3
 8001620:	73bb      	strb	r3, [r7, #14]
  d |= opMode;
 8001622:	7bba      	ldrb	r2, [r7, #14]
 8001624:	79bb      	ldrb	r3, [r7, #6]
 8001626:	4313      	orrs	r3, r2
 8001628:	b2db      	uxtb	r3, r3
 800162a:	73bb      	strb	r3, [r7, #14]

  // Write
  spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 800162c:	7bba      	ldrb	r2, [r7, #14]
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	2103      	movs	r1, #3
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fbf2 	bl	8000e1c <DRV_CANFDSPI_WriteByte>
 8001638:	4603      	mov	r3, r0
 800163a:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 800163c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <DRV_CANFDSPI_OperationModeSelect+0x6a>
      return -2;
 8001644:	f06f 0301 	mvn.w	r3, #1
 8001648:	e001      	b.n	800164e <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  return spiTransferError;
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	603a      	str	r2, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	460b      	mov	r3, r1
 8001666:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	81bb      	strh	r3, [r7, #12]

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8001670:	4b24      	ldr	r3, [pc, #144]	; (8001704 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001672:	60bb      	str	r3, [r7, #8]

  ciFifoCon.txBF.TxEnable = 1;
 8001674:	7a3b      	ldrb	r3, [r7, #8]
 8001676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800167a:	723b      	strb	r3, [r7, #8]
  ciFifoCon.txBF.FifoSize = config->FifoSize;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	785b      	ldrb	r3, [r3, #1]
 8001680:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001684:	b2da      	uxtb	r2, r3
 8001686:	7afb      	ldrb	r3, [r7, #11]
 8001688:	f362 0304 	bfi	r3, r2, #0, #5
 800168c:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	785b      	ldrb	r3, [r3, #1]
 8001692:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001696:	b2da      	uxtb	r2, r3
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	f362 1347 	bfi	r3, r2, #5, #3
 800169e:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	7abb      	ldrb	r3, [r7, #10]
 80016ac:	f362 1346 	bfi	r3, r2, #5, #2
 80016b0:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.TxPriority = config->TxPriority;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	f3c3 0344 	ubfx	r3, r3, #1, #5
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	7abb      	ldrb	r3, [r7, #10]
 80016be:	f362 0304 	bfi	r3, r2, #0, #5
 80016c2:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.RTREnable = config->RTREnable;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	7a3b      	ldrb	r3, [r7, #8]
 80016d0:	f362 1386 	bfi	r3, r2, #6, #1
 80016d4:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	0052      	lsls	r2, r2, #1
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3350      	adds	r3, #80	; 0x50
 80016e6:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	89b9      	ldrh	r1, [r7, #12]
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fc30 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 80016f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	00600400 	.word	0x00600400

08001708 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001712:	60fb      	str	r3, [r7, #12]

  config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001714:	7b3b      	ldrb	r3, [r7, #12]
 8001716:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800171a:	b2d9      	uxtb	r1, r3
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	7813      	ldrb	r3, [r2, #0]
 8001720:	f361 0300 	bfi	r3, r1, #0, #1
 8001724:	7013      	strb	r3, [r2, #0]
  config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001726:	7bbb      	ldrb	r3, [r7, #14]
 8001728:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800172c:	b2d9      	uxtb	r1, r3
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	7813      	ldrb	r3, [r2, #0]
 8001732:	f361 0345 	bfi	r3, r1, #1, #5
 8001736:	7013      	strb	r3, [r2, #0]
  config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001738:	7bbb      	ldrb	r3, [r7, #14]
 800173a:	f3c3 1341 	ubfx	r3, r3, #5, #2
 800173e:	b2d9      	uxtb	r1, r3
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	7813      	ldrb	r3, [r2, #0]
 8001744:	f361 1387 	bfi	r3, r1, #6, #2
 8001748:	7013      	strb	r3, [r2, #0]
  config->FifoSize = ciFifoCon.txBF.FifoSize;
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001750:	b2d9      	uxtb	r1, r3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	7853      	ldrb	r3, [r2, #1]
 8001756:	f361 0304 	bfi	r3, r1, #0, #5
 800175a:	7053      	strb	r3, [r2, #1]
  config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001762:	b2d9      	uxtb	r1, r3
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	7853      	ldrb	r3, [r2, #1]
 8001768:	f361 1347 	bfi	r3, r1, #5, #3
 800176c:	7053      	strb	r3, [r2, #1]

  return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	00600400 	.word	0x00600400

08001780 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b0a0      	sub	sp, #128	; 0x80
 8001784:	af00      	add	r7, sp, #0
 8001786:	60ba      	str	r2, [r7, #8]
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	460b      	mov	r3, r1
 8001790:	73bb      	strb	r3, [r7, #14]
  uint32_t fifoReg[3];
  uint32_t dataBytesInObject;
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001798:	7bbb      	ldrb	r3, [r7, #14]
 800179a:	b29b      	uxth	r3, r3
 800179c:	461a      	mov	r2, r3
 800179e:	0052      	lsls	r2, r2, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	3350      	adds	r3, #80	; 0x50
 80017a8:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 80017ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80017b0:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80017b4:	7bf8      	ldrb	r0, [r7, #15]
 80017b6:	2303      	movs	r3, #3
 80017b8:	f7ff fd84 	bl	80012c4 <DRV_CANFDSPI_ReadWordArray>
 80017bc:	4603      	mov	r3, r0
 80017be:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 80017c2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d002      	beq.n	80017d0 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
      return -1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295
 80017ce:	e0c5      	b.n	800195c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that it is a transmit buffer
  ciFifoCon.word = fifoReg[0];
 80017d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017d2:	667b      	str	r3, [r7, #100]	; 0x64
  if (!ciFifoCon.txBF.TxEnable) {
 80017d4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80017d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
      return -2;
 80017e2:	f06f 0301 	mvn.w	r3, #1
 80017e6:	e0b9      	b.n	800195c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that DLC is big enough for data
  dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	791b      	ldrb	r3, [r3, #4]
 80017ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 fc10 	bl	8003018 <DRV_CANFDSPI_DlcToDataBytes>
 80017f8:	6778      	str	r0, [r7, #116]	; 0x74
  if (dataBytesInObject < txdNumBytes) {
 80017fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80017fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001800:	429a      	cmp	r2, r3
 8001802:	d202      	bcs.n	800180a <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
      return -3;
 8001804:	f06f 0302 	mvn.w	r3, #2
 8001808:	e0a8      	b.n	800195c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Get status
  ciFifoSta.word = fifoReg[1];
 800180a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800180c:	663b      	str	r3, [r7, #96]	; 0x60

  // Get address
  ciFifoUa.word = fifoReg[2];
 800180e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001810:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 8001812:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181a:	b29b      	uxth	r3, r3
 800181c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
  a += cRAMADDR_START;
 8001820:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8001824:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001828:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  uint8_t txBuffer[MAX_MSG_SIZE];

  txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	743b      	strb	r3, [r7, #16]
  txBuffer[1] = txObj->byte[1];
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	747b      	strb	r3, [r7, #17]
  txBuffer[2] = txObj->byte[2];
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	789b      	ldrb	r3, [r3, #2]
 800183c:	74bb      	strb	r3, [r7, #18]
  txBuffer[3] = txObj->byte[3];
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	74fb      	strb	r3, [r7, #19]

  txBuffer[4] = txObj->byte[4];
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	791b      	ldrb	r3, [r3, #4]
 8001848:	753b      	strb	r3, [r7, #20]
  txBuffer[5] = txObj->byte[5];
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	795b      	ldrb	r3, [r3, #5]
 800184e:	757b      	strb	r3, [r7, #21]
  txBuffer[6] = txObj->byte[6];
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	799b      	ldrb	r3, [r3, #6]
 8001854:	75bb      	strb	r3, [r7, #22]
  txBuffer[7] = txObj->byte[7];
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	79db      	ldrb	r3, [r3, #7]
 800185a:	75fb      	strb	r3, [r7, #23]

  uint8_t i;
  for (i = 0; i < txdNumBytes; i++) {
 800185c:	2300      	movs	r3, #0
 800185e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001862:	e010      	b.n	8001886 <DRV_CANFDSPI_TransmitChannelLoad+0x106>
      txBuffer[i + 8] = txd[i];
 8001864:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	441a      	add	r2, r3
 800186c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001870:	3308      	adds	r3, #8
 8001872:	7812      	ldrb	r2, [r2, #0]
 8001874:	3380      	adds	r3, #128	; 0x80
 8001876:	443b      	add	r3, r7
 8001878:	f803 2c70 	strb.w	r2, [r3, #-112]
  for (i = 0; i < txdNumBytes; i++) {
 800187c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001880:	3301      	adds	r3, #1
 8001882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800188a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800188e:	429a      	cmp	r2, r3
 8001890:	d8e8      	bhi.n	8001864 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
  }

  // Make sure we write a multiple of 4 bytes to RAM
  uint16_t n = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  uint8_t j = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  if (txdNumBytes % 4) {
 800189e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d02b      	beq.n	8001902 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
      // Need to add bytes
      n = 4 - (txdNumBytes % 4);
 80018aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	f1c3 0304 	rsb	r3, r3, #4
 80018ba:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      i = txdNumBytes + 8;
 80018be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	3308      	adds	r3, #8
 80018c6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

      for (j = 0; j < n; j++) {
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80018d0:	e010      	b.n	80018f4 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
          txBuffer[i + 8 + j] = 0;
 80018d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80018d6:	f103 0208 	add.w	r2, r3, #8
 80018da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80018de:	4413      	add	r3, r2
 80018e0:	3380      	adds	r3, #128	; 0x80
 80018e2:	443b      	add	r3, r7
 80018e4:	2200      	movs	r2, #0
 80018e6:	f803 2c70 	strb.w	r2, [r3, #-112]
      for (j = 0; j < n; j++) {
 80018ea:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80018ee:	3301      	adds	r3, #1
 80018f0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80018f4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80018fe:	429a      	cmp	r2, r3
 8001900:	d8e7      	bhi.n	80018d2 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
      }
  }

  spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8001902:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001906:	b29a      	uxth	r2, r3
 8001908:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800190c:	4413      	add	r3, r2
 800190e:	b29b      	uxth	r3, r3
 8001910:	3308      	adds	r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	f107 0210 	add.w	r2, r7, #16
 8001918:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800191c:	7bf8      	ldrb	r0, [r7, #15]
 800191e:	f7ff fc79 	bl	8001214 <DRV_CANFDSPI_WriteByteArray>
 8001922:	4603      	mov	r3, r0
 8001924:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 8001928:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800192c:	2b00      	cmp	r3, #0
 800192e:	d002      	beq.n	8001936 <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
      return -4;
 8001930:	f06f 0303 	mvn.w	r3, #3
 8001934:	e012      	b.n	800195c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Set UINC and TXREQ
  spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 8001936:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 800193a:	7bb9      	ldrb	r1, [r7, #14]
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 f810 	bl	8001964 <DRV_CANFDSPI_TransmitChannelUpdate>
 8001944:	4603      	mov	r3, r0
 8001946:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 800194a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
      return -5;
 8001952:	f06f 0304 	mvn.w	r3, #4
 8001956:	e001      	b.n	800195c <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  return spiTransferError;
 8001958:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 800195c:	4618      	mov	r0, r3
 800195e:	3780      	adds	r7, #128	; 0x80
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <DRV_CANFDSPI_TransmitChannelUpdate>:
  return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	460b      	mov	r3, r1
 8001970:	71bb      	strb	r3, [r7, #6]
 8001972:	4613      	mov	r3, r2
 8001974:	717b      	strb	r3, [r7, #5]
  uint16_t a;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	73fb      	strb	r3, [r7, #15]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 800197a:	79bb      	ldrb	r3, [r7, #6]
 800197c:	b29b      	uxth	r3, r3
 800197e:	461a      	mov	r2, r3
 8001980:	0052      	lsls	r2, r2, #1
 8001982:	4413      	add	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	b29b      	uxth	r3, r3
 8001988:	3351      	adds	r3, #81	; 0x51
 800198a:	81bb      	strh	r3, [r7, #12]
  ciFifoCon.word = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
  ciFifoCon.txBF.UINC = 1;
 8001990:	7a7b      	ldrb	r3, [r7, #9]
 8001992:	f043 0301 	orr.w	r3, r3, #1
 8001996:	727b      	strb	r3, [r7, #9]

  // Set TXREQ
  if (flush) {
 8001998:	797b      	ldrb	r3, [r7, #5]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
      ciFifoCon.txBF.TxRequest = 1;
 800199e:	7a7b      	ldrb	r3, [r7, #9]
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	727b      	strb	r3, [r7, #9]
  }

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80019a6:	7a7a      	ldrb	r2, [r7, #9]
 80019a8:	89b9      	ldrh	r1, [r7, #12]
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fa35 	bl	8000e1c <DRV_CANFDSPI_WriteByte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 80019b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d002      	beq.n	80019c4 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
      return -1;
 80019be:	f04f 33ff 	mov.w	r3, #4294967295
 80019c2:	e001      	b.n	80019c8 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
  }

  return spiTransferError;
 80019c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	603a      	str	r2, [r7, #0]
 80019da:	71fb      	strb	r3, [r7, #7]
 80019dc:	460b      	mov	r3, r1
 80019de:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiFLTOBJ fObj;
  int8_t spiTransferError = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]

  // Setup
  fObj.word = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  fObj.bF = *id;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 80019ee:	79bb      	ldrb	r3, [r7, #6]
 80019f0:	333e      	adds	r3, #62	; 0x3e
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	89b9      	ldrh	r1, [r7, #12]
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff faa8 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8001a04:	4603      	mov	r3, r0
 8001a06:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	603a      	str	r2, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	460b      	mov	r3, r1
 8001a22:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiMASK mObj;
  int8_t spiTransferError = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	73fb      	strb	r3, [r7, #15]

  // Setup
  mObj.word = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  mObj.bF = *mask;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8001a32:	79bb      	ldrb	r3, [r7, #6]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001a3e:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8001a40:	68ba      	ldr	r2, [r7, #8]
 8001a42:	89b9      	ldrh	r1, [r7, #12]
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff fa84 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001a50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	4604      	mov	r4, r0
 8001a64:	4608      	mov	r0, r1
 8001a66:	4611      	mov	r1, r2
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4623      	mov	r3, r4
 8001a6c:	71fb      	strb	r3, [r7, #7]
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71bb      	strb	r3, [r7, #6]
 8001a72:	460b      	mov	r3, r1
 8001a74:	717b      	strb	r3, [r7, #5]
 8001a76:	4613      	mov	r3, r2
 8001a78:	713b      	strb	r3, [r7, #4]
  uint16_t a;
  REG_CiFLTCON_BYTE fCtrl;
  int8_t spiTransferError = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]

  // Enable
  if (enable) {
 8001a7e:	793b      	ldrb	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <DRV_CANFDSPI_FilterToFifoLink+0x32>
      fCtrl.bF.Enable = 1;
 8001a84:	7a3b      	ldrb	r3, [r7, #8]
 8001a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8a:	723b      	strb	r3, [r7, #8]
 8001a8c:	e003      	b.n	8001a96 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
  } else {
      fCtrl.bF.Enable = 0;
 8001a8e:	7a3b      	ldrb	r3, [r7, #8]
 8001a90:	f36f 13c7 	bfc	r3, #7, #1
 8001a94:	723b      	strb	r3, [r7, #8]
  }

  // Link
  fCtrl.bF.BufferPointer = channel;
 8001a96:	797b      	ldrb	r3, [r7, #5]
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	7a3b      	ldrb	r3, [r7, #8]
 8001aa0:	f362 0304 	bfi	r3, r2, #0, #5
 8001aa4:	723b      	strb	r3, [r7, #8]
  a = cREGADDR_CiFLTCON + filter;
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8001aae:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8001ab0:	7a3a      	ldrb	r2, [r7, #8]
 8001ab2:	89b9      	ldrh	r1, [r7, #12]
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff f9b0 	bl	8000e1c <DRV_CANFDSPI_WriteByte>
 8001abc:	4603      	mov	r3, r0
 8001abe:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}

08001acc <DRV_CANFDSPI_ReceiveChannelConfigure>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	603a      	str	r2, [r7, #0]
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	81bb      	strh	r3, [r7, #12]

  if (channel == CAN_TXQUEUE_CH0) {
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
      return -100;
 8001aea:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001aee:	e033      	b.n	8001b58 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
  }

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8001af2:	60bb      	str	r3, [r7, #8]

  ciFifoCon.rxBF.TxEnable = 0;
 8001af4:	7a3b      	ldrb	r3, [r7, #8]
 8001af6:	f36f 13c7 	bfc	r3, #7, #1
 8001afa:	723b      	strb	r3, [r7, #8]
  ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	7afb      	ldrb	r3, [r7, #11]
 8001b08:	f362 0304 	bfi	r3, r2, #0, #5
 8001b0c:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	f362 1347 	bfi	r3, r2, #5, #3
 8001b1e:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001b28:	b2da      	uxtb	r2, r3
 8001b2a:	7a3b      	ldrb	r3, [r7, #8]
 8001b2c:	f362 1345 	bfi	r3, r2, #5, #1
 8001b30:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001b32:	79bb      	ldrb	r3, [r7, #6]
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	461a      	mov	r2, r3
 8001b38:	0052      	lsls	r2, r2, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3350      	adds	r3, #80	; 0x50
 8001b42:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	89b9      	ldrh	r1, [r7, #12]
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fa02 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8001b50:	4603      	mov	r3, r0
 8001b52:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8001b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	00600400 	.word	0x00600400

08001b64 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 8001b6e:	60fb      	str	r3, [r7, #12]

  config->FifoSize = ciFifoCon.rxBF.FifoSize;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001b76:	b2d9      	uxtb	r1, r3
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	7813      	ldrb	r3, [r2, #0]
 8001b7c:	f361 0345 	bfi	r3, r1, #1, #5
 8001b80:	7013      	strb	r3, [r2, #0]
  config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
 8001b84:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001b88:	b2d9      	uxtb	r1, r3
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	8813      	ldrh	r3, [r2, #0]
 8001b8e:	f361 1388 	bfi	r3, r1, #6, #3
 8001b92:	8013      	strh	r3, [r2, #0]
  config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 8001b94:	7b3b      	ldrb	r3, [r7, #12]
 8001b96:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001b9a:	b2d9      	uxtb	r1, r3
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	7813      	ldrb	r3, [r2, #0]
 8001ba0:	f361 0300 	bfi	r3, r1, #0, #1
 8001ba4:	7013      	strb	r3, [r2, #0]

  return 0;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	00600400 	.word	0x00600400

08001bb8 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0a0      	sub	sp, #128	; 0x80
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60ba      	str	r2, [r7, #8]
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	73bb      	strb	r3, [r7, #14]
  uint8_t n = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint8_t i = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  uint16_t a;
  uint32_t fifoReg[3];
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001bdc:	7bbb      	ldrb	r3, [r7, #14]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	0052      	lsls	r2, r2, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3350      	adds	r3, #80	; 0x50
 8001bec:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8001bf0:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8001bf4:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8001bf8:	7bf8      	ldrb	r0, [r7, #15]
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	f7ff fb62 	bl	80012c4 <DRV_CANFDSPI_ReadWordArray>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 8001c06:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
      return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e0cd      	b.n	8001db0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Check that it is a receive buffer
  ciFifoCon.word = fifoReg[0];
 8001c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c16:	66bb      	str	r3, [r7, #104]	; 0x68
  if (ciFifoCon.txBF.TxEnable) {
 8001c18:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001c1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <DRV_CANFDSPI_ReceiveMessageGet+0x74>
      return -2;
 8001c26:	f06f 0301 	mvn.w	r3, #1
 8001c2a:	e0c1      	b.n	8001db0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Get Status
  ciFifoSta.word = fifoReg[1];
 8001c2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c2e:	667b      	str	r3, [r7, #100]	; 0x64

  // Get address
  ciFifoUa.word = fifoReg[2];
 8001c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c32:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 8001c34:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
  a += cRAMADDR_START;
 8001c42:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c4a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  // Number of bytes to read
  n = nBytes + 8; // Add 8 header bytes
 8001c4e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001c52:	3308      	adds	r3, #8
 8001c54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8001c58:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
      n += 4; // Add 4 time stamp bytes
 8001c66:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Make sure we read a multiple of 4 bytes from RAM
  if (n % 4) {
 8001c70:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d007      	beq.n	8001c8e <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
      n = n + 4 - (n % 4);
 8001c7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	3304      	adds	r3, #4
 8001c8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Read rxObj using one access
  uint8_t ba[MAX_MSG_SIZE];

  if (n > MAX_MSG_SIZE) {
 8001c8e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001c92:	2b4c      	cmp	r3, #76	; 0x4c
 8001c94:	d902      	bls.n	8001c9c <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
      n = MAX_MSG_SIZE;
 8001c96:	234c      	movs	r3, #76	; 0x4c
 8001c98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8001c9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	f107 0214 	add.w	r2, r7, #20
 8001ca6:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 8001caa:	7bf8      	ldrb	r0, [r7, #15]
 8001cac:	f7ff fa4c 	bl	8001148 <DRV_CANFDSPI_ReadByteArray>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 8001cb6:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
      return -3;
 8001cbe:	f06f 0302 	mvn.w	r3, #2
 8001cc2:	e075      	b.n	8001db0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Assign message header
  REG_t myReg;

  myReg.byte[0] = ba[0];
 8001cc4:	7d3b      	ldrb	r3, [r7, #20]
 8001cc6:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[1];
 8001cc8:	7d7b      	ldrb	r3, [r7, #21]
 8001cca:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[2];
 8001ccc:	7dbb      	ldrb	r3, [r7, #22]
 8001cce:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[3];
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	74fb      	strb	r3, [r7, #19]
  rxObj->word[0] = myReg.word;
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	601a      	str	r2, [r3, #0]

  myReg.byte[0] = ba[4];
 8001cda:	7e3b      	ldrb	r3, [r7, #24]
 8001cdc:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[5];
 8001cde:	7e7b      	ldrb	r3, [r7, #25]
 8001ce0:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[6];
 8001ce2:	7ebb      	ldrb	r3, [r7, #26]
 8001ce4:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[7];
 8001ce6:	7efb      	ldrb	r3, [r7, #27]
 8001ce8:	74fb      	strb	r3, [r7, #19]
  rxObj->word[1] = myReg.word;
 8001cea:	693a      	ldr	r2, [r7, #16]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	605a      	str	r2, [r3, #4]

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8001cf0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d027      	beq.n	8001d4e <DRV_CANFDSPI_ReceiveMessageGet+0x196>
      myReg.byte[0] = ba[8];
 8001cfe:	7f3b      	ldrb	r3, [r7, #28]
 8001d00:	743b      	strb	r3, [r7, #16]
      myReg.byte[1] = ba[9];
 8001d02:	7f7b      	ldrb	r3, [r7, #29]
 8001d04:	747b      	strb	r3, [r7, #17]
      myReg.byte[2] = ba[10];
 8001d06:	7fbb      	ldrb	r3, [r7, #30]
 8001d08:	74bb      	strb	r3, [r7, #18]
      myReg.byte[3] = ba[11];
 8001d0a:	7ffb      	ldrb	r3, [r7, #31]
 8001d0c:	74fb      	strb	r3, [r7, #19]
      rxObj->word[2] = myReg.word;
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001d1a:	e011      	b.n	8001d40 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
          rxd[i] = ba[i + 12];
 8001d1c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001d20:	f103 020c 	add.w	r2, r3, #12
 8001d24:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	440b      	add	r3, r1
 8001d2c:	3280      	adds	r2, #128	; 0x80
 8001d2e:	443a      	add	r2, r7
 8001d30:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8001d34:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 8001d36:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001d40:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8001d44:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d3e7      	bcc.n	8001d1c <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8001d4c:	e01e      	b.n	8001d8c <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
      }
  } else {
      rxObj->word[2] = 0;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001d5a:	e011      	b.n	8001d80 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
          rxd[i] = ba[i + 8];
 8001d5c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001d60:	f103 0208 	add.w	r2, r3, #8
 8001d64:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3280      	adds	r2, #128	; 0x80
 8001d6e:	443a      	add	r2, r7
 8001d70:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8001d74:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 8001d76:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001d80:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8001d84:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d3e7      	bcc.n	8001d5c <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
      }
  }

  // UINC channel
  spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8001d8c:	7bba      	ldrb	r2, [r7, #14]
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f810 	bl	8001db8 <DRV_CANFDSPI_ReceiveChannelUpdate>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 8001d9e:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d002      	beq.n	8001dac <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
      return -4;
 8001da6:	f06f 0303 	mvn.w	r3, #3
 8001daa:	e001      	b.n	8001db0 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  return spiTransferError;
 8001dac:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3780      	adds	r7, #128	; 0x80
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <DRV_CANFDSPI_ReceiveChannelUpdate>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
      CAN_FIFO_CHANNEL channel)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71bb      	strb	r3, [r7, #6]
  uint16_t a = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	81fb      	strh	r3, [r7, #14]
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	737b      	strb	r3, [r7, #13]
  ciFifoCon.word = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60bb      	str	r3, [r7, #8]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8001dd4:	79bb      	ldrb	r3, [r7, #6]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	0052      	lsls	r2, r2, #1
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3351      	adds	r3, #81	; 0x51
 8001de4:	81fb      	strh	r3, [r7, #14]
  ciFifoCon.rxBF.UINC = 1;
 8001de6:	7a7b      	ldrb	r3, [r7, #9]
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	727b      	strb	r3, [r7, #9]

  // Write byte
  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8001dee:	7a7a      	ldrb	r2, [r7, #9]
 8001df0:	89f9      	ldrh	r1, [r7, #14]
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f811 	bl	8000e1c <DRV_CANFDSPI_WriteByte>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	737b      	strb	r3, [r7, #13]

  return spiTransferError;
 8001dfe:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	4603      	mov	r3, r0
 8001e12:	460a      	mov	r2, r1
 8001e14:	71fb      	strb	r3, [r7, #7]
 8001e16:	4613      	mov	r3, r2
 8001e18:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8001e22:	231e      	movs	r3, #30
 8001e24:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 8001e2a:	f107 0208 	add.w	r2, r7, #8
 8001e2e:	89b9      	ldrh	r1, [r7, #12]
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff f8dc 	bl	8000ff0 <DRV_CANFDSPI_ReadHalfWord>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
 8001e48:	e01b      	b.n	8001e82 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 8001e4a:	893b      	ldrh	r3, [r7, #8]
 8001e4c:	b21a      	sxth	r2, r3
 8001e4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001e52:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8001e56:	b21b      	sxth	r3, r3
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8001e60:	893a      	ldrh	r2, [r7, #8]
 8001e62:	89b9      	ldrh	r1, [r7, #12]
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff f920 	bl	80010ac <DRV_CANFDSPI_WriteHalfWord>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 8001e78:	f06f 0301 	mvn.w	r3, #1
 8001e7c:	e001      	b.n	8001e82 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8001e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	603a      	str	r2, [r7, #0]
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	460b      	mov	r3, r1
 8001e98:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	461a      	mov	r2, r3
 8001eac:	0052      	lsls	r2, r2, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3354      	adds	r3, #84	; 0x54
 8001eb6:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8001eb8:	f107 0208 	add.w	r2, r7, #8
 8001ebc:	89b9      	ldrh	r1, [r7, #12]
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe ff69 	bl	8000d98 <DRV_CANFDSPI_ReadByte>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	e007      	b.n	8001ee8 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8001ed8:	7a3b      	ldrb	r3, [r7, #8]
 8001eda:	f003 0317 	and.w	r3, r3, #23
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	603a      	str	r2, [r7, #0]
 8001efa:	71fb      	strb	r3, [r7, #7]
 8001efc:	460b      	mov	r3, r1
 8001efe:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f04:	2300      	movs	r3, #0
 8001f06:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8001f08:	79bb      	ldrb	r3, [r7, #6]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d102      	bne.n	8001f14 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8001f0e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001f12:	e022      	b.n	8001f5a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8001f18:	79bb      	ldrb	r3, [r7, #6]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	0052      	lsls	r2, r2, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3354      	adds	r3, #84	; 0x54
 8001f28:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8001f2a:	f107 0208 	add.w	r2, r7, #8
 8001f2e:	89b9      	ldrh	r1, [r7, #12]
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe ff30 	bl	8000d98 <DRV_CANFDSPI_ReadByte>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8001f44:	f04f 33ff 	mov.w	r3, #4294967295
 8001f48:	e007      	b.n	8001f5a <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 8001f4a:	7a3b      	ldrb	r3, [r7, #8]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8001f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b084      	sub	sp, #16
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	4603      	mov	r3, r0
 8001f6a:	71fb      	strb	r3, [r7, #7]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	71bb      	strb	r3, [r7, #6]
 8001f70:	4613      	mov	r3, r2
 8001f72:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8001f82:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8001f86:	e036      	b.n	8001ff6 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f88:	79bb      	ldrb	r3, [r7, #6]
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	0052      	lsls	r2, r2, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	3350      	adds	r3, #80	; 0x50
 8001f98:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 8001f9e:	f107 0208 	add.w	r2, r7, #8
 8001fa2:	89b9      	ldrh	r1, [r7, #12]
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe fef6 	bl	8000d98 <DRV_CANFDSPI_ReadByte>
 8001fac:	4603      	mov	r3, r0
 8001fae:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbc:	e01b      	b.n	8001ff6 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8001fbe:	7a3b      	ldrb	r3, [r7, #8]
 8001fc0:	b25a      	sxtb	r2, r3
 8001fc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	b25b      	sxtb	r3, r3
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8001fd4:	7a3a      	ldrb	r2, [r7, #8]
 8001fd6:	89b9      	ldrh	r1, [r7, #12]
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe ff1e 	bl	8000e1c <DRV_CANFDSPI_WriteByte>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8001fec:	f06f 0301 	mvn.w	r3, #1
 8001ff0:	e001      	b.n	8001ff6 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8001ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
 8002008:	603b      	str	r3, [r7, #0]
 800200a:	4603      	mov	r3, r0
 800200c:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8002016:	2334      	movs	r3, #52	; 0x34
 8002018:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 800201e:	f107 0210 	add.w	r2, r7, #16
 8002022:	8ab9      	ldrh	r1, [r7, #20]
 8002024:	7bfb      	ldrb	r3, [r7, #15]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe ff38 	bl	8000e9c <DRV_CANFDSPI_ReadWord>
 800202c:	4603      	mov	r3, r0
 800202e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002030:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	e00d      	b.n	800205a <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 800203e:	7c7a      	ldrb	r2, [r7, #17]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002044:	7c3a      	ldrb	r2, [r7, #16]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 800204a:	7cbb      	ldrb	r3, [r7, #18]
 800204c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002050:	b2da      	uxtb	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002056:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8002070:	2300      	movs	r3, #0
 8002072:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8002074:	f107 020e 	add.w	r2, r7, #14
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f640 610c 	movw	r1, #3596	; 0xe0c
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fe8a 	bl	8000d98 <DRV_CANFDSPI_ReadByte>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002088:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d002      	beq.n	8002096 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8002090:	f04f 33ff 	mov.w	r3, #4294967295
 8002094:	e015      	b.n	80020c2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8002096:	7bbb      	ldrb	r3, [r7, #14]
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 80020a0:	7bba      	ldrb	r2, [r7, #14]
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f640 610c 	movw	r1, #3596	; 0xe0c
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe feb7 	bl	8000e1c <DRV_CANFDSPI_WriteByte>
 80020ae:	4603      	mov	r3, r0
 80020b0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d002      	beq.n	80020c0 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80020ba:	f06f 0301 	mvn.w	r3, #1
 80020be:	e000      	b.n	80020c2 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b090      	sub	sp, #64	; 0x40
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	460a      	mov	r2, r1
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	4613      	mov	r3, r2
 80020d8:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80020e0:	2300      	movs	r3, #0
 80020e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020e4:	e008      	b.n	80020f8 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 80020e6:	f107 0208 	add.w	r2, r7, #8
 80020ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020ec:	4413      	add	r3, r2
 80020ee:	79ba      	ldrb	r2, [r7, #6]
 80020f0:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80020f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f4:	3301      	adds	r3, #1
 80020f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fa:	2b2f      	cmp	r3, #47	; 0x2f
 80020fc:	d9f3      	bls.n	80020e6 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 80020fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002102:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002108:	e016      	b.n	8002138 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 800210a:	f107 0208 	add.w	r2, r7, #8
 800210e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002110:	79f8      	ldrb	r0, [r7, #7]
 8002112:	2330      	movs	r3, #48	; 0x30
 8002114:	f7ff f87e 	bl	8001214 <DRV_CANFDSPI_WriteByteArray>
 8002118:	4603      	mov	r3, r0
 800211a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 800211e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002126:	f04f 33ff 	mov.w	r3, #4294967295
 800212a:	e00a      	b.n	8002142 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 800212c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800212e:	3330      	adds	r3, #48	; 0x30
 8002130:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002134:	3301      	adds	r3, #1
 8002136:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213a:	2b29      	cmp	r3, #41	; 0x29
 800213c:	d9e5      	bls.n	800210a <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 800213e:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8002142:	4618      	mov	r0, r3
 8002144:	3740      	adds	r7, #64	; 0x40
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 800214a:	b590      	push	{r4, r7, lr}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	4604      	mov	r4, r0
 8002152:	4608      	mov	r0, r1
 8002154:	4611      	mov	r1, r2
 8002156:	461a      	mov	r2, r3
 8002158:	4623      	mov	r3, r4
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	4603      	mov	r3, r0
 800215e:	71bb      	strb	r3, [r7, #6]
 8002160:	460b      	mov	r3, r1
 8002162:	717b      	strb	r3, [r7, #5]
 8002164:	4613      	mov	r3, r2
 8002166:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 800216c:	793b      	ldrb	r3, [r7, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d036      	beq.n	80021e0 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002172:	2b02      	cmp	r3, #2
 8002174:	dc4c      	bgt.n	8002210 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 800217a:	2b01      	cmp	r3, #1
 800217c:	d018      	beq.n	80021b0 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 800217e:	e047      	b.n	8002210 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002180:	79ba      	ldrb	r2, [r7, #6]
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	4611      	mov	r1, r2
 8002186:	4618      	mov	r0, r3
 8002188:	f000 f84c 	bl	8002224 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 800218c:	4603      	mov	r3, r0
 800218e:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d002      	beq.n	800219e <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219c:	e03d      	b.n	800221a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 800219e:	797a      	ldrb	r2, [r7, #5]
 80021a0:	79b9      	ldrb	r1, [r7, #6]
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f8c3 	bl	8002330 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 80021aa:	4603      	mov	r3, r0
 80021ac:	73fb      	strb	r3, [r7, #15]
            break;
 80021ae:	e032      	b.n	8002216 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 80021b0:	79ba      	ldrb	r2, [r7, #6]
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 faf2 	bl	80027a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 80021bc:	4603      	mov	r3, r0
 80021be:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80021c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <DRV_CANFDSPI_BitTimeConfigure+0x84>
 80021c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021cc:	e025      	b.n	800221a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 80021ce:	797a      	ldrb	r2, [r7, #5]
 80021d0:	79b9      	ldrb	r1, [r7, #6]
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fb6f 	bl	80028b8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 80021da:	4603      	mov	r3, r0
 80021dc:	73fb      	strb	r3, [r7, #15]
            break;
 80021de:	e01a      	b.n	8002216 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 80021e0:	79ba      	ldrb	r2, [r7, #6]
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	4611      	mov	r1, r2
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fd10 	bl	8002c0c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 80021f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 80021f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fc:	e00d      	b.n	800221a <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 80021fe:	797a      	ldrb	r2, [r7, #5]
 8002200:	79b9      	ldrb	r1, [r7, #6]
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	4618      	mov	r0, r3
 8002206:	f000 fd8d 	bl	8002d24 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 800220a:	4603      	mov	r3, r0
 800220c:	73fb      	strb	r3, [r7, #15]
            break;
 800220e:	e002      	b.n	8002216 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002210:	23ff      	movs	r3, #255	; 0xff
 8002212:	73fb      	strb	r3, [r7, #15]
            break;
 8002214:	bf00      	nop
    }

    return spiTransferError;
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bd90      	pop	{r4, r7, pc}
	...

08002224 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	460a      	mov	r2, r1
 800222e:	71fb      	strb	r3, [r7, #7]
 8002230:	4613      	mov	r3, r2
 8002232:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002238:	4b3c      	ldr	r3, [pc, #240]	; (800232c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 800223a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 800223c:	79bb      	ldrb	r3, [r7, #6]
 800223e:	2b11      	cmp	r3, #17
 8002240:	d862      	bhi.n	8002308 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002242:	a201      	add	r2, pc, #4	; (adr r2, 8002248 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002248:	08002291 	.word	0x08002291
 800224c:	08002291 	.word	0x08002291
 8002250:	08002291 	.word	0x08002291
 8002254:	08002291 	.word	0x08002291
 8002258:	08002291 	.word	0x08002291
 800225c:	08002291 	.word	0x08002291
 8002260:	08002291 	.word	0x08002291
 8002264:	08002291 	.word	0x08002291
 8002268:	080022af 	.word	0x080022af
 800226c:	080022af 	.word	0x080022af
 8002270:	080022af 	.word	0x080022af
 8002274:	080022af 	.word	0x080022af
 8002278:	080022af 	.word	0x080022af
 800227c:	080022af 	.word	0x080022af
 8002280:	080022af 	.word	0x080022af
 8002284:	080022cd 	.word	0x080022cd
 8002288:	080022cd 	.word	0x080022cd
 800228c:	080022eb 	.word	0x080022eb
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002290:	2300      	movs	r3, #0
 8002292:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002294:	233e      	movs	r3, #62	; 0x3e
 8002296:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002298:	7a7b      	ldrb	r3, [r7, #9]
 800229a:	220f      	movs	r2, #15
 800229c:	f362 0306 	bfi	r3, r2, #0, #7
 80022a0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80022a2:	7a3b      	ldrb	r3, [r7, #8]
 80022a4:	220f      	movs	r2, #15
 80022a6:	f362 0306 	bfi	r3, r2, #0, #7
 80022aa:	723b      	strb	r3, [r7, #8]
            break;
 80022ac:	e02f      	b.n	800230e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 80022b2:	237e      	movs	r3, #126	; 0x7e
 80022b4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 80022b6:	7a7b      	ldrb	r3, [r7, #9]
 80022b8:	221f      	movs	r2, #31
 80022ba:	f362 0306 	bfi	r3, r2, #0, #7
 80022be:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80022c0:	7a3b      	ldrb	r3, [r7, #8]
 80022c2:	221f      	movs	r2, #31
 80022c4:	f362 0306 	bfi	r3, r2, #0, #7
 80022c8:	723b      	strb	r3, [r7, #8]
            break;
 80022ca:	e020      	b.n	800230e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80022d0:	231e      	movs	r3, #30
 80022d2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80022d4:	7a7b      	ldrb	r3, [r7, #9]
 80022d6:	2207      	movs	r2, #7
 80022d8:	f362 0306 	bfi	r3, r2, #0, #7
 80022dc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80022de:	7a3b      	ldrb	r3, [r7, #8]
 80022e0:	2207      	movs	r2, #7
 80022e2:	f362 0306 	bfi	r3, r2, #0, #7
 80022e6:	723b      	strb	r3, [r7, #8]
            break;
 80022e8:	e011      	b.n	800230e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 80022ee:	23fe      	movs	r3, #254	; 0xfe
 80022f0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 80022f2:	7a7b      	ldrb	r3, [r7, #9]
 80022f4:	223f      	movs	r2, #63	; 0x3f
 80022f6:	f362 0306 	bfi	r3, r2, #0, #7
 80022fa:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 80022fc:	7a3b      	ldrb	r3, [r7, #8]
 80022fe:	223f      	movs	r2, #63	; 0x3f
 8002300:	f362 0306 	bfi	r3, r2, #0, #7
 8002304:	723b      	strb	r3, [r7, #8]
            break;
 8002306:	e002      	b.n	800230e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	e009      	b.n	8002322 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2104      	movs	r1, #4
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe fe1d 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 800231a:	4603      	mov	r3, r0
 800231c:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800231e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	003e0f0f 	.word	0x003e0f0f

08002330 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
 800233a:	460b      	mov	r3, r1
 800233c:	71bb      	strb	r3, [r7, #6]
 800233e:	4613      	mov	r3, r2
 8002340:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002346:	4be2      	ldr	r3, [pc, #904]	; (80026d0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002348:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800234e:	7abb      	ldrb	r3, [r7, #10]
 8002350:	2202      	movs	r2, #2
 8002352:	f362 0301 	bfi	r3, r2, #0, #2
 8002356:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 800235c:	79bb      	ldrb	r3, [r7, #6]
 800235e:	2b11      	cmp	r3, #17
 8002360:	f200 81f6 	bhi.w	8002750 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002364:	a201      	add	r2, pc, #4	; (adr r2, 800236c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800236a:	bf00      	nop
 800236c:	080023b5 	.word	0x080023b5
 8002370:	080023f3 	.word	0x080023f3
 8002374:	08002431 	.word	0x08002431
 8002378:	0800246f 	.word	0x0800246f
 800237c:	080024ad 	.word	0x080024ad
 8002380:	080024eb 	.word	0x080024eb
 8002384:	08002525 	.word	0x08002525
 8002388:	08002559 	.word	0x08002559
 800238c:	0800258b 	.word	0x0800258b
 8002390:	080025d1 	.word	0x080025d1
 8002394:	08002617 	.word	0x08002617
 8002398:	08002655 	.word	0x08002655
 800239c:	08002693 	.word	0x08002693
 80023a0:	080026d5 	.word	0x080026d5
 80023a4:	08002713 	.word	0x08002713
 80023a8:	0800246f 	.word	0x0800246f
 80023ac:	08002525 	.word	0x08002525
 80023b0:	0800258b 	.word	0x0800258b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 80023b8:	7bbb      	ldrb	r3, [r7, #14]
 80023ba:	221e      	movs	r2, #30
 80023bc:	f362 0304 	bfi	r3, r2, #0, #5
 80023c0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 80023c2:	7b7b      	ldrb	r3, [r7, #13]
 80023c4:	2207      	movs	r2, #7
 80023c6:	f362 0303 	bfi	r3, r2, #0, #4
 80023ca:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80023cc:	7b3b      	ldrb	r3, [r7, #12]
 80023ce:	2207      	movs	r2, #7
 80023d0:	f362 0303 	bfi	r3, r2, #0, #4
 80023d4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80023d6:	7a7b      	ldrb	r3, [r7, #9]
 80023d8:	221f      	movs	r2, #31
 80023da:	f362 0306 	bfi	r3, r2, #0, #7
 80023de:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	7a3b      	ldrb	r3, [r7, #8]
 80023ea:	f362 0305 	bfi	r3, r2, #0, #6
 80023ee:	723b      	strb	r3, [r7, #8]
            break;
 80023f0:	e1b1      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80023f6:	7bbb      	ldrb	r3, [r7, #14]
 80023f8:	220e      	movs	r2, #14
 80023fa:	f362 0304 	bfi	r3, r2, #0, #5
 80023fe:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002400:	7b7b      	ldrb	r3, [r7, #13]
 8002402:	2203      	movs	r2, #3
 8002404:	f362 0303 	bfi	r3, r2, #0, #4
 8002408:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800240a:	7b3b      	ldrb	r3, [r7, #12]
 800240c:	2203      	movs	r2, #3
 800240e:	f362 0303 	bfi	r3, r2, #0, #4
 8002412:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002414:	7a7b      	ldrb	r3, [r7, #9]
 8002416:	220f      	movs	r2, #15
 8002418:	f362 0306 	bfi	r3, r2, #0, #7
 800241c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002424:	b2da      	uxtb	r2, r3
 8002426:	7a3b      	ldrb	r3, [r7, #8]
 8002428:	f362 0305 	bfi	r3, r2, #0, #6
 800242c:	723b      	strb	r3, [r7, #8]
            break;
 800242e:	e192      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002434:	7bbb      	ldrb	r3, [r7, #14]
 8002436:	2208      	movs	r2, #8
 8002438:	f362 0304 	bfi	r3, r2, #0, #5
 800243c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800243e:	7b7b      	ldrb	r3, [r7, #13]
 8002440:	2202      	movs	r2, #2
 8002442:	f362 0303 	bfi	r3, r2, #0, #4
 8002446:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002448:	7b3b      	ldrb	r3, [r7, #12]
 800244a:	2202      	movs	r2, #2
 800244c:	f362 0303 	bfi	r3, r2, #0, #4
 8002450:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002452:	7a7b      	ldrb	r3, [r7, #9]
 8002454:	2209      	movs	r2, #9
 8002456:	f362 0306 	bfi	r3, r2, #0, #7
 800245a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002462:	b2da      	uxtb	r2, r3
 8002464:	7a3b      	ldrb	r3, [r7, #8]
 8002466:	f362 0305 	bfi	r3, r2, #0, #6
 800246a:	723b      	strb	r3, [r7, #8]
            break;
 800246c:	e173      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002472:	7bbb      	ldrb	r3, [r7, #14]
 8002474:	2206      	movs	r2, #6
 8002476:	f362 0304 	bfi	r3, r2, #0, #5
 800247a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800247c:	7b7b      	ldrb	r3, [r7, #13]
 800247e:	2201      	movs	r2, #1
 8002480:	f362 0303 	bfi	r3, r2, #0, #4
 8002484:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002486:	7b3b      	ldrb	r3, [r7, #12]
 8002488:	2201      	movs	r2, #1
 800248a:	f362 0303 	bfi	r3, r2, #0, #4
 800248e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002490:	7a7b      	ldrb	r3, [r7, #9]
 8002492:	2207      	movs	r2, #7
 8002494:	f362 0306 	bfi	r3, r2, #0, #7
 8002498:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	7a3b      	ldrb	r3, [r7, #8]
 80024a4:	f362 0305 	bfi	r3, r2, #0, #6
 80024a8:	723b      	strb	r3, [r7, #8]
            break;
 80024aa:	e154      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80024ac:	2300      	movs	r3, #0
 80024ae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	2204      	movs	r2, #4
 80024b4:	f362 0304 	bfi	r3, r2, #0, #5
 80024b8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80024ba:	7b7b      	ldrb	r3, [r7, #13]
 80024bc:	2201      	movs	r2, #1
 80024be:	f362 0303 	bfi	r3, r2, #0, #4
 80024c2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80024c4:	7b3b      	ldrb	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f362 0303 	bfi	r3, r2, #0, #4
 80024cc:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 80024ce:	7a7b      	ldrb	r3, [r7, #9]
 80024d0:	2205      	movs	r2, #5
 80024d2:	f362 0306 	bfi	r3, r2, #0, #7
 80024d6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	7a3b      	ldrb	r3, [r7, #8]
 80024e2:	f362 0305 	bfi	r3, r2, #0, #6
 80024e6:	723b      	strb	r3, [r7, #8]
            break;
 80024e8:	e135      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 80024ee:	7bbb      	ldrb	r3, [r7, #14]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f362 0304 	bfi	r3, r2, #0, #5
 80024f6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80024f8:	7b7b      	ldrb	r3, [r7, #13]
 80024fa:	f36f 0303 	bfc	r3, #0, #4
 80024fe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002500:	7b3b      	ldrb	r3, [r7, #12]
 8002502:	f36f 0303 	bfc	r3, #0, #4
 8002506:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002508:	7a7b      	ldrb	r3, [r7, #9]
 800250a:	2204      	movs	r2, #4
 800250c:	f362 0306 	bfi	r3, r2, #0, #7
 8002510:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002518:	b2da      	uxtb	r2, r3
 800251a:	7a3b      	ldrb	r3, [r7, #8]
 800251c:	f362 0305 	bfi	r3, r2, #0, #6
 8002520:	723b      	strb	r3, [r7, #8]
            break;
 8002522:	e118      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002528:	7bbb      	ldrb	r3, [r7, #14]
 800252a:	2202      	movs	r2, #2
 800252c:	f362 0304 	bfi	r3, r2, #0, #5
 8002530:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002532:	7b7b      	ldrb	r3, [r7, #13]
 8002534:	f36f 0303 	bfc	r3, #0, #4
 8002538:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800253a:	7b3b      	ldrb	r3, [r7, #12]
 800253c:	f36f 0303 	bfc	r3, #0, #4
 8002540:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002542:	7a7b      	ldrb	r3, [r7, #9]
 8002544:	2203      	movs	r2, #3
 8002546:	f362 0306 	bfi	r3, r2, #0, #7
 800254a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 800254c:	7a3b      	ldrb	r3, [r7, #8]
 800254e:	2201      	movs	r2, #1
 8002550:	f362 0305 	bfi	r3, r2, #0, #6
 8002554:	723b      	strb	r3, [r7, #8]
            break;
 8002556:	e0fe      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	2201      	movs	r2, #1
 8002560:	f362 0304 	bfi	r3, r2, #0, #5
 8002564:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002566:	7b7b      	ldrb	r3, [r7, #13]
 8002568:	f36f 0303 	bfc	r3, #0, #4
 800256c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800256e:	7b3b      	ldrb	r3, [r7, #12]
 8002570:	f36f 0303 	bfc	r3, #0, #4
 8002574:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002576:	7a7b      	ldrb	r3, [r7, #9]
 8002578:	2202      	movs	r2, #2
 800257a:	f362 0306 	bfi	r3, r2, #0, #7
 800257e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002580:	7a3b      	ldrb	r3, [r7, #8]
 8002582:	f36f 0305 	bfc	r3, #0, #6
 8002586:	723b      	strb	r3, [r7, #8]
            break;
 8002588:	e0e5      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	221e      	movs	r2, #30
 8002592:	f362 0304 	bfi	r3, r2, #0, #5
 8002596:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002598:	7b7b      	ldrb	r3, [r7, #13]
 800259a:	2207      	movs	r2, #7
 800259c:	f362 0303 	bfi	r3, r2, #0, #4
 80025a0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80025a2:	7b3b      	ldrb	r3, [r7, #12]
 80025a4:	2207      	movs	r2, #7
 80025a6:	f362 0303 	bfi	r3, r2, #0, #4
 80025aa:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80025ac:	7a7b      	ldrb	r3, [r7, #9]
 80025ae:	221f      	movs	r2, #31
 80025b0:	f362 0306 	bfi	r3, r2, #0, #7
 80025b4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	7a3b      	ldrb	r3, [r7, #8]
 80025c0:	f362 0305 	bfi	r3, r2, #0, #6
 80025c4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80025c6:	7abb      	ldrb	r3, [r7, #10]
 80025c8:	f36f 0301 	bfc	r3, #0, #2
 80025cc:	72bb      	strb	r3, [r7, #10]
            break;
 80025ce:	e0c2      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	2211      	movs	r2, #17
 80025d8:	f362 0304 	bfi	r3, r2, #0, #5
 80025dc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80025de:	7b7b      	ldrb	r3, [r7, #13]
 80025e0:	2204      	movs	r2, #4
 80025e2:	f362 0303 	bfi	r3, r2, #0, #4
 80025e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80025e8:	7b3b      	ldrb	r3, [r7, #12]
 80025ea:	2204      	movs	r2, #4
 80025ec:	f362 0303 	bfi	r3, r2, #0, #4
 80025f0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80025f2:	7a7b      	ldrb	r3, [r7, #9]
 80025f4:	2212      	movs	r2, #18
 80025f6:	f362 0306 	bfi	r3, r2, #0, #7
 80025fa:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002602:	b2da      	uxtb	r2, r3
 8002604:	7a3b      	ldrb	r3, [r7, #8]
 8002606:	f362 0305 	bfi	r3, r2, #0, #6
 800260a:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800260c:	7abb      	ldrb	r3, [r7, #10]
 800260e:	f36f 0301 	bfc	r3, #0, #2
 8002612:	72bb      	strb	r3, [r7, #10]
            break;
 8002614:	e09f      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800261a:	7bbb      	ldrb	r3, [r7, #14]
 800261c:	221e      	movs	r2, #30
 800261e:	f362 0304 	bfi	r3, r2, #0, #5
 8002622:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002624:	7b7b      	ldrb	r3, [r7, #13]
 8002626:	2207      	movs	r2, #7
 8002628:	f362 0303 	bfi	r3, r2, #0, #4
 800262c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800262e:	7b3b      	ldrb	r3, [r7, #12]
 8002630:	2207      	movs	r2, #7
 8002632:	f362 0303 	bfi	r3, r2, #0, #4
 8002636:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002638:	7a7b      	ldrb	r3, [r7, #9]
 800263a:	221f      	movs	r2, #31
 800263c:	f362 0306 	bfi	r3, r2, #0, #7
 8002640:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002648:	b2da      	uxtb	r2, r3
 800264a:	7a3b      	ldrb	r3, [r7, #8]
 800264c:	f362 0305 	bfi	r3, r2, #0, #6
 8002650:	723b      	strb	r3, [r7, #8]
            break;
 8002652:	e080      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002658:	7bbb      	ldrb	r3, [r7, #14]
 800265a:	2212      	movs	r2, #18
 800265c:	f362 0304 	bfi	r3, r2, #0, #5
 8002660:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002662:	7b7b      	ldrb	r3, [r7, #13]
 8002664:	2205      	movs	r2, #5
 8002666:	f362 0303 	bfi	r3, r2, #0, #4
 800266a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 800266c:	7b3b      	ldrb	r3, [r7, #12]
 800266e:	2205      	movs	r2, #5
 8002670:	f362 0303 	bfi	r3, r2, #0, #4
 8002674:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002676:	7a7b      	ldrb	r3, [r7, #9]
 8002678:	2213      	movs	r2, #19
 800267a:	f362 0306 	bfi	r3, r2, #0, #7
 800267e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002686:	b2da      	uxtb	r2, r3
 8002688:	7a3b      	ldrb	r3, [r7, #8]
 800268a:	f362 0305 	bfi	r3, r2, #0, #6
 800268e:	723b      	strb	r3, [r7, #8]
            break;
 8002690:	e061      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002696:	7bbb      	ldrb	r3, [r7, #14]
 8002698:	220e      	movs	r2, #14
 800269a:	f362 0304 	bfi	r3, r2, #0, #5
 800269e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80026a0:	7b7b      	ldrb	r3, [r7, #13]
 80026a2:	2203      	movs	r2, #3
 80026a4:	f362 0303 	bfi	r3, r2, #0, #4
 80026a8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80026aa:	7b3b      	ldrb	r3, [r7, #12]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f362 0303 	bfi	r3, r2, #0, #4
 80026b2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80026b4:	7a7b      	ldrb	r3, [r7, #9]
 80026b6:	220f      	movs	r2, #15
 80026b8:	f362 0306 	bfi	r3, r2, #0, #7
 80026bc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	7a3b      	ldrb	r3, [r7, #8]
 80026c8:	f362 0305 	bfi	r3, r2, #0, #6
 80026cc:	723b      	strb	r3, [r7, #8]
            break;
 80026ce:	e042      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 80026d0:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80026d8:	7bbb      	ldrb	r3, [r7, #14]
 80026da:	2208      	movs	r2, #8
 80026dc:	f362 0304 	bfi	r3, r2, #0, #5
 80026e0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 80026e2:	7b7b      	ldrb	r3, [r7, #13]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f362 0303 	bfi	r3, r2, #0, #4
 80026ea:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 80026ec:	7b3b      	ldrb	r3, [r7, #12]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f362 0303 	bfi	r3, r2, #0, #4
 80026f4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80026f6:	7a7b      	ldrb	r3, [r7, #9]
 80026f8:	2209      	movs	r2, #9
 80026fa:	f362 0306 	bfi	r3, r2, #0, #7
 80026fe:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002706:	b2da      	uxtb	r2, r3
 8002708:	7a3b      	ldrb	r3, [r7, #8]
 800270a:	f362 0305 	bfi	r3, r2, #0, #6
 800270e:	723b      	strb	r3, [r7, #8]
            break;
 8002710:	e021      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002716:	7bbb      	ldrb	r3, [r7, #14]
 8002718:	2206      	movs	r2, #6
 800271a:	f362 0304 	bfi	r3, r2, #0, #5
 800271e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002720:	7b7b      	ldrb	r3, [r7, #13]
 8002722:	2201      	movs	r2, #1
 8002724:	f362 0303 	bfi	r3, r2, #0, #4
 8002728:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800272a:	7b3b      	ldrb	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f362 0303 	bfi	r3, r2, #0, #4
 8002732:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002734:	7a7b      	ldrb	r3, [r7, #9]
 8002736:	2207      	movs	r2, #7
 8002738:	f362 0306 	bfi	r3, r2, #0, #7
 800273c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002744:	b2da      	uxtb	r2, r3
 8002746:	7a3b      	ldrb	r3, [r7, #8]
 8002748:	f362 0305 	bfi	r3, r2, #0, #6
 800274c:	723b      	strb	r3, [r7, #8]
            break;
 800274e:	e002      	b.n	8002756 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 8002750:	f04f 33ff 	mov.w	r3, #4294967295
 8002754:	e01f      	b.n	8002796 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2108      	movs	r1, #8
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fbf9 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002762:	4603      	mov	r3, r0
 8002764:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002766:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 800276e:	f06f 0301 	mvn.w	r3, #1
 8002772:	e010      	b.n	8002796 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	210c      	movs	r1, #12
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe fbea 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002780:	4603      	mov	r3, r0
 8002782:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002784:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d002      	beq.n	8002792 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 800278c:	f06f 0302 	mvn.w	r3, #2
 8002790:	e001      	b.n	8002796 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 8002792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop

080027a0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	460a      	mov	r2, r1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80027b4:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80027b6:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	2b11      	cmp	r3, #17
 80027bc:	d862      	bhi.n	8002884 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80027be:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80027c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c4:	0800280d 	.word	0x0800280d
 80027c8:	0800280d 	.word	0x0800280d
 80027cc:	08002885 	.word	0x08002885
 80027d0:	0800280d 	.word	0x0800280d
 80027d4:	0800280d 	.word	0x0800280d
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	0800280d 	.word	0x0800280d
 80027e0:	0800280d 	.word	0x0800280d
 80027e4:	0800282b 	.word	0x0800282b
 80027e8:	0800282b 	.word	0x0800282b
 80027ec:	0800282b 	.word	0x0800282b
 80027f0:	0800282b 	.word	0x0800282b
 80027f4:	0800282b 	.word	0x0800282b
 80027f8:	0800282b 	.word	0x0800282b
 80027fc:	0800282b 	.word	0x0800282b
 8002800:	08002849 	.word	0x08002849
 8002804:	08002849 	.word	0x08002849
 8002808:	08002867 	.word	0x08002867
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002810:	231e      	movs	r3, #30
 8002812:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002814:	7a7b      	ldrb	r3, [r7, #9]
 8002816:	2207      	movs	r2, #7
 8002818:	f362 0306 	bfi	r3, r2, #0, #7
 800281c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800281e:	7a3b      	ldrb	r3, [r7, #8]
 8002820:	2207      	movs	r2, #7
 8002822:	f362 0306 	bfi	r3, r2, #0, #7
 8002826:	723b      	strb	r3, [r7, #8]
            break;
 8002828:	e02f      	b.n	800288a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800282e:	233e      	movs	r3, #62	; 0x3e
 8002830:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002832:	7a7b      	ldrb	r3, [r7, #9]
 8002834:	220f      	movs	r2, #15
 8002836:	f362 0306 	bfi	r3, r2, #0, #7
 800283a:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 800283c:	7a3b      	ldrb	r3, [r7, #8]
 800283e:	220f      	movs	r2, #15
 8002840:	f362 0306 	bfi	r3, r2, #0, #7
 8002844:	723b      	strb	r3, [r7, #8]
            break;
 8002846:	e020      	b.n	800288a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 800284c:	230e      	movs	r3, #14
 800284e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002850:	7a7b      	ldrb	r3, [r7, #9]
 8002852:	2203      	movs	r2, #3
 8002854:	f362 0306 	bfi	r3, r2, #0, #7
 8002858:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 800285a:	7a3b      	ldrb	r3, [r7, #8]
 800285c:	2203      	movs	r2, #3
 800285e:	f362 0306 	bfi	r3, r2, #0, #7
 8002862:	723b      	strb	r3, [r7, #8]
            break;
 8002864:	e011      	b.n	800288a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002866:	2300      	movs	r3, #0
 8002868:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 800286a:	237e      	movs	r3, #126	; 0x7e
 800286c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800286e:	7a7b      	ldrb	r3, [r7, #9]
 8002870:	221f      	movs	r2, #31
 8002872:	f362 0306 	bfi	r3, r2, #0, #7
 8002876:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002878:	7a3b      	ldrb	r3, [r7, #8]
 800287a:	221f      	movs	r2, #31
 800287c:	f362 0306 	bfi	r3, r2, #0, #7
 8002880:	723b      	strb	r3, [r7, #8]
            break;
 8002882:	e002      	b.n	800288a <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295
 8002888:	e010      	b.n	80028ac <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800288a:	68ba      	ldr	r2, [r7, #8]
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	2104      	movs	r1, #4
 8002890:	4618      	mov	r0, r3
 8002892:	f7fe fb5f 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 80028a2:	f06f 0301 	mvn.w	r3, #1
 80028a6:	e001      	b.n	80028ac <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 80028a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	003e0f0f 	.word	0x003e0f0f

080028b8 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	71fb      	strb	r3, [r7, #7]
 80028c2:	460b      	mov	r3, r1
 80028c4:	71bb      	strb	r3, [r7, #6]
 80028c6:	4613      	mov	r3, r2
 80028c8:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80028ce:	4bce      	ldr	r3, [pc, #824]	; (8002c08 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 80028d0:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80028d6:	7abb      	ldrb	r3, [r7, #10]
 80028d8:	2202      	movs	r2, #2
 80028da:	f362 0301 	bfi	r3, r2, #0, #2
 80028de:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80028e4:	79bb      	ldrb	r3, [r7, #6]
 80028e6:	2b11      	cmp	r3, #17
 80028e8:	f200 8166 	bhi.w	8002bb8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 80028ec:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 80028ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f2:	bf00      	nop
 80028f4:	0800293d 	.word	0x0800293d
 80028f8:	0800297b 	.word	0x0800297b
 80028fc:	08002bb9 	.word	0x08002bb9
 8002900:	080029b9 	.word	0x080029b9
 8002904:	080029f3 	.word	0x080029f3
 8002908:	08002a2d 	.word	0x08002a2d
 800290c:	08002a2d 	.word	0x08002a2d
 8002910:	08002a2d 	.word	0x08002a2d
 8002914:	08002a33 	.word	0x08002a33
 8002918:	08002a79 	.word	0x08002a79
 800291c:	08002abf 	.word	0x08002abf
 8002920:	08002afd 	.word	0x08002afd
 8002924:	08002b3b 	.word	0x08002b3b
 8002928:	08002b79 	.word	0x08002b79
 800292c:	08002b7f 	.word	0x08002b7f
 8002930:	080029b9 	.word	0x080029b9
 8002934:	08002a2d 	.word	0x08002a2d
 8002938:	08002a33 	.word	0x08002a33
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002940:	7bbb      	ldrb	r3, [r7, #14]
 8002942:	220e      	movs	r2, #14
 8002944:	f362 0304 	bfi	r3, r2, #0, #5
 8002948:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800294a:	7b7b      	ldrb	r3, [r7, #13]
 800294c:	2203      	movs	r2, #3
 800294e:	f362 0303 	bfi	r3, r2, #0, #4
 8002952:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002954:	7b3b      	ldrb	r3, [r7, #12]
 8002956:	2203      	movs	r2, #3
 8002958:	f362 0303 	bfi	r3, r2, #0, #4
 800295c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800295e:	7a7b      	ldrb	r3, [r7, #9]
 8002960:	220f      	movs	r2, #15
 8002962:	f362 0306 	bfi	r3, r2, #0, #7
 8002966:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800296e:	b2da      	uxtb	r2, r3
 8002970:	7a3b      	ldrb	r3, [r7, #8]
 8002972:	f362 0305 	bfi	r3, r2, #0, #6
 8002976:	723b      	strb	r3, [r7, #8]
            break;
 8002978:	e121      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800297e:	7bbb      	ldrb	r3, [r7, #14]
 8002980:	2206      	movs	r2, #6
 8002982:	f362 0304 	bfi	r3, r2, #0, #5
 8002986:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002988:	7b7b      	ldrb	r3, [r7, #13]
 800298a:	2201      	movs	r2, #1
 800298c:	f362 0303 	bfi	r3, r2, #0, #4
 8002990:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002992:	7b3b      	ldrb	r3, [r7, #12]
 8002994:	2201      	movs	r2, #1
 8002996:	f362 0303 	bfi	r3, r2, #0, #4
 800299a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 800299c:	7a7b      	ldrb	r3, [r7, #9]
 800299e:	2207      	movs	r2, #7
 80029a0:	f362 0306 	bfi	r3, r2, #0, #7
 80029a4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	7a3b      	ldrb	r3, [r7, #8]
 80029b0:	f362 0305 	bfi	r3, r2, #0, #6
 80029b4:	723b      	strb	r3, [r7, #8]
            break;
 80029b6:	e102      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80029bc:	7bbb      	ldrb	r3, [r7, #14]
 80029be:	2202      	movs	r2, #2
 80029c0:	f362 0304 	bfi	r3, r2, #0, #5
 80029c4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80029c6:	7b7b      	ldrb	r3, [r7, #13]
 80029c8:	f36f 0303 	bfc	r3, #0, #4
 80029cc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80029ce:	7b3b      	ldrb	r3, [r7, #12]
 80029d0:	f36f 0303 	bfc	r3, #0, #4
 80029d4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80029d6:	7a7b      	ldrb	r3, [r7, #9]
 80029d8:	2203      	movs	r2, #3
 80029da:	f362 0306 	bfi	r3, r2, #0, #7
 80029de:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	7a3b      	ldrb	r3, [r7, #8]
 80029ea:	f362 0305 	bfi	r3, r2, #0, #6
 80029ee:	723b      	strb	r3, [r7, #8]
            break;
 80029f0:	e0e5      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80029f6:	7bbb      	ldrb	r3, [r7, #14]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f362 0304 	bfi	r3, r2, #0, #5
 80029fe:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002a00:	7b7b      	ldrb	r3, [r7, #13]
 8002a02:	f36f 0303 	bfc	r3, #0, #4
 8002a06:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002a08:	7b3b      	ldrb	r3, [r7, #12]
 8002a0a:	f36f 0303 	bfc	r3, #0, #4
 8002a0e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002a10:	7a7b      	ldrb	r3, [r7, #9]
 8002a12:	2202      	movs	r2, #2
 8002a14:	f362 0306 	bfi	r3, r2, #0, #7
 8002a18:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	7a3b      	ldrb	r3, [r7, #8]
 8002a24:	f362 0305 	bfi	r3, r2, #0, #6
 8002a28:	723b      	strb	r3, [r7, #8]
            break;
 8002a2a:	e0c8      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8002a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a30:	e0e5      	b.n	8002bfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002a36:	7bbb      	ldrb	r3, [r7, #14]
 8002a38:	221e      	movs	r2, #30
 8002a3a:	f362 0304 	bfi	r3, r2, #0, #5
 8002a3e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002a40:	7b7b      	ldrb	r3, [r7, #13]
 8002a42:	2207      	movs	r2, #7
 8002a44:	f362 0303 	bfi	r3, r2, #0, #4
 8002a48:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002a4a:	7b3b      	ldrb	r3, [r7, #12]
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	f362 0303 	bfi	r3, r2, #0, #4
 8002a52:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002a54:	7a7b      	ldrb	r3, [r7, #9]
 8002a56:	221f      	movs	r2, #31
 8002a58:	f362 0306 	bfi	r3, r2, #0, #7
 8002a5c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	7a3b      	ldrb	r3, [r7, #8]
 8002a68:	f362 0305 	bfi	r3, r2, #0, #6
 8002a6c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002a6e:	7abb      	ldrb	r3, [r7, #10]
 8002a70:	f36f 0301 	bfc	r3, #0, #2
 8002a74:	72bb      	strb	r3, [r7, #10]
            break;
 8002a76:	e0a2      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002a7c:	7bbb      	ldrb	r3, [r7, #14]
 8002a7e:	2211      	movs	r2, #17
 8002a80:	f362 0304 	bfi	r3, r2, #0, #5
 8002a84:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002a86:	7b7b      	ldrb	r3, [r7, #13]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	f362 0303 	bfi	r3, r2, #0, #4
 8002a8e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002a90:	7b3b      	ldrb	r3, [r7, #12]
 8002a92:	2204      	movs	r2, #4
 8002a94:	f362 0303 	bfi	r3, r2, #0, #4
 8002a98:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002a9a:	7a7b      	ldrb	r3, [r7, #9]
 8002a9c:	2212      	movs	r2, #18
 8002a9e:	f362 0306 	bfi	r3, r2, #0, #7
 8002aa2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	7a3b      	ldrb	r3, [r7, #8]
 8002aae:	f362 0305 	bfi	r3, r2, #0, #6
 8002ab2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002ab4:	7abb      	ldrb	r3, [r7, #10]
 8002ab6:	f36f 0301 	bfc	r3, #0, #2
 8002aba:	72bb      	strb	r3, [r7, #10]
            break;
 8002abc:	e07f      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002ac2:	7bbb      	ldrb	r3, [r7, #14]
 8002ac4:	220e      	movs	r2, #14
 8002ac6:	f362 0304 	bfi	r3, r2, #0, #5
 8002aca:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002acc:	7b7b      	ldrb	r3, [r7, #13]
 8002ace:	2203      	movs	r2, #3
 8002ad0:	f362 0303 	bfi	r3, r2, #0, #4
 8002ad4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002ad6:	7b3b      	ldrb	r3, [r7, #12]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	f362 0303 	bfi	r3, r2, #0, #4
 8002ade:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002ae0:	7a7b      	ldrb	r3, [r7, #9]
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	f362 0306 	bfi	r3, r2, #0, #7
 8002ae8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	7a3b      	ldrb	r3, [r7, #8]
 8002af4:	f362 0305 	bfi	r3, r2, #0, #6
 8002af8:	723b      	strb	r3, [r7, #8]
            break;
 8002afa:	e060      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002b00:	7bbb      	ldrb	r3, [r7, #14]
 8002b02:	2208      	movs	r2, #8
 8002b04:	f362 0304 	bfi	r3, r2, #0, #5
 8002b08:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002b0a:	7b7b      	ldrb	r3, [r7, #13]
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	f362 0303 	bfi	r3, r2, #0, #4
 8002b12:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f362 0303 	bfi	r3, r2, #0, #4
 8002b1c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002b1e:	7a7b      	ldrb	r3, [r7, #9]
 8002b20:	2209      	movs	r2, #9
 8002b22:	f362 0306 	bfi	r3, r2, #0, #7
 8002b26:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	7a3b      	ldrb	r3, [r7, #8]
 8002b32:	f362 0305 	bfi	r3, r2, #0, #6
 8002b36:	723b      	strb	r3, [r7, #8]
            break;
 8002b38:	e041      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002b3e:	7bbb      	ldrb	r3, [r7, #14]
 8002b40:	2206      	movs	r2, #6
 8002b42:	f362 0304 	bfi	r3, r2, #0, #5
 8002b46:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002b48:	7b7b      	ldrb	r3, [r7, #13]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f362 0303 	bfi	r3, r2, #0, #4
 8002b50:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002b52:	7b3b      	ldrb	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f362 0303 	bfi	r3, r2, #0, #4
 8002b5a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	2207      	movs	r2, #7
 8002b60:	f362 0306 	bfi	r3, r2, #0, #7
 8002b64:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	7a3b      	ldrb	r3, [r7, #8]
 8002b70:	f362 0305 	bfi	r3, r2, #0, #6
 8002b74:	723b      	strb	r3, [r7, #8]
            break;
 8002b76:	e022      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7c:	e03f      	b.n	8002bfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002b82:	7bbb      	ldrb	r3, [r7, #14]
 8002b84:	2202      	movs	r2, #2
 8002b86:	f362 0304 	bfi	r3, r2, #0, #5
 8002b8a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002b8c:	7b7b      	ldrb	r3, [r7, #13]
 8002b8e:	f36f 0303 	bfc	r3, #0, #4
 8002b92:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002b94:	7b3b      	ldrb	r3, [r7, #12]
 8002b96:	f36f 0303 	bfc	r3, #0, #4
 8002b9a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002b9c:	7a7b      	ldrb	r3, [r7, #9]
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ba4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	7a3b      	ldrb	r3, [r7, #8]
 8002bb0:	f362 0305 	bfi	r3, r2, #0, #6
 8002bb4:	723b      	strb	r3, [r7, #8]
            break;
 8002bb6:	e002      	b.n	8002bbe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bbc:	e01f      	b.n	8002bfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	2108      	movs	r1, #8
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe f9c5 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 8002bd6:	f06f 0301 	mvn.w	r3, #1
 8002bda:	e010      	b.n	8002bfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	210c      	movs	r1, #12
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f9b6 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002be8:	4603      	mov	r3, r0
 8002bea:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002bec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d002      	beq.n	8002bfa <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8002bf4:	f06f 0302 	mvn.w	r3, #2
 8002bf8:	e001      	b.n	8002bfe <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 8002bfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	000e0303 	.word	0x000e0303

08002c0c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	4603      	mov	r3, r0
 8002c14:	460a      	mov	r2, r1
 8002c16:	71fb      	strb	r3, [r7, #7]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002c20:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8002c22:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002c24:	79bb      	ldrb	r3, [r7, #6]
 8002c26:	2b11      	cmp	r3, #17
 8002c28:	d862      	bhi.n	8002cf0 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c79 	.word	0x08002c79
 8002c34:	08002c79 	.word	0x08002c79
 8002c38:	08002cf1 	.word	0x08002cf1
 8002c3c:	08002c79 	.word	0x08002c79
 8002c40:	08002c79 	.word	0x08002c79
 8002c44:	08002c79 	.word	0x08002c79
 8002c48:	08002c79 	.word	0x08002c79
 8002c4c:	08002c79 	.word	0x08002c79
 8002c50:	08002c97 	.word	0x08002c97
 8002c54:	08002c97 	.word	0x08002c97
 8002c58:	08002c97 	.word	0x08002c97
 8002c5c:	08002c97 	.word	0x08002c97
 8002c60:	08002c97 	.word	0x08002c97
 8002c64:	08002c97 	.word	0x08002c97
 8002c68:	08002c97 	.word	0x08002c97
 8002c6c:	08002cb5 	.word	0x08002cb5
 8002c70:	08002cb5 	.word	0x08002cb5
 8002c74:	08002cd3 	.word	0x08002cd3
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8002c7c:	230e      	movs	r3, #14
 8002c7e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 8002c80:	7a7b      	ldrb	r3, [r7, #9]
 8002c82:	2203      	movs	r2, #3
 8002c84:	f362 0306 	bfi	r3, r2, #0, #7
 8002c88:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8002c8a:	7a3b      	ldrb	r3, [r7, #8]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	f362 0306 	bfi	r3, r2, #0, #7
 8002c92:	723b      	strb	r3, [r7, #8]
            break;
 8002c94:	e02f      	b.n	8002cf6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002c96:	2300      	movs	r3, #0
 8002c98:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002c9a:	231e      	movs	r3, #30
 8002c9c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002c9e:	7a7b      	ldrb	r3, [r7, #9]
 8002ca0:	2207      	movs	r2, #7
 8002ca2:	f362 0306 	bfi	r3, r2, #0, #7
 8002ca6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002ca8:	7a3b      	ldrb	r3, [r7, #8]
 8002caa:	2207      	movs	r2, #7
 8002cac:	f362 0306 	bfi	r3, r2, #0, #7
 8002cb0:	723b      	strb	r3, [r7, #8]
            break;
 8002cb2:	e020      	b.n	8002cf6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 8002cb8:	2307      	movs	r3, #7
 8002cba:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8002cbc:	7a7b      	ldrb	r3, [r7, #9]
 8002cbe:	2202      	movs	r2, #2
 8002cc0:	f362 0306 	bfi	r3, r2, #0, #7
 8002cc4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 8002cc6:	7a3b      	ldrb	r3, [r7, #8]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f362 0306 	bfi	r3, r2, #0, #7
 8002cce:	723b      	strb	r3, [r7, #8]
            break;
 8002cd0:	e011      	b.n	8002cf6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002cd6:	233e      	movs	r3, #62	; 0x3e
 8002cd8:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002cda:	7a7b      	ldrb	r3, [r7, #9]
 8002cdc:	220f      	movs	r2, #15
 8002cde:	f362 0306 	bfi	r3, r2, #0, #7
 8002ce2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002ce4:	7a3b      	ldrb	r3, [r7, #8]
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	f362 0306 	bfi	r3, r2, #0, #7
 8002cec:	723b      	strb	r3, [r7, #8]
            break;
 8002cee:	e002      	b.n	8002cf6 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8002cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf4:	e010      	b.n	8002d18 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe f929 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8002d0e:	f06f 0301 	mvn.w	r3, #1
 8002d12:	e001      	b.n	8002d18 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8002d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	003e0f0f 	.word	0x003e0f0f

08002d24 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	71bb      	strb	r3, [r7, #6]
 8002d32:	4613      	mov	r3, r2
 8002d34:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002d3a:	4b92      	ldr	r3, [pc, #584]	; (8002f84 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8002d3c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002d42:	7abb      	ldrb	r3, [r7, #10]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f362 0301 	bfi	r3, r2, #0, #2
 8002d4a:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002d50:	79bb      	ldrb	r3, [r7, #6]
 8002d52:	2b11      	cmp	r3, #17
 8002d54:	f200 80ef 	bhi.w	8002f36 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002da9 	.word	0x08002da9
 8002d64:	08002de7 	.word	0x08002de7
 8002d68:	08002f37 	.word	0x08002f37
 8002d6c:	08002e21 	.word	0x08002e21
 8002d70:	08002e21 	.word	0x08002e21
 8002d74:	08002e21 	.word	0x08002e21
 8002d78:	08002e21 	.word	0x08002e21
 8002d7c:	08002e21 	.word	0x08002e21
 8002d80:	08002e27 	.word	0x08002e27
 8002d84:	08002e6d 	.word	0x08002e6d
 8002d88:	08002eb3 	.word	0x08002eb3
 8002d8c:	08002ef1 	.word	0x08002ef1
 8002d90:	08002ef7 	.word	0x08002ef7
 8002d94:	08002f31 	.word	0x08002f31
 8002d98:	08002f31 	.word	0x08002f31
 8002d9c:	08002e21 	.word	0x08002e21
 8002da0:	08002e21 	.word	0x08002e21
 8002da4:	08002e27 	.word	0x08002e27
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	2206      	movs	r2, #6
 8002db0:	f362 0304 	bfi	r3, r2, #0, #5
 8002db4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f362 0303 	bfi	r3, r2, #0, #4
 8002dbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002dc0:	7b3b      	ldrb	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002dc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002dca:	7a7b      	ldrb	r3, [r7, #9]
 8002dcc:	2207      	movs	r2, #7
 8002dce:	f362 0306 	bfi	r3, r2, #0, #7
 8002dd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	7a3b      	ldrb	r3, [r7, #8]
 8002dde:	f362 0305 	bfi	r3, r2, #0, #6
 8002de2:	723b      	strb	r3, [r7, #8]
            break;
 8002de4:	e0aa      	b.n	8002f3c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002dea:	7bbb      	ldrb	r3, [r7, #14]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f362 0304 	bfi	r3, r2, #0, #5
 8002df2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002df4:	7b7b      	ldrb	r3, [r7, #13]
 8002df6:	f36f 0303 	bfc	r3, #0, #4
 8002dfa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002dfc:	7b3b      	ldrb	r3, [r7, #12]
 8002dfe:	f36f 0303 	bfc	r3, #0, #4
 8002e02:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e04:	7a7b      	ldrb	r3, [r7, #9]
 8002e06:	2203      	movs	r2, #3
 8002e08:	f362 0306 	bfi	r3, r2, #0, #7
 8002e0c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	7a3b      	ldrb	r3, [r7, #8]
 8002e18:	f362 0305 	bfi	r3, r2, #0, #6
 8002e1c:	723b      	strb	r3, [r7, #8]
            break;
 8002e1e:	e08d      	b.n	8002f3c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8002e20:	f04f 33ff 	mov.w	r3, #4294967295
 8002e24:	e0aa      	b.n	8002f7c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8002e26:	2300      	movs	r3, #0
 8002e28:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002e2a:	7bbb      	ldrb	r3, [r7, #14]
 8002e2c:	220e      	movs	r2, #14
 8002e2e:	f362 0304 	bfi	r3, r2, #0, #5
 8002e32:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002e34:	7b7b      	ldrb	r3, [r7, #13]
 8002e36:	2203      	movs	r2, #3
 8002e38:	f362 0303 	bfi	r3, r2, #0, #4
 8002e3c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002e3e:	7b3b      	ldrb	r3, [r7, #12]
 8002e40:	2203      	movs	r2, #3
 8002e42:	f362 0303 	bfi	r3, r2, #0, #4
 8002e46:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002e48:	7a7b      	ldrb	r3, [r7, #9]
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	f362 0306 	bfi	r3, r2, #0, #7
 8002e50:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e58:	b2da      	uxtb	r2, r3
 8002e5a:	7a3b      	ldrb	r3, [r7, #8]
 8002e5c:	f362 0305 	bfi	r3, r2, #0, #6
 8002e60:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002e62:	7abb      	ldrb	r3, [r7, #10]
 8002e64:	f36f 0301 	bfc	r3, #0, #2
 8002e68:	72bb      	strb	r3, [r7, #10]
            break;
 8002e6a:	e067      	b.n	8002f3c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8002e70:	7bbb      	ldrb	r3, [r7, #14]
 8002e72:	2207      	movs	r2, #7
 8002e74:	f362 0304 	bfi	r3, r2, #0, #5
 8002e78:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002e7a:	7b7b      	ldrb	r3, [r7, #13]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f362 0303 	bfi	r3, r2, #0, #4
 8002e82:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002e84:	7b3b      	ldrb	r3, [r7, #12]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f362 0303 	bfi	r3, r2, #0, #4
 8002e8c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 8002e8e:	7a7b      	ldrb	r3, [r7, #9]
 8002e90:	2208      	movs	r2, #8
 8002e92:	f362 0306 	bfi	r3, r2, #0, #7
 8002e96:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	7a3b      	ldrb	r3, [r7, #8]
 8002ea2:	f362 0305 	bfi	r3, r2, #0, #6
 8002ea6:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002ea8:	7abb      	ldrb	r3, [r7, #10]
 8002eaa:	f36f 0301 	bfc	r3, #0, #2
 8002eae:	72bb      	strb	r3, [r7, #10]
            break;
 8002eb0:	e044      	b.n	8002f3c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002eb6:	7bbb      	ldrb	r3, [r7, #14]
 8002eb8:	2206      	movs	r2, #6
 8002eba:	f362 0304 	bfi	r3, r2, #0, #5
 8002ebe:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002ec0:	7b7b      	ldrb	r3, [r7, #13]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f362 0303 	bfi	r3, r2, #0, #4
 8002ec8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002eca:	7b3b      	ldrb	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f362 0303 	bfi	r3, r2, #0, #4
 8002ed2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002ed4:	7a7b      	ldrb	r3, [r7, #9]
 8002ed6:	2207      	movs	r2, #7
 8002ed8:	f362 0306 	bfi	r3, r2, #0, #7
 8002edc:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ee4:	b2da      	uxtb	r2, r3
 8002ee6:	7a3b      	ldrb	r3, [r7, #8]
 8002ee8:	f362 0305 	bfi	r3, r2, #0, #6
 8002eec:	723b      	strb	r3, [r7, #8]
            break;
 8002eee:	e025      	b.n	8002f3c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8002ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ef4:	e042      	b.n	8002f7c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002efa:	7bbb      	ldrb	r3, [r7, #14]
 8002efc:	2202      	movs	r2, #2
 8002efe:	f362 0304 	bfi	r3, r2, #0, #5
 8002f02:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002f04:	7b7b      	ldrb	r3, [r7, #13]
 8002f06:	f36f 0303 	bfc	r3, #0, #4
 8002f0a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002f0c:	7b3b      	ldrb	r3, [r7, #12]
 8002f0e:	f36f 0303 	bfc	r3, #0, #4
 8002f12:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002f14:	7a7b      	ldrb	r3, [r7, #9]
 8002f16:	2203      	movs	r2, #3
 8002f18:	f362 0306 	bfi	r3, r2, #0, #7
 8002f1c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	7a3b      	ldrb	r3, [r7, #8]
 8002f28:	f362 0305 	bfi	r3, r2, #0, #6
 8002f2c:	723b      	strb	r3, [r7, #8]
            break;
 8002f2e:	e005      	b.n	8002f3c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	e022      	b.n	8002f7c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	e01f      	b.n	8002f7c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	2108      	movs	r1, #8
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fe f806 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d002      	beq.n	8002f5a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8002f54:	f06f 0301 	mvn.w	r3, #1
 8002f58:	e010      	b.n	8002f7c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	210c      	movs	r1, #12
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd fff7 	bl	8000f54 <DRV_CANFDSPI_WriteWord>
 8002f66:	4603      	mov	r3, r0
 8002f68:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002f6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d002      	beq.n	8002f78 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8002f72:	f06f 0302 	mvn.w	r3, #2
 8002f76:	e001      	b.n	8002f7c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8002f78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	000e0303 	.word	0x000e0303

08002f88 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
 8002f92:	460b      	mov	r3, r1
 8002f94:	71bb      	strb	r3, [r7, #6]
 8002f96:	4613      	mov	r3, r2
 8002f98:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8002fa2:	f640 6307 	movw	r3, #3591	; 0xe07
 8002fa6:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8002fac:	f107 0308 	add.w	r3, r7, #8
 8002fb0:	1cda      	adds	r2, r3, #3
 8002fb2:	89b9      	ldrh	r1, [r7, #12]
 8002fb4:	79fb      	ldrb	r3, [r7, #7]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd feee 	bl	8000d98 <DRV_CANFDSPI_ReadByte>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fcc:	e020      	b.n	8003010 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8002fce:	79bb      	ldrb	r3, [r7, #6]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	7afb      	ldrb	r3, [r7, #11]
 8002fd8:	f362 0300 	bfi	r3, r2, #0, #1
 8002fdc:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8002fde:	797b      	ldrb	r3, [r7, #5]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	7afb      	ldrb	r3, [r7, #11]
 8002fe8:	f362 0341 	bfi	r3, r2, #1, #1
 8002fec:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8002fee:	7afa      	ldrb	r2, [r7, #11]
 8002ff0:	89b9      	ldrh	r1, [r7, #12]
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd ff11 	bl	8000e1c <DRV_CANFDSPI_WriteByte>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d002      	beq.n	800300c <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8003006:	f06f 0301 	mvn.w	r3, #1
 800300a:	e001      	b.n	8003010 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 800300c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d802      	bhi.n	8003032 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	e02a      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	3b09      	subs	r3, #9
 8003036:	2b06      	cmp	r3, #6
 8003038:	d825      	bhi.n	8003086 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	0800305d 	.word	0x0800305d
 8003044:	08003063 	.word	0x08003063
 8003048:	08003069 	.word	0x08003069
 800304c:	0800306f 	.word	0x0800306f
 8003050:	08003075 	.word	0x08003075
 8003054:	0800307b 	.word	0x0800307b
 8003058:	08003081 	.word	0x08003081
            case CAN_DLC_12:
                dataBytesInObject = 12;
 800305c:	230c      	movs	r3, #12
 800305e:	60fb      	str	r3, [r7, #12]
                break;
 8003060:	e012      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003062:	2310      	movs	r3, #16
 8003064:	60fb      	str	r3, [r7, #12]
                break;
 8003066:	e00f      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8003068:	2314      	movs	r3, #20
 800306a:	60fb      	str	r3, [r7, #12]
                break;
 800306c:	e00c      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800306e:	2318      	movs	r3, #24
 8003070:	60fb      	str	r3, [r7, #12]
                break;
 8003072:	e009      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8003074:	2320      	movs	r3, #32
 8003076:	60fb      	str	r3, [r7, #12]
                break;
 8003078:	e006      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 800307a:	2330      	movs	r3, #48	; 0x30
 800307c:	60fb      	str	r3, [r7, #12]
                break;
 800307e:	e003      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8003080:	2340      	movs	r3, #64	; 0x40
 8003082:	60fb      	str	r3, [r7, #12]
                break;
 8003084:	e000      	b.n	8003088 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8003086:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8003088:	68fb      	ldr	r3, [r7, #12]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a8:	f023 0218 	bic.w	r2, r3, #24
 80030ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030b8:	bf00      	nop
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030e8:	68fb      	ldr	r3, [r7, #12]
}
 80030ea:	bf00      	nop
 80030ec:	3714      	adds	r7, #20
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                              P A C K   E M U L A T O R
***************************************************************************************************************/
void serialOut(char* message){
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	getTime();
 8003100:	f000 f822 	bl	8003148 <getTime>
  sprintf(txBuffer,"%s %s\r\n",time, message);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <serialOut+0x40>)
 8003108:	490c      	ldr	r1, [pc, #48]	; (800313c <serialOut+0x44>)
 800310a:	480d      	ldr	r0, [pc, #52]	; (8003140 <serialOut+0x48>)
 800310c:	f006 f810 	bl	8009130 <siprintf>

	if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8003110:	480b      	ldr	r0, [pc, #44]	; (8003140 <serialOut+0x48>)
 8003112:	f7fd f835 	bl	8000180 <strlen>
 8003116:	4603      	mov	r3, r0
 8003118:	b29a      	uxth	r2, r3
 800311a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800311e:	4908      	ldr	r1, [pc, #32]	; (8003140 <serialOut+0x48>)
 8003120:	4808      	ldr	r0, [pc, #32]	; (8003144 <serialOut+0x4c>)
 8003122:	f005 f979 	bl	8008418 <HAL_UART_Transmit>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <serialOut+0x38>
		Error_Handler();
 800312c:	f000 fbb4 	bl	8003898 <Error_Handler>
	}
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	2000ccdc 	.word	0x2000ccdc
 800313c:	0800a724 	.word	0x0800a724
 8003140:	2000cce8 	.word	0x2000cce8
 8003144:	2000c954 	.word	0x2000c954

08003148 <getTime>:

/***************************************************************************************************************
*     T I M E S T A M P                                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void getTime(void){
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 800314e:	f107 0308 	add.w	r3, r7, #8
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800315e:	2300      	movs	r3, #0
 8003160:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 8003162:	f107 0308 	add.w	r3, r7, #8
 8003166:	2201      	movs	r2, #1
 8003168:	4619      	mov	r1, r3
 800316a:	480e      	ldr	r0, [pc, #56]	; (80031a4 <getTime+0x5c>)
 800316c:	f003 fb16 	bl	800679c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 8003170:	1d3b      	adds	r3, r7, #4
 8003172:	2201      	movs	r2, #1
 8003174:	4619      	mov	r1, r3
 8003176:	480b      	ldr	r0, [pc, #44]	; (80031a4 <getTime+0x5c>)
 8003178:	f003 fc1a 	bl	80069b0 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 800317c:	7abb      	ldrb	r3, [r7, #10]
 800317e:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 8003180:	7a7b      	ldrb	r3, [r7, #9]
 8003182:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 8003184:	7a3b      	ldrb	r3, [r7, #8]
 8003186:	777b      	strb	r3, [r7, #29]
  sprintf(time,"%02x:%02x:%02x",hours,minutes,seconds);
 8003188:	7f7a      	ldrb	r2, [r7, #29]
 800318a:	7fb9      	ldrb	r1, [r7, #30]
 800318c:	7ffb      	ldrb	r3, [r7, #31]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	460b      	mov	r3, r1
 8003192:	4905      	ldr	r1, [pc, #20]	; (80031a8 <getTime+0x60>)
 8003194:	4805      	ldr	r0, [pc, #20]	; (80031ac <getTime+0x64>)
 8003196:	f005 ffcb 	bl	8009130 <siprintf>
}
 800319a:	bf00      	nop
 800319c:	3720      	adds	r7, #32
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	2000c81c 	.word	0x2000c81c
 80031a8:	0800a72c 	.word	0x0800a72c
 80031ac:	2000ccdc 	.word	0x2000ccdc

080031b0 <HAL_TIM_PeriodElapsedCallback>:


/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d108      	bne.n	80031d6 <HAL_TIM_PeriodElapsedCallback+0x26>
    // last contact timer overflow
    etTimerOverflows++;
 80031c4:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	3301      	adds	r3, #1
 80031ca:	4a06      	ldr	r2, [pc, #24]	; (80031e4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80031cc:	6013      	str	r3, [r2, #0]


    HAL_GPIO_TogglePin(LED_RED_GPIO_Port,  LED_RED_Pin);
 80031ce:	2102      	movs	r1, #2
 80031d0:	4805      	ldr	r0, [pc, #20]	; (80031e8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80031d2:	f001 fa29 	bl	8004628 <HAL_GPIO_TogglePin>
  }
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000c908 	.word	0x2000c908
 80031e4:	2000cdb4 	.word	0x2000cdb4
 80031e8:	48000400 	.word	0x48000400

080031ec <HAL_GPIO_EXTI_Callback>:

/***************************************************************************************************************
 *     G P I O     I N T E R R U P T    H A N D L E R   &   C A L L B A C              P A C K   E M U L A T O R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN_INT_Pin){
 80031f6:	88fb      	ldrh	r3, [r7, #6]
 80031f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031fc:	d00e      	beq.n	800321c <HAL_GPIO_EXTI_Callback+0x30>
    // Interrupt
  }
  else if (GPIO_Pin == CAN_INT0_Pin){
 80031fe:	88fb      	ldrh	r3, [r7, #6]
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003204:	d103      	bne.n	800320e <HAL_GPIO_EXTI_Callback+0x22>
    // TX Interrupt
    canTxInterrupt = 1;
 8003206:	4b08      	ldr	r3, [pc, #32]	; (8003228 <HAL_GPIO_EXTI_Callback+0x3c>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
  }
  else if(GPIO_Pin == BUTTON2_Pin){
  }
  else if(GPIO_Pin == BUTTON3_Pin){
  }
}
 800320c:	e006      	b.n	800321c <HAL_GPIO_EXTI_Callback+0x30>
  else if (GPIO_Pin == CAN_INT1_Pin){
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003214:	d102      	bne.n	800321c <HAL_GPIO_EXTI_Callback+0x30>
    canRxInterrupt = 1;
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_GPIO_EXTI_Callback+0x40>)
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	2000cdb1 	.word	0x2000cdb1
 800322c:	2000cdb0 	.word	0x2000cdb0

08003230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003234:	f000 feb6 	bl	8003fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003238:	f000 f81a 	bl	8003270 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800323c:	f000 f88c 	bl	8003358 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003240:	f000 fab8 	bl	80037b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003244:	f000 f918 	bl	8003478 <MX_SPI1_Init>
  MX_SPI2_Init();
 8003248:	f000 f954 	bl	80034f4 <MX_SPI2_Init>
  MX_USB_PCD_Init();
 800324c:	f000 fa8a 	bl	8003764 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8003250:	f000 f8a0 	bl	8003394 <MX_PKA_Init>
  MX_RTC_Init();
 8003254:	f000 f8b2 	bl	80033bc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8003258:	f000 fa38 	bl	80036cc <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800325c:	f000 f988 	bl	8003570 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  //HAL_GPIO_WritePin(LED_GREEN_GPIO_Port,  LED_GREEN_Pin , GPIO_PIN_SET);    // on

  DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 8003260:	2000      	movs	r0, #0
 8003262:	f7fd fd69 	bl	8000d38 <DRV_CANFDSPI_Reset>
  VCU_Initialize();
 8003266:	f7fd f9b5 	bl	80005d4 <VCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    VCU_Tasks();
 800326a:	f7fd f9ed 	bl	8000648 <VCU_Tasks>
 800326e:	e7fc      	b.n	800326a <main+0x3a>

08003270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b09a      	sub	sp, #104	; 0x68
 8003274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003276:	f107 0320 	add.w	r3, r7, #32
 800327a:	2248      	movs	r2, #72	; 0x48
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f005 ff10 	bl	80090a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	611a      	str	r2, [r3, #16]
 8003292:	615a      	str	r2, [r3, #20]
 8003294:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003296:	f001 fb2b 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800329a:	2010      	movs	r0, #16
 800329c:	f7ff fefc 	bl	8003098 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a0:	4b2c      	ldr	r3, [pc, #176]	; (8003354 <SystemClock_Config+0xe4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032a8:	4a2a      	ldr	r2, [pc, #168]	; (8003354 <SystemClock_Config+0xe4>)
 80032aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ae:	6013      	str	r3, [r2, #0]
 80032b0:	4b28      	ldr	r3, [pc, #160]	; (8003354 <SystemClock_Config+0xe4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80032bc:	2327      	movs	r3, #39	; 0x27
 80032be:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032c6:	2301      	movs	r3, #1
 80032c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80032ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80032d0:	2301      	movs	r3, #1
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80032d4:	2340      	movs	r3, #64	; 0x40
 80032d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80032d8:	2300      	movs	r3, #0
 80032da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80032dc:	2360      	movs	r3, #96	; 0x60
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032e0:	2302      	movs	r3, #2
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80032e4:	2301      	movs	r3, #1
 80032e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80032e8:	2300      	movs	r3, #0
 80032ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 80032ec:	2320      	movs	r3, #32
 80032ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80032f6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80032fa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80032fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003300:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003302:	f107 0320 	add.w	r3, r7, #32
 8003306:	4618      	mov	r0, r3
 8003308:	f001 fe86 	bl	8005018 <HAL_RCC_OscConfig>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003312:	f000 fac1 	bl	8003898 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003316:	236f      	movs	r3, #111	; 0x6f
 8003318:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800331a:	2303      	movs	r3, #3
 800331c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003332:	1d3b      	adds	r3, r7, #4
 8003334:	2103      	movs	r1, #3
 8003336:	4618      	mov	r0, r3
 8003338:	f002 f9e2 	bl	8005700 <HAL_RCC_ClockConfig>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8003342:	f000 faa9 	bl	8003898 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8003346:	f002 ff9d 	bl	8006284 <HAL_RCCEx_EnableMSIPLLMode>
}
 800334a:	bf00      	nop
 800334c:	3768      	adds	r7, #104	; 0x68
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	58000400 	.word	0x58000400

08003358 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b094      	sub	sp, #80	; 0x50
 800335c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800335e:	463b      	mov	r3, r7
 8003360:	2250      	movs	r2, #80	; 0x50
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f005 fe9d 	bl	80090a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 800336a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800336e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8003370:	2300      	movs	r3, #0
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8003374:	2310      	movs	r3, #16
 8003376:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003378:	463b      	mov	r3, r7
 800337a:	4618      	mov	r0, r3
 800337c:	f002 fe0c 	bl	8005f98 <HAL_RCCEx_PeriphCLKConfig>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8003386:	f000 fa87 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800338a:	bf00      	nop
 800338c:	3750      	adds	r7, #80	; 0x50
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <MX_PKA_Init+0x20>)
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <MX_PKA_Init+0x24>)
 800339c:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 800339e:	4805      	ldr	r0, [pc, #20]	; (80033b4 <MX_PKA_Init+0x20>)
 80033a0:	f001 fa77 	bl	8004892 <HAL_PKA_Init>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 80033aa:	f000 fa75 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	2000c810 	.word	0x2000c810
 80033b8:	58002000 	.word	0x58002000

080033bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80033c2:	1d3b      	adds	r3, r7, #4
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80033d0:	2300      	movs	r3, #0
 80033d2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <MX_RTC_Init+0xb4>)
 80033d6:	4a27      	ldr	r2, [pc, #156]	; (8003474 <MX_RTC_Init+0xb8>)
 80033d8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80033da:	4b25      	ldr	r3, [pc, #148]	; (8003470 <MX_RTC_Init+0xb4>)
 80033dc:	2200      	movs	r2, #0
 80033de:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80033e0:	4b23      	ldr	r3, [pc, #140]	; (8003470 <MX_RTC_Init+0xb4>)
 80033e2:	227f      	movs	r2, #127	; 0x7f
 80033e4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80033e6:	4b22      	ldr	r3, [pc, #136]	; (8003470 <MX_RTC_Init+0xb4>)
 80033e8:	22ff      	movs	r2, #255	; 0xff
 80033ea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80033ec:	4b20      	ldr	r3, [pc, #128]	; (8003470 <MX_RTC_Init+0xb4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80033f2:	4b1f      	ldr	r3, [pc, #124]	; (8003470 <MX_RTC_Init+0xb4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80033f8:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <MX_RTC_Init+0xb4>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80033fe:	4b1c      	ldr	r3, [pc, #112]	; (8003470 <MX_RTC_Init+0xb4>)
 8003400:	2200      	movs	r2, #0
 8003402:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003404:	481a      	ldr	r0, [pc, #104]	; (8003470 <MX_RTC_Init+0xb4>)
 8003406:	f003 f855 	bl	80064b4 <HAL_RTC_Init>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8003410:	f000 fa42 	bl	8003898 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003414:	2300      	movs	r3, #0
 8003416:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003418:	2300      	movs	r3, #0
 800341a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800341c:	2300      	movs	r3, #0
 800341e:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003424:	2300      	movs	r3, #0
 8003426:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	2201      	movs	r2, #1
 8003430:	4619      	mov	r1, r3
 8003432:	480f      	ldr	r0, [pc, #60]	; (8003470 <MX_RTC_Init+0xb4>)
 8003434:	f003 f8ee 	bl	8006614 <HAL_RTC_SetTime>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <MX_RTC_Init+0x86>
  {
    Error_Handler();
 800343e:	f000 fa2b 	bl	8003898 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003442:	2301      	movs	r3, #1
 8003444:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003446:	2301      	movs	r3, #1
 8003448:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800344a:	2301      	movs	r3, #1
 800344c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800344e:	2300      	movs	r3, #0
 8003450:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003452:	463b      	mov	r3, r7
 8003454:	2201      	movs	r2, #1
 8003456:	4619      	mov	r1, r3
 8003458:	4805      	ldr	r0, [pc, #20]	; (8003470 <MX_RTC_Init+0xb4>)
 800345a:	f003 f9fb 	bl	8006854 <HAL_RTC_SetDate>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <MX_RTC_Init+0xac>
  {
    Error_Handler();
 8003464:	f000 fa18 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	2000c81c 	.word	0x2000c81c
 8003474:	40002800 	.word	0x40002800

08003478 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <MX_SPI1_Init+0x74>)
 800347e:	4a1c      	ldr	r2, [pc, #112]	; (80034f0 <MX_SPI1_Init+0x78>)
 8003480:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <MX_SPI1_Init+0x74>)
 8003484:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003488:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800348a:	4b18      	ldr	r3, [pc, #96]	; (80034ec <MX_SPI1_Init+0x74>)
 800348c:	2200      	movs	r2, #0
 800348e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003490:	4b16      	ldr	r3, [pc, #88]	; (80034ec <MX_SPI1_Init+0x74>)
 8003492:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003496:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003498:	4b14      	ldr	r3, [pc, #80]	; (80034ec <MX_SPI1_Init+0x74>)
 800349a:	2200      	movs	r2, #0
 800349c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800349e:	4b13      	ldr	r3, [pc, #76]	; (80034ec <MX_SPI1_Init+0x74>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <MX_SPI1_Init+0x74>)
 80034a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80034ac:	4b0f      	ldr	r3, [pc, #60]	; (80034ec <MX_SPI1_Init+0x74>)
 80034ae:	2208      	movs	r2, #8
 80034b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034b2:	4b0e      	ldr	r3, [pc, #56]	; (80034ec <MX_SPI1_Init+0x74>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80034b8:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <MX_SPI1_Init+0x74>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034be:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <MX_SPI1_Init+0x74>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80034c4:	4b09      	ldr	r3, [pc, #36]	; (80034ec <MX_SPI1_Init+0x74>)
 80034c6:	2207      	movs	r2, #7
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <MX_SPI1_Init+0x74>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <MX_SPI1_Init+0x74>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80034d6:	4805      	ldr	r0, [pc, #20]	; (80034ec <MX_SPI1_Init+0x74>)
 80034d8:	f003 fb43 	bl	8006b62 <HAL_SPI_Init>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d001      	beq.n	80034e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80034e2:	f000 f9d9 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	2000c840 	.word	0x2000c840
 80034f0:	40013000 	.word	0x40013000

080034f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80034f8:	4b1b      	ldr	r3, [pc, #108]	; (8003568 <MX_SPI2_Init+0x74>)
 80034fa:	4a1c      	ldr	r2, [pc, #112]	; (800356c <MX_SPI2_Init+0x78>)
 80034fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <MX_SPI2_Init+0x74>)
 8003500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003504:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <MX_SPI2_Init+0x74>)
 8003508:	2200      	movs	r2, #0
 800350a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800350c:	4b16      	ldr	r3, [pc, #88]	; (8003568 <MX_SPI2_Init+0x74>)
 800350e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003512:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003514:	4b14      	ldr	r3, [pc, #80]	; (8003568 <MX_SPI2_Init+0x74>)
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800351a:	4b13      	ldr	r3, [pc, #76]	; (8003568 <MX_SPI2_Init+0x74>)
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003520:	4b11      	ldr	r3, [pc, #68]	; (8003568 <MX_SPI2_Init+0x74>)
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003528:	4b0f      	ldr	r3, [pc, #60]	; (8003568 <MX_SPI2_Init+0x74>)
 800352a:	2200      	movs	r2, #0
 800352c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <MX_SPI2_Init+0x74>)
 8003530:	2200      	movs	r2, #0
 8003532:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003534:	4b0c      	ldr	r3, [pc, #48]	; (8003568 <MX_SPI2_Init+0x74>)
 8003536:	2200      	movs	r2, #0
 8003538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <MX_SPI2_Init+0x74>)
 800353c:	2200      	movs	r2, #0
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <MX_SPI2_Init+0x74>)
 8003542:	2207      	movs	r2, #7
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <MX_SPI2_Init+0x74>)
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800354c:	4b06      	ldr	r3, [pc, #24]	; (8003568 <MX_SPI2_Init+0x74>)
 800354e:	2208      	movs	r2, #8
 8003550:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003552:	4805      	ldr	r0, [pc, #20]	; (8003568 <MX_SPI2_Init+0x74>)
 8003554:	f003 fb05 	bl	8006b62 <HAL_SPI_Init>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800355e:	f000 f99b 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003562:	bf00      	nop
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	2000c8a4 	.word	0x2000c8a4
 800356c:	40003800 	.word	0x40003800

08003570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b09c      	sub	sp, #112	; 0x70
 8003574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003576:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	605a      	str	r2, [r3, #4]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003584:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003590:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	605a      	str	r2, [r3, #4]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	60da      	str	r2, [r3, #12]
 800359e:	611a      	str	r2, [r3, #16]
 80035a0:	615a      	str	r2, [r3, #20]
 80035a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	2234      	movs	r2, #52	; 0x34
 80035a8:	2100      	movs	r1, #0
 80035aa:	4618      	mov	r0, r3
 80035ac:	f005 fd7a 	bl	80090a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80035b0:	4b44      	ldr	r3, [pc, #272]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035b2:	4a45      	ldr	r2, [pc, #276]	; (80036c8 <MX_TIM1_Init+0x158>)
 80035b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80035b6:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035b8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80035bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035be:	4b41      	ldr	r3, [pc, #260]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80035c4:	4b3f      	ldr	r3, [pc, #252]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035cc:	4b3d      	ldr	r3, [pc, #244]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035d2:	4b3c      	ldr	r3, [pc, #240]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035d8:	4b3a      	ldr	r3, [pc, #232]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035da:	2200      	movs	r2, #0
 80035dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035de:	4839      	ldr	r0, [pc, #228]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035e0:	f003 feda 	bl	8007398 <HAL_TIM_Base_Init>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80035ea:	f000 f955 	bl	8003898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80035f8:	4619      	mov	r1, r3
 80035fa:	4832      	ldr	r0, [pc, #200]	; (80036c4 <MX_TIM1_Init+0x154>)
 80035fc:	f004 f91e 	bl	800783c <HAL_TIM_ConfigClockSource>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8003606:	f000 f947 	bl	8003898 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800360a:	482e      	ldr	r0, [pc, #184]	; (80036c4 <MX_TIM1_Init+0x154>)
 800360c:	f003 ff1b 	bl	8007446 <HAL_TIM_OC_Init>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8003616:	f000 f93f 	bl	8003898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003622:	2300      	movs	r3, #0
 8003624:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003626:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800362a:	4619      	mov	r1, r3
 800362c:	4825      	ldr	r0, [pc, #148]	; (80036c4 <MX_TIM1_Init+0x154>)
 800362e:	f004 fd75 	bl	800811c <HAL_TIMEx_MasterConfigSynchronization>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003638:	f000 f92e 	bl	8003898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800363c:	2300      	movs	r3, #0
 800363e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003640:	2300      	movs	r3, #0
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003644:	2300      	movs	r3, #0
 8003646:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003648:	2300      	movs	r3, #0
 800364a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003654:	2300      	movs	r3, #0
 8003656:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003658:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800365c:	2200      	movs	r2, #0
 800365e:	4619      	mov	r1, r3
 8003660:	4818      	ldr	r0, [pc, #96]	; (80036c4 <MX_TIM1_Init+0x154>)
 8003662:	f004 f871 	bl	8007748 <HAL_TIM_OC_ConfigChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800366c:	f000 f914 	bl	8003898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003670:	2300      	movs	r3, #0
 8003672:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003688:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800368e:	2300      	movs	r3, #0
 8003690:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003692:	2300      	movs	r3, #0
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800369c:	2300      	movs	r3, #0
 800369e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80036a0:	2300      	movs	r3, #0
 80036a2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80036a8:	1d3b      	adds	r3, r7, #4
 80036aa:	4619      	mov	r1, r3
 80036ac:	4805      	ldr	r0, [pc, #20]	; (80036c4 <MX_TIM1_Init+0x154>)
 80036ae:	f004 fd95 	bl	80081dc <HAL_TIMEx_ConfigBreakDeadTime>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80036b8:	f000 f8ee 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036bc:	bf00      	nop
 80036be:	3770      	adds	r7, #112	; 0x70
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	2000c908 	.word	0x2000c908
 80036c8:	40012c00 	.word	0x40012c00

080036cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036d0:	4b22      	ldr	r3, [pc, #136]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036d2:	4a23      	ldr	r2, [pc, #140]	; (8003760 <MX_USART1_UART_Init+0x94>)
 80036d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036d6:	4b21      	ldr	r3, [pc, #132]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036ea:	4b1c      	ldr	r3, [pc, #112]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036f2:	220c      	movs	r2, #12
 80036f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036f6:	4b19      	ldr	r3, [pc, #100]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036fc:	4b17      	ldr	r3, [pc, #92]	; (800375c <MX_USART1_UART_Init+0x90>)
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003702:	4b16      	ldr	r3, [pc, #88]	; (800375c <MX_USART1_UART_Init+0x90>)
 8003704:	2200      	movs	r2, #0
 8003706:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003708:	4b14      	ldr	r3, [pc, #80]	; (800375c <MX_USART1_UART_Init+0x90>)
 800370a:	2200      	movs	r2, #0
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <MX_USART1_UART_Init+0x90>)
 8003710:	2200      	movs	r2, #0
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003714:	4811      	ldr	r0, [pc, #68]	; (800375c <MX_USART1_UART_Init+0x90>)
 8003716:	f004 fe2f 	bl	8008378 <HAL_UART_Init>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003720:	f000 f8ba 	bl	8003898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003724:	2100      	movs	r1, #0
 8003726:	480d      	ldr	r0, [pc, #52]	; (800375c <MX_USART1_UART_Init+0x90>)
 8003728:	f005 fb7e 	bl	8008e28 <HAL_UARTEx_SetTxFifoThreshold>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003732:	f000 f8b1 	bl	8003898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003736:	2100      	movs	r1, #0
 8003738:	4808      	ldr	r0, [pc, #32]	; (800375c <MX_USART1_UART_Init+0x90>)
 800373a:	f005 fbb3 	bl	8008ea4 <HAL_UARTEx_SetRxFifoThreshold>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003744:	f000 f8a8 	bl	8003898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003748:	4804      	ldr	r0, [pc, #16]	; (800375c <MX_USART1_UART_Init+0x90>)
 800374a:	f005 fb34 	bl	8008db6 <HAL_UARTEx_DisableFifoMode>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003754:	f000 f8a0 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}
 800375c:	2000c954 	.word	0x2000c954
 8003760:	40013800 	.word	0x40013800

08003764 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <MX_USB_PCD_Init+0x48>)
 800376a:	4a11      	ldr	r2, [pc, #68]	; (80037b0 <MX_USB_PCD_Init+0x4c>)
 800376c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800376e:	4b0f      	ldr	r3, [pc, #60]	; (80037ac <MX_USB_PCD_Init+0x48>)
 8003770:	2208      	movs	r2, #8
 8003772:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <MX_USB_PCD_Init+0x48>)
 8003776:	2202      	movs	r2, #2
 8003778:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_USB_PCD_Init+0x48>)
 800377c:	2202      	movs	r2, #2
 800377e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <MX_USB_PCD_Init+0x48>)
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_USB_PCD_Init+0x48>)
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <MX_USB_PCD_Init+0x48>)
 800378e:	2200      	movs	r2, #0
 8003790:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <MX_USB_PCD_Init+0x48>)
 8003794:	2200      	movs	r2, #0
 8003796:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <MX_USB_PCD_Init+0x48>)
 800379a:	f000 ff77 	bl	800468c <HAL_PCD_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80037a4:	f000 f878 	bl	8003898 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	2000c9e8 	.word	0x2000c9e8
 80037b0:	40006800 	.word	0x40006800

080037b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c8:	2004      	movs	r0, #4
 80037ca:	f7ff fc7b 	bl	80030c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ce:	2001      	movs	r0, #1
 80037d0:	f7ff fc78 	bl	80030c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d4:	2002      	movs	r0, #2
 80037d6:	f7ff fc75 	bl	80030c4 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037da:	2008      	movs	r0, #8
 80037dc:	f7ff fc72 	bl	80030c4 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN_CS_Pin, GPIO_PIN_RESET);
 80037e0:	2200      	movs	r2, #0
 80037e2:	2129      	movs	r1, #41	; 0x29
 80037e4:	4829      	ldr	r0, [pc, #164]	; (800388c <MX_GPIO_Init+0xd8>)
 80037e6:	f000 ff07 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80037ea:	2200      	movs	r2, #0
 80037ec:	2123      	movs	r1, #35	; 0x23
 80037ee:	4828      	ldr	r0, [pc, #160]	; (8003890 <MX_GPIO_Init+0xdc>)
 80037f0:	f000 ff02 	bl	80045f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN_CS_Pin;
 80037f4:	2329      	movs	r3, #41	; 0x29
 80037f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f8:	2301      	movs	r3, #1
 80037fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003800:	2300      	movs	r3, #0
 8003802:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003804:	1d3b      	adds	r3, r7, #4
 8003806:	4619      	mov	r1, r3
 8003808:	4820      	ldr	r0, [pc, #128]	; (800388c <MX_GPIO_Init+0xd8>)
 800380a:	f000 fd85 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin;
 800380e:	2310      	movs	r3, #16
 8003810:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003816:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003818:	2301      	movs	r3, #1
 800381a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 800381c:	1d3b      	adds	r3, r7, #4
 800381e:	4619      	mov	r1, r3
 8003820:	481a      	ldr	r0, [pc, #104]	; (800388c <MX_GPIO_Init+0xd8>)
 8003822:	f000 fd79 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8003826:	2323      	movs	r3, #35	; 0x23
 8003828:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382a:	2301      	movs	r3, #1
 800382c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382e:	2300      	movs	r3, #0
 8003830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003832:	2300      	movs	r3, #0
 8003834:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	4619      	mov	r1, r3
 800383a:	4815      	ldr	r0, [pc, #84]	; (8003890 <MX_GPIO_Init+0xdc>)
 800383c:	f000 fd6c 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_INT_Pin CAN_INT0_Pin CAN_INT1_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin|CAN_INT0_Pin|CAN_INT1_Pin;
 8003840:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003844:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003846:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800384a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384c:	2301      	movs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	1d3b      	adds	r3, r7, #4
 8003852:	4619      	mov	r1, r3
 8003854:	480e      	ldr	r0, [pc, #56]	; (8003890 <MX_GPIO_Init+0xdc>)
 8003856:	f000 fd5f 	bl	8004318 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 800385a:	2303      	movs	r3, #3
 800385c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800385e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003862:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003864:	2301      	movs	r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4809      	ldr	r0, [pc, #36]	; (8003894 <MX_GPIO_Init+0xe0>)
 800386e:	f000 fd53 	bl	8004318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	2100      	movs	r1, #0
 8003876:	2028      	movs	r0, #40	; 0x28
 8003878:	f000 fd19 	bl	80042ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800387c:	2028      	movs	r0, #40	; 0x28
 800387e:	f000 fd30 	bl	80042e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003882:	bf00      	nop
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	48000800 	.word	0x48000800
 8003890:	48000400 	.word	0x48000400
 8003894:	48000c00 	.word	0x48000c00

08003898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800389c:	b672      	cpsid	i
}
 800389e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038a0:	e7fe      	b.n	80038a0 <Error_Handler+0x8>

080038a2 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80038a2:	b480      	push	{r7}
 80038a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80038ba:	bf00      	nop
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <LL_AHB2_GRP1_EnableClock>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80038cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4313      	orrs	r3, r2
 80038da:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80038e8:	68fb      	ldr	r3, [r7, #12]
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b085      	sub	sp, #20
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80038fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003904:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4313      	orrs	r3, r2
 800390c:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800390e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003912:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4013      	ands	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800391a:	68fb      	ldr	r3, [r7, #12]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003936:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4313      	orrs	r3, r2
 800393e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003940:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003944:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4013      	ands	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800394c:	68fb      	ldr	r3, [r7, #12]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800395a:	b480      	push	{r7}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003968:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4313      	orrs	r3, r2
 8003970:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003976:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4013      	ands	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800397e:	68fb      	ldr	r3, [r7, #12]
}
 8003980:	bf00      	nop
 8003982:	3714      	adds	r7, #20
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <HAL_PKA_MspInit+0x24>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d103      	bne.n	80039b6 <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 80039ae:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80039b2:	f7ff ffa0 	bl	80038f6 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	58002000 	.word	0x58002000

080039c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b096      	sub	sp, #88	; 0x58
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039cc:	f107 0308 	add.w	r3, r7, #8
 80039d0:	2250      	movs	r2, #80	; 0x50
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f005 fb65 	bl	80090a4 <memset>
  if(hrtc->Instance==RTC)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a0e      	ldr	r2, [pc, #56]	; (8003a18 <HAL_RTC_MspInit+0x54>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d115      	bne.n	8003a10 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80039e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80039ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039ee:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039f0:	f107 0308 	add.w	r3, r7, #8
 80039f4:	4618      	mov	r0, r3
 80039f6:	f002 facf 	bl	8005f98 <HAL_RCCEx_PeriphCLKConfig>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003a00:	f7ff ff4a 	bl	8003898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a04:	f7ff ff4d 	bl	80038a2 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003a08:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003a0c:	f7ff ff8c 	bl	8003928 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a10:	bf00      	nop
 8003a12:	3758      	adds	r7, #88	; 0x58
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40002800 	.word	0x40002800

08003a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b088      	sub	sp, #32
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a24:	f107 030c 	add.w	r3, r7, #12
 8003a28:	2200      	movs	r2, #0
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
 8003a30:	60da      	str	r2, [r3, #12]
 8003a32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a30      	ldr	r2, [pc, #192]	; (8003afc <HAL_SPI_MspInit+0xe0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d118      	bne.n	8003a70 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a3e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003a42:	f7ff ff8a 	bl	800395a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a46:	2001      	movs	r0, #1
 8003a48:	f7ff ff3c 	bl	80038c4 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8003a4c:	23c2      	movs	r3, #194	; 0xc2
 8003a4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a50:	2302      	movs	r3, #2
 8003a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a5c:	2305      	movs	r3, #5
 8003a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	4619      	mov	r1, r3
 8003a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a6a:	f000 fc55 	bl	8004318 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003a6e:	e040      	b.n	8003af2 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <HAL_SPI_MspInit+0xe4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d13b      	bne.n	8003af2 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003a7e:	f7ff ff53 	bl	8003928 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a82:	2004      	movs	r0, #4
 8003a84:	f7ff ff1e 	bl	80038c4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f7ff ff1b 	bl	80038c4 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a92:	2302      	movs	r3, #2
 8003a94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4816      	ldr	r0, [pc, #88]	; (8003b04 <HAL_SPI_MspInit+0xe8>)
 8003aaa:	f000 fc35 	bl	8004318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003aae:	2304      	movs	r3, #4
 8003ab0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003abe:	2305      	movs	r3, #5
 8003ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	480e      	ldr	r0, [pc, #56]	; (8003b04 <HAL_SPI_MspInit+0xe8>)
 8003aca:	f000 fc25 	bl	8004318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ace:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003ae0:	2305      	movs	r3, #5
 8003ae2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae4:	f107 030c 	add.w	r3, r7, #12
 8003ae8:	4619      	mov	r1, r3
 8003aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aee:	f000 fc13 	bl	8004318 <HAL_GPIO_Init>
}
 8003af2:	bf00      	nop
 8003af4:	3720      	adds	r7, #32
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40013000 	.word	0x40013000
 8003b00:	40003800 	.word	0x40003800
 8003b04:	48000800 	.word	0x48000800

08003b08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <HAL_TIM_Base_MspInit+0x34>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d10b      	bne.n	8003b32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b1a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b1e:	f7ff ff1c 	bl	800395a <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003b22:	2200      	movs	r2, #0
 8003b24:	2100      	movs	r1, #0
 8003b26:	2019      	movs	r0, #25
 8003b28:	f000 fbc1 	bl	80042ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b2c:	2019      	movs	r0, #25
 8003b2e:	f000 fbd8 	bl	80042e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b32:	bf00      	nop
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40012c00 	.word	0x40012c00

08003b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b09c      	sub	sp, #112	; 0x70
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
 8003b52:	609a      	str	r2, [r3, #8]
 8003b54:	60da      	str	r2, [r3, #12]
 8003b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	2250      	movs	r2, #80	; 0x50
 8003b5e:	2100      	movs	r1, #0
 8003b60:	4618      	mov	r0, r3
 8003b62:	f005 fa9f 	bl	80090a4 <memset>
  if(huart->Instance==USART1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_UART_MspInit+0x84>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d124      	bne.n	8003bba <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b70:	2301      	movs	r3, #1
 8003b72:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8003b74:	2302      	movs	r3, #2
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b78:	f107 030c 	add.w	r3, r7, #12
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f002 fa0b 	bl	8005f98 <HAL_RCCEx_PeriphCLKConfig>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d001      	beq.n	8003b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003b88:	f7ff fe86 	bl	8003898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b90:	f7ff fee3 	bl	800395a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b94:	2002      	movs	r0, #2
 8003b96:	f7ff fe95 	bl	80038c4 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b9a:	23c0      	movs	r3, #192	; 0xc0
 8003b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003baa:	2307      	movs	r3, #7
 8003bac:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bae:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4804      	ldr	r0, [pc, #16]	; (8003bc8 <HAL_UART_MspInit+0x88>)
 8003bb6:	f000 fbaf 	bl	8004318 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bba:	bf00      	nop
 8003bbc:	3770      	adds	r7, #112	; 0x70
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40013800 	.word	0x40013800
 8003bc8:	48000400 	.word	0x48000400

08003bcc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b09c      	sub	sp, #112	; 0x70
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	605a      	str	r2, [r3, #4]
 8003bde:	609a      	str	r2, [r3, #8]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	2250      	movs	r2, #80	; 0x50
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f005 fa59 	bl	80090a4 <memset>
  if(hpcd->Instance==USB)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1f      	ldr	r2, [pc, #124]	; (8003c74 <HAL_PCD_MspInit+0xa8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d136      	bne.n	8003c6a <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c00:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8003c02:	2318      	movs	r3, #24
 8003c04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8003c06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c0a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003c0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c10:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8003c12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003c16:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c1c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003c1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003c22:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c24:	f107 030c 	add.w	r3, r7, #12
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f002 f9b5 	bl	8005f98 <HAL_RCCEx_PeriphCLKConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8003c34:	f7ff fe30 	bl	8003898 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f7ff fe43 	bl	80038c4 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003c42:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003c50:	230a      	movs	r3, #10
 8003c52:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5e:	f000 fb5b 	bl	8004318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003c62:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003c66:	f7ff fe5f 	bl	8003928 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003c6a:	bf00      	nop
 8003c6c:	3770      	adds	r7, #112	; 0x70
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40006800 	.word	0x40006800

08003c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c7c:	e7fe      	b.n	8003c7c <NMI_Handler+0x4>

08003c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c82:	e7fe      	b.n	8003c82 <HardFault_Handler+0x4>

08003c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c88:	e7fe      	b.n	8003c88 <MemManage_Handler+0x4>

08003c8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c8e:	e7fe      	b.n	8003c8e <BusFault_Handler+0x4>

08003c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c94:	e7fe      	b.n	8003c94 <UsageFault_Handler+0x4>

08003c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c96:	b480      	push	{r7}
 8003c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr

08003cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003cb2:	b480      	push	{r7}
 8003cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cc4:	f000 f9c8 	bl	8004058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cc8:	bf00      	nop
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003cd2:	f003 fc19 	bl	8007508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000c908 	.word	0x2000c908

08003ce0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8003ce4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003ce8:	f000 fcb8 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT0_Pin);
 8003cec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cf0:	f000 fcb4 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT1_Pin);
 8003cf4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003cf8:	f000 fcb0 	bl	800465c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003cfc:	bf00      	nop
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return 1;
 8003d04:	2301      	movs	r3, #1
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <_kill>:

int _kill(int pid, int sig)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003d1a:	f005 f98b 	bl	8009034 <__errno>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2216      	movs	r2, #22
 8003d22:	601a      	str	r2, [r3, #0]
  return -1;
 8003d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <_exit>:

void _exit (int status)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ffe7 	bl	8003d10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003d42:	e7fe      	b.n	8003d42 <_exit+0x12>

08003d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e00a      	b.n	8003d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003d56:	f3af 8000 	nop.w
 8003d5a:	4601      	mov	r1, r0
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	60ba      	str	r2, [r7, #8]
 8003d62:	b2ca      	uxtb	r2, r1
 8003d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	dbf0      	blt.n	8003d56 <_read+0x12>
  }

  return len;
 8003d74:	687b      	ldr	r3, [r7, #4]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e009      	b.n	8003da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	60ba      	str	r2, [r7, #8]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	3301      	adds	r3, #1
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	dbf1      	blt.n	8003d90 <_write+0x12>
  }
  return len;
 8003dac:	687b      	ldr	r3, [r7, #4]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <_close>:

int _close(int file)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dde:	605a      	str	r2, [r3, #4]
  return 0;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_isatty>:

int _isatty(int file)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003df6:	2301      	movs	r3, #1
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3714      	adds	r7, #20
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <_sbrk+0x5c>)
 8003e2a:	4b15      	ldr	r3, [pc, #84]	; (8003e80 <_sbrk+0x60>)
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <_sbrk+0x64>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d102      	bne.n	8003e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <_sbrk+0x64>)
 8003e3e:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <_sbrk+0x68>)
 8003e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e42:	4b10      	ldr	r3, [pc, #64]	; (8003e84 <_sbrk+0x64>)
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4413      	add	r3, r2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d207      	bcs.n	8003e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e50:	f005 f8f0 	bl	8009034 <__errno>
 8003e54:	4603      	mov	r3, r0
 8003e56:	220c      	movs	r2, #12
 8003e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	e009      	b.n	8003e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e60:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <_sbrk+0x64>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e66:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <_sbrk+0x64>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <_sbrk+0x64>)
 8003e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e72:	68fb      	ldr	r3, [r7, #12]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20030000 	.word	0x20030000
 8003e80:	00000400 	.word	0x00000400
 8003e84:	2000cdb8 	.word	0x2000cdb8
 8003e88:	2000cdd0 	.word	0x2000cdd0

08003e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003e90:	4b24      	ldr	r3, [pc, #144]	; (8003f24 <SystemInit+0x98>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e96:	4a23      	ldr	r2, [pc, #140]	; (8003f24 <SystemInit+0x98>)
 8003e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003eb8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <SystemInit+0x9c>)
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ed2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ed6:	f023 0305 	bic.w	r3, r3, #5
 8003eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef6:	4a0d      	ldr	r2, [pc, #52]	; (8003f2c <SystemInit+0xa0>)
 8003ef8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <SystemInit+0xa0>)
 8003f00:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f16:	2200      	movs	r2, #0
 8003f18:	619a      	str	r2, [r3, #24]
}
 8003f1a:	bf00      	nop
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	e000ed00 	.word	0xe000ed00
 8003f28:	faf6fefb 	.word	0xfaf6fefb
 8003f2c:	22041000 	.word	0x22041000

08003f30 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003f30:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f32:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f34:	3304      	adds	r3, #4

08003f36 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f36:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f38:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003f3a:	d3f9      	bcc.n	8003f30 <CopyDataInit>
  bx lr
 8003f3c:	4770      	bx	lr

08003f3e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003f3e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003f40:	3004      	adds	r0, #4

08003f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003f42:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003f44:	d3fb      	bcc.n	8003f3e <FillZerobss>
  bx lr
 8003f46:	4770      	bx	lr

08003f48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003f48:	480c      	ldr	r0, [pc, #48]	; (8003f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003f4a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f4c:	f7ff ff9e 	bl	8003e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003f50:	480b      	ldr	r0, [pc, #44]	; (8003f80 <LoopForever+0x6>)
 8003f52:	490c      	ldr	r1, [pc, #48]	; (8003f84 <LoopForever+0xa>)
 8003f54:	4a0c      	ldr	r2, [pc, #48]	; (8003f88 <LoopForever+0xe>)
 8003f56:	2300      	movs	r3, #0
 8003f58:	f7ff ffed 	bl	8003f36 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003f5c:	480b      	ldr	r0, [pc, #44]	; (8003f8c <LoopForever+0x12>)
 8003f5e:	490c      	ldr	r1, [pc, #48]	; (8003f90 <LoopForever+0x16>)
 8003f60:	4a0c      	ldr	r2, [pc, #48]	; (8003f94 <LoopForever+0x1a>)
 8003f62:	2300      	movs	r3, #0
 8003f64:	f7ff ffe7 	bl	8003f36 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003f68:	480b      	ldr	r0, [pc, #44]	; (8003f98 <LoopForever+0x1e>)
 8003f6a:	490c      	ldr	r1, [pc, #48]	; (8003f9c <LoopForever+0x22>)
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f7ff ffe8 	bl	8003f42 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003f72:	f005 f865 	bl	8009040 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003f76:	f7ff f95b 	bl	8003230 <main>

08003f7a <LoopForever>:

LoopForever:
  b LoopForever
 8003f7a:	e7fe      	b.n	8003f7a <LoopForever>
  ldr   r0, =_estack
 8003f7c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003f80:	20000008 	.word	0x20000008
 8003f84:	20000078 	.word	0x20000078
 8003f88:	0800a988 	.word	0x0800a988
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003f8c:	20030000 	.word	0x20030000
 8003f90:	20030000 	.word	0x20030000
 8003f94:	0800a9f8 	.word	0x0800a9f8
  INIT_BSS _sbss, _ebss
 8003f98:	20000078 	.word	0x20000078
 8003f9c:	2000cdd0 	.word	0x2000cdd0

08003fa0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003fa0:	e7fe      	b.n	8003fa0 <ADC1_IRQHandler>
	...

08003fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <HAL_Init+0x3c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a0b      	ldr	r2, [pc, #44]	; (8003fe0 <HAL_Init+0x3c>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fba:	2003      	movs	r0, #3
 8003fbc:	f000 f96c 	bl	8004298 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fc0:	200f      	movs	r0, #15
 8003fc2:	f000 f80f 	bl	8003fe4 <HAL_InitTick>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	71fb      	strb	r3, [r7, #7]
 8003fd0:	e001      	b.n	8003fd6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fd2:	f7ff fcdb 	bl	800398c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fd6:	79fb      	ldrb	r3, [r7, #7]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	58004000 	.word	0x58004000

08003fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_InitTick+0x6c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d024      	beq.n	8004042 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003ff8:	f001 fd2e 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b14      	ldr	r3, [pc, #80]	; (8004050 <HAL_InitTick+0x6c>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	4619      	mov	r1, r3
 8004004:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004008:	fbb3 f3f1 	udiv	r3, r3, r1
 800400c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f974 	bl	80042fe <HAL_SYSTICK_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10f      	bne.n	800403c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b0f      	cmp	r3, #15
 8004020:	d809      	bhi.n	8004036 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004022:	2200      	movs	r2, #0
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	f04f 30ff 	mov.w	r0, #4294967295
 800402a:	f000 f940 	bl	80042ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <HAL_InitTick+0x70>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e007      	b.n	8004046 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	73fb      	strb	r3, [r7, #15]
 800403a:	e004      	b.n	8004046 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
 8004040:	e001      	b.n	8004046 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004046:	7bfb      	ldrb	r3, [r7, #15]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20000010 	.word	0x20000010
 8004054:	2000000c 	.word	0x2000000c

08004058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800405c:	4b06      	ldr	r3, [pc, #24]	; (8004078 <HAL_IncTick+0x20>)
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	4b06      	ldr	r3, [pc, #24]	; (800407c <HAL_IncTick+0x24>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4413      	add	r3, r2
 8004068:	4a04      	ldr	r2, [pc, #16]	; (800407c <HAL_IncTick+0x24>)
 800406a:	6013      	str	r3, [r2, #0]
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000010 	.word	0x20000010
 800407c:	2000cdbc 	.word	0x2000cdbc

08004080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return uwTick;
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_GetTick+0x14>)
 8004086:	681b      	ldr	r3, [r3, #0]
}
 8004088:	4618      	mov	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	2000cdbc 	.word	0x2000cdbc

08004098 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800409c:	4b03      	ldr	r3, [pc, #12]	; (80040ac <HAL_GetTickPrio+0x14>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	2000000c 	.word	0x2000000c

080040b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b8:	f7ff ffe2 	bl	8004080 <HAL_GetTick>
 80040bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d005      	beq.n	80040d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_Delay+0x44>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040d6:	bf00      	nop
 80040d8:	f7ff ffd2 	bl	8004080 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d8f7      	bhi.n	80040d8 <HAL_Delay+0x28>
  {
  }
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	20000010 	.word	0x20000010

080040f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <__NVIC_SetPriorityGrouping+0x44>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004114:	4013      	ands	r3, r2
 8004116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800412a:	4a04      	ldr	r2, [pc, #16]	; (800413c <__NVIC_SetPriorityGrouping+0x44>)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	60d3      	str	r3, [r2, #12]
}
 8004130:	bf00      	nop
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <__NVIC_GetPriorityGrouping+0x18>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	0a1b      	lsrs	r3, r3, #8
 800414a:	f003 0307 	and.w	r3, r3, #7
}
 800414e:	4618      	mov	r0, r3
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr
 8004158:	e000ed00 	.word	0xe000ed00

0800415c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	2b00      	cmp	r3, #0
 800416c:	db0b      	blt.n	8004186 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	f003 021f 	and.w	r2, r3, #31
 8004174:	4907      	ldr	r1, [pc, #28]	; (8004194 <__NVIC_EnableIRQ+0x38>)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	2001      	movs	r0, #1
 800417e:	fa00 f202 	lsl.w	r2, r0, r2
 8004182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004186:	bf00      	nop
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	e000e100 	.word	0xe000e100

08004198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	6039      	str	r1, [r7, #0]
 80041a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	db0a      	blt.n	80041c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	490c      	ldr	r1, [pc, #48]	; (80041e4 <__NVIC_SetPriority+0x4c>)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	0112      	lsls	r2, r2, #4
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	440b      	add	r3, r1
 80041bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041c0:	e00a      	b.n	80041d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4908      	ldr	r1, [pc, #32]	; (80041e8 <__NVIC_SetPriority+0x50>)
 80041c8:	79fb      	ldrb	r3, [r7, #7]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	3b04      	subs	r3, #4
 80041d0:	0112      	lsls	r2, r2, #4
 80041d2:	b2d2      	uxtb	r2, r2
 80041d4:	440b      	add	r3, r1
 80041d6:	761a      	strb	r2, [r3, #24]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	e000e100 	.word	0xe000e100
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	; 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f1c3 0307 	rsb	r3, r3, #7
 8004206:	2b04      	cmp	r3, #4
 8004208:	bf28      	it	cs
 800420a:	2304      	movcs	r3, #4
 800420c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	3304      	adds	r3, #4
 8004212:	2b06      	cmp	r3, #6
 8004214:	d902      	bls.n	800421c <NVIC_EncodePriority+0x30>
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3b03      	subs	r3, #3
 800421a:	e000      	b.n	800421e <NVIC_EncodePriority+0x32>
 800421c:	2300      	movs	r3, #0
 800421e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43da      	mvns	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	401a      	ands	r2, r3
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004234:	f04f 31ff 	mov.w	r1, #4294967295
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	fa01 f303 	lsl.w	r3, r1, r3
 800423e:	43d9      	mvns	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004244:	4313      	orrs	r3, r2
         );
}
 8004246:	4618      	mov	r0, r3
 8004248:	3724      	adds	r7, #36	; 0x24
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3b01      	subs	r3, #1
 8004260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004264:	d301      	bcc.n	800426a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004266:	2301      	movs	r3, #1
 8004268:	e00f      	b.n	800428a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800426a:	4a0a      	ldr	r2, [pc, #40]	; (8004294 <SysTick_Config+0x40>)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3b01      	subs	r3, #1
 8004270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004272:	210f      	movs	r1, #15
 8004274:	f04f 30ff 	mov.w	r0, #4294967295
 8004278:	f7ff ff8e 	bl	8004198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <SysTick_Config+0x40>)
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004282:	4b04      	ldr	r3, [pc, #16]	; (8004294 <SysTick_Config+0x40>)
 8004284:	2207      	movs	r2, #7
 8004286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	e000e010 	.word	0xe000e010

08004298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f7ff ff29 	bl	80040f8 <__NVIC_SetPriorityGrouping>
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	4603      	mov	r3, r0
 80042b6:	60b9      	str	r1, [r7, #8]
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042bc:	f7ff ff40 	bl	8004140 <__NVIC_GetPriorityGrouping>
 80042c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68b9      	ldr	r1, [r7, #8]
 80042c6:	6978      	ldr	r0, [r7, #20]
 80042c8:	f7ff ff90 	bl	80041ec <NVIC_EncodePriority>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042d2:	4611      	mov	r1, r2
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7ff ff5f 	bl	8004198 <__NVIC_SetPriority>
}
 80042da:	bf00      	nop
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	4603      	mov	r3, r0
 80042ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff33 	bl	800415c <__NVIC_EnableIRQ>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff ffa4 	bl	8004254 <SysTick_Config>
 800430c:	4603      	mov	r3, r0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3708      	adds	r7, #8
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004318:	b480      	push	{r7}
 800431a:	b087      	sub	sp, #28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004322:	2300      	movs	r3, #0
 8004324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004326:	e14c      	b.n	80045c2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	2101      	movs	r1, #1
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 813e 	beq.w	80045bc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d005      	beq.n	8004358 <HAL_GPIO_Init+0x40>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d130      	bne.n	80043ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	2203      	movs	r2, #3
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800438e:	2201      	movs	r2, #1
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	fa02 f303 	lsl.w	r3, r2, r3
 8004396:	43db      	mvns	r3, r3
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	4013      	ands	r3, r2
 800439c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	091b      	lsrs	r3, r3, #4
 80043a4:	f003 0201 	and.w	r2, r3, #1
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d017      	beq.n	80043f6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	2203      	movs	r2, #3
 80043d2:	fa02 f303 	lsl.w	r3, r2, r3
 80043d6:	43db      	mvns	r3, r3
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4013      	ands	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d123      	bne.n	800444a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	08da      	lsrs	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	3208      	adds	r2, #8
 800440a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	220f      	movs	r2, #15
 800441a:	fa02 f303 	lsl.w	r3, r2, r3
 800441e:	43db      	mvns	r3, r3
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4013      	ands	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691a      	ldr	r2, [r3, #16]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	4313      	orrs	r3, r2
 800443a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3208      	adds	r2, #8
 8004444:	6939      	ldr	r1, [r7, #16]
 8004446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	2203      	movs	r2, #3
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4013      	ands	r3, r2
 8004460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f003 0203 	and.w	r2, r3, #3
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fa02 f303 	lsl.w	r3, r2, r3
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8098 	beq.w	80045bc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800448c:	4a54      	ldr	r2, [pc, #336]	; (80045e0 <HAL_GPIO_Init+0x2c8>)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	3302      	adds	r3, #2
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	220f      	movs	r2, #15
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	43db      	mvns	r3, r3
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80044b6:	d019      	beq.n	80044ec <HAL_GPIO_Init+0x1d4>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a4a      	ldr	r2, [pc, #296]	; (80045e4 <HAL_GPIO_Init+0x2cc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d013      	beq.n	80044e8 <HAL_GPIO_Init+0x1d0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a49      	ldr	r2, [pc, #292]	; (80045e8 <HAL_GPIO_Init+0x2d0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00d      	beq.n	80044e4 <HAL_GPIO_Init+0x1cc>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a48      	ldr	r2, [pc, #288]	; (80045ec <HAL_GPIO_Init+0x2d4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d007      	beq.n	80044e0 <HAL_GPIO_Init+0x1c8>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a47      	ldr	r2, [pc, #284]	; (80045f0 <HAL_GPIO_Init+0x2d8>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d101      	bne.n	80044dc <HAL_GPIO_Init+0x1c4>
 80044d8:	2304      	movs	r3, #4
 80044da:	e008      	b.n	80044ee <HAL_GPIO_Init+0x1d6>
 80044dc:	2307      	movs	r3, #7
 80044de:	e006      	b.n	80044ee <HAL_GPIO_Init+0x1d6>
 80044e0:	2303      	movs	r3, #3
 80044e2:	e004      	b.n	80044ee <HAL_GPIO_Init+0x1d6>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e002      	b.n	80044ee <HAL_GPIO_Init+0x1d6>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_GPIO_Init+0x1d6>
 80044ec:	2300      	movs	r3, #0
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	f002 0203 	and.w	r2, r2, #3
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	4093      	lsls	r3, r2
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044fe:	4938      	ldr	r1, [pc, #224]	; (80045e0 <HAL_GPIO_Init+0x2c8>)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	089b      	lsrs	r3, r3, #2
 8004504:	3302      	adds	r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800450c:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	43db      	mvns	r3, r3
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	4013      	ands	r3, r2
 800451a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004530:	4a30      	ldr	r2, [pc, #192]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004536:	4b2f      	ldr	r3, [pc, #188]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	43db      	mvns	r3, r3
 8004540:	693a      	ldr	r2, [r7, #16]
 8004542:	4013      	ands	r3, r2
 8004544:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800455a:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004560:	4b24      	ldr	r3, [pc, #144]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 8004562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004566:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	43db      	mvns	r3, r3
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	4013      	ands	r3, r2
 8004570:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004586:	4a1b      	ldr	r2, [pc, #108]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800458e:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	43db      	mvns	r3, r3
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4013      	ands	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045b4:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <HAL_GPIO_Init+0x2dc>)
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3301      	adds	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f47f aeab 	bne.w	8004328 <HAL_GPIO_Init+0x10>
  }
}
 80045d2:	bf00      	nop
 80045d4:	bf00      	nop
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	40010000 	.word	0x40010000
 80045e4:	48000400 	.word	0x48000400
 80045e8:	48000800 	.word	0x48000800
 80045ec:	48000c00 	.word	0x48000c00
 80045f0:	48001000 	.word	0x48001000
 80045f4:	58000800 	.word	0x58000800

080045f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	460b      	mov	r3, r1
 8004602:	807b      	strh	r3, [r7, #2]
 8004604:	4613      	mov	r3, r2
 8004606:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004608:	787b      	ldrb	r3, [r7, #1]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800460e:	887a      	ldrh	r2, [r7, #2]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004614:	e002      	b.n	800461c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004616:	887a      	ldrh	r2, [r7, #2]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800463a:	887a      	ldrh	r2, [r7, #2]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4013      	ands	r3, r2
 8004640:	041a      	lsls	r2, r3, #16
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	43d9      	mvns	r1, r3
 8004646:	887b      	ldrh	r3, [r7, #2]
 8004648:	400b      	ands	r3, r1
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
}
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004666:	4b08      	ldr	r3, [pc, #32]	; (8004688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004668:	68da      	ldr	r2, [r3, #12]
 800466a:	88fb      	ldrh	r3, [r7, #6]
 800466c:	4013      	ands	r3, r2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004672:	4a05      	ldr	r2, [pc, #20]	; (8004688 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004674:	88fb      	ldrh	r3, [r7, #6]
 8004676:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fe fdb6 	bl	80031ec <HAL_GPIO_EXTI_Callback>
  }
}
 8004680:	bf00      	nop
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	58000800 	.word	0x58000800

0800468c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800468c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468e:	b08b      	sub	sp, #44	; 0x2c
 8004690:	af06      	add	r7, sp, #24
 8004692:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e0cb      	b.n	8004836 <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fa8a 	bl	8003bcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2203      	movs	r2, #3
 80046bc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f004 fc79 	bl	8008fbc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ca:	2300      	movs	r3, #0
 80046cc:	73fb      	strb	r3, [r7, #15]
 80046ce:	e040      	b.n	8004752 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	3301      	adds	r3, #1
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80046e6:	7bfb      	ldrb	r3, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	440b      	add	r3, r1
 80046f6:	7bfa      	ldrb	r2, [r7, #15]
 80046f8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	440b      	add	r3, r1
 800470a:	3303      	adds	r3, #3
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	440b      	add	r3, r1
 800471e:	3338      	adds	r3, #56	; 0x38
 8004720:	2200      	movs	r2, #0
 8004722:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004724:	7bfa      	ldrb	r2, [r7, #15]
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	4613      	mov	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	4413      	add	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	440b      	add	r3, r1
 8004732:	333c      	adds	r3, #60	; 0x3c
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	3340      	adds	r3, #64	; 0x40
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	3301      	adds	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	7bfa      	ldrb	r2, [r7, #15]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d3b9      	bcc.n	80046d0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]
 8004760:	e044      	b.n	80047ec <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004762:	7bfa      	ldrb	r2, [r7, #15]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	440b      	add	r3, r1
 8004786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800478e:	7bfa      	ldrb	r2, [r7, #15]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	440b      	add	r3, r1
 800479c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80047a0:	2200      	movs	r2, #0
 80047a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047a4:	7bfa      	ldrb	r2, [r7, #15]
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	440b      	add	r3, r1
 80047b2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	440b      	add	r3, r1
 80047c8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	440b      	add	r3, r1
 80047de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	3301      	adds	r3, #1
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	7bfa      	ldrb	r2, [r7, #15]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3b5      	bcc.n	8004762 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	687e      	ldr	r6, [r7, #4]
 80047fe:	466d      	mov	r5, sp
 8004800:	f106 0410 	add.w	r4, r6, #16
 8004804:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004806:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	602b      	str	r3, [r5, #0]
 800480c:	1d33      	adds	r3, r6, #4
 800480e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004810:	6838      	ldr	r0, [r7, #0]
 8004812:	f004 fbee 	bl	8008ff2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d102      	bne.n	8004834 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f805 	bl	800483e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3714      	adds	r7, #20
 800483a:	46bd      	mov	sp, r7
 800483c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800483e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800483e:	b480      	push	{r7}
 8004840:	b085      	sub	sp, #20
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004862:	b29b      	uxth	r3, r3
 8004864:	f043 0301 	orr.w	r3, r3, #1
 8004868:	b29a      	uxth	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004876:	b29b      	uxth	r3, r3
 8004878:	f043 0302 	orr.w	r3, r3, #2
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01d      	beq.n	80048e0 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	791b      	ldrb	r3, [r3, #4]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff f874 	bl	800399c <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 80048d0:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	711a      	strb	r2, [r3, #4]
 80048de:	e001      	b.n	80048e4 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a04      	ldr	r2, [pc, #16]	; (800490c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	58000400 	.word	0x58000400

08004910 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004910:	b480      	push	{r7}
 8004912:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004914:	4b04      	ldr	r3, [pc, #16]	; (8004928 <HAL_PWREx_GetVoltageRange+0x18>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	58000400 	.word	0x58000400

0800492c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800492c:	b480      	push	{r7}
 800492e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800493e:	d101      	bne.n	8004944 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <LL_RCC_HSE_Enable>:
{
 8004950:	b480      	push	{r7}
 8004952:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800495e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
}
 8004964:	bf00      	nop
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_RCC_HSE_Disable>:
{
 800496e:	b480      	push	{r7}
 8004970:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800497c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_RCC_HSE_IsReady>:
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800499e:	d101      	bne.n	80049a4 <LL_RCC_HSE_IsReady+0x18>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <LL_RCC_HSE_IsReady+0x1a>
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_HSI_Enable>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_RCC_HSI_Disable>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80049d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049e0:	6013      	str	r3, [r2, #0]
}
 80049e2:	bf00      	nop
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_RCC_HSI_IsReady>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80049f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049fe:	d101      	bne.n	8004a04 <LL_RCC_HSI_IsReady+0x18>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <LL_RCC_HSI_IsReady+0x1a>
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	061b      	lsls	r3, r3, #24
 8004a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	604b      	str	r3, [r1, #4]
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_HSI48_Enable>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004a52:	bf00      	nop
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_HSI48_Disable>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a6c:	f023 0301 	bic.w	r3, r3, #1
 8004a70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_RCC_HSI48_IsReady>:
{
 8004a7e:	b480      	push	{r7}
 8004a80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d101      	bne.n	8004a96 <LL_RCC_HSI48_IsReady+0x18>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <LL_RCC_HSI48_IsReady+0x1a>
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_LSE_Enable>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_RCC_LSE_Disable>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad4:	f023 0301 	bic.w	r3, r3, #1
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_LSE_EnableBypass>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af6:	f043 0304 	orr.w	r3, r3, #4
 8004afa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004afe:	bf00      	nop
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <LL_RCC_LSE_DisableBypass>:
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr

08004b2a <LL_RCC_LSE_IsReady>:
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d101      	bne.n	8004b42 <LL_RCC_LSE_IsReady+0x18>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <LL_RCC_LSE_IsReady+0x1a>
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <LL_RCC_LSI1_Enable>:
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b5e:	f043 0301 	orr.w	r3, r3, #1
 8004b62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_RCC_LSI1_Disable>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004b88:	bf00      	nop
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <LL_RCC_LSI1_IsReady>:
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d101      	bne.n	8004baa <LL_RCC_LSI1_IsReady+0x18>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <LL_RCC_LSI1_IsReady+0x1a>
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr

08004bb6 <LL_RCC_LSI2_Enable>:
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bc6:	f043 0304 	orr.w	r3, r3, #4
 8004bca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bce:	bf00      	nop
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <LL_RCC_LSI2_Disable>:
{
 8004bd8:	b480      	push	{r7}
 8004bda:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004be4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_LSI2_IsReady>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d101      	bne.n	8004c12 <LL_RCC_LSI2_IsReady+0x18>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <LL_RCC_LSI2_IsReady+0x1a>
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <LL_RCC_LSI2_SetTrimming>:
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <LL_RCC_MSI_Enable>:
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <LL_RCC_MSI_Disable>:
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c78:	f023 0301 	bic.w	r3, r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
}
 8004c7e:	bf00      	nop
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <LL_RCC_MSI_IsReady>:
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d101      	bne.n	8004c9e <LL_RCC_MSI_IsReady+0x16>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e000      	b.n	8004ca0 <LL_RCC_MSI_IsReady+0x18>
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <LL_RCC_MSI_SetRange>:
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	600b      	str	r3, [r1, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <LL_RCC_MSI_GetRange>:
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2bb0      	cmp	r3, #176	; 0xb0
 8004ce8:	d901      	bls.n	8004cee <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004cea:	23b0      	movs	r3, #176	; 0xb0
 8004cec:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004cee:	687b      	ldr	r3, [r7, #4]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <LL_RCC_MSI_SetCalibTrimming>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	021b      	lsls	r3, r3, #8
 8004d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d16:	4313      	orrs	r3, r2
 8004d18:	604b      	str	r3, [r1, #4]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_RCC_SetSysClkSource>:
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f023 0203 	bic.w	r2, r3, #3
 8004d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	608b      	str	r3, [r1, #8]
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <LL_RCC_GetSysClkSource>:
{
 8004d4e:	b480      	push	{r7}
 8004d50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f003 030c 	and.w	r3, r3, #12
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <LL_RCC_SetAHBPrescaler>:
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	608b      	str	r3, [r1, #8]
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <LL_C2_RCC_SetAHBPrescaler>:
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004dae:	bf00      	nop
 8004db0:	370c      	adds	r7, #12
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <LL_RCC_SetAHB4Prescaler>:
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b083      	sub	sp, #12
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004dca:	f023 020f 	bic.w	r2, r3, #15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_RCC_SetAPB1Prescaler>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004dfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	608b      	str	r3, [r1, #8]
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <LL_RCC_SetAPB2Prescaler>:
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	608b      	str	r3, [r1, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LL_RCC_GetAHBPrescaler>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <LL_RCC_GetAHB4Prescaler>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e5c:	011b      	lsls	r3, r3, #4
 8004e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <LL_RCC_GetAPB1Prescaler>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <LL_RCC_GetAPB2Prescaler>:
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eaa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]
}
 8004eb0:	bf00      	nop
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004ebe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ec8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ecc:	6013      	str	r3, [r2, #0]
}
 8004ece:	bf00      	nop
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eea:	d101      	bne.n	8004ef0 <LL_RCC_PLL_IsReady+0x18>
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <LL_RCC_PLL_IsReady+0x1a>
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	0a1b      	lsrs	r3, r3, #8
 8004f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004f16:	b480      	push	{r7}
 8004f18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0303 	and.w	r3, r3, #3
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d101      	bne.n	8004f76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f96:	d101      	bne.n	8004f9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e000      	b.n	8004f9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004fb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fbc:	d101      	bne.n	8004fc2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004fd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe0:	d101      	bne.n	8004fe6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005000:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005004:	d101      	bne.n	800500a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
	...

08005018 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005018:	b590      	push	{r4, r7, lr}
 800501a:	b08d      	sub	sp, #52	; 0x34
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d101      	bne.n	800502a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e363      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0320 	and.w	r3, r3, #32
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 808d 	beq.w	8005152 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005038:	f7ff fe89 	bl	8004d4e <LL_RCC_GetSysClkSource>
 800503c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503e:	f7ff ff82 	bl	8004f46 <LL_RCC_PLL_GetMainSource>
 8005042:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <HAL_RCC_OscConfig+0x3e>
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504c:	2b0c      	cmp	r3, #12
 800504e:	d147      	bne.n	80050e0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005052:	2b01      	cmp	r3, #1
 8005054:	d144      	bne.n	80050e0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e347      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005066:	f7ff fe34 	bl	8004cd2 <LL_RCC_MSI_GetRange>
 800506a:	4603      	mov	r3, r0
 800506c:	429c      	cmp	r4, r3
 800506e:	d914      	bls.n	800509a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fd2f 	bl	8005ad8 <RCC_SetFlashLatencyFromMSIRange>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d001      	beq.n	8005084 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e336      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fe0e 	bl	8004caa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	4618      	mov	r0, r3
 8005094:	f7ff fe32 	bl	8004cfc <LL_RCC_MSI_SetCalibTrimming>
 8005098:	e013      	b.n	80050c2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fe03 	bl	8004caa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fe27 	bl	8004cfc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fd10 	bl	8005ad8 <RCC_SetFlashLatencyFromMSIRange>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e317      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80050c2:	f000 fcc9 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4aa4      	ldr	r2, [pc, #656]	; (800535c <HAL_RCC_OscConfig+0x344>)
 80050ca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80050cc:	4ba4      	ldr	r3, [pc, #656]	; (8005360 <HAL_RCC_OscConfig+0x348>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fe ff87 	bl	8003fe4 <HAL_InitTick>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d039      	beq.n	8005150 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e308      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	69db      	ldr	r3, [r3, #28]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01e      	beq.n	8005126 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050e8:	f7ff fdb0 	bl	8004c4c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050ec:	f7fe ffc8 	bl	8004080 <HAL_GetTick>
 80050f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050f4:	f7fe ffc4 	bl	8004080 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e2f5      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005106:	f7ff fdbf 	bl	8004c88 <LL_RCC_MSI_IsReady>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f1      	beq.n	80050f4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	4618      	mov	r0, r3
 8005116:	f7ff fdc8 	bl	8004caa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fdec 	bl	8004cfc <LL_RCC_MSI_SetCalibTrimming>
 8005124:	e015      	b.n	8005152 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005126:	f7ff fda0 	bl	8004c6a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800512a:	f7fe ffa9 	bl	8004080 <HAL_GetTick>
 800512e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005130:	e008      	b.n	8005144 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005132:	f7fe ffa5 	bl	8004080 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b02      	cmp	r3, #2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e2d6      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005144:	f7ff fda0 	bl	8004c88 <LL_RCC_MSI_IsReady>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d1f1      	bne.n	8005132 <HAL_RCC_OscConfig+0x11a>
 800514e:	e000      	b.n	8005152 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005150:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d047      	beq.n	80051ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800515e:	f7ff fdf6 	bl	8004d4e <LL_RCC_GetSysClkSource>
 8005162:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005164:	f7ff feef 	bl	8004f46 <LL_RCC_PLL_GetMainSource>
 8005168:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	2b08      	cmp	r3, #8
 800516e:	d005      	beq.n	800517c <HAL_RCC_OscConfig+0x164>
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	2b0c      	cmp	r3, #12
 8005174:	d108      	bne.n	8005188 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	2b03      	cmp	r3, #3
 800517a:	d105      	bne.n	8005188 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d134      	bne.n	80051ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e2b4      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d102      	bne.n	8005198 <HAL_RCC_OscConfig+0x180>
 8005192:	f7ff fbdd 	bl	8004950 <LL_RCC_HSE_Enable>
 8005196:	e001      	b.n	800519c <HAL_RCC_OscConfig+0x184>
 8005198:	f7ff fbe9 	bl	800496e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a4:	f7fe ff6c 	bl	8004080 <HAL_GetTick>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ac:	f7fe ff68 	bl	8004080 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b64      	cmp	r3, #100	; 0x64
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e299      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80051be:	f7ff fbe5 	bl	800498c <LL_RCC_HSE_IsReady>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f1      	beq.n	80051ac <HAL_RCC_OscConfig+0x194>
 80051c8:	e011      	b.n	80051ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ca:	f7fe ff59 	bl	8004080 <HAL_GetTick>
 80051ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80051d0:	e008      	b.n	80051e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d2:	f7fe ff55 	bl	8004080 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b64      	cmp	r3, #100	; 0x64
 80051de:	d901      	bls.n	80051e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e286      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80051e4:	f7ff fbd2 	bl	800498c <LL_RCC_HSE_IsReady>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1f1      	bne.n	80051d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d04c      	beq.n	8005294 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051fa:	f7ff fda8 	bl	8004d4e <LL_RCC_GetSysClkSource>
 80051fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005200:	f7ff fea1 	bl	8004f46 <LL_RCC_PLL_GetMainSource>
 8005204:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d005      	beq.n	8005218 <HAL_RCC_OscConfig+0x200>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2b0c      	cmp	r3, #12
 8005210:	d10e      	bne.n	8005230 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b02      	cmp	r3, #2
 8005216:	d10b      	bne.n	8005230 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d101      	bne.n	8005224 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e266      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fbf1 	bl	8004a10 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800522e:	e031      	b.n	8005294 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d019      	beq.n	800526c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005238:	f7ff fbba 	bl	80049b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800523c:	f7fe ff20 	bl	8004080 <HAL_GetTick>
 8005240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005244:	f7fe ff1c 	bl	8004080 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e24d      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005256:	f7ff fbc9 	bl	80049ec <LL_RCC_HSI_IsReady>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f1      	beq.n	8005244 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fbd3 	bl	8004a10 <LL_RCC_HSI_SetCalibTrimming>
 800526a:	e013      	b.n	8005294 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800526c:	f7ff fbaf 	bl	80049ce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005270:	f7fe ff06 	bl	8004080 <HAL_GetTick>
 8005274:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005278:	f7fe ff02 	bl	8004080 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e233      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800528a:	f7ff fbaf 	bl	80049ec <LL_RCC_HSI_IsReady>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f1      	bne.n	8005278 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 80a3 	beq.w	80053f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d076      	beq.n	80053a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d046      	beq.n	8005350 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80052c2:	f7ff fc66 	bl	8004b92 <LL_RCC_LSI1_IsReady>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d113      	bne.n	80052f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80052cc:	f7ff fc3f 	bl	8004b4e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052d0:	f7fe fed6 	bl	8004080 <HAL_GetTick>
 80052d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80052d6:	e008      	b.n	80052ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052d8:	f7fe fed2 	bl	8004080 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e203      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80052ea:	f7ff fc52 	bl	8004b92 <LL_RCC_LSI1_IsReady>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d0f1      	beq.n	80052d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80052f4:	f7ff fc5f 	bl	8004bb6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052f8:	f7fe fec2 	bl	8004080 <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005300:	f7fe febe 	bl	8004080 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b03      	cmp	r3, #3
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1ef      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005312:	f7ff fc72 	bl	8004bfa <LL_RCC_LSI2_IsReady>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0f1      	beq.n	8005300 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff fc7c 	bl	8004c1e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005326:	f7ff fc23 	bl	8004b70 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800532a:	f7fe fea9 	bl	8004080 <HAL_GetTick>
 800532e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005332:	f7fe fea5 	bl	8004080 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e1d6      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005344:	f7ff fc25 	bl	8004b92 <LL_RCC_LSI1_IsReady>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1f1      	bne.n	8005332 <HAL_RCC_OscConfig+0x31a>
 800534e:	e051      	b.n	80053f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005350:	f7ff fbfd 	bl	8004b4e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005354:	f7fe fe94 	bl	8004080 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800535a:	e00c      	b.n	8005376 <HAL_RCC_OscConfig+0x35e>
 800535c:	20000008 	.word	0x20000008
 8005360:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005364:	f7fe fe8c 	bl	8004080 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e1bd      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005376:	f7ff fc0c 	bl	8004b92 <LL_RCC_LSI1_IsReady>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d0f1      	beq.n	8005364 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005380:	f7ff fc2a 	bl	8004bd8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005384:	e008      	b.n	8005398 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005386:	f7fe fe7b 	bl	8004080 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	2b03      	cmp	r3, #3
 8005392:	d901      	bls.n	8005398 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e1ac      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005398:	f7ff fc2f 	bl	8004bfa <LL_RCC_LSI2_IsReady>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1f1      	bne.n	8005386 <HAL_RCC_OscConfig+0x36e>
 80053a2:	e027      	b.n	80053f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80053a4:	f7ff fc18 	bl	8004bd8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a8:	f7fe fe6a 	bl	8004080 <HAL_GetTick>
 80053ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80053b0:	f7fe fe66 	bl	8004080 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e197      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80053c2:	f7ff fc1a 	bl	8004bfa <LL_RCC_LSI2_IsReady>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f1      	bne.n	80053b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80053cc:	f7ff fbd0 	bl	8004b70 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d0:	f7fe fe56 	bl	8004080 <HAL_GetTick>
 80053d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80053d8:	f7fe fe52 	bl	8004080 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e183      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80053ea:	f7ff fbd2 	bl	8004b92 <LL_RCC_LSI1_IsReady>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1f1      	bne.n	80053d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d05b      	beq.n	80054b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005400:	4ba7      	ldr	r3, [pc, #668]	; (80056a0 <HAL_RCC_OscConfig+0x688>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005408:	2b00      	cmp	r3, #0
 800540a:	d114      	bne.n	8005436 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800540c:	f7ff fa70 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005410:	f7fe fe36 	bl	8004080 <HAL_GetTick>
 8005414:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005418:	f7fe fe32 	bl	8004080 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e163      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800542a:	4b9d      	ldr	r3, [pc, #628]	; (80056a0 <HAL_RCC_OscConfig+0x688>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005432:	2b00      	cmp	r3, #0
 8005434:	d0f0      	beq.n	8005418 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b01      	cmp	r3, #1
 800543c:	d102      	bne.n	8005444 <HAL_RCC_OscConfig+0x42c>
 800543e:	f7ff fb30 	bl	8004aa2 <LL_RCC_LSE_Enable>
 8005442:	e00c      	b.n	800545e <HAL_RCC_OscConfig+0x446>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	2b05      	cmp	r3, #5
 800544a:	d104      	bne.n	8005456 <HAL_RCC_OscConfig+0x43e>
 800544c:	f7ff fb4b 	bl	8004ae6 <LL_RCC_LSE_EnableBypass>
 8005450:	f7ff fb27 	bl	8004aa2 <LL_RCC_LSE_Enable>
 8005454:	e003      	b.n	800545e <HAL_RCC_OscConfig+0x446>
 8005456:	f7ff fb35 	bl	8004ac4 <LL_RCC_LSE_Disable>
 800545a:	f7ff fb55 	bl	8004b08 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d014      	beq.n	8005490 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005466:	f7fe fe0b 	bl	8004080 <HAL_GetTick>
 800546a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800546c:	e00a      	b.n	8005484 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800546e:	f7fe fe07 	bl	8004080 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	f241 3288 	movw	r2, #5000	; 0x1388
 800547c:	4293      	cmp	r3, r2
 800547e:	d901      	bls.n	8005484 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e136      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005484:	f7ff fb51 	bl	8004b2a <LL_RCC_LSE_IsReady>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0ef      	beq.n	800546e <HAL_RCC_OscConfig+0x456>
 800548e:	e013      	b.n	80054b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005490:	f7fe fdf6 	bl	8004080 <HAL_GetTick>
 8005494:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005496:	e00a      	b.n	80054ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005498:	f7fe fdf2 	bl	8004080 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e121      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80054ae:	f7ff fb3c 	bl	8004b2a <LL_RCC_LSE_IsReady>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1ef      	bne.n	8005498 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02c      	beq.n	800551e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d014      	beq.n	80054f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054cc:	f7ff fab5 	bl	8004a3a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054d0:	f7fe fdd6 	bl	8004080 <HAL_GetTick>
 80054d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054d8:	f7fe fdd2 	bl	8004080 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e103      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80054ea:	f7ff fac8 	bl	8004a7e <LL_RCC_HSI48_IsReady>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0f1      	beq.n	80054d8 <HAL_RCC_OscConfig+0x4c0>
 80054f4:	e013      	b.n	800551e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054f6:	f7ff fab1 	bl	8004a5c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fe fdc1 	bl	8004080 <HAL_GetTick>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005502:	f7fe fdbd 	bl	8004080 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e0ee      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005514:	f7ff fab3 	bl	8004a7e <LL_RCC_HSI48_IsReady>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f1      	bne.n	8005502 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005522:	2b00      	cmp	r3, #0
 8005524:	f000 80e4 	beq.w	80056f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005528:	f7ff fc11 	bl	8004d4e <LL_RCC_GetSysClkSource>
 800552c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800552e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	2b02      	cmp	r3, #2
 800553c:	f040 80b4 	bne.w	80056a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0203 	and.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554a:	429a      	cmp	r2, r3
 800554c:	d123      	bne.n	8005596 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005558:	429a      	cmp	r2, r3
 800555a:	d11c      	bne.n	8005596 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005568:	429a      	cmp	r2, r3
 800556a:	d114      	bne.n	8005596 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d10d      	bne.n	8005596 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005584:	429a      	cmp	r2, r3
 8005586:	d106      	bne.n	8005596 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005592:	429a      	cmp	r2, r3
 8005594:	d05d      	beq.n	8005652 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d058      	beq.n	800564e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800559c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e0a1      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80055ae:	f7ff fc84 	bl	8004eba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055b2:	f7fe fd65 	bl	8004080 <HAL_GetTick>
 80055b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ba:	f7fe fd61 	bl	8004080 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e092      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1ef      	bne.n	80055ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <HAL_RCC_OscConfig+0x68c>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055ec:	4311      	orrs	r1, r2
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055f2:	0212      	lsls	r2, r2, #8
 80055f4:	4311      	orrs	r1, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055fa:	4311      	orrs	r1, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005600:	4311      	orrs	r1, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005606:	430a      	orrs	r2, r1
 8005608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800560c:	4313      	orrs	r3, r2
 800560e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005610:	f7ff fc44 	bl	8004e9c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005624:	f7fe fd2c 	bl	8004080 <HAL_GetTick>
 8005628:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800562c:	f7fe fd28 	bl	8004080 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e059      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ef      	beq.n	800562c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800564c:	e050      	b.n	80056f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e04f      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d147      	bne.n	80056f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005660:	f7ff fc1c 	bl	8004e9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005674:	f7fe fd04 	bl	8004080 <HAL_GetTick>
 8005678:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800567c:	f7fe fd00 	bl	8004080 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e031      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800568e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ef      	beq.n	800567c <HAL_RCC_OscConfig+0x664>
 800569c:	e028      	b.n	80056f0 <HAL_RCC_OscConfig+0x6d8>
 800569e:	bf00      	nop
 80056a0:	58000400 	.word	0x58000400
 80056a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	2b0c      	cmp	r3, #12
 80056ac:	d01e      	beq.n	80056ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056ae:	f7ff fc04 	bl	8004eba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b2:	f7fe fce5 	bl	8004080 <HAL_GetTick>
 80056b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ba:	f7fe fce1 	bl	8004080 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e012      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1ef      	bne.n	80056ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80056da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056de:	68da      	ldr	r2, [r3, #12]
 80056e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056e4:	4b05      	ldr	r3, [pc, #20]	; (80056fc <HAL_RCC_OscConfig+0x6e4>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	60cb      	str	r3, [r1, #12]
 80056ea:	e001      	b.n	80056f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3734      	adds	r7, #52	; 0x34
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd90      	pop	{r4, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	eefefffc 	.word	0xeefefffc

08005700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d101      	bne.n	8005714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e12d      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005714:	4b98      	ldr	r3, [pc, #608]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d91b      	bls.n	800575a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005722:	4b95      	ldr	r3, [pc, #596]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f023 0207 	bic.w	r2, r3, #7
 800572a:	4993      	ldr	r1, [pc, #588]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	4313      	orrs	r3, r2
 8005730:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005732:	f7fe fca5 	bl	8004080 <HAL_GetTick>
 8005736:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005738:	e008      	b.n	800574c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800573a:	f7fe fca1 	bl	8004080 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e111      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574c:	4b8a      	ldr	r3, [pc, #552]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0307 	and.w	r3, r3, #7
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	429a      	cmp	r2, r3
 8005758:	d1ef      	bne.n	800573a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0302 	and.w	r3, r3, #2
 8005762:	2b00      	cmp	r3, #0
 8005764:	d016      	beq.n	8005794 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff fafb 	bl	8004d66 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005770:	f7fe fc86 	bl	8004080 <HAL_GetTick>
 8005774:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005778:	f7fe fc82 	bl	8004080 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e0f2      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800578a:	f7ff fbe8 	bl	8004f5e <LL_RCC_IsActiveFlag_HPRE>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d0f1      	beq.n	8005778 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d016      	beq.n	80057ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff faf2 	bl	8004d8e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057aa:	f7fe fc69 	bl	8004080 <HAL_GetTick>
 80057ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057b2:	f7fe fc65 	bl	8004080 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0d5      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80057c4:	f7ff fbdd 	bl	8004f82 <LL_RCC_IsActiveFlag_C2HPRE>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f1      	beq.n	80057b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d016      	beq.n	8005808 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff faeb 	bl	8004dba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80057e4:	f7fe fc4c 	bl	8004080 <HAL_GetTick>
 80057e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80057ec:	f7fe fc48 	bl	8004080 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e0b8      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80057fe:	f7ff fbd3 	bl	8004fa8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d0f1      	beq.n	80057ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	d016      	beq.n	8005842 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff fae5 	bl	8004de8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800581e:	f7fe fc2f 	bl	8004080 <HAL_GetTick>
 8005822:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005824:	e008      	b.n	8005838 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005826:	f7fe fc2b 	bl	8004080 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	2b02      	cmp	r3, #2
 8005832:	d901      	bls.n	8005838 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005834:	2303      	movs	r3, #3
 8005836:	e09b      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005838:	f7ff fbc9 	bl	8004fce <LL_RCC_IsActiveFlag_PPRE1>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f1      	beq.n	8005826 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d017      	beq.n	800587e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff fadb 	bl	8004e10 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800585a:	f7fe fc11 	bl	8004080 <HAL_GetTick>
 800585e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005860:	e008      	b.n	8005874 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005862:	f7fe fc0d 	bl	8004080 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e07d      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005874:	f7ff fbbd 	bl	8004ff2 <LL_RCC_IsActiveFlag_PPRE2>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f1      	beq.n	8005862 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d043      	beq.n	8005912 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2b02      	cmp	r3, #2
 8005890:	d106      	bne.n	80058a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005892:	f7ff f87b 	bl	800498c <LL_RCC_HSE_IsReady>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d11e      	bne.n	80058da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e067      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2b03      	cmp	r3, #3
 80058a6:	d106      	bne.n	80058b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80058a8:	f7ff fb16 	bl	8004ed8 <LL_RCC_PLL_IsReady>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d113      	bne.n	80058da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e05c      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d106      	bne.n	80058cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80058be:	f7ff f9e3 	bl	8004c88 <LL_RCC_MSI_IsReady>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d108      	bne.n	80058da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e051      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80058cc:	f7ff f88e 	bl	80049ec <LL_RCC_HSI_IsReady>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e04a      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff fa21 	bl	8004d26 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e4:	f7fe fbcc 	bl	8004080 <HAL_GetTick>
 80058e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ec:	f7fe fbc8 	bl	8004080 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e036      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	f7ff fa24 	bl	8004d4e <LL_RCC_GetSysClkSource>
 8005906:	4602      	mov	r2, r0
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	429a      	cmp	r2, r3
 8005910:	d1ec      	bne.n	80058ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	429a      	cmp	r2, r3
 800591e:	d21b      	bcs.n	8005958 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005920:	4b15      	ldr	r3, [pc, #84]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f023 0207 	bic.w	r2, r3, #7
 8005928:	4913      	ldr	r1, [pc, #76]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	4313      	orrs	r3, r2
 800592e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005930:	f7fe fba6 	bl	8004080 <HAL_GetTick>
 8005934:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005936:	e008      	b.n	800594a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005938:	f7fe fba2 	bl	8004080 <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e012      	b.n	8005970 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b0b      	ldr	r3, [pc, #44]	; (8005978 <HAL_RCC_ClockConfig+0x278>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d1ef      	bne.n	8005938 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005958:	f000 f87e 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 800595c:	4603      	mov	r3, r0
 800595e:	4a07      	ldr	r2, [pc, #28]	; (800597c <HAL_RCC_ClockConfig+0x27c>)
 8005960:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005962:	f7fe fb99 	bl	8004098 <HAL_GetTickPrio>
 8005966:	4603      	mov	r3, r0
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fb3b 	bl	8003fe4 <HAL_InitTick>
 800596e:	4603      	mov	r3, r0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	58004000 	.word	0x58004000
 800597c:	20000008 	.word	0x20000008

08005980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005980:	b590      	push	{r4, r7, lr}
 8005982:	b085      	sub	sp, #20
 8005984:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005986:	f7ff f9e2 	bl	8004d4e <LL_RCC_GetSysClkSource>
 800598a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10a      	bne.n	80059a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005992:	f7ff f99e 	bl	8004cd2 <LL_RCC_MSI_GetRange>
 8005996:	4603      	mov	r3, r0
 8005998:	091b      	lsrs	r3, r3, #4
 800599a:	f003 030f 	and.w	r3, r3, #15
 800599e:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <HAL_RCC_GetSysClockFreq+0xcc>)
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e04b      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d102      	bne.n	80059b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ae:	4b28      	ldr	r3, [pc, #160]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059b0:	60fb      	str	r3, [r7, #12]
 80059b2:	e045      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d10a      	bne.n	80059d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059ba:	f7fe ffb7 	bl	800492c <LL_RCC_HSE_IsEnabledDiv2>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d102      	bne.n	80059ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80059c4:	4b22      	ldr	r3, [pc, #136]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e03a      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80059ca:	4b22      	ldr	r3, [pc, #136]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xd4>)
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	e037      	b.n	8005a40 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80059d0:	f7ff fab9 	bl	8004f46 <LL_RCC_PLL_GetMainSource>
 80059d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d003      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0x64>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d003      	beq.n	80059ea <HAL_RCC_GetSysClockFreq+0x6a>
 80059e2:	e00d      	b.n	8005a00 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059e6:	60bb      	str	r3, [r7, #8]
        break;
 80059e8:	e015      	b.n	8005a16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80059ea:	f7fe ff9f 	bl	800492c <LL_RCC_HSE_IsEnabledDiv2>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d102      	bne.n	80059fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80059f4:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <HAL_RCC_GetSysClockFreq+0xd0>)
 80059f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80059f8:	e00d      	b.n	8005a16 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80059fa:	4b16      	ldr	r3, [pc, #88]	; (8005a54 <HAL_RCC_GetSysClockFreq+0xd4>)
 80059fc:	60bb      	str	r3, [r7, #8]
        break;
 80059fe:	e00a      	b.n	8005a16 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005a00:	f7ff f967 	bl	8004cd2 <LL_RCC_MSI_GetRange>
 8005a04:	4603      	mov	r3, r0
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	4a0f      	ldr	r2, [pc, #60]	; (8005a4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a12:	60bb      	str	r3, [r7, #8]
        break;
 8005a14:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005a16:	f7ff fa71 	bl	8004efc <LL_RCC_PLL_GetN>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	fb03 f402 	mul.w	r4, r3, r2
 8005a22:	f7ff fa84 	bl	8004f2e <LL_RCC_PLL_GetDivider>
 8005a26:	4603      	mov	r3, r0
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	fbb4 f4f3 	udiv	r4, r4, r3
 8005a30:	f7ff fa71 	bl	8004f16 <LL_RCC_PLL_GetR>
 8005a34:	4603      	mov	r3, r0
 8005a36:	0f5b      	lsrs	r3, r3, #29
 8005a38:	3301      	adds	r3, #1
 8005a3a:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a3e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005a40:	68fb      	ldr	r3, [r7, #12]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3714      	adds	r7, #20
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd90      	pop	{r4, r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	0800a7c8 	.word	0x0800a7c8
 8005a50:	00f42400 	.word	0x00f42400
 8005a54:	01e84800 	.word	0x01e84800

08005a58 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a58:	b598      	push	{r3, r4, r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005a5c:	f7ff ff90 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8005a60:	4604      	mov	r4, r0
 8005a62:	f7ff f9e9 	bl	8004e38 <LL_RCC_GetAHBPrescaler>
 8005a66:	4603      	mov	r3, r0
 8005a68:	091b      	lsrs	r3, r3, #4
 8005a6a:	f003 030f 	and.w	r3, r3, #15
 8005a6e:	4a03      	ldr	r2, [pc, #12]	; (8005a7c <HAL_RCC_GetHCLKFreq+0x24>)
 8005a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a74:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd98      	pop	{r3, r4, r7, pc}
 8005a7c:	0800a768 	.word	0x0800a768

08005a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a80:	b598      	push	{r3, r4, r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005a84:	f7ff ffe8 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005a88:	4604      	mov	r4, r0
 8005a8a:	f7ff f9ef 	bl	8004e6c <LL_RCC_GetAPB1Prescaler>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	f003 0307 	and.w	r3, r3, #7
 8005a96:	4a04      	ldr	r2, [pc, #16]	; (8005aa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a9c:	f003 031f 	and.w	r3, r3, #31
 8005aa0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd98      	pop	{r3, r4, r7, pc}
 8005aa8:	0800a7a8 	.word	0x0800a7a8

08005aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005aac:	b598      	push	{r3, r4, r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005ab0:	f7ff ffd2 	bl	8005a58 <HAL_RCC_GetHCLKFreq>
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	f7ff f9e5 	bl	8004e84 <LL_RCC_GetAPB2Prescaler>
 8005aba:	4603      	mov	r3, r0
 8005abc:	0adb      	lsrs	r3, r3, #11
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	4a04      	ldr	r2, [pc, #16]	; (8005ad4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ac8:	f003 031f 	and.w	r3, r3, #31
 8005acc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	bd98      	pop	{r3, r4, r7, pc}
 8005ad4:	0800a7a8 	.word	0x0800a7a8

08005ad8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005ad8:	b590      	push	{r4, r7, lr}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2bb0      	cmp	r3, #176	; 0xb0
 8005ae4:	d903      	bls.n	8005aee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005ae6:	4b15      	ldr	r3, [pc, #84]	; (8005b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	e007      	b.n	8005afe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	091b      	lsrs	r3, r3, #4
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	4a11      	ldr	r2, [pc, #68]	; (8005b3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005afe:	f7ff f9a7 	bl	8004e50 <LL_RCC_GetAHB4Prescaler>
 8005b02:	4603      	mov	r3, r0
 8005b04:	091b      	lsrs	r3, r3, #4
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	4a0d      	ldr	r2, [pc, #52]	; (8005b40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	0c9c      	lsrs	r4, r3, #18
 8005b22:	f7fe fef5 	bl	8004910 <HAL_PWREx_GetVoltageRange>
 8005b26:	4603      	mov	r3, r0
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f80c 	bl	8005b48 <RCC_SetFlashLatency>
 8005b30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd90      	pop	{r4, r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	0800a7c8 	.word	0x0800a7c8
 8005b40:	0800a768 	.word	0x0800a768
 8005b44:	431bde83 	.word	0x431bde83

08005b48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005b48:	b590      	push	{r4, r7, lr}
 8005b4a:	b093      	sub	sp, #76	; 0x4c
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005b52:	4b37      	ldr	r3, [pc, #220]	; (8005c30 <RCC_SetFlashLatency+0xe8>)
 8005b54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005b58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005b5e:	4a35      	ldr	r2, [pc, #212]	; (8005c34 <RCC_SetFlashLatency+0xec>)
 8005b60:	f107 031c 	add.w	r3, r7, #28
 8005b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005b6a:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <RCC_SetFlashLatency+0xf0>)
 8005b6c:	f107 040c 	add.w	r4, r7, #12
 8005b70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005b72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005b76:	2300      	movs	r3, #0
 8005b78:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b80:	d11a      	bne.n	8005bb8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
 8005b86:	e013      	b.n	8005bb0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	3348      	adds	r3, #72	; 0x48
 8005b8e:	443b      	add	r3, r7
 8005b90:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d807      	bhi.n	8005baa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	3348      	adds	r3, #72	; 0x48
 8005ba0:	443b      	add	r3, r7
 8005ba2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ba6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005ba8:	e020      	b.n	8005bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bac:	3301      	adds	r3, #1
 8005bae:	643b      	str	r3, [r7, #64]	; 0x40
 8005bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d9e8      	bls.n	8005b88 <RCC_SetFlashLatency+0x40>
 8005bb6:	e019      	b.n	8005bec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005bb8:	2300      	movs	r3, #0
 8005bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bbc:	e013      	b.n	8005be6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	3348      	adds	r3, #72	; 0x48
 8005bc4:	443b      	add	r3, r7
 8005bc6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d807      	bhi.n	8005be0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	3348      	adds	r3, #72	; 0x48
 8005bd6:	443b      	add	r3, r7
 8005bd8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005bdc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005bde:	e005      	b.n	8005bec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be2:	3301      	adds	r3, #1
 8005be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d9e8      	bls.n	8005bbe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005bec:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <RCC_SetFlashLatency+0xf4>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f023 0207 	bic.w	r2, r3, #7
 8005bf4:	4911      	ldr	r1, [pc, #68]	; (8005c3c <RCC_SetFlashLatency+0xf4>)
 8005bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bfc:	f7fe fa40 	bl	8004080 <HAL_GetTick>
 8005c00:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c02:	e008      	b.n	8005c16 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005c04:	f7fe fa3c 	bl	8004080 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d901      	bls.n	8005c16 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e007      	b.n	8005c26 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005c16:	4b09      	ldr	r3, [pc, #36]	; (8005c3c <RCC_SetFlashLatency+0xf4>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d1ef      	bne.n	8005c04 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	374c      	adds	r7, #76	; 0x4c
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	0800a73c 	.word	0x0800a73c
 8005c34:	0800a74c 	.word	0x0800a74c
 8005c38:	0800a758 	.word	0x0800a758
 8005c3c:	58004000 	.word	0x58004000

08005c40 <LL_RCC_LSE_IsEnabled>:
{
 8005c40:	b480      	push	{r7}
 8005c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <LL_RCC_LSE_IsEnabled+0x18>
 8005c54:	2301      	movs	r3, #1
 8005c56:	e000      	b.n	8005c5a <LL_RCC_LSE_IsEnabled+0x1a>
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <LL_RCC_LSE_IsReady>:
{
 8005c64:	b480      	push	{r7}
 8005c66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c70:	f003 0302 	and.w	r3, r3, #2
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d101      	bne.n	8005c7c <LL_RCC_LSE_IsReady+0x18>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e000      	b.n	8005c7e <LL_RCC_LSE_IsReady+0x1a>
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <LL_RCC_MSI_EnablePLLMode>:
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005c8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c96:	f043 0304 	orr.w	r3, r3, #4
 8005c9a:	6013      	str	r3, [r2, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <LL_RCC_SetRFWKPClockSource>:
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <LL_RCC_SetSMPSClockSource>:
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	f023 0203 	bic.w	r2, r3, #3
 8005ce4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <LL_RCC_SetSMPSPrescaler>:
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <LL_RCC_SetUSARTClockSource>:
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d32:	f023 0203 	bic.w	r2, r3, #3
 8005d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_RCC_SetLPUARTClockSource>:
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <LL_RCC_SetI2CClockSource>:
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d92:	43db      	mvns	r3, r3
 8005d94:	401a      	ands	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <LL_RCC_SetLPTIMClockSource>:
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	0c1b      	lsrs	r3, r3, #16
 8005dc8:	041b      	lsls	r3, r3, #16
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	401a      	ands	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	041b      	lsls	r3, r3, #16
 8005dd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <LL_RCC_SetSAIClockSource>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <LL_RCC_SetRNGClockSource>:
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e24:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_RCC_SetCLK48ClockSource>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_RCC_SetUSBClockSource>:
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff ffe3 	bl	8005e40 <LL_RCC_SetCLK48ClockSource>
}
 8005e7a:	bf00      	nop
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <LL_RCC_SetADCClockSource>:
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005e8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ea2:	bf00      	nop
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <LL_RCC_SetRTCClockSource>:
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ec2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005ece:	bf00      	nop
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <LL_RCC_GetRTCClockSource>:
{
 8005eda:	b480      	push	{r7}
 8005edc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <LL_RCC_ForceBackupDomainReset>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f0c:	bf00      	nop
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005f16:	b480      	push	{r7}
 8005f18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <LL_RCC_PLLSAI1_Enable>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f4a:	6013      	str	r3, [r2, #0]
}
 8005f4c:	bf00      	nop
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <LL_RCC_PLLSAI1_Disable>:
{
 8005f56:	b480      	push	{r7}
 8005f58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f68:	6013      	str	r3, [r2, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <LL_RCC_PLLSAI1_IsReady>:
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f86:	d101      	bne.n	8005f8c <LL_RCC_PLLSAI1_IsReady+0x18>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b088      	sub	sp, #32
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d034      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fbc:	d021      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005fbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005fc2:	d81b      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fc8:	d01d      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005fca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005fce:	d815      	bhi.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fd8:	d110      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005fea:	e00d      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 f94d 	bl	8006290 <RCCEx_PLLSAI1_ConfigNP>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ffa:	e005      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	77fb      	strb	r3, [r7, #31]
        break;
 8006000:	e002      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006002:	bf00      	nop
 8006004:	e000      	b.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006008:	7ffb      	ldrb	r3, [r7, #31]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d105      	bne.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fee8 	bl	8005de8 <LL_RCC_SetSAIClockSource>
 8006018:	e001      	b.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800601a:	7ffb      	ldrb	r3, [r7, #31]
 800601c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006026:	2b00      	cmp	r3, #0
 8006028:	d046      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800602a:	f7ff ff56 	bl	8005eda <LL_RCC_GetRTCClockSource>
 800602e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	429a      	cmp	r2, r3
 8006038:	d03c      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800603a:	f7fe fc59 	bl	80048f0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff30 	bl	8005eae <LL_RCC_SetRTCClockSource>
 800604e:	e02e      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8006050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006058:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800605a:	f7ff ff4b 	bl	8005ef4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800605e:	f7ff ff5a 	bl	8005f16 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606c:	4313      	orrs	r3, r2
 800606e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800607a:	f7ff fde1 	bl	8005c40 <LL_RCC_LSE_IsEnabled>
 800607e:	4603      	mov	r3, r0
 8006080:	2b01      	cmp	r3, #1
 8006082:	d114      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006084:	f7fd fffc 	bl	8004080 <HAL_GetTick>
 8006088:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800608a:	e00b      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608c:	f7fd fff8 	bl	8004080 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	f241 3288 	movw	r2, #5000	; 0x1388
 800609a:	4293      	cmp	r3, r2
 800609c:	d902      	bls.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	77fb      	strb	r3, [r7, #31]
              break;
 80060a2:	e004      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80060a4:	f7ff fdde 	bl	8005c64 <LL_RCC_LSE_IsReady>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d1ee      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80060ae:	7ffb      	ldrb	r3, [r7, #31]
 80060b0:	77bb      	strb	r3, [r7, #30]
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	7ffb      	ldrb	r3, [r7, #31]
 80060b6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d004      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fe2a 	bl	8005d22 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fe35 	bl	8005d4e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0310 	and.w	r3, r3, #16
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d004      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff fe5d 	bl	8005db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d004      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fe52 	bl	8005db4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fe2a 	bl	8005d7a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0308 	and.w	r3, r3, #8
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fe1f 	bl	8005d7a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006144:	2b00      	cmp	r3, #0
 8006146:	d022      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fe8d 	bl	8005e6c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615a:	d107      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800615c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800616a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006170:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006174:	d10b      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3304      	adds	r3, #4
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f8e3 	bl	8006346 <RCCEx_PLLSAI1_ConfigNQ>
 8006180:	4603      	mov	r3, r0
 8006182:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006184:	7ffb      	ldrb	r3, [r7, #31]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800618a:	7ffb      	ldrb	r3, [r7, #31]
 800618c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006196:	2b00      	cmp	r3, #0
 8006198:	d02b      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a2:	d008      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ac:	d003      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d105      	bne.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff fe2a 	bl	8005e14 <LL_RCC_SetRNGClockSource>
 80061c0:	e00a      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	2000      	movs	r0, #0
 80061ce:	f7ff fe21 	bl	8005e14 <LL_RCC_SetRNGClockSource>
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f7ff fe34 	bl	8005e40 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80061e0:	d107      	bne.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d022      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006202:	4618      	mov	r0, r3
 8006204:	f7ff fe3d 	bl	8005e82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800620c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006210:	d107      	bne.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800621c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006220:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800622a:	d10b      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	3304      	adds	r3, #4
 8006230:	4618      	mov	r0, r3
 8006232:	f000 f8e3 	bl	80063fc <RCCEx_PLLSAI1_ConfigNR>
 8006236:	4603      	mov	r3, r0
 8006238:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d001      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006240:	7ffb      	ldrb	r3, [r7, #31]
 8006242:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fd26 	bl	8005ca6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800626a:	4618      	mov	r0, r3
 800626c:	f7ff fd45 	bl	8005cfa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fd2c 	bl	8005cd2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800627a:	7fbb      	ldrb	r3, [r7, #30]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006288:	f7ff fcfe 	bl	8005c88 <LL_RCC_MSI_EnablePLLMode>
}
 800628c:	bf00      	nop
 800628e:	bd80      	pop	{r7, pc}

08006290 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800629c:	f7ff fe5b 	bl	8005f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062a0:	f7fd feee 	bl	8004080 <HAL_GetTick>
 80062a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062a6:	e009      	b.n	80062bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062a8:	f7fd feea 	bl	8004080 <HAL_GetTick>
 80062ac:	4602      	mov	r2, r0
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	2b02      	cmp	r3, #2
 80062b4:	d902      	bls.n	80062bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	73fb      	strb	r3, [r7, #15]
      break;
 80062ba:	e004      	b.n	80062c6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80062bc:	f7ff fe5a 	bl	8005f74 <LL_RCC_PLLSAI1_IsReady>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1f0      	bne.n	80062a8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80062c6:	7bfb      	ldrb	r3, [r7, #15]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d137      	bne.n	800633c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80062cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	021b      	lsls	r3, r3, #8
 80062dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062e0:	4313      	orrs	r3, r2
 80062e2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80062e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f6:	4313      	orrs	r3, r2
 80062f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062fa:	f7ff fe1d 	bl	8005f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fe:	f7fd febf 	bl	8004080 <HAL_GetTick>
 8006302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006304:	e009      	b.n	800631a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006306:	f7fd febb 	bl	8004080 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	d902      	bls.n	800631a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	73fb      	strb	r3, [r7, #15]
        break;
 8006318:	e004      	b.n	8006324 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800631a:	f7ff fe2b 	bl	8005f74 <LL_RCC_PLLSAI1_IsReady>
 800631e:	4603      	mov	r3, r0
 8006320:	2b01      	cmp	r3, #1
 8006322:	d1f0      	bne.n	8006306 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d108      	bne.n	800633c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006338:	4313      	orrs	r3, r2
 800633a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800633c:	7bfb      	ldrb	r3, [r7, #15]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006352:	f7ff fe00 	bl	8005f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006356:	f7fd fe93 	bl	8004080 <HAL_GetTick>
 800635a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800635c:	e009      	b.n	8006372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800635e:	f7fd fe8f 	bl	8004080 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	2b02      	cmp	r3, #2
 800636a:	d902      	bls.n	8006372 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	73fb      	strb	r3, [r7, #15]
      break;
 8006370:	e004      	b.n	800637c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006372:	f7ff fdff 	bl	8005f74 <LL_RCC_PLLSAI1_IsReady>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f0      	bne.n	800635e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d137      	bne.n	80063f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006396:	4313      	orrs	r3, r2
 8006398:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ac:	4313      	orrs	r3, r2
 80063ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80063b0:	f7ff fdc2 	bl	8005f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063b4:	f7fd fe64 	bl	8004080 <HAL_GetTick>
 80063b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063ba:	e009      	b.n	80063d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063bc:	f7fd fe60 	bl	8004080 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d902      	bls.n	80063d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	73fb      	strb	r3, [r7, #15]
        break;
 80063ce:	e004      	b.n	80063da <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80063d0:	f7ff fdd0 	bl	8005f74 <LL_RCC_PLLSAI1_IsReady>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d1f0      	bne.n	80063bc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80063da:	7bfb      	ldrb	r3, [r7, #15]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d108      	bne.n	80063f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80063e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063e4:	691a      	ldr	r2, [r3, #16]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ee:	4313      	orrs	r3, r2
 80063f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006404:	2300      	movs	r3, #0
 8006406:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006408:	f7ff fda5 	bl	8005f56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800640c:	f7fd fe38 	bl	8004080 <HAL_GetTick>
 8006410:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006412:	e009      	b.n	8006428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006414:	f7fd fe34 	bl	8004080 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	2b02      	cmp	r3, #2
 8006420:	d902      	bls.n	8006428 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	73fb      	strb	r3, [r7, #15]
      break;
 8006426:	e004      	b.n	8006432 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006428:	f7ff fda4 	bl	8005f74 <LL_RCC_PLLSAI1_IsReady>
 800642c:	4603      	mov	r3, r0
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1f0      	bne.n	8006414 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d137      	bne.n	80064a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	021b      	lsls	r3, r3, #8
 8006448:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800644c:	4313      	orrs	r3, r2
 800644e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006462:	4313      	orrs	r3, r2
 8006464:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006466:	f7ff fd67 	bl	8005f38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800646a:	f7fd fe09 	bl	8004080 <HAL_GetTick>
 800646e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006470:	e009      	b.n	8006486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006472:	f7fd fe05 	bl	8004080 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	2b02      	cmp	r3, #2
 800647e:	d902      	bls.n	8006486 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006480:	2303      	movs	r3, #3
 8006482:	73fb      	strb	r3, [r7, #15]
        break;
 8006484:	e004      	b.n	8006490 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006486:	f7ff fd75 	bl	8005f74 <LL_RCC_PLLSAI1_IsReady>
 800648a:	4603      	mov	r3, r0
 800648c:	2b01      	cmp	r3, #1
 800648e:	d1f0      	bne.n	8006472 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006490:	7bfb      	ldrb	r3, [r7, #15]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d108      	bne.n	80064a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80064a4:	4313      	orrs	r3, r2
 80064a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80064a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3710      	adds	r7, #16
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e09f      	b.n	8006606 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fd fa72 	bl	80039c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80064e8:	4b49      	ldr	r3, [pc, #292]	; (8006610 <HAL_RTC_Init+0x15c>)
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f003 0310 	and.w	r3, r3, #16
 80064f0:	2b10      	cmp	r3, #16
 80064f2:	d07e      	beq.n	80065f2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	22ca      	movs	r2, #202	; 0xca
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2253      	movs	r2, #83	; 0x53
 8006502:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f000 fac6 	bl	8006a96 <RTC_EnterInitMode>
 800650a:	4603      	mov	r3, r0
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	22ff      	movs	r2, #255	; 0xff
 8006516:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2204      	movs	r2, #4
 800651c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e067      	b.n	80065f6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	6812      	ldr	r2, [r2, #0]
 8006530:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006538:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6899      	ldr	r1, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	68d2      	ldr	r2, [r2, #12]
 8006560:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	6919      	ldr	r1, [r3, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	041a      	lsls	r2, r3, #16
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006584:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0203 	bic.w	r2, r2, #3
 8006594:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	431a      	orrs	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0320 	and.w	r3, r3, #32
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d113      	bne.n	80065e4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f000 fa44 	bl	8006a4a <HAL_RTC_WaitForSynchro>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00d      	beq.n	80065e4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	22ff      	movs	r2, #255	; 0xff
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2204      	movs	r2, #4
 80065d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e010      	b.n	8006606 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	e001      	b.n	80065f6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80065f2:	2300      	movs	r3, #0
 80065f4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d103      	bne.n	8006604 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006604:	7bfb      	ldrb	r3, [r7, #15]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	40002800 	.word	0x40002800

08006614 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006614:	b590      	push	{r4, r7, lr}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d101      	bne.n	800662e <HAL_RTC_SetTime+0x1a>
 800662a:	2302      	movs	r3, #2
 800662c:	e0b2      	b.n	8006794 <HAL_RTC_SetTime+0x180>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2202      	movs	r2, #2
 800663a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d126      	bne.n	8006692 <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800664e:	2b00      	cmp	r3, #0
 8006650:	d102      	bne.n	8006658 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	2200      	movs	r2, #0
 8006656:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f000 fa44 	bl	8006aea <RTC_ByteToBcd2>
 8006662:	4603      	mov	r3, r0
 8006664:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	785b      	ldrb	r3, [r3, #1]
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fa3d 	bl	8006aea <RTC_ByteToBcd2>
 8006670:	4603      	mov	r3, r0
 8006672:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006674:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	789b      	ldrb	r3, [r3, #2]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fa35 	bl	8006aea <RTC_ByteToBcd2>
 8006680:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006682:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	78db      	ldrb	r3, [r3, #3]
 800668a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800668c:	4313      	orrs	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	e018      	b.n	80066c4 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2200      	movs	r2, #0
 80066a4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80066b2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80066b8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	78db      	ldrb	r3, [r3, #3]
 80066be:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	22ca      	movs	r2, #202	; 0xca
 80066ca:	625a      	str	r2, [r3, #36]	; 0x24
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2253      	movs	r2, #83	; 0x53
 80066d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f9de 	bl	8006a96 <RTC_EnterInitMode>
 80066da:	4603      	mov	r3, r0
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00d      	beq.n	80066fc <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	22ff      	movs	r2, #255	; 0xff
 80066e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2204      	movs	r2, #4
 80066ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e04b      	b.n	8006794 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006706:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800670a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	689a      	ldr	r2, [r3, #8]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800671a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6899      	ldr	r1, [r3, #8]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	68da      	ldr	r2, [r3, #12]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	431a      	orrs	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006742:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	2b00      	cmp	r3, #0
 8006750:	d113      	bne.n	800677a <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f979 	bl	8006a4a <HAL_RTC_WaitForSynchro>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	22ff      	movs	r2, #255	; 0xff
 8006764:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2204      	movs	r2, #4
 800676a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e00c      	b.n	8006794 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	22ff      	movs	r2, #255	; 0xff
 8006780:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2200      	movs	r2, #0
 800678e:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 8006792:	2300      	movs	r3, #0
  }
}
 8006794:	4618      	mov	r0, r3
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	bd90      	pop	{r4, r7, pc}

0800679c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80067ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80067ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	0c1b      	lsrs	r3, r3, #16
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	0a1b      	lsrs	r3, r3, #8
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ea:	b2da      	uxtb	r2, r3
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	0c1b      	lsrs	r3, r3, #16
 8006802:	b2db      	uxtb	r3, r3
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d11a      	bne.n	800684a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f000 f986 	bl	8006b2a <RTC_Bcd2ToByte>
 800681e:	4603      	mov	r3, r0
 8006820:	461a      	mov	r2, r3
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	785b      	ldrb	r3, [r3, #1]
 800682a:	4618      	mov	r0, r3
 800682c:	f000 f97d 	bl	8006b2a <RTC_Bcd2ToByte>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	789b      	ldrb	r3, [r3, #2]
 800683c:	4618      	mov	r0, r3
 800683e:	f000 f974 	bl	8006b2a <RTC_Bcd2ToByte>
 8006842:	4603      	mov	r3, r0
 8006844:	461a      	mov	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	3718      	adds	r7, #24
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b087      	sub	sp, #28
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d101      	bne.n	800686e <HAL_RTC_SetDate+0x1a>
 800686a:	2302      	movs	r3, #2
 800686c:	e09c      	b.n	80069a8 <HAL_RTC_SetDate+0x154>
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10e      	bne.n	80068a2 <HAL_RTC_SetDate+0x4e>
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	f003 0310 	and.w	r3, r3, #16
 800688c:	2b00      	cmp	r3, #0
 800688e:	d008      	beq.n	80068a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	f023 0310 	bic.w	r3, r3, #16
 8006898:	b2db      	uxtb	r3, r3
 800689a:	330a      	adds	r3, #10
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11c      	bne.n	80068e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	78db      	ldrb	r3, [r3, #3]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f000 f91c 	bl	8006aea <RTC_ByteToBcd2>
 80068b2:	4603      	mov	r3, r0
 80068b4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	785b      	ldrb	r3, [r3, #1]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f000 f915 	bl	8006aea <RTC_ByteToBcd2>
 80068c0:	4603      	mov	r3, r0
 80068c2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80068c4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	789b      	ldrb	r3, [r3, #2]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f90d 	bl	8006aea <RTC_ByteToBcd2>
 80068d0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80068d2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
 80068e0:	e00e      	b.n	8006900 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	78db      	ldrb	r3, [r3, #3]
 80068e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	785b      	ldrb	r3, [r3, #1]
 80068ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80068ee:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80068f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	22ca      	movs	r2, #202	; 0xca
 8006906:	625a      	str	r2, [r3, #36]	; 0x24
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2253      	movs	r2, #83	; 0x53
 800690e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 f8c0 	bl	8006a96 <RTC_EnterInitMode>
 8006916:	4603      	mov	r3, r0
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2204      	movs	r2, #4
 8006928:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e037      	b.n	80069a8 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006942:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006946:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006956:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f003 0320 	and.w	r3, r3, #32
 8006962:	2b00      	cmp	r3, #0
 8006964:	d113      	bne.n	800698e <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 f86f 	bl	8006a4a <HAL_RTC_WaitForSynchro>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00d      	beq.n	800698e <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	22ff      	movs	r2, #255	; 0xff
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2204      	movs	r2, #4
 800697e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e00c      	b.n	80069a8 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	22ff      	movs	r2, #255	; 0xff
 8006994:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
  }
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd90      	pop	{r4, r7, pc}

080069b0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069c6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	0a1b      	lsrs	r3, r3, #8
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 031f 	and.w	r3, r3, #31
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	0b5b      	lsrs	r3, r3, #13
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	f003 0307 	and.w	r3, r3, #7
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d11a      	bne.n	8006a40 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	78db      	ldrb	r3, [r3, #3]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f000 f88b 	bl	8006b2a <RTC_Bcd2ToByte>
 8006a14:	4603      	mov	r3, r0
 8006a16:	461a      	mov	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	4618      	mov	r0, r3
 8006a22:	f000 f882 	bl	8006b2a <RTC_Bcd2ToByte>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	789b      	ldrb	r3, [r3, #2]
 8006a32:	4618      	mov	r0, r3
 8006a34:	f000 f879 	bl	8006b2a <RTC_Bcd2ToByte>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a60:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a62:	f7fd fb0d 	bl	8004080 <HAL_GetTick>
 8006a66:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a68:	e009      	b.n	8006a7e <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a6a:	f7fd fb09 	bl	8004080 <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a78:	d901      	bls.n	8006a7e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e007      	b.n	8006a8e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0ee      	beq.n	8006a6a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}

08006a96 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d119      	bne.n	8006ae0 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006ab6:	f7fd fae3 	bl	8004080 <HAL_GetTick>
 8006aba:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006abc:	e009      	b.n	8006ad2 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006abe:	f7fd fadf 	bl	8004080 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006acc:	d901      	bls.n	8006ad2 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e007      	b.n	8006ae2 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d0ee      	beq.n	8006abe <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	4603      	mov	r3, r0
 8006af2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006af8:	79fb      	ldrb	r3, [r7, #7]
 8006afa:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8006afc:	e005      	b.n	8006b0a <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	3b0a      	subs	r3, #10
 8006b08:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d8f6      	bhi.n	8006afe <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	011b      	lsls	r3, r3, #4
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	7afb      	ldrb	r3, [r7, #11]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	b2db      	uxtb	r3, r3
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3714      	adds	r7, #20
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	4603      	mov	r3, r0
 8006b32:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	091b      	lsrs	r3, r3, #4
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	f003 030f 	and.w	r3, r3, #15
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	4413      	add	r3, r2
 8006b54:	b2db      	uxtb	r3, r3
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d101      	bne.n	8006b74 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e095      	b.n	8006ca0 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d108      	bne.n	8006b8e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b84:	d009      	beq.n	8006b9a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	61da      	str	r2, [r3, #28]
 8006b8c:	e005      	b.n	8006b9a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d106      	bne.n	8006bba <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fc ff31 	bl	8003a1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bda:	d902      	bls.n	8006be2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	e002      	b.n	8006be8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006be6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006bf0:	d007      	beq.n	8006c02 <HAL_SPI_Init+0xa0>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bfa:	d002      	beq.n	8006c02 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c12:	431a      	orrs	r2, r3
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	431a      	orrs	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c30:	431a      	orrs	r2, r3
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c44:	ea42 0103 	orr.w	r1, r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	0c1b      	lsrs	r3, r3, #16
 8006c5e:	f003 0204 	and.w	r2, r3, #4
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	f003 0310 	and.w	r3, r3, #16
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c70:	f003 0308 	and.w	r3, r3, #8
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006c7e:	ea42 0103 	orr.w	r1, r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08a      	sub	sp, #40	; 0x28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <HAL_SPI_TransmitReceive+0x26>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e1fb      	b.n	80070c6 <HAL_SPI_TransmitReceive+0x41e>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cd6:	f7fd f9d3 	bl	8004080 <HAL_GetTick>
 8006cda:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ce2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006cea:	887b      	ldrh	r3, [r7, #2]
 8006cec:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006cee:	887b      	ldrh	r3, [r7, #2]
 8006cf0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cf2:	7efb      	ldrb	r3, [r7, #27]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d00e      	beq.n	8006d16 <HAL_SPI_TransmitReceive+0x6e>
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cfe:	d106      	bne.n	8006d0e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <HAL_SPI_TransmitReceive+0x66>
 8006d08:	7efb      	ldrb	r3, [r7, #27]
 8006d0a:	2b04      	cmp	r3, #4
 8006d0c:	d003      	beq.n	8006d16 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d14:	e1cd      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x80>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d002      	beq.n	8006d28 <HAL_SPI_TransmitReceive+0x80>
 8006d22:	887b      	ldrh	r3, [r7, #2]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d103      	bne.n	8006d30 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006d2e:	e1c0      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d003      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2205      	movs	r2, #5
 8006d40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	887a      	ldrh	r2, [r7, #2]
 8006d54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	887a      	ldrh	r2, [r7, #2]
 8006d5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	887a      	ldrh	r2, [r7, #2]
 8006d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	887a      	ldrh	r2, [r7, #2]
 8006d70:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006d86:	d802      	bhi.n	8006d8e <HAL_SPI_TransmitReceive+0xe6>
 8006d88:	8a3b      	ldrh	r3, [r7, #16]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d908      	bls.n	8006da0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	e007      	b.n	8006db0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006dae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dba:	2b40      	cmp	r3, #64	; 0x40
 8006dbc:	d007      	beq.n	8006dce <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dcc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006dd6:	d97c      	bls.n	8006ed2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <HAL_SPI_TransmitReceive+0x13e>
 8006de0:	8a7b      	ldrh	r3, [r7, #18]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d169      	bne.n	8006eba <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dea:	881a      	ldrh	r2, [r3, #0]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	1c9a      	adds	r2, r3, #2
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e0a:	e056      	b.n	8006eba <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d11b      	bne.n	8006e52 <HAL_SPI_TransmitReceive+0x1aa>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d016      	beq.n	8006e52 <HAL_SPI_TransmitReceive+0x1aa>
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	2b01      	cmp	r3, #1
 8006e28:	d113      	bne.n	8006e52 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	881a      	ldrh	r2, [r3, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e3a:	1c9a      	adds	r2, r3, #2
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	3b01      	subs	r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 0301 	and.w	r3, r3, #1
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d11c      	bne.n	8006e9a <HAL_SPI_TransmitReceive+0x1f2>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d016      	beq.n	8006e9a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68da      	ldr	r2, [r3, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	b292      	uxth	r2, r2
 8006e78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	1c9a      	adds	r2, r3, #2
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	b29a      	uxth	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e96:	2301      	movs	r3, #1
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e9a:	f7fd f8f1 	bl	8004080 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d807      	bhi.n	8006eba <HAL_SPI_TransmitReceive+0x212>
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb0:	d003      	beq.n	8006eba <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006eb8:	e0fb      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1a3      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x164>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d19d      	bne.n	8006e0c <HAL_SPI_TransmitReceive+0x164>
 8006ed0:	e0df      	b.n	8007092 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x23a>
 8006eda:	8a7b      	ldrh	r3, [r7, #18]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	f040 80cb 	bne.w	8007078 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d912      	bls.n	8006f12 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	881a      	ldrh	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	1c9a      	adds	r2, r3, #2
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b02      	subs	r3, #2
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f10:	e0b2      	b.n	8007078 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	330c      	adds	r3, #12
 8006f1c:	7812      	ldrb	r2, [r2, #0]
 8006f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f38:	e09e      	b.n	8007078 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f003 0302 	and.w	r3, r3, #2
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d134      	bne.n	8006fb2 <HAL_SPI_TransmitReceive+0x30a>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d02f      	beq.n	8006fb2 <HAL_SPI_TransmitReceive+0x30a>
 8006f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d12c      	bne.n	8006fb2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d912      	bls.n	8006f88 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	881a      	ldrh	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f72:	1c9a      	adds	r2, r3, #2
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b02      	subs	r3, #2
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f86:	e012      	b.n	8006fae <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	330c      	adds	r3, #12
 8006f92:	7812      	ldrb	r2, [r2, #0]
 8006f94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	3b01      	subs	r3, #1
 8006fa8:	b29a      	uxth	r2, r3
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d148      	bne.n	8007052 <HAL_SPI_TransmitReceive+0x3aa>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d042      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d923      	bls.n	8007020 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68da      	ldr	r2, [r3, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fe2:	b292      	uxth	r2, r2
 8006fe4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	1c9a      	adds	r2, r3, #2
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	3b02      	subs	r3, #2
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b01      	cmp	r3, #1
 800700c:	d81f      	bhi.n	800704e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800701c:	605a      	str	r2, [r3, #4]
 800701e:	e016      	b.n	800704e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f103 020c 	add.w	r2, r3, #12
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	7812      	ldrb	r2, [r2, #0]
 800702e:	b2d2      	uxtb	r2, r2
 8007030:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007036:	1c5a      	adds	r2, r3, #1
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007042:	b29b      	uxth	r3, r3
 8007044:	3b01      	subs	r3, #1
 8007046:	b29a      	uxth	r2, r3
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800704e:	2301      	movs	r3, #1
 8007050:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007052:	f7fd f815 	bl	8004080 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800705e:	429a      	cmp	r2, r3
 8007060:	d803      	bhi.n	800706a <HAL_SPI_TransmitReceive+0x3c2>
 8007062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d102      	bne.n	8007070 <HAL_SPI_TransmitReceive+0x3c8>
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	2b00      	cmp	r3, #0
 800706e:	d103      	bne.n	8007078 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007076:	e01c      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	f47f af5b 	bne.w	8006f3a <HAL_SPI_TransmitReceive+0x292>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f af54 	bne.w	8006f3a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007092:	69fa      	ldr	r2, [r7, #28]
 8007094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 f938 	bl	800730c <SPI_EndRxTxTransaction>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	661a      	str	r2, [r3, #96]	; 0x60
 80070ae:	e000      	b.n	80070b2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80070b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80070c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3728      	adds	r7, #40	; 0x28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b088      	sub	sp, #32
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60f8      	str	r0, [r7, #12]
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4613      	mov	r3, r2
 80070de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070e0:	f7fc ffce 	bl	8004080 <HAL_GetTick>
 80070e4:	4602      	mov	r2, r0
 80070e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	4413      	add	r3, r2
 80070ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80070f0:	f7fc ffc6 	bl	8004080 <HAL_GetTick>
 80070f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	015b      	lsls	r3, r3, #5
 80070fc:	0d1b      	lsrs	r3, r3, #20
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	fb02 f303 	mul.w	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007106:	e054      	b.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800710e:	d050      	beq.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007110:	f7fc ffb6 	bl	8004080 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	69fa      	ldr	r2, [r7, #28]
 800711c:	429a      	cmp	r2, r3
 800711e:	d902      	bls.n	8007126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d13d      	bne.n	80071a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800713e:	d111      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007148:	d004      	beq.n	8007154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007152:	d107      	bne.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716c:	d10f      	bne.n	800718e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800718c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2201      	movs	r2, #1
 8007192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e017      	b.n	80071d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d101      	bne.n	80071ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689a      	ldr	r2, [r3, #8]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	4013      	ands	r3, r2
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	429a      	cmp	r2, r3
 80071c0:	bf0c      	ite	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	2300      	movne	r3, #0
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	461a      	mov	r2, r3
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d19b      	bne.n	8007108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	20000008 	.word	0x20000008

080071e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b08a      	sub	sp, #40	; 0x28
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80071ee:	2300      	movs	r3, #0
 80071f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80071f2:	f7fc ff45 	bl	8004080 <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	1a9b      	subs	r3, r3, r2
 80071fc:	683a      	ldr	r2, [r7, #0]
 80071fe:	4413      	add	r3, r2
 8007200:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007202:	f7fc ff3d 	bl	8004080 <HAL_GetTick>
 8007206:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	330c      	adds	r3, #12
 800720e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007210:	4b3d      	ldr	r3, [pc, #244]	; (8007308 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	00da      	lsls	r2, r3, #3
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	0d1b      	lsrs	r3, r3, #20
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	fb02 f303 	mul.w	r3, r2, r3
 8007226:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007228:	e060      	b.n	80072ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007230:	d107      	bne.n	8007242 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d104      	bne.n	8007242 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007240:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007248:	d050      	beq.n	80072ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800724a:	f7fc ff19 	bl	8004080 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007256:	429a      	cmp	r2, r3
 8007258:	d902      	bls.n	8007260 <SPI_WaitFifoStateUntilTimeout+0x80>
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d13d      	bne.n	80072dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800726e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007278:	d111      	bne.n	800729e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	689b      	ldr	r3, [r3, #8]
 800727e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007282:	d004      	beq.n	800728e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800728c:	d107      	bne.n	800729e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800729c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072a6:	d10f      	bne.n	80072c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e010      	b.n	80072fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80072e2:	2300      	movs	r3, #0
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	4013      	ands	r3, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d196      	bne.n	800722a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3728      	adds	r7, #40	; 0x28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000008 	.word	0x20000008

0800730c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af02      	add	r7, sp, #8
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	9300      	str	r3, [sp, #0]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2200      	movs	r2, #0
 8007320:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f7ff ff5b 	bl	80071e0 <SPI_WaitFifoStateUntilTimeout>
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007334:	f043 0220 	orr.w	r2, r3, #32
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800733c:	2303      	movs	r3, #3
 800733e:	e027      	b.n	8007390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2200      	movs	r2, #0
 8007348:	2180      	movs	r1, #128	; 0x80
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fec0 	bl	80070d0 <SPI_WaitFlagStateUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735a:	f043 0220 	orr.w	r2, r3, #32
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007362:	2303      	movs	r3, #3
 8007364:	e014      	b.n	8007390 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	2200      	movs	r2, #0
 800736e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f7ff ff34 	bl	80071e0 <SPI_WaitFifoStateUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d007      	beq.n	800738e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007382:	f043 0220 	orr.w	r2, r3, #32
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e000      	b.n	8007390 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e049      	b.n	800743e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7fc fba2 	bl	8003b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2202      	movs	r2, #2
 80073c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3304      	adds	r3, #4
 80073d4:	4619      	mov	r1, r3
 80073d6:	4610      	mov	r0, r2
 80073d8:	f000 fb22 	bl	8007a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b082      	sub	sp, #8
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d101      	bne.n	8007458 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e049      	b.n	80074ec <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 f841 	bl	80074f4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	4619      	mov	r1, r3
 8007484:	4610      	mov	r0, r2
 8007486:	f000 facb 	bl	8007a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d122      	bne.n	8007564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0302 	and.w	r3, r3, #2
 8007528:	2b02      	cmp	r3, #2
 800752a:	d11b      	bne.n	8007564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0202 	mvn.w	r2, #2
 8007534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f003 0303 	and.w	r3, r3, #3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa49 	bl	80079e2 <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa3b 	bl	80079ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fa4c 	bl	80079f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b04      	cmp	r3, #4
 8007570:	d122      	bne.n	80075b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0304 	and.w	r3, r3, #4
 800757c:	2b04      	cmp	r3, #4
 800757e:	d11b      	bne.n	80075b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0204 	mvn.w	r2, #4
 8007588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2202      	movs	r2, #2
 800758e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa1f 	bl	80079e2 <HAL_TIM_IC_CaptureCallback>
 80075a4:	e005      	b.n	80075b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa11 	bl	80079ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa22 	bl	80079f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b08      	cmp	r3, #8
 80075c4:	d122      	bne.n	800760c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0308 	and.w	r3, r3, #8
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d11b      	bne.n	800760c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0208 	mvn.w	r2, #8
 80075dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2204      	movs	r2, #4
 80075e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f003 0303 	and.w	r3, r3, #3
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9f5 	bl	80079e2 <HAL_TIM_IC_CaptureCallback>
 80075f8:	e005      	b.n	8007606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9e7 	bl	80079ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f9f8 	bl	80079f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0310 	and.w	r3, r3, #16
 8007616:	2b10      	cmp	r3, #16
 8007618:	d122      	bne.n	8007660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b10      	cmp	r3, #16
 8007626:	d11b      	bne.n	8007660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0210 	mvn.w	r2, #16
 8007630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2208      	movs	r2, #8
 8007636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 f9cb 	bl	80079e2 <HAL_TIM_IC_CaptureCallback>
 800764c:	e005      	b.n	800765a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f9bd 	bl	80079ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f9ce 	bl	80079f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b01      	cmp	r3, #1
 800766c:	d10e      	bne.n	800768c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b01      	cmp	r3, #1
 800767a:	d107      	bne.n	800768c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0201 	mvn.w	r2, #1
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fb fd92 	bl	80031b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b80      	cmp	r3, #128	; 0x80
 8007698:	d10e      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a4:	2b80      	cmp	r3, #128	; 0x80
 80076a6:	d107      	bne.n	80076b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f000 fe2c 	bl	8008310 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076c6:	d10e      	bne.n	80076e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d2:	2b80      	cmp	r3, #128	; 0x80
 80076d4:	d107      	bne.n	80076e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fe1f 	bl	8008324 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691b      	ldr	r3, [r3, #16]
 80076ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f0:	2b40      	cmp	r3, #64	; 0x40
 80076f2:	d10e      	bne.n	8007712 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b40      	cmp	r3, #64	; 0x40
 8007700:	d107      	bne.n	8007712 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800770a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f97c 	bl	8007a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	691b      	ldr	r3, [r3, #16]
 8007718:	f003 0320 	and.w	r3, r3, #32
 800771c:	2b20      	cmp	r3, #32
 800771e:	d10e      	bne.n	800773e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f003 0320 	and.w	r3, r3, #32
 800772a:	2b20      	cmp	r3, #32
 800772c:	d107      	bne.n	800773e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f06f 0220 	mvn.w	r2, #32
 8007736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 fddf 	bl	80082fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800773e:	bf00      	nop
 8007740:	3708      	adds	r7, #8
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007762:	2302      	movs	r3, #2
 8007764:	e066      	b.n	8007834 <HAL_TIM_OC_ConfigChannel+0xec>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b14      	cmp	r3, #20
 8007772:	d857      	bhi.n	8007824 <HAL_TIM_OC_ConfigChannel+0xdc>
 8007774:	a201      	add	r2, pc, #4	; (adr r2, 800777c <HAL_TIM_OC_ConfigChannel+0x34>)
 8007776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777a:	bf00      	nop
 800777c:	080077d1 	.word	0x080077d1
 8007780:	08007825 	.word	0x08007825
 8007784:	08007825 	.word	0x08007825
 8007788:	08007825 	.word	0x08007825
 800778c:	080077df 	.word	0x080077df
 8007790:	08007825 	.word	0x08007825
 8007794:	08007825 	.word	0x08007825
 8007798:	08007825 	.word	0x08007825
 800779c:	080077ed 	.word	0x080077ed
 80077a0:	08007825 	.word	0x08007825
 80077a4:	08007825 	.word	0x08007825
 80077a8:	08007825 	.word	0x08007825
 80077ac:	080077fb 	.word	0x080077fb
 80077b0:	08007825 	.word	0x08007825
 80077b4:	08007825 	.word	0x08007825
 80077b8:	08007825 	.word	0x08007825
 80077bc:	08007809 	.word	0x08007809
 80077c0:	08007825 	.word	0x08007825
 80077c4:	08007825 	.word	0x08007825
 80077c8:	08007825 	.word	0x08007825
 80077cc:	08007817 	.word	0x08007817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68b9      	ldr	r1, [r7, #8]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f000 f986 	bl	8007ae8 <TIM_OC1_SetConfig>
      break;
 80077dc:	e025      	b.n	800782a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	68b9      	ldr	r1, [r7, #8]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 f9fb 	bl	8007be0 <TIM_OC2_SetConfig>
      break;
 80077ea:	e01e      	b.n	800782a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f000 fa6e 	bl	8007cd4 <TIM_OC3_SetConfig>
      break;
 80077f8:	e017      	b.n	800782a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68b9      	ldr	r1, [r7, #8]
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fadf 	bl	8007dc4 <TIM_OC4_SetConfig>
      break;
 8007806:	e010      	b.n	800782a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68b9      	ldr	r1, [r7, #8]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fb36 	bl	8007e80 <TIM_OC5_SetConfig>
      break;
 8007814:	e009      	b.n	800782a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68b9      	ldr	r1, [r7, #8]
 800781c:	4618      	mov	r0, r3
 800781e:	f000 fb87 	bl	8007f30 <TIM_OC6_SetConfig>
      break;
 8007822:	e002      	b.n	800782a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	75fb      	strb	r3, [r7, #23]
      break;
 8007828:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007832:	7dfb      	ldrb	r3, [r7, #23]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3718      	adds	r7, #24
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_TIM_ConfigClockSource+0x1c>
 8007854:	2302      	movs	r3, #2
 8007856:	e0b6      	b.n	80079c6 <HAL_TIM_ConfigClockSource+0x18a>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007876:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800787a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	68ba      	ldr	r2, [r7, #8]
 800788a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007894:	d03e      	beq.n	8007914 <HAL_TIM_ConfigClockSource+0xd8>
 8007896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800789a:	f200 8087 	bhi.w	80079ac <HAL_TIM_ConfigClockSource+0x170>
 800789e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a2:	f000 8086 	beq.w	80079b2 <HAL_TIM_ConfigClockSource+0x176>
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	d87f      	bhi.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
 80078ac:	2b70      	cmp	r3, #112	; 0x70
 80078ae:	d01a      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0xaa>
 80078b0:	2b70      	cmp	r3, #112	; 0x70
 80078b2:	d87b      	bhi.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
 80078b4:	2b60      	cmp	r3, #96	; 0x60
 80078b6:	d050      	beq.n	800795a <HAL_TIM_ConfigClockSource+0x11e>
 80078b8:	2b60      	cmp	r3, #96	; 0x60
 80078ba:	d877      	bhi.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
 80078bc:	2b50      	cmp	r3, #80	; 0x50
 80078be:	d03c      	beq.n	800793a <HAL_TIM_ConfigClockSource+0xfe>
 80078c0:	2b50      	cmp	r3, #80	; 0x50
 80078c2:	d873      	bhi.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	d058      	beq.n	800797a <HAL_TIM_ConfigClockSource+0x13e>
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	d86f      	bhi.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
 80078cc:	2b30      	cmp	r3, #48	; 0x30
 80078ce:	d064      	beq.n	800799a <HAL_TIM_ConfigClockSource+0x15e>
 80078d0:	2b30      	cmp	r3, #48	; 0x30
 80078d2:	d86b      	bhi.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d060      	beq.n	800799a <HAL_TIM_ConfigClockSource+0x15e>
 80078d8:	2b20      	cmp	r3, #32
 80078da:	d867      	bhi.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d05c      	beq.n	800799a <HAL_TIM_ConfigClockSource+0x15e>
 80078e0:	2b10      	cmp	r3, #16
 80078e2:	d05a      	beq.n	800799a <HAL_TIM_ConfigClockSource+0x15e>
 80078e4:	e062      	b.n	80079ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	6899      	ldr	r1, [r3, #8]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f000 fbf1 	bl	80080dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	609a      	str	r2, [r3, #8]
      break;
 8007912:	e04f      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6818      	ldr	r0, [r3, #0]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	6899      	ldr	r1, [r3, #8]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	f000 fbda 	bl	80080dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007936:	609a      	str	r2, [r3, #8]
      break;
 8007938:	e03c      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6818      	ldr	r0, [r3, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	6859      	ldr	r1, [r3, #4]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	461a      	mov	r2, r3
 8007948:	f000 fb4c 	bl	8007fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2150      	movs	r1, #80	; 0x50
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fba5 	bl	80080a2 <TIM_ITRx_SetConfig>
      break;
 8007958:	e02c      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6818      	ldr	r0, [r3, #0]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6859      	ldr	r1, [r3, #4]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	461a      	mov	r2, r3
 8007968:	f000 fb6b 	bl	8008042 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2160      	movs	r1, #96	; 0x60
 8007972:	4618      	mov	r0, r3
 8007974:	f000 fb95 	bl	80080a2 <TIM_ITRx_SetConfig>
      break;
 8007978:	e01c      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6818      	ldr	r0, [r3, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	6859      	ldr	r1, [r3, #4]
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	461a      	mov	r2, r3
 8007988:	f000 fb2c 	bl	8007fe4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2140      	movs	r1, #64	; 0x40
 8007992:	4618      	mov	r0, r3
 8007994:	f000 fb85 	bl	80080a2 <TIM_ITRx_SetConfig>
      break;
 8007998:	e00c      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4619      	mov	r1, r3
 80079a4:	4610      	mov	r0, r2
 80079a6:	f000 fb7c 	bl	80080a2 <TIM_ITRx_SetConfig>
      break;
 80079aa:	e003      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	73fb      	strb	r3, [r7, #15]
      break;
 80079b0:	e000      	b.n	80079b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80079b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80079c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079ce:	b480      	push	{r7}
 80079d0:	b083      	sub	sp, #12
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079d6:	bf00      	nop
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079ea:	bf00      	nop
 80079ec:	370c      	adds	r7, #12
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b083      	sub	sp, #12
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80079fe:	bf00      	nop
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b083      	sub	sp, #12
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a12:	bf00      	nop
 8007a14:	370c      	adds	r7, #12
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a2a      	ldr	r2, [pc, #168]	; (8007adc <TIM_Base_SetConfig+0xbc>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d003      	beq.n	8007a40 <TIM_Base_SetConfig+0x20>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3e:	d108      	bne.n	8007a52 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a21      	ldr	r2, [pc, #132]	; (8007adc <TIM_Base_SetConfig+0xbc>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00b      	beq.n	8007a72 <TIM_Base_SetConfig+0x52>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a60:	d007      	beq.n	8007a72 <TIM_Base_SetConfig+0x52>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1e      	ldr	r2, [pc, #120]	; (8007ae0 <TIM_Base_SetConfig+0xc0>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d003      	beq.n	8007a72 <TIM_Base_SetConfig+0x52>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <TIM_Base_SetConfig+0xc4>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d108      	bne.n	8007a84 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	4a0c      	ldr	r2, [pc, #48]	; (8007adc <TIM_Base_SetConfig+0xbc>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d007      	beq.n	8007ac0 <TIM_Base_SetConfig+0xa0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4a0b      	ldr	r2, [pc, #44]	; (8007ae0 <TIM_Base_SetConfig+0xc0>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d003      	beq.n	8007ac0 <TIM_Base_SetConfig+0xa0>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a0a      	ldr	r2, [pc, #40]	; (8007ae4 <TIM_Base_SetConfig+0xc4>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d103      	bne.n	8007ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	691a      	ldr	r2, [r3, #16]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	615a      	str	r2, [r3, #20]
}
 8007ace:	bf00      	nop
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40012c00 	.word	0x40012c00
 8007ae0:	40014400 	.word	0x40014400
 8007ae4:	40014800 	.word	0x40014800

08007ae8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b087      	sub	sp, #28
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f023 0201 	bic.w	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0303 	bic.w	r3, r3, #3
 8007b22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 0302 	bic.w	r3, r3, #2
 8007b34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a24      	ldr	r2, [pc, #144]	; (8007bd4 <TIM_OC1_SetConfig+0xec>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d007      	beq.n	8007b58 <TIM_OC1_SetConfig+0x70>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a23      	ldr	r2, [pc, #140]	; (8007bd8 <TIM_OC1_SetConfig+0xf0>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_OC1_SetConfig+0x70>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a22      	ldr	r2, [pc, #136]	; (8007bdc <TIM_OC1_SetConfig+0xf4>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d10c      	bne.n	8007b72 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f023 0308 	bic.w	r3, r3, #8
 8007b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f023 0304 	bic.w	r3, r3, #4
 8007b70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <TIM_OC1_SetConfig+0xec>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d007      	beq.n	8007b8a <TIM_OC1_SetConfig+0xa2>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a17      	ldr	r2, [pc, #92]	; (8007bdc <TIM_OC1_SetConfig+0xf4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d003      	beq.n	8007b8a <TIM_OC1_SetConfig+0xa2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a14      	ldr	r2, [pc, #80]	; (8007bd8 <TIM_OC1_SetConfig+0xf0>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d111      	bne.n	8007bae <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	693a      	ldr	r2, [r7, #16]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	699b      	ldr	r3, [r3, #24]
 8007ba8:	693a      	ldr	r2, [r7, #16]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	621a      	str	r2, [r3, #32]
}
 8007bc8:	bf00      	nop
 8007bca:	371c      	adds	r7, #28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	40012c00 	.word	0x40012c00
 8007bd8:	40014800 	.word	0x40014800
 8007bdc:	40014400 	.word	0x40014400

08007be0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	f023 0210 	bic.w	r2, r3, #16
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	699b      	ldr	r3, [r3, #24]
 8007c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f023 0320 	bic.w	r3, r3, #32
 8007c2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	697a      	ldr	r2, [r7, #20]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a22      	ldr	r2, [pc, #136]	; (8007cc8 <TIM_OC2_SetConfig+0xe8>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d10d      	bne.n	8007c60 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	011b      	lsls	r3, r3, #4
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a19      	ldr	r2, [pc, #100]	; (8007cc8 <TIM_OC2_SetConfig+0xe8>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d007      	beq.n	8007c78 <TIM_OC2_SetConfig+0x98>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a18      	ldr	r2, [pc, #96]	; (8007ccc <TIM_OC2_SetConfig+0xec>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d003      	beq.n	8007c78 <TIM_OC2_SetConfig+0x98>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a17      	ldr	r2, [pc, #92]	; (8007cd0 <TIM_OC2_SetConfig+0xf0>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d113      	bne.n	8007ca0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	009b      	lsls	r3, r3, #2
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	697a      	ldr	r2, [r7, #20]
 8007cb8:	621a      	str	r2, [r3, #32]
}
 8007cba:	bf00      	nop
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	40012c00 	.word	0x40012c00
 8007ccc:	40014400 	.word	0x40014400
 8007cd0:	40014800 	.word	0x40014800

08007cd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0303 	bic.w	r3, r3, #3
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68fa      	ldr	r2, [r7, #12]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	021b      	lsls	r3, r3, #8
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <TIM_OC3_SetConfig+0xe4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d10d      	bne.n	8007d52 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68db      	ldr	r3, [r3, #12]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	697a      	ldr	r2, [r7, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <TIM_OC3_SetConfig+0xe4>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d007      	beq.n	8007d6a <TIM_OC3_SetConfig+0x96>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a17      	ldr	r2, [pc, #92]	; (8007dbc <TIM_OC3_SetConfig+0xe8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d003      	beq.n	8007d6a <TIM_OC3_SetConfig+0x96>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <TIM_OC3_SetConfig+0xec>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d113      	bne.n	8007d92 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	011b      	lsls	r3, r3, #4
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	697a      	ldr	r2, [r7, #20]
 8007daa:	621a      	str	r2, [r3, #32]
}
 8007dac:	bf00      	nop
 8007dae:	371c      	adds	r7, #28
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	40012c00 	.word	0x40012c00
 8007dbc:	40014400 	.word	0x40014400
 8007dc0:	40014800 	.word	0x40014800

08007dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	031b      	lsls	r3, r3, #12
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a14      	ldr	r2, [pc, #80]	; (8007e74 <TIM_OC4_SetConfig+0xb0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d007      	beq.n	8007e38 <TIM_OC4_SetConfig+0x74>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a13      	ldr	r2, [pc, #76]	; (8007e78 <TIM_OC4_SetConfig+0xb4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_OC4_SetConfig+0x74>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <TIM_OC4_SetConfig+0xb8>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d109      	bne.n	8007e4c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	40012c00 	.word	0x40012c00
 8007e78:	40014400 	.word	0x40014400
 8007e7c:	40014800 	.word	0x40014800

08007e80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68fa      	ldr	r2, [r7, #12]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007ec4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	041b      	lsls	r3, r3, #16
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a13      	ldr	r2, [pc, #76]	; (8007f24 <TIM_OC5_SetConfig+0xa4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d007      	beq.n	8007eea <TIM_OC5_SetConfig+0x6a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a12      	ldr	r2, [pc, #72]	; (8007f28 <TIM_OC5_SetConfig+0xa8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d003      	beq.n	8007eea <TIM_OC5_SetConfig+0x6a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a11      	ldr	r2, [pc, #68]	; (8007f2c <TIM_OC5_SetConfig+0xac>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d109      	bne.n	8007efe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	621a      	str	r2, [r3, #32]
}
 8007f18:	bf00      	nop
 8007f1a:	371c      	adds	r7, #28
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40012c00 	.word	0x40012c00
 8007f28:	40014400 	.word	0x40014400
 8007f2c:	40014800 	.word	0x40014800

08007f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	021b      	lsls	r3, r3, #8
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	051b      	lsls	r3, r3, #20
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	4a14      	ldr	r2, [pc, #80]	; (8007fd8 <TIM_OC6_SetConfig+0xa8>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d007      	beq.n	8007f9c <TIM_OC6_SetConfig+0x6c>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a13      	ldr	r2, [pc, #76]	; (8007fdc <TIM_OC6_SetConfig+0xac>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_OC6_SetConfig+0x6c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a12      	ldr	r2, [pc, #72]	; (8007fe0 <TIM_OC6_SetConfig+0xb0>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d109      	bne.n	8007fb0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	695b      	ldr	r3, [r3, #20]
 8007fa8:	029b      	lsls	r3, r3, #10
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	68fa      	ldr	r2, [r7, #12]
 8007fba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685a      	ldr	r2, [r3, #4]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	693a      	ldr	r2, [r7, #16]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop
 8007fd8:	40012c00 	.word	0x40012c00
 8007fdc:	40014400 	.word	0x40014400
 8007fe0:	40014800 	.word	0x40014800

08007fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f023 0201 	bic.w	r2, r3, #1
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800800e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f023 030a 	bic.w	r3, r3, #10
 8008020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	621a      	str	r2, [r3, #32]
}
 8008036:	bf00      	nop
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008042:	b480      	push	{r7}
 8008044:	b087      	sub	sp, #28
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f023 0210 	bic.w	r2, r3, #16
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800806c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	031b      	lsls	r3, r3, #12
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800807e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b085      	sub	sp, #20
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080be:	683a      	ldr	r2, [r7, #0]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	f043 0307 	orr.w	r3, r3, #7
 80080c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	609a      	str	r2, [r3, #8]
}
 80080d0:	bf00      	nop
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	021a      	lsls	r2, r3, #8
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	431a      	orrs	r2, r3
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4313      	orrs	r3, r2
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	4313      	orrs	r3, r2
 8008108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	609a      	str	r2, [r3, #8]
}
 8008110:	bf00      	nop
 8008112:	371c      	adds	r7, #28
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008130:	2302      	movs	r3, #2
 8008132:	e04a      	b.n	80081ca <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2202      	movs	r2, #2
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	685b      	ldr	r3, [r3, #4]
 800814a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a1f      	ldr	r2, [pc, #124]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d108      	bne.n	8008170 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008164:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	4313      	orrs	r3, r2
 800816e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a12      	ldr	r2, [pc, #72]	; (80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800819c:	d10c      	bne.n	80081b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	68ba      	ldr	r2, [r7, #8]
 80081ac:	4313      	orrs	r3, r2
 80081ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3714      	adds	r7, #20
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr
 80081d6:	bf00      	nop
 80081d8:	40012c00 	.word	0x40012c00

080081dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d101      	bne.n	80081f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80081f4:	2302      	movs	r3, #2
 80081f6:	e078      	b.n	80082ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	4313      	orrs	r3, r2
 800821a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	4313      	orrs	r3, r2
 8008228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4313      	orrs	r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	4313      	orrs	r3, r2
 8008244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	695b      	ldr	r3, [r3, #20]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	041b      	lsls	r3, r3, #16
 800826e:	4313      	orrs	r3, r2
 8008270:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a20      	ldr	r2, [pc, #128]	; (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d106      	bne.n	800828a <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	4313      	orrs	r3, r2
 8008288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1a      	ldr	r2, [pc, #104]	; (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d121      	bne.n	80082d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829e:	051b      	lsls	r3, r3, #20
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	4313      	orrs	r3, r2
 80082be:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a0c      	ldr	r2, [pc, #48]	; (80082f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d106      	bne.n	80082d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	4313      	orrs	r3, r2
 80082d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40012c00 	.word	0x40012c00

080082fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <LL_RCC_GetUSARTClockSource>:
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008344:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4013      	ands	r3, r2
}
 800834c:	4618      	mov	r0, r3
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <LL_RCC_GetLPUARTClockSource>:
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008364:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4013      	ands	r3, r2
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e042      	b.n	8008410 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7fb fbcf 	bl	8003b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2224      	movs	r2, #36	; 0x24
 80083a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f022 0201 	bic.w	r2, r2, #1
 80083b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f000 f8ba 	bl	8008534 <UART_SetConfig>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d101      	bne.n	80083ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e022      	b.n	8008410 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fad6 	bl	8008984 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	685a      	ldr	r2, [r3, #4]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80083e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80083f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fb5d 	bl	8008ac8 <UART_CheckIdleState>
 800840e:	4603      	mov	r3, r0
}
 8008410:	4618      	mov	r0, r3
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b08a      	sub	sp, #40	; 0x28
 800841c:	af02      	add	r7, sp, #8
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	603b      	str	r3, [r7, #0]
 8008424:	4613      	mov	r3, r2
 8008426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842e:	2b20      	cmp	r3, #32
 8008430:	d17b      	bne.n	800852a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <HAL_UART_Transmit+0x26>
 8008438:	88fb      	ldrh	r3, [r7, #6]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e074      	b.n	800852c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2200      	movs	r2, #0
 8008446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2221      	movs	r2, #33	; 0x21
 800844e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008452:	f7fb fe15 	bl	8004080 <HAL_GetTick>
 8008456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	88fa      	ldrh	r2, [r7, #6]
 800845c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	88fa      	ldrh	r2, [r7, #6]
 8008464:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008470:	d108      	bne.n	8008484 <HAL_UART_Transmit+0x6c>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d104      	bne.n	8008484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	61bb      	str	r3, [r7, #24]
 8008482:	e003      	b.n	800848c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008488:	2300      	movs	r3, #0
 800848a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800848c:	e030      	b.n	80084f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2200      	movs	r2, #0
 8008496:	2180      	movs	r1, #128	; 0x80
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fbbf 	bl	8008c1c <UART_WaitOnFlagUntilTimeout>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80084ac:	2303      	movs	r3, #3
 80084ae:	e03d      	b.n	800852c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	881b      	ldrh	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	3302      	adds	r3, #2
 80084ca:	61bb      	str	r3, [r7, #24]
 80084cc:	e007      	b.n	80084de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	781a      	ldrb	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80084d8:	69fb      	ldr	r3, [r7, #28]
 80084da:	3301      	adds	r3, #1
 80084dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	3b01      	subs	r3, #1
 80084e8:	b29a      	uxth	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1c8      	bne.n	800848e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2200      	movs	r2, #0
 8008504:	2140      	movs	r1, #64	; 0x40
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f000 fb88 	bl	8008c1c <UART_WaitOnFlagUntilTimeout>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d005      	beq.n	800851e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e006      	b.n	800852c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3720      	adds	r7, #32
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008538:	b08c      	sub	sp, #48	; 0x30
 800853a:	af00      	add	r7, sp, #0
 800853c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800853e:	2300      	movs	r3, #0
 8008540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	689a      	ldr	r2, [r3, #8]
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	691b      	ldr	r3, [r3, #16]
 800854c:	431a      	orrs	r2, r3
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	431a      	orrs	r2, r3
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	69db      	ldr	r3, [r3, #28]
 8008558:	4313      	orrs	r3, r2
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	4baf      	ldr	r3, [pc, #700]	; (8008820 <UART_SetConfig+0x2ec>)
 8008564:	4013      	ands	r3, r2
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800856c:	430b      	orrs	r3, r1
 800856e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	699b      	ldr	r3, [r3, #24]
 800858a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4aa4      	ldr	r2, [pc, #656]	; (8008824 <UART_SetConfig+0x2f0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d004      	beq.n	80085a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800859c:	4313      	orrs	r3, r2
 800859e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b4:	430b      	orrs	r3, r1
 80085b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	f023 010f 	bic.w	r1, r3, #15
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a95      	ldr	r2, [pc, #596]	; (8008828 <UART_SetConfig+0x2f4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d125      	bne.n	8008624 <UART_SetConfig+0xf0>
 80085d8:	2003      	movs	r0, #3
 80085da:	f7ff fead 	bl	8008338 <LL_RCC_GetUSARTClockSource>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d81b      	bhi.n	800861c <UART_SetConfig+0xe8>
 80085e4:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <UART_SetConfig+0xb8>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	080085fd 	.word	0x080085fd
 80085f0:	0800860d 	.word	0x0800860d
 80085f4:	08008605 	.word	0x08008605
 80085f8:	08008615 	.word	0x08008615
 80085fc:	2301      	movs	r3, #1
 80085fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008602:	e042      	b.n	800868a <UART_SetConfig+0x156>
 8008604:	2302      	movs	r3, #2
 8008606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800860a:	e03e      	b.n	800868a <UART_SetConfig+0x156>
 800860c:	2304      	movs	r3, #4
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008612:	e03a      	b.n	800868a <UART_SetConfig+0x156>
 8008614:	2308      	movs	r3, #8
 8008616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800861a:	e036      	b.n	800868a <UART_SetConfig+0x156>
 800861c:	2310      	movs	r3, #16
 800861e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008622:	e032      	b.n	800868a <UART_SetConfig+0x156>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a7e      	ldr	r2, [pc, #504]	; (8008824 <UART_SetConfig+0x2f0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d12a      	bne.n	8008684 <UART_SetConfig+0x150>
 800862e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008632:	f7ff fe91 	bl	8008358 <LL_RCC_GetLPUARTClockSource>
 8008636:	4603      	mov	r3, r0
 8008638:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800863c:	d01a      	beq.n	8008674 <UART_SetConfig+0x140>
 800863e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008642:	d81b      	bhi.n	800867c <UART_SetConfig+0x148>
 8008644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008648:	d00c      	beq.n	8008664 <UART_SetConfig+0x130>
 800864a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800864e:	d815      	bhi.n	800867c <UART_SetConfig+0x148>
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <UART_SetConfig+0x128>
 8008654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008658:	d008      	beq.n	800866c <UART_SetConfig+0x138>
 800865a:	e00f      	b.n	800867c <UART_SetConfig+0x148>
 800865c:	2300      	movs	r3, #0
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008662:	e012      	b.n	800868a <UART_SetConfig+0x156>
 8008664:	2302      	movs	r3, #2
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866a:	e00e      	b.n	800868a <UART_SetConfig+0x156>
 800866c:	2304      	movs	r3, #4
 800866e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008672:	e00a      	b.n	800868a <UART_SetConfig+0x156>
 8008674:	2308      	movs	r3, #8
 8008676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800867a:	e006      	b.n	800868a <UART_SetConfig+0x156>
 800867c:	2310      	movs	r3, #16
 800867e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008682:	e002      	b.n	800868a <UART_SetConfig+0x156>
 8008684:	2310      	movs	r3, #16
 8008686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a65      	ldr	r2, [pc, #404]	; (8008824 <UART_SetConfig+0x2f0>)
 8008690:	4293      	cmp	r3, r2
 8008692:	f040 8097 	bne.w	80087c4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008696:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800869a:	2b08      	cmp	r3, #8
 800869c:	d823      	bhi.n	80086e6 <UART_SetConfig+0x1b2>
 800869e:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <UART_SetConfig+0x170>)
 80086a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a4:	080086c9 	.word	0x080086c9
 80086a8:	080086e7 	.word	0x080086e7
 80086ac:	080086d1 	.word	0x080086d1
 80086b0:	080086e7 	.word	0x080086e7
 80086b4:	080086d7 	.word	0x080086d7
 80086b8:	080086e7 	.word	0x080086e7
 80086bc:	080086e7 	.word	0x080086e7
 80086c0:	080086e7 	.word	0x080086e7
 80086c4:	080086df 	.word	0x080086df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086c8:	f7fd f9da 	bl	8005a80 <HAL_RCC_GetPCLK1Freq>
 80086cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086ce:	e010      	b.n	80086f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086d0:	4b56      	ldr	r3, [pc, #344]	; (800882c <UART_SetConfig+0x2f8>)
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086d4:	e00d      	b.n	80086f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086d6:	f7fd f953 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 80086da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086dc:	e009      	b.n	80086f2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086e4:	e005      	b.n	80086f2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80086e6:	2300      	movs	r3, #0
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 812b 	beq.w	8008950 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	4a4c      	ldr	r2, [pc, #304]	; (8008830 <UART_SetConfig+0x2fc>)
 8008700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008704:	461a      	mov	r2, r3
 8008706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008708:	fbb3 f3f2 	udiv	r3, r3, r2
 800870c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	685a      	ldr	r2, [r3, #4]
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	429a      	cmp	r2, r3
 800871c:	d305      	bcc.n	800872a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008724:	69ba      	ldr	r2, [r7, #24]
 8008726:	429a      	cmp	r2, r3
 8008728:	d903      	bls.n	8008732 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800872a:	2301      	movs	r3, #1
 800872c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008730:	e10e      	b.n	8008950 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	2200      	movs	r2, #0
 8008736:	60bb      	str	r3, [r7, #8]
 8008738:	60fa      	str	r2, [r7, #12]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800873e:	4a3c      	ldr	r2, [pc, #240]	; (8008830 <UART_SetConfig+0x2fc>)
 8008740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008744:	b29b      	uxth	r3, r3
 8008746:	2200      	movs	r2, #0
 8008748:	603b      	str	r3, [r7, #0]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008750:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008754:	f7f7 fd6c 	bl	8000230 <__aeabi_uldivmod>
 8008758:	4602      	mov	r2, r0
 800875a:	460b      	mov	r3, r1
 800875c:	4610      	mov	r0, r2
 800875e:	4619      	mov	r1, r3
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	020b      	lsls	r3, r1, #8
 800876a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800876e:	0202      	lsls	r2, r0, #8
 8008770:	6979      	ldr	r1, [r7, #20]
 8008772:	6849      	ldr	r1, [r1, #4]
 8008774:	0849      	lsrs	r1, r1, #1
 8008776:	2000      	movs	r0, #0
 8008778:	460c      	mov	r4, r1
 800877a:	4605      	mov	r5, r0
 800877c:	eb12 0804 	adds.w	r8, r2, r4
 8008780:	eb43 0905 	adc.w	r9, r3, r5
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	469a      	mov	sl, r3
 800878c:	4693      	mov	fp, r2
 800878e:	4652      	mov	r2, sl
 8008790:	465b      	mov	r3, fp
 8008792:	4640      	mov	r0, r8
 8008794:	4649      	mov	r1, r9
 8008796:	f7f7 fd4b 	bl	8000230 <__aeabi_uldivmod>
 800879a:	4602      	mov	r2, r0
 800879c:	460b      	mov	r3, r1
 800879e:	4613      	mov	r3, r2
 80087a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80087a2:	6a3b      	ldr	r3, [r7, #32]
 80087a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087a8:	d308      	bcc.n	80087bc <UART_SetConfig+0x288>
 80087aa:	6a3b      	ldr	r3, [r7, #32]
 80087ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b0:	d204      	bcs.n	80087bc <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6a3a      	ldr	r2, [r7, #32]
 80087b8:	60da      	str	r2, [r3, #12]
 80087ba:	e0c9      	b.n	8008950 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087c2:	e0c5      	b.n	8008950 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	69db      	ldr	r3, [r3, #28]
 80087c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087cc:	d16d      	bne.n	80088aa <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80087ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087d2:	3b01      	subs	r3, #1
 80087d4:	2b07      	cmp	r3, #7
 80087d6:	d82d      	bhi.n	8008834 <UART_SetConfig+0x300>
 80087d8:	a201      	add	r2, pc, #4	; (adr r2, 80087e0 <UART_SetConfig+0x2ac>)
 80087da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087de:	bf00      	nop
 80087e0:	08008801 	.word	0x08008801
 80087e4:	08008809 	.word	0x08008809
 80087e8:	08008835 	.word	0x08008835
 80087ec:	0800880f 	.word	0x0800880f
 80087f0:	08008835 	.word	0x08008835
 80087f4:	08008835 	.word	0x08008835
 80087f8:	08008835 	.word	0x08008835
 80087fc:	08008817 	.word	0x08008817
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008800:	f7fd f954 	bl	8005aac <HAL_RCC_GetPCLK2Freq>
 8008804:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008806:	e01b      	b.n	8008840 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008808:	4b08      	ldr	r3, [pc, #32]	; (800882c <UART_SetConfig+0x2f8>)
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800880c:	e018      	b.n	8008840 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800880e:	f7fd f8b7 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008814:	e014      	b.n	8008840 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800881a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800881c:	e010      	b.n	8008840 <UART_SetConfig+0x30c>
 800881e:	bf00      	nop
 8008820:	cfff69f3 	.word	0xcfff69f3
 8008824:	40008000 	.word	0x40008000
 8008828:	40013800 	.word	0x40013800
 800882c:	00f42400 	.word	0x00f42400
 8008830:	0800a808 	.word	0x0800a808
      default:
        pclk = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800883e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	2b00      	cmp	r3, #0
 8008844:	f000 8084 	beq.w	8008950 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800884c:	4a4b      	ldr	r2, [pc, #300]	; (800897c <UART_SetConfig+0x448>)
 800884e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008852:	461a      	mov	r2, r3
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	fbb3 f3f2 	udiv	r3, r3, r2
 800885a:	005a      	lsls	r2, r3, #1
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	085b      	lsrs	r3, r3, #1
 8008862:	441a      	add	r2, r3
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	fbb2 f3f3 	udiv	r3, r2, r3
 800886c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	2b0f      	cmp	r3, #15
 8008872:	d916      	bls.n	80088a2 <UART_SetConfig+0x36e>
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800887a:	d212      	bcs.n	80088a2 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	b29b      	uxth	r3, r3
 8008880:	f023 030f 	bic.w	r3, r3, #15
 8008884:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	085b      	lsrs	r3, r3, #1
 800888a:	b29b      	uxth	r3, r3
 800888c:	f003 0307 	and.w	r3, r3, #7
 8008890:	b29a      	uxth	r2, r3
 8008892:	8bfb      	ldrh	r3, [r7, #30]
 8008894:	4313      	orrs	r3, r2
 8008896:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	8bfa      	ldrh	r2, [r7, #30]
 800889e:	60da      	str	r2, [r3, #12]
 80088a0:	e056      	b.n	8008950 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80088a8:	e052      	b.n	8008950 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80088ae:	3b01      	subs	r3, #1
 80088b0:	2b07      	cmp	r3, #7
 80088b2:	d822      	bhi.n	80088fa <UART_SetConfig+0x3c6>
 80088b4:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <UART_SetConfig+0x388>)
 80088b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ba:	bf00      	nop
 80088bc:	080088dd 	.word	0x080088dd
 80088c0:	080088e5 	.word	0x080088e5
 80088c4:	080088fb 	.word	0x080088fb
 80088c8:	080088eb 	.word	0x080088eb
 80088cc:	080088fb 	.word	0x080088fb
 80088d0:	080088fb 	.word	0x080088fb
 80088d4:	080088fb 	.word	0x080088fb
 80088d8:	080088f3 	.word	0x080088f3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088dc:	f7fd f8e6 	bl	8005aac <HAL_RCC_GetPCLK2Freq>
 80088e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088e2:	e010      	b.n	8008906 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088e4:	4b26      	ldr	r3, [pc, #152]	; (8008980 <UART_SetConfig+0x44c>)
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088e8:	e00d      	b.n	8008906 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088ea:	f7fd f849 	bl	8005980 <HAL_RCC_GetSysClockFreq>
 80088ee:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088f0:	e009      	b.n	8008906 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088f8:	e005      	b.n	8008906 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80088fa:	2300      	movs	r3, #0
 80088fc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008904:	bf00      	nop
    }

    if (pclk != 0U)
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	2b00      	cmp	r3, #0
 800890a:	d021      	beq.n	8008950 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	4a1a      	ldr	r2, [pc, #104]	; (800897c <UART_SetConfig+0x448>)
 8008912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008916:	461a      	mov	r2, r3
 8008918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891a:	fbb3 f2f2 	udiv	r2, r3, r2
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	441a      	add	r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	fbb2 f3f3 	udiv	r3, r2, r3
 800892e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	2b0f      	cmp	r3, #15
 8008934:	d909      	bls.n	800894a <UART_SetConfig+0x416>
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800893c:	d205      	bcs.n	800894a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	b29a      	uxth	r2, r3
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	60da      	str	r2, [r3, #12]
 8008948:	e002      	b.n	8008950 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2201      	movs	r2, #1
 8008954:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008958:	697b      	ldr	r3, [r7, #20]
 800895a:	2201      	movs	r2, #1
 800895c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2200      	movs	r2, #0
 8008964:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2200      	movs	r2, #0
 800896a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800896c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008970:	4618      	mov	r0, r3
 8008972:	3730      	adds	r7, #48	; 0x30
 8008974:	46bd      	mov	sp, r7
 8008976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800897a:	bf00      	nop
 800897c:	0800a808 	.word	0x0800a808
 8008980:	00f42400 	.word	0x00f42400

08008984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	f003 0302 	and.w	r3, r3, #2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d4:	f003 0304 	and.w	r3, r3, #4
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d00a      	beq.n	80089f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	f003 0308 	and.w	r3, r3, #8
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	f003 0310 	and.w	r3, r3, #16
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d00a      	beq.n	8008a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00a      	beq.n	8008a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	430a      	orrs	r2, r1
 8008a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d01a      	beq.n	8008a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a82:	d10a      	bne.n	8008a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	605a      	str	r2, [r3, #4]
  }
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b098      	sub	sp, #96	; 0x60
 8008acc:	af02      	add	r7, sp, #8
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ad8:	f7fb fad2 	bl	8004080 <HAL_GetTick>
 8008adc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 0308 	and.w	r3, r3, #8
 8008ae8:	2b08      	cmp	r3, #8
 8008aea:	d12f      	bne.n	8008b4c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008aec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af4:	2200      	movs	r2, #0
 8008af6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f88e 	bl	8008c1c <UART_WaitOnFlagUntilTimeout>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d022      	beq.n	8008b4c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1a:	653b      	str	r3, [r7, #80]	; 0x50
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b24:	647b      	str	r3, [r7, #68]	; 0x44
 8008b26:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	e063      	b.n	8008c14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f003 0304 	and.w	r3, r3, #4
 8008b56:	2b04      	cmp	r3, #4
 8008b58:	d149      	bne.n	8008bee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b62:	2200      	movs	r2, #0
 8008b64:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f857 	bl	8008c1c <UART_WaitOnFlagUntilTimeout>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d03c      	beq.n	8008bee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	623b      	str	r3, [r7, #32]
   return(result);
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b92:	633b      	str	r3, [r7, #48]	; 0x30
 8008b94:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e6      	bne.n	8008b74 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	3308      	adds	r3, #8
 8008bac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	e853 3f00 	ldrex	r3, [r3]
 8008bb4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f023 0301 	bic.w	r3, r3, #1
 8008bbc:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bc6:	61fa      	str	r2, [r7, #28]
 8008bc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bca:	69b9      	ldr	r1, [r7, #24]
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	e841 2300 	strex	r3, r2, [r1]
 8008bd2:	617b      	str	r3, [r7, #20]
   return(result);
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d1e5      	bne.n	8008ba6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2220      	movs	r2, #32
 8008bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2200      	movs	r2, #0
 8008be6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e012      	b.n	8008c14 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2220      	movs	r2, #32
 8008bfa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3758      	adds	r7, #88	; 0x58
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	603b      	str	r3, [r7, #0]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c2c:	e049      	b.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c34:	d045      	beq.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c36:	f7fb fa23 	bl	8004080 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d302      	bcc.n	8008c4c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d101      	bne.n	8008c50 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e048      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0304 	and.w	r3, r3, #4
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d031      	beq.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	f003 0308 	and.w	r3, r3, #8
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d110      	bne.n	8008c8e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2208      	movs	r2, #8
 8008c72:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008c74:	68f8      	ldr	r0, [r7, #12]
 8008c76:	f000 f838 	bl	8008cea <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2208      	movs	r2, #8
 8008c7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e029      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69db      	ldr	r3, [r3, #28]
 8008c94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c9c:	d111      	bne.n	8008cc2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ca6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f81e 	bl	8008cea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e00f      	b.n	8008ce2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	69da      	ldr	r2, [r3, #28]
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	bf0c      	ite	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	2300      	movne	r3, #0
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	461a      	mov	r2, r3
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d0a6      	beq.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3710      	adds	r7, #16
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cea:	b480      	push	{r7}
 8008cec:	b095      	sub	sp, #84	; 0x54
 8008cee:	af00      	add	r7, sp, #0
 8008cf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d10:	643b      	str	r3, [r7, #64]	; 0x40
 8008d12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e6      	bne.n	8008cf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3308      	adds	r3, #8
 8008d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d3a:	f023 0301 	bic.w	r3, r3, #1
 8008d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	3308      	adds	r3, #8
 8008d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d50:	e841 2300 	strex	r3, r2, [r1]
 8008d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1e3      	bne.n	8008d24 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d118      	bne.n	8008d96 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	e853 3f00 	ldrex	r3, [r3]
 8008d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	f023 0310 	bic.w	r3, r3, #16
 8008d78:	647b      	str	r3, [r7, #68]	; 0x44
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d82:	61bb      	str	r3, [r7, #24]
 8008d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d86:	6979      	ldr	r1, [r7, #20]
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	e841 2300 	strex	r3, r2, [r1]
 8008d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d1e6      	bne.n	8008d64 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008daa:	bf00      	nop
 8008dac:	3754      	adds	r7, #84	; 0x54
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b085      	sub	sp, #20
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_UARTEx_DisableFifoMode+0x16>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e027      	b.n	8008e1c <HAL_UARTEx_DisableFifoMode+0x66>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2224      	movs	r2, #36	; 0x24
 8008dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0201 	bic.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008dfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2220      	movs	r2, #32
 8008e0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d101      	bne.n	8008e40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	e02d      	b.n	8008e9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2224      	movs	r2, #36	; 0x24
 8008e4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f022 0201 	bic.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f84f 	bl	8008f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2220      	movs	r2, #32
 8008e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2200      	movs	r2, #0
 8008e96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e9a:	2300      	movs	r3, #0
}
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}

08008ea4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d101      	bne.n	8008ebc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008eb8:	2302      	movs	r3, #2
 8008eba:	e02d      	b.n	8008f18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2224      	movs	r2, #36	; 0x24
 8008ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681a      	ldr	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f022 0201 	bic.w	r2, r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	430a      	orrs	r2, r1
 8008ef6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f811 	bl	8008f20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	68fa      	ldr	r2, [r7, #12]
 8008f04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2200      	movs	r2, #0
 8008f12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b085      	sub	sp, #20
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d108      	bne.n	8008f42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2201      	movs	r2, #1
 8008f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f40:	e031      	b.n	8008fa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f42:	2308      	movs	r3, #8
 8008f44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f46:	2308      	movs	r3, #8
 8008f48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	0e5b      	lsrs	r3, r3, #25
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 0307 	and.w	r3, r3, #7
 8008f58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	0f5b      	lsrs	r3, r3, #29
 8008f62:	b2db      	uxtb	r3, r3
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f6a:	7bbb      	ldrb	r3, [r7, #14]
 8008f6c:	7b3a      	ldrb	r2, [r7, #12]
 8008f6e:	4911      	ldr	r1, [pc, #68]	; (8008fb4 <UARTEx_SetNbDataToProcess+0x94>)
 8008f70:	5c8a      	ldrb	r2, [r1, r2]
 8008f72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f76:	7b3a      	ldrb	r2, [r7, #12]
 8008f78:	490f      	ldr	r1, [pc, #60]	; (8008fb8 <UARTEx_SetNbDataToProcess+0x98>)
 8008f7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f88:	7bfb      	ldrb	r3, [r7, #15]
 8008f8a:	7b7a      	ldrb	r2, [r7, #13]
 8008f8c:	4909      	ldr	r1, [pc, #36]	; (8008fb4 <UARTEx_SetNbDataToProcess+0x94>)
 8008f8e:	5c8a      	ldrb	r2, [r1, r2]
 8008f90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f94:	7b7a      	ldrb	r2, [r7, #13]
 8008f96:	4908      	ldr	r1, [pc, #32]	; (8008fb8 <UARTEx_SetNbDataToProcess+0x98>)
 8008f98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	0800a820 	.word	0x0800a820
 8008fb8:	0800a828 	.word	0x0800a828

08008fbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008fc4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008fc8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	43db      	mvns	r3, r3
 8008fd8:	b29b      	uxth	r3, r3
 8008fda:	4013      	ands	r3, r2
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr

08008ff2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	f107 0014 	add.w	r0, r7, #20
 8009000:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2201      	movs	r2, #1
 8009008:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	b004      	add	sp, #16
 8009032:	4770      	bx	lr

08009034 <__errno>:
 8009034:	4b01      	ldr	r3, [pc, #4]	; (800903c <__errno+0x8>)
 8009036:	6818      	ldr	r0, [r3, #0]
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	20000014 	.word	0x20000014

08009040 <__libc_init_array>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	4d0d      	ldr	r5, [pc, #52]	; (8009078 <__libc_init_array+0x38>)
 8009044:	4c0d      	ldr	r4, [pc, #52]	; (800907c <__libc_init_array+0x3c>)
 8009046:	1b64      	subs	r4, r4, r5
 8009048:	10a4      	asrs	r4, r4, #2
 800904a:	2600      	movs	r6, #0
 800904c:	42a6      	cmp	r6, r4
 800904e:	d109      	bne.n	8009064 <__libc_init_array+0x24>
 8009050:	4d0b      	ldr	r5, [pc, #44]	; (8009080 <__libc_init_array+0x40>)
 8009052:	4c0c      	ldr	r4, [pc, #48]	; (8009084 <__libc_init_array+0x44>)
 8009054:	f001 fa34 	bl	800a4c0 <_init>
 8009058:	1b64      	subs	r4, r4, r5
 800905a:	10a4      	asrs	r4, r4, #2
 800905c:	2600      	movs	r6, #0
 800905e:	42a6      	cmp	r6, r4
 8009060:	d105      	bne.n	800906e <__libc_init_array+0x2e>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	f855 3b04 	ldr.w	r3, [r5], #4
 8009068:	4798      	blx	r3
 800906a:	3601      	adds	r6, #1
 800906c:	e7ee      	b.n	800904c <__libc_init_array+0xc>
 800906e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009072:	4798      	blx	r3
 8009074:	3601      	adds	r6, #1
 8009076:	e7f2      	b.n	800905e <__libc_init_array+0x1e>
 8009078:	0800a980 	.word	0x0800a980
 800907c:	0800a980 	.word	0x0800a980
 8009080:	0800a980 	.word	0x0800a980
 8009084:	0800a984 	.word	0x0800a984

08009088 <memcpy>:
 8009088:	440a      	add	r2, r1
 800908a:	4291      	cmp	r1, r2
 800908c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009090:	d100      	bne.n	8009094 <memcpy+0xc>
 8009092:	4770      	bx	lr
 8009094:	b510      	push	{r4, lr}
 8009096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800909a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909e:	4291      	cmp	r1, r2
 80090a0:	d1f9      	bne.n	8009096 <memcpy+0xe>
 80090a2:	bd10      	pop	{r4, pc}

080090a4 <memset>:
 80090a4:	4402      	add	r2, r0
 80090a6:	4603      	mov	r3, r0
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d100      	bne.n	80090ae <memset+0xa>
 80090ac:	4770      	bx	lr
 80090ae:	f803 1b01 	strb.w	r1, [r3], #1
 80090b2:	e7f9      	b.n	80090a8 <memset+0x4>

080090b4 <rand>:
 80090b4:	4b16      	ldr	r3, [pc, #88]	; (8009110 <rand+0x5c>)
 80090b6:	b510      	push	{r4, lr}
 80090b8:	681c      	ldr	r4, [r3, #0]
 80090ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80090bc:	b9b3      	cbnz	r3, 80090ec <rand+0x38>
 80090be:	2018      	movs	r0, #24
 80090c0:	f000 f886 	bl	80091d0 <malloc>
 80090c4:	63a0      	str	r0, [r4, #56]	; 0x38
 80090c6:	b928      	cbnz	r0, 80090d4 <rand+0x20>
 80090c8:	4602      	mov	r2, r0
 80090ca:	4b12      	ldr	r3, [pc, #72]	; (8009114 <rand+0x60>)
 80090cc:	4812      	ldr	r0, [pc, #72]	; (8009118 <rand+0x64>)
 80090ce:	214e      	movs	r1, #78	; 0x4e
 80090d0:	f000 f84e 	bl	8009170 <__assert_func>
 80090d4:	4a11      	ldr	r2, [pc, #68]	; (800911c <rand+0x68>)
 80090d6:	4b12      	ldr	r3, [pc, #72]	; (8009120 <rand+0x6c>)
 80090d8:	e9c0 2300 	strd	r2, r3, [r0]
 80090dc:	4b11      	ldr	r3, [pc, #68]	; (8009124 <rand+0x70>)
 80090de:	6083      	str	r3, [r0, #8]
 80090e0:	230b      	movs	r3, #11
 80090e2:	8183      	strh	r3, [r0, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	2300      	movs	r3, #0
 80090e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80090ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80090ee:	4a0e      	ldr	r2, [pc, #56]	; (8009128 <rand+0x74>)
 80090f0:	6920      	ldr	r0, [r4, #16]
 80090f2:	6963      	ldr	r3, [r4, #20]
 80090f4:	490d      	ldr	r1, [pc, #52]	; (800912c <rand+0x78>)
 80090f6:	4342      	muls	r2, r0
 80090f8:	fb01 2203 	mla	r2, r1, r3, r2
 80090fc:	fba0 0101 	umull	r0, r1, r0, r1
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	eb42 0001 	adc.w	r0, r2, r1
 8009106:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800910a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800910e:	bd10      	pop	{r4, pc}
 8009110:	20000014 	.word	0x20000014
 8009114:	0800a834 	.word	0x0800a834
 8009118:	0800a84b 	.word	0x0800a84b
 800911c:	abcd330e 	.word	0xabcd330e
 8009120:	e66d1234 	.word	0xe66d1234
 8009124:	0005deec 	.word	0x0005deec
 8009128:	5851f42d 	.word	0x5851f42d
 800912c:	4c957f2d 	.word	0x4c957f2d

08009130 <siprintf>:
 8009130:	b40e      	push	{r1, r2, r3}
 8009132:	b500      	push	{lr}
 8009134:	b09c      	sub	sp, #112	; 0x70
 8009136:	ab1d      	add	r3, sp, #116	; 0x74
 8009138:	9002      	str	r0, [sp, #8]
 800913a:	9006      	str	r0, [sp, #24]
 800913c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009140:	4809      	ldr	r0, [pc, #36]	; (8009168 <siprintf+0x38>)
 8009142:	9107      	str	r1, [sp, #28]
 8009144:	9104      	str	r1, [sp, #16]
 8009146:	4909      	ldr	r1, [pc, #36]	; (800916c <siprintf+0x3c>)
 8009148:	f853 2b04 	ldr.w	r2, [r3], #4
 800914c:	9105      	str	r1, [sp, #20]
 800914e:	6800      	ldr	r0, [r0, #0]
 8009150:	9301      	str	r3, [sp, #4]
 8009152:	a902      	add	r1, sp, #8
 8009154:	f000 f980 	bl	8009458 <_svfiprintf_r>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	701a      	strb	r2, [r3, #0]
 800915e:	b01c      	add	sp, #112	; 0x70
 8009160:	f85d eb04 	ldr.w	lr, [sp], #4
 8009164:	b003      	add	sp, #12
 8009166:	4770      	bx	lr
 8009168:	20000014 	.word	0x20000014
 800916c:	ffff0208 	.word	0xffff0208

08009170 <__assert_func>:
 8009170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009172:	4614      	mov	r4, r2
 8009174:	461a      	mov	r2, r3
 8009176:	4b09      	ldr	r3, [pc, #36]	; (800919c <__assert_func+0x2c>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4605      	mov	r5, r0
 800917c:	68d8      	ldr	r0, [r3, #12]
 800917e:	b14c      	cbz	r4, 8009194 <__assert_func+0x24>
 8009180:	4b07      	ldr	r3, [pc, #28]	; (80091a0 <__assert_func+0x30>)
 8009182:	9100      	str	r1, [sp, #0]
 8009184:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009188:	4906      	ldr	r1, [pc, #24]	; (80091a4 <__assert_func+0x34>)
 800918a:	462b      	mov	r3, r5
 800918c:	f000 f80e 	bl	80091ac <fiprintf>
 8009190:	f000 fe20 	bl	8009dd4 <abort>
 8009194:	4b04      	ldr	r3, [pc, #16]	; (80091a8 <__assert_func+0x38>)
 8009196:	461c      	mov	r4, r3
 8009198:	e7f3      	b.n	8009182 <__assert_func+0x12>
 800919a:	bf00      	nop
 800919c:	20000014 	.word	0x20000014
 80091a0:	0800a8a6 	.word	0x0800a8a6
 80091a4:	0800a8b3 	.word	0x0800a8b3
 80091a8:	0800a8e1 	.word	0x0800a8e1

080091ac <fiprintf>:
 80091ac:	b40e      	push	{r1, r2, r3}
 80091ae:	b503      	push	{r0, r1, lr}
 80091b0:	4601      	mov	r1, r0
 80091b2:	ab03      	add	r3, sp, #12
 80091b4:	4805      	ldr	r0, [pc, #20]	; (80091cc <fiprintf+0x20>)
 80091b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80091ba:	6800      	ldr	r0, [r0, #0]
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	f000 fa75 	bl	80096ac <_vfiprintf_r>
 80091c2:	b002      	add	sp, #8
 80091c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80091c8:	b003      	add	sp, #12
 80091ca:	4770      	bx	lr
 80091cc:	20000014 	.word	0x20000014

080091d0 <malloc>:
 80091d0:	4b02      	ldr	r3, [pc, #8]	; (80091dc <malloc+0xc>)
 80091d2:	4601      	mov	r1, r0
 80091d4:	6818      	ldr	r0, [r3, #0]
 80091d6:	f000 b86f 	b.w	80092b8 <_malloc_r>
 80091da:	bf00      	nop
 80091dc:	20000014 	.word	0x20000014

080091e0 <_free_r>:
 80091e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091e2:	2900      	cmp	r1, #0
 80091e4:	d044      	beq.n	8009270 <_free_r+0x90>
 80091e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ea:	9001      	str	r0, [sp, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f1a1 0404 	sub.w	r4, r1, #4
 80091f2:	bfb8      	it	lt
 80091f4:	18e4      	addlt	r4, r4, r3
 80091f6:	f001 f82f 	bl	800a258 <__malloc_lock>
 80091fa:	4a1e      	ldr	r2, [pc, #120]	; (8009274 <_free_r+0x94>)
 80091fc:	9801      	ldr	r0, [sp, #4]
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	b933      	cbnz	r3, 8009210 <_free_r+0x30>
 8009202:	6063      	str	r3, [r4, #4]
 8009204:	6014      	str	r4, [r2, #0]
 8009206:	b003      	add	sp, #12
 8009208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800920c:	f001 b82a 	b.w	800a264 <__malloc_unlock>
 8009210:	42a3      	cmp	r3, r4
 8009212:	d908      	bls.n	8009226 <_free_r+0x46>
 8009214:	6825      	ldr	r5, [r4, #0]
 8009216:	1961      	adds	r1, r4, r5
 8009218:	428b      	cmp	r3, r1
 800921a:	bf01      	itttt	eq
 800921c:	6819      	ldreq	r1, [r3, #0]
 800921e:	685b      	ldreq	r3, [r3, #4]
 8009220:	1949      	addeq	r1, r1, r5
 8009222:	6021      	streq	r1, [r4, #0]
 8009224:	e7ed      	b.n	8009202 <_free_r+0x22>
 8009226:	461a      	mov	r2, r3
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	b10b      	cbz	r3, 8009230 <_free_r+0x50>
 800922c:	42a3      	cmp	r3, r4
 800922e:	d9fa      	bls.n	8009226 <_free_r+0x46>
 8009230:	6811      	ldr	r1, [r2, #0]
 8009232:	1855      	adds	r5, r2, r1
 8009234:	42a5      	cmp	r5, r4
 8009236:	d10b      	bne.n	8009250 <_free_r+0x70>
 8009238:	6824      	ldr	r4, [r4, #0]
 800923a:	4421      	add	r1, r4
 800923c:	1854      	adds	r4, r2, r1
 800923e:	42a3      	cmp	r3, r4
 8009240:	6011      	str	r1, [r2, #0]
 8009242:	d1e0      	bne.n	8009206 <_free_r+0x26>
 8009244:	681c      	ldr	r4, [r3, #0]
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	6053      	str	r3, [r2, #4]
 800924a:	4421      	add	r1, r4
 800924c:	6011      	str	r1, [r2, #0]
 800924e:	e7da      	b.n	8009206 <_free_r+0x26>
 8009250:	d902      	bls.n	8009258 <_free_r+0x78>
 8009252:	230c      	movs	r3, #12
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	e7d6      	b.n	8009206 <_free_r+0x26>
 8009258:	6825      	ldr	r5, [r4, #0]
 800925a:	1961      	adds	r1, r4, r5
 800925c:	428b      	cmp	r3, r1
 800925e:	bf04      	itt	eq
 8009260:	6819      	ldreq	r1, [r3, #0]
 8009262:	685b      	ldreq	r3, [r3, #4]
 8009264:	6063      	str	r3, [r4, #4]
 8009266:	bf04      	itt	eq
 8009268:	1949      	addeq	r1, r1, r5
 800926a:	6021      	streq	r1, [r4, #0]
 800926c:	6054      	str	r4, [r2, #4]
 800926e:	e7ca      	b.n	8009206 <_free_r+0x26>
 8009270:	b003      	add	sp, #12
 8009272:	bd30      	pop	{r4, r5, pc}
 8009274:	2000cdc0 	.word	0x2000cdc0

08009278 <sbrk_aligned>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	4e0e      	ldr	r6, [pc, #56]	; (80092b4 <sbrk_aligned+0x3c>)
 800927c:	460c      	mov	r4, r1
 800927e:	6831      	ldr	r1, [r6, #0]
 8009280:	4605      	mov	r5, r0
 8009282:	b911      	cbnz	r1, 800928a <sbrk_aligned+0x12>
 8009284:	f000 fcd6 	bl	8009c34 <_sbrk_r>
 8009288:	6030      	str	r0, [r6, #0]
 800928a:	4621      	mov	r1, r4
 800928c:	4628      	mov	r0, r5
 800928e:	f000 fcd1 	bl	8009c34 <_sbrk_r>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d00a      	beq.n	80092ac <sbrk_aligned+0x34>
 8009296:	1cc4      	adds	r4, r0, #3
 8009298:	f024 0403 	bic.w	r4, r4, #3
 800929c:	42a0      	cmp	r0, r4
 800929e:	d007      	beq.n	80092b0 <sbrk_aligned+0x38>
 80092a0:	1a21      	subs	r1, r4, r0
 80092a2:	4628      	mov	r0, r5
 80092a4:	f000 fcc6 	bl	8009c34 <_sbrk_r>
 80092a8:	3001      	adds	r0, #1
 80092aa:	d101      	bne.n	80092b0 <sbrk_aligned+0x38>
 80092ac:	f04f 34ff 	mov.w	r4, #4294967295
 80092b0:	4620      	mov	r0, r4
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	2000cdc4 	.word	0x2000cdc4

080092b8 <_malloc_r>:
 80092b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092bc:	1ccd      	adds	r5, r1, #3
 80092be:	f025 0503 	bic.w	r5, r5, #3
 80092c2:	3508      	adds	r5, #8
 80092c4:	2d0c      	cmp	r5, #12
 80092c6:	bf38      	it	cc
 80092c8:	250c      	movcc	r5, #12
 80092ca:	2d00      	cmp	r5, #0
 80092cc:	4607      	mov	r7, r0
 80092ce:	db01      	blt.n	80092d4 <_malloc_r+0x1c>
 80092d0:	42a9      	cmp	r1, r5
 80092d2:	d905      	bls.n	80092e0 <_malloc_r+0x28>
 80092d4:	230c      	movs	r3, #12
 80092d6:	603b      	str	r3, [r7, #0]
 80092d8:	2600      	movs	r6, #0
 80092da:	4630      	mov	r0, r6
 80092dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092e0:	4e2e      	ldr	r6, [pc, #184]	; (800939c <_malloc_r+0xe4>)
 80092e2:	f000 ffb9 	bl	800a258 <__malloc_lock>
 80092e6:	6833      	ldr	r3, [r6, #0]
 80092e8:	461c      	mov	r4, r3
 80092ea:	bb34      	cbnz	r4, 800933a <_malloc_r+0x82>
 80092ec:	4629      	mov	r1, r5
 80092ee:	4638      	mov	r0, r7
 80092f0:	f7ff ffc2 	bl	8009278 <sbrk_aligned>
 80092f4:	1c43      	adds	r3, r0, #1
 80092f6:	4604      	mov	r4, r0
 80092f8:	d14d      	bne.n	8009396 <_malloc_r+0xde>
 80092fa:	6834      	ldr	r4, [r6, #0]
 80092fc:	4626      	mov	r6, r4
 80092fe:	2e00      	cmp	r6, #0
 8009300:	d140      	bne.n	8009384 <_malloc_r+0xcc>
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	4631      	mov	r1, r6
 8009306:	4638      	mov	r0, r7
 8009308:	eb04 0803 	add.w	r8, r4, r3
 800930c:	f000 fc92 	bl	8009c34 <_sbrk_r>
 8009310:	4580      	cmp	r8, r0
 8009312:	d13a      	bne.n	800938a <_malloc_r+0xd2>
 8009314:	6821      	ldr	r1, [r4, #0]
 8009316:	3503      	adds	r5, #3
 8009318:	1a6d      	subs	r5, r5, r1
 800931a:	f025 0503 	bic.w	r5, r5, #3
 800931e:	3508      	adds	r5, #8
 8009320:	2d0c      	cmp	r5, #12
 8009322:	bf38      	it	cc
 8009324:	250c      	movcc	r5, #12
 8009326:	4629      	mov	r1, r5
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ffa5 	bl	8009278 <sbrk_aligned>
 800932e:	3001      	adds	r0, #1
 8009330:	d02b      	beq.n	800938a <_malloc_r+0xd2>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	442b      	add	r3, r5
 8009336:	6023      	str	r3, [r4, #0]
 8009338:	e00e      	b.n	8009358 <_malloc_r+0xa0>
 800933a:	6822      	ldr	r2, [r4, #0]
 800933c:	1b52      	subs	r2, r2, r5
 800933e:	d41e      	bmi.n	800937e <_malloc_r+0xc6>
 8009340:	2a0b      	cmp	r2, #11
 8009342:	d916      	bls.n	8009372 <_malloc_r+0xba>
 8009344:	1961      	adds	r1, r4, r5
 8009346:	42a3      	cmp	r3, r4
 8009348:	6025      	str	r5, [r4, #0]
 800934a:	bf18      	it	ne
 800934c:	6059      	strne	r1, [r3, #4]
 800934e:	6863      	ldr	r3, [r4, #4]
 8009350:	bf08      	it	eq
 8009352:	6031      	streq	r1, [r6, #0]
 8009354:	5162      	str	r2, [r4, r5]
 8009356:	604b      	str	r3, [r1, #4]
 8009358:	4638      	mov	r0, r7
 800935a:	f104 060b 	add.w	r6, r4, #11
 800935e:	f000 ff81 	bl	800a264 <__malloc_unlock>
 8009362:	f026 0607 	bic.w	r6, r6, #7
 8009366:	1d23      	adds	r3, r4, #4
 8009368:	1af2      	subs	r2, r6, r3
 800936a:	d0b6      	beq.n	80092da <_malloc_r+0x22>
 800936c:	1b9b      	subs	r3, r3, r6
 800936e:	50a3      	str	r3, [r4, r2]
 8009370:	e7b3      	b.n	80092da <_malloc_r+0x22>
 8009372:	6862      	ldr	r2, [r4, #4]
 8009374:	42a3      	cmp	r3, r4
 8009376:	bf0c      	ite	eq
 8009378:	6032      	streq	r2, [r6, #0]
 800937a:	605a      	strne	r2, [r3, #4]
 800937c:	e7ec      	b.n	8009358 <_malloc_r+0xa0>
 800937e:	4623      	mov	r3, r4
 8009380:	6864      	ldr	r4, [r4, #4]
 8009382:	e7b2      	b.n	80092ea <_malloc_r+0x32>
 8009384:	4634      	mov	r4, r6
 8009386:	6876      	ldr	r6, [r6, #4]
 8009388:	e7b9      	b.n	80092fe <_malloc_r+0x46>
 800938a:	230c      	movs	r3, #12
 800938c:	603b      	str	r3, [r7, #0]
 800938e:	4638      	mov	r0, r7
 8009390:	f000 ff68 	bl	800a264 <__malloc_unlock>
 8009394:	e7a1      	b.n	80092da <_malloc_r+0x22>
 8009396:	6025      	str	r5, [r4, #0]
 8009398:	e7de      	b.n	8009358 <_malloc_r+0xa0>
 800939a:	bf00      	nop
 800939c:	2000cdc0 	.word	0x2000cdc0

080093a0 <__ssputs_r>:
 80093a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093a4:	688e      	ldr	r6, [r1, #8]
 80093a6:	429e      	cmp	r6, r3
 80093a8:	4682      	mov	sl, r0
 80093aa:	460c      	mov	r4, r1
 80093ac:	4690      	mov	r8, r2
 80093ae:	461f      	mov	r7, r3
 80093b0:	d838      	bhi.n	8009424 <__ssputs_r+0x84>
 80093b2:	898a      	ldrh	r2, [r1, #12]
 80093b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80093b8:	d032      	beq.n	8009420 <__ssputs_r+0x80>
 80093ba:	6825      	ldr	r5, [r4, #0]
 80093bc:	6909      	ldr	r1, [r1, #16]
 80093be:	eba5 0901 	sub.w	r9, r5, r1
 80093c2:	6965      	ldr	r5, [r4, #20]
 80093c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093cc:	3301      	adds	r3, #1
 80093ce:	444b      	add	r3, r9
 80093d0:	106d      	asrs	r5, r5, #1
 80093d2:	429d      	cmp	r5, r3
 80093d4:	bf38      	it	cc
 80093d6:	461d      	movcc	r5, r3
 80093d8:	0553      	lsls	r3, r2, #21
 80093da:	d531      	bpl.n	8009440 <__ssputs_r+0xa0>
 80093dc:	4629      	mov	r1, r5
 80093de:	f7ff ff6b 	bl	80092b8 <_malloc_r>
 80093e2:	4606      	mov	r6, r0
 80093e4:	b950      	cbnz	r0, 80093fc <__ssputs_r+0x5c>
 80093e6:	230c      	movs	r3, #12
 80093e8:	f8ca 3000 	str.w	r3, [sl]
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fc:	6921      	ldr	r1, [r4, #16]
 80093fe:	464a      	mov	r2, r9
 8009400:	f7ff fe42 	bl	8009088 <memcpy>
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800940a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940e:	81a3      	strh	r3, [r4, #12]
 8009410:	6126      	str	r6, [r4, #16]
 8009412:	6165      	str	r5, [r4, #20]
 8009414:	444e      	add	r6, r9
 8009416:	eba5 0509 	sub.w	r5, r5, r9
 800941a:	6026      	str	r6, [r4, #0]
 800941c:	60a5      	str	r5, [r4, #8]
 800941e:	463e      	mov	r6, r7
 8009420:	42be      	cmp	r6, r7
 8009422:	d900      	bls.n	8009426 <__ssputs_r+0x86>
 8009424:	463e      	mov	r6, r7
 8009426:	6820      	ldr	r0, [r4, #0]
 8009428:	4632      	mov	r2, r6
 800942a:	4641      	mov	r1, r8
 800942c:	f000 fefa 	bl	800a224 <memmove>
 8009430:	68a3      	ldr	r3, [r4, #8]
 8009432:	1b9b      	subs	r3, r3, r6
 8009434:	60a3      	str	r3, [r4, #8]
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	4433      	add	r3, r6
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	2000      	movs	r0, #0
 800943e:	e7db      	b.n	80093f8 <__ssputs_r+0x58>
 8009440:	462a      	mov	r2, r5
 8009442:	f000 ff15 	bl	800a270 <_realloc_r>
 8009446:	4606      	mov	r6, r0
 8009448:	2800      	cmp	r0, #0
 800944a:	d1e1      	bne.n	8009410 <__ssputs_r+0x70>
 800944c:	6921      	ldr	r1, [r4, #16]
 800944e:	4650      	mov	r0, sl
 8009450:	f7ff fec6 	bl	80091e0 <_free_r>
 8009454:	e7c7      	b.n	80093e6 <__ssputs_r+0x46>
	...

08009458 <_svfiprintf_r>:
 8009458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800945c:	4698      	mov	r8, r3
 800945e:	898b      	ldrh	r3, [r1, #12]
 8009460:	061b      	lsls	r3, r3, #24
 8009462:	b09d      	sub	sp, #116	; 0x74
 8009464:	4607      	mov	r7, r0
 8009466:	460d      	mov	r5, r1
 8009468:	4614      	mov	r4, r2
 800946a:	d50e      	bpl.n	800948a <_svfiprintf_r+0x32>
 800946c:	690b      	ldr	r3, [r1, #16]
 800946e:	b963      	cbnz	r3, 800948a <_svfiprintf_r+0x32>
 8009470:	2140      	movs	r1, #64	; 0x40
 8009472:	f7ff ff21 	bl	80092b8 <_malloc_r>
 8009476:	6028      	str	r0, [r5, #0]
 8009478:	6128      	str	r0, [r5, #16]
 800947a:	b920      	cbnz	r0, 8009486 <_svfiprintf_r+0x2e>
 800947c:	230c      	movs	r3, #12
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	f04f 30ff 	mov.w	r0, #4294967295
 8009484:	e0d1      	b.n	800962a <_svfiprintf_r+0x1d2>
 8009486:	2340      	movs	r3, #64	; 0x40
 8009488:	616b      	str	r3, [r5, #20]
 800948a:	2300      	movs	r3, #0
 800948c:	9309      	str	r3, [sp, #36]	; 0x24
 800948e:	2320      	movs	r3, #32
 8009490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009494:	f8cd 800c 	str.w	r8, [sp, #12]
 8009498:	2330      	movs	r3, #48	; 0x30
 800949a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009644 <_svfiprintf_r+0x1ec>
 800949e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80094a2:	f04f 0901 	mov.w	r9, #1
 80094a6:	4623      	mov	r3, r4
 80094a8:	469a      	mov	sl, r3
 80094aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094ae:	b10a      	cbz	r2, 80094b4 <_svfiprintf_r+0x5c>
 80094b0:	2a25      	cmp	r2, #37	; 0x25
 80094b2:	d1f9      	bne.n	80094a8 <_svfiprintf_r+0x50>
 80094b4:	ebba 0b04 	subs.w	fp, sl, r4
 80094b8:	d00b      	beq.n	80094d2 <_svfiprintf_r+0x7a>
 80094ba:	465b      	mov	r3, fp
 80094bc:	4622      	mov	r2, r4
 80094be:	4629      	mov	r1, r5
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff ff6d 	bl	80093a0 <__ssputs_r>
 80094c6:	3001      	adds	r0, #1
 80094c8:	f000 80aa 	beq.w	8009620 <_svfiprintf_r+0x1c8>
 80094cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094ce:	445a      	add	r2, fp
 80094d0:	9209      	str	r2, [sp, #36]	; 0x24
 80094d2:	f89a 3000 	ldrb.w	r3, [sl]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80a2 	beq.w	8009620 <_svfiprintf_r+0x1c8>
 80094dc:	2300      	movs	r3, #0
 80094de:	f04f 32ff 	mov.w	r2, #4294967295
 80094e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094e6:	f10a 0a01 	add.w	sl, sl, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	9307      	str	r3, [sp, #28]
 80094ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094f2:	931a      	str	r3, [sp, #104]	; 0x68
 80094f4:	4654      	mov	r4, sl
 80094f6:	2205      	movs	r2, #5
 80094f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fc:	4851      	ldr	r0, [pc, #324]	; (8009644 <_svfiprintf_r+0x1ec>)
 80094fe:	f7f6 fe47 	bl	8000190 <memchr>
 8009502:	9a04      	ldr	r2, [sp, #16]
 8009504:	b9d8      	cbnz	r0, 800953e <_svfiprintf_r+0xe6>
 8009506:	06d0      	lsls	r0, r2, #27
 8009508:	bf44      	itt	mi
 800950a:	2320      	movmi	r3, #32
 800950c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009510:	0711      	lsls	r1, r2, #28
 8009512:	bf44      	itt	mi
 8009514:	232b      	movmi	r3, #43	; 0x2b
 8009516:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800951a:	f89a 3000 	ldrb.w	r3, [sl]
 800951e:	2b2a      	cmp	r3, #42	; 0x2a
 8009520:	d015      	beq.n	800954e <_svfiprintf_r+0xf6>
 8009522:	9a07      	ldr	r2, [sp, #28]
 8009524:	4654      	mov	r4, sl
 8009526:	2000      	movs	r0, #0
 8009528:	f04f 0c0a 	mov.w	ip, #10
 800952c:	4621      	mov	r1, r4
 800952e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009532:	3b30      	subs	r3, #48	; 0x30
 8009534:	2b09      	cmp	r3, #9
 8009536:	d94e      	bls.n	80095d6 <_svfiprintf_r+0x17e>
 8009538:	b1b0      	cbz	r0, 8009568 <_svfiprintf_r+0x110>
 800953a:	9207      	str	r2, [sp, #28]
 800953c:	e014      	b.n	8009568 <_svfiprintf_r+0x110>
 800953e:	eba0 0308 	sub.w	r3, r0, r8
 8009542:	fa09 f303 	lsl.w	r3, r9, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	46a2      	mov	sl, r4
 800954c:	e7d2      	b.n	80094f4 <_svfiprintf_r+0x9c>
 800954e:	9b03      	ldr	r3, [sp, #12]
 8009550:	1d19      	adds	r1, r3, #4
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	9103      	str	r1, [sp, #12]
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfbb      	ittet	lt
 800955a:	425b      	neglt	r3, r3
 800955c:	f042 0202 	orrlt.w	r2, r2, #2
 8009560:	9307      	strge	r3, [sp, #28]
 8009562:	9307      	strlt	r3, [sp, #28]
 8009564:	bfb8      	it	lt
 8009566:	9204      	strlt	r2, [sp, #16]
 8009568:	7823      	ldrb	r3, [r4, #0]
 800956a:	2b2e      	cmp	r3, #46	; 0x2e
 800956c:	d10c      	bne.n	8009588 <_svfiprintf_r+0x130>
 800956e:	7863      	ldrb	r3, [r4, #1]
 8009570:	2b2a      	cmp	r3, #42	; 0x2a
 8009572:	d135      	bne.n	80095e0 <_svfiprintf_r+0x188>
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	1d1a      	adds	r2, r3, #4
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	9203      	str	r2, [sp, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	bfb8      	it	lt
 8009580:	f04f 33ff 	movlt.w	r3, #4294967295
 8009584:	3402      	adds	r4, #2
 8009586:	9305      	str	r3, [sp, #20]
 8009588:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009654 <_svfiprintf_r+0x1fc>
 800958c:	7821      	ldrb	r1, [r4, #0]
 800958e:	2203      	movs	r2, #3
 8009590:	4650      	mov	r0, sl
 8009592:	f7f6 fdfd 	bl	8000190 <memchr>
 8009596:	b140      	cbz	r0, 80095aa <_svfiprintf_r+0x152>
 8009598:	2340      	movs	r3, #64	; 0x40
 800959a:	eba0 000a 	sub.w	r0, r0, sl
 800959e:	fa03 f000 	lsl.w	r0, r3, r0
 80095a2:	9b04      	ldr	r3, [sp, #16]
 80095a4:	4303      	orrs	r3, r0
 80095a6:	3401      	adds	r4, #1
 80095a8:	9304      	str	r3, [sp, #16]
 80095aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095ae:	4826      	ldr	r0, [pc, #152]	; (8009648 <_svfiprintf_r+0x1f0>)
 80095b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80095b4:	2206      	movs	r2, #6
 80095b6:	f7f6 fdeb 	bl	8000190 <memchr>
 80095ba:	2800      	cmp	r0, #0
 80095bc:	d038      	beq.n	8009630 <_svfiprintf_r+0x1d8>
 80095be:	4b23      	ldr	r3, [pc, #140]	; (800964c <_svfiprintf_r+0x1f4>)
 80095c0:	bb1b      	cbnz	r3, 800960a <_svfiprintf_r+0x1b2>
 80095c2:	9b03      	ldr	r3, [sp, #12]
 80095c4:	3307      	adds	r3, #7
 80095c6:	f023 0307 	bic.w	r3, r3, #7
 80095ca:	3308      	adds	r3, #8
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095d0:	4433      	add	r3, r6
 80095d2:	9309      	str	r3, [sp, #36]	; 0x24
 80095d4:	e767      	b.n	80094a6 <_svfiprintf_r+0x4e>
 80095d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80095da:	460c      	mov	r4, r1
 80095dc:	2001      	movs	r0, #1
 80095de:	e7a5      	b.n	800952c <_svfiprintf_r+0xd4>
 80095e0:	2300      	movs	r3, #0
 80095e2:	3401      	adds	r4, #1
 80095e4:	9305      	str	r3, [sp, #20]
 80095e6:	4619      	mov	r1, r3
 80095e8:	f04f 0c0a 	mov.w	ip, #10
 80095ec:	4620      	mov	r0, r4
 80095ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095f2:	3a30      	subs	r2, #48	; 0x30
 80095f4:	2a09      	cmp	r2, #9
 80095f6:	d903      	bls.n	8009600 <_svfiprintf_r+0x1a8>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d0c5      	beq.n	8009588 <_svfiprintf_r+0x130>
 80095fc:	9105      	str	r1, [sp, #20]
 80095fe:	e7c3      	b.n	8009588 <_svfiprintf_r+0x130>
 8009600:	fb0c 2101 	mla	r1, ip, r1, r2
 8009604:	4604      	mov	r4, r0
 8009606:	2301      	movs	r3, #1
 8009608:	e7f0      	b.n	80095ec <_svfiprintf_r+0x194>
 800960a:	ab03      	add	r3, sp, #12
 800960c:	9300      	str	r3, [sp, #0]
 800960e:	462a      	mov	r2, r5
 8009610:	4b0f      	ldr	r3, [pc, #60]	; (8009650 <_svfiprintf_r+0x1f8>)
 8009612:	a904      	add	r1, sp, #16
 8009614:	4638      	mov	r0, r7
 8009616:	f3af 8000 	nop.w
 800961a:	1c42      	adds	r2, r0, #1
 800961c:	4606      	mov	r6, r0
 800961e:	d1d6      	bne.n	80095ce <_svfiprintf_r+0x176>
 8009620:	89ab      	ldrh	r3, [r5, #12]
 8009622:	065b      	lsls	r3, r3, #25
 8009624:	f53f af2c 	bmi.w	8009480 <_svfiprintf_r+0x28>
 8009628:	9809      	ldr	r0, [sp, #36]	; 0x24
 800962a:	b01d      	add	sp, #116	; 0x74
 800962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	ab03      	add	r3, sp, #12
 8009632:	9300      	str	r3, [sp, #0]
 8009634:	462a      	mov	r2, r5
 8009636:	4b06      	ldr	r3, [pc, #24]	; (8009650 <_svfiprintf_r+0x1f8>)
 8009638:	a904      	add	r1, sp, #16
 800963a:	4638      	mov	r0, r7
 800963c:	f000 f9d4 	bl	80099e8 <_printf_i>
 8009640:	e7eb      	b.n	800961a <_svfiprintf_r+0x1c2>
 8009642:	bf00      	nop
 8009644:	0800a8e2 	.word	0x0800a8e2
 8009648:	0800a8ec 	.word	0x0800a8ec
 800964c:	00000000 	.word	0x00000000
 8009650:	080093a1 	.word	0x080093a1
 8009654:	0800a8e8 	.word	0x0800a8e8

08009658 <__sfputc_r>:
 8009658:	6893      	ldr	r3, [r2, #8]
 800965a:	3b01      	subs	r3, #1
 800965c:	2b00      	cmp	r3, #0
 800965e:	b410      	push	{r4}
 8009660:	6093      	str	r3, [r2, #8]
 8009662:	da08      	bge.n	8009676 <__sfputc_r+0x1e>
 8009664:	6994      	ldr	r4, [r2, #24]
 8009666:	42a3      	cmp	r3, r4
 8009668:	db01      	blt.n	800966e <__sfputc_r+0x16>
 800966a:	290a      	cmp	r1, #10
 800966c:	d103      	bne.n	8009676 <__sfputc_r+0x1e>
 800966e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009672:	f000 baef 	b.w	8009c54 <__swbuf_r>
 8009676:	6813      	ldr	r3, [r2, #0]
 8009678:	1c58      	adds	r0, r3, #1
 800967a:	6010      	str	r0, [r2, #0]
 800967c:	7019      	strb	r1, [r3, #0]
 800967e:	4608      	mov	r0, r1
 8009680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009684:	4770      	bx	lr

08009686 <__sfputs_r>:
 8009686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009688:	4606      	mov	r6, r0
 800968a:	460f      	mov	r7, r1
 800968c:	4614      	mov	r4, r2
 800968e:	18d5      	adds	r5, r2, r3
 8009690:	42ac      	cmp	r4, r5
 8009692:	d101      	bne.n	8009698 <__sfputs_r+0x12>
 8009694:	2000      	movs	r0, #0
 8009696:	e007      	b.n	80096a8 <__sfputs_r+0x22>
 8009698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800969c:	463a      	mov	r2, r7
 800969e:	4630      	mov	r0, r6
 80096a0:	f7ff ffda 	bl	8009658 <__sfputc_r>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d1f3      	bne.n	8009690 <__sfputs_r+0xa>
 80096a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096ac <_vfiprintf_r>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	460d      	mov	r5, r1
 80096b2:	b09d      	sub	sp, #116	; 0x74
 80096b4:	4614      	mov	r4, r2
 80096b6:	4698      	mov	r8, r3
 80096b8:	4606      	mov	r6, r0
 80096ba:	b118      	cbz	r0, 80096c4 <_vfiprintf_r+0x18>
 80096bc:	6983      	ldr	r3, [r0, #24]
 80096be:	b90b      	cbnz	r3, 80096c4 <_vfiprintf_r+0x18>
 80096c0:	f000 fcaa 	bl	800a018 <__sinit>
 80096c4:	4b89      	ldr	r3, [pc, #548]	; (80098ec <_vfiprintf_r+0x240>)
 80096c6:	429d      	cmp	r5, r3
 80096c8:	d11b      	bne.n	8009702 <_vfiprintf_r+0x56>
 80096ca:	6875      	ldr	r5, [r6, #4]
 80096cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096ce:	07d9      	lsls	r1, r3, #31
 80096d0:	d405      	bmi.n	80096de <_vfiprintf_r+0x32>
 80096d2:	89ab      	ldrh	r3, [r5, #12]
 80096d4:	059a      	lsls	r2, r3, #22
 80096d6:	d402      	bmi.n	80096de <_vfiprintf_r+0x32>
 80096d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096da:	f000 fd3b 	bl	800a154 <__retarget_lock_acquire_recursive>
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	071b      	lsls	r3, r3, #28
 80096e2:	d501      	bpl.n	80096e8 <_vfiprintf_r+0x3c>
 80096e4:	692b      	ldr	r3, [r5, #16]
 80096e6:	b9eb      	cbnz	r3, 8009724 <_vfiprintf_r+0x78>
 80096e8:	4629      	mov	r1, r5
 80096ea:	4630      	mov	r0, r6
 80096ec:	f000 fb04 	bl	8009cf8 <__swsetup_r>
 80096f0:	b1c0      	cbz	r0, 8009724 <_vfiprintf_r+0x78>
 80096f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f4:	07dc      	lsls	r4, r3, #31
 80096f6:	d50e      	bpl.n	8009716 <_vfiprintf_r+0x6a>
 80096f8:	f04f 30ff 	mov.w	r0, #4294967295
 80096fc:	b01d      	add	sp, #116	; 0x74
 80096fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009702:	4b7b      	ldr	r3, [pc, #492]	; (80098f0 <_vfiprintf_r+0x244>)
 8009704:	429d      	cmp	r5, r3
 8009706:	d101      	bne.n	800970c <_vfiprintf_r+0x60>
 8009708:	68b5      	ldr	r5, [r6, #8]
 800970a:	e7df      	b.n	80096cc <_vfiprintf_r+0x20>
 800970c:	4b79      	ldr	r3, [pc, #484]	; (80098f4 <_vfiprintf_r+0x248>)
 800970e:	429d      	cmp	r5, r3
 8009710:	bf08      	it	eq
 8009712:	68f5      	ldreq	r5, [r6, #12]
 8009714:	e7da      	b.n	80096cc <_vfiprintf_r+0x20>
 8009716:	89ab      	ldrh	r3, [r5, #12]
 8009718:	0598      	lsls	r0, r3, #22
 800971a:	d4ed      	bmi.n	80096f8 <_vfiprintf_r+0x4c>
 800971c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800971e:	f000 fd1a 	bl	800a156 <__retarget_lock_release_recursive>
 8009722:	e7e9      	b.n	80096f8 <_vfiprintf_r+0x4c>
 8009724:	2300      	movs	r3, #0
 8009726:	9309      	str	r3, [sp, #36]	; 0x24
 8009728:	2320      	movs	r3, #32
 800972a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800972e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009732:	2330      	movs	r3, #48	; 0x30
 8009734:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098f8 <_vfiprintf_r+0x24c>
 8009738:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800973c:	f04f 0901 	mov.w	r9, #1
 8009740:	4623      	mov	r3, r4
 8009742:	469a      	mov	sl, r3
 8009744:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009748:	b10a      	cbz	r2, 800974e <_vfiprintf_r+0xa2>
 800974a:	2a25      	cmp	r2, #37	; 0x25
 800974c:	d1f9      	bne.n	8009742 <_vfiprintf_r+0x96>
 800974e:	ebba 0b04 	subs.w	fp, sl, r4
 8009752:	d00b      	beq.n	800976c <_vfiprintf_r+0xc0>
 8009754:	465b      	mov	r3, fp
 8009756:	4622      	mov	r2, r4
 8009758:	4629      	mov	r1, r5
 800975a:	4630      	mov	r0, r6
 800975c:	f7ff ff93 	bl	8009686 <__sfputs_r>
 8009760:	3001      	adds	r0, #1
 8009762:	f000 80aa 	beq.w	80098ba <_vfiprintf_r+0x20e>
 8009766:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009768:	445a      	add	r2, fp
 800976a:	9209      	str	r2, [sp, #36]	; 0x24
 800976c:	f89a 3000 	ldrb.w	r3, [sl]
 8009770:	2b00      	cmp	r3, #0
 8009772:	f000 80a2 	beq.w	80098ba <_vfiprintf_r+0x20e>
 8009776:	2300      	movs	r3, #0
 8009778:	f04f 32ff 	mov.w	r2, #4294967295
 800977c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009780:	f10a 0a01 	add.w	sl, sl, #1
 8009784:	9304      	str	r3, [sp, #16]
 8009786:	9307      	str	r3, [sp, #28]
 8009788:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800978c:	931a      	str	r3, [sp, #104]	; 0x68
 800978e:	4654      	mov	r4, sl
 8009790:	2205      	movs	r2, #5
 8009792:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009796:	4858      	ldr	r0, [pc, #352]	; (80098f8 <_vfiprintf_r+0x24c>)
 8009798:	f7f6 fcfa 	bl	8000190 <memchr>
 800979c:	9a04      	ldr	r2, [sp, #16]
 800979e:	b9d8      	cbnz	r0, 80097d8 <_vfiprintf_r+0x12c>
 80097a0:	06d1      	lsls	r1, r2, #27
 80097a2:	bf44      	itt	mi
 80097a4:	2320      	movmi	r3, #32
 80097a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097aa:	0713      	lsls	r3, r2, #28
 80097ac:	bf44      	itt	mi
 80097ae:	232b      	movmi	r3, #43	; 0x2b
 80097b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b4:	f89a 3000 	ldrb.w	r3, [sl]
 80097b8:	2b2a      	cmp	r3, #42	; 0x2a
 80097ba:	d015      	beq.n	80097e8 <_vfiprintf_r+0x13c>
 80097bc:	9a07      	ldr	r2, [sp, #28]
 80097be:	4654      	mov	r4, sl
 80097c0:	2000      	movs	r0, #0
 80097c2:	f04f 0c0a 	mov.w	ip, #10
 80097c6:	4621      	mov	r1, r4
 80097c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097cc:	3b30      	subs	r3, #48	; 0x30
 80097ce:	2b09      	cmp	r3, #9
 80097d0:	d94e      	bls.n	8009870 <_vfiprintf_r+0x1c4>
 80097d2:	b1b0      	cbz	r0, 8009802 <_vfiprintf_r+0x156>
 80097d4:	9207      	str	r2, [sp, #28]
 80097d6:	e014      	b.n	8009802 <_vfiprintf_r+0x156>
 80097d8:	eba0 0308 	sub.w	r3, r0, r8
 80097dc:	fa09 f303 	lsl.w	r3, r9, r3
 80097e0:	4313      	orrs	r3, r2
 80097e2:	9304      	str	r3, [sp, #16]
 80097e4:	46a2      	mov	sl, r4
 80097e6:	e7d2      	b.n	800978e <_vfiprintf_r+0xe2>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	1d19      	adds	r1, r3, #4
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	9103      	str	r1, [sp, #12]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	bfbb      	ittet	lt
 80097f4:	425b      	neglt	r3, r3
 80097f6:	f042 0202 	orrlt.w	r2, r2, #2
 80097fa:	9307      	strge	r3, [sp, #28]
 80097fc:	9307      	strlt	r3, [sp, #28]
 80097fe:	bfb8      	it	lt
 8009800:	9204      	strlt	r2, [sp, #16]
 8009802:	7823      	ldrb	r3, [r4, #0]
 8009804:	2b2e      	cmp	r3, #46	; 0x2e
 8009806:	d10c      	bne.n	8009822 <_vfiprintf_r+0x176>
 8009808:	7863      	ldrb	r3, [r4, #1]
 800980a:	2b2a      	cmp	r3, #42	; 0x2a
 800980c:	d135      	bne.n	800987a <_vfiprintf_r+0x1ce>
 800980e:	9b03      	ldr	r3, [sp, #12]
 8009810:	1d1a      	adds	r2, r3, #4
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	9203      	str	r2, [sp, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfb8      	it	lt
 800981a:	f04f 33ff 	movlt.w	r3, #4294967295
 800981e:	3402      	adds	r4, #2
 8009820:	9305      	str	r3, [sp, #20]
 8009822:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009908 <_vfiprintf_r+0x25c>
 8009826:	7821      	ldrb	r1, [r4, #0]
 8009828:	2203      	movs	r2, #3
 800982a:	4650      	mov	r0, sl
 800982c:	f7f6 fcb0 	bl	8000190 <memchr>
 8009830:	b140      	cbz	r0, 8009844 <_vfiprintf_r+0x198>
 8009832:	2340      	movs	r3, #64	; 0x40
 8009834:	eba0 000a 	sub.w	r0, r0, sl
 8009838:	fa03 f000 	lsl.w	r0, r3, r0
 800983c:	9b04      	ldr	r3, [sp, #16]
 800983e:	4303      	orrs	r3, r0
 8009840:	3401      	adds	r4, #1
 8009842:	9304      	str	r3, [sp, #16]
 8009844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009848:	482c      	ldr	r0, [pc, #176]	; (80098fc <_vfiprintf_r+0x250>)
 800984a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800984e:	2206      	movs	r2, #6
 8009850:	f7f6 fc9e 	bl	8000190 <memchr>
 8009854:	2800      	cmp	r0, #0
 8009856:	d03f      	beq.n	80098d8 <_vfiprintf_r+0x22c>
 8009858:	4b29      	ldr	r3, [pc, #164]	; (8009900 <_vfiprintf_r+0x254>)
 800985a:	bb1b      	cbnz	r3, 80098a4 <_vfiprintf_r+0x1f8>
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	3307      	adds	r3, #7
 8009860:	f023 0307 	bic.w	r3, r3, #7
 8009864:	3308      	adds	r3, #8
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986a:	443b      	add	r3, r7
 800986c:	9309      	str	r3, [sp, #36]	; 0x24
 800986e:	e767      	b.n	8009740 <_vfiprintf_r+0x94>
 8009870:	fb0c 3202 	mla	r2, ip, r2, r3
 8009874:	460c      	mov	r4, r1
 8009876:	2001      	movs	r0, #1
 8009878:	e7a5      	b.n	80097c6 <_vfiprintf_r+0x11a>
 800987a:	2300      	movs	r3, #0
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4619      	mov	r1, r3
 8009882:	f04f 0c0a 	mov.w	ip, #10
 8009886:	4620      	mov	r0, r4
 8009888:	f810 2b01 	ldrb.w	r2, [r0], #1
 800988c:	3a30      	subs	r2, #48	; 0x30
 800988e:	2a09      	cmp	r2, #9
 8009890:	d903      	bls.n	800989a <_vfiprintf_r+0x1ee>
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c5      	beq.n	8009822 <_vfiprintf_r+0x176>
 8009896:	9105      	str	r1, [sp, #20]
 8009898:	e7c3      	b.n	8009822 <_vfiprintf_r+0x176>
 800989a:	fb0c 2101 	mla	r1, ip, r1, r2
 800989e:	4604      	mov	r4, r0
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7f0      	b.n	8009886 <_vfiprintf_r+0x1da>
 80098a4:	ab03      	add	r3, sp, #12
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	462a      	mov	r2, r5
 80098aa:	4b16      	ldr	r3, [pc, #88]	; (8009904 <_vfiprintf_r+0x258>)
 80098ac:	a904      	add	r1, sp, #16
 80098ae:	4630      	mov	r0, r6
 80098b0:	f3af 8000 	nop.w
 80098b4:	4607      	mov	r7, r0
 80098b6:	1c78      	adds	r0, r7, #1
 80098b8:	d1d6      	bne.n	8009868 <_vfiprintf_r+0x1bc>
 80098ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098bc:	07d9      	lsls	r1, r3, #31
 80098be:	d405      	bmi.n	80098cc <_vfiprintf_r+0x220>
 80098c0:	89ab      	ldrh	r3, [r5, #12]
 80098c2:	059a      	lsls	r2, r3, #22
 80098c4:	d402      	bmi.n	80098cc <_vfiprintf_r+0x220>
 80098c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098c8:	f000 fc45 	bl	800a156 <__retarget_lock_release_recursive>
 80098cc:	89ab      	ldrh	r3, [r5, #12]
 80098ce:	065b      	lsls	r3, r3, #25
 80098d0:	f53f af12 	bmi.w	80096f8 <_vfiprintf_r+0x4c>
 80098d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098d6:	e711      	b.n	80096fc <_vfiprintf_r+0x50>
 80098d8:	ab03      	add	r3, sp, #12
 80098da:	9300      	str	r3, [sp, #0]
 80098dc:	462a      	mov	r2, r5
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <_vfiprintf_r+0x258>)
 80098e0:	a904      	add	r1, sp, #16
 80098e2:	4630      	mov	r0, r6
 80098e4:	f000 f880 	bl	80099e8 <_printf_i>
 80098e8:	e7e4      	b.n	80098b4 <_vfiprintf_r+0x208>
 80098ea:	bf00      	nop
 80098ec:	0800a938 	.word	0x0800a938
 80098f0:	0800a958 	.word	0x0800a958
 80098f4:	0800a918 	.word	0x0800a918
 80098f8:	0800a8e2 	.word	0x0800a8e2
 80098fc:	0800a8ec 	.word	0x0800a8ec
 8009900:	00000000 	.word	0x00000000
 8009904:	08009687 	.word	0x08009687
 8009908:	0800a8e8 	.word	0x0800a8e8

0800990c <_printf_common>:
 800990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009910:	4616      	mov	r6, r2
 8009912:	4699      	mov	r9, r3
 8009914:	688a      	ldr	r2, [r1, #8]
 8009916:	690b      	ldr	r3, [r1, #16]
 8009918:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800991c:	4293      	cmp	r3, r2
 800991e:	bfb8      	it	lt
 8009920:	4613      	movlt	r3, r2
 8009922:	6033      	str	r3, [r6, #0]
 8009924:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009928:	4607      	mov	r7, r0
 800992a:	460c      	mov	r4, r1
 800992c:	b10a      	cbz	r2, 8009932 <_printf_common+0x26>
 800992e:	3301      	adds	r3, #1
 8009930:	6033      	str	r3, [r6, #0]
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	0699      	lsls	r1, r3, #26
 8009936:	bf42      	ittt	mi
 8009938:	6833      	ldrmi	r3, [r6, #0]
 800993a:	3302      	addmi	r3, #2
 800993c:	6033      	strmi	r3, [r6, #0]
 800993e:	6825      	ldr	r5, [r4, #0]
 8009940:	f015 0506 	ands.w	r5, r5, #6
 8009944:	d106      	bne.n	8009954 <_printf_common+0x48>
 8009946:	f104 0a19 	add.w	sl, r4, #25
 800994a:	68e3      	ldr	r3, [r4, #12]
 800994c:	6832      	ldr	r2, [r6, #0]
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	42ab      	cmp	r3, r5
 8009952:	dc26      	bgt.n	80099a2 <_printf_common+0x96>
 8009954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009958:	1e13      	subs	r3, r2, #0
 800995a:	6822      	ldr	r2, [r4, #0]
 800995c:	bf18      	it	ne
 800995e:	2301      	movne	r3, #1
 8009960:	0692      	lsls	r2, r2, #26
 8009962:	d42b      	bmi.n	80099bc <_printf_common+0xb0>
 8009964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009968:	4649      	mov	r1, r9
 800996a:	4638      	mov	r0, r7
 800996c:	47c0      	blx	r8
 800996e:	3001      	adds	r0, #1
 8009970:	d01e      	beq.n	80099b0 <_printf_common+0xa4>
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	68e5      	ldr	r5, [r4, #12]
 8009976:	6832      	ldr	r2, [r6, #0]
 8009978:	f003 0306 	and.w	r3, r3, #6
 800997c:	2b04      	cmp	r3, #4
 800997e:	bf08      	it	eq
 8009980:	1aad      	subeq	r5, r5, r2
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	6922      	ldr	r2, [r4, #16]
 8009986:	bf0c      	ite	eq
 8009988:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800998c:	2500      	movne	r5, #0
 800998e:	4293      	cmp	r3, r2
 8009990:	bfc4      	itt	gt
 8009992:	1a9b      	subgt	r3, r3, r2
 8009994:	18ed      	addgt	r5, r5, r3
 8009996:	2600      	movs	r6, #0
 8009998:	341a      	adds	r4, #26
 800999a:	42b5      	cmp	r5, r6
 800999c:	d11a      	bne.n	80099d4 <_printf_common+0xc8>
 800999e:	2000      	movs	r0, #0
 80099a0:	e008      	b.n	80099b4 <_printf_common+0xa8>
 80099a2:	2301      	movs	r3, #1
 80099a4:	4652      	mov	r2, sl
 80099a6:	4649      	mov	r1, r9
 80099a8:	4638      	mov	r0, r7
 80099aa:	47c0      	blx	r8
 80099ac:	3001      	adds	r0, #1
 80099ae:	d103      	bne.n	80099b8 <_printf_common+0xac>
 80099b0:	f04f 30ff 	mov.w	r0, #4294967295
 80099b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b8:	3501      	adds	r5, #1
 80099ba:	e7c6      	b.n	800994a <_printf_common+0x3e>
 80099bc:	18e1      	adds	r1, r4, r3
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	2030      	movs	r0, #48	; 0x30
 80099c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099c6:	4422      	add	r2, r4
 80099c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099d0:	3302      	adds	r3, #2
 80099d2:	e7c7      	b.n	8009964 <_printf_common+0x58>
 80099d4:	2301      	movs	r3, #1
 80099d6:	4622      	mov	r2, r4
 80099d8:	4649      	mov	r1, r9
 80099da:	4638      	mov	r0, r7
 80099dc:	47c0      	blx	r8
 80099de:	3001      	adds	r0, #1
 80099e0:	d0e6      	beq.n	80099b0 <_printf_common+0xa4>
 80099e2:	3601      	adds	r6, #1
 80099e4:	e7d9      	b.n	800999a <_printf_common+0x8e>
	...

080099e8 <_printf_i>:
 80099e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099ec:	7e0f      	ldrb	r7, [r1, #24]
 80099ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099f0:	2f78      	cmp	r7, #120	; 0x78
 80099f2:	4691      	mov	r9, r2
 80099f4:	4680      	mov	r8, r0
 80099f6:	460c      	mov	r4, r1
 80099f8:	469a      	mov	sl, r3
 80099fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099fe:	d807      	bhi.n	8009a10 <_printf_i+0x28>
 8009a00:	2f62      	cmp	r7, #98	; 0x62
 8009a02:	d80a      	bhi.n	8009a1a <_printf_i+0x32>
 8009a04:	2f00      	cmp	r7, #0
 8009a06:	f000 80d8 	beq.w	8009bba <_printf_i+0x1d2>
 8009a0a:	2f58      	cmp	r7, #88	; 0x58
 8009a0c:	f000 80a3 	beq.w	8009b56 <_printf_i+0x16e>
 8009a10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a18:	e03a      	b.n	8009a90 <_printf_i+0xa8>
 8009a1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a1e:	2b15      	cmp	r3, #21
 8009a20:	d8f6      	bhi.n	8009a10 <_printf_i+0x28>
 8009a22:	a101      	add	r1, pc, #4	; (adr r1, 8009a28 <_printf_i+0x40>)
 8009a24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a28:	08009a81 	.word	0x08009a81
 8009a2c:	08009a95 	.word	0x08009a95
 8009a30:	08009a11 	.word	0x08009a11
 8009a34:	08009a11 	.word	0x08009a11
 8009a38:	08009a11 	.word	0x08009a11
 8009a3c:	08009a11 	.word	0x08009a11
 8009a40:	08009a95 	.word	0x08009a95
 8009a44:	08009a11 	.word	0x08009a11
 8009a48:	08009a11 	.word	0x08009a11
 8009a4c:	08009a11 	.word	0x08009a11
 8009a50:	08009a11 	.word	0x08009a11
 8009a54:	08009ba1 	.word	0x08009ba1
 8009a58:	08009ac5 	.word	0x08009ac5
 8009a5c:	08009b83 	.word	0x08009b83
 8009a60:	08009a11 	.word	0x08009a11
 8009a64:	08009a11 	.word	0x08009a11
 8009a68:	08009bc3 	.word	0x08009bc3
 8009a6c:	08009a11 	.word	0x08009a11
 8009a70:	08009ac5 	.word	0x08009ac5
 8009a74:	08009a11 	.word	0x08009a11
 8009a78:	08009a11 	.word	0x08009a11
 8009a7c:	08009b8b 	.word	0x08009b8b
 8009a80:	682b      	ldr	r3, [r5, #0]
 8009a82:	1d1a      	adds	r2, r3, #4
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	602a      	str	r2, [r5, #0]
 8009a88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a90:	2301      	movs	r3, #1
 8009a92:	e0a3      	b.n	8009bdc <_printf_i+0x1f4>
 8009a94:	6820      	ldr	r0, [r4, #0]
 8009a96:	6829      	ldr	r1, [r5, #0]
 8009a98:	0606      	lsls	r6, r0, #24
 8009a9a:	f101 0304 	add.w	r3, r1, #4
 8009a9e:	d50a      	bpl.n	8009ab6 <_printf_i+0xce>
 8009aa0:	680e      	ldr	r6, [r1, #0]
 8009aa2:	602b      	str	r3, [r5, #0]
 8009aa4:	2e00      	cmp	r6, #0
 8009aa6:	da03      	bge.n	8009ab0 <_printf_i+0xc8>
 8009aa8:	232d      	movs	r3, #45	; 0x2d
 8009aaa:	4276      	negs	r6, r6
 8009aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab0:	485e      	ldr	r0, [pc, #376]	; (8009c2c <_printf_i+0x244>)
 8009ab2:	230a      	movs	r3, #10
 8009ab4:	e019      	b.n	8009aea <_printf_i+0x102>
 8009ab6:	680e      	ldr	r6, [r1, #0]
 8009ab8:	602b      	str	r3, [r5, #0]
 8009aba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009abe:	bf18      	it	ne
 8009ac0:	b236      	sxthne	r6, r6
 8009ac2:	e7ef      	b.n	8009aa4 <_printf_i+0xbc>
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	6820      	ldr	r0, [r4, #0]
 8009ac8:	1d19      	adds	r1, r3, #4
 8009aca:	6029      	str	r1, [r5, #0]
 8009acc:	0601      	lsls	r1, r0, #24
 8009ace:	d501      	bpl.n	8009ad4 <_printf_i+0xec>
 8009ad0:	681e      	ldr	r6, [r3, #0]
 8009ad2:	e002      	b.n	8009ada <_printf_i+0xf2>
 8009ad4:	0646      	lsls	r6, r0, #25
 8009ad6:	d5fb      	bpl.n	8009ad0 <_printf_i+0xe8>
 8009ad8:	881e      	ldrh	r6, [r3, #0]
 8009ada:	4854      	ldr	r0, [pc, #336]	; (8009c2c <_printf_i+0x244>)
 8009adc:	2f6f      	cmp	r7, #111	; 0x6f
 8009ade:	bf0c      	ite	eq
 8009ae0:	2308      	moveq	r3, #8
 8009ae2:	230a      	movne	r3, #10
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aea:	6865      	ldr	r5, [r4, #4]
 8009aec:	60a5      	str	r5, [r4, #8]
 8009aee:	2d00      	cmp	r5, #0
 8009af0:	bfa2      	ittt	ge
 8009af2:	6821      	ldrge	r1, [r4, #0]
 8009af4:	f021 0104 	bicge.w	r1, r1, #4
 8009af8:	6021      	strge	r1, [r4, #0]
 8009afa:	b90e      	cbnz	r6, 8009b00 <_printf_i+0x118>
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	d04d      	beq.n	8009b9c <_printf_i+0x1b4>
 8009b00:	4615      	mov	r5, r2
 8009b02:	fbb6 f1f3 	udiv	r1, r6, r3
 8009b06:	fb03 6711 	mls	r7, r3, r1, r6
 8009b0a:	5dc7      	ldrb	r7, [r0, r7]
 8009b0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b10:	4637      	mov	r7, r6
 8009b12:	42bb      	cmp	r3, r7
 8009b14:	460e      	mov	r6, r1
 8009b16:	d9f4      	bls.n	8009b02 <_printf_i+0x11a>
 8009b18:	2b08      	cmp	r3, #8
 8009b1a:	d10b      	bne.n	8009b34 <_printf_i+0x14c>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	07de      	lsls	r6, r3, #31
 8009b20:	d508      	bpl.n	8009b34 <_printf_i+0x14c>
 8009b22:	6923      	ldr	r3, [r4, #16]
 8009b24:	6861      	ldr	r1, [r4, #4]
 8009b26:	4299      	cmp	r1, r3
 8009b28:	bfde      	ittt	le
 8009b2a:	2330      	movle	r3, #48	; 0x30
 8009b2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b34:	1b52      	subs	r2, r2, r5
 8009b36:	6122      	str	r2, [r4, #16]
 8009b38:	f8cd a000 	str.w	sl, [sp]
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	aa03      	add	r2, sp, #12
 8009b40:	4621      	mov	r1, r4
 8009b42:	4640      	mov	r0, r8
 8009b44:	f7ff fee2 	bl	800990c <_printf_common>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	d14c      	bne.n	8009be6 <_printf_i+0x1fe>
 8009b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b50:	b004      	add	sp, #16
 8009b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b56:	4835      	ldr	r0, [pc, #212]	; (8009c2c <_printf_i+0x244>)
 8009b58:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b5c:	6829      	ldr	r1, [r5, #0]
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b64:	6029      	str	r1, [r5, #0]
 8009b66:	061d      	lsls	r5, r3, #24
 8009b68:	d514      	bpl.n	8009b94 <_printf_i+0x1ac>
 8009b6a:	07df      	lsls	r7, r3, #31
 8009b6c:	bf44      	itt	mi
 8009b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b72:	6023      	strmi	r3, [r4, #0]
 8009b74:	b91e      	cbnz	r6, 8009b7e <_printf_i+0x196>
 8009b76:	6823      	ldr	r3, [r4, #0]
 8009b78:	f023 0320 	bic.w	r3, r3, #32
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	2310      	movs	r3, #16
 8009b80:	e7b0      	b.n	8009ae4 <_printf_i+0xfc>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	f043 0320 	orr.w	r3, r3, #32
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	2378      	movs	r3, #120	; 0x78
 8009b8c:	4828      	ldr	r0, [pc, #160]	; (8009c30 <_printf_i+0x248>)
 8009b8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b92:	e7e3      	b.n	8009b5c <_printf_i+0x174>
 8009b94:	0659      	lsls	r1, r3, #25
 8009b96:	bf48      	it	mi
 8009b98:	b2b6      	uxthmi	r6, r6
 8009b9a:	e7e6      	b.n	8009b6a <_printf_i+0x182>
 8009b9c:	4615      	mov	r5, r2
 8009b9e:	e7bb      	b.n	8009b18 <_printf_i+0x130>
 8009ba0:	682b      	ldr	r3, [r5, #0]
 8009ba2:	6826      	ldr	r6, [r4, #0]
 8009ba4:	6961      	ldr	r1, [r4, #20]
 8009ba6:	1d18      	adds	r0, r3, #4
 8009ba8:	6028      	str	r0, [r5, #0]
 8009baa:	0635      	lsls	r5, r6, #24
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	d501      	bpl.n	8009bb4 <_printf_i+0x1cc>
 8009bb0:	6019      	str	r1, [r3, #0]
 8009bb2:	e002      	b.n	8009bba <_printf_i+0x1d2>
 8009bb4:	0670      	lsls	r0, r6, #25
 8009bb6:	d5fb      	bpl.n	8009bb0 <_printf_i+0x1c8>
 8009bb8:	8019      	strh	r1, [r3, #0]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6123      	str	r3, [r4, #16]
 8009bbe:	4615      	mov	r5, r2
 8009bc0:	e7ba      	b.n	8009b38 <_printf_i+0x150>
 8009bc2:	682b      	ldr	r3, [r5, #0]
 8009bc4:	1d1a      	adds	r2, r3, #4
 8009bc6:	602a      	str	r2, [r5, #0]
 8009bc8:	681d      	ldr	r5, [r3, #0]
 8009bca:	6862      	ldr	r2, [r4, #4]
 8009bcc:	2100      	movs	r1, #0
 8009bce:	4628      	mov	r0, r5
 8009bd0:	f7f6 fade 	bl	8000190 <memchr>
 8009bd4:	b108      	cbz	r0, 8009bda <_printf_i+0x1f2>
 8009bd6:	1b40      	subs	r0, r0, r5
 8009bd8:	6060      	str	r0, [r4, #4]
 8009bda:	6863      	ldr	r3, [r4, #4]
 8009bdc:	6123      	str	r3, [r4, #16]
 8009bde:	2300      	movs	r3, #0
 8009be0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be4:	e7a8      	b.n	8009b38 <_printf_i+0x150>
 8009be6:	6923      	ldr	r3, [r4, #16]
 8009be8:	462a      	mov	r2, r5
 8009bea:	4649      	mov	r1, r9
 8009bec:	4640      	mov	r0, r8
 8009bee:	47d0      	blx	sl
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	d0ab      	beq.n	8009b4c <_printf_i+0x164>
 8009bf4:	6823      	ldr	r3, [r4, #0]
 8009bf6:	079b      	lsls	r3, r3, #30
 8009bf8:	d413      	bmi.n	8009c22 <_printf_i+0x23a>
 8009bfa:	68e0      	ldr	r0, [r4, #12]
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	4298      	cmp	r0, r3
 8009c00:	bfb8      	it	lt
 8009c02:	4618      	movlt	r0, r3
 8009c04:	e7a4      	b.n	8009b50 <_printf_i+0x168>
 8009c06:	2301      	movs	r3, #1
 8009c08:	4632      	mov	r2, r6
 8009c0a:	4649      	mov	r1, r9
 8009c0c:	4640      	mov	r0, r8
 8009c0e:	47d0      	blx	sl
 8009c10:	3001      	adds	r0, #1
 8009c12:	d09b      	beq.n	8009b4c <_printf_i+0x164>
 8009c14:	3501      	adds	r5, #1
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	9903      	ldr	r1, [sp, #12]
 8009c1a:	1a5b      	subs	r3, r3, r1
 8009c1c:	42ab      	cmp	r3, r5
 8009c1e:	dcf2      	bgt.n	8009c06 <_printf_i+0x21e>
 8009c20:	e7eb      	b.n	8009bfa <_printf_i+0x212>
 8009c22:	2500      	movs	r5, #0
 8009c24:	f104 0619 	add.w	r6, r4, #25
 8009c28:	e7f5      	b.n	8009c16 <_printf_i+0x22e>
 8009c2a:	bf00      	nop
 8009c2c:	0800a8f3 	.word	0x0800a8f3
 8009c30:	0800a904 	.word	0x0800a904

08009c34 <_sbrk_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4d06      	ldr	r5, [pc, #24]	; (8009c50 <_sbrk_r+0x1c>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	602b      	str	r3, [r5, #0]
 8009c40:	f7fa f8ee 	bl	8003e20 <_sbrk>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d102      	bne.n	8009c4e <_sbrk_r+0x1a>
 8009c48:	682b      	ldr	r3, [r5, #0]
 8009c4a:	b103      	cbz	r3, 8009c4e <_sbrk_r+0x1a>
 8009c4c:	6023      	str	r3, [r4, #0]
 8009c4e:	bd38      	pop	{r3, r4, r5, pc}
 8009c50:	2000cdcc 	.word	0x2000cdcc

08009c54 <__swbuf_r>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	460e      	mov	r6, r1
 8009c58:	4614      	mov	r4, r2
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	b118      	cbz	r0, 8009c66 <__swbuf_r+0x12>
 8009c5e:	6983      	ldr	r3, [r0, #24]
 8009c60:	b90b      	cbnz	r3, 8009c66 <__swbuf_r+0x12>
 8009c62:	f000 f9d9 	bl	800a018 <__sinit>
 8009c66:	4b21      	ldr	r3, [pc, #132]	; (8009cec <__swbuf_r+0x98>)
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	d12b      	bne.n	8009cc4 <__swbuf_r+0x70>
 8009c6c:	686c      	ldr	r4, [r5, #4]
 8009c6e:	69a3      	ldr	r3, [r4, #24]
 8009c70:	60a3      	str	r3, [r4, #8]
 8009c72:	89a3      	ldrh	r3, [r4, #12]
 8009c74:	071a      	lsls	r2, r3, #28
 8009c76:	d52f      	bpl.n	8009cd8 <__swbuf_r+0x84>
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	b36b      	cbz	r3, 8009cd8 <__swbuf_r+0x84>
 8009c7c:	6923      	ldr	r3, [r4, #16]
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	1ac0      	subs	r0, r0, r3
 8009c82:	6963      	ldr	r3, [r4, #20]
 8009c84:	b2f6      	uxtb	r6, r6
 8009c86:	4283      	cmp	r3, r0
 8009c88:	4637      	mov	r7, r6
 8009c8a:	dc04      	bgt.n	8009c96 <__swbuf_r+0x42>
 8009c8c:	4621      	mov	r1, r4
 8009c8e:	4628      	mov	r0, r5
 8009c90:	f000 f92e 	bl	8009ef0 <_fflush_r>
 8009c94:	bb30      	cbnz	r0, 8009ce4 <__swbuf_r+0x90>
 8009c96:	68a3      	ldr	r3, [r4, #8]
 8009c98:	3b01      	subs	r3, #1
 8009c9a:	60a3      	str	r3, [r4, #8]
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	6022      	str	r2, [r4, #0]
 8009ca2:	701e      	strb	r6, [r3, #0]
 8009ca4:	6963      	ldr	r3, [r4, #20]
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	4283      	cmp	r3, r0
 8009caa:	d004      	beq.n	8009cb6 <__swbuf_r+0x62>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	07db      	lsls	r3, r3, #31
 8009cb0:	d506      	bpl.n	8009cc0 <__swbuf_r+0x6c>
 8009cb2:	2e0a      	cmp	r6, #10
 8009cb4:	d104      	bne.n	8009cc0 <__swbuf_r+0x6c>
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4628      	mov	r0, r5
 8009cba:	f000 f919 	bl	8009ef0 <_fflush_r>
 8009cbe:	b988      	cbnz	r0, 8009ce4 <__swbuf_r+0x90>
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cc4:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <__swbuf_r+0x9c>)
 8009cc6:	429c      	cmp	r4, r3
 8009cc8:	d101      	bne.n	8009cce <__swbuf_r+0x7a>
 8009cca:	68ac      	ldr	r4, [r5, #8]
 8009ccc:	e7cf      	b.n	8009c6e <__swbuf_r+0x1a>
 8009cce:	4b09      	ldr	r3, [pc, #36]	; (8009cf4 <__swbuf_r+0xa0>)
 8009cd0:	429c      	cmp	r4, r3
 8009cd2:	bf08      	it	eq
 8009cd4:	68ec      	ldreq	r4, [r5, #12]
 8009cd6:	e7ca      	b.n	8009c6e <__swbuf_r+0x1a>
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4628      	mov	r0, r5
 8009cdc:	f000 f80c 	bl	8009cf8 <__swsetup_r>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d0cb      	beq.n	8009c7c <__swbuf_r+0x28>
 8009ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ce8:	e7ea      	b.n	8009cc0 <__swbuf_r+0x6c>
 8009cea:	bf00      	nop
 8009cec:	0800a938 	.word	0x0800a938
 8009cf0:	0800a958 	.word	0x0800a958
 8009cf4:	0800a918 	.word	0x0800a918

08009cf8 <__swsetup_r>:
 8009cf8:	4b32      	ldr	r3, [pc, #200]	; (8009dc4 <__swsetup_r+0xcc>)
 8009cfa:	b570      	push	{r4, r5, r6, lr}
 8009cfc:	681d      	ldr	r5, [r3, #0]
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460c      	mov	r4, r1
 8009d02:	b125      	cbz	r5, 8009d0e <__swsetup_r+0x16>
 8009d04:	69ab      	ldr	r3, [r5, #24]
 8009d06:	b913      	cbnz	r3, 8009d0e <__swsetup_r+0x16>
 8009d08:	4628      	mov	r0, r5
 8009d0a:	f000 f985 	bl	800a018 <__sinit>
 8009d0e:	4b2e      	ldr	r3, [pc, #184]	; (8009dc8 <__swsetup_r+0xd0>)
 8009d10:	429c      	cmp	r4, r3
 8009d12:	d10f      	bne.n	8009d34 <__swsetup_r+0x3c>
 8009d14:	686c      	ldr	r4, [r5, #4]
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d1c:	0719      	lsls	r1, r3, #28
 8009d1e:	d42c      	bmi.n	8009d7a <__swsetup_r+0x82>
 8009d20:	06dd      	lsls	r5, r3, #27
 8009d22:	d411      	bmi.n	8009d48 <__swsetup_r+0x50>
 8009d24:	2309      	movs	r3, #9
 8009d26:	6033      	str	r3, [r6, #0]
 8009d28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d2c:	81a3      	strh	r3, [r4, #12]
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d32:	e03e      	b.n	8009db2 <__swsetup_r+0xba>
 8009d34:	4b25      	ldr	r3, [pc, #148]	; (8009dcc <__swsetup_r+0xd4>)
 8009d36:	429c      	cmp	r4, r3
 8009d38:	d101      	bne.n	8009d3e <__swsetup_r+0x46>
 8009d3a:	68ac      	ldr	r4, [r5, #8]
 8009d3c:	e7eb      	b.n	8009d16 <__swsetup_r+0x1e>
 8009d3e:	4b24      	ldr	r3, [pc, #144]	; (8009dd0 <__swsetup_r+0xd8>)
 8009d40:	429c      	cmp	r4, r3
 8009d42:	bf08      	it	eq
 8009d44:	68ec      	ldreq	r4, [r5, #12]
 8009d46:	e7e6      	b.n	8009d16 <__swsetup_r+0x1e>
 8009d48:	0758      	lsls	r0, r3, #29
 8009d4a:	d512      	bpl.n	8009d72 <__swsetup_r+0x7a>
 8009d4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d4e:	b141      	cbz	r1, 8009d62 <__swsetup_r+0x6a>
 8009d50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d54:	4299      	cmp	r1, r3
 8009d56:	d002      	beq.n	8009d5e <__swsetup_r+0x66>
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff fa41 	bl	80091e0 <_free_r>
 8009d5e:	2300      	movs	r3, #0
 8009d60:	6363      	str	r3, [r4, #52]	; 0x34
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d68:	81a3      	strh	r3, [r4, #12]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6063      	str	r3, [r4, #4]
 8009d6e:	6923      	ldr	r3, [r4, #16]
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	89a3      	ldrh	r3, [r4, #12]
 8009d74:	f043 0308 	orr.w	r3, r3, #8
 8009d78:	81a3      	strh	r3, [r4, #12]
 8009d7a:	6923      	ldr	r3, [r4, #16]
 8009d7c:	b94b      	cbnz	r3, 8009d92 <__swsetup_r+0x9a>
 8009d7e:	89a3      	ldrh	r3, [r4, #12]
 8009d80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d88:	d003      	beq.n	8009d92 <__swsetup_r+0x9a>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	f000 fa09 	bl	800a1a4 <__smakebuf_r>
 8009d92:	89a0      	ldrh	r0, [r4, #12]
 8009d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d98:	f010 0301 	ands.w	r3, r0, #1
 8009d9c:	d00a      	beq.n	8009db4 <__swsetup_r+0xbc>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60a3      	str	r3, [r4, #8]
 8009da2:	6963      	ldr	r3, [r4, #20]
 8009da4:	425b      	negs	r3, r3
 8009da6:	61a3      	str	r3, [r4, #24]
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	b943      	cbnz	r3, 8009dbe <__swsetup_r+0xc6>
 8009dac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009db0:	d1ba      	bne.n	8009d28 <__swsetup_r+0x30>
 8009db2:	bd70      	pop	{r4, r5, r6, pc}
 8009db4:	0781      	lsls	r1, r0, #30
 8009db6:	bf58      	it	pl
 8009db8:	6963      	ldrpl	r3, [r4, #20]
 8009dba:	60a3      	str	r3, [r4, #8]
 8009dbc:	e7f4      	b.n	8009da8 <__swsetup_r+0xb0>
 8009dbe:	2000      	movs	r0, #0
 8009dc0:	e7f7      	b.n	8009db2 <__swsetup_r+0xba>
 8009dc2:	bf00      	nop
 8009dc4:	20000014 	.word	0x20000014
 8009dc8:	0800a938 	.word	0x0800a938
 8009dcc:	0800a958 	.word	0x0800a958
 8009dd0:	0800a918 	.word	0x0800a918

08009dd4 <abort>:
 8009dd4:	b508      	push	{r3, lr}
 8009dd6:	2006      	movs	r0, #6
 8009dd8:	f000 faa2 	bl	800a320 <raise>
 8009ddc:	2001      	movs	r0, #1
 8009dde:	f7f9 ffa7 	bl	8003d30 <_exit>
	...

08009de4 <__sflush_r>:
 8009de4:	898a      	ldrh	r2, [r1, #12]
 8009de6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dea:	4605      	mov	r5, r0
 8009dec:	0710      	lsls	r0, r2, #28
 8009dee:	460c      	mov	r4, r1
 8009df0:	d458      	bmi.n	8009ea4 <__sflush_r+0xc0>
 8009df2:	684b      	ldr	r3, [r1, #4]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dc05      	bgt.n	8009e04 <__sflush_r+0x20>
 8009df8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dc02      	bgt.n	8009e04 <__sflush_r+0x20>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e06:	2e00      	cmp	r6, #0
 8009e08:	d0f9      	beq.n	8009dfe <__sflush_r+0x1a>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009e10:	682f      	ldr	r7, [r5, #0]
 8009e12:	602b      	str	r3, [r5, #0]
 8009e14:	d032      	beq.n	8009e7c <__sflush_r+0x98>
 8009e16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	075a      	lsls	r2, r3, #29
 8009e1c:	d505      	bpl.n	8009e2a <__sflush_r+0x46>
 8009e1e:	6863      	ldr	r3, [r4, #4]
 8009e20:	1ac0      	subs	r0, r0, r3
 8009e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e24:	b10b      	cbz	r3, 8009e2a <__sflush_r+0x46>
 8009e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009e28:	1ac0      	subs	r0, r0, r3
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009e30:	6a21      	ldr	r1, [r4, #32]
 8009e32:	4628      	mov	r0, r5
 8009e34:	47b0      	blx	r6
 8009e36:	1c43      	adds	r3, r0, #1
 8009e38:	89a3      	ldrh	r3, [r4, #12]
 8009e3a:	d106      	bne.n	8009e4a <__sflush_r+0x66>
 8009e3c:	6829      	ldr	r1, [r5, #0]
 8009e3e:	291d      	cmp	r1, #29
 8009e40:	d82c      	bhi.n	8009e9c <__sflush_r+0xb8>
 8009e42:	4a2a      	ldr	r2, [pc, #168]	; (8009eec <__sflush_r+0x108>)
 8009e44:	40ca      	lsrs	r2, r1
 8009e46:	07d6      	lsls	r6, r2, #31
 8009e48:	d528      	bpl.n	8009e9c <__sflush_r+0xb8>
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	6062      	str	r2, [r4, #4]
 8009e4e:	04d9      	lsls	r1, r3, #19
 8009e50:	6922      	ldr	r2, [r4, #16]
 8009e52:	6022      	str	r2, [r4, #0]
 8009e54:	d504      	bpl.n	8009e60 <__sflush_r+0x7c>
 8009e56:	1c42      	adds	r2, r0, #1
 8009e58:	d101      	bne.n	8009e5e <__sflush_r+0x7a>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	b903      	cbnz	r3, 8009e60 <__sflush_r+0x7c>
 8009e5e:	6560      	str	r0, [r4, #84]	; 0x54
 8009e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e62:	602f      	str	r7, [r5, #0]
 8009e64:	2900      	cmp	r1, #0
 8009e66:	d0ca      	beq.n	8009dfe <__sflush_r+0x1a>
 8009e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e6c:	4299      	cmp	r1, r3
 8009e6e:	d002      	beq.n	8009e76 <__sflush_r+0x92>
 8009e70:	4628      	mov	r0, r5
 8009e72:	f7ff f9b5 	bl	80091e0 <_free_r>
 8009e76:	2000      	movs	r0, #0
 8009e78:	6360      	str	r0, [r4, #52]	; 0x34
 8009e7a:	e7c1      	b.n	8009e00 <__sflush_r+0x1c>
 8009e7c:	6a21      	ldr	r1, [r4, #32]
 8009e7e:	2301      	movs	r3, #1
 8009e80:	4628      	mov	r0, r5
 8009e82:	47b0      	blx	r6
 8009e84:	1c41      	adds	r1, r0, #1
 8009e86:	d1c7      	bne.n	8009e18 <__sflush_r+0x34>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0c4      	beq.n	8009e18 <__sflush_r+0x34>
 8009e8e:	2b1d      	cmp	r3, #29
 8009e90:	d001      	beq.n	8009e96 <__sflush_r+0xb2>
 8009e92:	2b16      	cmp	r3, #22
 8009e94:	d101      	bne.n	8009e9a <__sflush_r+0xb6>
 8009e96:	602f      	str	r7, [r5, #0]
 8009e98:	e7b1      	b.n	8009dfe <__sflush_r+0x1a>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ea0:	81a3      	strh	r3, [r4, #12]
 8009ea2:	e7ad      	b.n	8009e00 <__sflush_r+0x1c>
 8009ea4:	690f      	ldr	r7, [r1, #16]
 8009ea6:	2f00      	cmp	r7, #0
 8009ea8:	d0a9      	beq.n	8009dfe <__sflush_r+0x1a>
 8009eaa:	0793      	lsls	r3, r2, #30
 8009eac:	680e      	ldr	r6, [r1, #0]
 8009eae:	bf08      	it	eq
 8009eb0:	694b      	ldreq	r3, [r1, #20]
 8009eb2:	600f      	str	r7, [r1, #0]
 8009eb4:	bf18      	it	ne
 8009eb6:	2300      	movne	r3, #0
 8009eb8:	eba6 0807 	sub.w	r8, r6, r7
 8009ebc:	608b      	str	r3, [r1, #8]
 8009ebe:	f1b8 0f00 	cmp.w	r8, #0
 8009ec2:	dd9c      	ble.n	8009dfe <__sflush_r+0x1a>
 8009ec4:	6a21      	ldr	r1, [r4, #32]
 8009ec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009ec8:	4643      	mov	r3, r8
 8009eca:	463a      	mov	r2, r7
 8009ecc:	4628      	mov	r0, r5
 8009ece:	47b0      	blx	r6
 8009ed0:	2800      	cmp	r0, #0
 8009ed2:	dc06      	bgt.n	8009ee2 <__sflush_r+0xfe>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009eda:	81a3      	strh	r3, [r4, #12]
 8009edc:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee0:	e78e      	b.n	8009e00 <__sflush_r+0x1c>
 8009ee2:	4407      	add	r7, r0
 8009ee4:	eba8 0800 	sub.w	r8, r8, r0
 8009ee8:	e7e9      	b.n	8009ebe <__sflush_r+0xda>
 8009eea:	bf00      	nop
 8009eec:	20400001 	.word	0x20400001

08009ef0 <_fflush_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	690b      	ldr	r3, [r1, #16]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	b913      	cbnz	r3, 8009f00 <_fflush_r+0x10>
 8009efa:	2500      	movs	r5, #0
 8009efc:	4628      	mov	r0, r5
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	b118      	cbz	r0, 8009f0a <_fflush_r+0x1a>
 8009f02:	6983      	ldr	r3, [r0, #24]
 8009f04:	b90b      	cbnz	r3, 8009f0a <_fflush_r+0x1a>
 8009f06:	f000 f887 	bl	800a018 <__sinit>
 8009f0a:	4b14      	ldr	r3, [pc, #80]	; (8009f5c <_fflush_r+0x6c>)
 8009f0c:	429c      	cmp	r4, r3
 8009f0e:	d11b      	bne.n	8009f48 <_fflush_r+0x58>
 8009f10:	686c      	ldr	r4, [r5, #4]
 8009f12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d0ef      	beq.n	8009efa <_fflush_r+0xa>
 8009f1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f1c:	07d0      	lsls	r0, r2, #31
 8009f1e:	d404      	bmi.n	8009f2a <_fflush_r+0x3a>
 8009f20:	0599      	lsls	r1, r3, #22
 8009f22:	d402      	bmi.n	8009f2a <_fflush_r+0x3a>
 8009f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f26:	f000 f915 	bl	800a154 <__retarget_lock_acquire_recursive>
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	4621      	mov	r1, r4
 8009f2e:	f7ff ff59 	bl	8009de4 <__sflush_r>
 8009f32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f34:	07da      	lsls	r2, r3, #31
 8009f36:	4605      	mov	r5, r0
 8009f38:	d4e0      	bmi.n	8009efc <_fflush_r+0xc>
 8009f3a:	89a3      	ldrh	r3, [r4, #12]
 8009f3c:	059b      	lsls	r3, r3, #22
 8009f3e:	d4dd      	bmi.n	8009efc <_fflush_r+0xc>
 8009f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f42:	f000 f908 	bl	800a156 <__retarget_lock_release_recursive>
 8009f46:	e7d9      	b.n	8009efc <_fflush_r+0xc>
 8009f48:	4b05      	ldr	r3, [pc, #20]	; (8009f60 <_fflush_r+0x70>)
 8009f4a:	429c      	cmp	r4, r3
 8009f4c:	d101      	bne.n	8009f52 <_fflush_r+0x62>
 8009f4e:	68ac      	ldr	r4, [r5, #8]
 8009f50:	e7df      	b.n	8009f12 <_fflush_r+0x22>
 8009f52:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <_fflush_r+0x74>)
 8009f54:	429c      	cmp	r4, r3
 8009f56:	bf08      	it	eq
 8009f58:	68ec      	ldreq	r4, [r5, #12]
 8009f5a:	e7da      	b.n	8009f12 <_fflush_r+0x22>
 8009f5c:	0800a938 	.word	0x0800a938
 8009f60:	0800a958 	.word	0x0800a958
 8009f64:	0800a918 	.word	0x0800a918

08009f68 <std>:
 8009f68:	2300      	movs	r3, #0
 8009f6a:	b510      	push	{r4, lr}
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	e9c0 3300 	strd	r3, r3, [r0]
 8009f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009f76:	6083      	str	r3, [r0, #8]
 8009f78:	8181      	strh	r1, [r0, #12]
 8009f7a:	6643      	str	r3, [r0, #100]	; 0x64
 8009f7c:	81c2      	strh	r2, [r0, #14]
 8009f7e:	6183      	str	r3, [r0, #24]
 8009f80:	4619      	mov	r1, r3
 8009f82:	2208      	movs	r2, #8
 8009f84:	305c      	adds	r0, #92	; 0x5c
 8009f86:	f7ff f88d 	bl	80090a4 <memset>
 8009f8a:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <std+0x38>)
 8009f8c:	6263      	str	r3, [r4, #36]	; 0x24
 8009f8e:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <std+0x3c>)
 8009f90:	62a3      	str	r3, [r4, #40]	; 0x28
 8009f92:	4b05      	ldr	r3, [pc, #20]	; (8009fa8 <std+0x40>)
 8009f94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009f96:	4b05      	ldr	r3, [pc, #20]	; (8009fac <std+0x44>)
 8009f98:	6224      	str	r4, [r4, #32]
 8009f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8009f9c:	bd10      	pop	{r4, pc}
 8009f9e:	bf00      	nop
 8009fa0:	0800a359 	.word	0x0800a359
 8009fa4:	0800a37b 	.word	0x0800a37b
 8009fa8:	0800a3b3 	.word	0x0800a3b3
 8009fac:	0800a3d7 	.word	0x0800a3d7

08009fb0 <_cleanup_r>:
 8009fb0:	4901      	ldr	r1, [pc, #4]	; (8009fb8 <_cleanup_r+0x8>)
 8009fb2:	f000 b8af 	b.w	800a114 <_fwalk_reent>
 8009fb6:	bf00      	nop
 8009fb8:	08009ef1 	.word	0x08009ef1

08009fbc <__sfmoreglue>:
 8009fbc:	b570      	push	{r4, r5, r6, lr}
 8009fbe:	2268      	movs	r2, #104	; 0x68
 8009fc0:	1e4d      	subs	r5, r1, #1
 8009fc2:	4355      	muls	r5, r2
 8009fc4:	460e      	mov	r6, r1
 8009fc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009fca:	f7ff f975 	bl	80092b8 <_malloc_r>
 8009fce:	4604      	mov	r4, r0
 8009fd0:	b140      	cbz	r0, 8009fe4 <__sfmoreglue+0x28>
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	e9c0 1600 	strd	r1, r6, [r0]
 8009fd8:	300c      	adds	r0, #12
 8009fda:	60a0      	str	r0, [r4, #8]
 8009fdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009fe0:	f7ff f860 	bl	80090a4 <memset>
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}

08009fe8 <__sfp_lock_acquire>:
 8009fe8:	4801      	ldr	r0, [pc, #4]	; (8009ff0 <__sfp_lock_acquire+0x8>)
 8009fea:	f000 b8b3 	b.w	800a154 <__retarget_lock_acquire_recursive>
 8009fee:	bf00      	nop
 8009ff0:	2000cdc9 	.word	0x2000cdc9

08009ff4 <__sfp_lock_release>:
 8009ff4:	4801      	ldr	r0, [pc, #4]	; (8009ffc <__sfp_lock_release+0x8>)
 8009ff6:	f000 b8ae 	b.w	800a156 <__retarget_lock_release_recursive>
 8009ffa:	bf00      	nop
 8009ffc:	2000cdc9 	.word	0x2000cdc9

0800a000 <__sinit_lock_acquire>:
 800a000:	4801      	ldr	r0, [pc, #4]	; (800a008 <__sinit_lock_acquire+0x8>)
 800a002:	f000 b8a7 	b.w	800a154 <__retarget_lock_acquire_recursive>
 800a006:	bf00      	nop
 800a008:	2000cdca 	.word	0x2000cdca

0800a00c <__sinit_lock_release>:
 800a00c:	4801      	ldr	r0, [pc, #4]	; (800a014 <__sinit_lock_release+0x8>)
 800a00e:	f000 b8a2 	b.w	800a156 <__retarget_lock_release_recursive>
 800a012:	bf00      	nop
 800a014:	2000cdca 	.word	0x2000cdca

0800a018 <__sinit>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	4604      	mov	r4, r0
 800a01c:	f7ff fff0 	bl	800a000 <__sinit_lock_acquire>
 800a020:	69a3      	ldr	r3, [r4, #24]
 800a022:	b11b      	cbz	r3, 800a02c <__sinit+0x14>
 800a024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a028:	f7ff bff0 	b.w	800a00c <__sinit_lock_release>
 800a02c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a030:	6523      	str	r3, [r4, #80]	; 0x50
 800a032:	4b13      	ldr	r3, [pc, #76]	; (800a080 <__sinit+0x68>)
 800a034:	4a13      	ldr	r2, [pc, #76]	; (800a084 <__sinit+0x6c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	62a2      	str	r2, [r4, #40]	; 0x28
 800a03a:	42a3      	cmp	r3, r4
 800a03c:	bf04      	itt	eq
 800a03e:	2301      	moveq	r3, #1
 800a040:	61a3      	streq	r3, [r4, #24]
 800a042:	4620      	mov	r0, r4
 800a044:	f000 f820 	bl	800a088 <__sfp>
 800a048:	6060      	str	r0, [r4, #4]
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 f81c 	bl	800a088 <__sfp>
 800a050:	60a0      	str	r0, [r4, #8]
 800a052:	4620      	mov	r0, r4
 800a054:	f000 f818 	bl	800a088 <__sfp>
 800a058:	2200      	movs	r2, #0
 800a05a:	60e0      	str	r0, [r4, #12]
 800a05c:	2104      	movs	r1, #4
 800a05e:	6860      	ldr	r0, [r4, #4]
 800a060:	f7ff ff82 	bl	8009f68 <std>
 800a064:	68a0      	ldr	r0, [r4, #8]
 800a066:	2201      	movs	r2, #1
 800a068:	2109      	movs	r1, #9
 800a06a:	f7ff ff7d 	bl	8009f68 <std>
 800a06e:	68e0      	ldr	r0, [r4, #12]
 800a070:	2202      	movs	r2, #2
 800a072:	2112      	movs	r1, #18
 800a074:	f7ff ff78 	bl	8009f68 <std>
 800a078:	2301      	movs	r3, #1
 800a07a:	61a3      	str	r3, [r4, #24]
 800a07c:	e7d2      	b.n	800a024 <__sinit+0xc>
 800a07e:	bf00      	nop
 800a080:	0800a830 	.word	0x0800a830
 800a084:	08009fb1 	.word	0x08009fb1

0800a088 <__sfp>:
 800a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08a:	4607      	mov	r7, r0
 800a08c:	f7ff ffac 	bl	8009fe8 <__sfp_lock_acquire>
 800a090:	4b1e      	ldr	r3, [pc, #120]	; (800a10c <__sfp+0x84>)
 800a092:	681e      	ldr	r6, [r3, #0]
 800a094:	69b3      	ldr	r3, [r6, #24]
 800a096:	b913      	cbnz	r3, 800a09e <__sfp+0x16>
 800a098:	4630      	mov	r0, r6
 800a09a:	f7ff ffbd 	bl	800a018 <__sinit>
 800a09e:	3648      	adds	r6, #72	; 0x48
 800a0a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	d503      	bpl.n	800a0b0 <__sfp+0x28>
 800a0a8:	6833      	ldr	r3, [r6, #0]
 800a0aa:	b30b      	cbz	r3, 800a0f0 <__sfp+0x68>
 800a0ac:	6836      	ldr	r6, [r6, #0]
 800a0ae:	e7f7      	b.n	800a0a0 <__sfp+0x18>
 800a0b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a0b4:	b9d5      	cbnz	r5, 800a0ec <__sfp+0x64>
 800a0b6:	4b16      	ldr	r3, [pc, #88]	; (800a110 <__sfp+0x88>)
 800a0b8:	60e3      	str	r3, [r4, #12]
 800a0ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a0be:	6665      	str	r5, [r4, #100]	; 0x64
 800a0c0:	f000 f847 	bl	800a152 <__retarget_lock_init_recursive>
 800a0c4:	f7ff ff96 	bl	8009ff4 <__sfp_lock_release>
 800a0c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a0cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a0d0:	6025      	str	r5, [r4, #0]
 800a0d2:	61a5      	str	r5, [r4, #24]
 800a0d4:	2208      	movs	r2, #8
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a0dc:	f7fe ffe2 	bl	80090a4 <memset>
 800a0e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a0e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ec:	3468      	adds	r4, #104	; 0x68
 800a0ee:	e7d9      	b.n	800a0a4 <__sfp+0x1c>
 800a0f0:	2104      	movs	r1, #4
 800a0f2:	4638      	mov	r0, r7
 800a0f4:	f7ff ff62 	bl	8009fbc <__sfmoreglue>
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	6030      	str	r0, [r6, #0]
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d1d5      	bne.n	800a0ac <__sfp+0x24>
 800a100:	f7ff ff78 	bl	8009ff4 <__sfp_lock_release>
 800a104:	230c      	movs	r3, #12
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	e7ee      	b.n	800a0e8 <__sfp+0x60>
 800a10a:	bf00      	nop
 800a10c:	0800a830 	.word	0x0800a830
 800a110:	ffff0001 	.word	0xffff0001

0800a114 <_fwalk_reent>:
 800a114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a118:	4606      	mov	r6, r0
 800a11a:	4688      	mov	r8, r1
 800a11c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a120:	2700      	movs	r7, #0
 800a122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a126:	f1b9 0901 	subs.w	r9, r9, #1
 800a12a:	d505      	bpl.n	800a138 <_fwalk_reent+0x24>
 800a12c:	6824      	ldr	r4, [r4, #0]
 800a12e:	2c00      	cmp	r4, #0
 800a130:	d1f7      	bne.n	800a122 <_fwalk_reent+0xe>
 800a132:	4638      	mov	r0, r7
 800a134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a138:	89ab      	ldrh	r3, [r5, #12]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d907      	bls.n	800a14e <_fwalk_reent+0x3a>
 800a13e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a142:	3301      	adds	r3, #1
 800a144:	d003      	beq.n	800a14e <_fwalk_reent+0x3a>
 800a146:	4629      	mov	r1, r5
 800a148:	4630      	mov	r0, r6
 800a14a:	47c0      	blx	r8
 800a14c:	4307      	orrs	r7, r0
 800a14e:	3568      	adds	r5, #104	; 0x68
 800a150:	e7e9      	b.n	800a126 <_fwalk_reent+0x12>

0800a152 <__retarget_lock_init_recursive>:
 800a152:	4770      	bx	lr

0800a154 <__retarget_lock_acquire_recursive>:
 800a154:	4770      	bx	lr

0800a156 <__retarget_lock_release_recursive>:
 800a156:	4770      	bx	lr

0800a158 <__swhatbuf_r>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	460e      	mov	r6, r1
 800a15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a160:	2900      	cmp	r1, #0
 800a162:	b096      	sub	sp, #88	; 0x58
 800a164:	4614      	mov	r4, r2
 800a166:	461d      	mov	r5, r3
 800a168:	da08      	bge.n	800a17c <__swhatbuf_r+0x24>
 800a16a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	602a      	str	r2, [r5, #0]
 800a172:	061a      	lsls	r2, r3, #24
 800a174:	d410      	bmi.n	800a198 <__swhatbuf_r+0x40>
 800a176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a17a:	e00e      	b.n	800a19a <__swhatbuf_r+0x42>
 800a17c:	466a      	mov	r2, sp
 800a17e:	f000 f951 	bl	800a424 <_fstat_r>
 800a182:	2800      	cmp	r0, #0
 800a184:	dbf1      	blt.n	800a16a <__swhatbuf_r+0x12>
 800a186:	9a01      	ldr	r2, [sp, #4]
 800a188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a18c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a190:	425a      	negs	r2, r3
 800a192:	415a      	adcs	r2, r3
 800a194:	602a      	str	r2, [r5, #0]
 800a196:	e7ee      	b.n	800a176 <__swhatbuf_r+0x1e>
 800a198:	2340      	movs	r3, #64	; 0x40
 800a19a:	2000      	movs	r0, #0
 800a19c:	6023      	str	r3, [r4, #0]
 800a19e:	b016      	add	sp, #88	; 0x58
 800a1a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a1a4 <__smakebuf_r>:
 800a1a4:	898b      	ldrh	r3, [r1, #12]
 800a1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1a8:	079d      	lsls	r5, r3, #30
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	460c      	mov	r4, r1
 800a1ae:	d507      	bpl.n	800a1c0 <__smakebuf_r+0x1c>
 800a1b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	6123      	str	r3, [r4, #16]
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	6163      	str	r3, [r4, #20]
 800a1bc:	b002      	add	sp, #8
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	ab01      	add	r3, sp, #4
 800a1c2:	466a      	mov	r2, sp
 800a1c4:	f7ff ffc8 	bl	800a158 <__swhatbuf_r>
 800a1c8:	9900      	ldr	r1, [sp, #0]
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f7ff f873 	bl	80092b8 <_malloc_r>
 800a1d2:	b948      	cbnz	r0, 800a1e8 <__smakebuf_r+0x44>
 800a1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1d8:	059a      	lsls	r2, r3, #22
 800a1da:	d4ef      	bmi.n	800a1bc <__smakebuf_r+0x18>
 800a1dc:	f023 0303 	bic.w	r3, r3, #3
 800a1e0:	f043 0302 	orr.w	r3, r3, #2
 800a1e4:	81a3      	strh	r3, [r4, #12]
 800a1e6:	e7e3      	b.n	800a1b0 <__smakebuf_r+0xc>
 800a1e8:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <__smakebuf_r+0x7c>)
 800a1ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1ec:	89a3      	ldrh	r3, [r4, #12]
 800a1ee:	6020      	str	r0, [r4, #0]
 800a1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	9b00      	ldr	r3, [sp, #0]
 800a1f8:	6163      	str	r3, [r4, #20]
 800a1fa:	9b01      	ldr	r3, [sp, #4]
 800a1fc:	6120      	str	r0, [r4, #16]
 800a1fe:	b15b      	cbz	r3, 800a218 <__smakebuf_r+0x74>
 800a200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a204:	4630      	mov	r0, r6
 800a206:	f000 f91f 	bl	800a448 <_isatty_r>
 800a20a:	b128      	cbz	r0, 800a218 <__smakebuf_r+0x74>
 800a20c:	89a3      	ldrh	r3, [r4, #12]
 800a20e:	f023 0303 	bic.w	r3, r3, #3
 800a212:	f043 0301 	orr.w	r3, r3, #1
 800a216:	81a3      	strh	r3, [r4, #12]
 800a218:	89a0      	ldrh	r0, [r4, #12]
 800a21a:	4305      	orrs	r5, r0
 800a21c:	81a5      	strh	r5, [r4, #12]
 800a21e:	e7cd      	b.n	800a1bc <__smakebuf_r+0x18>
 800a220:	08009fb1 	.word	0x08009fb1

0800a224 <memmove>:
 800a224:	4288      	cmp	r0, r1
 800a226:	b510      	push	{r4, lr}
 800a228:	eb01 0402 	add.w	r4, r1, r2
 800a22c:	d902      	bls.n	800a234 <memmove+0x10>
 800a22e:	4284      	cmp	r4, r0
 800a230:	4623      	mov	r3, r4
 800a232:	d807      	bhi.n	800a244 <memmove+0x20>
 800a234:	1e43      	subs	r3, r0, #1
 800a236:	42a1      	cmp	r1, r4
 800a238:	d008      	beq.n	800a24c <memmove+0x28>
 800a23a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a23e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a242:	e7f8      	b.n	800a236 <memmove+0x12>
 800a244:	4402      	add	r2, r0
 800a246:	4601      	mov	r1, r0
 800a248:	428a      	cmp	r2, r1
 800a24a:	d100      	bne.n	800a24e <memmove+0x2a>
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a252:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a256:	e7f7      	b.n	800a248 <memmove+0x24>

0800a258 <__malloc_lock>:
 800a258:	4801      	ldr	r0, [pc, #4]	; (800a260 <__malloc_lock+0x8>)
 800a25a:	f7ff bf7b 	b.w	800a154 <__retarget_lock_acquire_recursive>
 800a25e:	bf00      	nop
 800a260:	2000cdc8 	.word	0x2000cdc8

0800a264 <__malloc_unlock>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__malloc_unlock+0x8>)
 800a266:	f7ff bf76 	b.w	800a156 <__retarget_lock_release_recursive>
 800a26a:	bf00      	nop
 800a26c:	2000cdc8 	.word	0x2000cdc8

0800a270 <_realloc_r>:
 800a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a274:	4680      	mov	r8, r0
 800a276:	4614      	mov	r4, r2
 800a278:	460e      	mov	r6, r1
 800a27a:	b921      	cbnz	r1, 800a286 <_realloc_r+0x16>
 800a27c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a280:	4611      	mov	r1, r2
 800a282:	f7ff b819 	b.w	80092b8 <_malloc_r>
 800a286:	b92a      	cbnz	r2, 800a294 <_realloc_r+0x24>
 800a288:	f7fe ffaa 	bl	80091e0 <_free_r>
 800a28c:	4625      	mov	r5, r4
 800a28e:	4628      	mov	r0, r5
 800a290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a294:	f000 f8fa 	bl	800a48c <_malloc_usable_size_r>
 800a298:	4284      	cmp	r4, r0
 800a29a:	4607      	mov	r7, r0
 800a29c:	d802      	bhi.n	800a2a4 <_realloc_r+0x34>
 800a29e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2a2:	d812      	bhi.n	800a2ca <_realloc_r+0x5a>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4640      	mov	r0, r8
 800a2a8:	f7ff f806 	bl	80092b8 <_malloc_r>
 800a2ac:	4605      	mov	r5, r0
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d0ed      	beq.n	800a28e <_realloc_r+0x1e>
 800a2b2:	42bc      	cmp	r4, r7
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	bf28      	it	cs
 800a2ba:	463a      	movcs	r2, r7
 800a2bc:	f7fe fee4 	bl	8009088 <memcpy>
 800a2c0:	4631      	mov	r1, r6
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	f7fe ff8c 	bl	80091e0 <_free_r>
 800a2c8:	e7e1      	b.n	800a28e <_realloc_r+0x1e>
 800a2ca:	4635      	mov	r5, r6
 800a2cc:	e7df      	b.n	800a28e <_realloc_r+0x1e>

0800a2ce <_raise_r>:
 800a2ce:	291f      	cmp	r1, #31
 800a2d0:	b538      	push	{r3, r4, r5, lr}
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	d904      	bls.n	800a2e2 <_raise_r+0x14>
 800a2d8:	2316      	movs	r3, #22
 800a2da:	6003      	str	r3, [r0, #0]
 800a2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2e0:	bd38      	pop	{r3, r4, r5, pc}
 800a2e2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2e4:	b112      	cbz	r2, 800a2ec <_raise_r+0x1e>
 800a2e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2ea:	b94b      	cbnz	r3, 800a300 <_raise_r+0x32>
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f000 f831 	bl	800a354 <_getpid_r>
 800a2f2:	462a      	mov	r2, r5
 800a2f4:	4601      	mov	r1, r0
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2fc:	f000 b818 	b.w	800a330 <_kill_r>
 800a300:	2b01      	cmp	r3, #1
 800a302:	d00a      	beq.n	800a31a <_raise_r+0x4c>
 800a304:	1c59      	adds	r1, r3, #1
 800a306:	d103      	bne.n	800a310 <_raise_r+0x42>
 800a308:	2316      	movs	r3, #22
 800a30a:	6003      	str	r3, [r0, #0]
 800a30c:	2001      	movs	r0, #1
 800a30e:	e7e7      	b.n	800a2e0 <_raise_r+0x12>
 800a310:	2400      	movs	r4, #0
 800a312:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a316:	4628      	mov	r0, r5
 800a318:	4798      	blx	r3
 800a31a:	2000      	movs	r0, #0
 800a31c:	e7e0      	b.n	800a2e0 <_raise_r+0x12>
	...

0800a320 <raise>:
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <raise+0xc>)
 800a322:	4601      	mov	r1, r0
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	f7ff bfd2 	b.w	800a2ce <_raise_r>
 800a32a:	bf00      	nop
 800a32c:	20000014 	.word	0x20000014

0800a330 <_kill_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4d07      	ldr	r5, [pc, #28]	; (800a350 <_kill_r+0x20>)
 800a334:	2300      	movs	r3, #0
 800a336:	4604      	mov	r4, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	4611      	mov	r1, r2
 800a33c:	602b      	str	r3, [r5, #0]
 800a33e:	f7f9 fce7 	bl	8003d10 <_kill>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	d102      	bne.n	800a34c <_kill_r+0x1c>
 800a346:	682b      	ldr	r3, [r5, #0]
 800a348:	b103      	cbz	r3, 800a34c <_kill_r+0x1c>
 800a34a:	6023      	str	r3, [r4, #0]
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
 800a34e:	bf00      	nop
 800a350:	2000cdcc 	.word	0x2000cdcc

0800a354 <_getpid_r>:
 800a354:	f7f9 bcd4 	b.w	8003d00 <_getpid>

0800a358 <__sread>:
 800a358:	b510      	push	{r4, lr}
 800a35a:	460c      	mov	r4, r1
 800a35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a360:	f000 f89c 	bl	800a49c <_read_r>
 800a364:	2800      	cmp	r0, #0
 800a366:	bfab      	itete	ge
 800a368:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a36a:	89a3      	ldrhlt	r3, [r4, #12]
 800a36c:	181b      	addge	r3, r3, r0
 800a36e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a372:	bfac      	ite	ge
 800a374:	6563      	strge	r3, [r4, #84]	; 0x54
 800a376:	81a3      	strhlt	r3, [r4, #12]
 800a378:	bd10      	pop	{r4, pc}

0800a37a <__swrite>:
 800a37a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a37e:	461f      	mov	r7, r3
 800a380:	898b      	ldrh	r3, [r1, #12]
 800a382:	05db      	lsls	r3, r3, #23
 800a384:	4605      	mov	r5, r0
 800a386:	460c      	mov	r4, r1
 800a388:	4616      	mov	r6, r2
 800a38a:	d505      	bpl.n	800a398 <__swrite+0x1e>
 800a38c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a390:	2302      	movs	r3, #2
 800a392:	2200      	movs	r2, #0
 800a394:	f000 f868 	bl	800a468 <_lseek_r>
 800a398:	89a3      	ldrh	r3, [r4, #12]
 800a39a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a39e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3a2:	81a3      	strh	r3, [r4, #12]
 800a3a4:	4632      	mov	r2, r6
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ae:	f000 b817 	b.w	800a3e0 <_write_r>

0800a3b2 <__sseek>:
 800a3b2:	b510      	push	{r4, lr}
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ba:	f000 f855 	bl	800a468 <_lseek_r>
 800a3be:	1c43      	adds	r3, r0, #1
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	bf15      	itete	ne
 800a3c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3ce:	81a3      	strheq	r3, [r4, #12]
 800a3d0:	bf18      	it	ne
 800a3d2:	81a3      	strhne	r3, [r4, #12]
 800a3d4:	bd10      	pop	{r4, pc}

0800a3d6 <__sclose>:
 800a3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3da:	f000 b813 	b.w	800a404 <_close_r>
	...

0800a3e0 <_write_r>:
 800a3e0:	b538      	push	{r3, r4, r5, lr}
 800a3e2:	4d07      	ldr	r5, [pc, #28]	; (800a400 <_write_r+0x20>)
 800a3e4:	4604      	mov	r4, r0
 800a3e6:	4608      	mov	r0, r1
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	602a      	str	r2, [r5, #0]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	f7f9 fcc5 	bl	8003d7e <_write>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_write_r+0x1e>
 800a3f8:	682b      	ldr	r3, [r5, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_write_r+0x1e>
 800a3fc:	6023      	str	r3, [r4, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	2000cdcc 	.word	0x2000cdcc

0800a404 <_close_r>:
 800a404:	b538      	push	{r3, r4, r5, lr}
 800a406:	4d06      	ldr	r5, [pc, #24]	; (800a420 <_close_r+0x1c>)
 800a408:	2300      	movs	r3, #0
 800a40a:	4604      	mov	r4, r0
 800a40c:	4608      	mov	r0, r1
 800a40e:	602b      	str	r3, [r5, #0]
 800a410:	f7f9 fcd1 	bl	8003db6 <_close>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	d102      	bne.n	800a41e <_close_r+0x1a>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	b103      	cbz	r3, 800a41e <_close_r+0x1a>
 800a41c:	6023      	str	r3, [r4, #0]
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	2000cdcc 	.word	0x2000cdcc

0800a424 <_fstat_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d07      	ldr	r5, [pc, #28]	; (800a444 <_fstat_r+0x20>)
 800a428:	2300      	movs	r3, #0
 800a42a:	4604      	mov	r4, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	4611      	mov	r1, r2
 800a430:	602b      	str	r3, [r5, #0]
 800a432:	f7f9 fccc 	bl	8003dce <_fstat>
 800a436:	1c43      	adds	r3, r0, #1
 800a438:	d102      	bne.n	800a440 <_fstat_r+0x1c>
 800a43a:	682b      	ldr	r3, [r5, #0]
 800a43c:	b103      	cbz	r3, 800a440 <_fstat_r+0x1c>
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	bd38      	pop	{r3, r4, r5, pc}
 800a442:	bf00      	nop
 800a444:	2000cdcc 	.word	0x2000cdcc

0800a448 <_isatty_r>:
 800a448:	b538      	push	{r3, r4, r5, lr}
 800a44a:	4d06      	ldr	r5, [pc, #24]	; (800a464 <_isatty_r+0x1c>)
 800a44c:	2300      	movs	r3, #0
 800a44e:	4604      	mov	r4, r0
 800a450:	4608      	mov	r0, r1
 800a452:	602b      	str	r3, [r5, #0]
 800a454:	f7f9 fccb 	bl	8003dee <_isatty>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_isatty_r+0x1a>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_isatty_r+0x1a>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	2000cdcc 	.word	0x2000cdcc

0800a468 <_lseek_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	; (800a488 <_lseek_r+0x20>)
 800a46c:	4604      	mov	r4, r0
 800a46e:	4608      	mov	r0, r1
 800a470:	4611      	mov	r1, r2
 800a472:	2200      	movs	r2, #0
 800a474:	602a      	str	r2, [r5, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	f7f9 fcc4 	bl	8003e04 <_lseek>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_lseek_r+0x1e>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_lseek_r+0x1e>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	2000cdcc 	.word	0x2000cdcc

0800a48c <_malloc_usable_size_r>:
 800a48c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a490:	1f18      	subs	r0, r3, #4
 800a492:	2b00      	cmp	r3, #0
 800a494:	bfbc      	itt	lt
 800a496:	580b      	ldrlt	r3, [r1, r0]
 800a498:	18c0      	addlt	r0, r0, r3
 800a49a:	4770      	bx	lr

0800a49c <_read_r>:
 800a49c:	b538      	push	{r3, r4, r5, lr}
 800a49e:	4d07      	ldr	r5, [pc, #28]	; (800a4bc <_read_r+0x20>)
 800a4a0:	4604      	mov	r4, r0
 800a4a2:	4608      	mov	r0, r1
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	602a      	str	r2, [r5, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f7f9 fc4a 	bl	8003d44 <_read>
 800a4b0:	1c43      	adds	r3, r0, #1
 800a4b2:	d102      	bne.n	800a4ba <_read_r+0x1e>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	b103      	cbz	r3, 800a4ba <_read_r+0x1e>
 800a4b8:	6023      	str	r3, [r4, #0]
 800a4ba:	bd38      	pop	{r3, r4, r5, pc}
 800a4bc:	2000cdcc 	.word	0x2000cdcc

0800a4c0 <_init>:
 800a4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c2:	bf00      	nop
 800a4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4c6:	bc08      	pop	{r3}
 800a4c8:	469e      	mov	lr, r3
 800a4ca:	4770      	bx	lr

0800a4cc <_fini>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	bf00      	nop
 800a4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4d2:	bc08      	pop	{r3}
 800a4d4:	469e      	mov	lr, r3
 800a4d6:	4770      	bx	lr
