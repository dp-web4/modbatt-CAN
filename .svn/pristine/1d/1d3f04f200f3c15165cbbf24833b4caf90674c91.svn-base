
Pack Controller EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178c8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cc8  08017a08  08017a08  00027a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080196d0  080196d0  000296d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080196d8  080196d8  000296d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080196dc  080196dc  000296dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002c8  20000008  080196e0  00030008  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  7 .bss          0000a4f0  200002d0  080199a8  000302d0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000a7c0  080199a8  0003a7c0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000302d0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032b1d  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005259  00000000  00000000  00062e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002bf8  00000000  00000000  00068078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002a50  00000000  00000000  0006ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002853d  00000000  00000000  0006d6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c6dc  00000000  00000000  00095bfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000f95fc  00000000  00000000  000c22d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001bb8d5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d670  00000000  00000000  001bb928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002d0 	.word	0x200002d0
 800015c:	00000000 	.word	0x00000000
 8000160:	080179e8 	.word	0x080179e8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002d4 	.word	0x200002d4
 800017c:	080179e8 	.word	0x080179e8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr

08000244 <__aeabi_drsub>:
 8000244:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000248:	e002      	b.n	8000250 <__adddf3>
 800024a:	bf00      	nop

0800024c <__aeabi_dsub>:
 800024c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000250 <__adddf3>:
 8000250:	b530      	push	{r4, r5, lr}
 8000252:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000256:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025a:	ea94 0f05 	teq	r4, r5
 800025e:	bf08      	it	eq
 8000260:	ea90 0f02 	teqeq	r0, r2
 8000264:	bf1f      	itttt	ne
 8000266:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000272:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000276:	f000 80e2 	beq.w	800043e <__adddf3+0x1ee>
 800027a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000282:	bfb8      	it	lt
 8000284:	426d      	neglt	r5, r5
 8000286:	dd0c      	ble.n	80002a2 <__adddf3+0x52>
 8000288:	442c      	add	r4, r5
 800028a:	ea80 0202 	eor.w	r2, r0, r2
 800028e:	ea81 0303 	eor.w	r3, r1, r3
 8000292:	ea82 0000 	eor.w	r0, r2, r0
 8000296:	ea83 0101 	eor.w	r1, r3, r1
 800029a:	ea80 0202 	eor.w	r2, r0, r2
 800029e:	ea81 0303 	eor.w	r3, r1, r3
 80002a2:	2d36      	cmp	r5, #54	; 0x36
 80002a4:	bf88      	it	hi
 80002a6:	bd30      	pophi	{r4, r5, pc}
 80002a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x70>
 80002ba:	4240      	negs	r0, r0
 80002bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x84>
 80002ce:	4252      	negs	r2, r2
 80002d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d4:	ea94 0f05 	teq	r4, r5
 80002d8:	f000 80a7 	beq.w	800042a <__adddf3+0x1da>
 80002dc:	f1a4 0401 	sub.w	r4, r4, #1
 80002e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e4:	db0d      	blt.n	8000302 <__adddf3+0xb2>
 80002e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ea:	fa22 f205 	lsr.w	r2, r2, r5
 80002ee:	1880      	adds	r0, r0, r2
 80002f0:	f141 0100 	adc.w	r1, r1, #0
 80002f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f8:	1880      	adds	r0, r0, r2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	4159      	adcs	r1, r3
 8000300:	e00e      	b.n	8000320 <__adddf3+0xd0>
 8000302:	f1a5 0520 	sub.w	r5, r5, #32
 8000306:	f10e 0e20 	add.w	lr, lr, #32
 800030a:	2a01      	cmp	r2, #1
 800030c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000310:	bf28      	it	cs
 8000312:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000316:	fa43 f305 	asr.w	r3, r3, r5
 800031a:	18c0      	adds	r0, r0, r3
 800031c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000324:	d507      	bpl.n	8000336 <__adddf3+0xe6>
 8000326:	f04f 0e00 	mov.w	lr, #0
 800032a:	f1dc 0c00 	rsbs	ip, ip, #0
 800032e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000332:	eb6e 0101 	sbc.w	r1, lr, r1
 8000336:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800033a:	d31b      	bcc.n	8000374 <__adddf3+0x124>
 800033c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000340:	d30c      	bcc.n	800035c <__adddf3+0x10c>
 8000342:	0849      	lsrs	r1, r1, #1
 8000344:	ea5f 0030 	movs.w	r0, r0, rrx
 8000348:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800034c:	f104 0401 	add.w	r4, r4, #1
 8000350:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000354:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000358:	f080 809a 	bcs.w	8000490 <__adddf3+0x240>
 800035c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000360:	bf08      	it	eq
 8000362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000366:	f150 0000 	adcs.w	r0, r0, #0
 800036a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036e:	ea41 0105 	orr.w	r1, r1, r5
 8000372:	bd30      	pop	{r4, r5, pc}
 8000374:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000378:	4140      	adcs	r0, r0
 800037a:	eb41 0101 	adc.w	r1, r1, r1
 800037e:	3c01      	subs	r4, #1
 8000380:	bf28      	it	cs
 8000382:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000386:	d2e9      	bcs.n	800035c <__adddf3+0x10c>
 8000388:	f091 0f00 	teq	r1, #0
 800038c:	bf04      	itt	eq
 800038e:	4601      	moveq	r1, r0
 8000390:	2000      	moveq	r0, #0
 8000392:	fab1 f381 	clz	r3, r1
 8000396:	bf08      	it	eq
 8000398:	3320      	addeq	r3, #32
 800039a:	f1a3 030b 	sub.w	r3, r3, #11
 800039e:	f1b3 0220 	subs.w	r2, r3, #32
 80003a2:	da0c      	bge.n	80003be <__adddf3+0x16e>
 80003a4:	320c      	adds	r2, #12
 80003a6:	dd08      	ble.n	80003ba <__adddf3+0x16a>
 80003a8:	f102 0c14 	add.w	ip, r2, #20
 80003ac:	f1c2 020c 	rsb	r2, r2, #12
 80003b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b4:	fa21 f102 	lsr.w	r1, r1, r2
 80003b8:	e00c      	b.n	80003d4 <__adddf3+0x184>
 80003ba:	f102 0214 	add.w	r2, r2, #20
 80003be:	bfd8      	it	le
 80003c0:	f1c2 0c20 	rsble	ip, r2, #32
 80003c4:	fa01 f102 	lsl.w	r1, r1, r2
 80003c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003cc:	bfdc      	itt	le
 80003ce:	ea41 010c 	orrle.w	r1, r1, ip
 80003d2:	4090      	lslle	r0, r2
 80003d4:	1ae4      	subs	r4, r4, r3
 80003d6:	bfa2      	ittt	ge
 80003d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003dc:	4329      	orrge	r1, r5
 80003de:	bd30      	popge	{r4, r5, pc}
 80003e0:	ea6f 0404 	mvn.w	r4, r4
 80003e4:	3c1f      	subs	r4, #31
 80003e6:	da1c      	bge.n	8000422 <__adddf3+0x1d2>
 80003e8:	340c      	adds	r4, #12
 80003ea:	dc0e      	bgt.n	800040a <__adddf3+0x1ba>
 80003ec:	f104 0414 	add.w	r4, r4, #20
 80003f0:	f1c4 0220 	rsb	r2, r4, #32
 80003f4:	fa20 f004 	lsr.w	r0, r0, r4
 80003f8:	fa01 f302 	lsl.w	r3, r1, r2
 80003fc:	ea40 0003 	orr.w	r0, r0, r3
 8000400:	fa21 f304 	lsr.w	r3, r1, r4
 8000404:	ea45 0103 	orr.w	r1, r5, r3
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	f1c4 040c 	rsb	r4, r4, #12
 800040e:	f1c4 0220 	rsb	r2, r4, #32
 8000412:	fa20 f002 	lsr.w	r0, r0, r2
 8000416:	fa01 f304 	lsl.w	r3, r1, r4
 800041a:	ea40 0003 	orr.w	r0, r0, r3
 800041e:	4629      	mov	r1, r5
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	fa21 f004 	lsr.w	r0, r1, r4
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	f094 0f00 	teq	r4, #0
 800042e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000432:	bf06      	itte	eq
 8000434:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000438:	3401      	addeq	r4, #1
 800043a:	3d01      	subne	r5, #1
 800043c:	e74e      	b.n	80002dc <__adddf3+0x8c>
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf18      	it	ne
 8000444:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000448:	d029      	beq.n	800049e <__adddf3+0x24e>
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	d005      	beq.n	8000462 <__adddf3+0x212>
 8000456:	ea54 0c00 	orrs.w	ip, r4, r0
 800045a:	bf04      	itt	eq
 800045c:	4619      	moveq	r1, r3
 800045e:	4610      	moveq	r0, r2
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea91 0f03 	teq	r1, r3
 8000466:	bf1e      	ittt	ne
 8000468:	2100      	movne	r1, #0
 800046a:	2000      	movne	r0, #0
 800046c:	bd30      	popne	{r4, r5, pc}
 800046e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000472:	d105      	bne.n	8000480 <__adddf3+0x230>
 8000474:	0040      	lsls	r0, r0, #1
 8000476:	4149      	adcs	r1, r1
 8000478:	bf28      	it	cs
 800047a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000484:	bf3c      	itt	cc
 8000486:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800048a:	bd30      	popcc	{r4, r5, pc}
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000494:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a2:	bf1a      	itte	ne
 80004a4:	4619      	movne	r1, r3
 80004a6:	4610      	movne	r0, r2
 80004a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ac:	bf1c      	itt	ne
 80004ae:	460b      	movne	r3, r1
 80004b0:	4602      	movne	r2, r0
 80004b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b6:	bf06      	itte	eq
 80004b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004bc:	ea91 0f03 	teqeq	r1, r3
 80004c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	bf00      	nop

080004c8 <__aeabi_ui2d>:
 80004c8:	f090 0f00 	teq	r0, #0
 80004cc:	bf04      	itt	eq
 80004ce:	2100      	moveq	r1, #0
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004dc:	f04f 0500 	mov.w	r5, #0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e750      	b.n	8000388 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_i2d>:
 80004e8:	f090 0f00 	teq	r0, #0
 80004ec:	bf04      	itt	eq
 80004ee:	2100      	moveq	r1, #0
 80004f0:	4770      	bxeq	lr
 80004f2:	b530      	push	{r4, r5, lr}
 80004f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000500:	bf48      	it	mi
 8000502:	4240      	negmi	r0, r0
 8000504:	f04f 0100 	mov.w	r1, #0
 8000508:	e73e      	b.n	8000388 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_f2d>:
 800050c:	0042      	lsls	r2, r0, #1
 800050e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000512:	ea4f 0131 	mov.w	r1, r1, rrx
 8000516:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051a:	bf1f      	itttt	ne
 800051c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000524:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000528:	4770      	bxne	lr
 800052a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800052e:	bf08      	it	eq
 8000530:	4770      	bxeq	lr
 8000532:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000536:	bf04      	itt	eq
 8000538:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000544:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000548:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800054c:	e71c      	b.n	8000388 <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_ul2d>:
 8000550:	ea50 0201 	orrs.w	r2, r0, r1
 8000554:	bf08      	it	eq
 8000556:	4770      	bxeq	lr
 8000558:	b530      	push	{r4, r5, lr}
 800055a:	f04f 0500 	mov.w	r5, #0
 800055e:	e00a      	b.n	8000576 <__aeabi_l2d+0x16>

08000560 <__aeabi_l2d>:
 8000560:	ea50 0201 	orrs.w	r2, r0, r1
 8000564:	bf08      	it	eq
 8000566:	4770      	bxeq	lr
 8000568:	b530      	push	{r4, r5, lr}
 800056a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800056e:	d502      	bpl.n	8000576 <__aeabi_l2d+0x16>
 8000570:	4240      	negs	r0, r0
 8000572:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000576:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000582:	f43f aed8 	beq.w	8000336 <__adddf3+0xe6>
 8000586:	f04f 0203 	mov.w	r2, #3
 800058a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058e:	bf18      	it	ne
 8000590:	3203      	addne	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059e:	f1c2 0320 	rsb	r3, r2, #32
 80005a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a6:	fa20 f002 	lsr.w	r0, r0, r2
 80005aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ae:	ea40 000e 	orr.w	r0, r0, lr
 80005b2:	fa21 f102 	lsr.w	r1, r1, r2
 80005b6:	4414      	add	r4, r2
 80005b8:	e6bd      	b.n	8000336 <__adddf3+0xe6>
 80005ba:	bf00      	nop

080005bc <__aeabi_dmul>:
 80005bc:	b570      	push	{r4, r5, r6, lr}
 80005be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ca:	bf1d      	ittte	ne
 80005cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d0:	ea94 0f0c 	teqne	r4, ip
 80005d4:	ea95 0f0c 	teqne	r5, ip
 80005d8:	f000 f8de 	bleq	8000798 <__aeabi_dmul+0x1dc>
 80005dc:	442c      	add	r4, r5
 80005de:	ea81 0603 	eor.w	r6, r1, r3
 80005e2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ea:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ee:	bf18      	it	ne
 80005f0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005fc:	d038      	beq.n	8000670 <__aeabi_dmul+0xb4>
 80005fe:	fba0 ce02 	umull	ip, lr, r0, r2
 8000602:	f04f 0500 	mov.w	r5, #0
 8000606:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800060e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000612:	f04f 0600 	mov.w	r6, #0
 8000616:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061a:	f09c 0f00 	teq	ip, #0
 800061e:	bf18      	it	ne
 8000620:	f04e 0e01 	orrne.w	lr, lr, #1
 8000624:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000628:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800062c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000630:	d204      	bcs.n	800063c <__aeabi_dmul+0x80>
 8000632:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000636:	416d      	adcs	r5, r5
 8000638:	eb46 0606 	adc.w	r6, r6, r6
 800063c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000640:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000644:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000648:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800064c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000650:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000654:	bf88      	it	hi
 8000656:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800065a:	d81e      	bhi.n	800069a <__aeabi_dmul+0xde>
 800065c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000660:	bf08      	it	eq
 8000662:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000666:	f150 0000 	adcs.w	r0, r0, #0
 800066a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000674:	ea46 0101 	orr.w	r1, r6, r1
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	ea81 0103 	eor.w	r1, r1, r3
 8000680:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000684:	bfc2      	ittt	gt
 8000686:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068e:	bd70      	popgt	{r4, r5, r6, pc}
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f04f 0e00 	mov.w	lr, #0
 8000698:	3c01      	subs	r4, #1
 800069a:	f300 80ab 	bgt.w	80007f4 <__aeabi_dmul+0x238>
 800069e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006a2:	bfde      	ittt	le
 80006a4:	2000      	movle	r0, #0
 80006a6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd70      	pople	{r4, r5, r6, pc}
 80006ac:	f1c4 0400 	rsb	r4, r4, #0
 80006b0:	3c20      	subs	r4, #32
 80006b2:	da35      	bge.n	8000720 <__aeabi_dmul+0x164>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc1b      	bgt.n	80006f0 <__aeabi_dmul+0x134>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f305 	lsl.w	r3, r0, r5
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f205 	lsl.w	r2, r1, r5
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	fa21 f604 	lsr.w	r6, r1, r4
 80006e0:	eb42 0106 	adc.w	r1, r2, r6
 80006e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e8:	bf08      	it	eq
 80006ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f1c4 040c 	rsb	r4, r4, #12
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f304 	lsl.w	r3, r0, r4
 80006fc:	fa20 f005 	lsr.w	r0, r0, r5
 8000700:	fa01 f204 	lsl.w	r2, r1, r4
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	f141 0100 	adc.w	r1, r1, #0
 8000714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000718:	bf08      	it	eq
 800071a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071e:	bd70      	pop	{r4, r5, r6, pc}
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f205 	lsl.w	r2, r0, r5
 8000728:	ea4e 0e02 	orr.w	lr, lr, r2
 800072c:	fa20 f304 	lsr.w	r3, r0, r4
 8000730:	fa01 f205 	lsl.w	r2, r1, r5
 8000734:	ea43 0302 	orr.w	r3, r3, r2
 8000738:	fa21 f004 	lsr.w	r0, r1, r4
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	fa21 f204 	lsr.w	r2, r1, r4
 8000744:	ea20 0002 	bic.w	r0, r0, r2
 8000748:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f094 0f00 	teq	r4, #0
 800075c:	d10f      	bne.n	800077e <__aeabi_dmul+0x1c2>
 800075e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000762:	0040      	lsls	r0, r0, #1
 8000764:	eb41 0101 	adc.w	r1, r1, r1
 8000768:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800076c:	bf08      	it	eq
 800076e:	3c01      	subeq	r4, #1
 8000770:	d0f7      	beq.n	8000762 <__aeabi_dmul+0x1a6>
 8000772:	ea41 0106 	orr.w	r1, r1, r6
 8000776:	f095 0f00 	teq	r5, #0
 800077a:	bf18      	it	ne
 800077c:	4770      	bxne	lr
 800077e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000782:	0052      	lsls	r2, r2, #1
 8000784:	eb43 0303 	adc.w	r3, r3, r3
 8000788:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800078c:	bf08      	it	eq
 800078e:	3d01      	subeq	r5, #1
 8000790:	d0f7      	beq.n	8000782 <__aeabi_dmul+0x1c6>
 8000792:	ea43 0306 	orr.w	r3, r3, r6
 8000796:	4770      	bx	lr
 8000798:	ea94 0f0c 	teq	r4, ip
 800079c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a0:	bf18      	it	ne
 80007a2:	ea95 0f0c 	teqne	r5, ip
 80007a6:	d00c      	beq.n	80007c2 <__aeabi_dmul+0x206>
 80007a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ac:	bf18      	it	ne
 80007ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b2:	d1d1      	bne.n	8000758 <__aeabi_dmul+0x19c>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c6:	bf06      	itte	eq
 80007c8:	4610      	moveq	r0, r2
 80007ca:	4619      	moveq	r1, r3
 80007cc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d0:	d019      	beq.n	8000806 <__aeabi_dmul+0x24a>
 80007d2:	ea94 0f0c 	teq	r4, ip
 80007d6:	d102      	bne.n	80007de <__aeabi_dmul+0x222>
 80007d8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007dc:	d113      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007de:	ea95 0f0c 	teq	r5, ip
 80007e2:	d105      	bne.n	80007f0 <__aeabi_dmul+0x234>
 80007e4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e8:	bf1c      	itt	ne
 80007ea:	4610      	movne	r0, r2
 80007ec:	4619      	movne	r1, r3
 80007ee:	d10a      	bne.n	8000806 <__aeabi_dmul+0x24a>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800080a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800080e:	bd70      	pop	{r4, r5, r6, pc}

08000810 <__aeabi_ddiv>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000816:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800081a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081e:	bf1d      	ittte	ne
 8000820:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000824:	ea94 0f0c 	teqne	r4, ip
 8000828:	ea95 0f0c 	teqne	r5, ip
 800082c:	f000 f8a7 	bleq	800097e <__aeabi_ddiv+0x16e>
 8000830:	eba4 0405 	sub.w	r4, r4, r5
 8000834:	ea81 0e03 	eor.w	lr, r1, r3
 8000838:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800083c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000840:	f000 8088 	beq.w	8000954 <__aeabi_ddiv+0x144>
 8000844:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000848:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800084c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000850:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000854:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000858:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800085c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000860:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000864:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000868:	429d      	cmp	r5, r3
 800086a:	bf08      	it	eq
 800086c:	4296      	cmpeq	r6, r2
 800086e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000872:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000876:	d202      	bcs.n	800087e <__aeabi_ddiv+0x6e>
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	1ab6      	subs	r6, r6, r2
 8000880:	eb65 0503 	sbc.w	r5, r5, r3
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800088e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ae:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b2:	bf22      	ittt	cs
 80008b4:	1ab6      	subcs	r6, r6, r2
 80008b6:	4675      	movcs	r5, lr
 80008b8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ca:	bf22      	ittt	cs
 80008cc:	1ab6      	subcs	r6, r6, r2
 80008ce:	4675      	movcs	r5, lr
 80008d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	ebb6 0e02 	subs.w	lr, r6, r2
 80008de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e2:	bf22      	ittt	cs
 80008e4:	1ab6      	subcs	r6, r6, r2
 80008e6:	4675      	movcs	r5, lr
 80008e8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ec:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f0:	d018      	beq.n	8000924 <__aeabi_ddiv+0x114>
 80008f2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000902:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000906:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090e:	d1c0      	bne.n	8000892 <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	d10b      	bne.n	800092e <__aeabi_ddiv+0x11e>
 8000916:	ea41 0100 	orr.w	r1, r1, r0
 800091a:	f04f 0000 	mov.w	r0, #0
 800091e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000922:	e7b6      	b.n	8000892 <__aeabi_ddiv+0x82>
 8000924:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000928:	bf04      	itt	eq
 800092a:	4301      	orreq	r1, r0
 800092c:	2000      	moveq	r0, #0
 800092e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000932:	bf88      	it	hi
 8000934:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000938:	f63f aeaf 	bhi.w	800069a <__aeabi_dmul+0xde>
 800093c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000940:	bf04      	itt	eq
 8000942:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094a:	f150 0000 	adcs.w	r0, r0, #0
 800094e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000952:	bd70      	pop	{r4, r5, r6, pc}
 8000954:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000958:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800095c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000960:	bfc2      	ittt	gt
 8000962:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096a:	bd70      	popgt	{r4, r5, r6, pc}
 800096c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000970:	f04f 0e00 	mov.w	lr, #0
 8000974:	3c01      	subs	r4, #1
 8000976:	e690      	b.n	800069a <__aeabi_dmul+0xde>
 8000978:	ea45 0e06 	orr.w	lr, r5, r6
 800097c:	e68d      	b.n	800069a <__aeabi_dmul+0xde>
 800097e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000982:	ea94 0f0c 	teq	r4, ip
 8000986:	bf08      	it	eq
 8000988:	ea95 0f0c 	teqeq	r5, ip
 800098c:	f43f af3b 	beq.w	8000806 <__aeabi_dmul+0x24a>
 8000990:	ea94 0f0c 	teq	r4, ip
 8000994:	d10a      	bne.n	80009ac <__aeabi_ddiv+0x19c>
 8000996:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099a:	f47f af34 	bne.w	8000806 <__aeabi_dmul+0x24a>
 800099e:	ea95 0f0c 	teq	r5, ip
 80009a2:	f47f af25 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e72c      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009ac:	ea95 0f0c 	teq	r5, ip
 80009b0:	d106      	bne.n	80009c0 <__aeabi_ddiv+0x1b0>
 80009b2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b6:	f43f aefd 	beq.w	80007b4 <__aeabi_dmul+0x1f8>
 80009ba:	4610      	mov	r0, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	e722      	b.n	8000806 <__aeabi_dmul+0x24a>
 80009c0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c4:	bf18      	it	ne
 80009c6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ca:	f47f aec5 	bne.w	8000758 <__aeabi_dmul+0x19c>
 80009ce:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d2:	f47f af0d 	bne.w	80007f0 <__aeabi_dmul+0x234>
 80009d6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009da:	f47f aeeb 	bne.w	80007b4 <__aeabi_dmul+0x1f8>
 80009de:	e712      	b.n	8000806 <__aeabi_dmul+0x24a>

080009e0 <__gedf2>:
 80009e0:	f04f 3cff 	mov.w	ip, #4294967295
 80009e4:	e006      	b.n	80009f4 <__cmpdf2+0x4>
 80009e6:	bf00      	nop

080009e8 <__ledf2>:
 80009e8:	f04f 0c01 	mov.w	ip, #1
 80009ec:	e002      	b.n	80009f4 <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__cmpdf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	bf18      	it	ne
 8000a06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0a:	d01b      	beq.n	8000a44 <__cmpdf2+0x54>
 8000a0c:	b001      	add	sp, #4
 8000a0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a12:	bf0c      	ite	eq
 8000a14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a18:	ea91 0f03 	teqne	r1, r3
 8000a1c:	bf02      	ittt	eq
 8000a1e:	ea90 0f02 	teqeq	r0, r2
 8000a22:	2000      	moveq	r0, #0
 8000a24:	4770      	bxeq	lr
 8000a26:	f110 0f00 	cmn.w	r0, #0
 8000a2a:	ea91 0f03 	teq	r1, r3
 8000a2e:	bf58      	it	pl
 8000a30:	4299      	cmppl	r1, r3
 8000a32:	bf08      	it	eq
 8000a34:	4290      	cmpeq	r0, r2
 8000a36:	bf2c      	ite	cs
 8000a38:	17d8      	asrcs	r0, r3, #31
 8000a3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3e:	f040 0001 	orr.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	d102      	bne.n	8000a54 <__cmpdf2+0x64>
 8000a4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a52:	d107      	bne.n	8000a64 <__cmpdf2+0x74>
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	d1d6      	bne.n	8000a0c <__cmpdf2+0x1c>
 8000a5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a62:	d0d3      	beq.n	8000a0c <__cmpdf2+0x1c>
 8000a64:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_cdrcmple>:
 8000a6c:	4684      	mov	ip, r0
 8000a6e:	4610      	mov	r0, r2
 8000a70:	4662      	mov	r2, ip
 8000a72:	468c      	mov	ip, r1
 8000a74:	4619      	mov	r1, r3
 8000a76:	4663      	mov	r3, ip
 8000a78:	e000      	b.n	8000a7c <__aeabi_cdcmpeq>
 8000a7a:	bf00      	nop

08000a7c <__aeabi_cdcmpeq>:
 8000a7c:	b501      	push	{r0, lr}
 8000a7e:	f7ff ffb7 	bl	80009f0 <__cmpdf2>
 8000a82:	2800      	cmp	r0, #0
 8000a84:	bf48      	it	mi
 8000a86:	f110 0f00 	cmnmi.w	r0, #0
 8000a8a:	bd01      	pop	{r0, pc}

08000a8c <__aeabi_dcmpeq>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff fff4 	bl	8000a7c <__aeabi_cdcmpeq>
 8000a94:	bf0c      	ite	eq
 8000a96:	2001      	moveq	r0, #1
 8000a98:	2000      	movne	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmplt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffea 	bl	8000a7c <__aeabi_cdcmpeq>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmple>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffe0 	bl	8000a7c <__aeabi_cdcmpeq>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpge>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffce 	bl	8000a6c <__aeabi_cdrcmple>
 8000ad0:	bf94      	ite	ls
 8000ad2:	2001      	movls	r0, #1
 8000ad4:	2000      	movhi	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpgt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffc4 	bl	8000a6c <__aeabi_cdrcmple>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmpun>:
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__aeabi_dcmpun+0x10>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__aeabi_dcmpun+0x20>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d102      	bne.n	8000b16 <__aeabi_dcmpun+0x26>
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	f04f 0001 	mov.w	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_ldivmod>:
 8000c4c:	b97b      	cbnz	r3, 8000c6e <__aeabi_ldivmod+0x22>
 8000c4e:	b972      	cbnz	r2, 8000c6e <__aeabi_ldivmod+0x22>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bfbe      	ittt	lt
 8000c54:	2000      	movlt	r0, #0
 8000c56:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c5a:	e006      	blt.n	8000c6a <__aeabi_ldivmod+0x1e>
 8000c5c:	bf08      	it	eq
 8000c5e:	2800      	cmpeq	r0, #0
 8000c60:	bf1c      	itt	ne
 8000c62:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c66:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6a:	f000 b9bf 	b.w	8000fec <__aeabi_idiv0>
 8000c6e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c72:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c76:	2900      	cmp	r1, #0
 8000c78:	db09      	blt.n	8000c8e <__aeabi_ldivmod+0x42>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db1a      	blt.n	8000cb4 <__aeabi_ldivmod+0x68>
 8000c7e:	f000 f84d 	bl	8000d1c <__udivmoddi4>
 8000c82:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8a:	b004      	add	sp, #16
 8000c8c:	4770      	bx	lr
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db1b      	blt.n	8000cd0 <__aeabi_ldivmod+0x84>
 8000c98:	f000 f840 	bl	8000d1c <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	4252      	negs	r2, r2
 8000cae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb2:	4770      	bx	lr
 8000cb4:	4252      	negs	r2, r2
 8000cb6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cba:	f000 f82f 	bl	8000d1c <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4240      	negs	r0, r0
 8000cca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cce:	4770      	bx	lr
 8000cd0:	4252      	negs	r2, r2
 8000cd2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd6:	f000 f821 	bl	8000d1c <__udivmoddi4>
 8000cda:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce2:	b004      	add	sp, #16
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cea:	4770      	bx	lr

08000cec <__aeabi_uldivmod>:
 8000cec:	b953      	cbnz	r3, 8000d04 <__aeabi_uldivmod+0x18>
 8000cee:	b94a      	cbnz	r2, 8000d04 <__aeabi_uldivmod+0x18>
 8000cf0:	2900      	cmp	r1, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	2800      	cmpeq	r0, #0
 8000cf6:	bf1c      	itt	ne
 8000cf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000d00:	f000 b974 	b.w	8000fec <__aeabi_idiv0>
 8000d04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d0c:	f000 f806 	bl	8000d1c <__udivmoddi4>
 8000d10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d18:	b004      	add	sp, #16
 8000d1a:	4770      	bx	lr

08000d1c <__udivmoddi4>:
 8000d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d20:	9d08      	ldr	r5, [sp, #32]
 8000d22:	4604      	mov	r4, r0
 8000d24:	468e      	mov	lr, r1
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d14d      	bne.n	8000dc6 <__udivmoddi4+0xaa>
 8000d2a:	428a      	cmp	r2, r1
 8000d2c:	4694      	mov	ip, r2
 8000d2e:	d969      	bls.n	8000e04 <__udivmoddi4+0xe8>
 8000d30:	fab2 f282 	clz	r2, r2
 8000d34:	b152      	cbz	r2, 8000d4c <__udivmoddi4+0x30>
 8000d36:	fa01 f302 	lsl.w	r3, r1, r2
 8000d3a:	f1c2 0120 	rsb	r1, r2, #32
 8000d3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000d42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d46:	ea41 0e03 	orr.w	lr, r1, r3
 8000d4a:	4094      	lsls	r4, r2
 8000d4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d50:	0c21      	lsrs	r1, r4, #16
 8000d52:	fbbe f6f8 	udiv	r6, lr, r8
 8000d56:	fa1f f78c 	uxth.w	r7, ip
 8000d5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000d5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d62:	fb06 f107 	mul.w	r1, r6, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d90a      	bls.n	8000d80 <__udivmoddi4+0x64>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d72:	f080 811f 	bcs.w	8000fb4 <__udivmoddi4+0x298>
 8000d76:	4299      	cmp	r1, r3
 8000d78:	f240 811c 	bls.w	8000fb4 <__udivmoddi4+0x298>
 8000d7c:	3e02      	subs	r6, #2
 8000d7e:	4463      	add	r3, ip
 8000d80:	1a5b      	subs	r3, r3, r1
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d90:	fb00 f707 	mul.w	r7, r0, r7
 8000d94:	42a7      	cmp	r7, r4
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x92>
 8000d98:	eb1c 0404 	adds.w	r4, ip, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	f080 810a 	bcs.w	8000fb8 <__udivmoddi4+0x29c>
 8000da4:	42a7      	cmp	r7, r4
 8000da6:	f240 8107 	bls.w	8000fb8 <__udivmoddi4+0x29c>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db2:	1be4      	subs	r4, r4, r7
 8000db4:	2600      	movs	r6, #0
 8000db6:	b11d      	cbz	r5, 8000dc0 <__udivmoddi4+0xa4>
 8000db8:	40d4      	lsrs	r4, r2
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d909      	bls.n	8000dde <__udivmoddi4+0xc2>
 8000dca:	2d00      	cmp	r5, #0
 8000dcc:	f000 80ef 	beq.w	8000fae <__udivmoddi4+0x292>
 8000dd0:	2600      	movs	r6, #0
 8000dd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd6:	4630      	mov	r0, r6
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	fab3 f683 	clz	r6, r3
 8000de2:	2e00      	cmp	r6, #0
 8000de4:	d14a      	bne.n	8000e7c <__udivmoddi4+0x160>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xd4>
 8000dea:	4282      	cmp	r2, r0
 8000dec:	f200 80f9 	bhi.w	8000fe2 <__udivmoddi4+0x2c6>
 8000df0:	1a84      	subs	r4, r0, r2
 8000df2:	eb61 0303 	sbc.w	r3, r1, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	469e      	mov	lr, r3
 8000dfa:	2d00      	cmp	r5, #0
 8000dfc:	d0e0      	beq.n	8000dc0 <__udivmoddi4+0xa4>
 8000dfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e02:	e7dd      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000e04:	b902      	cbnz	r2, 8000e08 <__udivmoddi4+0xec>
 8000e06:	deff      	udf	#255	; 0xff
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	2a00      	cmp	r2, #0
 8000e0e:	f040 8092 	bne.w	8000f36 <__udivmoddi4+0x21a>
 8000e12:	eba1 010c 	sub.w	r1, r1, ip
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2601      	movs	r6, #1
 8000e20:	0c20      	lsrs	r0, r4, #16
 8000e22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e26:	fb07 1113 	mls	r1, r7, r3, r1
 8000e2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2e:	fb0e f003 	mul.w	r0, lr, r3
 8000e32:	4288      	cmp	r0, r1
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x12c>
 8000e36:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x12a>
 8000e40:	4288      	cmp	r0, r1
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2c0>
 8000e46:	4643      	mov	r3, r8
 8000e48:	1a09      	subs	r1, r1, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e50:	fb07 1110 	mls	r1, r7, r0, r1
 8000e54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x156>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x154>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2ca>
 8000e70:	4608      	mov	r0, r1
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e7a:	e79c      	b.n	8000db6 <__udivmoddi4+0x9a>
 8000e7c:	f1c6 0720 	rsb	r7, r6, #32
 8000e80:	40b3      	lsls	r3, r6
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000e8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000e92:	431c      	orrs	r4, r3
 8000e94:	40f9      	lsrs	r1, r7
 8000e96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ea2:	0c20      	lsrs	r0, r4, #16
 8000ea4:	fa1f fe8c 	uxth.w	lr, ip
 8000ea8:	fb09 1118 	mls	r1, r9, r8, r1
 8000eac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b8>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ec8:	4288      	cmp	r0, r1
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2bc>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4461      	add	r1, ip
 8000ed4:	1a09      	subs	r1, r1, r0
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000edc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee8:	458e      	cmp	lr, r1
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1e2>
 8000eec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2b4>
 8000ef6:	458e      	cmp	lr, r1
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2b4>
 8000efa:	3802      	subs	r0, #2
 8000efc:	4461      	add	r1, ip
 8000efe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f02:	fba0 9402 	umull	r9, r4, r0, r2
 8000f06:	eba1 010e 	sub.w	r1, r1, lr
 8000f0a:	42a1      	cmp	r1, r4
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46a6      	mov	lr, r4
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x2a4>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x2a0>
 8000f14:	b15d      	cbz	r5, 8000f2e <__udivmoddi4+0x212>
 8000f16:	ebb3 0208 	subs.w	r2, r3, r8
 8000f1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000f1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000f22:	fa22 f306 	lsr.w	r3, r2, r6
 8000f26:	40f1      	lsrs	r1, r6
 8000f28:	431f      	orrs	r7, r3
 8000f2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000f2e:	2600      	movs	r6, #0
 8000f30:	4631      	mov	r1, r6
 8000f32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f36:	f1c2 0320 	rsb	r3, r2, #32
 8000f3a:	40d8      	lsrs	r0, r3
 8000f3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f40:	fa21 f303 	lsr.w	r3, r1, r3
 8000f44:	4091      	lsls	r1, r2
 8000f46:	4301      	orrs	r1, r0
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f54:	fb07 3610 	mls	r6, r7, r0, r3
 8000f58:	0c0b      	lsrs	r3, r1, #16
 8000f5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000f62:	429e      	cmp	r6, r3
 8000f64:	fa04 f402 	lsl.w	r4, r4, r2
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x260>
 8000f6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f74:	429e      	cmp	r6, r3
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b8>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4463      	add	r3, ip
 8000f7c:	1b9b      	subs	r3, r3, r6
 8000f7e:	b289      	uxth	r1, r1
 8000f80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f84:	fb07 3316 	mls	r3, r7, r6, r3
 8000f88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x28a>
 8000f94:	eb1c 0101 	adds.w	r1, ip, r1
 8000f98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2b0>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2b0>
 8000fa2:	3e02      	subs	r6, #2
 8000fa4:	4461      	add	r1, ip
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0x104>
 8000fae:	462e      	mov	r6, r5
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	e705      	b.n	8000dc0 <__udivmoddi4+0xa4>
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	e6e3      	b.n	8000d80 <__udivmoddi4+0x64>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6f8      	b.n	8000dae <__udivmoddi4+0x92>
 8000fbc:	454b      	cmp	r3, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f8>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc8:	3801      	subs	r0, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f8>
 8000fcc:	4646      	mov	r6, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x28a>
 8000fd0:	4620      	mov	r0, r4
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1e2>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x260>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b8>
 8000fdc:	3b02      	subs	r3, #2
 8000fde:	4461      	add	r1, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x12c>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e709      	b.n	8000dfa <__udivmoddi4+0xde>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x156>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af02      	add	r7, sp, #8
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
    uint16_t spiTransferSize = 2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8000ffe:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <DRV_CANFDSPI_Reset+0xd4>)
 8001000:	2200      	movs	r2, #0
 8001002:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = 0;
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <DRV_CANFDSPI_Reset+0xd4>)
 8001006:	2200      	movs	r2, #0
 8001008:	705a      	strb	r2, [r3, #1]

    //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);
  if(index==CAN3){
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d11a      	bne.n	8001046 <DRV_CANFDSPI_Reset+0x56>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <DRV_CANFDSPI_Reset+0xd8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <DRV_CANFDSPI_Reset+0xdc>)
 8001016:	8811      	ldrh	r1, [r2, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f00c ffc2 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001020:	89bb      	ldrh	r3, [r7, #12]
 8001022:	2264      	movs	r2, #100	; 0x64
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <DRV_CANFDSPI_Reset+0xe0>)
 8001028:	4926      	ldr	r1, [pc, #152]	; (80010c4 <DRV_CANFDSPI_Reset+0xd4>)
 800102a:	482a      	ldr	r0, [pc, #168]	; (80010d4 <DRV_CANFDSPI_Reset+0xe4>)
 800102c:	f00f fb38 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001034:	4b24      	ldr	r3, [pc, #144]	; (80010c8 <DRV_CANFDSPI_Reset+0xd8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a24      	ldr	r2, [pc, #144]	; (80010cc <DRV_CANFDSPI_Reset+0xdc>)
 800103a:	8811      	ldrh	r1, [r2, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f00c ffb0 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001044:	e037      	b.n	80010b6 <DRV_CANFDSPI_Reset+0xc6>
  } else if(index==CAN2){
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d11a      	bne.n	8001082 <DRV_CANFDSPI_Reset+0x92>
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <DRV_CANFDSPI_Reset+0xe8>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a22      	ldr	r2, [pc, #136]	; (80010dc <DRV_CANFDSPI_Reset+0xec>)
 8001052:	8811      	ldrh	r1, [r2, #0]
 8001054:	2200      	movs	r2, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f00c ffa4 	bl	800dfa4 <HAL_GPIO_WritePin>
	  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800105c:	89bb      	ldrh	r3, [r7, #12]
 800105e:	2264      	movs	r2, #100	; 0x64
 8001060:	9200      	str	r2, [sp, #0]
 8001062:	4a1b      	ldr	r2, [pc, #108]	; (80010d0 <DRV_CANFDSPI_Reset+0xe0>)
 8001064:	4917      	ldr	r1, [pc, #92]	; (80010c4 <DRV_CANFDSPI_Reset+0xd4>)
 8001066:	481b      	ldr	r0, [pc, #108]	; (80010d4 <DRV_CANFDSPI_Reset+0xe4>)
 8001068:	f00f fb1a 	bl	80106a0 <HAL_SPI_TransmitReceive>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
	  HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <DRV_CANFDSPI_Reset+0xe8>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <DRV_CANFDSPI_Reset+0xec>)
 8001076:	8811      	ldrh	r1, [r2, #0]
 8001078:	2201      	movs	r2, #1
 800107a:	4618      	mov	r0, r3
 800107c:	f00c ff92 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001080:	e019      	b.n	80010b6 <DRV_CANFDSPI_Reset+0xc6>
	}else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <DRV_CANFDSPI_Reset+0xf0>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <DRV_CANFDSPI_Reset+0xf4>)
 8001088:	8811      	ldrh	r1, [r2, #0]
 800108a:	2200      	movs	r2, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00c ff89 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001092:	89bb      	ldrh	r3, [r7, #12]
 8001094:	2264      	movs	r2, #100	; 0x64
 8001096:	9200      	str	r2, [sp, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <DRV_CANFDSPI_Reset+0xe0>)
 800109a:	490a      	ldr	r1, [pc, #40]	; (80010c4 <DRV_CANFDSPI_Reset+0xd4>)
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <DRV_CANFDSPI_Reset+0xe4>)
 800109e:	f00f faff 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80010a2:	4603      	mov	r3, r0
 80010a4:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <DRV_CANFDSPI_Reset+0xf0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <DRV_CANFDSPI_Reset+0xf4>)
 80010ac:	8811      	ldrh	r1, [r2, #0]
 80010ae:	2201      	movs	r2, #1
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00c ff77 	bl	800dfa4 <HAL_GPIO_WritePin>
	}
  return spiTransferError;
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200002ec 	.word	0x200002ec
 80010c8:	20000cb8 	.word	0x20000cb8
 80010cc:	20000cb6 	.word	0x20000cb6
 80010d0:	2000034c 	.word	0x2000034c
 80010d4:	20000510 	.word	0x20000510
 80010d8:	20000c98 	.word	0x20000c98
 80010dc:	20000c96 	.word	0x20000c96
 80010e0:	20000c78 	.word	0x20000c78
 80010e4:	20000c76 	.word	0x20000c76

080010e8 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af02      	add	r7, sp, #8
 80010ee:	4603      	mov	r3, r0
 80010f0:	603a      	str	r2, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	460b      	mov	r3, r1
 80010f6:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80010f8:	2303      	movs	r3, #3
 80010fa:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80010fc:	88bb      	ldrh	r3, [r7, #4]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	b2db      	uxtb	r3, r3
 800110a:	3330      	adds	r3, #48	; 0x30
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001110:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001112:	88bb      	ldrh	r3, [r7, #4]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4b32      	ldr	r3, [pc, #200]	; (80011e0 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001118:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 800111a:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <DRV_CANFDSPI_ReadByte+0xf8>)
 800111c:	2200      	movs	r2, #0
 800111e:	709a      	strb	r2, [r3, #2]

  if(index==CAN3){
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d11a      	bne.n	800115c <DRV_CANFDSPI_ReadByte+0x74>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <DRV_CANFDSPI_ReadByte+0xfc>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a2f      	ldr	r2, [pc, #188]	; (80011e8 <DRV_CANFDSPI_ReadByte+0x100>)
 800112c:	8811      	ldrh	r1, [r2, #0]
 800112e:	2200      	movs	r2, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f00c ff37 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001136:	89bb      	ldrh	r3, [r7, #12]
 8001138:	2264      	movs	r2, #100	; 0x64
 800113a:	9200      	str	r2, [sp, #0]
 800113c:	4a2b      	ldr	r2, [pc, #172]	; (80011ec <DRV_CANFDSPI_ReadByte+0x104>)
 800113e:	4928      	ldr	r1, [pc, #160]	; (80011e0 <DRV_CANFDSPI_ReadByte+0xf8>)
 8001140:	482b      	ldr	r0, [pc, #172]	; (80011f0 <DRV_CANFDSPI_ReadByte+0x108>)
 8001142:	f00f faad 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <DRV_CANFDSPI_ReadByte+0xfc>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <DRV_CANFDSPI_ReadByte+0x100>)
 8001150:	8811      	ldrh	r1, [r2, #0]
 8001152:	2201      	movs	r2, #1
 8001154:	4618      	mov	r0, r3
 8001156:	f00c ff25 	bl	800dfa4 <HAL_GPIO_WritePin>
 800115a:	e037      	b.n	80011cc <DRV_CANFDSPI_ReadByte+0xe4>
  } else if(index==CAN2){
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d11a      	bne.n	8001198 <DRV_CANFDSPI_ReadByte+0xb0>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <DRV_CANFDSPI_ReadByte+0x10c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <DRV_CANFDSPI_ReadByte+0x110>)
 8001168:	8811      	ldrh	r1, [r2, #0]
 800116a:	2200      	movs	r2, #0
 800116c:	4618      	mov	r0, r3
 800116e:	f00c ff19 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001172:	89bb      	ldrh	r3, [r7, #12]
 8001174:	2264      	movs	r2, #100	; 0x64
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <DRV_CANFDSPI_ReadByte+0x104>)
 800117a:	4919      	ldr	r1, [pc, #100]	; (80011e0 <DRV_CANFDSPI_ReadByte+0xf8>)
 800117c:	481c      	ldr	r0, [pc, #112]	; (80011f0 <DRV_CANFDSPI_ReadByte+0x108>)
 800117e:	f00f fa8f 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001182:	4603      	mov	r3, r0
 8001184:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <DRV_CANFDSPI_ReadByte+0x10c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <DRV_CANFDSPI_ReadByte+0x110>)
 800118c:	8811      	ldrh	r1, [r2, #0]
 800118e:	2201      	movs	r2, #1
 8001190:	4618      	mov	r0, r3
 8001192:	f00c ff07 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001196:	e019      	b.n	80011cc <DRV_CANFDSPI_ReadByte+0xe4>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <DRV_CANFDSPI_ReadByte+0x114>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a18      	ldr	r2, [pc, #96]	; (8001200 <DRV_CANFDSPI_ReadByte+0x118>)
 800119e:	8811      	ldrh	r1, [r2, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00c fefe 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80011a8:	89bb      	ldrh	r3, [r7, #12]
 80011aa:	2264      	movs	r2, #100	; 0x64
 80011ac:	9200      	str	r2, [sp, #0]
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <DRV_CANFDSPI_ReadByte+0x104>)
 80011b0:	490b      	ldr	r1, [pc, #44]	; (80011e0 <DRV_CANFDSPI_ReadByte+0xf8>)
 80011b2:	480f      	ldr	r0, [pc, #60]	; (80011f0 <DRV_CANFDSPI_ReadByte+0x108>)
 80011b4:	f00f fa74 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <DRV_CANFDSPI_ReadByte+0x114>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <DRV_CANFDSPI_ReadByte+0x118>)
 80011c2:	8811      	ldrh	r1, [r2, #0]
 80011c4:	2201      	movs	r2, #1
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00c feec 	bl	800dfa4 <HAL_GPIO_WritePin>
  }
  // Update data
  *rxd = spiReceiveBuffer[2];
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <DRV_CANFDSPI_ReadByte+0x104>)
 80011ce:	789a      	ldrb	r2, [r3, #2]
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 80011d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200002ec 	.word	0x200002ec
 80011e4:	20000cb8 	.word	0x20000cb8
 80011e8:	20000cb6 	.word	0x20000cb6
 80011ec:	2000034c 	.word	0x2000034c
 80011f0:	20000510 	.word	0x20000510
 80011f4:	20000c98 	.word	0x20000c98
 80011f8:	20000c96 	.word	0x20000c96
 80011fc:	20000c78 	.word	0x20000c78
 8001200:	20000c76 	.word	0x20000c76

08001204 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	80bb      	strh	r3, [r7, #4]
 8001212:	4613      	mov	r3, r2
 8001214:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 8001216:	2303      	movs	r3, #3
 8001218:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800121a:	88bb      	ldrh	r3, [r7, #4]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	b29b      	uxth	r3, r3
 8001220:	b2db      	uxtb	r3, r3
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	b2db      	uxtb	r3, r3
 8001228:	3320      	adds	r3, #32
 800122a:	b2da      	uxtb	r2, r3
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <DRV_CANFDSPI_WriteByte+0xf4>)
 800122e:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <DRV_CANFDSPI_WriteByte+0xf4>)
 8001236:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 8001238:	4a2f      	ldr	r2, [pc, #188]	; (80012f8 <DRV_CANFDSPI_WriteByte+0xf4>)
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	7093      	strb	r3, [r2, #2]

  if(index==CAN3){
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b02      	cmp	r3, #2
 8001242:	d11a      	bne.n	800127a <DRV_CANFDSPI_WriteByte+0x76>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <DRV_CANFDSPI_WriteByte+0xf8>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a2d      	ldr	r2, [pc, #180]	; (8001300 <DRV_CANFDSPI_WriteByte+0xfc>)
 800124a:	8811      	ldrh	r1, [r2, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f00c fea8 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001254:	89bb      	ldrh	r3, [r7, #12]
 8001256:	2264      	movs	r2, #100	; 0x64
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <DRV_CANFDSPI_WriteByte+0x100>)
 800125c:	4926      	ldr	r1, [pc, #152]	; (80012f8 <DRV_CANFDSPI_WriteByte+0xf4>)
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <DRV_CANFDSPI_WriteByte+0x104>)
 8001260:	f00f fa1e 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001264:	4603      	mov	r3, r0
 8001266:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <DRV_CANFDSPI_WriteByte+0xf8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a24      	ldr	r2, [pc, #144]	; (8001300 <DRV_CANFDSPI_WriteByte+0xfc>)
 800126e:	8811      	ldrh	r1, [r2, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4618      	mov	r0, r3
 8001274:	f00c fe96 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001278:	e037      	b.n	80012ea <DRV_CANFDSPI_WriteByte+0xe6>
  } else if(index==CAN2){
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d11a      	bne.n	80012b6 <DRV_CANFDSPI_WriteByte+0xb2>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <DRV_CANFDSPI_WriteByte+0x108>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a22      	ldr	r2, [pc, #136]	; (8001310 <DRV_CANFDSPI_WriteByte+0x10c>)
 8001286:	8811      	ldrh	r1, [r2, #0]
 8001288:	2200      	movs	r2, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f00c fe8a 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001290:	89bb      	ldrh	r3, [r7, #12]
 8001292:	2264      	movs	r2, #100	; 0x64
 8001294:	9200      	str	r2, [sp, #0]
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <DRV_CANFDSPI_WriteByte+0x100>)
 8001298:	4917      	ldr	r1, [pc, #92]	; (80012f8 <DRV_CANFDSPI_WriteByte+0xf4>)
 800129a:	481b      	ldr	r0, [pc, #108]	; (8001308 <DRV_CANFDSPI_WriteByte+0x104>)
 800129c:	f00f fa00 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <DRV_CANFDSPI_WriteByte+0x108>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	; (8001310 <DRV_CANFDSPI_WriteByte+0x10c>)
 80012aa:	8811      	ldrh	r1, [r2, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4618      	mov	r0, r3
 80012b0:	f00c fe78 	bl	800dfa4 <HAL_GPIO_WritePin>
 80012b4:	e019      	b.n	80012ea <DRV_CANFDSPI_WriteByte+0xe6>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80012b6:	4b17      	ldr	r3, [pc, #92]	; (8001314 <DRV_CANFDSPI_WriteByte+0x110>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a17      	ldr	r2, [pc, #92]	; (8001318 <DRV_CANFDSPI_WriteByte+0x114>)
 80012bc:	8811      	ldrh	r1, [r2, #0]
 80012be:	2200      	movs	r2, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f00c fe6f 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80012c6:	89bb      	ldrh	r3, [r7, #12]
 80012c8:	2264      	movs	r2, #100	; 0x64
 80012ca:	9200      	str	r2, [sp, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <DRV_CANFDSPI_WriteByte+0x100>)
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <DRV_CANFDSPI_WriteByte+0xf4>)
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <DRV_CANFDSPI_WriteByte+0x104>)
 80012d2:	f00f f9e5 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80012d6:	4603      	mov	r3, r0
 80012d8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <DRV_CANFDSPI_WriteByte+0x110>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a0e      	ldr	r2, [pc, #56]	; (8001318 <DRV_CANFDSPI_WriteByte+0x114>)
 80012e0:	8811      	ldrh	r1, [r2, #0]
 80012e2:	2201      	movs	r2, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f00c fe5d 	bl	800dfa4 <HAL_GPIO_WritePin>
  }
  return spiTransferError;
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	200002ec 	.word	0x200002ec
 80012fc:	20000cb8 	.word	0x20000cb8
 8001300:	20000cb6 	.word	0x20000cb6
 8001304:	2000034c 	.word	0x2000034c
 8001308:	20000510 	.word	0x20000510
 800130c:	20000c98 	.word	0x20000c98
 8001310:	20000c96 	.word	0x20000c96
 8001314:	20000c78 	.word	0x20000c78
 8001318:	20000c76 	.word	0x20000c76

0800131c <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af02      	add	r7, sp, #8
 8001322:	4603      	mov	r3, r0
 8001324:	603a      	str	r2, [r7, #0]
 8001326:	71fb      	strb	r3, [r7, #7]
 8001328:	460b      	mov	r3, r1
 800132a:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 800132c:	2306      	movs	r3, #6
 800132e:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001330:	88bb      	ldrh	r3, [r7, #4]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	b29b      	uxth	r3, r3
 8001336:	b2db      	uxtb	r3, r3
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3330      	adds	r3, #48	; 0x30
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b41      	ldr	r3, [pc, #260]	; (8001448 <DRV_CANFDSPI_ReadWord+0x12c>)
 8001344:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001346:	88bb      	ldrh	r3, [r7, #4]
 8001348:	b2da      	uxtb	r2, r3
 800134a:	4b3f      	ldr	r3, [pc, #252]	; (8001448 <DRV_CANFDSPI_ReadWord+0x12c>)
 800134c:	705a      	strb	r2, [r3, #1]

  if(index==CAN3){
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d11a      	bne.n	800138a <DRV_CANFDSPI_ReadWord+0x6e>
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001354:	4b3d      	ldr	r3, [pc, #244]	; (800144c <DRV_CANFDSPI_ReadWord+0x130>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a3d      	ldr	r2, [pc, #244]	; (8001450 <DRV_CANFDSPI_ReadWord+0x134>)
 800135a:	8811      	ldrh	r1, [r2, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f00c fe20 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001364:	89bb      	ldrh	r3, [r7, #12]
 8001366:	2264      	movs	r2, #100	; 0x64
 8001368:	9200      	str	r2, [sp, #0]
 800136a:	4a3a      	ldr	r2, [pc, #232]	; (8001454 <DRV_CANFDSPI_ReadWord+0x138>)
 800136c:	4936      	ldr	r1, [pc, #216]	; (8001448 <DRV_CANFDSPI_ReadWord+0x12c>)
 800136e:	483a      	ldr	r0, [pc, #232]	; (8001458 <DRV_CANFDSPI_ReadWord+0x13c>)
 8001370:	f00f f996 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001374:	4603      	mov	r3, r0
 8001376:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <DRV_CANFDSPI_ReadWord+0x130>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a34      	ldr	r2, [pc, #208]	; (8001450 <DRV_CANFDSPI_ReadWord+0x134>)
 800137e:	8811      	ldrh	r1, [r2, #0]
 8001380:	2201      	movs	r2, #1
 8001382:	4618      	mov	r0, r3
 8001384:	f00c fe0e 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001388:	e037      	b.n	80013fa <DRV_CANFDSPI_ReadWord+0xde>
  } else if(index==CAN2){
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d11a      	bne.n	80013c6 <DRV_CANFDSPI_ReadWord+0xaa>
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <DRV_CANFDSPI_ReadWord+0x140>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <DRV_CANFDSPI_ReadWord+0x144>)
 8001396:	8811      	ldrh	r1, [r2, #0]
 8001398:	2200      	movs	r2, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f00c fe02 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013a0:	89bb      	ldrh	r3, [r7, #12]
 80013a2:	2264      	movs	r2, #100	; 0x64
 80013a4:	9200      	str	r2, [sp, #0]
 80013a6:	4a2b      	ldr	r2, [pc, #172]	; (8001454 <DRV_CANFDSPI_ReadWord+0x138>)
 80013a8:	4927      	ldr	r1, [pc, #156]	; (8001448 <DRV_CANFDSPI_ReadWord+0x12c>)
 80013aa:	482b      	ldr	r0, [pc, #172]	; (8001458 <DRV_CANFDSPI_ReadWord+0x13c>)
 80013ac:	f00f f978 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <DRV_CANFDSPI_ReadWord+0x140>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a29      	ldr	r2, [pc, #164]	; (8001460 <DRV_CANFDSPI_ReadWord+0x144>)
 80013ba:	8811      	ldrh	r1, [r2, #0]
 80013bc:	2201      	movs	r2, #1
 80013be:	4618      	mov	r0, r3
 80013c0:	f00c fdf0 	bl	800dfa4 <HAL_GPIO_WritePin>
 80013c4:	e019      	b.n	80013fa <DRV_CANFDSPI_ReadWord+0xde>
  }else{
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <DRV_CANFDSPI_ReadWord+0x148>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a27      	ldr	r2, [pc, #156]	; (8001468 <DRV_CANFDSPI_ReadWord+0x14c>)
 80013cc:	8811      	ldrh	r1, [r2, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f00c fde7 	bl	800dfa4 <HAL_GPIO_WritePin>
    spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80013d6:	89bb      	ldrh	r3, [r7, #12]
 80013d8:	2264      	movs	r2, #100	; 0x64
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <DRV_CANFDSPI_ReadWord+0x138>)
 80013de:	491a      	ldr	r1, [pc, #104]	; (8001448 <DRV_CANFDSPI_ReadWord+0x12c>)
 80013e0:	481d      	ldr	r0, [pc, #116]	; (8001458 <DRV_CANFDSPI_ReadWord+0x13c>)
 80013e2:	f00f f95d 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80013e6:	4603      	mov	r3, r0
 80013e8:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <DRV_CANFDSPI_ReadWord+0x148>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <DRV_CANFDSPI_ReadWord+0x14c>)
 80013f0:	8811      	ldrh	r1, [r2, #0]
 80013f2:	2201      	movs	r2, #1
 80013f4:	4618      	mov	r0, r3
 80013f6:	f00c fdd5 	bl	800dfa4 <HAL_GPIO_WritePin>
  }
  if (spiTransferError != HAL_OK) {
 80013fa:	7bbb      	ldrb	r3, [r7, #14]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <DRV_CANFDSPI_ReadWord+0xea>
      return spiTransferError;
 8001400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001404:	e01c      	b.n	8001440 <DRV_CANFDSPI_ReadWord+0x124>
  }

  // Update data
  *rxd = 0;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 800140c:	2302      	movs	r3, #2
 800140e:	73fb      	strb	r3, [r7, #15]
 8001410:	e011      	b.n	8001436 <DRV_CANFDSPI_ReadWord+0x11a>
      x = (uint32_t) spiReceiveBuffer[i];
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <DRV_CANFDSPI_ReadWord+0x138>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	60bb      	str	r3, [r7, #8]
      *rxd += x << ((i - 2)*8);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	3b02      	subs	r3, #2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	441a      	add	r2, r3
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	3301      	adds	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b05      	cmp	r3, #5
 800143a:	d9ea      	bls.n	8001412 <DRV_CANFDSPI_ReadWord+0xf6>
  }

  return spiTransferError;
 800143c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3710      	adds	r7, #16
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	200002ec 	.word	0x200002ec
 800144c:	20000cb8 	.word	0x20000cb8
 8001450:	20000cb6 	.word	0x20000cb6
 8001454:	2000034c 	.word	0x2000034c
 8001458:	20000510 	.word	0x20000510
 800145c:	20000c98 	.word	0x20000c98
 8001460:	20000c96 	.word	0x20000c96
 8001464:	20000c78 	.word	0x20000c78
 8001468:	20000c76 	.word	0x20000c76

0800146c <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af02      	add	r7, sp, #8
 8001472:	4603      	mov	r3, r0
 8001474:	603a      	str	r2, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	460b      	mov	r3, r1
 800147a:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint16_t spiTransferSize = 6;
 800147c:	2306      	movs	r3, #6
 800147e:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	0a1b      	lsrs	r3, r3, #8
 8001484:	b29b      	uxth	r3, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	b2db      	uxtb	r3, r3
 800148e:	3320      	adds	r3, #32
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b3a      	ldr	r3, [pc, #232]	; (800157c <DRV_CANFDSPI_WriteWord+0x110>)
 8001494:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001496:	88bb      	ldrh	r3, [r7, #4]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b38      	ldr	r3, [pc, #224]	; (800157c <DRV_CANFDSPI_WriteWord+0x110>)
 800149c:	705a      	strb	r2, [r3, #1]

    // Split word into 4 bytes and add them to buffer
    for (i = 0; i < 4; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e00b      	b.n	80014bc <DRV_CANFDSPI_WriteWord+0x50>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 80014a4:	7bfb      	ldrb	r3, [r7, #15]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	40da      	lsrs	r2, r3
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	3302      	adds	r3, #2
 80014b0:	b2d1      	uxtb	r1, r2
 80014b2:	4a32      	ldr	r2, [pc, #200]	; (800157c <DRV_CANFDSPI_WriteWord+0x110>)
 80014b4:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 4; i++) {
 80014b6:	7bfb      	ldrb	r3, [r7, #15]
 80014b8:	3301      	adds	r3, #1
 80014ba:	73fb      	strb	r3, [r7, #15]
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d9f0      	bls.n	80014a4 <DRV_CANFDSPI_WriteWord+0x38>
    }

    if(index==CAN3){
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d11a      	bne.n	80014fe <DRV_CANFDSPI_WriteWord+0x92>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80014c8:	4b2d      	ldr	r3, [pc, #180]	; (8001580 <DRV_CANFDSPI_WriteWord+0x114>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <DRV_CANFDSPI_WriteWord+0x118>)
 80014ce:	8811      	ldrh	r1, [r2, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00c fd66 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80014d8:	89bb      	ldrh	r3, [r7, #12]
 80014da:	2264      	movs	r2, #100	; 0x64
 80014dc:	9200      	str	r2, [sp, #0]
 80014de:	4a2a      	ldr	r2, [pc, #168]	; (8001588 <DRV_CANFDSPI_WriteWord+0x11c>)
 80014e0:	4926      	ldr	r1, [pc, #152]	; (800157c <DRV_CANFDSPI_WriteWord+0x110>)
 80014e2:	482a      	ldr	r0, [pc, #168]	; (800158c <DRV_CANFDSPI_WriteWord+0x120>)
 80014e4:	f00f f8dc 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80014e8:	4603      	mov	r3, r0
 80014ea:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80014ec:	4b24      	ldr	r3, [pc, #144]	; (8001580 <DRV_CANFDSPI_WriteWord+0x114>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a24      	ldr	r2, [pc, #144]	; (8001584 <DRV_CANFDSPI_WriteWord+0x118>)
 80014f2:	8811      	ldrh	r1, [r2, #0]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f00c fd54 	bl	800dfa4 <HAL_GPIO_WritePin>
 80014fc:	e037      	b.n	800156e <DRV_CANFDSPI_WriteWord+0x102>
    } else if(index==CAN2){
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d11a      	bne.n	800153a <DRV_CANFDSPI_WriteWord+0xce>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001504:	4b22      	ldr	r3, [pc, #136]	; (8001590 <DRV_CANFDSPI_WriteWord+0x124>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a22      	ldr	r2, [pc, #136]	; (8001594 <DRV_CANFDSPI_WriteWord+0x128>)
 800150a:	8811      	ldrh	r1, [r2, #0]
 800150c:	2200      	movs	r2, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00c fd48 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001514:	89bb      	ldrh	r3, [r7, #12]
 8001516:	2264      	movs	r2, #100	; 0x64
 8001518:	9200      	str	r2, [sp, #0]
 800151a:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <DRV_CANFDSPI_WriteWord+0x11c>)
 800151c:	4917      	ldr	r1, [pc, #92]	; (800157c <DRV_CANFDSPI_WriteWord+0x110>)
 800151e:	481b      	ldr	r0, [pc, #108]	; (800158c <DRV_CANFDSPI_WriteWord+0x120>)
 8001520:	f00f f8be 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001524:	4603      	mov	r3, r0
 8001526:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001528:	4b19      	ldr	r3, [pc, #100]	; (8001590 <DRV_CANFDSPI_WriteWord+0x124>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a19      	ldr	r2, [pc, #100]	; (8001594 <DRV_CANFDSPI_WriteWord+0x128>)
 800152e:	8811      	ldrh	r1, [r2, #0]
 8001530:	2201      	movs	r2, #1
 8001532:	4618      	mov	r0, r3
 8001534:	f00c fd36 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001538:	e019      	b.n	800156e <DRV_CANFDSPI_WriteWord+0x102>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800153a:	4b17      	ldr	r3, [pc, #92]	; (8001598 <DRV_CANFDSPI_WriteWord+0x12c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <DRV_CANFDSPI_WriteWord+0x130>)
 8001540:	8811      	ldrh	r1, [r2, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f00c fd2d 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800154a:	89bb      	ldrh	r3, [r7, #12]
 800154c:	2264      	movs	r2, #100	; 0x64
 800154e:	9200      	str	r2, [sp, #0]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <DRV_CANFDSPI_WriteWord+0x11c>)
 8001552:	490a      	ldr	r1, [pc, #40]	; (800157c <DRV_CANFDSPI_WriteWord+0x110>)
 8001554:	480d      	ldr	r0, [pc, #52]	; (800158c <DRV_CANFDSPI_WriteWord+0x120>)
 8001556:	f00f f8a3 	bl	80106a0 <HAL_SPI_TransmitReceive>
 800155a:	4603      	mov	r3, r0
 800155c:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <DRV_CANFDSPI_WriteWord+0x12c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a0e      	ldr	r2, [pc, #56]	; (800159c <DRV_CANFDSPI_WriteWord+0x130>)
 8001564:	8811      	ldrh	r1, [r2, #0]
 8001566:	2201      	movs	r2, #1
 8001568:	4618      	mov	r0, r3
 800156a:	f00c fd1b 	bl	800dfa4 <HAL_GPIO_WritePin>
    }
    return spiTransferError;
 800156e:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200002ec 	.word	0x200002ec
 8001580:	20000cb8 	.word	0x20000cb8
 8001584:	20000cb6 	.word	0x20000cb6
 8001588:	2000034c 	.word	0x2000034c
 800158c:	20000510 	.word	0x20000510
 8001590:	20000c98 	.word	0x20000c98
 8001594:	20000c96 	.word	0x20000c96
 8001598:	20000c78 	.word	0x20000c78
 800159c:	20000c76 	.word	0x20000c76

080015a0 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	4603      	mov	r3, r0
 80015a8:	603a      	str	r2, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	460b      	mov	r3, r1
 80015ae:	80bb      	strh	r3, [r7, #4]
    uint8_t i;
    uint32_t x;
    uint16_t spiTransferSize = 4;
 80015b0:	2304      	movs	r3, #4
 80015b2:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	0a1b      	lsrs	r3, r3, #8
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f003 030f 	and.w	r3, r3, #15
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	3330      	adds	r3, #48	; 0x30
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015c8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b40      	ldr	r3, [pc, #256]	; (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015d0:	705a      	strb	r2, [r3, #1]

    if(index==CAN3){
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d11a      	bne.n	800160e <DRV_CANFDSPI_ReadHalfWord+0x6e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a3e      	ldr	r2, [pc, #248]	; (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x138>)
 80015de:	8811      	ldrh	r1, [r2, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f00c fcde 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80015e8:	89bb      	ldrh	r3, [r7, #12]
 80015ea:	2264      	movs	r2, #100	; 0x64
 80015ec:	9200      	str	r2, [sp, #0]
 80015ee:	4a3b      	ldr	r2, [pc, #236]	; (80016dc <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 80015f0:	4937      	ldr	r1, [pc, #220]	; (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 80015f2:	483b      	ldr	r0, [pc, #236]	; (80016e0 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 80015f4:	f00f f854 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80015f8:	4603      	mov	r3, r0
 80015fa:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <DRV_CANFDSPI_ReadHalfWord+0x134>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <DRV_CANFDSPI_ReadHalfWord+0x138>)
 8001602:	8811      	ldrh	r1, [r2, #0]
 8001604:	2201      	movs	r2, #1
 8001606:	4618      	mov	r0, r3
 8001608:	f00c fccc 	bl	800dfa4 <HAL_GPIO_WritePin>
 800160c:	e037      	b.n	800167e <DRV_CANFDSPI_ReadHalfWord+0xde>
    } else if(index==CAN2){
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d11a      	bne.n	800164a <DRV_CANFDSPI_ReadHalfWord+0xaa>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001614:	4b33      	ldr	r3, [pc, #204]	; (80016e4 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <DRV_CANFDSPI_ReadHalfWord+0x148>)
 800161a:	8811      	ldrh	r1, [r2, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00c fcc0 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001624:	89bb      	ldrh	r3, [r7, #12]
 8001626:	2264      	movs	r2, #100	; 0x64
 8001628:	9200      	str	r2, [sp, #0]
 800162a:	4a2c      	ldr	r2, [pc, #176]	; (80016dc <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 800162c:	4928      	ldr	r1, [pc, #160]	; (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 800162e:	482c      	ldr	r0, [pc, #176]	; (80016e0 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001630:	f00f f836 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001634:	4603      	mov	r3, r0
 8001636:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <DRV_CANFDSPI_ReadHalfWord+0x144>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <DRV_CANFDSPI_ReadHalfWord+0x148>)
 800163e:	8811      	ldrh	r1, [r2, #0]
 8001640:	2201      	movs	r2, #1
 8001642:	4618      	mov	r0, r3
 8001644:	f00c fcae 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001648:	e019      	b.n	800167e <DRV_CANFDSPI_ReadHalfWord+0xde>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 800164a:	4b28      	ldr	r3, [pc, #160]	; (80016ec <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a28      	ldr	r2, [pc, #160]	; (80016f0 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 8001650:	8811      	ldrh	r1, [r2, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f00c fca5 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800165a:	89bb      	ldrh	r3, [r7, #12]
 800165c:	2264      	movs	r2, #100	; 0x64
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 8001662:	491b      	ldr	r1, [pc, #108]	; (80016d0 <DRV_CANFDSPI_ReadHalfWord+0x130>)
 8001664:	481e      	ldr	r0, [pc, #120]	; (80016e0 <DRV_CANFDSPI_ReadHalfWord+0x140>)
 8001666:	f00f f81b 	bl	80106a0 <HAL_SPI_TransmitReceive>
 800166a:	4603      	mov	r3, r0
 800166c:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 800166e:	4b1f      	ldr	r3, [pc, #124]	; (80016ec <DRV_CANFDSPI_ReadHalfWord+0x14c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a1f      	ldr	r2, [pc, #124]	; (80016f0 <DRV_CANFDSPI_ReadHalfWord+0x150>)
 8001674:	8811      	ldrh	r1, [r2, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f00c fc93 	bl	800dfa4 <HAL_GPIO_WritePin>
    }

    if (spiTransferError != HAL_OK) {
 800167e:	7bbb      	ldrb	r3, [r7, #14]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <DRV_CANFDSPI_ReadHalfWord+0xea>
        return spiTransferError;
 8001684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001688:	e01e      	b.n	80016c8 <DRV_CANFDSPI_ReadHalfWord+0x128>
    }

    // Update data
    *rxd = 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 8001690:	2302      	movs	r3, #2
 8001692:	73fb      	strb	r3, [r7, #15]
 8001694:	e013      	b.n	80016be <DRV_CANFDSPI_ReadHalfWord+0x11e>
        x = (uint32_t) spiReceiveBuffer[i];
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	4a10      	ldr	r2, [pc, #64]	; (80016dc <DRV_CANFDSPI_ReadHalfWord+0x13c>)
 800169a:	5cd3      	ldrb	r3, [r2, r3]
 800169c:	60bb      	str	r3, [r7, #8]
        *rxd += x << ((i - 2)*8);
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	881a      	ldrh	r2, [r3, #0]
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3b02      	subs	r3, #2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	68b9      	ldr	r1, [r7, #8]
 80016aa:	fa01 f303 	lsl.w	r3, r1, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4413      	add	r3, r2
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	801a      	strh	r2, [r3, #0]
    for (i = 2; i < 4; i++) {
 80016b8:	7bfb      	ldrb	r3, [r7, #15]
 80016ba:	3301      	adds	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d9e8      	bls.n	8001696 <DRV_CANFDSPI_ReadHalfWord+0xf6>
    }

    return spiTransferError;
 80016c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200002ec 	.word	0x200002ec
 80016d4:	20000cb8 	.word	0x20000cb8
 80016d8:	20000cb6 	.word	0x20000cb6
 80016dc:	2000034c 	.word	0x2000034c
 80016e0:	20000510 	.word	0x20000510
 80016e4:	20000c98 	.word	0x20000c98
 80016e8:	20000c96 	.word	0x20000c96
 80016ec:	20000c78 	.word	0x20000c78
 80016f0:	20000c76 	.word	0x20000c76

080016f4 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	460b      	mov	r3, r1
 8001700:	80bb      	strh	r3, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	807b      	strh	r3, [r7, #2]
    uint8_t i;
    uint16_t spiTransferSize = 4;
 8001706:	2304      	movs	r3, #4
 8001708:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef spiTransferError;

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 800170a:	88bb      	ldrh	r3, [r7, #4]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	b29b      	uxth	r3, r3
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	b2db      	uxtb	r3, r3
 8001718:	3320      	adds	r3, #32
 800171a:	b2da      	uxtb	r2, r3
 800171c:	4b39      	ldr	r3, [pc, #228]	; (8001804 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800171e:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001720:	88bb      	ldrh	r3, [r7, #4]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	4b37      	ldr	r3, [pc, #220]	; (8001804 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 8001726:	705a      	strb	r2, [r3, #1]

    // Split word into 2 bytes and add them to buffer
    for (i = 0; i < 2; i++) {
 8001728:	2300      	movs	r3, #0
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e00b      	b.n	8001746 <DRV_CANFDSPI_WriteHalfWord+0x52>
        spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	411a      	asrs	r2, r3
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	3302      	adds	r3, #2
 800173a:	b2d1      	uxtb	r1, r2
 800173c:	4a31      	ldr	r2, [pc, #196]	; (8001804 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800173e:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < 2; i++) {
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	3301      	adds	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d9f0      	bls.n	800172e <DRV_CANFDSPI_WriteHalfWord+0x3a>
    }

    if(index==CAN3){
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d11a      	bne.n	8001788 <DRV_CANFDSPI_WriteHalfWord+0x94>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001752:	4b2d      	ldr	r3, [pc, #180]	; (8001808 <DRV_CANFDSPI_WriteHalfWord+0x114>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2d      	ldr	r2, [pc, #180]	; (800180c <DRV_CANFDSPI_WriteHalfWord+0x118>)
 8001758:	8811      	ldrh	r1, [r2, #0]
 800175a:	2200      	movs	r2, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f00c fc21 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001762:	89bb      	ldrh	r3, [r7, #12]
 8001764:	2264      	movs	r2, #100	; 0x64
 8001766:	9200      	str	r2, [sp, #0]
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 800176a:	4926      	ldr	r1, [pc, #152]	; (8001804 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 800176c:	4829      	ldr	r0, [pc, #164]	; (8001814 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 800176e:	f00e ff97 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001772:	4603      	mov	r3, r0
 8001774:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <DRV_CANFDSPI_WriteHalfWord+0x114>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a24      	ldr	r2, [pc, #144]	; (800180c <DRV_CANFDSPI_WriteHalfWord+0x118>)
 800177c:	8811      	ldrh	r1, [r2, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	4618      	mov	r0, r3
 8001782:	f00c fc0f 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001786:	e037      	b.n	80017f8 <DRV_CANFDSPI_WriteHalfWord+0x104>
    } else if(index==CAN2){
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d11a      	bne.n	80017c4 <DRV_CANFDSPI_WriteHalfWord+0xd0>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 800178e:	4b22      	ldr	r3, [pc, #136]	; (8001818 <DRV_CANFDSPI_WriteHalfWord+0x124>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a22      	ldr	r2, [pc, #136]	; (800181c <DRV_CANFDSPI_WriteHalfWord+0x128>)
 8001794:	8811      	ldrh	r1, [r2, #0]
 8001796:	2200      	movs	r2, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f00c fc03 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800179e:	89bb      	ldrh	r3, [r7, #12]
 80017a0:	2264      	movs	r2, #100	; 0x64
 80017a2:	9200      	str	r2, [sp, #0]
 80017a4:	4a1a      	ldr	r2, [pc, #104]	; (8001810 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 80017a6:	4917      	ldr	r1, [pc, #92]	; (8001804 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017a8:	481a      	ldr	r0, [pc, #104]	; (8001814 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017aa:	f00e ff79 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <DRV_CANFDSPI_WriteHalfWord+0x124>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a19      	ldr	r2, [pc, #100]	; (800181c <DRV_CANFDSPI_WriteHalfWord+0x128>)
 80017b8:	8811      	ldrh	r1, [r2, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4618      	mov	r0, r3
 80017be:	f00c fbf1 	bl	800dfa4 <HAL_GPIO_WritePin>
 80017c2:	e019      	b.n	80017f8 <DRV_CANFDSPI_WriteHalfWord+0x104>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a16      	ldr	r2, [pc, #88]	; (8001824 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017ca:	8811      	ldrh	r1, [r2, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f00c fbe8 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80017d4:	89bb      	ldrh	r3, [r7, #12]
 80017d6:	2264      	movs	r2, #100	; 0x64
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <DRV_CANFDSPI_WriteHalfWord+0x11c>)
 80017dc:	4909      	ldr	r1, [pc, #36]	; (8001804 <DRV_CANFDSPI_WriteHalfWord+0x110>)
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <DRV_CANFDSPI_WriteHalfWord+0x120>)
 80017e0:	f00e ff5e 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80017e4:	4603      	mov	r3, r0
 80017e6:	73bb      	strb	r3, [r7, #14]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <DRV_CANFDSPI_WriteHalfWord+0x12c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <DRV_CANFDSPI_WriteHalfWord+0x130>)
 80017ee:	8811      	ldrh	r1, [r2, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	4618      	mov	r0, r3
 80017f4:	f00c fbd6 	bl	800dfa4 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 80017f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200002ec 	.word	0x200002ec
 8001808:	20000cb8 	.word	0x20000cb8
 800180c:	20000cb6 	.word	0x20000cb6
 8001810:	2000034c 	.word	0x2000034c
 8001814:	20000510 	.word	0x20000510
 8001818:	20000c98 	.word	0x20000c98
 800181c:	20000c96 	.word	0x20000c96
 8001820:	20000c78 	.word	0x20000c78
 8001824:	20000c76 	.word	0x20000c76

08001828 <DRV_CANFDSPI_ReadByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af02      	add	r7, sp, #8
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	461a      	mov	r2, r3
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	460b      	mov	r3, r1
 8001838:	81bb      	strh	r3, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	3302      	adds	r3, #2
 8001842:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001844:	8a7b      	ldrh	r3, [r7, #18]
 8001846:	2b60      	cmp	r3, #96	; 0x60
 8001848:	d902      	bls.n	8001850 <DRV_CANFDSPI_ReadByteArray+0x28>
        return -1;
 800184a:	f04f 33ff 	mov.w	r3, #4294967295
 800184e:	e086      	b.n	800195e <DRV_CANFDSPI_ReadByteArray+0x136>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001850:	89bb      	ldrh	r3, [r7, #12]
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b29b      	uxth	r3, r3
 8001856:	b2db      	uxtb	r3, r3
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3330      	adds	r3, #48	; 0x30
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001864:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001866:	89bb      	ldrh	r3, [r7, #12]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <DRV_CANFDSPI_ReadByteArray+0x140>)
 800186c:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 800186e:	2302      	movs	r3, #2
 8001870:	82fb      	strh	r3, [r7, #22]
 8001872:	e006      	b.n	8001882 <DRV_CANFDSPI_ReadByteArray+0x5a>
        spiTransmitBuffer[i] = 0;
 8001874:	8afb      	ldrh	r3, [r7, #22]
 8001876:	4a3c      	ldr	r2, [pc, #240]	; (8001968 <DRV_CANFDSPI_ReadByteArray+0x140>)
 8001878:	2100      	movs	r1, #0
 800187a:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 800187c:	8afb      	ldrh	r3, [r7, #22]
 800187e:	3301      	adds	r3, #1
 8001880:	82fb      	strh	r3, [r7, #22]
 8001882:	8afa      	ldrh	r2, [r7, #22]
 8001884:	8a7b      	ldrh	r3, [r7, #18]
 8001886:	429a      	cmp	r2, r3
 8001888:	d3f4      	bcc.n	8001874 <DRV_CANFDSPI_ReadByteArray+0x4c>
    }

    if(index==CAN3){
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d11a      	bne.n	80018c6 <DRV_CANFDSPI_ReadByteArray+0x9e>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001890:	4b36      	ldr	r3, [pc, #216]	; (800196c <DRV_CANFDSPI_ReadByteArray+0x144>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a36      	ldr	r2, [pc, #216]	; (8001970 <DRV_CANFDSPI_ReadByteArray+0x148>)
 8001896:	8811      	ldrh	r1, [r2, #0]
 8001898:	2200      	movs	r2, #0
 800189a:	4618      	mov	r0, r3
 800189c:	f00c fb82 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018a0:	8a7b      	ldrh	r3, [r7, #18]
 80018a2:	2264      	movs	r2, #100	; 0x64
 80018a4:	9200      	str	r2, [sp, #0]
 80018a6:	4a33      	ldr	r2, [pc, #204]	; (8001974 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018a8:	492f      	ldr	r1, [pc, #188]	; (8001968 <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018aa:	4833      	ldr	r0, [pc, #204]	; (8001978 <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018ac:	f00e fef8 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80018b0:	4603      	mov	r3, r0
 80018b2:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <DRV_CANFDSPI_ReadByteArray+0x144>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a2d      	ldr	r2, [pc, #180]	; (8001970 <DRV_CANFDSPI_ReadByteArray+0x148>)
 80018ba:	8811      	ldrh	r1, [r2, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	4618      	mov	r0, r3
 80018c0:	f00c fb70 	bl	800dfa4 <HAL_GPIO_WritePin>
 80018c4:	e037      	b.n	8001936 <DRV_CANFDSPI_ReadByteArray+0x10e>
    } else if(index==CAN2){
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d11a      	bne.n	8001902 <DRV_CANFDSPI_ReadByteArray+0xda>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <DRV_CANFDSPI_ReadByteArray+0x154>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2b      	ldr	r2, [pc, #172]	; (8001980 <DRV_CANFDSPI_ReadByteArray+0x158>)
 80018d2:	8811      	ldrh	r1, [r2, #0]
 80018d4:	2200      	movs	r2, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f00c fb64 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 80018dc:	8a7b      	ldrh	r3, [r7, #18]
 80018de:	2264      	movs	r2, #100	; 0x64
 80018e0:	9200      	str	r2, [sp, #0]
 80018e2:	4a24      	ldr	r2, [pc, #144]	; (8001974 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 80018e4:	4920      	ldr	r1, [pc, #128]	; (8001968 <DRV_CANFDSPI_ReadByteArray+0x140>)
 80018e6:	4824      	ldr	r0, [pc, #144]	; (8001978 <DRV_CANFDSPI_ReadByteArray+0x150>)
 80018e8:	f00e feda 	bl	80106a0 <HAL_SPI_TransmitReceive>
 80018ec:	4603      	mov	r3, r0
 80018ee:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 80018f0:	4b22      	ldr	r3, [pc, #136]	; (800197c <DRV_CANFDSPI_ReadByteArray+0x154>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a22      	ldr	r2, [pc, #136]	; (8001980 <DRV_CANFDSPI_ReadByteArray+0x158>)
 80018f6:	8811      	ldrh	r1, [r2, #0]
 80018f8:	2201      	movs	r2, #1
 80018fa:	4618      	mov	r0, r3
 80018fc:	f00c fb52 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001900:	e019      	b.n	8001936 <DRV_CANFDSPI_ReadByteArray+0x10e>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a20      	ldr	r2, [pc, #128]	; (8001988 <DRV_CANFDSPI_ReadByteArray+0x160>)
 8001908:	8811      	ldrh	r1, [r2, #0]
 800190a:	2200      	movs	r2, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f00c fb49 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001912:	8a7b      	ldrh	r3, [r7, #18]
 8001914:	2264      	movs	r2, #100	; 0x64
 8001916:	9200      	str	r2, [sp, #0]
 8001918:	4a16      	ldr	r2, [pc, #88]	; (8001974 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 800191a:	4913      	ldr	r1, [pc, #76]	; (8001968 <DRV_CANFDSPI_ReadByteArray+0x140>)
 800191c:	4816      	ldr	r0, [pc, #88]	; (8001978 <DRV_CANFDSPI_ReadByteArray+0x150>)
 800191e:	f00e febf 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001922:	4603      	mov	r3, r0
 8001924:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001926:	4b17      	ldr	r3, [pc, #92]	; (8001984 <DRV_CANFDSPI_ReadByteArray+0x15c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <DRV_CANFDSPI_ReadByteArray+0x160>)
 800192c:	8811      	ldrh	r1, [r2, #0]
 800192e:	2201      	movs	r2, #1
 8001930:	4618      	mov	r0, r3
 8001932:	f00c fb37 	bl	800dfa4 <HAL_GPIO_WritePin>
    }

    // Update data
    for (i = 0; i < nBytes; i++) {
 8001936:	2300      	movs	r3, #0
 8001938:	82fb      	strh	r3, [r7, #22]
 800193a:	e00a      	b.n	8001952 <DRV_CANFDSPI_ReadByteArray+0x12a>
        rxd[i] = spiReceiveBuffer[i + 2];
 800193c:	8afb      	ldrh	r3, [r7, #22]
 800193e:	1c9a      	adds	r2, r3, #2
 8001940:	8afb      	ldrh	r3, [r7, #22]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	440b      	add	r3, r1
 8001946:	490b      	ldr	r1, [pc, #44]	; (8001974 <DRV_CANFDSPI_ReadByteArray+0x14c>)
 8001948:	5c8a      	ldrb	r2, [r1, r2]
 800194a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < nBytes; i++) {
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	3301      	adds	r3, #1
 8001950:	82fb      	strh	r3, [r7, #22]
 8001952:	8afa      	ldrh	r2, [r7, #22]
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	429a      	cmp	r2, r3
 8001958:	d3f0      	bcc.n	800193c <DRV_CANFDSPI_ReadByteArray+0x114>
    }

    return spiTransferError;
 800195a:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200002ec 	.word	0x200002ec
 800196c:	20000cb8 	.word	0x20000cb8
 8001970:	20000cb6 	.word	0x20000cb6
 8001974:	2000034c 	.word	0x2000034c
 8001978:	20000510 	.word	0x20000510
 800197c:	20000c98 	.word	0x20000c98
 8001980:	20000c96 	.word	0x20000c96
 8001984:	20000c78 	.word	0x20000c78
 8001988:	20000c76 	.word	0x20000c76

0800198c <DRV_CANFDSPI_WriteByteArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af02      	add	r7, sp, #8
 8001992:	60ba      	str	r2, [r7, #8]
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	73fb      	strb	r3, [r7, #15]
 800199a:	460b      	mov	r3, r1
 800199c:	81bb      	strh	r3, [r7, #12]
 800199e:	4613      	mov	r3, r2
 80019a0:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    uint16_t spiTransferSize = nBytes + 2;
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	3302      	adds	r3, #2
 80019a6:	827b      	strh	r3, [r7, #18]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 80019a8:	8a7b      	ldrh	r3, [r7, #18]
 80019aa:	2b60      	cmp	r3, #96	; 0x60
 80019ac:	d902      	bls.n	80019b4 <DRV_CANFDSPI_WriteByteArray+0x28>
        return -1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e078      	b.n	8001aa6 <DRV_CANFDSPI_WriteByteArray+0x11a>
    }

    // Compose command
    spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 80019b4:	89bb      	ldrh	r3, [r7, #12]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	f003 030f 	and.w	r3, r3, #15
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	3320      	adds	r3, #32
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b3a      	ldr	r3, [pc, #232]	; (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019c8:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80019ca:	89bb      	ldrh	r3, [r7, #12]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019d0:	705a      	strb	r2, [r3, #1]

    // Add data
    for (i = 0; i < nBytes; i++) {
 80019d2:	2300      	movs	r3, #0
 80019d4:	82fb      	strh	r3, [r7, #22]
 80019d6:	e00a      	b.n	80019ee <DRV_CANFDSPI_WriteByteArray+0x62>
        spiTransmitBuffer[i+2] = txd[i];
 80019d8:	8afb      	ldrh	r3, [r7, #22]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	441a      	add	r2, r3
 80019de:	8afb      	ldrh	r3, [r7, #22]
 80019e0:	3302      	adds	r3, #2
 80019e2:	7811      	ldrb	r1, [r2, #0]
 80019e4:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x124>)
 80019e6:	54d1      	strb	r1, [r2, r3]
    for (i = 0; i < nBytes; i++) {
 80019e8:	8afb      	ldrh	r3, [r7, #22]
 80019ea:	3301      	adds	r3, #1
 80019ec:	82fb      	strh	r3, [r7, #22]
 80019ee:	8afa      	ldrh	r2, [r7, #22]
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d3f0      	bcc.n	80019d8 <DRV_CANFDSPI_WriteByteArray+0x4c>
    }
    if(index==CAN3){
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d11a      	bne.n	8001a32 <DRV_CANFDSPI_WriteByteArray+0xa6>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x128>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2d      	ldr	r2, [pc, #180]	; (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a02:	8811      	ldrh	r1, [r2, #0]
 8001a04:	2200      	movs	r2, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00c facc 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a0c:	8a7b      	ldrh	r3, [r7, #18]
 8001a0e:	2264      	movs	r2, #100	; 0x64
 8001a10:	9200      	str	r2, [sp, #0]
 8001a12:	4a2a      	ldr	r2, [pc, #168]	; (8001abc <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a14:	4926      	ldr	r1, [pc, #152]	; (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a16:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a18:	f00e fe42 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <DRV_CANFDSPI_WriteByteArray+0x128>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <DRV_CANFDSPI_WriteByteArray+0x12c>)
 8001a26:	8811      	ldrh	r1, [r2, #0]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00c faba 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001a30:	e037      	b.n	8001aa2 <DRV_CANFDSPI_WriteByteArray+0x116>
    } else if(index==CAN2){
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d11a      	bne.n	8001a6e <DRV_CANFDSPI_WriteByteArray+0xe2>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a3e:	8811      	ldrh	r1, [r2, #0]
 8001a40:	2200      	movs	r2, #0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f00c faae 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a48:	8a7b      	ldrh	r3, [r7, #18]
 8001a4a:	2264      	movs	r2, #100	; 0x64
 8001a4c:	9200      	str	r2, [sp, #0]
 8001a4e:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a50:	4917      	ldr	r1, [pc, #92]	; (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a52:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a54:	f00e fe24 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <DRV_CANFDSPI_WriteByteArray+0x138>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <DRV_CANFDSPI_WriteByteArray+0x13c>)
 8001a62:	8811      	ldrh	r1, [r2, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	4618      	mov	r0, r3
 8001a68:	f00c fa9c 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001a6c:	e019      	b.n	8001aa2 <DRV_CANFDSPI_WriteByteArray+0x116>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001a74:	8811      	ldrh	r1, [r2, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00c fa93 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a7e:	8a7b      	ldrh	r3, [r7, #18]
 8001a80:	2264      	movs	r2, #100	; 0x64
 8001a82:	9200      	str	r2, [sp, #0]
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <DRV_CANFDSPI_WriteByteArray+0x130>)
 8001a86:	490a      	ldr	r1, [pc, #40]	; (8001ab0 <DRV_CANFDSPI_WriteByteArray+0x124>)
 8001a88:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <DRV_CANFDSPI_WriteByteArray+0x134>)
 8001a8a:	f00e fe09 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	757b      	strb	r3, [r7, #21]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001a92:	4b0e      	ldr	r3, [pc, #56]	; (8001acc <DRV_CANFDSPI_WriteByteArray+0x140>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <DRV_CANFDSPI_WriteByteArray+0x144>)
 8001a98:	8811      	ldrh	r1, [r2, #0]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f00c fa81 	bl	800dfa4 <HAL_GPIO_WritePin>
    }

    return spiTransferError;
 8001aa2:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200002ec 	.word	0x200002ec
 8001ab4:	20000cb8 	.word	0x20000cb8
 8001ab8:	20000cb6 	.word	0x20000cb6
 8001abc:	2000034c 	.word	0x2000034c
 8001ac0:	20000510 	.word	0x20000510
 8001ac4:	20000c98 	.word	0x20000c98
 8001ac8:	20000c96 	.word	0x20000c96
 8001acc:	20000c78 	.word	0x20000c78
 8001ad0:	20000c76 	.word	0x20000c76

08001ad4 <DRV_CANFDSPI_ReadWordArray>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4603      	mov	r3, r0
 8001ae0:	73fb      	strb	r3, [r7, #15]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	81bb      	strh	r3, [r7, #12]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	80fb      	strh	r3, [r7, #6]
    uint16_t i, j, n;
    REG_t w;
    uint16_t spiTransferSize = nWords * 4 + 2;
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3302      	adds	r3, #2
 8001af2:	82fb      	strh	r3, [r7, #22]
    HAL_StatusTypeDef spiTransferError;

    // Validate that length of array is sufficient to hold requested number of bytes
    if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001af4:	8afb      	ldrh	r3, [r7, #22]
 8001af6:	2b60      	cmp	r3, #96	; 0x60
 8001af8:	d902      	bls.n	8001b00 <DRV_CANFDSPI_ReadWordArray+0x2c>
        return -1;
 8001afa:	f04f 33ff 	mov.w	r3, #4294967295
 8001afe:	e0a2      	b.n	8001c46 <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Compose command
    spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001b00:	89bb      	ldrh	r3, [r7, #12]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	3330      	adds	r3, #48	; 0x30
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b4f      	ldr	r3, [pc, #316]	; (8001c50 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b14:	701a      	strb	r2, [r3, #0]
    spiTransmitBuffer[1] = address & 0xFF;
 8001b16:	89bb      	ldrh	r3, [r7, #12]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4b4d      	ldr	r3, [pc, #308]	; (8001c50 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b1c:	705a      	strb	r2, [r3, #1]

    // Clear data
    for (i = 2; i < spiTransferSize; i++) {
 8001b1e:	2302      	movs	r3, #2
 8001b20:	83fb      	strh	r3, [r7, #30]
 8001b22:	e006      	b.n	8001b32 <DRV_CANFDSPI_ReadWordArray+0x5e>
        spiTransmitBuffer[i] = 0;
 8001b24:	8bfb      	ldrh	r3, [r7, #30]
 8001b26:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b28:	2100      	movs	r1, #0
 8001b2a:	54d1      	strb	r1, [r2, r3]
    for (i = 2; i < spiTransferSize; i++) {
 8001b2c:	8bfb      	ldrh	r3, [r7, #30]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	83fb      	strh	r3, [r7, #30]
 8001b32:	8bfa      	ldrh	r2, [r7, #30]
 8001b34:	8afb      	ldrh	r3, [r7, #22]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d3f4      	bcc.n	8001b24 <DRV_CANFDSPI_ReadWordArray+0x50>
    }
    if(index==CAN3){
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d11a      	bne.n	8001b76 <DRV_CANFDSPI_ReadWordArray+0xa2>
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_RESET);
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b46:	8811      	ldrh	r1, [r2, #0]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00c fa2a 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b50:	8afb      	ldrh	r3, [r7, #22]
 8001b52:	2264      	movs	r2, #100	; 0x64
 8001b54:	9200      	str	r2, [sp, #0]
 8001b56:	4a41      	ldr	r2, [pc, #260]	; (8001c5c <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b58:	493d      	ldr	r1, [pc, #244]	; (8001c50 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b5a:	4841      	ldr	r0, [pc, #260]	; (8001c60 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b5c:	f00e fda0 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001b60:	4603      	mov	r3, r0
 8001b62:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN3_CS_GPIO_Port,  CAN3_CS_Pin , GPIO_PIN_SET);
 8001b64:	4b3b      	ldr	r3, [pc, #236]	; (8001c54 <DRV_CANFDSPI_ReadWordArray+0x180>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a3b      	ldr	r2, [pc, #236]	; (8001c58 <DRV_CANFDSPI_ReadWordArray+0x184>)
 8001b6a:	8811      	ldrh	r1, [r2, #0]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f00c fa18 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001b74:	e037      	b.n	8001be6 <DRV_CANFDSPI_ReadWordArray+0x112>
    } else if(index==CAN2){
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d11a      	bne.n	8001bb2 <DRV_CANFDSPI_ReadWordArray+0xde>
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_RESET);
 8001b7c:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a39      	ldr	r2, [pc, #228]	; (8001c68 <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001b82:	8811      	ldrh	r1, [r2, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00c fa0c 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b8c:	8afb      	ldrh	r3, [r7, #22]
 8001b8e:	2264      	movs	r2, #100	; 0x64
 8001b90:	9200      	str	r2, [sp, #0]
 8001b92:	4a32      	ldr	r2, [pc, #200]	; (8001c5c <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001b94:	492e      	ldr	r1, [pc, #184]	; (8001c50 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001b96:	4832      	ldr	r0, [pc, #200]	; (8001c60 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001b98:	f00e fd82 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN2_CS_GPIO_Port,  CAN2_CS_Pin , GPIO_PIN_SET);
 8001ba0:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <DRV_CANFDSPI_ReadWordArray+0x190>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a30      	ldr	r2, [pc, #192]	; (8001c68 <DRV_CANFDSPI_ReadWordArray+0x194>)
 8001ba6:	8811      	ldrh	r1, [r2, #0]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00c f9fa 	bl	800dfa4 <HAL_GPIO_WritePin>
 8001bb0:	e019      	b.n	8001be6 <DRV_CANFDSPI_ReadWordArray+0x112>
    }else{
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_RESET);
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2e      	ldr	r2, [pc, #184]	; (8001c70 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bb8:	8811      	ldrh	r1, [r2, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f00c f9f1 	bl	800dfa4 <HAL_GPIO_WritePin>
      spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bc2:	8afb      	ldrh	r3, [r7, #22]
 8001bc4:	2264      	movs	r2, #100	; 0x64
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001bca:	4921      	ldr	r1, [pc, #132]	; (8001c50 <DRV_CANFDSPI_ReadWordArray+0x17c>)
 8001bcc:	4824      	ldr	r0, [pc, #144]	; (8001c60 <DRV_CANFDSPI_ReadWordArray+0x18c>)
 8001bce:	f00e fd67 	bl	80106a0 <HAL_SPI_TransmitReceive>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	767b      	strb	r3, [r7, #25]
      HAL_GPIO_WritePin(CAN1_CS_GPIO_Port,  CAN1_CS_Pin , GPIO_PIN_SET);
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <DRV_CANFDSPI_ReadWordArray+0x198>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a25      	ldr	r2, [pc, #148]	; (8001c70 <DRV_CANFDSPI_ReadWordArray+0x19c>)
 8001bdc:	8811      	ldrh	r1, [r2, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	f00c f9df 	bl	800dfa4 <HAL_GPIO_WritePin>
    }
    if (spiTransferError) {
 8001be6:	7e7b      	ldrb	r3, [r7, #25]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <DRV_CANFDSPI_ReadWordArray+0x11e>
        return spiTransferError;
 8001bec:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001bf0:	e029      	b.n	8001c46 <DRV_CANFDSPI_ReadWordArray+0x172>
    }

    // Convert Byte array to Word array
    n = 2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	837b      	strh	r3, [r7, #26]
    for (i = 0; i < nWords; i++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	83fb      	strh	r3, [r7, #30]
 8001bfa:	e01e      	b.n	8001c3a <DRV_CANFDSPI_ReadWordArray+0x166>
        w.word = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	613b      	str	r3, [r7, #16]
        for (j = 0; j < 4; j++, n++) {
 8001c00:	2300      	movs	r3, #0
 8001c02:	83bb      	strh	r3, [r7, #28]
 8001c04:	e00d      	b.n	8001c22 <DRV_CANFDSPI_ReadWordArray+0x14e>
            w.byte[j] = spiReceiveBuffer[n];
 8001c06:	8b7a      	ldrh	r2, [r7, #26]
 8001c08:	8bbb      	ldrh	r3, [r7, #28]
 8001c0a:	4914      	ldr	r1, [pc, #80]	; (8001c5c <DRV_CANFDSPI_ReadWordArray+0x188>)
 8001c0c:	5c8a      	ldrb	r2, [r1, r2]
 8001c0e:	3320      	adds	r3, #32
 8001c10:	443b      	add	r3, r7
 8001c12:	f803 2c10 	strb.w	r2, [r3, #-16]
        for (j = 0; j < 4; j++, n++) {
 8001c16:	8bbb      	ldrh	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	83bb      	strh	r3, [r7, #28]
 8001c1c:	8b7b      	ldrh	r3, [r7, #26]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	837b      	strh	r3, [r7, #26]
 8001c22:	8bbb      	ldrh	r3, [r7, #28]
 8001c24:	2b03      	cmp	r3, #3
 8001c26:	d9ee      	bls.n	8001c06 <DRV_CANFDSPI_ReadWordArray+0x132>
        }
        rxd[i] = w.word;
 8001c28:	8bfb      	ldrh	r3, [r7, #30]
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4413      	add	r3, r2
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	601a      	str	r2, [r3, #0]
    for (i = 0; i < nWords; i++) {
 8001c34:	8bfb      	ldrh	r3, [r7, #30]
 8001c36:	3301      	adds	r3, #1
 8001c38:	83fb      	strh	r3, [r7, #30]
 8001c3a:	8bfa      	ldrh	r2, [r7, #30]
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d3dc      	bcc.n	8001bfc <DRV_CANFDSPI_ReadWordArray+0x128>
    }

    return spiTransferError;
 8001c42:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200002ec 	.word	0x200002ec
 8001c54:	20000cb8 	.word	0x20000cb8
 8001c58:	20000cb6 	.word	0x20000cb6
 8001c5c:	2000034c 	.word	0x2000034c
 8001c60:	20000510 	.word	0x20000510
 8001c64:	20000c98 	.word	0x20000c98
 8001c68:	20000c96 	.word	0x20000c96
 8001c6c:	20000c78 	.word	0x20000c78
 8001c70:	20000c76 	.word	0x20000c76

08001c74 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	6039      	str	r1, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
    REG_CiCON ciCon;
    int8_t spiTransferError = 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001c84:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <DRV_CANFDSPI_Configure+0x118>)
 8001c86:	60bb      	str	r3, [r7, #8]

    ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001c90:	b2da      	uxtb	r2, r3
 8001c92:	7a3b      	ldrb	r3, [r7, #8]
 8001c94:	f362 0304 	bfi	r3, r2, #0, #5
 8001c98:	723b      	strb	r3, [r7, #8]
    ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	7a3b      	ldrb	r3, [r7, #8]
 8001ca6:	f362 1345 	bfi	r3, r2, #5, #1
 8001caa:	723b      	strb	r3, [r7, #8]
    ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	7a3b      	ldrb	r3, [r7, #8]
 8001cb8:	f362 1386 	bfi	r3, r2, #6, #1
 8001cbc:	723b      	strb	r3, [r7, #8]
    ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	7a7b      	ldrb	r3, [r7, #9]
 8001cca:	f362 0300 	bfi	r3, r2, #0, #1
 8001cce:	727b      	strb	r3, [r7, #9]
    ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	7a7b      	ldrb	r3, [r7, #9]
 8001cdc:	f362 0342 	bfi	r3, r2, #1, #2
 8001ce0:	727b      	strb	r3, [r7, #9]
    ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	785b      	ldrb	r3, [r3, #1]
 8001ce6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	7a7b      	ldrb	r3, [r7, #9]
 8001cee:	f362 1304 	bfi	r3, r2, #4, #1
 8001cf2:	727b      	strb	r3, [r7, #9]
    ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	785b      	ldrb	r3, [r3, #1]
 8001cf8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	7abb      	ldrb	r3, [r7, #10]
 8001d00:	f362 0300 	bfi	r3, r2, #0, #1
 8001d04:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	7abb      	ldrb	r3, [r7, #10]
 8001d12:	f362 0341 	bfi	r3, r2, #1, #1
 8001d16:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	785b      	ldrb	r3, [r3, #1]
 8001d1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	7abb      	ldrb	r3, [r7, #10]
 8001d24:	f362 0382 	bfi	r3, r2, #2, #1
 8001d28:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.StoreInTEF = config->StoreInTEF;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	7abb      	ldrb	r3, [r7, #10]
 8001d36:	f362 03c3 	bfi	r3, r2, #3, #1
 8001d3a:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TXQEnable = config->TXQEnable;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	785b      	ldrb	r3, [r3, #1]
 8001d40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	7abb      	ldrb	r3, [r7, #10]
 8001d48:	f362 1304 	bfi	r3, r2, #4, #1
 8001d4c:	72bb      	strb	r3, [r7, #10]
    ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	7afb      	ldrb	r3, [r7, #11]
 8001d5a:	f362 1307 	bfi	r3, r2, #4, #4
 8001d5e:	72fb      	strb	r3, [r7, #11]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fb80 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <DRV_CANFDSPI_Configure+0x10a>
        return -1;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7c:	e001      	b.n	8001d82 <DRV_CANFDSPI_Configure+0x10e>
    }

    return spiTransferError;
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	04980760 	.word	0x04980760

08001d90 <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    REG_CiCON ciCon;
    ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8001d98:	4b3a      	ldr	r3, [pc, #232]	; (8001e84 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8001d9a:	60fb      	str	r3, [r7, #12]

    config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8001d9c:	7b3b      	ldrb	r3, [r7, #12]
 8001d9e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001da2:	b2d9      	uxtb	r1, r3
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	7813      	ldrb	r3, [r2, #0]
 8001da8:	f361 0304 	bfi	r3, r1, #0, #5
 8001dac:	7013      	strb	r3, [r2, #0]
    config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 8001dae:	7b3b      	ldrb	r3, [r7, #12]
 8001db0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001db4:	b2d9      	uxtb	r1, r3
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	7813      	ldrb	r3, [r2, #0]
 8001dba:	f361 1345 	bfi	r3, r1, #5, #1
 8001dbe:	7013      	strb	r3, [r2, #0]
    config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 8001dc0:	7b3b      	ldrb	r3, [r7, #12]
 8001dc2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001dc6:	b2d9      	uxtb	r1, r3
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	7813      	ldrb	r3, [r2, #0]
 8001dcc:	f361 1386 	bfi	r3, r1, #6, #1
 8001dd0:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 8001dd2:	7b7b      	ldrb	r3, [r7, #13]
 8001dd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001dd8:	b2d9      	uxtb	r1, r3
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	7813      	ldrb	r3, [r2, #0]
 8001dde:	f361 13c7 	bfi	r3, r1, #7, #1
 8001de2:	7013      	strb	r3, [r2, #0]
    config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8001de4:	7b7b      	ldrb	r3, [r7, #13]
 8001de6:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8001dea:	b2d9      	uxtb	r1, r3
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	7853      	ldrb	r3, [r2, #1]
 8001df0:	f361 0301 	bfi	r3, r1, #0, #2
 8001df4:	7053      	strb	r3, [r2, #1]
    config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 8001df6:	7b7b      	ldrb	r3, [r7, #13]
 8001df8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	7853      	ldrb	r3, [r2, #1]
 8001e02:	f361 0382 	bfi	r3, r1, #2, #1
 8001e06:	7053      	strb	r3, [r2, #1]
    config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 8001e08:	7bbb      	ldrb	r3, [r7, #14]
 8001e0a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001e0e:	b2d9      	uxtb	r1, r3
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	7853      	ldrb	r3, [r2, #1]
 8001e14:	f361 03c3 	bfi	r3, r1, #3, #1
 8001e18:	7053      	strb	r3, [r2, #1]
    config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 8001e1a:	7bbb      	ldrb	r3, [r7, #14]
 8001e1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001e20:	b2d9      	uxtb	r1, r3
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	7853      	ldrb	r3, [r2, #1]
 8001e26:	f361 1304 	bfi	r3, r1, #4, #1
 8001e2a:	7053      	strb	r3, [r2, #1]
    config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 8001e2c:	7bbb      	ldrb	r3, [r7, #14]
 8001e2e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001e32:	b2d9      	uxtb	r1, r3
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	7853      	ldrb	r3, [r2, #1]
 8001e38:	f361 1345 	bfi	r3, r1, #5, #1
 8001e3c:	7053      	strb	r3, [r2, #1]
    config->StoreInTEF = ciCon.bF.StoreInTEF;
 8001e3e:	7bbb      	ldrb	r3, [r7, #14]
 8001e40:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001e44:	b2d9      	uxtb	r1, r3
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	7853      	ldrb	r3, [r2, #1]
 8001e4a:	f361 1386 	bfi	r3, r1, #6, #1
 8001e4e:	7053      	strb	r3, [r2, #1]
    config->TXQEnable = ciCon.bF.TXQEnable;
 8001e50:	7bbb      	ldrb	r3, [r7, #14]
 8001e52:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001e56:	b2d9      	uxtb	r1, r3
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	7853      	ldrb	r3, [r2, #1]
 8001e5c:	f361 13c7 	bfi	r3, r1, #7, #1
 8001e60:	7053      	strb	r3, [r2, #1]
    config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e68:	b2d9      	uxtb	r1, r3
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	7893      	ldrb	r3, [r2, #2]
 8001e6e:	f361 0303 	bfi	r3, r1, #0, #4
 8001e72:	7093      	strb	r3, [r2, #2]

    return 0;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	04980760 	.word	0x04980760

08001e88 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460a      	mov	r2, r1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	4613      	mov	r3, r2
 8001e96:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73bb      	strb	r3, [r7, #14]
    int8_t spiTransferError = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 8001ea0:	f107 020e 	add.w	r2, r7, #14
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	2103      	movs	r1, #3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff f91d 	bl	80010e8 <DRV_CANFDSPI_ReadByte>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <DRV_CANFDSPI_OperationModeSelect+0x38>
        return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e01a      	b.n	8001ef6 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    // Modify
    d &= ~0x07;
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	f023 0307 	bic.w	r3, r3, #7
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	73bb      	strb	r3, [r7, #14]
    d |= opMode;
 8001eca:	7bba      	ldrb	r2, [r7, #14]
 8001ecc:	79bb      	ldrb	r3, [r7, #6]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8001ed4:	7bba      	ldrb	r2, [r7, #14]
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2103      	movs	r1, #3
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f992 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8001ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d002      	beq.n	8001ef2 <DRV_CANFDSPI_OperationModeSelect+0x6a>
        return -2;
 8001eec:	f06f 0301 	mvn.w	r3, #1
 8001ef0:	e001      	b.n	8001ef6 <DRV_CANFDSPI_OperationModeSelect+0x6e>
    }

    return spiTransferError;
 8001ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
	...

08001f00 <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	603a      	str	r2, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	81bb      	strh	r3, [r7, #12]

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001f18:	4b24      	ldr	r3, [pc, #144]	; (8001fac <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 8001f1a:	60bb      	str	r3, [r7, #8]

    ciFifoCon.txBF.TxEnable = 1;
 8001f1c:	7a3b      	ldrb	r3, [r7, #8]
 8001f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f22:	723b      	strb	r3, [r7, #8]
    ciFifoCon.txBF.FifoSize = config->FifoSize;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	785b      	ldrb	r3, [r3, #1]
 8001f28:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	f362 0304 	bfi	r3, r2, #0, #5
 8001f34:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	785b      	ldrb	r3, [r3, #1]
 8001f3a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	7afb      	ldrb	r3, [r7, #11]
 8001f42:	f362 1347 	bfi	r3, r2, #5, #3
 8001f46:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	7abb      	ldrb	r3, [r7, #10]
 8001f54:	f362 1346 	bfi	r3, r2, #5, #2
 8001f58:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.TxPriority = config->TxPriority;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	7abb      	ldrb	r3, [r7, #10]
 8001f66:	f362 0304 	bfi	r3, r2, #0, #5
 8001f6a:	72bb      	strb	r3, [r7, #10]
    ciFifoCon.txBF.RTREnable = config->RTREnable;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	7a3b      	ldrb	r3, [r7, #8]
 8001f78:	f362 1386 	bfi	r3, r2, #6, #1
 8001f7c:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	0052      	lsls	r2, r2, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	3350      	adds	r3, #80	; 0x50
 8001f8e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	89b9      	ldrh	r1, [r7, #12]
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fa68 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8001fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	00600400 	.word	0x00600400

08001fb0 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b085      	sub	sp, #20
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8001fb8:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8001fba:	60fb      	str	r3, [r7, #12]

    config->RTREnable = ciFifoCon.txBF.RTREnable;
 8001fbc:	7b3b      	ldrb	r3, [r7, #12]
 8001fbe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001fc2:	b2d9      	uxtb	r1, r3
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	7813      	ldrb	r3, [r2, #0]
 8001fc8:	f361 0300 	bfi	r3, r1, #0, #1
 8001fcc:	7013      	strb	r3, [r2, #0]
    config->TxPriority = ciFifoCon.txBF.TxPriority;
 8001fce:	7bbb      	ldrb	r3, [r7, #14]
 8001fd0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001fd4:	b2d9      	uxtb	r1, r3
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	7813      	ldrb	r3, [r2, #0]
 8001fda:	f361 0345 	bfi	r3, r1, #1, #5
 8001fde:	7013      	strb	r3, [r2, #0]
    config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 8001fe0:	7bbb      	ldrb	r3, [r7, #14]
 8001fe2:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8001fe6:	b2d9      	uxtb	r1, r3
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	7813      	ldrb	r3, [r2, #0]
 8001fec:	f361 1387 	bfi	r3, r1, #6, #2
 8001ff0:	7013      	strb	r3, [r2, #0]
    config->FifoSize = ciFifoCon.txBF.FifoSize;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8001ff8:	b2d9      	uxtb	r1, r3
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	7853      	ldrb	r3, [r2, #1]
 8001ffe:	f361 0304 	bfi	r3, r1, #0, #5
 8002002:	7053      	strb	r3, [r2, #1]
    config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800200a:	b2d9      	uxtb	r1, r3
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	7853      	ldrb	r3, [r2, #1]
 8002010:	f361 1347 	bfi	r3, r1, #5, #3
 8002014:	7053      	strb	r3, [r2, #1]

    return 0;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	00600400 	.word	0x00600400

08002028 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b0a0      	sub	sp, #128	; 0x80
 800202c:	af00      	add	r7, sp, #0
 800202e:	60ba      	str	r2, [r7, #8]
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4603      	mov	r3, r0
 8002034:	73fb      	strb	r3, [r7, #15]
 8002036:	460b      	mov	r3, r1
 8002038:	73bb      	strb	r3, [r7, #14]
    uint32_t fifoReg[3];
    uint32_t dataBytesInObject;
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	0052      	lsls	r2, r2, #1
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	b29b      	uxth	r3, r3
 800204e:	3350      	adds	r3, #80	; 0x50
 8002050:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002054:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002058:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 800205c:	7bf8      	ldrb	r0, [r7, #15]
 800205e:	2303      	movs	r3, #3
 8002060:	f7ff fd38 	bl	8001ad4 <DRV_CANFDSPI_ReadWordArray>
 8002064:	4603      	mov	r3, r0
 8002066:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 800206a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
        return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e0c5      	b.n	8002204 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that it is a transmit buffer
    ciFifoCon.word = fifoReg[0];
 8002078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800207a:	667b      	str	r3, [r7, #100]	; 0x64
    if (!ciFifoCon.txBF.TxEnable) {
 800207c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002080:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d102      	bne.n	8002090 <DRV_CANFDSPI_TransmitChannelLoad+0x68>
        return -2;
 800208a:	f06f 0301 	mvn.w	r3, #1
 800208e:	e0b9      	b.n	8002204 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Check that DLC is big enough for data
    dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	791b      	ldrb	r3, [r3, #4]
 8002094:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4618      	mov	r0, r3
 800209c:	f001 fc3a 	bl	8003914 <DRV_CANFDSPI_DlcToDataBytes>
 80020a0:	6778      	str	r0, [r7, #116]	; 0x74
    if (dataBytesInObject < txdNumBytes) {
 80020a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80020a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d202      	bcs.n	80020b2 <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
        return -3;
 80020ac:	f06f 0302 	mvn.w	r3, #2
 80020b0:	e0a8      	b.n	8002204 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Get status
    ciFifoSta.word = fifoReg[1];
 80020b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020b4:	663b      	str	r3, [r7, #96]	; 0x60

    // Get address
    ciFifoUa.word = fifoReg[2];
 80020b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b8:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 80020ba:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
    a += cRAMADDR_START;
 80020c8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80020cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

    uint8_t txBuffer[MAX_MSG_SIZE];

    txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	743b      	strb	r3, [r7, #16]
    txBuffer[1] = txObj->byte[1];
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	785b      	ldrb	r3, [r3, #1]
 80020de:	747b      	strb	r3, [r7, #17]
    txBuffer[2] = txObj->byte[2];
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	789b      	ldrb	r3, [r3, #2]
 80020e4:	74bb      	strb	r3, [r7, #18]
    txBuffer[3] = txObj->byte[3];
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	78db      	ldrb	r3, [r3, #3]
 80020ea:	74fb      	strb	r3, [r7, #19]

    txBuffer[4] = txObj->byte[4];
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	791b      	ldrb	r3, [r3, #4]
 80020f0:	753b      	strb	r3, [r7, #20]
    txBuffer[5] = txObj->byte[5];
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	795b      	ldrb	r3, [r3, #5]
 80020f6:	757b      	strb	r3, [r7, #21]
    txBuffer[6] = txObj->byte[6];
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	799b      	ldrb	r3, [r3, #6]
 80020fc:	75bb      	strb	r3, [r7, #22]
    txBuffer[7] = txObj->byte[7];
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	79db      	ldrb	r3, [r3, #7]
 8002102:	75fb      	strb	r3, [r7, #23]

    uint8_t i;
    for (i = 0; i < txdNumBytes; i++) {
 8002104:	2300      	movs	r3, #0
 8002106:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800210a:	e010      	b.n	800212e <DRV_CANFDSPI_TransmitChannelLoad+0x106>
        txBuffer[i + 8] = txd[i];
 800210c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	441a      	add	r2, r3
 8002114:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002118:	3308      	adds	r3, #8
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	3380      	adds	r3, #128	; 0x80
 800211e:	443b      	add	r3, r7
 8002120:	f803 2c70 	strb.w	r2, [r3, #-112]
    for (i = 0; i < txdNumBytes; i++) {
 8002124:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002128:	3301      	adds	r3, #1
 800212a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800212e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002132:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002136:	429a      	cmp	r2, r3
 8002138:	d8e8      	bhi.n	800210c <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
    }

    // Make sure we write a multiple of 4 bytes to RAM
    uint16_t n = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
    uint8_t j = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

    if (txdNumBytes % 4) {
 8002146:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d02b      	beq.n	80021aa <DRV_CANFDSPI_TransmitChannelLoad+0x182>
        // Need to add bytes
        n = 4 - (txdNumBytes % 4);
 8002152:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002156:	b29b      	uxth	r3, r3
 8002158:	f003 0303 	and.w	r3, r3, #3
 800215c:	b29b      	uxth	r3, r3
 800215e:	f1c3 0304 	rsb	r3, r3, #4
 8002162:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        i = txdNumBytes + 8;
 8002166:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3308      	adds	r3, #8
 800216e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

        for (j = 0; j < n; j++) {
 8002172:	2300      	movs	r3, #0
 8002174:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002178:	e010      	b.n	800219c <DRV_CANFDSPI_TransmitChannelLoad+0x174>
            txBuffer[i + 8 + j] = 0;
 800217a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800217e:	f103 0208 	add.w	r2, r3, #8
 8002182:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002186:	4413      	add	r3, r2
 8002188:	3380      	adds	r3, #128	; 0x80
 800218a:	443b      	add	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	f803 2c70 	strb.w	r2, [r3, #-112]
        for (j = 0; j < n; j++) {
 8002192:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002196:	3301      	adds	r3, #1
 8002198:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800219c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d8e7      	bhi.n	800217a <DRV_CANFDSPI_TransmitChannelLoad+0x152>
        }
    }

    spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 80021aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80021b4:	4413      	add	r3, r2
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	3308      	adds	r3, #8
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	f107 0210 	add.w	r2, r7, #16
 80021c0:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 80021c4:	7bf8      	ldrb	r0, [r7, #15]
 80021c6:	f7ff fbe1 	bl	800198c <DRV_CANFDSPI_WriteByteArray>
 80021ca:	4603      	mov	r3, r0
 80021cc:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 80021d0:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
        return -4;
 80021d8:	f06f 0303 	mvn.w	r3, #3
 80021dc:	e012      	b.n	8002204 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    // Set UINC and TXREQ
    spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 80021de:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 80021e2:	7bb9      	ldrb	r1, [r7, #14]
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f83a 	bl	8002260 <DRV_CANFDSPI_TransmitChannelUpdate>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
    if (spiTransferError) {
 80021f2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
        return -5;
 80021fa:	f06f 0304 	mvn.w	r3, #4
 80021fe:	e001      	b.n	8002204 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
    }

    return spiTransferError;
 8002200:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 8002204:	4618      	mov	r0, r3
 8002206:	3780      	adds	r7, #128	; 0x80
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <DRV_CANFDSPI_TransmitChannelFlush>:

int8_t DRV_CANFDSPI_TransmitChannelFlush(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	460a      	mov	r2, r1
 8002216:	71fb      	strb	r3, [r7, #7]
 8002218:	4613      	mov	r3, r2
 800221a:	71bb      	strb	r3, [r7, #6]
    uint8_t d = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	81bb      	strh	r3, [r7, #12]
    int8_t spiTransferError = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	72fb      	strb	r3, [r7, #11]

    // Address of TXREQ
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002228:	79bb      	ldrb	r3, [r7, #6]
 800222a:	b29b      	uxth	r3, r3
 800222c:	461a      	mov	r2, r3
 800222e:	0052      	lsls	r2, r2, #1
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	b29b      	uxth	r3, r3
 8002236:	3350      	adds	r3, #80	; 0x50
 8002238:	81bb      	strh	r3, [r7, #12]
    a += 1;
 800223a:	89bb      	ldrh	r3, [r7, #12]
 800223c:	3301      	adds	r3, #1
 800223e:	81bb      	strh	r3, [r7, #12]

    // Set TXREQ
    d = 0x02;
 8002240:	2302      	movs	r3, #2
 8002242:	73fb      	strb	r3, [r7, #15]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, d);
 8002244:	7bfa      	ldrb	r2, [r7, #15]
 8002246:	89b9      	ldrh	r1, [r7, #12]
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ffda 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 8002250:	4603      	mov	r3, r0
 8002252:	72fb      	strb	r3, [r7, #11]

    return spiTransferError;
 8002254:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <DRV_CANFDSPI_TransmitChannelUpdate>:
    return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
 800226a:	460b      	mov	r3, r1
 800226c:	71bb      	strb	r3, [r7, #6]
 800226e:	4613      	mov	r3, r2
 8002270:	717b      	strb	r3, [r7, #5]
    uint16_t a;
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	0052      	lsls	r2, r2, #1
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	b29b      	uxth	r3, r3
 8002284:	3351      	adds	r3, #81	; 0x51
 8002286:	81bb      	strh	r3, [r7, #12]
    ciFifoCon.word = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	60bb      	str	r3, [r7, #8]
    ciFifoCon.txBF.UINC = 1;
 800228c:	7a7b      	ldrb	r3, [r7, #9]
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	727b      	strb	r3, [r7, #9]

    // Set TXREQ
    if (flush) {
 8002294:	797b      	ldrb	r3, [r7, #5]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
        ciFifoCon.txBF.TxRequest = 1;
 800229a:	7a7b      	ldrb	r3, [r7, #9]
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	727b      	strb	r3, [r7, #9]
    }

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80022a2:	7a7a      	ldrb	r2, [r7, #9]
 80022a4:	89b9      	ldrh	r1, [r7, #12]
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7fe ffab 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 80022ae:	4603      	mov	r3, r0
 80022b0:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
        return -1;
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	e001      	b.n	80022c4 <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
    }

    return spiTransferError;
 80022c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	603a      	str	r2, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
 80022d8:	460b      	mov	r3, r1
 80022da:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiFLTOBJ fObj;
    int8_t spiTransferError = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	73fb      	strb	r3, [r7, #15]

    // Setup
    fObj.word = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
    fObj.bF = *id;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 80022ea:	79bb      	ldrb	r3, [r7, #6]
 80022ec:	333e      	adds	r3, #62	; 0x3e
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	89b9      	ldrh	r1, [r7, #12]
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f8b6 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8002300:	4603      	mov	r3, r0
 8002302:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	603a      	str	r2, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
 800231c:	460b      	mov	r3, r1
 800231e:	71bb      	strb	r3, [r7, #6]
    uint16_t a;
    REG_CiMASK mObj;
    int8_t spiTransferError = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	73fb      	strb	r3, [r7, #15]

    // Setup
    mObj.word = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	60bb      	str	r3, [r7, #8]
    mObj.bF = *mask;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 800232e:	79bb      	ldrb	r3, [r7, #6]
 8002330:	b29b      	uxth	r3, r3
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	b29b      	uxth	r3, r3
 8002336:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800233a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	89b9      	ldrh	r1, [r7, #12]
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff f892 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 800234c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	4604      	mov	r4, r0
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4623      	mov	r3, r4
 8002368:	71fb      	strb	r3, [r7, #7]
 800236a:	4603      	mov	r3, r0
 800236c:	71bb      	strb	r3, [r7, #6]
 800236e:	460b      	mov	r3, r1
 8002370:	717b      	strb	r3, [r7, #5]
 8002372:	4613      	mov	r3, r2
 8002374:	713b      	strb	r3, [r7, #4]
    uint16_t a;
    REG_CiFLTCON_BYTE fCtrl;
    int8_t spiTransferError = 0;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]

    // Enable
    if (enable) {
 800237a:	793b      	ldrb	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <DRV_CANFDSPI_FilterToFifoLink+0x32>
        fCtrl.bF.Enable = 1;
 8002380:	7a3b      	ldrb	r3, [r7, #8]
 8002382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002386:	723b      	strb	r3, [r7, #8]
 8002388:	e003      	b.n	8002392 <DRV_CANFDSPI_FilterToFifoLink+0x3a>
    } else {
        fCtrl.bF.Enable = 0;
 800238a:	7a3b      	ldrb	r3, [r7, #8]
 800238c:	f36f 13c7 	bfc	r3, #7, #1
 8002390:	723b      	strb	r3, [r7, #8]
    }

    // Link
    fCtrl.bF.BufferPointer = channel;
 8002392:	797b      	ldrb	r3, [r7, #5]
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	b2da      	uxtb	r2, r3
 800239a:	7a3b      	ldrb	r3, [r7, #8]
 800239c:	f362 0304 	bfi	r3, r2, #0, #5
 80023a0:	723b      	strb	r3, [r7, #8]
    a = cREGADDR_CiFLTCON + filter;
 80023a2:	79bb      	ldrb	r3, [r7, #6]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80023aa:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 80023ac:	7a3a      	ldrb	r2, [r7, #8]
 80023ae:	89b9      	ldrh	r1, [r7, #12]
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe ff26 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 80023bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3714      	adds	r7, #20
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd90      	pop	{r4, r7, pc}

080023c8 <DRV_CANFDSPI_ReceiveChannelConfigure>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	603a      	str	r2, [r7, #0]
 80023d2:	71fb      	strb	r3, [r7, #7]
 80023d4:	460b      	mov	r3, r1
 80023d6:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) {
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d102      	bne.n	80023ec <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
        return -100;
 80023e6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80023ea:	e033      	b.n	8002454 <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
    }

    // Setup FIFO
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 80023ee:	60bb      	str	r3, [r7, #8]

    ciFifoCon.rxBF.TxEnable = 0;
 80023f0:	7a3b      	ldrb	r3, [r7, #8]
 80023f2:	f36f 13c7 	bfc	r3, #7, #1
 80023f6:	723b      	strb	r3, [r7, #8]
    ciFifoCon.rxBF.FifoSize = config->FifoSize;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002400:	b2da      	uxtb	r2, r3
 8002402:	7afb      	ldrb	r3, [r7, #11]
 8002404:	f362 0304 	bfi	r3, r2, #0, #5
 8002408:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8002412:	b2da      	uxtb	r2, r3
 8002414:	7afb      	ldrb	r3, [r7, #11]
 8002416:	f362 1347 	bfi	r3, r2, #5, #3
 800241a:	72fb      	strb	r3, [r7, #11]
    ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	7a3b      	ldrb	r3, [r7, #8]
 8002428:	f362 1345 	bfi	r3, r2, #5, #1
 800242c:	723b      	strb	r3, [r7, #8]

    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800242e:	79bb      	ldrb	r3, [r7, #6]
 8002430:	b29b      	uxth	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	0052      	lsls	r2, r2, #1
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	b29b      	uxth	r3, r3
 800243c:	3350      	adds	r3, #80	; 0x50
 800243e:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	89b9      	ldrh	r1, [r7, #12]
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff f810 	bl	800146c <DRV_CANFDSPI_WriteWord>
 800244c:	4603      	mov	r3, r0
 800244e:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002450:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	00600400 	.word	0x00600400

08002460 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = canFifoResetValues[0];
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 800246a:	60fb      	str	r3, [r7, #12]

    config->FifoSize = ciFifoCon.rxBF.FifoSize;
 800246c:	7bfb      	ldrb	r3, [r7, #15]
 800246e:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002472:	b2d9      	uxtb	r1, r3
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	7813      	ldrb	r3, [r2, #0]
 8002478:	f361 0345 	bfi	r3, r1, #1, #5
 800247c:	7013      	strb	r3, [r2, #0]
    config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8002484:	b2d9      	uxtb	r1, r3
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	8813      	ldrh	r3, [r2, #0]
 800248a:	f361 1388 	bfi	r3, r1, #6, #3
 800248e:	8013      	strh	r3, [r2, #0]
    config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 8002490:	7b3b      	ldrb	r3, [r7, #12]
 8002492:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002496:	b2d9      	uxtb	r1, r3
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	7813      	ldrb	r3, [r2, #0]
 800249c:	f361 0300 	bfi	r3, r1, #0, #1
 80024a0:	7013      	strb	r3, [r2, #0]

    return 0;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	00600400 	.word	0x00600400

080024b4 <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0a0      	sub	sp, #128	; 0x80
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60ba      	str	r2, [r7, #8]
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	4603      	mov	r3, r0
 80024c0:	73fb      	strb	r3, [r7, #15]
 80024c2:	460b      	mov	r3, r1
 80024c4:	73bb      	strb	r3, [r7, #14]
    uint8_t n = 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint8_t i = 0;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    uint16_t a;
    uint32_t fifoReg[3];
    REG_CiFIFOCON ciFifoCon;
    __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
    REG_CiFIFOUA ciFifoUa;
    int8_t spiTransferError = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

    // Get FIFO registers
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80024d8:	7bbb      	ldrb	r3, [r7, #14]
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	0052      	lsls	r2, r2, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	3350      	adds	r3, #80	; 0x50
 80024e8:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 80024ec:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80024f0:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80024f4:	7bf8      	ldrb	r0, [r7, #15]
 80024f6:	2303      	movs	r3, #3
 80024f8:	f7ff faec 	bl	8001ad4 <DRV_CANFDSPI_ReadWordArray>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 8002502:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
        return -1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295
 800250e:	e0cd      	b.n	80026ac <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Check that it is a receive buffer
    ciFifoCon.word = fifoReg[0];
 8002510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002512:	66bb      	str	r3, [r7, #104]	; 0x68
    if (ciFifoCon.txBF.TxEnable) {
 8002514:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002518:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
        return -2;
 8002522:	f06f 0301 	mvn.w	r3, #1
 8002526:	e0c1      	b.n	80026ac <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Get Status
    ciFifoSta.word = fifoReg[1];
 8002528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800252a:	667b      	str	r3, [r7, #100]	; 0x64

    // Get address
    ciFifoUa.word = fifoReg[2];
 800252c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800252e:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
    a = 4 * ciFifoUa.bF.UserAddress;
#else
    a = ciFifoUa.bF.UserAddress;
 8002530:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	b29b      	uxth	r3, r3
 800253a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
    a += cRAMADDR_START;
 800253e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002546:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

    // Number of bytes to read
    n = nBytes + 8; // Add 8 header bytes
 800254a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800254e:	3308      	adds	r3, #8
 8002550:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002554:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d004      	beq.n	800256c <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
        n += 4; // Add 4 time stamp bytes
 8002562:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002566:	3304      	adds	r3, #4
 8002568:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Make sure we read a multiple of 4 bytes from RAM
    if (n % 4) {
 800256c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
        n = n + 4 - (n % 4);
 800257a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800257e:	f023 0303 	bic.w	r3, r3, #3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3304      	adds	r3, #4
 8002586:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    // Read rxObj using one access
    uint8_t ba[MAX_MSG_SIZE];

    if (n > MAX_MSG_SIZE) {
 800258a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800258e:	2b4c      	cmp	r3, #76	; 0x4c
 8002590:	d902      	bls.n	8002598 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
        n = MAX_MSG_SIZE;
 8002592:	234c      	movs	r3, #76	; 0x4c
 8002594:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    }

    spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 8002598:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800259c:	b29b      	uxth	r3, r3
 800259e:	f107 0214 	add.w	r2, r7, #20
 80025a2:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80025a6:	7bf8      	ldrb	r0, [r7, #15]
 80025a8:	f7ff f93e 	bl	8001828 <DRV_CANFDSPI_ReadByteArray>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 80025b2:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
        return -3;
 80025ba:	f06f 0302 	mvn.w	r3, #2
 80025be:	e075      	b.n	80026ac <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    // Assign message header
    REG_t myReg;

    myReg.byte[0] = ba[0];
 80025c0:	7d3b      	ldrb	r3, [r7, #20]
 80025c2:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[1];
 80025c4:	7d7b      	ldrb	r3, [r7, #21]
 80025c6:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[2];
 80025c8:	7dbb      	ldrb	r3, [r7, #22]
 80025ca:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[3];
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	74fb      	strb	r3, [r7, #19]
    rxObj->word[0] = myReg.word;
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	601a      	str	r2, [r3, #0]

    myReg.byte[0] = ba[4];
 80025d6:	7e3b      	ldrb	r3, [r7, #24]
 80025d8:	743b      	strb	r3, [r7, #16]
    myReg.byte[1] = ba[5];
 80025da:	7e7b      	ldrb	r3, [r7, #25]
 80025dc:	747b      	strb	r3, [r7, #17]
    myReg.byte[2] = ba[6];
 80025de:	7ebb      	ldrb	r3, [r7, #26]
 80025e0:	74bb      	strb	r3, [r7, #18]
    myReg.byte[3] = ba[7];
 80025e2:	7efb      	ldrb	r3, [r7, #27]
 80025e4:	74fb      	strb	r3, [r7, #19]
    rxObj->word[1] = myReg.word;
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	605a      	str	r2, [r3, #4]

    if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80025ec:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d027      	beq.n	800264a <DRV_CANFDSPI_ReceiveMessageGet+0x196>
        myReg.byte[0] = ba[8];
 80025fa:	7f3b      	ldrb	r3, [r7, #28]
 80025fc:	743b      	strb	r3, [r7, #16]
        myReg.byte[1] = ba[9];
 80025fe:	7f7b      	ldrb	r3, [r7, #29]
 8002600:	747b      	strb	r3, [r7, #17]
        myReg.byte[2] = ba[10];
 8002602:	7fbb      	ldrb	r3, [r7, #30]
 8002604:	74bb      	strb	r3, [r7, #18]
        myReg.byte[3] = ba[11];
 8002606:	7ffb      	ldrb	r3, [r7, #31]
 8002608:	74fb      	strb	r3, [r7, #19]
        rxObj->word[2] = myReg.word;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002610:	2300      	movs	r3, #0
 8002612:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002616:	e011      	b.n	800263c <DRV_CANFDSPI_ReceiveMessageGet+0x188>
            rxd[i] = ba[i + 12];
 8002618:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800261c:	f103 020c 	add.w	r2, r3, #12
 8002620:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	440b      	add	r3, r1
 8002628:	3280      	adds	r2, #128	; 0x80
 800262a:	443a      	add	r2, r7
 800262c:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002630:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8002632:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002636:	3301      	adds	r3, #1
 8002638:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800263c:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002640:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002644:	429a      	cmp	r2, r3
 8002646:	d3e7      	bcc.n	8002618 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 8002648:	e01e      	b.n	8002688 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
        }
    } else {
        rxObj->word[2] = 0;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2200      	movs	r2, #0
 800264e:	609a      	str	r2, [r3, #8]

        // Assign message data
        for (i = 0; i < nBytes; i++) {
 8002650:	2300      	movs	r3, #0
 8002652:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002656:	e011      	b.n	800267c <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
            rxd[i] = ba[i + 8];
 8002658:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800265c:	f103 0208 	add.w	r2, r3, #8
 8002660:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	440b      	add	r3, r1
 8002668:	3280      	adds	r2, #128	; 0x80
 800266a:	443a      	add	r2, r7
 800266c:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002670:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < nBytes; i++) {
 8002672:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002676:	3301      	adds	r3, #1
 8002678:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800267c:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002680:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8002684:	429a      	cmp	r2, r3
 8002686:	d3e7      	bcc.n	8002658 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
        }
    }

    // UINC channel
    spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 8002688:	7bba      	ldrb	r2, [r7, #14]
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f810 	bl	80026b4 <DRV_CANFDSPI_ReceiveChannelUpdate>
 8002694:	4603      	mov	r3, r0
 8002696:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
    if (spiTransferError) {
 800269a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
        return -4;
 80026a2:	f06f 0303 	mvn.w	r3, #3
 80026a6:	e001      	b.n	80026ac <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
    }

    return spiTransferError;
 80026a8:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3780      	adds	r7, #128	; 0x80
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <DRV_CANFDSPI_ReceiveChannelUpdate>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	460a      	mov	r2, r1
 80026be:	71fb      	strb	r3, [r7, #7]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71bb      	strb	r3, [r7, #6]
    uint16_t a = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	81fb      	strh	r3, [r7, #14]
    REG_CiFIFOCON ciFifoCon;
    int8_t spiTransferError = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	737b      	strb	r3, [r7, #13]
    ciFifoCon.word = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]

    // Set UINC
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80026d0:	79bb      	ldrb	r3, [r7, #6]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	4413      	add	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	b29b      	uxth	r3, r3
 80026de:	3351      	adds	r3, #81	; 0x51
 80026e0:	81fb      	strh	r3, [r7, #14]
    ciFifoCon.rxBF.UINC = 1;
 80026e2:	7a7b      	ldrb	r3, [r7, #9]
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	727b      	strb	r3, [r7, #9]

    // Write byte
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80026ea:	7a7a      	ldrb	r2, [r7, #9]
 80026ec:	89f9      	ldrh	r1, [r7, #14]
 80026ee:	79fb      	ldrb	r3, [r7, #7]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fd87 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 80026f6:	4603      	mov	r3, r0
 80026f8:	737b      	strb	r3, [r7, #13]

    return spiTransferError;
 80026fa:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	460a      	mov	r2, r1
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	4613      	mov	r3, r2
 8002714:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002716:	2300      	movs	r3, #0
 8002718:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 800271e:	231e      	movs	r3, #30
 8002720:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 8002726:	f107 0208 	add.w	r2, r7, #8
 800272a:	89b9      	ldrh	r1, [r7, #12]
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe ff36 	bl	80015a0 <DRV_CANFDSPI_ReadHalfWord>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002740:	f04f 33ff 	mov.w	r3, #4294967295
 8002744:	e01b      	b.n	800277e <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 8002746:	893b      	ldrh	r3, [r7, #8]
 8002748:	b21a      	sxth	r2, r3
 800274a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800274e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002752:	b21b      	sxth	r3, r3
 8002754:	4313      	orrs	r3, r2
 8002756:	b21b      	sxth	r3, r3
 8002758:	b29b      	uxth	r3, r3
 800275a:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 800275c:	893a      	ldrh	r2, [r7, #8]
 800275e:	89b9      	ldrh	r1, [r7, #12]
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fe ffc6 	bl	80016f4 <DRV_CANFDSPI_WriteHalfWord>
 8002768:	4603      	mov	r3, r0
 800276a:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 8002774:	f06f 0301 	mvn.w	r3, #1
 8002778:	e001      	b.n	800277e <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 800277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	603a      	str	r2, [r7, #0]
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	460b      	mov	r3, r1
 8002794:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800279a:	2300      	movs	r3, #0
 800279c:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 80027a2:	79bb      	ldrb	r3, [r7, #6]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	0052      	lsls	r2, r2, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3354      	adds	r3, #84	; 0x54
 80027b2:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 80027b4:	f107 0208 	add.w	r2, r7, #8
 80027b8:	89b9      	ldrh	r1, [r7, #12]
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe fc93 	bl	80010e8 <DRV_CANFDSPI_ReadByte>
 80027c2:	4603      	mov	r3, r0
 80027c4:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 80027ce:	f04f 33ff 	mov.w	r3, #4294967295
 80027d2:	e007      	b.n	80027e4 <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 80027d4:	7a3b      	ldrb	r3, [r7, #8]
 80027d6:	f003 0317 	and.w	r3, r3, #23
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 80027e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	603a      	str	r2, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
 80027f8:	460b      	mov	r3, r1
 80027fa:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 800280a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 800280e:	e022      	b.n	8002856 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002814:	79bb      	ldrb	r3, [r7, #6]
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	0052      	lsls	r2, r2, #1
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	b29b      	uxth	r3, r3
 8002822:	3354      	adds	r3, #84	; 0x54
 8002824:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8002826:	f107 0208 	add.w	r2, r7, #8
 800282a:	89b9      	ldrh	r1, [r7, #12]
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe fc5a 	bl	80010e8 <DRV_CANFDSPI_ReadByte>
 8002834:	4603      	mov	r3, r0
 8002836:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
 8002844:	e007      	b.n	8002856 <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 8002846:	7a3b      	ldrb	r3, [r7, #8]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	b2da      	uxtb	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	4603      	mov	r3, r0
 8002866:	71fb      	strb	r3, [r7, #7]
 8002868:	460b      	mov	r3, r1
 800286a:	71bb      	strb	r3, [r7, #6]
 800286c:	4613      	mov	r3, r2
 800286e:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002878:	79bb      	ldrb	r3, [r7, #6]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d102      	bne.n	8002884 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 800287e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002882:	e036      	b.n	80028f2 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002884:	79bb      	ldrb	r3, [r7, #6]
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	0052      	lsls	r2, r2, #1
 800288c:	4413      	add	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	b29b      	uxth	r3, r3
 8002892:	3350      	adds	r3, #80	; 0x50
 8002894:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 800289a:	f107 0208 	add.w	r2, r7, #8
 800289e:	89b9      	ldrh	r1, [r7, #12]
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe fc20 	bl	80010e8 <DRV_CANFDSPI_ReadByte>
 80028a8:	4603      	mov	r3, r0
 80028aa:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	e01b      	b.n	80028f2 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 80028ba:	7a3b      	ldrb	r3, [r7, #8]
 80028bc:	b25a      	sxtb	r2, r3
 80028be:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	b25b      	sxtb	r3, r3
 80028c8:	4313      	orrs	r3, r2
 80028ca:	b25b      	sxtb	r3, r3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 80028d0:	7a3a      	ldrb	r2, [r7, #8]
 80028d2:	89b9      	ldrh	r1, [r7, #12]
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fc94 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80028e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d002      	beq.n	80028ee <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 80028e8:	f06f 0301 	mvn.w	r3, #1
 80028ec:	e001      	b.n	80028f2 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 80028ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4603      	mov	r3, r0
 8002908:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8002912:	2334      	movs	r3, #52	; 0x34
 8002914:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 800291a:	f107 0210 	add.w	r2, r7, #16
 800291e:	8ab9      	ldrh	r1, [r7, #20]
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe fcfa 	bl	800131c <DRV_CANFDSPI_ReadWord>
 8002928:	4603      	mov	r3, r0
 800292a:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 800292c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8002934:	f04f 33ff 	mov.w	r3, #4294967295
 8002938:	e00d      	b.n	8002956 <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 800293a:	7c7a      	ldrb	r2, [r7, #17]
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002940:	7c3a      	ldrb	r2, [r7, #16]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 8002946:	7cbb      	ldrb	r3, [r7, #18]
 8002948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294c:	b2da      	uxtb	r2, r3
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002952:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b084      	sub	sp, #16
 8002962:	af00      	add	r7, sp, #0
 8002964:	4603      	mov	r3, r0
 8002966:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8002970:	f107 020e 	add.w	r2, r7, #14
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f640 610c 	movw	r1, #3596	; 0xe0c
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fbb4 	bl	80010e8 <DRV_CANFDSPI_ReadByte>
 8002980:	4603      	mov	r3, r0
 8002982:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 800298c:	f04f 33ff 	mov.w	r3, #4294967295
 8002990:	e015      	b.n	80029be <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8002992:	7bbb      	ldrb	r3, [r7, #14]
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 800299c:	7bba      	ldrb	r2, [r7, #14]
 800299e:	79fb      	ldrb	r3, [r7, #7]
 80029a0:	f640 610c 	movw	r1, #3596	; 0xe0c
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe fc2d 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 80029aa:	4603      	mov	r3, r0
 80029ac:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80029ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d002      	beq.n	80029bc <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 80029b6:	f06f 0301 	mvn.w	r3, #1
 80029ba:	e000      	b.n	80029be <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b090      	sub	sp, #64	; 0x40
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	4603      	mov	r3, r0
 80029ce:	460a      	mov	r2, r1
 80029d0:	71fb      	strb	r3, [r7, #7]
 80029d2:	4613      	mov	r3, r2
 80029d4:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80029dc:	2300      	movs	r3, #0
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e0:	e008      	b.n	80029f4 <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 80029e2:	f107 0208 	add.w	r2, r7, #8
 80029e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e8:	4413      	add	r3, r2
 80029ea:	79ba      	ldrb	r2, [r7, #6]
 80029ec:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 80029ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f0:	3301      	adds	r3, #1
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029f6:	2b2f      	cmp	r3, #47	; 0x2f
 80029f8:	d9f3      	bls.n	80029e2 <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 80029fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fe:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a00:	2300      	movs	r3, #0
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a04:	e016      	b.n	8002a34 <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8002a06:	f107 0208 	add.w	r2, r7, #8
 8002a0a:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002a0c:	79f8      	ldrb	r0, [r7, #7]
 8002a0e:	2330      	movs	r3, #48	; 0x30
 8002a10:	f7fe ffbc 	bl	800198c <DRV_CANFDSPI_WriteByteArray>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8002a1a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e00a      	b.n	8002a3e <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002a28:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002a2a:	3330      	adds	r3, #48	; 0x30
 8002a2c:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a30:	3301      	adds	r3, #1
 8002a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a36:	2b29      	cmp	r3, #41	; 0x29
 8002a38:	d9e5      	bls.n	8002a06 <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002a3a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3740      	adds	r7, #64	; 0x40
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002a46:	b590      	push	{r4, r7, lr}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	4608      	mov	r0, r1
 8002a50:	4611      	mov	r1, r2
 8002a52:	461a      	mov	r2, r3
 8002a54:	4623      	mov	r3, r4
 8002a56:	71fb      	strb	r3, [r7, #7]
 8002a58:	4603      	mov	r3, r0
 8002a5a:	71bb      	strb	r3, [r7, #6]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	717b      	strb	r3, [r7, #5]
 8002a60:	4613      	mov	r3, r2
 8002a62:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8002a68:	793b      	ldrb	r3, [r7, #4]
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d036      	beq.n	8002adc <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	dc4c      	bgt.n	8002b0c <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d002      	beq.n	8002a7c <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d018      	beq.n	8002aac <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8002a7a:	e047      	b.n	8002b0c <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002a7c:	79ba      	ldrb	r2, [r7, #6]
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f84c 	bl	8002b20 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a98:	e03d      	b.n	8002b16 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8002a9a:	797a      	ldrb	r2, [r7, #5]
 8002a9c:	79b9      	ldrb	r1, [r7, #6]
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 f8c3 	bl	8002c2c <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	73fb      	strb	r3, [r7, #15]
            break;
 8002aaa:	e032      	b.n	8002b12 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002aac:	79ba      	ldrb	r2, [r7, #6]
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	4611      	mov	r1, r2
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 faf2 	bl	800309c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac8:	e025      	b.n	8002b16 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002aca:	797a      	ldrb	r2, [r7, #5]
 8002acc:	79b9      	ldrb	r1, [r7, #6]
 8002ace:	79fb      	ldrb	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f000 fb6f 	bl	80031b4 <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	73fb      	strb	r3, [r7, #15]
            break;
 8002ada:	e01a      	b.n	8002b12 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002adc:	79ba      	ldrb	r2, [r7, #6]
 8002ade:	79fb      	ldrb	r3, [r7, #7]
 8002ae0:	4611      	mov	r1, r2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 fd10 	bl	8003508 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af8:	e00d      	b.n	8002b16 <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002afa:	797a      	ldrb	r2, [r7, #5]
 8002afc:	79b9      	ldrb	r1, [r7, #6]
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fd8d 	bl	8003620 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002b06:	4603      	mov	r3, r0
 8002b08:	73fb      	strb	r3, [r7, #15]
            break;
 8002b0a:	e002      	b.n	8002b12 <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002b0c:	23ff      	movs	r3, #255	; 0xff
 8002b0e:	73fb      	strb	r3, [r7, #15]
            break;
 8002b10:	bf00      	nop
    }

    return spiTransferError;
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd90      	pop	{r4, r7, pc}
	...

08002b20 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	460a      	mov	r2, r1
 8002b2a:	71fb      	strb	r3, [r7, #7]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002b34:	4b3c      	ldr	r3, [pc, #240]	; (8002c28 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002b36:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002b38:	79bb      	ldrb	r3, [r7, #6]
 8002b3a:	2b11      	cmp	r3, #17
 8002b3c:	d862      	bhi.n	8002c04 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b8d 	.word	0x08002b8d
 8002b48:	08002b8d 	.word	0x08002b8d
 8002b4c:	08002b8d 	.word	0x08002b8d
 8002b50:	08002b8d 	.word	0x08002b8d
 8002b54:	08002b8d 	.word	0x08002b8d
 8002b58:	08002b8d 	.word	0x08002b8d
 8002b5c:	08002b8d 	.word	0x08002b8d
 8002b60:	08002b8d 	.word	0x08002b8d
 8002b64:	08002bab 	.word	0x08002bab
 8002b68:	08002bab 	.word	0x08002bab
 8002b6c:	08002bab 	.word	0x08002bab
 8002b70:	08002bab 	.word	0x08002bab
 8002b74:	08002bab 	.word	0x08002bab
 8002b78:	08002bab 	.word	0x08002bab
 8002b7c:	08002bab 	.word	0x08002bab
 8002b80:	08002bc9 	.word	0x08002bc9
 8002b84:	08002bc9 	.word	0x08002bc9
 8002b88:	08002be7 	.word	0x08002be7
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002b90:	233e      	movs	r3, #62	; 0x3e
 8002b92:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002b94:	7a7b      	ldrb	r3, [r7, #9]
 8002b96:	220f      	movs	r2, #15
 8002b98:	f362 0306 	bfi	r3, r2, #0, #7
 8002b9c:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002b9e:	7a3b      	ldrb	r3, [r7, #8]
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	f362 0306 	bfi	r3, r2, #0, #7
 8002ba6:	723b      	strb	r3, [r7, #8]
            break;
 8002ba8:	e02f      	b.n	8002c0a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002baa:	2300      	movs	r3, #0
 8002bac:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002bae:	237e      	movs	r3, #126	; 0x7e
 8002bb0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002bb2:	7a7b      	ldrb	r3, [r7, #9]
 8002bb4:	221f      	movs	r2, #31
 8002bb6:	f362 0306 	bfi	r3, r2, #0, #7
 8002bba:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002bbc:	7a3b      	ldrb	r3, [r7, #8]
 8002bbe:	221f      	movs	r2, #31
 8002bc0:	f362 0306 	bfi	r3, r2, #0, #7
 8002bc4:	723b      	strb	r3, [r7, #8]
            break;
 8002bc6:	e020      	b.n	8002c0a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002bcc:	231e      	movs	r3, #30
 8002bce:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002bd0:	7a7b      	ldrb	r3, [r7, #9]
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	f362 0306 	bfi	r3, r2, #0, #7
 8002bd8:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002bda:	7a3b      	ldrb	r3, [r7, #8]
 8002bdc:	2207      	movs	r2, #7
 8002bde:	f362 0306 	bfi	r3, r2, #0, #7
 8002be2:	723b      	strb	r3, [r7, #8]
            break;
 8002be4:	e011      	b.n	8002c0a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002bea:	23fe      	movs	r3, #254	; 0xfe
 8002bec:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002bee:	7a7b      	ldrb	r3, [r7, #9]
 8002bf0:	223f      	movs	r2, #63	; 0x3f
 8002bf2:	f362 0306 	bfi	r3, r2, #0, #7
 8002bf6:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002bf8:	7a3b      	ldrb	r3, [r7, #8]
 8002bfa:	223f      	movs	r2, #63	; 0x3f
 8002bfc:	f362 0306 	bfi	r3, r2, #0, #7
 8002c00:	723b      	strb	r3, [r7, #8]
            break;
 8002c02:	e002      	b.n	8002c0a <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002c04:	f04f 33ff 	mov.w	r3, #4294967295
 8002c08:	e009      	b.n	8002c1e <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	2104      	movs	r1, #4
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fc2b 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8002c16:	4603      	mov	r3, r0
 8002c18:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	003e0f0f 	.word	0x003e0f0f

08002c2c <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
 8002c36:	460b      	mov	r3, r1
 8002c38:	71bb      	strb	r3, [r7, #6]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002c42:	4be2      	ldr	r3, [pc, #904]	; (8002fcc <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002c44:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002c4a:	7abb      	ldrb	r3, [r7, #10]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	f362 0301 	bfi	r3, r2, #0, #2
 8002c52:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002c58:	79bb      	ldrb	r3, [r7, #6]
 8002c5a:	2b11      	cmp	r3, #17
 8002c5c:	f200 81f6 	bhi.w	800304c <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002c60:	a201      	add	r2, pc, #4	; (adr r2, 8002c68 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002cb1 	.word	0x08002cb1
 8002c6c:	08002cef 	.word	0x08002cef
 8002c70:	08002d2d 	.word	0x08002d2d
 8002c74:	08002d6b 	.word	0x08002d6b
 8002c78:	08002da9 	.word	0x08002da9
 8002c7c:	08002de7 	.word	0x08002de7
 8002c80:	08002e21 	.word	0x08002e21
 8002c84:	08002e55 	.word	0x08002e55
 8002c88:	08002e87 	.word	0x08002e87
 8002c8c:	08002ecd 	.word	0x08002ecd
 8002c90:	08002f13 	.word	0x08002f13
 8002c94:	08002f51 	.word	0x08002f51
 8002c98:	08002f8f 	.word	0x08002f8f
 8002c9c:	08002fd1 	.word	0x08002fd1
 8002ca0:	0800300f 	.word	0x0800300f
 8002ca4:	08002d6b 	.word	0x08002d6b
 8002ca8:	08002e21 	.word	0x08002e21
 8002cac:	08002e87 	.word	0x08002e87
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002cb4:	7bbb      	ldrb	r3, [r7, #14]
 8002cb6:	221e      	movs	r2, #30
 8002cb8:	f362 0304 	bfi	r3, r2, #0, #5
 8002cbc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002cbe:	7b7b      	ldrb	r3, [r7, #13]
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	f362 0303 	bfi	r3, r2, #0, #4
 8002cc6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002cc8:	7b3b      	ldrb	r3, [r7, #12]
 8002cca:	2207      	movs	r2, #7
 8002ccc:	f362 0303 	bfi	r3, r2, #0, #4
 8002cd0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002cd2:	7a7b      	ldrb	r3, [r7, #9]
 8002cd4:	221f      	movs	r2, #31
 8002cd6:	f362 0306 	bfi	r3, r2, #0, #7
 8002cda:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	7a3b      	ldrb	r3, [r7, #8]
 8002ce6:	f362 0305 	bfi	r3, r2, #0, #6
 8002cea:	723b      	strb	r3, [r7, #8]
            break;
 8002cec:	e1b1      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	220e      	movs	r2, #14
 8002cf6:	f362 0304 	bfi	r3, r2, #0, #5
 8002cfa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002cfc:	7b7b      	ldrb	r3, [r7, #13]
 8002cfe:	2203      	movs	r2, #3
 8002d00:	f362 0303 	bfi	r3, r2, #0, #4
 8002d04:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002d06:	7b3b      	ldrb	r3, [r7, #12]
 8002d08:	2203      	movs	r2, #3
 8002d0a:	f362 0303 	bfi	r3, r2, #0, #4
 8002d0e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002d10:	7a7b      	ldrb	r3, [r7, #9]
 8002d12:	220f      	movs	r2, #15
 8002d14:	f362 0306 	bfi	r3, r2, #0, #7
 8002d18:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	7a3b      	ldrb	r3, [r7, #8]
 8002d24:	f362 0305 	bfi	r3, r2, #0, #6
 8002d28:	723b      	strb	r3, [r7, #8]
            break;
 8002d2a:	e192      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002d30:	7bbb      	ldrb	r3, [r7, #14]
 8002d32:	2208      	movs	r2, #8
 8002d34:	f362 0304 	bfi	r3, r2, #0, #5
 8002d38:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002d3a:	7b7b      	ldrb	r3, [r7, #13]
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	f362 0303 	bfi	r3, r2, #0, #4
 8002d42:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002d44:	7b3b      	ldrb	r3, [r7, #12]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f362 0303 	bfi	r3, r2, #0, #4
 8002d4c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002d4e:	7a7b      	ldrb	r3, [r7, #9]
 8002d50:	2209      	movs	r2, #9
 8002d52:	f362 0306 	bfi	r3, r2, #0, #7
 8002d56:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	7a3b      	ldrb	r3, [r7, #8]
 8002d62:	f362 0305 	bfi	r3, r2, #0, #6
 8002d66:	723b      	strb	r3, [r7, #8]
            break;
 8002d68:	e173      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8002d6e:	7bbb      	ldrb	r3, [r7, #14]
 8002d70:	2206      	movs	r2, #6
 8002d72:	f362 0304 	bfi	r3, r2, #0, #5
 8002d76:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002d78:	7b7b      	ldrb	r3, [r7, #13]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f362 0303 	bfi	r3, r2, #0, #4
 8002d80:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002d82:	7b3b      	ldrb	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f362 0303 	bfi	r3, r2, #0, #4
 8002d8a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8002d8c:	7a7b      	ldrb	r3, [r7, #9]
 8002d8e:	2207      	movs	r2, #7
 8002d90:	f362 0306 	bfi	r3, r2, #0, #7
 8002d94:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	7a3b      	ldrb	r3, [r7, #8]
 8002da0:	f362 0305 	bfi	r3, r2, #0, #6
 8002da4:	723b      	strb	r3, [r7, #8]
            break;
 8002da6:	e154      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8002dac:	7bbb      	ldrb	r3, [r7, #14]
 8002dae:	2204      	movs	r2, #4
 8002db0:	f362 0304 	bfi	r3, r2, #0, #5
 8002db4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8002db6:	7b7b      	ldrb	r3, [r7, #13]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f362 0303 	bfi	r3, r2, #0, #4
 8002dbe:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8002dc0:	7b3b      	ldrb	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f362 0303 	bfi	r3, r2, #0, #4
 8002dc8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8002dca:	7a7b      	ldrb	r3, [r7, #9]
 8002dcc:	2205      	movs	r2, #5
 8002dce:	f362 0306 	bfi	r3, r2, #0, #7
 8002dd2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	7a3b      	ldrb	r3, [r7, #8]
 8002dde:	f362 0305 	bfi	r3, r2, #0, #6
 8002de2:	723b      	strb	r3, [r7, #8]
            break;
 8002de4:	e135      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8002dea:	7bbb      	ldrb	r3, [r7, #14]
 8002dec:	2203      	movs	r2, #3
 8002dee:	f362 0304 	bfi	r3, r2, #0, #5
 8002df2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002df4:	7b7b      	ldrb	r3, [r7, #13]
 8002df6:	f36f 0303 	bfc	r3, #0, #4
 8002dfa:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002dfc:	7b3b      	ldrb	r3, [r7, #12]
 8002dfe:	f36f 0303 	bfc	r3, #0, #4
 8002e02:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 8002e04:	7a7b      	ldrb	r3, [r7, #9]
 8002e06:	2204      	movs	r2, #4
 8002e08:	f362 0306 	bfi	r3, r2, #0, #7
 8002e0c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	7a3b      	ldrb	r3, [r7, #8]
 8002e18:	f362 0305 	bfi	r3, r2, #0, #6
 8002e1c:	723b      	strb	r3, [r7, #8]
            break;
 8002e1e:	e118      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8002e24:	7bbb      	ldrb	r3, [r7, #14]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f362 0304 	bfi	r3, r2, #0, #5
 8002e2c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e2e:	7b7b      	ldrb	r3, [r7, #13]
 8002e30:	f36f 0303 	bfc	r3, #0, #4
 8002e34:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e36:	7b3b      	ldrb	r3, [r7, #12]
 8002e38:	f36f 0303 	bfc	r3, #0, #4
 8002e3c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8002e3e:	7a7b      	ldrb	r3, [r7, #9]
 8002e40:	2203      	movs	r2, #3
 8002e42:	f362 0306 	bfi	r3, r2, #0, #7
 8002e46:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 8002e48:	7a3b      	ldrb	r3, [r7, #8]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f362 0305 	bfi	r3, r2, #0, #6
 8002e50:	723b      	strb	r3, [r7, #8]
            break;
 8002e52:	e0fe      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 8002e58:	7bbb      	ldrb	r3, [r7, #14]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f362 0304 	bfi	r3, r2, #0, #5
 8002e60:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8002e62:	7b7b      	ldrb	r3, [r7, #13]
 8002e64:	f36f 0303 	bfc	r3, #0, #4
 8002e68:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8002e6a:	7b3b      	ldrb	r3, [r7, #12]
 8002e6c:	f36f 0303 	bfc	r3, #0, #4
 8002e70:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8002e72:	7a7b      	ldrb	r3, [r7, #9]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f362 0306 	bfi	r3, r2, #0, #7
 8002e7a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 8002e7c:	7a3b      	ldrb	r3, [r7, #8]
 8002e7e:	f36f 0305 	bfc	r3, #0, #6
 8002e82:	723b      	strb	r3, [r7, #8]
            break;
 8002e84:	e0e5      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002e8a:	7bbb      	ldrb	r3, [r7, #14]
 8002e8c:	221e      	movs	r2, #30
 8002e8e:	f362 0304 	bfi	r3, r2, #0, #5
 8002e92:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002e94:	7b7b      	ldrb	r3, [r7, #13]
 8002e96:	2207      	movs	r2, #7
 8002e98:	f362 0303 	bfi	r3, r2, #0, #4
 8002e9c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002e9e:	7b3b      	ldrb	r3, [r7, #12]
 8002ea0:	2207      	movs	r2, #7
 8002ea2:	f362 0303 	bfi	r3, r2, #0, #4
 8002ea6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002ea8:	7a7b      	ldrb	r3, [r7, #9]
 8002eaa:	221f      	movs	r2, #31
 8002eac:	f362 0306 	bfi	r3, r2, #0, #7
 8002eb0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	7a3b      	ldrb	r3, [r7, #8]
 8002ebc:	f362 0305 	bfi	r3, r2, #0, #6
 8002ec0:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002ec2:	7abb      	ldrb	r3, [r7, #10]
 8002ec4:	f36f 0301 	bfc	r3, #0, #2
 8002ec8:	72bb      	strb	r3, [r7, #10]
            break;
 8002eca:	e0c2      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8002ed0:	7bbb      	ldrb	r3, [r7, #14]
 8002ed2:	2211      	movs	r2, #17
 8002ed4:	f362 0304 	bfi	r3, r2, #0, #5
 8002ed8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8002eda:	7b7b      	ldrb	r3, [r7, #13]
 8002edc:	2204      	movs	r2, #4
 8002ede:	f362 0303 	bfi	r3, r2, #0, #4
 8002ee2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 8002ee4:	7b3b      	ldrb	r3, [r7, #12]
 8002ee6:	2204      	movs	r2, #4
 8002ee8:	f362 0303 	bfi	r3, r2, #0, #4
 8002eec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8002eee:	7a7b      	ldrb	r3, [r7, #9]
 8002ef0:	2212      	movs	r2, #18
 8002ef2:	f362 0306 	bfi	r3, r2, #0, #7
 8002ef6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	7a3b      	ldrb	r3, [r7, #8]
 8002f02:	f362 0305 	bfi	r3, r2, #0, #6
 8002f06:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8002f08:	7abb      	ldrb	r3, [r7, #10]
 8002f0a:	f36f 0301 	bfc	r3, #0, #2
 8002f0e:	72bb      	strb	r3, [r7, #10]
            break;
 8002f10:	e09f      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8002f16:	7bbb      	ldrb	r3, [r7, #14]
 8002f18:	221e      	movs	r2, #30
 8002f1a:	f362 0304 	bfi	r3, r2, #0, #5
 8002f1e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8002f20:	7b7b      	ldrb	r3, [r7, #13]
 8002f22:	2207      	movs	r2, #7
 8002f24:	f362 0303 	bfi	r3, r2, #0, #4
 8002f28:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8002f2a:	7b3b      	ldrb	r3, [r7, #12]
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	f362 0303 	bfi	r3, r2, #0, #4
 8002f32:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8002f34:	7a7b      	ldrb	r3, [r7, #9]
 8002f36:	221f      	movs	r2, #31
 8002f38:	f362 0306 	bfi	r3, r2, #0, #7
 8002f3c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	7a3b      	ldrb	r3, [r7, #8]
 8002f48:	f362 0305 	bfi	r3, r2, #0, #6
 8002f4c:	723b      	strb	r3, [r7, #8]
            break;
 8002f4e:	e080      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 8002f54:	7bbb      	ldrb	r3, [r7, #14]
 8002f56:	2212      	movs	r2, #18
 8002f58:	f362 0304 	bfi	r3, r2, #0, #5
 8002f5c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 8002f5e:	7b7b      	ldrb	r3, [r7, #13]
 8002f60:	2205      	movs	r2, #5
 8002f62:	f362 0303 	bfi	r3, r2, #0, #4
 8002f66:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 8002f68:	7b3b      	ldrb	r3, [r7, #12]
 8002f6a:	2205      	movs	r2, #5
 8002f6c:	f362 0303 	bfi	r3, r2, #0, #4
 8002f70:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 8002f72:	7a7b      	ldrb	r3, [r7, #9]
 8002f74:	2213      	movs	r2, #19
 8002f76:	f362 0306 	bfi	r3, r2, #0, #7
 8002f7a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	7a3b      	ldrb	r3, [r7, #8]
 8002f86:	f362 0305 	bfi	r3, r2, #0, #6
 8002f8a:	723b      	strb	r3, [r7, #8]
            break;
 8002f8c:	e061      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8002f92:	7bbb      	ldrb	r3, [r7, #14]
 8002f94:	220e      	movs	r2, #14
 8002f96:	f362 0304 	bfi	r3, r2, #0, #5
 8002f9a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	f362 0303 	bfi	r3, r2, #0, #4
 8002fa4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8002fa6:	7b3b      	ldrb	r3, [r7, #12]
 8002fa8:	2203      	movs	r2, #3
 8002faa:	f362 0303 	bfi	r3, r2, #0, #4
 8002fae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8002fb0:	7a7b      	ldrb	r3, [r7, #9]
 8002fb2:	220f      	movs	r2, #15
 8002fb4:	f362 0306 	bfi	r3, r2, #0, #7
 8002fb8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	7a3b      	ldrb	r3, [r7, #8]
 8002fc4:	f362 0305 	bfi	r3, r2, #0, #6
 8002fc8:	723b      	strb	r3, [r7, #8]
            break;
 8002fca:	e042      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8002fcc:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8002fd4:	7bbb      	ldrb	r3, [r7, #14]
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	f362 0304 	bfi	r3, r2, #0, #5
 8002fdc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8002fde:	7b7b      	ldrb	r3, [r7, #13]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f362 0303 	bfi	r3, r2, #0, #4
 8002fe6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8002fe8:	7b3b      	ldrb	r3, [r7, #12]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f362 0303 	bfi	r3, r2, #0, #4
 8002ff0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8002ff2:	7a7b      	ldrb	r3, [r7, #9]
 8002ff4:	2209      	movs	r2, #9
 8002ff6:	f362 0306 	bfi	r3, r2, #0, #7
 8002ffa:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003002:	b2da      	uxtb	r2, r3
 8003004:	7a3b      	ldrb	r3, [r7, #8]
 8003006:	f362 0305 	bfi	r3, r2, #0, #6
 800300a:	723b      	strb	r3, [r7, #8]
            break;
 800300c:	e021      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800300e:	2300      	movs	r3, #0
 8003010:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003012:	7bbb      	ldrb	r3, [r7, #14]
 8003014:	2206      	movs	r2, #6
 8003016:	f362 0304 	bfi	r3, r2, #0, #5
 800301a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800301c:	7b7b      	ldrb	r3, [r7, #13]
 800301e:	2201      	movs	r2, #1
 8003020:	f362 0303 	bfi	r3, r2, #0, #4
 8003024:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003026:	7b3b      	ldrb	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f362 0303 	bfi	r3, r2, #0, #4
 800302e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003030:	7a7b      	ldrb	r3, [r7, #9]
 8003032:	2207      	movs	r2, #7
 8003034:	f362 0306 	bfi	r3, r2, #0, #7
 8003038:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003040:	b2da      	uxtb	r2, r3
 8003042:	7a3b      	ldrb	r3, [r7, #8]
 8003044:	f362 0305 	bfi	r3, r2, #0, #6
 8003048:	723b      	strb	r3, [r7, #8]
            break;
 800304a:	e002      	b.n	8003052 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 800304c:	f04f 33ff 	mov.w	r3, #4294967295
 8003050:	e01f      	b.n	8003092 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	2108      	movs	r1, #8
 8003058:	4618      	mov	r0, r3
 800305a:	f7fe fa07 	bl	800146c <DRV_CANFDSPI_WriteWord>
 800305e:	4603      	mov	r3, r0
 8003060:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003062:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 800306a:	f06f 0301 	mvn.w	r3, #1
 800306e:	e010      	b.n	8003092 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003070:	68ba      	ldr	r2, [r7, #8]
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	210c      	movs	r1, #12
 8003076:	4618      	mov	r0, r3
 8003078:	f7fe f9f8 	bl	800146c <DRV_CANFDSPI_WriteWord>
 800307c:	4603      	mov	r3, r0
 800307e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003080:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 8003088:	f06f 0302 	mvn.w	r3, #2
 800308c:	e001      	b.n	8003092 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 800308e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop

0800309c <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	460a      	mov	r2, r1
 80030a6:	71fb      	strb	r3, [r7, #7]
 80030a8:	4613      	mov	r3, r2
 80030aa:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 80030b0:	4b3f      	ldr	r3, [pc, #252]	; (80031b0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 80030b2:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 80030b4:	79bb      	ldrb	r3, [r7, #6]
 80030b6:	2b11      	cmp	r3, #17
 80030b8:	d862      	bhi.n	8003180 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 80030ba:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 80030bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c0:	08003109 	.word	0x08003109
 80030c4:	08003109 	.word	0x08003109
 80030c8:	08003181 	.word	0x08003181
 80030cc:	08003109 	.word	0x08003109
 80030d0:	08003109 	.word	0x08003109
 80030d4:	08003109 	.word	0x08003109
 80030d8:	08003109 	.word	0x08003109
 80030dc:	08003109 	.word	0x08003109
 80030e0:	08003127 	.word	0x08003127
 80030e4:	08003127 	.word	0x08003127
 80030e8:	08003127 	.word	0x08003127
 80030ec:	08003127 	.word	0x08003127
 80030f0:	08003127 	.word	0x08003127
 80030f4:	08003127 	.word	0x08003127
 80030f8:	08003127 	.word	0x08003127
 80030fc:	08003145 	.word	0x08003145
 8003100:	08003145 	.word	0x08003145
 8003104:	08003163 	.word	0x08003163
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 800310c:	231e      	movs	r3, #30
 800310e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003110:	7a7b      	ldrb	r3, [r7, #9]
 8003112:	2207      	movs	r2, #7
 8003114:	f362 0306 	bfi	r3, r2, #0, #7
 8003118:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 800311a:	7a3b      	ldrb	r3, [r7, #8]
 800311c:	2207      	movs	r2, #7
 800311e:	f362 0306 	bfi	r3, r2, #0, #7
 8003122:	723b      	strb	r3, [r7, #8]
            break;
 8003124:	e02f      	b.n	8003186 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800312a:	233e      	movs	r3, #62	; 0x3e
 800312c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800312e:	7a7b      	ldrb	r3, [r7, #9]
 8003130:	220f      	movs	r2, #15
 8003132:	f362 0306 	bfi	r3, r2, #0, #7
 8003136:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003138:	7a3b      	ldrb	r3, [r7, #8]
 800313a:	220f      	movs	r2, #15
 800313c:	f362 0306 	bfi	r3, r2, #0, #7
 8003140:	723b      	strb	r3, [r7, #8]
            break;
 8003142:	e020      	b.n	8003186 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003144:	2300      	movs	r3, #0
 8003146:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003148:	230e      	movs	r3, #14
 800314a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 800314c:	7a7b      	ldrb	r3, [r7, #9]
 800314e:	2203      	movs	r2, #3
 8003150:	f362 0306 	bfi	r3, r2, #0, #7
 8003154:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8003156:	7a3b      	ldrb	r3, [r7, #8]
 8003158:	2203      	movs	r2, #3
 800315a:	f362 0306 	bfi	r3, r2, #0, #7
 800315e:	723b      	strb	r3, [r7, #8]
            break;
 8003160:	e011      	b.n	8003186 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8003166:	237e      	movs	r3, #126	; 0x7e
 8003168:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 800316a:	7a7b      	ldrb	r3, [r7, #9]
 800316c:	221f      	movs	r2, #31
 800316e:	f362 0306 	bfi	r3, r2, #0, #7
 8003172:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8003174:	7a3b      	ldrb	r3, [r7, #8]
 8003176:	221f      	movs	r2, #31
 8003178:	f362 0306 	bfi	r3, r2, #0, #7
 800317c:	723b      	strb	r3, [r7, #8]
            break;
 800317e:	e002      	b.n	8003186 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 8003180:	f04f 33ff 	mov.w	r3, #4294967295
 8003184:	e010      	b.n	80031a8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	79fb      	ldrb	r3, [r7, #7]
 800318a:	2104      	movs	r1, #4
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe f96d 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8003192:	4603      	mov	r3, r0
 8003194:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 800319e:	f06f 0301 	mvn.w	r3, #1
 80031a2:	e001      	b.n	80031a8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 80031a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3710      	adds	r7, #16
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	003e0f0f 	.word	0x003e0f0f

080031b4 <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	71fb      	strb	r3, [r7, #7]
 80031be:	460b      	mov	r3, r1
 80031c0:	71bb      	strb	r3, [r7, #6]
 80031c2:	4613      	mov	r3, r2
 80031c4:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 80031ca:	4bce      	ldr	r3, [pc, #824]	; (8003504 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 80031cc:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 80031d2:	7abb      	ldrb	r3, [r7, #10]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f362 0301 	bfi	r3, r2, #0, #2
 80031da:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80031e0:	79bb      	ldrb	r3, [r7, #6]
 80031e2:	2b11      	cmp	r3, #17
 80031e4:	f200 8166 	bhi.w	80034b4 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 80031e8:	a201      	add	r2, pc, #4	; (adr r2, 80031f0 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 80031ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ee:	bf00      	nop
 80031f0:	08003239 	.word	0x08003239
 80031f4:	08003277 	.word	0x08003277
 80031f8:	080034b5 	.word	0x080034b5
 80031fc:	080032b5 	.word	0x080032b5
 8003200:	080032ef 	.word	0x080032ef
 8003204:	08003329 	.word	0x08003329
 8003208:	08003329 	.word	0x08003329
 800320c:	08003329 	.word	0x08003329
 8003210:	0800332f 	.word	0x0800332f
 8003214:	08003375 	.word	0x08003375
 8003218:	080033bb 	.word	0x080033bb
 800321c:	080033f9 	.word	0x080033f9
 8003220:	08003437 	.word	0x08003437
 8003224:	08003475 	.word	0x08003475
 8003228:	0800347b 	.word	0x0800347b
 800322c:	080032b5 	.word	0x080032b5
 8003230:	08003329 	.word	0x08003329
 8003234:	0800332f 	.word	0x0800332f
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800323c:	7bbb      	ldrb	r3, [r7, #14]
 800323e:	220e      	movs	r2, #14
 8003240:	f362 0304 	bfi	r3, r2, #0, #5
 8003244:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003246:	7b7b      	ldrb	r3, [r7, #13]
 8003248:	2203      	movs	r2, #3
 800324a:	f362 0303 	bfi	r3, r2, #0, #4
 800324e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003250:	7b3b      	ldrb	r3, [r7, #12]
 8003252:	2203      	movs	r2, #3
 8003254:	f362 0303 	bfi	r3, r2, #0, #4
 8003258:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 800325a:	7a7b      	ldrb	r3, [r7, #9]
 800325c:	220f      	movs	r2, #15
 800325e:	f362 0306 	bfi	r3, r2, #0, #7
 8003262:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800326a:	b2da      	uxtb	r2, r3
 800326c:	7a3b      	ldrb	r3, [r7, #8]
 800326e:	f362 0305 	bfi	r3, r2, #0, #6
 8003272:	723b      	strb	r3, [r7, #8]
            break;
 8003274:	e121      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800327a:	7bbb      	ldrb	r3, [r7, #14]
 800327c:	2206      	movs	r2, #6
 800327e:	f362 0304 	bfi	r3, r2, #0, #5
 8003282:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003284:	7b7b      	ldrb	r3, [r7, #13]
 8003286:	2201      	movs	r2, #1
 8003288:	f362 0303 	bfi	r3, r2, #0, #4
 800328c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800328e:	7b3b      	ldrb	r3, [r7, #12]
 8003290:	2201      	movs	r2, #1
 8003292:	f362 0303 	bfi	r3, r2, #0, #4
 8003296:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003298:	7a7b      	ldrb	r3, [r7, #9]
 800329a:	2207      	movs	r2, #7
 800329c:	f362 0306 	bfi	r3, r2, #0, #7
 80032a0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	7a3b      	ldrb	r3, [r7, #8]
 80032ac:	f362 0305 	bfi	r3, r2, #0, #6
 80032b0:	723b      	strb	r3, [r7, #8]
            break;
 80032b2:	e102      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80032b8:	7bbb      	ldrb	r3, [r7, #14]
 80032ba:	2202      	movs	r2, #2
 80032bc:	f362 0304 	bfi	r3, r2, #0, #5
 80032c0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032c2:	7b7b      	ldrb	r3, [r7, #13]
 80032c4:	f36f 0303 	bfc	r3, #0, #4
 80032c8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80032ca:	7b3b      	ldrb	r3, [r7, #12]
 80032cc:	f36f 0303 	bfc	r3, #0, #4
 80032d0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80032d2:	7a7b      	ldrb	r3, [r7, #9]
 80032d4:	2203      	movs	r2, #3
 80032d6:	f362 0306 	bfi	r3, r2, #0, #7
 80032da:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	7a3b      	ldrb	r3, [r7, #8]
 80032e6:	f362 0305 	bfi	r3, r2, #0, #6
 80032ea:	723b      	strb	r3, [r7, #8]
            break;
 80032ec:	e0e5      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80032f2:	7bbb      	ldrb	r3, [r7, #14]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f362 0304 	bfi	r3, r2, #0, #5
 80032fa:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80032fc:	7b7b      	ldrb	r3, [r7, #13]
 80032fe:	f36f 0303 	bfc	r3, #0, #4
 8003302:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003304:	7b3b      	ldrb	r3, [r7, #12]
 8003306:	f36f 0303 	bfc	r3, #0, #4
 800330a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 800330c:	7a7b      	ldrb	r3, [r7, #9]
 800330e:	2202      	movs	r2, #2
 8003310:	f362 0306 	bfi	r3, r2, #0, #7
 8003314:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800331c:	b2da      	uxtb	r2, r3
 800331e:	7a3b      	ldrb	r3, [r7, #8]
 8003320:	f362 0305 	bfi	r3, r2, #0, #6
 8003324:	723b      	strb	r3, [r7, #8]
            break;
 8003326:	e0c8      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003328:	f04f 33ff 	mov.w	r3, #4294967295
 800332c:	e0e5      	b.n	80034fa <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 8003332:	7bbb      	ldrb	r3, [r7, #14]
 8003334:	221e      	movs	r2, #30
 8003336:	f362 0304 	bfi	r3, r2, #0, #5
 800333a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 800333c:	7b7b      	ldrb	r3, [r7, #13]
 800333e:	2207      	movs	r2, #7
 8003340:	f362 0303 	bfi	r3, r2, #0, #4
 8003344:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003346:	7b3b      	ldrb	r3, [r7, #12]
 8003348:	2207      	movs	r2, #7
 800334a:	f362 0303 	bfi	r3, r2, #0, #4
 800334e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003350:	7a7b      	ldrb	r3, [r7, #9]
 8003352:	221f      	movs	r2, #31
 8003354:	f362 0306 	bfi	r3, r2, #0, #7
 8003358:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003360:	b2da      	uxtb	r2, r3
 8003362:	7a3b      	ldrb	r3, [r7, #8]
 8003364:	f362 0305 	bfi	r3, r2, #0, #6
 8003368:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800336a:	7abb      	ldrb	r3, [r7, #10]
 800336c:	f36f 0301 	bfc	r3, #0, #2
 8003370:	72bb      	strb	r3, [r7, #10]
            break;
 8003372:	e0a2      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8003374:	2300      	movs	r3, #0
 8003376:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8003378:	7bbb      	ldrb	r3, [r7, #14]
 800337a:	2211      	movs	r2, #17
 800337c:	f362 0304 	bfi	r3, r2, #0, #5
 8003380:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8003382:	7b7b      	ldrb	r3, [r7, #13]
 8003384:	2204      	movs	r2, #4
 8003386:	f362 0303 	bfi	r3, r2, #0, #4
 800338a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 800338c:	7b3b      	ldrb	r3, [r7, #12]
 800338e:	2204      	movs	r2, #4
 8003390:	f362 0303 	bfi	r3, r2, #0, #4
 8003394:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8003396:	7a7b      	ldrb	r3, [r7, #9]
 8003398:	2212      	movs	r2, #18
 800339a:	f362 0306 	bfi	r3, r2, #0, #7
 800339e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	7a3b      	ldrb	r3, [r7, #8]
 80033aa:	f362 0305 	bfi	r3, r2, #0, #6
 80033ae:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80033b0:	7abb      	ldrb	r3, [r7, #10]
 80033b2:	f36f 0301 	bfc	r3, #0, #2
 80033b6:	72bb      	strb	r3, [r7, #10]
            break;
 80033b8:	e07f      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80033be:	7bbb      	ldrb	r3, [r7, #14]
 80033c0:	220e      	movs	r2, #14
 80033c2:	f362 0304 	bfi	r3, r2, #0, #5
 80033c6:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80033c8:	7b7b      	ldrb	r3, [r7, #13]
 80033ca:	2203      	movs	r2, #3
 80033cc:	f362 0303 	bfi	r3, r2, #0, #4
 80033d0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80033d2:	7b3b      	ldrb	r3, [r7, #12]
 80033d4:	2203      	movs	r2, #3
 80033d6:	f362 0303 	bfi	r3, r2, #0, #4
 80033da:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80033dc:	7a7b      	ldrb	r3, [r7, #9]
 80033de:	220f      	movs	r2, #15
 80033e0:	f362 0306 	bfi	r3, r2, #0, #7
 80033e4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	7a3b      	ldrb	r3, [r7, #8]
 80033f0:	f362 0305 	bfi	r3, r2, #0, #6
 80033f4:	723b      	strb	r3, [r7, #8]
            break;
 80033f6:	e060      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 80033fc:	7bbb      	ldrb	r3, [r7, #14]
 80033fe:	2208      	movs	r2, #8
 8003400:	f362 0304 	bfi	r3, r2, #0, #5
 8003404:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003406:	7b7b      	ldrb	r3, [r7, #13]
 8003408:	2202      	movs	r2, #2
 800340a:	f362 0303 	bfi	r3, r2, #0, #4
 800340e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003410:	7b3b      	ldrb	r3, [r7, #12]
 8003412:	2202      	movs	r2, #2
 8003414:	f362 0303 	bfi	r3, r2, #0, #4
 8003418:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800341a:	7a7b      	ldrb	r3, [r7, #9]
 800341c:	2209      	movs	r2, #9
 800341e:	f362 0306 	bfi	r3, r2, #0, #7
 8003422:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800342a:	b2da      	uxtb	r2, r3
 800342c:	7a3b      	ldrb	r3, [r7, #8]
 800342e:	f362 0305 	bfi	r3, r2, #0, #6
 8003432:	723b      	strb	r3, [r7, #8]
            break;
 8003434:	e041      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003436:	2300      	movs	r3, #0
 8003438:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800343a:	7bbb      	ldrb	r3, [r7, #14]
 800343c:	2206      	movs	r2, #6
 800343e:	f362 0304 	bfi	r3, r2, #0, #5
 8003442:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003444:	7b7b      	ldrb	r3, [r7, #13]
 8003446:	2201      	movs	r2, #1
 8003448:	f362 0303 	bfi	r3, r2, #0, #4
 800344c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800344e:	7b3b      	ldrb	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f362 0303 	bfi	r3, r2, #0, #4
 8003456:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003458:	7a7b      	ldrb	r3, [r7, #9]
 800345a:	2207      	movs	r2, #7
 800345c:	f362 0306 	bfi	r3, r2, #0, #7
 8003460:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003468:	b2da      	uxtb	r2, r3
 800346a:	7a3b      	ldrb	r3, [r7, #8]
 800346c:	f362 0305 	bfi	r3, r2, #0, #6
 8003470:	723b      	strb	r3, [r7, #8]
            break;
 8003472:	e022      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003474:	f04f 33ff 	mov.w	r3, #4294967295
 8003478:	e03f      	b.n	80034fa <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800347e:	7bbb      	ldrb	r3, [r7, #14]
 8003480:	2202      	movs	r2, #2
 8003482:	f362 0304 	bfi	r3, r2, #0, #5
 8003486:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003488:	7b7b      	ldrb	r3, [r7, #13]
 800348a:	f36f 0303 	bfc	r3, #0, #4
 800348e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003490:	7b3b      	ldrb	r3, [r7, #12]
 8003492:	f36f 0303 	bfc	r3, #0, #4
 8003496:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003498:	7a7b      	ldrb	r3, [r7, #9]
 800349a:	2203      	movs	r2, #3
 800349c:	f362 0306 	bfi	r3, r2, #0, #7
 80034a0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	7a3b      	ldrb	r3, [r7, #8]
 80034ac:	f362 0305 	bfi	r3, r2, #0, #6
 80034b0:	723b      	strb	r3, [r7, #8]
            break;
 80034b2:	e002      	b.n	80034ba <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
 80034b8:	e01f      	b.n	80034fa <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2108      	movs	r1, #8
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd ffd3 	bl	800146c <DRV_CANFDSPI_WriteWord>
 80034c6:	4603      	mov	r3, r0
 80034c8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 80034d2:	f06f 0301 	mvn.w	r3, #1
 80034d6:	e010      	b.n	80034fa <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	210c      	movs	r1, #12
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd ffc4 	bl	800146c <DRV_CANFDSPI_WriteWord>
 80034e4:	4603      	mov	r3, r0
 80034e6:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80034e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 80034f0:	f06f 0302 	mvn.w	r3, #2
 80034f4:	e001      	b.n	80034fa <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 80034f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	000e0303 	.word	0x000e0303

08003508 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	460a      	mov	r2, r1
 8003512:	71fb      	strb	r3, [r7, #7]
 8003514:	4613      	mov	r3, r2
 8003516:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 800351c:	4b3f      	ldr	r3, [pc, #252]	; (800361c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 800351e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003520:	79bb      	ldrb	r3, [r7, #6]
 8003522:	2b11      	cmp	r3, #17
 8003524:	d862      	bhi.n	80035ec <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	08003575 	.word	0x08003575
 8003530:	08003575 	.word	0x08003575
 8003534:	080035ed 	.word	0x080035ed
 8003538:	08003575 	.word	0x08003575
 800353c:	08003575 	.word	0x08003575
 8003540:	08003575 	.word	0x08003575
 8003544:	08003575 	.word	0x08003575
 8003548:	08003575 	.word	0x08003575
 800354c:	08003593 	.word	0x08003593
 8003550:	08003593 	.word	0x08003593
 8003554:	08003593 	.word	0x08003593
 8003558:	08003593 	.word	0x08003593
 800355c:	08003593 	.word	0x08003593
 8003560:	08003593 	.word	0x08003593
 8003564:	08003593 	.word	0x08003593
 8003568:	080035b1 	.word	0x080035b1
 800356c:	080035b1 	.word	0x080035b1
 8003570:	080035cf 	.word	0x080035cf
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003574:	2300      	movs	r3, #0
 8003576:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 8003578:	230e      	movs	r3, #14
 800357a:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 800357c:	7a7b      	ldrb	r3, [r7, #9]
 800357e:	2203      	movs	r2, #3
 8003580:	f362 0306 	bfi	r3, r2, #0, #7
 8003584:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 8003586:	7a3b      	ldrb	r3, [r7, #8]
 8003588:	2203      	movs	r2, #3
 800358a:	f362 0306 	bfi	r3, r2, #0, #7
 800358e:	723b      	strb	r3, [r7, #8]
            break;
 8003590:	e02f      	b.n	80035f2 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8003592:	2300      	movs	r3, #0
 8003594:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003596:	231e      	movs	r3, #30
 8003598:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 800359a:	7a7b      	ldrb	r3, [r7, #9]
 800359c:	2207      	movs	r2, #7
 800359e:	f362 0306 	bfi	r3, r2, #0, #7
 80035a2:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80035a4:	7a3b      	ldrb	r3, [r7, #8]
 80035a6:	2207      	movs	r2, #7
 80035a8:	f362 0306 	bfi	r3, r2, #0, #7
 80035ac:	723b      	strb	r3, [r7, #8]
            break;
 80035ae:	e020      	b.n	80035f2 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 80035b4:	2307      	movs	r3, #7
 80035b6:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 80035b8:	7a7b      	ldrb	r3, [r7, #9]
 80035ba:	2202      	movs	r2, #2
 80035bc:	f362 0306 	bfi	r3, r2, #0, #7
 80035c0:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 80035c2:	7a3b      	ldrb	r3, [r7, #8]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f362 0306 	bfi	r3, r2, #0, #7
 80035ca:	723b      	strb	r3, [r7, #8]
            break;
 80035cc:	e011      	b.n	80035f2 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 80035d2:	233e      	movs	r3, #62	; 0x3e
 80035d4:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 80035d6:	7a7b      	ldrb	r3, [r7, #9]
 80035d8:	220f      	movs	r2, #15
 80035da:	f362 0306 	bfi	r3, r2, #0, #7
 80035de:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 80035e0:	7a3b      	ldrb	r3, [r7, #8]
 80035e2:	220f      	movs	r2, #15
 80035e4:	f362 0306 	bfi	r3, r2, #0, #7
 80035e8:	723b      	strb	r3, [r7, #8]
            break;
 80035ea:	e002      	b.n	80035f2 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295
 80035f0:	e010      	b.n	8003614 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2104      	movs	r1, #4
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fd ff37 	bl	800146c <DRV_CANFDSPI_WriteWord>
 80035fe:	4603      	mov	r3, r0
 8003600:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 800360a:	f06f 0301 	mvn.w	r3, #1
 800360e:	e001      	b.n	8003614 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003610:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	003e0f0f 	.word	0x003e0f0f

08003620 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	71fb      	strb	r3, [r7, #7]
 800362a:	460b      	mov	r3, r1
 800362c:	71bb      	strb	r3, [r7, #6]
 800362e:	4613      	mov	r3, r2
 8003630:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003636:	4b92      	ldr	r3, [pc, #584]	; (8003880 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003638:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 800363a:	2300      	movs	r3, #0
 800363c:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800363e:	7abb      	ldrb	r3, [r7, #10]
 8003640:	2202      	movs	r2, #2
 8003642:	f362 0301 	bfi	r3, r2, #0, #2
 8003646:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003648:	2300      	movs	r3, #0
 800364a:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 800364c:	79bb      	ldrb	r3, [r7, #6]
 800364e:	2b11      	cmp	r3, #17
 8003650:	f200 80ef 	bhi.w	8003832 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	080036a5 	.word	0x080036a5
 8003660:	080036e3 	.word	0x080036e3
 8003664:	08003833 	.word	0x08003833
 8003668:	0800371d 	.word	0x0800371d
 800366c:	0800371d 	.word	0x0800371d
 8003670:	0800371d 	.word	0x0800371d
 8003674:	0800371d 	.word	0x0800371d
 8003678:	0800371d 	.word	0x0800371d
 800367c:	08003723 	.word	0x08003723
 8003680:	08003769 	.word	0x08003769
 8003684:	080037af 	.word	0x080037af
 8003688:	080037ed 	.word	0x080037ed
 800368c:	080037f3 	.word	0x080037f3
 8003690:	0800382d 	.word	0x0800382d
 8003694:	0800382d 	.word	0x0800382d
 8003698:	0800371d 	.word	0x0800371d
 800369c:	0800371d 	.word	0x0800371d
 80036a0:	08003723 	.word	0x08003723
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80036a8:	7bbb      	ldrb	r3, [r7, #14]
 80036aa:	2206      	movs	r2, #6
 80036ac:	f362 0304 	bfi	r3, r2, #0, #5
 80036b0:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80036b2:	7b7b      	ldrb	r3, [r7, #13]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f362 0303 	bfi	r3, r2, #0, #4
 80036ba:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80036bc:	7b3b      	ldrb	r3, [r7, #12]
 80036be:	2201      	movs	r2, #1
 80036c0:	f362 0303 	bfi	r3, r2, #0, #4
 80036c4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80036c6:	7a7b      	ldrb	r3, [r7, #9]
 80036c8:	2207      	movs	r2, #7
 80036ca:	f362 0306 	bfi	r3, r2, #0, #7
 80036ce:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	7a3b      	ldrb	r3, [r7, #8]
 80036da:	f362 0305 	bfi	r3, r2, #0, #6
 80036de:	723b      	strb	r3, [r7, #8]
            break;
 80036e0:	e0aa      	b.n	8003838 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80036e6:	7bbb      	ldrb	r3, [r7, #14]
 80036e8:	2202      	movs	r2, #2
 80036ea:	f362 0304 	bfi	r3, r2, #0, #5
 80036ee:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80036f0:	7b7b      	ldrb	r3, [r7, #13]
 80036f2:	f36f 0303 	bfc	r3, #0, #4
 80036f6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80036f8:	7b3b      	ldrb	r3, [r7, #12]
 80036fa:	f36f 0303 	bfc	r3, #0, #4
 80036fe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003700:	7a7b      	ldrb	r3, [r7, #9]
 8003702:	2203      	movs	r2, #3
 8003704:	f362 0306 	bfi	r3, r2, #0, #7
 8003708:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003710:	b2da      	uxtb	r2, r3
 8003712:	7a3b      	ldrb	r3, [r7, #8]
 8003714:	f362 0305 	bfi	r3, r2, #0, #6
 8003718:	723b      	strb	r3, [r7, #8]
            break;
 800371a:	e08d      	b.n	8003838 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800371c:	f04f 33ff 	mov.w	r3, #4294967295
 8003720:	e0aa      	b.n	8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003726:	7bbb      	ldrb	r3, [r7, #14]
 8003728:	220e      	movs	r2, #14
 800372a:	f362 0304 	bfi	r3, r2, #0, #5
 800372e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003730:	7b7b      	ldrb	r3, [r7, #13]
 8003732:	2203      	movs	r2, #3
 8003734:	f362 0303 	bfi	r3, r2, #0, #4
 8003738:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800373a:	7b3b      	ldrb	r3, [r7, #12]
 800373c:	2203      	movs	r2, #3
 800373e:	f362 0303 	bfi	r3, r2, #0, #4
 8003742:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003744:	7a7b      	ldrb	r3, [r7, #9]
 8003746:	220f      	movs	r2, #15
 8003748:	f362 0306 	bfi	r3, r2, #0, #7
 800374c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	b2da      	uxtb	r2, r3
 8003756:	7a3b      	ldrb	r3, [r7, #8]
 8003758:	f362 0305 	bfi	r3, r2, #0, #6
 800375c:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800375e:	7abb      	ldrb	r3, [r7, #10]
 8003760:	f36f 0301 	bfc	r3, #0, #2
 8003764:	72bb      	strb	r3, [r7, #10]
            break;
 8003766:	e067      	b.n	8003838 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 800376c:	7bbb      	ldrb	r3, [r7, #14]
 800376e:	2207      	movs	r2, #7
 8003770:	f362 0304 	bfi	r3, r2, #0, #5
 8003774:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003776:	7b7b      	ldrb	r3, [r7, #13]
 8003778:	2202      	movs	r2, #2
 800377a:	f362 0303 	bfi	r3, r2, #0, #4
 800377e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003780:	7b3b      	ldrb	r3, [r7, #12]
 8003782:	2202      	movs	r2, #2
 8003784:	f362 0303 	bfi	r3, r2, #0, #4
 8003788:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 800378a:	7a7b      	ldrb	r3, [r7, #9]
 800378c:	2208      	movs	r2, #8
 800378e:	f362 0306 	bfi	r3, r2, #0, #7
 8003792:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800379a:	b2da      	uxtb	r2, r3
 800379c:	7a3b      	ldrb	r3, [r7, #8]
 800379e:	f362 0305 	bfi	r3, r2, #0, #6
 80037a2:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80037a4:	7abb      	ldrb	r3, [r7, #10]
 80037a6:	f36f 0301 	bfc	r3, #0, #2
 80037aa:	72bb      	strb	r3, [r7, #10]
            break;
 80037ac:	e044      	b.n	8003838 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80037b2:	7bbb      	ldrb	r3, [r7, #14]
 80037b4:	2206      	movs	r2, #6
 80037b6:	f362 0304 	bfi	r3, r2, #0, #5
 80037ba:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80037bc:	7b7b      	ldrb	r3, [r7, #13]
 80037be:	2201      	movs	r2, #1
 80037c0:	f362 0303 	bfi	r3, r2, #0, #4
 80037c4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80037c6:	7b3b      	ldrb	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f362 0303 	bfi	r3, r2, #0, #4
 80037ce:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80037d0:	7a7b      	ldrb	r3, [r7, #9]
 80037d2:	2207      	movs	r2, #7
 80037d4:	f362 0306 	bfi	r3, r2, #0, #7
 80037d8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	7a3b      	ldrb	r3, [r7, #8]
 80037e4:	f362 0305 	bfi	r3, r2, #0, #6
 80037e8:	723b      	strb	r3, [r7, #8]
            break;
 80037ea:	e025      	b.n	8003838 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
 80037f0:	e042      	b.n	8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80037f6:	7bbb      	ldrb	r3, [r7, #14]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f362 0304 	bfi	r3, r2, #0, #5
 80037fe:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003800:	7b7b      	ldrb	r3, [r7, #13]
 8003802:	f36f 0303 	bfc	r3, #0, #4
 8003806:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003808:	7b3b      	ldrb	r3, [r7, #12]
 800380a:	f36f 0303 	bfc	r3, #0, #4
 800380e:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003810:	7a7b      	ldrb	r3, [r7, #9]
 8003812:	2203      	movs	r2, #3
 8003814:	f362 0306 	bfi	r3, r2, #0, #7
 8003818:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003820:	b2da      	uxtb	r2, r3
 8003822:	7a3b      	ldrb	r3, [r7, #8]
 8003824:	f362 0305 	bfi	r3, r2, #0, #6
 8003828:	723b      	strb	r3, [r7, #8]
            break;
 800382a:	e005      	b.n	8003838 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 800382c:	f04f 33ff 	mov.w	r3, #4294967295
 8003830:	e022      	b.n	8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
 8003836:	e01f      	b.n	8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	79fb      	ldrb	r3, [r7, #7]
 800383c:	2108      	movs	r1, #8
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fe14 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d002      	beq.n	8003856 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8003850:	f06f 0301 	mvn.w	r3, #1
 8003854:	e010      	b.n	8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	210c      	movs	r1, #12
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd fe05 	bl	800146c <DRV_CANFDSPI_WriteWord>
 8003862:	4603      	mov	r3, r0
 8003864:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003866:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 800386e:	f06f 0302 	mvn.w	r3, #2
 8003872:	e001      	b.n	8003878 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8003874:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3718      	adds	r7, #24
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	000e0303 	.word	0x000e0303

08003884 <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	4603      	mov	r3, r0
 800388c:	71fb      	strb	r3, [r7, #7]
 800388e:	460b      	mov	r3, r1
 8003890:	71bb      	strb	r3, [r7, #6]
 8003892:	4613      	mov	r3, r2
 8003894:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003896:	2300      	movs	r3, #0
 8003898:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 800389a:	2300      	movs	r3, #0
 800389c:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 800389e:	f640 6307 	movw	r3, #3591	; 0xe07
 80038a2:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	1cda      	adds	r2, r3, #3
 80038ae:	89b9      	ldrh	r1, [r7, #12]
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fd fc18 	bl	80010e8 <DRV_CANFDSPI_ReadByte>
 80038b8:	4603      	mov	r3, r0
 80038ba:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 80038c4:	f04f 33ff 	mov.w	r3, #4294967295
 80038c8:	e020      	b.n	800390c <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	b2da      	uxtb	r2, r3
 80038d2:	7afb      	ldrb	r3, [r7, #11]
 80038d4:	f362 0300 	bfi	r3, r2, #0, #1
 80038d8:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 80038da:	797b      	ldrb	r3, [r7, #5]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	7afb      	ldrb	r3, [r7, #11]
 80038e4:	f362 0341 	bfi	r3, r2, #1, #1
 80038e8:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 80038ea:	7afa      	ldrb	r2, [r7, #11]
 80038ec:	89b9      	ldrh	r1, [r7, #12]
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fd fc87 	bl	8001204 <DRV_CANFDSPI_WriteByte>
 80038f6:	4603      	mov	r3, r0
 80038f8:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8003902:	f06f 0301 	mvn.w	r3, #1
 8003906:	e001      	b.n	800390c <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	4603      	mov	r3, r0
 800391c:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d802      	bhi.n	800392e <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e02a      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 800392e:	79fb      	ldrb	r3, [r7, #7]
 8003930:	3b09      	subs	r3, #9
 8003932:	2b06      	cmp	r3, #6
 8003934:	d825      	bhi.n	8003982 <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 8003936:	a201      	add	r2, pc, #4	; (adr r2, 800393c <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393c:	08003959 	.word	0x08003959
 8003940:	0800395f 	.word	0x0800395f
 8003944:	08003965 	.word	0x08003965
 8003948:	0800396b 	.word	0x0800396b
 800394c:	08003971 	.word	0x08003971
 8003950:	08003977 	.word	0x08003977
 8003954:	0800397d 	.word	0x0800397d
            case CAN_DLC_12:
                dataBytesInObject = 12;
 8003958:	230c      	movs	r3, #12
 800395a:	60fb      	str	r3, [r7, #12]
                break;
 800395c:	e012      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 800395e:	2310      	movs	r3, #16
 8003960:	60fb      	str	r3, [r7, #12]
                break;
 8003962:	e00f      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8003964:	2314      	movs	r3, #20
 8003966:	60fb      	str	r3, [r7, #12]
                break;
 8003968:	e00c      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 800396a:	2318      	movs	r3, #24
 800396c:	60fb      	str	r3, [r7, #12]
                break;
 800396e:	e009      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8003970:	2320      	movs	r3, #32
 8003972:	60fb      	str	r3, [r7, #12]
                break;
 8003974:	e006      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 8003976:	2330      	movs	r3, #48	; 0x30
 8003978:	60fb      	str	r3, [r7, #12]
                break;
 800397a:	e003      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 800397c:	2340      	movs	r3, #64	; 0x40
 800397e:	60fb      	str	r3, [r7, #12]
                break;
 8003980:	e000      	b.n	8003984 <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8003982:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8003984:	68fb      	ldr	r3, [r7, #12]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop

08003994 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800399c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80039ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4013      	ands	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80039b8:	68fb      	ldr	r3, [r7, #12]
}
 80039ba:	bf00      	nop
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <LL_CRC_ResetCRCCalculationUnit>:
  * @rmtoll CR           RESET         LL_CRC_ResetCRCCalculationUnit
  * @param  CRCx CRC Instance
  * @retval None
  */
__STATIC_INLINE void LL_CRC_ResetCRCCalculationUnit(CRC_TypeDef *CRCx)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  SET_BIT(CRCx->CR, CRC_CR_RESET);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	609a      	str	r2, [r3, #8]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f023 0218 	bic.w	r2, r3, #24
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	615a      	str	r2, [r3, #20]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <LL_CRC_FeedData32>:
  * @param  CRCx CRC Instance
  * @param  InData value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData32(CRC_TypeDef *CRCx, uint32_t InData)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->DR, InData);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	601a      	str	r2, [r3, #0]
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <LL_CRC_FeedData16>:
  * @param  CRCx CRC Instance
  * @param  InData 16 bit value to be provided to CRC calculator between between Min_Data=0 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_CRC_FeedData16(CRC_TypeDef *CRCx, uint16_t InData)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  __IO uint16_t *pReg;

  pReg = (__IO uint16_t *)(__IO void *)(&CRCx->DR);                             /* Derogation MisraC2012 R.11.5 */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	60fb      	str	r3, [r7, #12]
  *pReg = InData;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	801a      	strh	r2, [r3, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <LL_CRC_ReadData16>:
  * @rmtoll DR           DR            LL_CRC_ReadData16
  * @param  CRCx CRC Instance
  * @retval Current CRC calculation result as stored in CRC_DR register (16 bits).
  */
__STATIC_INLINE uint16_t LL_CRC_ReadData16(CRC_TypeDef *CRCx)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  return (uint16_t)READ_REG(CRCx->DR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	b29b      	uxth	r3, r3
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <EE_Init>:
  * @retval EE_Status
  *           - EE_OK in case of success
  *           - EE error code in case of error
  */
EE_Status EE_Init(EE_Erase_type EraseType)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	; 0x40
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	76bb      	strb	r3, [r7, #26]
  uint32_t page = 0U, pageaddress = 0U, varidx = 0U,
 8003a8e:	2300      	movs	r3, #0
 8003a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a92:	2300      	movs	r3, #0
 8003a94:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a96:	2300      	movs	r3, #0
 8003a98:	637b      	str	r3, [r7, #52]	; 0x34
           nbactivepage = 0U, nbactivereceivepage = 0U, nbvalidpage = 0U,
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	62bb      	str	r3, [r7, #40]	; 0x28
           lastvalidpage = 0U, firstvalidpage = 0U,
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aaa:	2300      	movs	r3, #0
 8003aac:	623b      	str	r3, [r7, #32]
           recoverytransfer = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  uint32_t Address = 0U;
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  EE_DATA_TYPE dummy_data[2] = {0, 0};
#endif
  EE_State_Reliability pagestate = STATE_RELIABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	76fb      	strb	r3, [r7, #27]

  EE_Status status = EE_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	81fb      	strh	r3, [r7, #14]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8003ac6:	f001 fd67 	bl	8005598 <FI_CheckBankConfig>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <EE_Init+0x56>
  {
    return EE_INVALID_BANK_CFG;
 8003ad0:	230e      	movs	r3, #14
 8003ad2:	f000 bcb4 	b.w	800443e <EE_Init+0x9be>
  /***************************************************************************/
  /* Step 0: Perform initial configuration     */
  /***************************************************************************/
  /* Configure CRC peripheral for eeprom emulation usage */

  ConfigureCrc();
 8003ad6:	f001 fcbd 	bl	8005454 <ConfigureCrc>
  /* Step 1: Read all lines of the flash pages of eeprom emulation to        */
  /*         delete corrupted lines detectable through NMI                   */
  /***************************************************************************/
  /* We set the flag indicating the cleanup phase is operating to 1 */

  CleanupPhase = 1;
 8003ada:	4b93      	ldr	r3, [pc, #588]	; (8003d28 <EE_Init+0x2a8>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	701a      	strb	r2, [r3, #0]
  
#ifndef STM32C031xx
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003ae0:	4b92      	ldr	r3, [pc, #584]	; (8003d2c <EE_Init+0x2ac>)
 8003ae2:	881b      	ldrh	r3, [r3, #0]
 8003ae4:	029a      	lsls	r2, r3, #10
 8003ae6:	4b92      	ldr	r3, [pc, #584]	; (8003d30 <EE_Init+0x2b0>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003aee:	fbb2 f1f3 	udiv	r1, r2, r3
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	0b1b      	lsrs	r3, r3, #12
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	e02e      	b.n	8003b5c <EE_Init+0xdc>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003b04:	031a      	lsls	r2, r3, #12
 8003b06:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <EE_Init+0x2ac>)
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	0299      	lsls	r1, r3, #10
 8003b0c:	4b88      	ldr	r3, [pc, #544]	; (8003d30 <EE_Init+0x2b0>)
 8003b0e:	400b      	ands	r3, r1
 8003b10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003b14:	fbb1 f1f3 	udiv	r1, r1, r3
 8003b18:	4b84      	ldr	r3, [pc, #528]	; (8003d2c <EE_Init+0x2ac>)
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	0298      	lsls	r0, r3, #10
 8003b1e:	4b84      	ldr	r3, [pc, #528]	; (8003d30 <EE_Init+0x2b0>)
 8003b20:	4003      	ands	r3, r0
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	63bb      	str	r3, [r7, #56]	; 0x38
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b2e:	e00e      	b.n	8003b4e <EE_Init+0xce>
        we save the address read to set its content to 0 in case it triggered an NMI (see NMI_Handler in stm32lxxx_it.c).
        In the rest of the program, we do nothing in case a NMI is triggers by a reading because no NMI should be triggered
        since we have cleanup the EEPROM emulated. By the way, there is still the CRC code associated to each EEPROM line
        that allows to verify its valid state.
      */
      AddressRead = pageaddress + varidx;
 8003b30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b34:	4413      	add	r3, r2
 8003b36:	4a7f      	ldr	r2, [pc, #508]	; (8003d34 <EE_Init+0x2b4>)
 8003b38:	6013      	str	r3, [r2, #0]
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + varidx));
 8003b3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	4413      	add	r3, r2
 8003b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (varidx = 0U; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	3308      	adds	r3, #8
 8003b4c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d3ec      	bcc.n	8003b30 <EE_Init+0xb0>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b58:	3301      	adds	r3, #1
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b5c:	4b73      	ldr	r3, [pc, #460]	; (8003d2c <EE_Init+0x2ac>)
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	029a      	lsls	r2, r3, #10
 8003b62:	4b73      	ldr	r3, [pc, #460]	; (8003d30 <EE_Init+0x2b0>)
 8003b64:	4013      	ands	r3, r2
 8003b66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b6a:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	0b1b      	lsrs	r3, r3, #12
 8003b76:	3304      	adds	r3, #4
 8003b78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d3bf      	bcc.n	8003afe <EE_Init+0x7e>
     EE_DeleteCorruptedFlashAddress(Address);     //Delete corrupted address  
  }
#endif
#endif
  /* We set the flag indicating the cleanup phase is operating to 0 because it just ended */
  CleanupPhase = 0;
 8003b7e:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <EE_Init+0x2a8>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	701a      	strb	r2, [r3, #0]
  /*         present, by setting missing receive page state                  */
  /***************************************************************************/
  /* Check if no active page and no receive page present */
  /* Browse all pages */

  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003b84:	4b69      	ldr	r3, [pc, #420]	; (8003d2c <EE_Init+0x2ac>)
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	029a      	lsls	r2, r3, #10
 8003b8a:	4b69      	ldr	r3, [pc, #420]	; (8003d30 <EE_Init+0x2b0>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b92:	fbb2 f1f3 	udiv	r1, r2, r3
 8003b96:	fb01 f303 	mul.w	r3, r1, r3
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	0b1b      	lsrs	r3, r3, #12
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba0:	e034      	b.n	8003c0c <EE_Init+0x18c>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ba8:	031a      	lsls	r2, r3, #12
 8003baa:	4b60      	ldr	r3, [pc, #384]	; (8003d2c <EE_Init+0x2ac>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	0299      	lsls	r1, r3, #10
 8003bb0:	4b5f      	ldr	r3, [pc, #380]	; (8003d30 <EE_Init+0x2b0>)
 8003bb2:	400b      	ands	r3, r1
 8003bb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003bb8:	fbb1 f1f3 	udiv	r1, r1, r3
 8003bbc:	4b5b      	ldr	r3, [pc, #364]	; (8003d2c <EE_Init+0x2ac>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	0298      	lsls	r0, r3, #10
 8003bc2:	4b5b      	ldr	r3, [pc, #364]	; (8003d30 <EE_Init+0x2b0>)
 8003bc4:	4003      	ands	r3, r0
 8003bc6:	fb01 f303 	mul.w	r3, r1, r3
 8003bca:	4413      	add	r3, r2
 8003bcc:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003bce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003bd0:	f001 fbde 	bl	8005390 <GetPageState>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	76bb      	strb	r3, [r7, #26]

    /* Search for active and receive page */
    if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_RECEIVE))
 8003bd8:	7ebb      	ldrb	r3, [r7, #26]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d002      	beq.n	8003be4 <EE_Init+0x164>
 8003bde:	7ebb      	ldrb	r3, [r7, #26]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d103      	bne.n	8003bec <EE_Init+0x16c>
    {
      nbactivereceivepage++;
 8003be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be6:	3301      	adds	r3, #1
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bea:	e00c      	b.n	8003c06 <EE_Init+0x186>
    }
    /* Keep index of first valid page, and last valid page */
    else if (pagestatus == STATE_PAGE_VALID)
 8003bec:	7ebb      	ldrb	r3, [r7, #26]
 8003bee:	2b03      	cmp	r3, #3
 8003bf0:	d109      	bne.n	8003c06 <EE_Init+0x186>
    {
      if (nbvalidpage == 0U)
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <EE_Init+0x17c>
      {
        firstvalidpage = page;
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfa:	623b      	str	r3, [r7, #32]
      }
      lastvalidpage = page;
 8003bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bfe:	627b      	str	r3, [r7, #36]	; 0x24
      nbvalidpage++;
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	3301      	adds	r3, #1
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	3301      	adds	r3, #1
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c0c:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <EE_Init+0x2ac>)
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	029a      	lsls	r2, r3, #10
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <EE_Init+0x2b0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c1a:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c1e:	fb01 f303 	mul.w	r3, r1, r3
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	0b1b      	lsrs	r3, r3, #12
 8003c26:	3304      	adds	r3, #4
 8003c28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d3b9      	bcc.n	8003ba2 <EE_Init+0x122>
    }
  }

  /* Check if no active and no receive page have been detected */
  if (nbactivereceivepage == 0U)
 8003c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d16a      	bne.n	8003d0a <EE_Init+0x28a>
  {
    /* Check if valid pages have been detected */
    if (nbvalidpage > 0U)
 8003c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d062      	beq.n	8003d00 <EE_Init+0x280>
    {
      /* Check state of page just before first valid page.
      If it is erasing page, then page after last valid page shall be set
      to receiving state */
      if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(firstvalidpage))) == STATE_PAGE_ERASING)
 8003c3a:	4b3c      	ldr	r3, [pc, #240]	; (8003d2c <EE_Init+0x2ac>)
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	029a      	lsls	r2, r3, #10
 8003c40:	4b3b      	ldr	r3, [pc, #236]	; (8003d30 <EE_Init+0x2b0>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c48:	fbb2 f1f3 	udiv	r1, r2, r3
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	0b1b      	lsrs	r3, r3, #12
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	3303      	adds	r3, #3
 8003c5a:	f003 0103 	and.w	r1, r3, #3
 8003c5e:	4b33      	ldr	r3, [pc, #204]	; (8003d2c <EE_Init+0x2ac>)
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	029a      	lsls	r2, r3, #10
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <EE_Init+0x2b0>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003c6c:	fbb2 f0f3 	udiv	r0, r2, r3
 8003c70:	fb00 f303 	mul.w	r3, r0, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	0b1b      	lsrs	r3, r3, #12
 8003c78:	440b      	add	r3, r1
 8003c7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003c7e:	031a      	lsls	r2, r3, #12
 8003c80:	4b2a      	ldr	r3, [pc, #168]	; (8003d2c <EE_Init+0x2ac>)
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	0299      	lsls	r1, r3, #10
 8003c86:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <EE_Init+0x2b0>)
 8003c88:	400b      	ands	r3, r1
 8003c8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003c8e:	fbb1 f1f3 	udiv	r1, r1, r3
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <EE_Init+0x2ac>)
 8003c94:	881b      	ldrh	r3, [r3, #0]
 8003c96:	0298      	lsls	r0, r3, #10
 8003c98:	4b25      	ldr	r3, [pc, #148]	; (8003d30 <EE_Init+0x2b0>)
 8003c9a:	4003      	ands	r3, r0
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 fb74 	bl	8005390 <GetPageState>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d12d      	bne.n	8003d0a <EE_Init+0x28a>
      {
        if (SetPageState(FOLLOWING_PAGE(lastvalidpage), STATE_PAGE_RECEIVE) != EE_OK)
 8003cae:	4b1f      	ldr	r3, [pc, #124]	; (8003d2c <EE_Init+0x2ac>)
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	029a      	lsls	r2, r3, #10
 8003cb4:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <EE_Init+0x2b0>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003cbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	0b1b      	lsrs	r3, r3, #12
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	3301      	adds	r3, #1
 8003cce:	f003 0103 	and.w	r1, r3, #3
 8003cd2:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <EE_Init+0x2ac>)
 8003cd4:	881b      	ldrh	r3, [r3, #0]
 8003cd6:	029a      	lsls	r2, r3, #10
 8003cd8:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <EE_Init+0x2b0>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ce0:	fbb2 f0f3 	udiv	r0, r2, r3
 8003ce4:	fb00 f303 	mul.w	r3, r0, r3
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	0b1b      	lsrs	r3, r3, #12
 8003cec:	440b      	add	r3, r1
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fa8b 	bl	800520c <SetPageState>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <EE_Init+0x28a>
        {
          return EE_WRITE_ERROR;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	e39e      	b.n	800443e <EE_Init+0x9be>
      }
    }
    /* Format flash pages used for eeprom emulation in case no active, no receive, no valid pages are found */
    else
    {
      return EE_Format(EE_FORCED_ERASE);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f000 fba7 	bl	8004454 <EE_Format>
 8003d06:	4603      	mov	r3, r0
 8003d08:	e399      	b.n	800443e <EE_Init+0x9be>
  /* Step 3: Handle case of reset during transfer, by performing       */
  /*         transfer recovery                                         */
  /*********************************************************************/

  /* Browse all pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003d0a:	4b08      	ldr	r3, [pc, #32]	; (8003d2c <EE_Init+0x2ac>)
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	029a      	lsls	r2, r3, #10
 8003d10:	4b07      	ldr	r3, [pc, #28]	; (8003d30 <EE_Init+0x2b0>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d18:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	0b1b      	lsrs	r3, r3, #12
 8003d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d26:	e0de      	b.n	8003ee6 <EE_Init+0x466>
 8003d28:	200003b4 	.word	0x200003b4
 8003d2c:	1fff75e0 	.word	0x1fff75e0
 8003d30:	001ffc00 	.word	0x001ffc00
 8003d34:	200003b0 	.word	0x200003b0
  {
    pageaddress = PAGE_ADDRESS(page);
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003d3e:	031a      	lsls	r2, r3, #12
 8003d40:	4bba      	ldr	r3, [pc, #744]	; (800402c <EE_Init+0x5ac>)
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	0299      	lsls	r1, r3, #10
 8003d46:	4bba      	ldr	r3, [pc, #744]	; (8004030 <EE_Init+0x5b0>)
 8003d48:	400b      	ands	r3, r1
 8003d4a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003d4e:	fbb1 f1f3 	udiv	r1, r1, r3
 8003d52:	4bb6      	ldr	r3, [pc, #728]	; (800402c <EE_Init+0x5ac>)
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	0298      	lsls	r0, r3, #10
 8003d58:	4bb5      	ldr	r3, [pc, #724]	; (8004030 <EE_Init+0x5b0>)
 8003d5a:	4003      	ands	r3, r0
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d66:	f001 fb13 	bl	8005390 <GetPageState>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	76bb      	strb	r3, [r7, #26]

    /* Check if there is receive page, meaning transfer has been interrupted */
    if (pagestatus == STATE_PAGE_RECEIVE)
 8003d6e:	7ebb      	ldrb	r3, [r7, #26]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	f040 80b5 	bne.w	8003ee0 <EE_Init+0x460>
    {
      /* Verify that receive page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003d76:	4bad      	ldr	r3, [pc, #692]	; (800402c <EE_Init+0x5ac>)
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	029a      	lsls	r2, r3, #10
 8003d7c:	4bac      	ldr	r3, [pc, #688]	; (8004030 <EE_Init+0x5b0>)
 8003d7e:	4013      	ands	r3, r2
 8003d80:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d84:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	0b1b      	lsrs	r3, r3, #12
 8003d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d050      	beq.n	8003e38 <EE_Init+0x3b8>
 8003d96:	4ba5      	ldr	r3, [pc, #660]	; (800402c <EE_Init+0x5ac>)
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	029a      	lsls	r2, r3, #10
 8003d9c:	4ba4      	ldr	r3, [pc, #656]	; (8004030 <EE_Init+0x5b0>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003da4:	fbb2 f1f3 	udiv	r1, r2, r3
 8003da8:	fb01 f303 	mul.w	r3, r1, r3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	0b1b      	lsrs	r3, r3, #12
 8003db0:	3302      	adds	r3, #2
 8003db2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d03f      	beq.n	8003e38 <EE_Init+0x3b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003db8:	4b9c      	ldr	r3, [pc, #624]	; (800402c <EE_Init+0x5ac>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	029a      	lsls	r2, r3, #10
 8003dbe:	4b9c      	ldr	r3, [pc, #624]	; (8004030 <EE_Init+0x5b0>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003dc6:	fbb2 f1f3 	udiv	r1, r2, r3
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	0b1b      	lsrs	r3, r3, #12
 8003dd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	3303      	adds	r3, #3
 8003dd8:	f003 0103 	and.w	r1, r3, #3
 8003ddc:	4b93      	ldr	r3, [pc, #588]	; (800402c <EE_Init+0x5ac>)
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	029a      	lsls	r2, r3, #10
 8003de2:	4b93      	ldr	r3, [pc, #588]	; (8004030 <EE_Init+0x5b0>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003dea:	fbb2 f0f3 	udiv	r0, r2, r3
 8003dee:	fb00 f303 	mul.w	r3, r0, r3
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	0b1b      	lsrs	r3, r3, #12
 8003df6:	440b      	add	r3, r1
 8003df8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003dfc:	031a      	lsls	r2, r3, #12
 8003dfe:	4b8b      	ldr	r3, [pc, #556]	; (800402c <EE_Init+0x5ac>)
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	0299      	lsls	r1, r3, #10
 8003e04:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <EE_Init+0x5b0>)
 8003e06:	400b      	ands	r3, r1
 8003e08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003e0c:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e10:	4b86      	ldr	r3, [pc, #536]	; (800402c <EE_Init+0x5ac>)
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	0298      	lsls	r0, r3, #10
 8003e16:	4b86      	ldr	r3, [pc, #536]	; (8004030 <EE_Init+0x5b0>)
 8003e18:	4003      	ands	r3, r0
 8003e1a:	fb01 f303 	mul.w	r3, r1, r3
 8003e1e:	4413      	add	r3, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f001 fab5 	bl	8005390 <GetPageState>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d102      	bne.n	8003e32 <EE_Init+0x3b2>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e30:	e041      	b.n	8003eb6 <EE_Init+0x436>
        }
        else /* Previous page is not valid state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003e32:	2301      	movs	r3, #1
 8003e34:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003e36:	e03e      	b.n	8003eb6 <EE_Init+0x436>
        }
      }
      else /* The receive page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8003e38:	4b7c      	ldr	r3, [pc, #496]	; (800402c <EE_Init+0x5ac>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	029a      	lsls	r2, r3, #10
 8003e3e:	4b7c      	ldr	r3, [pc, #496]	; (8004030 <EE_Init+0x5b0>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e46:	fbb2 f1f3 	udiv	r1, r2, r3
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	0b1b      	lsrs	r3, r3, #12
 8003e52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	3301      	adds	r3, #1
 8003e58:	f003 0103 	and.w	r1, r3, #3
 8003e5c:	4b73      	ldr	r3, [pc, #460]	; (800402c <EE_Init+0x5ac>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	029a      	lsls	r2, r3, #10
 8003e62:	4b73      	ldr	r3, [pc, #460]	; (8004030 <EE_Init+0x5b0>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e6a:	fbb2 f0f3 	udiv	r0, r2, r3
 8003e6e:	fb00 f303 	mul.w	r3, r0, r3
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	0b1b      	lsrs	r3, r3, #12
 8003e76:	440b      	add	r3, r1
 8003e78:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003e7c:	031a      	lsls	r2, r3, #12
 8003e7e:	4b6b      	ldr	r3, [pc, #428]	; (800402c <EE_Init+0x5ac>)
 8003e80:	881b      	ldrh	r3, [r3, #0]
 8003e82:	0299      	lsls	r1, r3, #10
 8003e84:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <EE_Init+0x5b0>)
 8003e86:	400b      	ands	r3, r1
 8003e88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003e8c:	fbb1 f1f3 	udiv	r1, r1, r3
 8003e90:	4b66      	ldr	r3, [pc, #408]	; (800402c <EE_Init+0x5ac>)
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	0298      	lsls	r0, r3, #10
 8003e96:	4b66      	ldr	r3, [pc, #408]	; (8004030 <EE_Init+0x5b0>)
 8003e98:	4003      	ands	r3, r0
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 fa75 	bl	8005390 <GetPageState>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <EE_Init+0x432>
        {
          /* The receive page is a true receive page */
          pagestate = STATE_RELIABLE;
 8003eac:	2300      	movs	r3, #0
 8003eae:	76fb      	strb	r3, [r7, #27]
 8003eb0:	e001      	b.n	8003eb6 <EE_Init+0x436>
        }
        else /* Following page is not erased state */
        {
          /* The receive page is false receive page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the receive page is a true receive page, resume pages transfer */
      if (pagestate == STATE_RELIABLE)
 8003eb6:	7efb      	ldrb	r3, [r7, #27]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d111      	bne.n	8003ee0 <EE_Init+0x460>
      {
        /* Initialize current active page */
        ubCurrentActivePage = page;
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebe:	b2da      	uxtb	r2, r3
 8003ec0:	4b5c      	ldr	r3, [pc, #368]	; (8004034 <EE_Init+0x5b4>)
 8003ec2:	701a      	strb	r2, [r3, #0]

        /* Resume the interrupted page transfer, using dummy new data */
#ifndef FLASH_LINES_128B  
        if (PagesTransfer(0U, 0U, EE_TRANSFER_RECOVER) != EE_CLEANUP_REQUIRED)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f000 fef3 	bl	8004cb4 <PagesTransfer>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed4:	d001      	beq.n	8003eda <EE_Init+0x45a>
        {
          return EE_TRANSFER_ERROR;
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	e2b1      	b.n	800443e <EE_Init+0x9be>
        {
          return EE_TRANSFER_ERROR;
        }
#endif
        /* Memorize transfer recovery occured */
        recoverytransfer = 1U;
 8003eda:	2301      	movs	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]

        /* transfer recovery is done, then stop searching receive page */
        break;
 8003ede:	e014      	b.n	8003f0a <EE_Init+0x48a>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee6:	4b51      	ldr	r3, [pc, #324]	; (800402c <EE_Init+0x5ac>)
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	029a      	lsls	r2, r3, #10
 8003eec:	4b50      	ldr	r3, [pc, #320]	; (8004030 <EE_Init+0x5b0>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003ef4:	fbb2 f1f3 	udiv	r1, r2, r3
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	0b1b      	lsrs	r3, r3, #12
 8003f00:	3304      	adds	r3, #4
 8003f02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f4ff af17 	bcc.w	8003d38 <EE_Init+0x2b8>
  /*         If more than one active page, raise error                 */
  /*         If no active page present, set missing active page        */
  /*********************************************************************/

  /* Browse all pages to search for active pages */
  nbactivepage = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	633b      	str	r3, [r7, #48]	; 0x30
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8003f0e:	4b47      	ldr	r3, [pc, #284]	; (800402c <EE_Init+0x5ac>)
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	029a      	lsls	r2, r3, #10
 8003f14:	4b46      	ldr	r3, [pc, #280]	; (8004030 <EE_Init+0x5b0>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	0b1b      	lsrs	r3, r3, #12
 8003f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2a:	e0dc      	b.n	80040e6 <EE_Init+0x666>
  {
    pageaddress = PAGE_ADDRESS(page);
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003f32:	031a      	lsls	r2, r3, #12
 8003f34:	4b3d      	ldr	r3, [pc, #244]	; (800402c <EE_Init+0x5ac>)
 8003f36:	881b      	ldrh	r3, [r3, #0]
 8003f38:	0299      	lsls	r1, r3, #10
 8003f3a:	4b3d      	ldr	r3, [pc, #244]	; (8004030 <EE_Init+0x5b0>)
 8003f3c:	400b      	ands	r3, r1
 8003f3e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8003f42:	fbb1 f1f3 	udiv	r1, r1, r3
 8003f46:	4b39      	ldr	r3, [pc, #228]	; (800402c <EE_Init+0x5ac>)
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	0298      	lsls	r0, r3, #10
 8003f4c:	4b38      	ldr	r3, [pc, #224]	; (8004030 <EE_Init+0x5b0>)
 8003f4e:	4003      	ands	r3, r0
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	63bb      	str	r3, [r7, #56]	; 0x38
    pagestatus = GetPageState(pageaddress);
 8003f58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f5a:	f001 fa19 	bl	8005390 <GetPageState>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	76bb      	strb	r3, [r7, #26]

    /* Search for active page */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8003f62:	7ebb      	ldrb	r3, [r7, #26]
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	f040 80b6 	bne.w	80040d6 <EE_Init+0x656>
    {
      /* Verify that active page is a true one, not a corrupted page state */
      /* Check if page is not the first page of a bloc */
      if ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <EE_Init+0x5ac>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	029a      	lsls	r2, r3, #10
 8003f70:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <EE_Init+0x5b0>)
 8003f72:	4013      	ands	r3, r2
 8003f74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f78:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	0b1b      	lsrs	r3, r3, #12
 8003f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d056      	beq.n	8004038 <EE_Init+0x5b8>
 8003f8a:	4b28      	ldr	r3, [pc, #160]	; (800402c <EE_Init+0x5ac>)
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	029a      	lsls	r2, r3, #10
 8003f90:	4b27      	ldr	r3, [pc, #156]	; (8004030 <EE_Init+0x5b0>)
 8003f92:	4013      	ands	r3, r2
 8003f94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003f98:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f9c:	fb01 f303 	mul.w	r3, r1, r3
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	0b1b      	lsrs	r3, r3, #12
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d045      	beq.n	8004038 <EE_Init+0x5b8>
      {
        /* Check that previous page is valid state */
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8003fac:	4b1f      	ldr	r3, [pc, #124]	; (800402c <EE_Init+0x5ac>)
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	029a      	lsls	r2, r3, #10
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <EE_Init+0x5b0>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003fba:	fbb2 f1f3 	udiv	r1, r2, r3
 8003fbe:	fb01 f303 	mul.w	r3, r1, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	0b1b      	lsrs	r3, r3, #12
 8003fc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	3303      	adds	r3, #3
 8003fcc:	f003 0103 	and.w	r1, r3, #3
 8003fd0:	4b16      	ldr	r3, [pc, #88]	; (800402c <EE_Init+0x5ac>)
 8003fd2:	881b      	ldrh	r3, [r3, #0]
 8003fd4:	029a      	lsls	r2, r3, #10
 8003fd6:	4b16      	ldr	r3, [pc, #88]	; (8004030 <EE_Init+0x5b0>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003fde:	fbb2 f0f3 	udiv	r0, r2, r3
 8003fe2:	fb00 f303 	mul.w	r3, r0, r3
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	0b1b      	lsrs	r3, r3, #12
 8003fea:	440b      	add	r3, r1
 8003fec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003ff0:	031a      	lsls	r2, r3, #12
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	; (800402c <EE_Init+0x5ac>)
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	0299      	lsls	r1, r3, #10
 8003ff8:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <EE_Init+0x5b0>)
 8003ffa:	400b      	ands	r3, r1
 8003ffc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004000:	fbb1 f1f3 	udiv	r1, r1, r3
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <EE_Init+0x5ac>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	0298      	lsls	r0, r3, #10
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <EE_Init+0x5b0>)
 800400c:	4003      	ands	r3, r0
 800400e:	fb01 f303 	mul.w	r3, r1, r3
 8004012:	4413      	add	r3, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f9bb 	bl	8005390 <GetPageState>
 800401a:	4603      	mov	r3, r0
 800401c:	2b03      	cmp	r3, #3
 800401e:	d102      	bne.n	8004026 <EE_Init+0x5a6>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 8004020:	2300      	movs	r3, #0
 8004022:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 8004024:	e047      	b.n	80040b6 <EE_Init+0x636>
        }
        else /* Previous page is not valid state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 8004026:	2301      	movs	r3, #1
 8004028:	76fb      	strb	r3, [r7, #27]
        if (GetPageState(PAGE_ADDRESS(PREVIOUS_PAGE(page))) == STATE_PAGE_VALID)
 800402a:	e044      	b.n	80040b6 <EE_Init+0x636>
 800402c:	1fff75e0 	.word	0x1fff75e0
 8004030:	001ffc00 	.word	0x001ffc00
 8004034:	200003ae 	.word	0x200003ae
        }
      }
      else /* The active page is the first page of a bloc */
      {
        /* Check that following page is erased state */
        if (GetPageState(PAGE_ADDRESS(FOLLOWING_PAGE(page))) == STATE_PAGE_ERASED)
 8004038:	4b98      	ldr	r3, [pc, #608]	; (800429c <EE_Init+0x81c>)
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	029a      	lsls	r2, r3, #10
 800403e:	4b98      	ldr	r3, [pc, #608]	; (80042a0 <EE_Init+0x820>)
 8004040:	4013      	ands	r3, r2
 8004042:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004046:	fbb2 f1f3 	udiv	r1, r2, r3
 800404a:	fb01 f303 	mul.w	r3, r1, r3
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	0b1b      	lsrs	r3, r3, #12
 8004052:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	3301      	adds	r3, #1
 8004058:	f003 0103 	and.w	r1, r3, #3
 800405c:	4b8f      	ldr	r3, [pc, #572]	; (800429c <EE_Init+0x81c>)
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	029a      	lsls	r2, r3, #10
 8004062:	4b8f      	ldr	r3, [pc, #572]	; (80042a0 <EE_Init+0x820>)
 8004064:	4013      	ands	r3, r2
 8004066:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800406a:	fbb2 f0f3 	udiv	r0, r2, r3
 800406e:	fb00 f303 	mul.w	r3, r0, r3
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	0b1b      	lsrs	r3, r3, #12
 8004076:	440b      	add	r3, r1
 8004078:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800407c:	031a      	lsls	r2, r3, #12
 800407e:	4b87      	ldr	r3, [pc, #540]	; (800429c <EE_Init+0x81c>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	0299      	lsls	r1, r3, #10
 8004084:	4b86      	ldr	r3, [pc, #536]	; (80042a0 <EE_Init+0x820>)
 8004086:	400b      	ands	r3, r1
 8004088:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800408c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004090:	4b82      	ldr	r3, [pc, #520]	; (800429c <EE_Init+0x81c>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	0298      	lsls	r0, r3, #10
 8004096:	4b82      	ldr	r3, [pc, #520]	; (80042a0 <EE_Init+0x820>)
 8004098:	4003      	ands	r3, r0
 800409a:	fb01 f303 	mul.w	r3, r1, r3
 800409e:	4413      	add	r3, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f001 f975 	bl	8005390 <GetPageState>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <EE_Init+0x632>
        {
          /* The active page is a true active page */
          pagestate = STATE_RELIABLE;
 80040ac:	2300      	movs	r3, #0
 80040ae:	76fb      	strb	r3, [r7, #27]
 80040b0:	e001      	b.n	80040b6 <EE_Init+0x636>
        }
        else /* Following page is not erased state */
        {
          /* The active page is false active page due to header corruption */
          pagestate = STATE_CORRUPTED;
 80040b2:	2301      	movs	r3, #1
 80040b4:	76fb      	strb	r3, [r7, #27]
        }
      }

      /* If the active page is a true active page, initialize global variables */
      if (pagestate == STATE_RELIABLE)
 80040b6:	7efb      	ldrb	r3, [r7, #27]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d111      	bne.n	80040e0 <EE_Init+0x660>
      {
        if (nbactivepage == 0U)
 80040bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d107      	bne.n	80040d2 <EE_Init+0x652>
        {
          ubCurrentActivePage = page;
 80040c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	4b77      	ldr	r3, [pc, #476]	; (80042a4 <EE_Init+0x824>)
 80040c8:	701a      	strb	r2, [r3, #0]
          nbactivepage++;
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	3301      	adds	r3, #1
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
 80040d0:	e006      	b.n	80040e0 <EE_Init+0x660>
        }
        else
        {
          /* Error: More than one reliable active page is present */
          return EE_INVALID_PAGE_SEQUENCE;
 80040d2:	230a      	movs	r3, #10
 80040d4:	e1b3      	b.n	800443e <EE_Init+0x9be>
        }
      }
    }
    /* Keep index of last valid page, will be required in case no active page is found */
    else if (pagestatus == STATE_PAGE_VALID)
 80040d6:	7ebb      	ldrb	r3, [r7, #26]
 80040d8:	2b03      	cmp	r3, #3
 80040da:	d101      	bne.n	80040e0 <EE_Init+0x660>
    {
      lastvalidpage = page;
 80040dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80040e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e2:	3301      	adds	r3, #1
 80040e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040e6:	4b6d      	ldr	r3, [pc, #436]	; (800429c <EE_Init+0x81c>)
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	029a      	lsls	r2, r3, #10
 80040ec:	4b6c      	ldr	r3, [pc, #432]	; (80042a0 <EE_Init+0x820>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80040f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80040f8:	fb01 f303 	mul.w	r3, r1, r3
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	0b1b      	lsrs	r3, r3, #12
 8004100:	3304      	adds	r3, #4
 8004102:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004104:	429a      	cmp	r2, r3
 8004106:	f4ff af11 	bcc.w	8003f2c <EE_Init+0x4ac>
    }
  }

  /* In case no active page is found, set page after last valid page to active state */
  if (nbactivepage == 0U)
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	2b00      	cmp	r3, #0
 800410e:	d133      	bne.n	8004178 <EE_Init+0x6f8>
  {
    ubCurrentActivePage = FOLLOWING_PAGE(lastvalidpage);
 8004110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004112:	b2d9      	uxtb	r1, r3
 8004114:	4b61      	ldr	r3, [pc, #388]	; (800429c <EE_Init+0x81c>)
 8004116:	881b      	ldrh	r3, [r3, #0]
 8004118:	029a      	lsls	r2, r3, #10
 800411a:	4b61      	ldr	r3, [pc, #388]	; (80042a0 <EE_Init+0x820>)
 800411c:	4013      	ands	r3, r2
 800411e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004122:	fbb2 f0f3 	udiv	r0, r2, r3
 8004126:	fb00 f303 	mul.w	r3, r0, r3
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	0b1b      	lsrs	r3, r3, #12
 800412e:	b2db      	uxtb	r3, r3
 8004130:	1acb      	subs	r3, r1, r3
 8004132:	b2db      	uxtb	r3, r3
 8004134:	3301      	adds	r3, #1
 8004136:	b2db      	uxtb	r3, r3
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	b2d9      	uxtb	r1, r3
 800413e:	4b57      	ldr	r3, [pc, #348]	; (800429c <EE_Init+0x81c>)
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	029a      	lsls	r2, r3, #10
 8004144:	4b56      	ldr	r3, [pc, #344]	; (80042a0 <EE_Init+0x820>)
 8004146:	4013      	ands	r3, r2
 8004148:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800414c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004150:	fb00 f303 	mul.w	r3, r0, r3
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	0b1b      	lsrs	r3, r3, #12
 8004158:	b2db      	uxtb	r3, r3
 800415a:	440b      	add	r3, r1
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4b51      	ldr	r3, [pc, #324]	; (80042a4 <EE_Init+0x824>)
 8004160:	701a      	strb	r2, [r3, #0]
    if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 8004162:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <EE_Init+0x824>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2102      	movs	r1, #2
 8004168:	4618      	mov	r0, r3
 800416a:	f001 f84f 	bl	800520c <SetPageState>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d001      	beq.n	8004178 <EE_Init+0x6f8>
    {
      return EE_WRITE_ERROR;
 8004174:	2302      	movs	r3, #2
 8004176:	e162      	b.n	800443e <EE_Init+0x9be>
  /* Step 5: Initialize eeprom emulation global variables relative     */
  /*         to active page                                            */
  /*********************************************************************/

  /* Initialize global variables, with elements detected in active page */
  uhNbWrittenElements = 0U;
 8004178:	4b4b      	ldr	r3, [pc, #300]	; (80042a8 <EE_Init+0x828>)
 800417a:	2200      	movs	r2, #0
 800417c:	801a      	strh	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 800417e:	4b4b      	ldr	r3, [pc, #300]	; (80042ac <EE_Init+0x82c>)
 8004180:	2220      	movs	r2, #32
 8004182:	601a      	str	r2, [r3, #0]

  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004184:	2320      	movs	r3, #32
 8004186:	637b      	str	r3, [r7, #52]	; 0x34
 8004188:	e031      	b.n	80041ee <EE_Init+0x76e>
  {
    /* Check elements present in active page */
    addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 800418a:	4b46      	ldr	r3, [pc, #280]	; (80042a4 <EE_Init+0x824>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004192:	031a      	lsls	r2, r3, #12
 8004194:	4b41      	ldr	r3, [pc, #260]	; (800429c <EE_Init+0x81c>)
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	0299      	lsls	r1, r3, #10
 800419a:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <EE_Init+0x820>)
 800419c:	400b      	ands	r3, r1
 800419e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80041a2:	fbb1 f1f3 	udiv	r1, r1, r3
 80041a6:	4b3d      	ldr	r3, [pc, #244]	; (800429c <EE_Init+0x81c>)
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	0298      	lsls	r0, r3, #10
 80041ac:	4b3c      	ldr	r3, [pc, #240]	; (80042a0 <EE_Init+0x820>)
 80041ae:	4003      	ands	r3, r0
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	441a      	add	r2, r3
 80041b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b8:	4413      	add	r3, r2
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
    addressvalue2 = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx + 8));
    if ((addressvalue != EE_MASK_FULL) || (addressvalue2 != EE_MASK_FULL))
#else
    if (addressvalue != EE_MASK_FULL)
 80041c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	bf08      	it	eq
 80041cc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80041d0:	d012      	beq.n	80041f8 <EE_Init+0x778>
#endif
    {
      /* Then increment uhNbWrittenElements and uwAddressNextWrite */
      uhNbWrittenElements++;
 80041d2:	4b35      	ldr	r3, [pc, #212]	; (80042a8 <EE_Init+0x828>)
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	3301      	adds	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	4b33      	ldr	r3, [pc, #204]	; (80042a8 <EE_Init+0x828>)
 80041dc:	801a      	strh	r2, [r3, #0]
      uwAddressNextWrite += EE_ELEMENT_SIZE;
 80041de:	4b33      	ldr	r3, [pc, #204]	; (80042ac <EE_Init+0x82c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3308      	adds	r3, #8
 80041e4:	4a31      	ldr	r2, [pc, #196]	; (80042ac <EE_Init+0x82c>)
 80041e6:	6013      	str	r3, [r2, #0]
  for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 80041e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ea:	3308      	adds	r3, #8
 80041ec:	637b      	str	r3, [r7, #52]	; 0x34
 80041ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d3c9      	bcc.n	800418a <EE_Init+0x70a>
 80041f6:	e000      	b.n	80041fa <EE_Init+0x77a>
    }
    else /* no more element in the page */
    {
      break;
 80041f8:	bf00      	nop
  /*         to valid pages, and check consistency of pages sequence   */
  /*********************************************************************/

  /* Check consistency of pages sequence: one active page, optionnally some valid pages before */
  /* Update global variable uhNbWrittenElements if valid pages are found */
  page = ubCurrentActivePage;
 80041fa:	4b2a      	ldr	r3, [pc, #168]	; (80042a4 <EE_Init+0x824>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  firstvalidpage = ubCurrentActivePage;
 8004200:	4b28      	ldr	r3, [pc, #160]	; (80042a4 <EE_Init+0x824>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	623b      	str	r3, [r7, #32]
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 8004206:	e053      	b.n	80042b0 <EE_Init+0x830>
  {
    /* Decrement page index among circular pages list */
    page = PREVIOUS_PAGE(page);
 8004208:	4b24      	ldr	r3, [pc, #144]	; (800429c <EE_Init+0x81c>)
 800420a:	881b      	ldrh	r3, [r3, #0]
 800420c:	029a      	lsls	r2, r3, #10
 800420e:	4b24      	ldr	r3, [pc, #144]	; (80042a0 <EE_Init+0x820>)
 8004210:	4013      	ands	r3, r2
 8004212:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004216:	fbb2 f1f3 	udiv	r1, r2, r3
 800421a:	fb01 f303 	mul.w	r3, r1, r3
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	0b1b      	lsrs	r3, r3, #12
 8004222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	3303      	adds	r3, #3
 8004228:	f003 0103 	and.w	r1, r3, #3
 800422c:	4b1b      	ldr	r3, [pc, #108]	; (800429c <EE_Init+0x81c>)
 800422e:	881b      	ldrh	r3, [r3, #0]
 8004230:	029a      	lsls	r2, r3, #10
 8004232:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <EE_Init+0x820>)
 8004234:	4013      	ands	r3, r2
 8004236:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800423a:	fbb2 f0f3 	udiv	r0, r2, r3
 800423e:	fb00 f303 	mul.w	r3, r0, r3
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	0b1b      	lsrs	r3, r3, #12
 8004246:	440b      	add	r3, r1
 8004248:	63fb      	str	r3, [r7, #60]	; 0x3c
    pagestatus = GetPageState(PAGE_ADDRESS(page));
 800424a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800424c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004250:	031a      	lsls	r2, r3, #12
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <EE_Init+0x81c>)
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	0299      	lsls	r1, r3, #10
 8004258:	4b11      	ldr	r3, [pc, #68]	; (80042a0 <EE_Init+0x820>)
 800425a:	400b      	ands	r3, r1
 800425c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004260:	fbb1 f1f3 	udiv	r1, r1, r3
 8004264:	4b0d      	ldr	r3, [pc, #52]	; (800429c <EE_Init+0x81c>)
 8004266:	881b      	ldrh	r3, [r3, #0]
 8004268:	0298      	lsls	r0, r3, #10
 800426a:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <EE_Init+0x820>)
 800426c:	4003      	ands	r3, r0
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f88b 	bl	8005390 <GetPageState>
 800427a:	4603      	mov	r3, r0
 800427c:	76bb      	strb	r3, [r7, #26]

    /* Check if page is valid state */
    if (pagestatus == STATE_PAGE_VALID)
 800427e:	7ebb      	ldrb	r3, [r7, #26]
 8004280:	2b03      	cmp	r3, #3
 8004282:	d109      	bne.n	8004298 <EE_Init+0x818>
    {
      /* Update uhNbWrittenElements with number of elements in full page */
      uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8004284:	4b08      	ldr	r3, [pc, #32]	; (80042a8 <EE_Init+0x828>)
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800428c:	b29a      	uxth	r2, r3
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <EE_Init+0x828>)
 8004290:	801a      	strh	r2, [r3, #0]

      /* Keep index of first valid page */
      firstvalidpage = page;
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	e00b      	b.n	80042b0 <EE_Init+0x830>
    }
    else
    {
      /* Error: Pages sequence is not consistent */
      return EE_INVALID_PAGE_SEQUENCE;
 8004298:	230a      	movs	r3, #10
 800429a:	e0d0      	b.n	800443e <EE_Init+0x9be>
 800429c:	1fff75e0 	.word	0x1fff75e0
 80042a0:	001ffc00 	.word	0x001ffc00
 80042a4:	200003ae 	.word	0x200003ae
 80042a8:	200003ac 	.word	0x200003ac
 80042ac:	20000008 	.word	0x20000008
  while ((page != START_PAGE) && (page != (uint32_t)(START_PAGE + (PAGES_NUMBER / 2U))))
 80042b0:	4b65      	ldr	r3, [pc, #404]	; (8004448 <EE_Init+0x9c8>)
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	029a      	lsls	r2, r3, #10
 80042b6:	4b65      	ldr	r3, [pc, #404]	; (800444c <EE_Init+0x9cc>)
 80042b8:	4013      	ands	r3, r2
 80042ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042be:	fbb2 f1f3 	udiv	r1, r2, r3
 80042c2:	fb01 f303 	mul.w	r3, r1, r3
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	0b1b      	lsrs	r3, r3, #12
 80042ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d010      	beq.n	80042f2 <EE_Init+0x872>
 80042d0:	4b5d      	ldr	r3, [pc, #372]	; (8004448 <EE_Init+0x9c8>)
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	029a      	lsls	r2, r3, #10
 80042d6:	4b5d      	ldr	r3, [pc, #372]	; (800444c <EE_Init+0x9cc>)
 80042d8:	4013      	ands	r3, r2
 80042da:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80042de:	fbb2 f1f3 	udiv	r1, r2, r3
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	0b1b      	lsrs	r3, r3, #12
 80042ea:	3302      	adds	r3, #2
 80042ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d18a      	bne.n	8004208 <EE_Init+0x788>
  /*********************************************************************/
  /* Step 7: Ensure empty pages are erased                             */
  /*********************************************************************/

  /* Ensure all pages after active page, until first valid page, are erased */
  page = FOLLOWING_PAGE(ubCurrentActivePage);
 80042f2:	4b57      	ldr	r3, [pc, #348]	; (8004450 <EE_Init+0x9d0>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	4b53      	ldr	r3, [pc, #332]	; (8004448 <EE_Init+0x9c8>)
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	029a      	lsls	r2, r3, #10
 80042fe:	4b53      	ldr	r3, [pc, #332]	; (800444c <EE_Init+0x9cc>)
 8004300:	4013      	ands	r3, r2
 8004302:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004306:	fbb2 f1f3 	udiv	r1, r2, r3
 800430a:	fb01 f303 	mul.w	r3, r1, r3
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	0b1b      	lsrs	r3, r3, #12
 8004312:	1ac3      	subs	r3, r0, r3
 8004314:	3301      	adds	r3, #1
 8004316:	f003 0103 	and.w	r1, r3, #3
 800431a:	4b4b      	ldr	r3, [pc, #300]	; (8004448 <EE_Init+0x9c8>)
 800431c:	881b      	ldrh	r3, [r3, #0]
 800431e:	029a      	lsls	r2, r3, #10
 8004320:	4b4a      	ldr	r3, [pc, #296]	; (800444c <EE_Init+0x9cc>)
 8004322:	4013      	ands	r3, r2
 8004324:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004328:	fbb2 f0f3 	udiv	r0, r2, r3
 800432c:	fb00 f303 	mul.w	r3, r0, r3
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	0b1b      	lsrs	r3, r3, #12
 8004334:	440b      	add	r3, r1
 8004336:	63fb      	str	r3, [r7, #60]	; 0x3c
  pageaddress = PAGE_ADDRESS(page);
 8004338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800433a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800433e:	031a      	lsls	r2, r3, #12
 8004340:	4b41      	ldr	r3, [pc, #260]	; (8004448 <EE_Init+0x9c8>)
 8004342:	881b      	ldrh	r3, [r3, #0]
 8004344:	0299      	lsls	r1, r3, #10
 8004346:	4b41      	ldr	r3, [pc, #260]	; (800444c <EE_Init+0x9cc>)
 8004348:	400b      	ands	r3, r1
 800434a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800434e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004352:	4b3d      	ldr	r3, [pc, #244]	; (8004448 <EE_Init+0x9c8>)
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	0298      	lsls	r0, r3, #10
 8004358:	4b3c      	ldr	r3, [pc, #240]	; (800444c <EE_Init+0x9cc>)
 800435a:	4003      	ands	r3, r0
 800435c:	fb01 f303 	mul.w	r3, r1, r3
 8004360:	4413      	add	r3, r2
 8004362:	63bb      	str	r3, [r7, #56]	; 0x38

  while (page != firstvalidpage)
 8004364:	e053      	b.n	800440e <EE_Init+0x98e>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d108      	bne.n	800437e <EE_Init+0x8fe>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 800436c:	2101      	movs	r1, #1
 800436e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004370:	f001 f8b1 	bl	80054d6 <FI_PageErase>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d012      	beq.n	80043a0 <EE_Init+0x920>
      {
        return EE_ERASE_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e05f      	b.n	800443e <EE_Init+0x9be>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if page is fully erased */
      if (VerifyPageFullyErased(pageaddress, PAGE_SIZE) == EE_PAGE_NOTERASED)
 800437e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004382:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004384:	f000 fb5d 	bl	8004a42 <VerifyPageFullyErased>
 8004388:	4603      	mov	r3, r0
 800438a:	2b10      	cmp	r3, #16
 800438c:	d108      	bne.n	80043a0 <EE_Init+0x920>
      {
        /* Erase pages if not fully erased */
        if (FI_PageErase(page, 1U) != EE_OK)
 800438e:	2101      	movs	r1, #1
 8004390:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004392:	f001 f8a0 	bl	80054d6 <FI_PageErase>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <EE_Init+0x920>
        {
          return EE_ERASE_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e04e      	b.n	800443e <EE_Init+0x9be>
        }
      }
    }

    /* Increment page index among circular pages list, to get first page to erased */
    page = FOLLOWING_PAGE(page);
 80043a0:	4b29      	ldr	r3, [pc, #164]	; (8004448 <EE_Init+0x9c8>)
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	029a      	lsls	r2, r3, #10
 80043a6:	4b29      	ldr	r3, [pc, #164]	; (800444c <EE_Init+0x9cc>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043ae:	fbb2 f1f3 	udiv	r1, r2, r3
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	0b1b      	lsrs	r3, r3, #12
 80043ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f003 0103 	and.w	r1, r3, #3
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <EE_Init+0x9c8>)
 80043c6:	881b      	ldrh	r3, [r3, #0]
 80043c8:	029a      	lsls	r2, r3, #10
 80043ca:	4b20      	ldr	r3, [pc, #128]	; (800444c <EE_Init+0x9cc>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80043d2:	fbb2 f0f3 	udiv	r0, r2, r3
 80043d6:	fb00 f303 	mul.w	r3, r0, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	0b1b      	lsrs	r3, r3, #12
 80043de:	440b      	add	r3, r1
 80043e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    pageaddress = PAGE_ADDRESS(page);
 80043e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80043e8:	031a      	lsls	r2, r3, #12
 80043ea:	4b17      	ldr	r3, [pc, #92]	; (8004448 <EE_Init+0x9c8>)
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	0299      	lsls	r1, r3, #10
 80043f0:	4b16      	ldr	r3, [pc, #88]	; (800444c <EE_Init+0x9cc>)
 80043f2:	400b      	ands	r3, r1
 80043f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80043f8:	fbb1 f1f3 	udiv	r1, r1, r3
 80043fc:	4b12      	ldr	r3, [pc, #72]	; (8004448 <EE_Init+0x9c8>)
 80043fe:	881b      	ldrh	r3, [r3, #0]
 8004400:	0298      	lsls	r0, r3, #10
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <EE_Init+0x9cc>)
 8004404:	4003      	ands	r3, r0
 8004406:	fb01 f303 	mul.w	r3, r1, r3
 800440a:	4413      	add	r3, r2
 800440c:	63bb      	str	r3, [r7, #56]	; 0x38
  while (page != firstvalidpage)
 800440e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	429a      	cmp	r2, r3
 8004414:	d1a7      	bne.n	8004366 <EE_Init+0x8e6>
  }
 
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 8004416:	f001 f89d 	bl	8005554 <FI_CacheFlush>
  /*         instability of line value 0xFFFFFFFF consecutive to a     */
  /*         reset during write here                                   */
  /*         Only needed if recovery transfer did not occured          */
  /*********************************************************************/

if (recoverytransfer == 0U)
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <EE_Init+0x9bc>
#else
#ifdef FLASH_LINES_128B
    uint64_t to_write[2] = {0};
    status = VerifyPagesFullWriteVariable(0U, to_write, EE_INIT_WRITE);
#else
    status = VerifyPagesFullWriteVariable(0U, 0U);
 8004420:	2100      	movs	r1, #0
 8004422:	2000      	movs	r0, #0
 8004424:	f000 fe6c 	bl	8005100 <VerifyPagesFullWriteVariable>
 8004428:	4603      	mov	r3, r0
 800442a:	81fb      	strh	r3, [r7, #14]
#endif
    // The dummy write can be skipped in case pages are full
     //  because in this case potential instability can not happen 
    if ((status != EE_OK) && (status != EE_PAGE_FULL))
 800442c:	89fb      	ldrh	r3, [r7, #14]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d004      	beq.n	800443c <EE_Init+0x9bc>
 8004432:	89fb      	ldrh	r3, [r7, #14]
 8004434:	2b12      	cmp	r3, #18
 8004436:	d001      	beq.n	800443c <EE_Init+0x9bc>
    {
      return EE_WRITE_ERROR;
 8004438:	2302      	movs	r3, #2
 800443a:	e000      	b.n	800443e <EE_Init+0x9be>
    }
#endif
  }

  return EE_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3740      	adds	r7, #64	; 0x40
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	1fff75e0 	.word	0x1fff75e0
 800444c:	001ffc00 	.word	0x001ffc00
 8004450:	200003ae 	.word	0x200003ae

08004454 <EE_Format>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status EE_Format(EE_Erase_type EraseType)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	4603      	mov	r3, r0
 800445c:	71fb      	strb	r3, [r7, #7]
  uint32_t page = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]

  /* Check if the configuration is 128-bits bank or 2*64-bits bank */
  if (FI_CheckBankConfig() != EE_OK)
 8004462:	f001 f899 	bl	8005598 <FI_CheckBankConfig>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <EE_Format+0x1c>
  {
    return EE_INVALID_BANK_CFG;
 800446c:	230e      	movs	r3, #14
 800446e:	e083      	b.n	8004578 <EE_Format+0x124>
  /* Inform CPU2 about Erase Activity */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
  
  /* Erase All Pages */
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 8004470:	4b43      	ldr	r3, [pc, #268]	; (8004580 <EE_Format+0x12c>)
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	029a      	lsls	r2, r3, #10
 8004476:	4b43      	ldr	r3, [pc, #268]	; (8004584 <EE_Format+0x130>)
 8004478:	4013      	ands	r3, r2
 800447a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800447e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	0b1b      	lsrs	r3, r3, #12
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	e034      	b.n	80044f8 <EE_Format+0xa4>
  {
    /* Check if page erase has to be forced unconditionally (default case) */
    if (EraseType == EE_FORCED_ERASE)
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d108      	bne.n	80044a6 <EE_Format+0x52>
    {
      /* Force page erase independently of its content */
      if (FI_PageErase(page, 1U) != EE_OK)
 8004494:	2101      	movs	r1, #1
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f001 f81d 	bl	80054d6 <FI_PageErase>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d027      	beq.n	80044f2 <EE_Format+0x9e>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e068      	b.n	8004578 <EE_Format+0x124>
      }
    }
    else /* EraseType == EE_CONDITIONAL_ERASE */
    {
      /* Check if Page is not yet fully erased */
      if (VerifyPageFullyErased(PAGE_ADDRESS(page), PAGE_SIZE) == EE_PAGE_NOTERASED)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80044ac:	031a      	lsls	r2, r3, #12
 80044ae:	4b34      	ldr	r3, [pc, #208]	; (8004580 <EE_Format+0x12c>)
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	0299      	lsls	r1, r3, #10
 80044b4:	4b33      	ldr	r3, [pc, #204]	; (8004584 <EE_Format+0x130>)
 80044b6:	400b      	ands	r3, r1
 80044b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80044bc:	fbb1 f1f3 	udiv	r1, r1, r3
 80044c0:	4b2f      	ldr	r3, [pc, #188]	; (8004580 <EE_Format+0x12c>)
 80044c2:	881b      	ldrh	r3, [r3, #0]
 80044c4:	0298      	lsls	r0, r3, #10
 80044c6:	4b2f      	ldr	r3, [pc, #188]	; (8004584 <EE_Format+0x130>)
 80044c8:	4003      	ands	r3, r0
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fab4 	bl	8004a42 <VerifyPageFullyErased>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b10      	cmp	r3, #16
 80044de:	d108      	bne.n	80044f2 <EE_Format+0x9e>
      {
        /* Erase the page */
        /* If Erase operation was failed, a Flash error code is returned */
        if (FI_PageErase(page, 1U) != EE_OK)
 80044e0:	2101      	movs	r1, #1
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f000 fff7 	bl	80054d6 <FI_PageErase>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <EE_Format+0x9e>
        {
#ifdef DUALCORE_FLASH_SHARING
          /* Inform CPU2 about end of Erase Activity */
          SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
          return EE_ERASE_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e042      	b.n	8004578 <EE_Format+0x124>
  for (page = START_PAGE; page < (START_PAGE + PAGES_NUMBER); page++)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	4b21      	ldr	r3, [pc, #132]	; (8004580 <EE_Format+0x12c>)
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	029a      	lsls	r2, r3, #10
 80044fe:	4b21      	ldr	r3, [pc, #132]	; (8004584 <EE_Format+0x130>)
 8004500:	4013      	ands	r3, r2
 8004502:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004506:	fbb2 f1f3 	udiv	r1, r2, r3
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	0b1b      	lsrs	r3, r3, #12
 8004512:	3304      	adds	r3, #4
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	429a      	cmp	r2, r3
 8004518:	d3b9      	bcc.n	800448e <EE_Format+0x3a>
      }
    }
  }
  
  /* To keep their coherency, flush the caches if needed depending on the product */
  FI_CacheFlush();
 800451a:	f001 f81b 	bl	8005554 <FI_CacheFlush>
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif

  /* Set first Page in Active State */
  /* If program operation was failed, a Flash error code is returned */
  if (SetPageState(START_PAGE, STATE_PAGE_ACTIVE) != EE_OK)
 800451e:	4b18      	ldr	r3, [pc, #96]	; (8004580 <EE_Format+0x12c>)
 8004520:	881b      	ldrh	r3, [r3, #0]
 8004522:	029a      	lsls	r2, r3, #10
 8004524:	4b17      	ldr	r3, [pc, #92]	; (8004584 <EE_Format+0x130>)
 8004526:	4013      	ands	r3, r2
 8004528:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800452c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	0b1b      	lsrs	r3, r3, #12
 8004538:	2102      	movs	r1, #2
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fe66 	bl	800520c <SetPageState>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <EE_Format+0xf6>
  {
    return EE_WRITE_ERROR;
 8004546:	2302      	movs	r3, #2
 8004548:	e016      	b.n	8004578 <EE_Format+0x124>
  }

  /* Reset global variables */
  uhNbWrittenElements = (uint16_t)0U;
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <EE_Format+0x134>)
 800454c:	2200      	movs	r2, #0
 800454e:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = START_PAGE;
 8004550:	4b0b      	ldr	r3, [pc, #44]	; (8004580 <EE_Format+0x12c>)
 8004552:	881b      	ldrh	r3, [r3, #0]
 8004554:	029a      	lsls	r2, r3, #10
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <EE_Format+0x130>)
 8004558:	4013      	ands	r3, r2
 800455a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800455e:	fbb2 f1f3 	udiv	r1, r2, r3
 8004562:	fb01 f303 	mul.w	r3, r1, r3
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	0b1b      	lsrs	r3, r3, #12
 800456a:	b2da      	uxtb	r2, r3
 800456c:	4b07      	ldr	r3, [pc, #28]	; (800458c <EE_Format+0x138>)
 800456e:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE; /* Initialize write position just after page header */
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <EE_Format+0x13c>)
 8004572:	2220      	movs	r2, #32
 8004574:	601a      	str	r2, [r3, #0]

  return EE_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	1fff75e0 	.word	0x1fff75e0
 8004584:	001ffc00 	.word	0x001ffc00
 8004588:	200003ac 	.word	0x200003ac
 800458c:	200003ae 	.word	0x200003ae
 8004590:	20000008 	.word	0x20000008

08004594 <EE_ReadVariable32bits>:
  * @retval EE_Status
  *           - EE_OK: if variable was found
  *           - EE error code: if an error occurs
  */
EE_Status EE_ReadVariable32bits(uint16_t VirtAddress, uint32_t* pData)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80045a0:	88fb      	ldrh	r3, [r7, #6]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <EE_ReadVariable32bits+0x40>
 80045a6:	88fb      	ldrh	r3, [r7, #6]
 80045a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d011      	beq.n	80045d4 <EE_ReadVariable32bits+0x40>
  {
    EE_DATA_TYPE datatmp = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60bb      	str	r3, [r7, #8]
    EE_Status status = EE_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	81fb      	strh	r3, [r7, #14]

    /* Read variable of size EE_DATA_TYPE, then cast it to 32bits */
    status = ReadVariable(VirtAddress, &datatmp);
 80045b8:	f107 0208 	add.w	r2, r7, #8
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	4611      	mov	r1, r2
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f94b 	bl	800485c <ReadVariable>
 80045c6:	4603      	mov	r3, r0
 80045c8:	81fb      	strh	r3, [r7, #14]
    *pData = (uint32_t) datatmp;
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	601a      	str	r2, [r3, #0]

    return status;
 80045d0:	89fb      	ldrh	r3, [r7, #14]
 80045d2:	e000      	b.n	80045d6 <EE_ReadVariable32bits+0x42>
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 80045d4:	2308      	movs	r3, #8
  } 
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <EE_WriteVariable32bits>:
  *           - EE_OK: on success
  *           - EE_CLEANUP_REQUIRED: success and user has to trig flash pages cleanup
  *           - EE error code: if an error occurs
  */
EE_Status EE_WriteVariable32bits(uint16_t VirtAddress, uint32_t Data)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	4603      	mov	r3, r0
 80045e6:	6039      	str	r1, [r7, #0]
 80045e8:	80fb      	strh	r3, [r7, #6]
  if((VirtAddress != 0x0000) && (VirtAddress != 0xFFFF))
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00b      	beq.n	8004608 <EE_WriteVariable32bits+0x2a>
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d006      	beq.n	8004608 <EE_WriteVariable32bits+0x2a>
  {
#ifndef FLASH_LINES_128B
    return WriteVariable(VirtAddress, (EE_DATA_TYPE) Data);
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fa00 	bl	8004a04 <WriteVariable>
 8004604:	4603      	mov	r3, r0
 8004606:	e000      	b.n	800460a <EE_WriteVariable32bits+0x2c>
    return WriteVariable(VirtAddress, (EE_DATA_TYPE*) &Data);
#endif
  }
  else
  {
    return EE_INVALID_VIRTUALADDRESS;
 8004608:	2308      	movs	r3, #8
  } 
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <EE_CleanUp>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800461a:	2300      	movs	r3, #0
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800462a:	2305      	movs	r3, #5
 800462c:	71fb      	strb	r3, [r7, #7]
 800462e:	2305      	movs	r3, #5
 8004630:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004632:	4b3f      	ldr	r3, [pc, #252]	; (8004730 <EE_CleanUp+0x11c>)
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	029a      	lsls	r2, r3, #10
 8004638:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <EE_CleanUp+0x120>)
 800463a:	4013      	ands	r3, r2
 800463c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004640:	fbb2 f1f3 	udiv	r1, r2, r3
 8004644:	fb01 f303 	mul.w	r3, r1, r3
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	0b1b      	lsrs	r3, r3, #12
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e059      	b.n	8004704 <EE_CleanUp+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004656:	031a      	lsls	r2, r3, #12
 8004658:	4b35      	ldr	r3, [pc, #212]	; (8004730 <EE_CleanUp+0x11c>)
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	0299      	lsls	r1, r3, #10
 800465e:	4b35      	ldr	r3, [pc, #212]	; (8004734 <EE_CleanUp+0x120>)
 8004660:	400b      	ands	r3, r1
 8004662:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004666:	fbb1 f1f3 	udiv	r1, r1, r3
 800466a:	4b31      	ldr	r3, [pc, #196]	; (8004730 <EE_CleanUp+0x11c>)
 800466c:	881b      	ldrh	r3, [r3, #0]
 800466e:	0298      	lsls	r0, r3, #10
 8004670:	4b30      	ldr	r3, [pc, #192]	; (8004734 <EE_CleanUp+0x120>)
 8004672:	4003      	ands	r3, r0
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	4413      	add	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 fe87 	bl	8005390 <GetPageState>
 8004682:	4603      	mov	r3, r0
 8004684:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	2b04      	cmp	r3, #4
 800468a:	d138      	bne.n	80046fe <EE_CleanUp+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3301      	adds	r3, #1
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e022      	b.n	80046da <EE_CleanUp+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800469a:	031a      	lsls	r2, r3, #12
 800469c:	4b24      	ldr	r3, [pc, #144]	; (8004730 <EE_CleanUp+0x11c>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	0299      	lsls	r1, r3, #10
 80046a2:	4b24      	ldr	r3, [pc, #144]	; (8004734 <EE_CleanUp+0x120>)
 80046a4:	400b      	ands	r3, r1
 80046a6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80046aa:	fbb1 f1f3 	udiv	r1, r1, r3
 80046ae:	4b20      	ldr	r3, [pc, #128]	; (8004730 <EE_CleanUp+0x11c>)
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	0298      	lsls	r0, r3, #10
 80046b4:	4b1f      	ldr	r3, [pc, #124]	; (8004734 <EE_CleanUp+0x120>)
 80046b6:	4003      	ands	r3, r0
 80046b8:	fb01 f303 	mul.w	r3, r1, r3
 80046bc:	4413      	add	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80046c0:	68b8      	ldr	r0, [r7, #8]
 80046c2:	f000 fe65 	bl	8005390 <GetPageState>
 80046c6:	4603      	mov	r3, r0
 80046c8:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80046ca:	79bb      	ldrb	r3, [r7, #6]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d001      	beq.n	80046d4 <EE_CleanUp+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 80046d0:	2305      	movs	r3, #5
 80046d2:	e029      	b.n	8004728 <EE_CleanUp+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	3301      	adds	r3, #1
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	3302      	adds	r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d3d7      	bcc.n	8004694 <EE_CleanUp+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif

      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 80046e4:	2102      	movs	r1, #2
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f000 fef5 	bl	80054d6 <FI_PageErase>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <EE_CleanUp+0xe2>
      {
#ifdef DUALCORE_FLASH_SHARING
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        return EE_ERASE_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e018      	b.n	8004728 <EE_CleanUp+0x114>
        /* Inform CPU2 about end of Erase Activity */
        SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
#endif
        
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 80046f6:	f000 ff2d 	bl	8005554 <FI_CacheFlush>
        
        return EE_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	e014      	b.n	8004728 <EE_CleanUp+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	3302      	adds	r3, #2
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	4b0a      	ldr	r3, [pc, #40]	; (8004730 <EE_CleanUp+0x11c>)
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	029a      	lsls	r2, r3, #10
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <EE_CleanUp+0x120>)
 800470c:	4013      	ands	r3, r2
 800470e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004712:	fbb2 f1f3 	udiv	r1, r2, r3
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	0b1b      	lsrs	r3, r3, #12
 800471e:	3304      	adds	r3, #4
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d394      	bcc.n	8004650 <EE_CleanUp+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 8004726:	2305      	movs	r3, #5
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	1fff75e0 	.word	0x1fff75e0
 8004734:	001ffc00 	.word	0x001ffc00

08004738 <EE_CleanUp_IT>:
  * @retval EE_Status
  *           - EE_OK: in case of success
  *           - EE error code: if an error occurs
  */
EE_Status EE_CleanUp_IT(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
  uint32_t firstpage = 0U, page = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	2300      	movs	r3, #0
 8004744:	613b      	str	r3, [r7, #16]
  uint32_t firstpageaddress = 0U, pageaddress = 0U;
 8004746:	2300      	movs	r3, #0
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
  EE_State_type firstpagestatus = STATE_PAGE_INVALID, pagestatus = STATE_PAGE_INVALID;
 800474e:	2305      	movs	r3, #5
 8004750:	71fb      	strb	r3, [r7, #7]
 8004752:	2305      	movs	r3, #5
 8004754:	71bb      	strb	r3, [r7, #6]

  /* Check first half and second half page group */
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004756:	4b3f      	ldr	r3, [pc, #252]	; (8004854 <EE_CleanUp_IT+0x11c>)
 8004758:	881b      	ldrh	r3, [r3, #0]
 800475a:	029a      	lsls	r2, r3, #10
 800475c:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <EE_CleanUp_IT+0x120>)
 800475e:	4013      	ands	r3, r2
 8004760:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004764:	fbb2 f1f3 	udiv	r1, r2, r3
 8004768:	fb01 f303 	mul.w	r3, r1, r3
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	0b1b      	lsrs	r3, r3, #12
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	e059      	b.n	8004828 <EE_CleanUp_IT+0xf0>
  {
    /* Check status of first page of the group */
    firstpageaddress = PAGE_ADDRESS(firstpage);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800477a:	031a      	lsls	r2, r3, #12
 800477c:	4b35      	ldr	r3, [pc, #212]	; (8004854 <EE_CleanUp_IT+0x11c>)
 800477e:	881b      	ldrh	r3, [r3, #0]
 8004780:	0299      	lsls	r1, r3, #10
 8004782:	4b35      	ldr	r3, [pc, #212]	; (8004858 <EE_CleanUp_IT+0x120>)
 8004784:	400b      	ands	r3, r1
 8004786:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800478a:	fbb1 f1f3 	udiv	r1, r1, r3
 800478e:	4b31      	ldr	r3, [pc, #196]	; (8004854 <EE_CleanUp_IT+0x11c>)
 8004790:	881b      	ldrh	r3, [r3, #0]
 8004792:	0298      	lsls	r0, r3, #10
 8004794:	4b30      	ldr	r3, [pc, #192]	; (8004858 <EE_CleanUp_IT+0x120>)
 8004796:	4003      	ands	r3, r0
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
    firstpagestatus = GetPageState(firstpageaddress);
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 fdf5 	bl	8005390 <GetPageState>
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]

    /* If first page of the group is erasing state, check that all other pages
    of the group are also erasing state */
    if (firstpagestatus == STATE_PAGE_ERASING)
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	2b04      	cmp	r3, #4
 80047ae:	d138      	bne.n	8004822 <EE_CleanUp_IT+0xea>
    {
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	3301      	adds	r3, #1
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	e022      	b.n	80047fe <EE_CleanUp_IT+0xc6>
      {
        pageaddress = PAGE_ADDRESS(page);
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80047be:	031a      	lsls	r2, r3, #12
 80047c0:	4b24      	ldr	r3, [pc, #144]	; (8004854 <EE_CleanUp_IT+0x11c>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	0299      	lsls	r1, r3, #10
 80047c6:	4b24      	ldr	r3, [pc, #144]	; (8004858 <EE_CleanUp_IT+0x120>)
 80047c8:	400b      	ands	r3, r1
 80047ca:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80047ce:	fbb1 f1f3 	udiv	r1, r1, r3
 80047d2:	4b20      	ldr	r3, [pc, #128]	; (8004854 <EE_CleanUp_IT+0x11c>)
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	0298      	lsls	r0, r3, #10
 80047d8:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <EE_CleanUp_IT+0x120>)
 80047da:	4003      	ands	r3, r0
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
        pagestatus = GetPageState(pageaddress);
 80047e4:	68b8      	ldr	r0, [r7, #8]
 80047e6:	f000 fdd3 	bl	8005390 <GetPageState>
 80047ea:	4603      	mov	r3, r0
 80047ec:	71bb      	strb	r3, [r7, #6]

        /* If page is not erasing, return error */
        if (pagestatus != STATE_PAGE_ERASING)
 80047ee:	79bb      	ldrb	r3, [r7, #6]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d001      	beq.n	80047f8 <EE_CleanUp_IT+0xc0>
        {
          return EE_ERROR_NOERASING_PAGE;
 80047f4:	2305      	movs	r3, #5
 80047f6:	e029      	b.n	800484c <EE_CleanUp_IT+0x114>
      for (page = (firstpage + 1U); page < (firstpage + (PAGES_NUMBER / 2U)); page++)
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	3301      	adds	r3, #1
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	3302      	adds	r3, #2
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	429a      	cmp	r2, r3
 8004806:	d3d7      	bcc.n	80047b8 <EE_CleanUp_IT+0x80>
      SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
#endif
      
      /* Erase all the pages of the group */
      /* If erase operation fails, a Flash error code is returned */
      if (FI_PageErase_IT(firstpage, PAGES_NUMBER / 2U) != EE_OK)
 8004808:	2102      	movs	r1, #2
 800480a:	6978      	ldr	r0, [r7, #20]
 800480c:	f000 fe85 	bl	800551a <FI_PageErase_IT>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <EE_CleanUp_IT+0xe2>
      {
        return EE_ERASE_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e018      	b.n	800484c <EE_CleanUp_IT+0x114>
      }
      else
      {
        /* To keep their coherency, flush the caches if needed depending on the product */
        FI_CacheFlush();
 800481a:	f000 fe9b 	bl	8005554 <FI_CacheFlush>
        return EE_OK;
 800481e:	2300      	movs	r3, #0
 8004820:	e014      	b.n	800484c <EE_CleanUp_IT+0x114>
  for (firstpage = START_PAGE; firstpage < (START_PAGE + PAGES_NUMBER); firstpage += (PAGES_NUMBER / 2U))
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3302      	adds	r3, #2
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <EE_CleanUp_IT+0x11c>)
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	029a      	lsls	r2, r3, #10
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <EE_CleanUp_IT+0x120>)
 8004830:	4013      	ands	r3, r2
 8004832:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004836:	fbb2 f1f3 	udiv	r1, r2, r3
 800483a:	fb01 f303 	mul.w	r3, r1, r3
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	0b1b      	lsrs	r3, r3, #12
 8004842:	3304      	adds	r3, #4
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	429a      	cmp	r2, r3
 8004848:	d394      	bcc.n	8004774 <EE_CleanUp_IT+0x3c>
      }
    }
  }

  /* Error if no erasing pages group is found */
  return EE_ERROR_NOERASING_PAGE;
 800484a:	2305      	movs	r3, #5
}
 800484c:	4618      	mov	r0, r3
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}
 8004854:	1fff75e0 	.word	0x1fff75e0
 8004858:	001ffc00 	.word	0x001ffc00

0800485c <ReadVariable>:
#ifndef FLASH_LINES_128B
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#else
static EE_Status ReadVariable(uint16_t VirtAddress, EE_DATA_TYPE* pData)
#endif
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	; 0x28
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	80fb      	strh	r3, [r7, #6]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
#endif
  uint32_t page = 0U, pageaddress = 0U, counter = 0U, crc = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
 8004878:	2300      	movs	r3, #0
 800487a:	623b      	str	r3, [r7, #32]
 800487c:	2300      	movs	r3, #0
 800487e:	61fb      	str	r3, [r7, #28]
 8004880:	2300      	movs	r3, #0
 8004882:	60fb      	str	r3, [r7, #12]
  EE_State_type pagestate = STATE_PAGE_INVALID;
 8004884:	2305      	movs	r3, #5
 8004886:	76fb      	strb	r3, [r7, #27]

  /* Get active Page for read operation */
  page = FindPage(FIND_READ_PAGE);
 8004888:	2000      	movs	r0, #0
 800488a:	f000 f8ff 	bl	8004a8c <FindPage>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if there is no active page */
  if (page == EE_NO_PAGE_FOUND)
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d101      	bne.n	800489c <ReadVariable+0x40>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8004898:	2303      	movs	r3, #3
 800489a:	e0ab      	b.n	80049f4 <ReadVariable+0x198>
  }
  pageaddress = PAGE_ADDRESS(page);
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80048a2:	031a      	lsls	r2, r3, #12
 80048a4:	4b55      	ldr	r3, [pc, #340]	; (80049fc <ReadVariable+0x1a0>)
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	0299      	lsls	r1, r3, #10
 80048aa:	4b55      	ldr	r3, [pc, #340]	; (8004a00 <ReadVariable+0x1a4>)
 80048ac:	400b      	ands	r3, r1
 80048ae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80048b2:	fbb1 f1f3 	udiv	r1, r1, r3
 80048b6:	4b51      	ldr	r3, [pc, #324]	; (80049fc <ReadVariable+0x1a0>)
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	0298      	lsls	r0, r3, #10
 80048bc:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <ReadVariable+0x1a4>)
 80048be:	4003      	ands	r3, r0
 80048c0:	fb01 f303 	mul.w	r3, r1, r3
 80048c4:	4413      	add	r3, r2
 80048c6:	623b      	str	r3, [r7, #32]
  pagestate = GetPageState(pageaddress);
 80048c8:	6a38      	ldr	r0, [r7, #32]
 80048ca:	f000 fd61 	bl	8005390 <GetPageState>
 80048ce:	4603      	mov	r3, r0
 80048d0:	76fb      	strb	r3, [r7, #27]

  /* Search variable in active page and valid pages until erased page is found
     or in erasing pages until erased page is found */
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80048d2:	e082      	b.n	80049da <ReadVariable+0x17e>
  {
    /* Set counter index to last element position in the page */
    counter = PAGE_SIZE - EE_ELEMENT_SIZE;
 80048d4:	f640 73f8 	movw	r3, #4088	; 0xff8
 80048d8:	61fb      	str	r3, [r7, #28]

    /* Check each page address starting from end */
    while (counter >= PAGE_HEADER_SIZE)
 80048da:	e03f      	b.n	800495c <ReadVariable+0x100>
    {
      /* Get the current location content to be compared with virtual address */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(pageaddress + counter));
 80048dc:	6a3a      	ldr	r2, [r7, #32]
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	4413      	add	r3, r2
 80048e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifndef FLASH_LINES_128B
      if (addressvalue != EE_PAGESTAT_ERASED)
 80048ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f2:	bf08      	it	eq
 80048f4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80048f8:	d02d      	beq.n	8004956 <ReadVariable+0xfa>
      {
        /* Compare the read address with the virtual address */
        if (EE_VIRTUALADDRESS_VALUE(addressvalue) == VirtAddress)
 80048fa:	8a3b      	ldrh	r3, [r7, #16]
 80048fc:	88fa      	ldrh	r2, [r7, #6]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d129      	bne.n	8004956 <ReadVariable+0xfa>
        {
          /* Calculate crc of variable data and virtual address */
          crc = CalculateCrc(EE_DATA_VALUE(addressvalue), EE_VIRTUALADDRESS_VALUE(addressvalue));
 8004902:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	f04f 0300 	mov.w	r3, #0
 800490e:	000a      	movs	r2, r1
 8004910:	2300      	movs	r3, #0
 8004912:	8a3b      	ldrh	r3, [r7, #16]
 8004914:	4619      	mov	r1, r3
 8004916:	4610      	mov	r0, r2
 8004918:	f000 fdb0 	bl	800547c <CalculateCrc>
 800491c:	4603      	mov	r3, r0
 800491e:	60fb      	str	r3, [r7, #12]
          
          /* if crc verification pass, data is correct and is returned.
             if crc verification fails, data is corrupted and has to be skip */
          if (crc == EE_CRC_VALUE(addressvalue))
 8004920:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004924:	f04f 0200 	mov.w	r2, #0
 8004928:	f04f 0300 	mov.w	r3, #0
 800492c:	0c02      	lsrs	r2, r0, #16
 800492e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004932:	0c0b      	lsrs	r3, r1, #16
 8004934:	b293      	uxth	r3, r2
 8004936:	461a      	mov	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4293      	cmp	r3, r2
 800493c:	d10b      	bne.n	8004956 <ReadVariable+0xfa>
          {
            /* Get content of variable value */
            *pData = EE_DATA_VALUE(addressvalue);
 800493e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	000a      	movs	r2, r1
 800494c:	2300      	movs	r3, #0
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	601a      	str	r2, [r3, #0]

            return EE_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	e04e      	b.n	80049f4 <ReadVariable+0x198>
          }
        }
      }
#endif
      /* Next address location */
      counter -= EE_ELEMENT_SIZE;
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	3b08      	subs	r3, #8
 800495a:	61fb      	str	r3, [r7, #28]
    while (counter >= PAGE_HEADER_SIZE)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	2b1f      	cmp	r3, #31
 8004960:	d8bc      	bhi.n	80048dc <ReadVariable+0x80>
    }

    /* Decrement page index circularly, among pages allocated to eeprom emulation */
    page = PREVIOUS_PAGE(page);
 8004962:	4b26      	ldr	r3, [pc, #152]	; (80049fc <ReadVariable+0x1a0>)
 8004964:	881b      	ldrh	r3, [r3, #0]
 8004966:	029a      	lsls	r2, r3, #10
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <ReadVariable+0x1a4>)
 800496a:	4013      	ands	r3, r2
 800496c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004970:	fbb2 f1f3 	udiv	r1, r2, r3
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	0b1b      	lsrs	r3, r3, #12
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	3303      	adds	r3, #3
 8004982:	f003 0103 	and.w	r1, r3, #3
 8004986:	4b1d      	ldr	r3, [pc, #116]	; (80049fc <ReadVariable+0x1a0>)
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	029a      	lsls	r2, r3, #10
 800498c:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <ReadVariable+0x1a4>)
 800498e:	4013      	ands	r3, r2
 8004990:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004994:	fbb2 f0f3 	udiv	r0, r2, r3
 8004998:	fb00 f303 	mul.w	r3, r0, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	0b1b      	lsrs	r3, r3, #12
 80049a0:	440b      	add	r3, r1
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24
    pageaddress = PAGE_ADDRESS(page);
 80049a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80049aa:	031a      	lsls	r2, r3, #12
 80049ac:	4b13      	ldr	r3, [pc, #76]	; (80049fc <ReadVariable+0x1a0>)
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	0299      	lsls	r1, r3, #10
 80049b2:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <ReadVariable+0x1a4>)
 80049b4:	400b      	ands	r3, r1
 80049b6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80049ba:	fbb1 f1f3 	udiv	r1, r1, r3
 80049be:	4b0f      	ldr	r3, [pc, #60]	; (80049fc <ReadVariable+0x1a0>)
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	0298      	lsls	r0, r3, #10
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <ReadVariable+0x1a4>)
 80049c6:	4003      	ands	r3, r0
 80049c8:	fb01 f303 	mul.w	r3, r1, r3
 80049cc:	4413      	add	r3, r2
 80049ce:	623b      	str	r3, [r7, #32]
    pagestate = GetPageState(pageaddress);
 80049d0:	6a38      	ldr	r0, [r7, #32]
 80049d2:	f000 fcdd 	bl	8005390 <GetPageState>
 80049d6:	4603      	mov	r3, r0
 80049d8:	76fb      	strb	r3, [r7, #27]
  while ((pagestate == STATE_PAGE_ACTIVE) || (pagestate == STATE_PAGE_VALID) || (pagestate == STATE_PAGE_ERASING))
 80049da:	7efb      	ldrb	r3, [r7, #27]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	f43f af79 	beq.w	80048d4 <ReadVariable+0x78>
 80049e2:	7efb      	ldrb	r3, [r7, #27]
 80049e4:	2b03      	cmp	r3, #3
 80049e6:	f43f af75 	beq.w	80048d4 <ReadVariable+0x78>
 80049ea:	7efb      	ldrb	r3, [r7, #27]
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	f43f af71 	beq.w	80048d4 <ReadVariable+0x78>
  }

  /* Variable is not found */
  return EE_NO_DATA;
 80049f2:	2307      	movs	r3, #7
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3728      	adds	r7, #40	; 0x28
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	1fff75e0 	.word	0x1fff75e0
 8004a00:	001ffc00 	.word	0x001ffc00

08004a04 <WriteVariable>:
#ifndef FLASH_LINES_128B
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#else
static EE_Status WriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data)
#endif
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	80fb      	strh	r3, [r7, #6]
  EE_Status status = EE_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM, if not full */
#if defined (DUALCORE_FLASH_SHARING) || defined (FLASH_LINES_128B)
  status = VerifyPagesFullWriteVariable(VirtAddress, Data, EE_SIMPLE_WRITE);
#else
  status = VerifyPagesFullWriteVariable(VirtAddress, Data);
 8004a14:	88fb      	ldrh	r3, [r7, #6]
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fb71 	bl	8005100 <VerifyPagesFullWriteVariable>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	81fb      	strh	r3, [r7, #14]
#endif
  if (status == EE_PAGE_FULL)
 8004a22:	89fb      	ldrh	r3, [r7, #14]
 8004a24:	2b12      	cmp	r3, #18
 8004a26:	d107      	bne.n	8004a38 <WriteVariable+0x34>
  {
    /* In case the EEPROM pages are full, perform Pages transfer */
    return PagesTransfer(VirtAddress, Data, EE_TRANSFER_NORMAL);
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 f940 	bl	8004cb4 <PagesTransfer>
 8004a34:	4603      	mov	r3, r0
 8004a36:	e000      	b.n	8004a3a <WriteVariable+0x36>
  }

  /* Return last operation status */
  return status;
 8004a38:	89fb      	ldrh	r3, [r7, #14]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <VerifyPageFullyErased>:
  * @retval EE_Status
  *           - EE_PAGE_NOTERASED : if Page not erased
  *           - EE_PAGE_ERASED    : if Page erased
  */
static EE_Status VerifyPageFullyErased(uint32_t Address, uint32_t PageSize)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
 8004a4a:	6039      	str	r1, [r7, #0]
  EE_Status readstatus = EE_PAGE_ERASED;
 8004a4c:	2311      	movs	r3, #17
 8004a4e:	81fb      	strh	r3, [r7, #14]
  uint32_t counter = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60bb      	str	r3, [r7, #8]

  /* Check each element in the page */
  while (counter < PageSize)
 8004a54:	e00f      	b.n	8004a76 <VerifyPageFullyErased+0x34>
  {
    /* Compare the read address with the virtual address */
#ifndef FLASH_LINES_128B    
	if ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED)
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a64:	bf08      	it	eq
 8004a66:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004a6a:	d001      	beq.n	8004a70 <VerifyPageFullyErased+0x2e>
#else
	if ( ((*(__IO EE_ELEMENT_TYPE*)(Address+counter)) != EE_PAGESTAT_ERASED) && ((*(__IO EE_ELEMENT_TYPE*)(Address+counter+8U)) != EE_PAGESTAT_ERASED) )
#endif    
	{
      /* In case one element is not erased, reset readstatus flag */
      readstatus = EE_PAGE_NOTERASED;
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	81fb      	strh	r3, [r7, #14]
    }
    /* Next address location */
    counter = counter + EE_ELEMENT_SIZE;
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	3308      	adds	r3, #8
 8004a74:	60bb      	str	r3, [r7, #8]
  while (counter < PageSize)
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d3eb      	bcc.n	8004a56 <VerifyPageFullyErased+0x14>
  }

  /* Return readstatus value */
  return readstatus;
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <FindPage>:
  * @retval Page_Index
  *           - Page Index: on success
  *           - @ref EE_NO_PAGE_FOUND : if an error occurs
  */
static uint32_t FindPage(EE_Find_type Operation)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	4603      	mov	r3, r0
 8004a94:	71fb      	strb	r3, [r7, #7]
  EE_State_type currentpagestatus = STATE_PAGE_INVALID, followingpagestatus = STATE_PAGE_INVALID;
 8004a96:	2305      	movs	r3, #5
 8004a98:	75fb      	strb	r3, [r7, #23]
 8004a9a:	2305      	movs	r3, #5
 8004a9c:	75bb      	strb	r3, [r7, #22]
  uint32_t currentpage = 0U, followingpage = 0U, previouspage = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]

  /* Get currentpage status */
  currentpage = ubCurrentActivePage;
 8004aaa:	4b7e      	ldr	r3, [pc, #504]	; (8004ca4 <FindPage+0x218>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	613b      	str	r3, [r7, #16]
  currentpagestatus = GetPageState(PAGE_ADDRESS(currentpage));
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ab6:	031a      	lsls	r2, r3, #12
 8004ab8:	4b7b      	ldr	r3, [pc, #492]	; (8004ca8 <FindPage+0x21c>)
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	0299      	lsls	r1, r3, #10
 8004abe:	4b7b      	ldr	r3, [pc, #492]	; (8004cac <FindPage+0x220>)
 8004ac0:	400b      	ands	r3, r1
 8004ac2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004ac6:	fbb1 f1f3 	udiv	r1, r1, r3
 8004aca:	4b77      	ldr	r3, [pc, #476]	; (8004ca8 <FindPage+0x21c>)
 8004acc:	881b      	ldrh	r3, [r3, #0]
 8004ace:	0298      	lsls	r0, r3, #10
 8004ad0:	4b76      	ldr	r3, [pc, #472]	; (8004cac <FindPage+0x220>)
 8004ad2:	4003      	ands	r3, r0
 8004ad4:	fb01 f303 	mul.w	r3, r1, r3
 8004ad8:	4413      	add	r3, r2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fc58 	bl	8005390 <GetPageState>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

  /* Get followingpage status */
  followingpage = FOLLOWING_PAGE(currentpage);
 8004ae4:	4b70      	ldr	r3, [pc, #448]	; (8004ca8 <FindPage+0x21c>)
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	029a      	lsls	r2, r3, #10
 8004aea:	4b70      	ldr	r3, [pc, #448]	; (8004cac <FindPage+0x220>)
 8004aec:	4013      	ands	r3, r2
 8004aee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004af2:	fbb2 f1f3 	udiv	r1, r2, r3
 8004af6:	fb01 f303 	mul.w	r3, r1, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	0b1b      	lsrs	r3, r3, #12
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	3301      	adds	r3, #1
 8004b04:	f003 0103 	and.w	r1, r3, #3
 8004b08:	4b67      	ldr	r3, [pc, #412]	; (8004ca8 <FindPage+0x21c>)
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	029a      	lsls	r2, r3, #10
 8004b0e:	4b67      	ldr	r3, [pc, #412]	; (8004cac <FindPage+0x220>)
 8004b10:	4013      	ands	r3, r2
 8004b12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b16:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b1a:	fb00 f303 	mul.w	r3, r0, r3
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	0b1b      	lsrs	r3, r3, #12
 8004b22:	440b      	add	r3, r1
 8004b24:	60fb      	str	r3, [r7, #12]
  followingpagestatus = GetPageState(PAGE_ADDRESS(followingpage));
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004b2c:	031a      	lsls	r2, r3, #12
 8004b2e:	4b5e      	ldr	r3, [pc, #376]	; (8004ca8 <FindPage+0x21c>)
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	0299      	lsls	r1, r3, #10
 8004b34:	4b5d      	ldr	r3, [pc, #372]	; (8004cac <FindPage+0x220>)
 8004b36:	400b      	ands	r3, r1
 8004b38:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004b3c:	fbb1 f1f3 	udiv	r1, r1, r3
 8004b40:	4b59      	ldr	r3, [pc, #356]	; (8004ca8 <FindPage+0x21c>)
 8004b42:	881b      	ldrh	r3, [r3, #0]
 8004b44:	0298      	lsls	r0, r3, #10
 8004b46:	4b59      	ldr	r3, [pc, #356]	; (8004cac <FindPage+0x220>)
 8004b48:	4003      	ands	r3, r0
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 fc1d 	bl	8005390 <GetPageState>
 8004b56:	4603      	mov	r3, r0
 8004b58:	75bb      	strb	r3, [r7, #22]

  /* Get previouspage status */
  previouspage = PREVIOUS_PAGE(currentpage);
 8004b5a:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <FindPage+0x21c>)
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	029a      	lsls	r2, r3, #10
 8004b60:	4b52      	ldr	r3, [pc, #328]	; (8004cac <FindPage+0x220>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b68:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	0b1b      	lsrs	r3, r3, #12
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	3303      	adds	r3, #3
 8004b7a:	f003 0103 	and.w	r1, r3, #3
 8004b7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ca8 <FindPage+0x21c>)
 8004b80:	881b      	ldrh	r3, [r3, #0]
 8004b82:	029a      	lsls	r2, r3, #10
 8004b84:	4b49      	ldr	r3, [pc, #292]	; (8004cac <FindPage+0x220>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004b8c:	fbb2 f0f3 	udiv	r0, r2, r3
 8004b90:	fb00 f303 	mul.w	r3, r0, r3
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	0b1b      	lsrs	r3, r3, #12
 8004b98:	440b      	add	r3, r1
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Write, read or erase operation */
  switch (Operation)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d071      	beq.n	8004c86 <FindPage+0x1fa>
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	dc77      	bgt.n	8004c96 <FindPage+0x20a>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d060      	beq.n	8004c6c <FindPage+0x1e0>
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d173      	bne.n	8004c96 <FindPage+0x20a>
  {
    case FIND_WRITE_PAGE:   /* ---- Write operation ---- */
      /* Normal operation, no page transfer on going */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d12a      	bne.n	8004c0a <FindPage+0x17e>
      {
        /* Check if active page is not full */
        if (uwAddressNextWrite < PAGE_SIZE)
 8004bb4:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <FindPage+0x224>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbc:	d201      	bcs.n	8004bc2 <FindPage+0x136>
        {
          /* Return current Active page */
          return currentpage;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	e06b      	b.n	8004c9a <FindPage+0x20e>
        }
        else
        /* No more space in current active page */
        {
          /* Check if following page is erasing state */
          if (followingpagestatus == STATE_PAGE_ERASING)
 8004bc2:	7dbb      	ldrb	r3, [r7, #22]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d107      	bne.n	8004bd8 <FindPage+0x14c>
          {
            /* Force Cleanup, as not yet performed by user */
            if (EE_CleanUp() != EE_OK)
 8004bc8:	f7ff fd24 	bl	8004614 <EE_CleanUp>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <FindPage+0x14c>
            {
              return EE_NO_PAGE_FOUND;
 8004bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd6:	e060      	b.n	8004c9a <FindPage+0x20e>
            }
          }

          /* Set current active page in valid state */
          if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004bd8:	2103      	movs	r1, #3
 8004bda:	6938      	ldr	r0, [r7, #16]
 8004bdc:	f000 fb16 	bl	800520c <SetPageState>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d002      	beq.n	8004bec <FindPage+0x160>
          {
            return EE_NO_PAGE_FOUND;
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bea:	e056      	b.n	8004c9a <FindPage+0x20e>
          }

          /* Set following page as active */
          if (SetPageState(followingpage, STATE_PAGE_ACTIVE) != EE_OK)
 8004bec:	2102      	movs	r1, #2
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f000 fb0c 	bl	800520c <SetPageState>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <FindPage+0x174>
          {
            return EE_NO_PAGE_FOUND;
 8004bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004bfe:	e04c      	b.n	8004c9a <FindPage+0x20e>
          }
          uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c00:	4b2b      	ldr	r3, [pc, #172]	; (8004cb0 <FindPage+0x224>)
 8004c02:	2220      	movs	r2, #32
 8004c04:	601a      	str	r2, [r3, #0]
          return followingpage;         /* Following page is now active one */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	e047      	b.n	8004c9a <FindPage+0x20e>
        }
      }
      /* Transfer is on going, page receiving data */
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c0a:	7dfb      	ldrb	r3, [r7, #23]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d12a      	bne.n	8004c66 <FindPage+0x1da>
        {
          /* Check if receive page is not full */
          if (uwAddressNextWrite < PAGE_SIZE)
 8004c10:	4b27      	ldr	r3, [pc, #156]	; (8004cb0 <FindPage+0x224>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c18:	d201      	bcs.n	8004c1e <FindPage+0x192>
          {
            /* Return current receive page */
            return currentpage;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	e03d      	b.n	8004c9a <FindPage+0x20e>
          }
          else
          /* No more space in current receive page */
          {
            /* Check if following page is erasing state */
            if (followingpagestatus == STATE_PAGE_ERASING)
 8004c1e:	7dbb      	ldrb	r3, [r7, #22]
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d107      	bne.n	8004c34 <FindPage+0x1a8>
            {
              /* Force Cleanup, as not yet performed by user */
              if (EE_CleanUp() != EE_OK)
 8004c24:	f7ff fcf6 	bl	8004614 <EE_CleanUp>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <FindPage+0x1a8>
              {
                return EE_NO_PAGE_FOUND;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c32:	e032      	b.n	8004c9a <FindPage+0x20e>
              }
            }

            /* Set current receive page in valid state */
            if (SetPageState(currentpage, STATE_PAGE_VALID) != EE_OK)
 8004c34:	2103      	movs	r1, #3
 8004c36:	6938      	ldr	r0, [r7, #16]
 8004c38:	f000 fae8 	bl	800520c <SetPageState>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <FindPage+0x1bc>
            {
              return EE_NO_PAGE_FOUND;
 8004c42:	f04f 33ff 	mov.w	r3, #4294967295
 8004c46:	e028      	b.n	8004c9a <FindPage+0x20e>
            }

            /* Set following page as receive */
            if (SetPageState(followingpage, STATE_PAGE_RECEIVE) != EE_OK)
 8004c48:	2101      	movs	r1, #1
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 fade 	bl	800520c <SetPageState>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <FindPage+0x1d0>
            {
              return EE_NO_PAGE_FOUND;
 8004c56:	f04f 33ff 	mov.w	r3, #4294967295
 8004c5a:	e01e      	b.n	8004c9a <FindPage+0x20e>
            }
            uwAddressNextWrite = PAGE_HEADER_SIZE;   /* Skip page header */
 8004c5c:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <FindPage+0x224>)
 8004c5e:	2220      	movs	r2, #32
 8004c60:	601a      	str	r2, [r3, #0]
            return followingpage;         /* Following page is now active one */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	e019      	b.n	8004c9a <FindPage+0x20e>
          }
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	e016      	b.n	8004c9a <FindPage+0x20e>
        }
      }

    case FIND_READ_PAGE:  /* ---- Read operation ---- */
      if (currentpagestatus == STATE_PAGE_ACTIVE)
 8004c6c:	7dfb      	ldrb	r3, [r7, #23]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d101      	bne.n	8004c76 <FindPage+0x1ea>
      {
        return currentpage;
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	e011      	b.n	8004c9a <FindPage+0x20e>
      }
      else
      {
        if (currentpagestatus == STATE_PAGE_RECEIVE)
 8004c76:	7dfb      	ldrb	r3, [r7, #23]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <FindPage+0x1f4>
        {
          return previouspage;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	e00c      	b.n	8004c9a <FindPage+0x20e>
        }
        else
        {
          return EE_NO_PAGE_FOUND;   /* No active Page */
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295
 8004c84:	e009      	b.n	8004c9a <FindPage+0x20e>
        }
      }

    case FIND_ERASE_PAGE: /* ---- Return the erased page */
      if (followingpagestatus == STATE_PAGE_ERASED)
 8004c86:	7dbb      	ldrb	r3, [r7, #22]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <FindPage+0x204>
      {
        return followingpage;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	e004      	b.n	8004c9a <FindPage+0x20e>
      }
      else
      {
        return EE_NO_PAGE_FOUND;  /* No erased Page */
 8004c90:	f04f 33ff 	mov.w	r3, #4294967295
 8004c94:	e001      	b.n	8004c9a <FindPage+0x20e>

    default:
      ;
  }

  return EE_NO_PAGE_FOUND;
 8004c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	200003ae 	.word	0x200003ae
 8004ca8:	1fff75e0 	.word	0x1fff75e0
 8004cac:	001ffc00 	.word	0x001ffc00
 8004cb0:	20000008 	.word	0x20000008

08004cb4 <PagesTransfer>:
#ifndef FLASH_LINES_128B
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE Data, EE_Transfer_type Type)
#else
static EE_Status PagesTransfer(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Transfer_type Type)
#endif
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08a      	sub	sp, #40	; 0x28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	6039      	str	r1, [r7, #0]
 8004cbe:	80fb      	strh	r3, [r7, #6]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	717b      	strb	r3, [r7, #5]
  EE_State_type pagestatus = STATE_PAGE_INVALID;
 8004cc4:	2305      	movs	r3, #5
 8004cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t pageaddress = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61bb      	str	r3, [r7, #24]
  uint32_t page = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	623b      	str	r3, [r7, #32]
  uint32_t varidx = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
  EE_ELEMENT_TYPE addressvalue = 0U;
 8004cd6:	f04f 0200 	mov.w	r2, #0
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	e9c7 2304 	strd	r2, r3, [r7, #16]
#ifdef FLASH_LINES_128B
  EE_ELEMENT_TYPE addressvalue2 = 0U;
  uint16_t nb_dummy_lines=0U;
#endif
  EE_Status status = EE_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	81fb      	strh	r3, [r7, #14]
  EE_DATA_TYPE DataValue = 0U;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60bb      	str	r3, [r7, #8]

    
  /* Get receive Page for transfer operation */
  page = FindPage((Type == EE_TRANSFER_NORMAL?FIND_ERASE_PAGE:FIND_WRITE_PAGE));
 8004cea:	797b      	ldrb	r3, [r7, #5]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <PagesTransfer+0x40>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e000      	b.n	8004cf6 <PagesTransfer+0x42>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fec8 	bl	8004a8c <FindPage>
 8004cfc:	6238      	str	r0, [r7, #32]
  if (page == EE_NO_PAGE_FOUND)
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d04:	d101      	bne.n	8004d0a <PagesTransfer+0x56>
  {
    return EE_ERROR_NOERASE_PAGE;
 8004d06:	2304      	movs	r3, #4
 8004d08:	e1ed      	b.n	80050e6 <PagesTransfer+0x432>
  }

  /* Reinitialize number of data written in the pages, and current active page */
  uhNbWrittenElements = 0U;
 8004d0a:	4ba4      	ldr	r3, [pc, #656]	; (8004f9c <PagesTransfer+0x2e8>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	801a      	strh	r2, [r3, #0]
  ubCurrentActivePage = page;
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	4ba2      	ldr	r3, [pc, #648]	; (8004fa0 <PagesTransfer+0x2ec>)
 8004d16:	701a      	strb	r2, [r3, #0]
  uwAddressNextWrite = PAGE_HEADER_SIZE;
 8004d18:	4ba2      	ldr	r3, [pc, #648]	; (8004fa4 <PagesTransfer+0x2f0>)
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	601a      	str	r2, [r3, #0]

  /* Mark the erased page at receive state in case of normal transfer */
  /* It is already the case in recover transfer case */
  /* If program operation was failed, a Flash error code is returned */
  if (Type == EE_TRANSFER_NORMAL)
 8004d1e:	797b      	ldrb	r3, [r7, #5]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d108      	bne.n	8004d36 <PagesTransfer+0x82>
  {
    if (SetPageState(page, STATE_PAGE_RECEIVE) != EE_OK)
 8004d24:	2101      	movs	r1, #1
 8004d26:	6a38      	ldr	r0, [r7, #32]
 8004d28:	f000 fa70 	bl	800520c <SetPageState>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <PagesTransfer+0x82>
    {
      return EE_WRITE_ERROR;
 8004d32:	2302      	movs	r3, #2
 8004d34:	e1d7      	b.n	80050e6 <PagesTransfer+0x432>
    }
  }

  /* Set the previous active page and all previous valid pages to erasing state */
  /* In case of recover transfer, some of these pages may already be marked erasing */
  page = PREVIOUS_PAGE(page);
 8004d36:	4b9c      	ldr	r3, [pc, #624]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	029a      	lsls	r2, r3, #10
 8004d3c:	4b9b      	ldr	r3, [pc, #620]	; (8004fac <PagesTransfer+0x2f8>)
 8004d3e:	4013      	ands	r3, r2
 8004d40:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d44:	fbb2 f1f3 	udiv	r1, r2, r3
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	0b1b      	lsrs	r3, r3, #12
 8004d50:	6a3a      	ldr	r2, [r7, #32]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	3303      	adds	r3, #3
 8004d56:	f003 0103 	and.w	r1, r3, #3
 8004d5a:	4b93      	ldr	r3, [pc, #588]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	029a      	lsls	r2, r3, #10
 8004d60:	4b92      	ldr	r3, [pc, #584]	; (8004fac <PagesTransfer+0x2f8>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d68:	fbb2 f0f3 	udiv	r0, r2, r3
 8004d6c:	fb00 f303 	mul.w	r3, r0, r3
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	0b1b      	lsrs	r3, r3, #12
 8004d74:	440b      	add	r3, r1
 8004d76:	623b      	str	r3, [r7, #32]
  pageaddress = PAGE_ADDRESS(page);
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004d7e:	031a      	lsls	r2, r3, #12
 8004d80:	4b89      	ldr	r3, [pc, #548]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	0299      	lsls	r1, r3, #10
 8004d86:	4b89      	ldr	r3, [pc, #548]	; (8004fac <PagesTransfer+0x2f8>)
 8004d88:	400b      	ands	r3, r1
 8004d8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004d8e:	fbb1 f1f3 	udiv	r1, r1, r3
 8004d92:	4b85      	ldr	r3, [pc, #532]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004d94:	881b      	ldrh	r3, [r3, #0]
 8004d96:	0298      	lsls	r0, r3, #10
 8004d98:	4b84      	ldr	r3, [pc, #528]	; (8004fac <PagesTransfer+0x2f8>)
 8004d9a:	4003      	ands	r3, r0
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	4413      	add	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
  pagestatus = GetPageState(pageaddress);
 8004da4:	69b8      	ldr	r0, [r7, #24]
 8004da6:	f000 faf3 	bl	8005390 <GetPageState>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004db0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d004      	beq.n	8004dc2 <PagesTransfer+0x10e>
 8004db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	f040 809e 	bne.w	8004efe <PagesTransfer+0x24a>
  {
    /* Set active page to erasing */
    if (pagestatus == STATE_PAGE_ACTIVE)
 8004dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d108      	bne.n	8004ddc <PagesTransfer+0x128>
    {
      if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004dca:	2104      	movs	r1, #4
 8004dcc:	6a38      	ldr	r0, [r7, #32]
 8004dce:	f000 fa1d 	bl	800520c <SetPageState>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d001      	beq.n	8004ddc <PagesTransfer+0x128>
      {
        return EE_WRITE_ERROR;
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e184      	b.n	80050e6 <PagesTransfer+0x432>
      }
    }

    /* Inspect the previous pages to set all valid pages to erasing state */
    /* In case of recover, some valid pages may be already erasing state */
    page = PREVIOUS_PAGE(page);
 8004ddc:	4b72      	ldr	r3, [pc, #456]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	029a      	lsls	r2, r3, #10
 8004de2:	4b72      	ldr	r3, [pc, #456]	; (8004fac <PagesTransfer+0x2f8>)
 8004de4:	4013      	ands	r3, r2
 8004de6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004dea:	fbb2 f1f3 	udiv	r1, r2, r3
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	0b1b      	lsrs	r3, r3, #12
 8004df6:	6a3a      	ldr	r2, [r7, #32]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	3303      	adds	r3, #3
 8004dfc:	f003 0103 	and.w	r1, r3, #3
 8004e00:	4b69      	ldr	r3, [pc, #420]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004e02:	881b      	ldrh	r3, [r3, #0]
 8004e04:	029a      	lsls	r2, r3, #10
 8004e06:	4b69      	ldr	r3, [pc, #420]	; (8004fac <PagesTransfer+0x2f8>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e0e:	fbb2 f0f3 	udiv	r0, r2, r3
 8004e12:	fb00 f303 	mul.w	r3, r0, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	0b1b      	lsrs	r3, r3, #12
 8004e1a:	440b      	add	r3, r1
 8004e1c:	623b      	str	r3, [r7, #32]
    pageaddress = PAGE_ADDRESS(page);
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004e24:	031a      	lsls	r2, r3, #12
 8004e26:	4b60      	ldr	r3, [pc, #384]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	0299      	lsls	r1, r3, #10
 8004e2c:	4b5f      	ldr	r3, [pc, #380]	; (8004fac <PagesTransfer+0x2f8>)
 8004e2e:	400b      	ands	r3, r1
 8004e30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004e34:	fbb1 f1f3 	udiv	r1, r1, r3
 8004e38:	4b5b      	ldr	r3, [pc, #364]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	0298      	lsls	r0, r3, #10
 8004e3e:	4b5b      	ldr	r3, [pc, #364]	; (8004fac <PagesTransfer+0x2f8>)
 8004e40:	4003      	ands	r3, r0
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	4413      	add	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
    pagestatus = GetPageState(pageaddress);
 8004e4a:	69b8      	ldr	r0, [r7, #24]
 8004e4c:	f000 faa0 	bl	8005390 <GetPageState>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004e56:	e049      	b.n	8004eec <PagesTransfer+0x238>
    {
      /* Set valid page to erasing */
      if (pagestatus == STATE_PAGE_VALID)
 8004e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d108      	bne.n	8004e72 <PagesTransfer+0x1be>
      {
        if (SetPageState(page, STATE_PAGE_ERASING) != EE_OK)
 8004e60:	2104      	movs	r1, #4
 8004e62:	6a38      	ldr	r0, [r7, #32]
 8004e64:	f000 f9d2 	bl	800520c <SetPageState>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <PagesTransfer+0x1be>
        {
          return EE_WRITE_ERROR;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e139      	b.n	80050e6 <PagesTransfer+0x432>
        }
      }

      /* decrement page index */
      page = PREVIOUS_PAGE(page);
 8004e72:	4b4d      	ldr	r3, [pc, #308]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	029a      	lsls	r2, r3, #10
 8004e78:	4b4c      	ldr	r3, [pc, #304]	; (8004fac <PagesTransfer+0x2f8>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004e80:	fbb2 f1f3 	udiv	r1, r2, r3
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	0b1b      	lsrs	r3, r3, #12
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	3303      	adds	r3, #3
 8004e92:	f003 0103 	and.w	r1, r3, #3
 8004e96:	4b44      	ldr	r3, [pc, #272]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	029a      	lsls	r2, r3, #10
 8004e9c:	4b43      	ldr	r3, [pc, #268]	; (8004fac <PagesTransfer+0x2f8>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ea4:	fbb2 f0f3 	udiv	r0, r2, r3
 8004ea8:	fb00 f303 	mul.w	r3, r0, r3
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	0b1b      	lsrs	r3, r3, #12
 8004eb0:	440b      	add	r3, r1
 8004eb2:	623b      	str	r3, [r7, #32]
      pageaddress = PAGE_ADDRESS(page);
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004eba:	031a      	lsls	r2, r3, #12
 8004ebc:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004ebe:	881b      	ldrh	r3, [r3, #0]
 8004ec0:	0299      	lsls	r1, r3, #10
 8004ec2:	4b3a      	ldr	r3, [pc, #232]	; (8004fac <PagesTransfer+0x2f8>)
 8004ec4:	400b      	ands	r3, r1
 8004ec6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004eca:	fbb1 f1f3 	udiv	r1, r1, r3
 8004ece:	4b36      	ldr	r3, [pc, #216]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	0298      	lsls	r0, r3, #10
 8004ed4:	4b35      	ldr	r3, [pc, #212]	; (8004fac <PagesTransfer+0x2f8>)
 8004ed6:	4003      	ands	r3, r0
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	4413      	add	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
      pagestatus = GetPageState(pageaddress);
 8004ee0:	69b8      	ldr	r0, [r7, #24]
 8004ee2:	f000 fa55 	bl	8005390 <GetPageState>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((pagestatus == STATE_PAGE_VALID) || (pagestatus == STATE_PAGE_ERASING))
 8004eec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d0b1      	beq.n	8004e58 <PagesTransfer+0x1a4>
 8004ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d0ad      	beq.n	8004e58 <PagesTransfer+0x1a4>
  if ((pagestatus == STATE_PAGE_ACTIVE) || (pagestatus == STATE_PAGE_ERASING))
 8004efc:	e008      	b.n	8004f10 <PagesTransfer+0x25c>
    }
  }
  else
  {
    if ((Type == EE_TRANSFER_RECOVER) && (pagestatus == STATE_PAGE_VALID))
 8004efe:	797b      	ldrb	r3, [r7, #5]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d103      	bne.n	8004f0c <PagesTransfer+0x258>
 8004f04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d001      	beq.n	8004f10 <PagesTransfer+0x25c>
      /* (valid state). Then erasing state marking was already completed */
    }
    else
    {
      /* Inconsistent previous page state */
      return EE_INVALID_PAGE_SEQUENCE;
 8004f0c:	230a      	movs	r3, #10
 8004f0e:	e0ea      	b.n	80050e6 <PagesTransfer+0x432>
    }
  }

  /* In case of recover transfer, transfer must be resumed where it has been stopped */
  /* Update global variables to reflect current transfer status */
  if (Type == EE_TRANSFER_RECOVER)
 8004f10:	797b      	ldrb	r3, [r7, #5]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	f040 809b 	bne.w	800504e <PagesTransfer+0x39a>
  {
#ifdef FLASH_LINES_128B
    nb_dummy_lines=0;
#endif
    /* Count number of elements already transferred in current receive page */
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f18:	2320      	movs	r3, #32
 8004f1a:	61fb      	str	r3, [r7, #28]
 8004f1c:	e031      	b.n	8004f82 <PagesTransfer+0x2ce>
    {
      /* Get next element in receive page */
      addressvalue = (*(__IO EE_ELEMENT_TYPE*)(PAGE_ADDRESS(ubCurrentActivePage) + varidx));
 8004f1e:	4b20      	ldr	r3, [pc, #128]	; (8004fa0 <PagesTransfer+0x2ec>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004f26:	031a      	lsls	r2, r3, #12
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004f2a:	881b      	ldrh	r3, [r3, #0]
 8004f2c:	0299      	lsls	r1, r3, #10
 8004f2e:	4b1f      	ldr	r3, [pc, #124]	; (8004fac <PagesTransfer+0x2f8>)
 8004f30:	400b      	ands	r3, r1
 8004f32:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8004f36:	fbb1 f1f3 	udiv	r1, r1, r3
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <PagesTransfer+0x2f4>)
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	0298      	lsls	r0, r3, #10
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <PagesTransfer+0x2f8>)
 8004f42:	4003      	ands	r3, r0
 8004f44:	fb01 f303 	mul.w	r3, r1, r3
 8004f48:	441a      	add	r2, r3
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f52:	e9c7 2304 	strd	r2, r3, [r7, #16]
        uhNbWrittenElements++;
        uwAddressNextWrite += EE_ELEMENT_SIZE;
      }
      else if ((addressvalue != EE_PAGESTAT_ERASED) || (addressvalue2 != EE_PAGESTAT_ERASED)&&(addressvalue != 0x0000000000000000U)|| (addressvalue2 != 0x0000000000000000U))
#else
      if (addressvalue != EE_PAGESTAT_ERASED)
 8004f56:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5e:	bf08      	it	eq
 8004f60:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8004f64:	d012      	beq.n	8004f8c <PagesTransfer+0x2d8>
#endif
      {
        /* Update global variables accordingly */
        uhNbWrittenElements++;
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <PagesTransfer+0x2e8>)
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	4b0b      	ldr	r3, [pc, #44]	; (8004f9c <PagesTransfer+0x2e8>)
 8004f70:	801a      	strh	r2, [r3, #0]
        uwAddressNextWrite += EE_ELEMENT_SIZE;
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <PagesTransfer+0x2f0>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3308      	adds	r3, #8
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <PagesTransfer+0x2f0>)
 8004f7a:	6013      	str	r3, [r2, #0]
    for (varidx = PAGE_HEADER_SIZE; varidx < PAGE_SIZE; varidx += EE_ELEMENT_SIZE)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	3308      	adds	r3, #8
 8004f80:	61fb      	str	r3, [r7, #28]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f88:	d3c9      	bcc.n	8004f1e <PagesTransfer+0x26a>
 8004f8a:	e000      	b.n	8004f8e <PagesTransfer+0x2da>
      }
      else
      {
        break;
 8004f8c:	bf00      	nop
      }
    }

    /* Count number of elements already transferred in previous valid pages */
    page = ubCurrentActivePage;
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <PagesTransfer+0x2ec>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	623b      	str	r3, [r7, #32]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e054      	b.n	8005044 <PagesTransfer+0x390>
 8004f9a:	bf00      	nop
 8004f9c:	200003ac 	.word	0x200003ac
 8004fa0:	200003ae 	.word	0x200003ae
 8004fa4:	20000008 	.word	0x20000008
 8004fa8:	1fff75e0 	.word	0x1fff75e0
 8004fac:	001ffc00 	.word	0x001ffc00
    {
      /* Decrement page index among circular pages list */
      page = PREVIOUS_PAGE(page);
 8004fb0:	4b4f      	ldr	r3, [pc, #316]	; (80050f0 <PagesTransfer+0x43c>)
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	029a      	lsls	r2, r3, #10
 8004fb6:	4b4f      	ldr	r3, [pc, #316]	; (80050f4 <PagesTransfer+0x440>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004fbe:	fbb2 f1f3 	udiv	r1, r2, r3
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	0b1b      	lsrs	r3, r3, #12
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	3303      	adds	r3, #3
 8004fd0:	f003 0103 	and.w	r1, r3, #3
 8004fd4:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <PagesTransfer+0x43c>)
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	029a      	lsls	r2, r3, #10
 8004fda:	4b46      	ldr	r3, [pc, #280]	; (80050f4 <PagesTransfer+0x440>)
 8004fdc:	4013      	ands	r3, r2
 8004fde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004fe2:	fbb2 f0f3 	udiv	r0, r2, r3
 8004fe6:	fb00 f303 	mul.w	r3, r0, r3
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	0b1b      	lsrs	r3, r3, #12
 8004fee:	440b      	add	r3, r1
 8004ff0:	623b      	str	r3, [r7, #32]
      pagestatus = GetPageState(PAGE_ADDRESS(page));
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8004ff8:	031a      	lsls	r2, r3, #12
 8004ffa:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <PagesTransfer+0x43c>)
 8004ffc:	881b      	ldrh	r3, [r3, #0]
 8004ffe:	0299      	lsls	r1, r3, #10
 8005000:	4b3c      	ldr	r3, [pc, #240]	; (80050f4 <PagesTransfer+0x440>)
 8005002:	400b      	ands	r3, r1
 8005004:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005008:	fbb1 f1f3 	udiv	r1, r1, r3
 800500c:	4b38      	ldr	r3, [pc, #224]	; (80050f0 <PagesTransfer+0x43c>)
 800500e:	881b      	ldrh	r3, [r3, #0]
 8005010:	0298      	lsls	r0, r3, #10
 8005012:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <PagesTransfer+0x440>)
 8005014:	4003      	ands	r3, r0
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f000 f9b7 	bl	8005390 <GetPageState>
 8005022:	4603      	mov	r3, r0
 8005024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

      /* Check if page is valid state */
      if (pagestatus == STATE_PAGE_VALID)
 8005028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800502c:	2b03      	cmp	r3, #3
 800502e:	d10d      	bne.n	800504c <PagesTransfer+0x398>
      {
        /* Update uhNbWrittenElements with number of elements in page */
        uhNbWrittenElements += NB_MAX_ELEMENTS_BY_PAGE;
 8005030:	4b31      	ldr	r3, [pc, #196]	; (80050f8 <PagesTransfer+0x444>)
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005038:	b29a      	uxth	r2, r3
 800503a:	4b2f      	ldr	r3, [pc, #188]	; (80050f8 <PagesTransfer+0x444>)
 800503c:	801a      	strh	r2, [r3, #0]
    for (varidx = 0U; varidx < PAGES_NUMBER; varidx++)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3301      	adds	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b03      	cmp	r3, #3
 8005048:	d9b2      	bls.n	8004fb0 <PagesTransfer+0x2fc>
 800504a:	e000      	b.n	800504e <PagesTransfer+0x39a>
        nb_dummy_lines=nb_dummy_lines+2;
#endif
      }
      else
      {
        break;
 800504c:	bf00      	nop
  #endif
#else  

  // Write the variable passed as parameter in the new active page 
  // If program operation was failed, a Flash error code is returned 
  if (VerifyPagesFullWriteVariable(VirtAddress, Data) != EE_OK)
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f854 	bl	8005100 <VerifyPagesFullWriteVariable>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <PagesTransfer+0x3ae>
  {
    return EE_WRITE_ERROR;
 800505e:	2302      	movs	r3, #2
 8005060:	e041      	b.n	80050e6 <PagesTransfer+0x432>

#ifdef FLASH_LINES_128B
  varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U);
  for (varidx = (varidx >= nb_dummy_lines?(varidx-nb_dummy_lines):1U); varidx < NB_OF_VARIABLES+1; varidx++)
#else    
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 8005062:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <PagesTransfer+0x444>)
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d903      	bls.n	8005072 <PagesTransfer+0x3be>
 800506a:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <PagesTransfer+0x444>)
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	3b02      	subs	r3, #2
 8005070:	e000      	b.n	8005074 <PagesTransfer+0x3c0>
 8005072:	2301      	movs	r3, #1
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	e026      	b.n	80050c6 <PagesTransfer+0x412>
#endif
  {  
       /* Check each variable except the one passed as parameter */
    if (varidx != VirtAddress)
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	429a      	cmp	r2, r3
 800507e:	d01f      	beq.n	80050c0 <PagesTransfer+0x40c>
    {
      /* Read the last variable updates */
      status = ReadVariable(varidx, &DataValue);
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f107 0208 	add.w	r2, r7, #8
 8005088:	4611      	mov	r1, r2
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fbe6 	bl	800485c <ReadVariable>
 8005090:	4603      	mov	r3, r0
 8005092:	81fb      	strh	r3, [r7, #14]
      if (status == EE_OK)
 8005094:	89fb      	ldrh	r3, [r7, #14]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10d      	bne.n	80050b6 <PagesTransfer+0x402>
    #if defined (DUALCORE_FLASH_SHARING)
            status = VerifyPagesFullWriteVariable(varidx, DataValue, EE_TRANSFER);
    #elif defined (FLASH_LINES_128B)
            status = VerifyPagesFullWriteVariable(varidx, &DataValue, EE_TRANSFER);
    #else
            status = VerifyPagesFullWriteVariable(varidx, DataValue);
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	b29b      	uxth	r3, r3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 f82c 	bl	8005100 <VerifyPagesFullWriteVariable>
 80050a8:	4603      	mov	r3, r0
 80050aa:	81fb      	strh	r3, [r7, #14]
    #endif
        if (status != EE_OK)
 80050ac:	89fb      	ldrh	r3, [r7, #14]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <PagesTransfer+0x40c>
        {
          return status;
 80050b2:	89fb      	ldrh	r3, [r7, #14]
 80050b4:	e017      	b.n	80050e6 <PagesTransfer+0x432>
        }
      }
      else
      {
        if (status != EE_NO_DATA)
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	2b07      	cmp	r3, #7
 80050ba:	d001      	beq.n	80050c0 <PagesTransfer+0x40c>
        {
          /* In case variable is not found , do nothing */
          /* Any other status is error code occurs during variable read */
          return status;
 80050bc:	89fb      	ldrh	r3, [r7, #14]
 80050be:	e012      	b.n	80050e6 <PagesTransfer+0x432>
  for (varidx = (uhNbWrittenElements >= 3U?(uhNbWrittenElements-3U+1U):1U); varidx < NB_OF_VARIABLES+1; varidx++)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	2b32      	cmp	r3, #50	; 0x32
 80050ca:	d9d5      	bls.n	8005078 <PagesTransfer+0x3c4>
      }
    }
  }

  /* Transfer is now done, mark the receive state page as active */
  if (SetPageState(ubCurrentActivePage, STATE_PAGE_ACTIVE) != EE_OK)
 80050cc:	4b0b      	ldr	r3, [pc, #44]	; (80050fc <PagesTransfer+0x448>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2102      	movs	r1, #2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f000 f89a 	bl	800520c <SetPageState>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <PagesTransfer+0x42e>
  {
    return EE_WRITE_ERROR;
 80050de:	2302      	movs	r3, #2
 80050e0:	e001      	b.n	80050e6 <PagesTransfer+0x432>
  }

  /* Return last operation flash status */
  return EE_CLEANUP_REQUIRED;
 80050e2:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	1fff75e0 	.word	0x1fff75e0
 80050f4:	001ffc00 	.word	0x001ffc00
 80050f8:	200003ac 	.word	0x200003ac
 80050fc:	200003ae 	.word	0x200003ae

08005100 <VerifyPagesFullWriteVariable>:
#elif defined (FLASH_LINES_128B)
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE* Data, EE_Write_type Write_type)
#else
static EE_Status VerifyPagesFullWriteVariable(uint16_t VirtAddress, EE_DATA_TYPE Data)
#endif
{
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	b08b      	sub	sp, #44	; 0x2c
 8005106:	af00      	add	r7, sp, #0
 8005108:	4603      	mov	r3, r0
 800510a:	6139      	str	r1, [r7, #16]
 800510c:	82fb      	strh	r3, [r7, #22]
#ifndef FLASH_LINES_128B
  uint32_t crc = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
  uint64_t pData64[2] = {0,0};
  uint64_t crc = 0U;
#endif

  /* Check if pages are full, i.e. max number of written elements achieved */
  if (uhNbWrittenElements >= NB_MAX_WRITTEN_ELEMENTS)
 8005112:	4b3a      	ldr	r3, [pc, #232]	; (80051fc <VerifyPagesFullWriteVariable+0xfc>)
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	f5b3 7f7e 	cmp.w	r3, #1016	; 0x3f8
 800511a:	d301      	bcc.n	8005120 <VerifyPagesFullWriteVariable+0x20>
  {
    return EE_PAGE_FULL;
 800511c:	2312      	movs	r3, #18
 800511e:	e068      	b.n	80051f2 <VerifyPagesFullWriteVariable+0xf2>
  }

  /* Get active Page for write operation */
  uint32_t activepage = FindPage(FIND_WRITE_PAGE);
 8005120:	2001      	movs	r0, #1
 8005122:	f7ff fcb3 	bl	8004a8c <FindPage>
 8005126:	6238      	str	r0, [r7, #32]
  uint32_t activepageaddress = 0U;
 8005128:	2300      	movs	r3, #0
 800512a:	61fb      	str	r3, [r7, #28]

  /* Check if there is no active page */
  if (activepage == EE_NO_PAGE_FOUND)
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005132:	d101      	bne.n	8005138 <VerifyPagesFullWriteVariable+0x38>
  {
    return EE_ERROR_NOACTIVE_PAGE;
 8005134:	2303      	movs	r3, #3
 8005136:	e05c      	b.n	80051f2 <VerifyPagesFullWriteVariable+0xf2>
  }

  activepageaddress = PAGE_ADDRESS(activepage);
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800513e:	0319      	lsls	r1, r3, #12
 8005140:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <VerifyPagesFullWriteVariable+0x100>)
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	029a      	lsls	r2, r3, #10
 8005146:	4b2f      	ldr	r3, [pc, #188]	; (8005204 <VerifyPagesFullWriteVariable+0x104>)
 8005148:	4013      	ands	r3, r2
 800514a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800514e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005152:	4b2b      	ldr	r3, [pc, #172]	; (8005200 <VerifyPagesFullWriteVariable+0x100>)
 8005154:	881b      	ldrh	r3, [r3, #0]
 8005156:	0298      	lsls	r0, r3, #10
 8005158:	4b2a      	ldr	r3, [pc, #168]	; (8005204 <VerifyPagesFullWriteVariable+0x104>)
 800515a:	4003      	ands	r3, r0
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	440b      	add	r3, r1
 8005162:	61fb      	str	r3, [r7, #28]

  /* Force crc to 0 in case of Data/VirtAddress are 0*/
#ifndef FLASH_LINES_128B
  if ((Data == 0U) && (VirtAddress == 0U))
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d105      	bne.n	8005176 <VerifyPagesFullWriteVariable+0x76>
 800516a:	8afb      	ldrh	r3, [r7, #22]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <VerifyPagesFullWriteVariable+0x76>
#else
  if ((Data[0] == 0U) && (Data[1] == 0U) && (VirtAddress == 0U))

#endif
  {
    crc = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
 8005174:	e006      	b.n	8005184 <VerifyPagesFullWriteVariable+0x84>
  }
  else
  {
#ifndef FLASH_LINES_128B 
    /* Calculate crc of variable data and virtual address */
    crc = CalculateCrc(Data, VirtAddress);
 8005176:	8afb      	ldrh	r3, [r7, #22]
 8005178:	4619      	mov	r1, r3
 800517a:	6938      	ldr	r0, [r7, #16]
 800517c:	f000 f97e 	bl	800547c <CalculateCrc>
 8005180:	4603      	mov	r3, r0
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
    return EE_WRITE_ERROR;
  }
#else  
  /* Program variable data + virtual address + crc */
  /* If program operation was failed, a Flash error code is returned */
  if (FI_WriteDoubleWord(activepageaddress+uwAddressNextWrite, EE_ELEMENT_VALUE(VirtAddress,Data,crc)) != HAL_OK)
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <VerifyPagesFullWriteVariable+0x108>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	18d0      	adds	r0, r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2200      	movs	r2, #0
 8005190:	60bb      	str	r3, [r7, #8]
 8005192:	60fa      	str	r2, [r7, #12]
 8005194:	f04f 0200 	mov.w	r2, #0
 8005198:	f04f 0300 	mov.w	r3, #0
 800519c:	68b9      	ldr	r1, [r7, #8]
 800519e:	000b      	movs	r3, r1
 80051a0:	2200      	movs	r2, #0
 80051a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051a4:	0409      	lsls	r1, r1, #16
 80051a6:	2600      	movs	r6, #0
 80051a8:	468a      	mov	sl, r1
 80051aa:	46b3      	mov	fp, r6
 80051ac:	ea42 040a 	orr.w	r4, r2, sl
 80051b0:	ea43 050b 	orr.w	r5, r3, fp
 80051b4:	8afb      	ldrh	r3, [r7, #22]
 80051b6:	2200      	movs	r2, #0
 80051b8:	4698      	mov	r8, r3
 80051ba:	4691      	mov	r9, r2
 80051bc:	ea44 0308 	orr.w	r3, r4, r8
 80051c0:	603b      	str	r3, [r7, #0]
 80051c2:	ea45 0309 	orr.w	r3, r5, r9
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051cc:	f000 f972 	bl	80054b4 <FI_WriteDoubleWord>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d001      	beq.n	80051da <VerifyPagesFullWriteVariable+0xda>
  {
    return EE_WRITE_ERROR;
 80051d6:	2302      	movs	r3, #2
 80051d8:	e00b      	b.n	80051f2 <VerifyPagesFullWriteVariable+0xf2>
  }
#endif

  /* Increment global variables relative to write operation done*/
  uwAddressNextWrite += EE_ELEMENT_SIZE;
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <VerifyPagesFullWriteVariable+0x108>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3308      	adds	r3, #8
 80051e0:	4a09      	ldr	r2, [pc, #36]	; (8005208 <VerifyPagesFullWriteVariable+0x108>)
 80051e2:	6013      	str	r3, [r2, #0]
  uhNbWrittenElements++;
 80051e4:	4b05      	ldr	r3, [pc, #20]	; (80051fc <VerifyPagesFullWriteVariable+0xfc>)
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	4b03      	ldr	r3, [pc, #12]	; (80051fc <VerifyPagesFullWriteVariable+0xfc>)
 80051ee:	801a      	strh	r2, [r3, #0]

  return EE_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	372c      	adds	r7, #44	; 0x2c
 80051f6:	46bd      	mov	sp, r7
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	200003ac 	.word	0x200003ac
 8005200:	1fff75e0 	.word	0x1fff75e0
 8005204:	001ffc00 	.word	0x001ffc00
 8005208:	20000008 	.word	0x20000008

0800520c <SetPageState>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
static EE_Status SetPageState(uint32_t Page, EE_State_type State)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	70fb      	strb	r3, [r7, #3]
  uint32_t header1 = 0U, header2 = 0U, header3 = 0U, header4 = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	2300      	movs	r3, #0
 8005226:	60bb      	str	r3, [r7, #8]

  header1 = PAGE_ADDRESS(Page);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800522e:	031a      	lsls	r2, r3, #12
 8005230:	4b54      	ldr	r3, [pc, #336]	; (8005384 <SetPageState+0x178>)
 8005232:	881b      	ldrh	r3, [r3, #0]
 8005234:	0299      	lsls	r1, r3, #10
 8005236:	4b54      	ldr	r3, [pc, #336]	; (8005388 <SetPageState+0x17c>)
 8005238:	400b      	ands	r3, r1
 800523a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800523e:	fbb1 f1f3 	udiv	r1, r1, r3
 8005242:	4b50      	ldr	r3, [pc, #320]	; (8005384 <SetPageState+0x178>)
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	0298      	lsls	r0, r3, #10
 8005248:	4b4f      	ldr	r3, [pc, #316]	; (8005388 <SetPageState+0x17c>)
 800524a:	4003      	ands	r3, r0
 800524c:	fb01 f303 	mul.w	r3, r1, r3
 8005250:	4413      	add	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  header2 = PAGE_ADDRESS(Page) + EE_ELEMENT_SIZE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800525a:	031a      	lsls	r2, r3, #12
 800525c:	4b49      	ldr	r3, [pc, #292]	; (8005384 <SetPageState+0x178>)
 800525e:	881b      	ldrh	r3, [r3, #0]
 8005260:	0299      	lsls	r1, r3, #10
 8005262:	4b49      	ldr	r3, [pc, #292]	; (8005388 <SetPageState+0x17c>)
 8005264:	400b      	ands	r3, r1
 8005266:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800526a:	fbb1 f1f3 	udiv	r1, r1, r3
 800526e:	4b45      	ldr	r3, [pc, #276]	; (8005384 <SetPageState+0x178>)
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	0298      	lsls	r0, r3, #10
 8005274:	4b44      	ldr	r3, [pc, #272]	; (8005388 <SetPageState+0x17c>)
 8005276:	4003      	ands	r3, r0
 8005278:	fb01 f303 	mul.w	r3, r1, r3
 800527c:	4413      	add	r3, r2
 800527e:	3308      	adds	r3, #8
 8005280:	613b      	str	r3, [r7, #16]
  header3 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*2U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8005288:	031a      	lsls	r2, r3, #12
 800528a:	4b3e      	ldr	r3, [pc, #248]	; (8005384 <SetPageState+0x178>)
 800528c:	881b      	ldrh	r3, [r3, #0]
 800528e:	0299      	lsls	r1, r3, #10
 8005290:	4b3d      	ldr	r3, [pc, #244]	; (8005388 <SetPageState+0x17c>)
 8005292:	400b      	ands	r3, r1
 8005294:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8005298:	fbb1 f1f3 	udiv	r1, r1, r3
 800529c:	4b39      	ldr	r3, [pc, #228]	; (8005384 <SetPageState+0x178>)
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	0298      	lsls	r0, r3, #10
 80052a2:	4b39      	ldr	r3, [pc, #228]	; (8005388 <SetPageState+0x17c>)
 80052a4:	4003      	ands	r3, r0
 80052a6:	fb01 f303 	mul.w	r3, r1, r3
 80052aa:	4413      	add	r3, r2
 80052ac:	3310      	adds	r3, #16
 80052ae:	60fb      	str	r3, [r7, #12]
  header4 = PAGE_ADDRESS(Page) + (EE_ELEMENT_SIZE*3U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80052b6:	031a      	lsls	r2, r3, #12
 80052b8:	4b32      	ldr	r3, [pc, #200]	; (8005384 <SetPageState+0x178>)
 80052ba:	881b      	ldrh	r3, [r3, #0]
 80052bc:	0299      	lsls	r1, r3, #10
 80052be:	4b32      	ldr	r3, [pc, #200]	; (8005388 <SetPageState+0x17c>)
 80052c0:	400b      	ands	r3, r1
 80052c2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80052c6:	fbb1 f1f3 	udiv	r1, r1, r3
 80052ca:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <SetPageState+0x178>)
 80052cc:	881b      	ldrh	r3, [r3, #0]
 80052ce:	0298      	lsls	r0, r3, #10
 80052d0:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <SetPageState+0x17c>)
 80052d2:	4003      	ands	r3, r0
 80052d4:	fb01 f303 	mul.w	r3, r1, r3
 80052d8:	4413      	add	r3, r2
 80052da:	3318      	adds	r3, #24
 80052dc:	60bb      	str	r3, [r7, #8]
    break;
  default:
    break;
  }
#else
  switch(State)
 80052de:	78fb      	ldrb	r3, [r7, #3]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d844      	bhi.n	8005370 <SetPageState+0x164>
 80052e6:	a201      	add	r2, pc, #4	; (adr r2, 80052ec <SetPageState+0xe0>)
 80052e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ec:	080052fd 	.word	0x080052fd
 80052f0:	0800531f 	.word	0x0800531f
 80052f4:	08005341 	.word	0x08005341
 80052f8:	08005359 	.word	0x08005359
  {
  case STATE_PAGE_RECEIVE:
    {
      /* Set new Page status to STATE_PAGE_RECEIVE status */
      if (FI_WriteDoubleWord(header1, EE_PAGESTAT_RECEIVE) != HAL_OK)
 80052fc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8005300:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8005304:	6978      	ldr	r0, [r7, #20]
 8005306:	f000 f8d5 	bl	80054b4 <FI_WriteDoubleWord>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <SetPageState+0x108>
      {
        return EE_WRITE_ERROR;
 8005310:	2302      	movs	r3, #2
 8005312:	e033      	b.n	800537c <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	b2da      	uxtb	r2, r3
 8005318:	4b1c      	ldr	r3, [pc, #112]	; (800538c <SetPageState+0x180>)
 800531a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800531c:	e02d      	b.n	800537a <SetPageState+0x16e>
  case STATE_PAGE_ACTIVE:
    {
      /* Set new Page status to STATE_PAGE_ACTIVE status */
      if (FI_WriteDoubleWord(header2, EE_PAGESTAT_ACTIVE) != HAL_OK)
 800531e:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8005322:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8005326:	6938      	ldr	r0, [r7, #16]
 8005328:	f000 f8c4 	bl	80054b4 <FI_WriteDoubleWord>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <SetPageState+0x12a>
      {
        return EE_WRITE_ERROR;
 8005332:	2302      	movs	r3, #2
 8005334:	e022      	b.n	800537c <SetPageState+0x170>
      }
      ubCurrentActivePage = Page;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	4b14      	ldr	r3, [pc, #80]	; (800538c <SetPageState+0x180>)
 800533c:	701a      	strb	r2, [r3, #0]
    }
    break;
 800533e:	e01c      	b.n	800537a <SetPageState+0x16e>
  case STATE_PAGE_VALID:
    {
      /* Set new Page status to STATE_PAGE_VALID status */
      if (FI_WriteDoubleWord(header3, EE_PAGESTAT_VALID) != HAL_OK)
 8005340:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8005344:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f8b3 	bl	80054b4 <FI_WriteDoubleWord>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00f      	beq.n	8005374 <SetPageState+0x168>
      {
        return EE_WRITE_ERROR;
 8005354:	2302      	movs	r3, #2
 8005356:	e011      	b.n	800537c <SetPageState+0x170>
    }
    break;
  case STATE_PAGE_ERASING:
    {
      /* Set new Page status to STATE_PAGE_ERASING status */
      if (FI_WriteDoubleWord(header4, EE_PAGESTAT_ERASING) != HAL_OK)
 8005358:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 800535c:	f04f 33aa 	mov.w	r3, #2863311530	; 0xaaaaaaaa
 8005360:	68b8      	ldr	r0, [r7, #8]
 8005362:	f000 f8a7 	bl	80054b4 <FI_WriteDoubleWord>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <SetPageState+0x16c>
      {
        return EE_WRITE_ERROR;
 800536c:	2302      	movs	r3, #2
 800536e:	e005      	b.n	800537c <SetPageState+0x170>
      }
    }
    break;
  default:
    break;
 8005370:	bf00      	nop
 8005372:	e002      	b.n	800537a <SetPageState+0x16e>
    break;
 8005374:	bf00      	nop
 8005376:	e000      	b.n	800537a <SetPageState+0x16e>
    break;
 8005378:	bf00      	nop
  }
#endif

  /* Return last operation flash status */
  return EE_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	1fff75e0 	.word	0x1fff75e0
 8005388:	001ffc00 	.word	0x001ffc00
 800538c:	200003ae 	.word	0x200003ae

08005390 <GetPageState>:
  * @param  Address Address of the FLASH Memory page
  * @retval State State of the page
  */
#ifndef FLASH_LINES_128B
static EE_State_type GetPageState(uint32_t Address)
{
 8005390:	b480      	push	{r7}
 8005392:	b08b      	sub	sp, #44	; 0x2c
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  EE_ELEMENT_TYPE status1 = 0U, status2 = 0U, status3 = 0U, status4 = 0U;
 8005398:	f04f 0200 	mov.w	r2, #0
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Get page state information from page header (3 first elements) */
  status1 = (*(__IO EE_ELEMENT_TYPE*)Address);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
  status2 = (*(__IO EE_ELEMENT_TYPE*)(Address + EE_ELEMENT_SIZE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	3308      	adds	r3, #8
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	e9c7 2306 	strd	r2, r3, [r7, #24]
  status3 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*2U)));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3310      	adds	r3, #16
 80053e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  status4 = (*(__IO EE_ELEMENT_TYPE*)(Address + (EE_ELEMENT_SIZE*3U)));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3318      	adds	r3, #24
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	e9c7 2302 	strd	r2, r3, [r7, #8]

  /* Return erasing status, if element4 is not EE_PAGESTAT_ERASED value */
  if (status4 != EE_PAGESTAT_ERASED)
 80053f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fe:	bf08      	it	eq
 8005400:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005404:	d001      	beq.n	800540a <GetPageState+0x7a>
  {
    return STATE_PAGE_ERASING;
 8005406:	2304      	movs	r3, #4
 8005408:	e01e      	b.n	8005448 <GetPageState+0xb8>
  }

  /* Return valid status, if element3 is not EE_PAGESTAT_ERASED value */
  if (status3 != EE_PAGESTAT_ERASED)
 800540a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	bf08      	it	eq
 8005414:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005418:	d001      	beq.n	800541e <GetPageState+0x8e>
  {
    return STATE_PAGE_VALID;
 800541a:	2303      	movs	r3, #3
 800541c:	e014      	b.n	8005448 <GetPageState+0xb8>
  }

  /* Return active status, if element2 is not EE_PAGESTAT_ERASED value */
  if (status2 != EE_PAGESTAT_ERASED)
 800541e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	bf08      	it	eq
 8005428:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800542c:	d001      	beq.n	8005432 <GetPageState+0xa2>
  {
    return STATE_PAGE_ACTIVE;
 800542e:	2302      	movs	r3, #2
 8005430:	e00a      	b.n	8005448 <GetPageState+0xb8>
  }

  /* Return receive status, if element1 is not EE_PAGESTAT_ERASED value */
  if (status1 != EE_PAGESTAT_ERASED)
 8005432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	bf08      	it	eq
 800543c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8005440:	d001      	beq.n	8005446 <GetPageState+0xb6>
  {
    return STATE_PAGE_RECEIVE;
 8005442:	2301      	movs	r3, #1
 8005444:	e000      	b.n	8005448 <GetPageState+0xb8>
  }

  /* Return erased status, if 4 first elements are EE_PAGESTAT_ERASED value */
  return STATE_PAGE_ERASED;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	372c      	adds	r7, #44	; 0x2c
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <ConfigureCrc>:
  *         commented examples - setting is default configuration from reset.
  * @param  None
  * @retval None
  */
void ConfigureCrc(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  /* (1) Enable peripheral clock for CRC */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8005458:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800545c:	f7fe fa9a 	bl	8003994 <LL_AHB1_GRP1_EnableClock>

  /* (2) Configure CRC functional parameters */

  /* Configure CRC calculation unit with user defined polynomial */
  LL_CRC_SetPolynomialCoef(CRC, CRC_POLYNOMIAL_VALUE);
 8005460:	f248 0105 	movw	r1, #32773	; 0x8005
 8005464:	4804      	ldr	r0, [pc, #16]	; (8005478 <ConfigureCrc+0x24>)
 8005466:	f7fe fad1 	bl	8003a0c <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, CRC_POLYNOMIAL_LENGTH);
 800546a:	2108      	movs	r1, #8
 800546c:	4802      	ldr	r0, [pc, #8]	; (8005478 <ConfigureCrc+0x24>)
 800546e:	f7fe faba 	bl	80039e6 <LL_CRC_SetPolynomialSize>
  /* LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE); */

  /* Set output data inversion mode : No inversion */
  /* Reset value is LL_CRC_OUTDATA_REVERSE_NONE */
  /* LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE); */
}
 8005472:	bf00      	nop
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023000 	.word	0x40023000

0800547c <CalculateCrc>:
#ifndef FLASH_LINES_128B
uint16_t CalculateCrc(EE_DATA_TYPE Data, uint16_t VirtAddress)
#else
uint16_t CalculateCrc(EE_DATA_TYPE Data1, EE_DATA_TYPE Data2)
#endif
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
  /* Reset CRC calculation unit */
  LL_CRC_ResetCRCCalculationUnit(CRC);
 8005488:	4809      	ldr	r0, [pc, #36]	; (80054b0 <CalculateCrc+0x34>)
 800548a:	f7fe fa9c 	bl	80039c6 <LL_CRC_ResetCRCCalculationUnit>

  /* Feed Data and Virtual Address */
#ifndef FLASH_LINES_128B
  LL_CRC_FeedData32(CRC, Data);
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4807      	ldr	r0, [pc, #28]	; (80054b0 <CalculateCrc+0x34>)
 8005492:	f7fe fac9 	bl	8003a28 <LL_CRC_FeedData32>
  LL_CRC_FeedData16(CRC, VirtAddress);
 8005496:	887b      	ldrh	r3, [r7, #2]
 8005498:	4619      	mov	r1, r3
 800549a:	4805      	ldr	r0, [pc, #20]	; (80054b0 <CalculateCrc+0x34>)
 800549c:	f7fe fad2 	bl	8003a44 <LL_CRC_FeedData16>
  LL_CRC_FeedData16(CRC, ((uint16_t)Data2));
   
#endif

  /* Return computed CRC value */
  return(LL_CRC_ReadData16(CRC));
 80054a0:	4803      	ldr	r0, [pc, #12]	; (80054b0 <CalculateCrc+0x34>)
 80054a2:	f7fe fae0 	bl	8003a66 <LL_CRC_ReadData16>
 80054a6:	4603      	mov	r3, r0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	40023000 	.word	0x40023000

080054b4 <FI_WriteDoubleWord>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE_WRITE_ERROR: if an error occurs
  */
HAL_StatusTypeDef FI_WriteDoubleWord(uint32_t Address, uint64_t Data)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, Data); 
 80054c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c4:	68f9      	ldr	r1, [r7, #12]
 80054c6:	2001      	movs	r0, #1
 80054c8:	f008 f9c8 	bl	800d85c <HAL_FLASH_Program>
 80054cc:	4603      	mov	r3, r0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <FI_PageErase>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase(uint32_t Page, uint16_t NbPages)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b088      	sub	sp, #32
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	460b      	mov	r3, r1
 80054e0:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 80054e2:	2300      	movs	r3, #0
 80054e4:	83fb      	strh	r3, [r7, #30]
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }

#else
  FLASH_EraseInitTypeDef s_eraseinit;
  uint32_t page_error = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80054ea:	2302      	movs	r3, #2
 80054ec:	613b      	str	r3, [r7, #16]
  s_eraseinit.NbPages     = NbPages;
 80054ee:	887b      	ldrh	r3, [r7, #2]
 80054f0:	61bb      	str	r3, [r7, #24]
  s_eraseinit.Page        = Page;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	617b      	str	r3, [r7, #20]

  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase(&s_eraseinit, &page_error) != HAL_OK)
 80054f6:	f107 020c 	add.w	r2, r7, #12
 80054fa:	f107 0310 	add.w	r3, r7, #16
 80054fe:	4611      	mov	r1, r2
 8005500:	4618      	mov	r0, r3
 8005502:	f008 fac1 	bl	800da88 <HAL_FLASHEx_Erase>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <FI_PageErase+0x3a>
  {
    status = EE_ERASE_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	83fb      	strh	r3, [r7, #30]
  }
#endif
  return status;
 8005510:	8bfb      	ldrh	r3, [r7, #30]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <FI_PageErase_IT>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_PageErase_IT(uint32_t Page, uint16_t NbPages)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b086      	sub	sp, #24
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	460b      	mov	r3, r1
 8005524:	807b      	strh	r3, [r7, #2]
  EE_Status status = EE_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	82fb      	strh	r3, [r7, #22]
  FLASH_EraseInitTypeDef s_eraseinit;

  s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 800552a:	2302      	movs	r3, #2
 800552c:	60bb      	str	r3, [r7, #8]
  s_eraseinit.NbPages     = NbPages;
 800552e:	887b      	ldrh	r3, [r7, #2]
 8005530:	613b      	str	r3, [r7, #16]
  s_eraseinit.Page        = Page;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	60fb      	str	r3, [r7, #12]
    while( HAL_HSEM_IsSemTaken(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID) ) ;
  }
#endif    
  
  /* Erase the Page: Set Page status to ERASED status */
  if (HAL_FLASHEx_Erase_IT(&s_eraseinit) != HAL_OK)
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	4618      	mov	r0, r3
 800553c:	f008 faf4 	bl	800db28 <HAL_FLASHEx_Erase_IT>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <FI_PageErase_IT+0x30>
  {
    status = EE_ERASE_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	82fb      	strh	r3, [r7, #22]
  HAL_HSEM_Release(CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, HSEM_PROCESS_1);
  /* We exit the critical section */
  UTILS_EXIT_CRITICAL_SECTION();
#endif

  return status;
 800554a:	8afb      	ldrh	r3, [r7, #22]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <FI_CacheFlush>:

/**
  * @brief  Flush the caches if needed to keep coherency when the flash content is modified
  */
void FI_CacheFlush()
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  /* To keep its coherency, flush the D-Cache: its content is not updated after a flash erase. */
  __HAL_FLASH_DATA_CACHE_DISABLE();
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <FI_CacheFlush+0x40>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a0d      	ldr	r2, [pc, #52]	; (8005594 <FI_CacheFlush+0x40>)
 800555e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005562:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_RESET();
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <FI_CacheFlush+0x40>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <FI_CacheFlush+0x40>)
 800556a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	4b08      	ldr	r3, [pc, #32]	; (8005594 <FI_CacheFlush+0x40>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a07      	ldr	r2, [pc, #28]	; (8005594 <FI_CacheFlush+0x40>)
 8005576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800557a:	6013      	str	r3, [r2, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <FI_CacheFlush+0x40>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a04      	ldr	r2, [pc, #16]	; (8005594 <FI_CacheFlush+0x40>)
 8005582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005586:	6013      	str	r3, [r2, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	58004000 	.word	0x58004000

08005598 <FI_CheckBankConfig>:
  * @retval EE_Status
  *           - EE_OK: on success
  *           - EE error code: if an error occurs
  */
EE_Status FI_CheckBankConfig(void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  }

  return status;
#else
  /* No feature 128-bits single bank, so always 64-bits dual bank */
  return EE_OK;
 800559c:	2300      	movs	r3, #0
#endif
}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	f023 0218 	bic.w	r2, r3, #24
 80055bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4013      	ands	r3, r2
 80055f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80055f8:	68fb      	ldr	r3, [r7, #12]
}
 80055fa:	bf00      	nop
 80055fc:	3714      	adds	r7, #20
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
	...

08005608 <serialOut>:
/* USER CODE BEGIN 0 */

/***************************************************************************************************************
*     S E R I A L   O U T                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void serialOut(char* message){
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  getTimeBCD();
 8005610:	f000 f834 	bl	800567c <getTimeBCD>
  sprintf(txBuffer,"%s %s\r\n",logtime, message);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a12      	ldr	r2, [pc, #72]	; (8005660 <serialOut+0x58>)
 8005618:	4912      	ldr	r1, [pc, #72]	; (8005664 <serialOut+0x5c>)
 800561a:	4813      	ldr	r0, [pc, #76]	; (8005668 <serialOut+0x60>)
 800561c:	f00f f83a 	bl	8014694 <siprintf>

  //HAL_UART_Transmit_IT(&huart1, (uint8_t*)txBuffer, strlen(txBuffer));
  if (HAL_UART_Transmit(&huart1, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8005620:	4811      	ldr	r0, [pc, #68]	; (8005668 <serialOut+0x60>)
 8005622:	f7fa fdad 	bl	8000180 <strlen>
 8005626:	4603      	mov	r3, r0
 8005628:	b29a      	uxth	r2, r3
 800562a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800562e:	490e      	ldr	r1, [pc, #56]	; (8005668 <serialOut+0x60>)
 8005630:	480e      	ldr	r0, [pc, #56]	; (800566c <serialOut+0x64>)
 8005632:	f00c fd11 	bl	8012058 <HAL_UART_Transmit>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00c      	beq.n	8005656 <serialOut+0x4e>
    if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - Serial debug output error"); serialOut(tempBuffer);}
 800563c:	4b0c      	ldr	r3, [pc, #48]	; (8005670 <serialOut+0x68>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d006      	beq.n	8005656 <serialOut+0x4e>
 8005648:	490a      	ldr	r1, [pc, #40]	; (8005674 <serialOut+0x6c>)
 800564a:	480b      	ldr	r0, [pc, #44]	; (8005678 <serialOut+0x70>)
 800564c:	f00f f822 	bl	8014694 <siprintf>
 8005650:	4809      	ldr	r0, [pc, #36]	; (8005678 <serialOut+0x70>)
 8005652:	f7ff ffd9 	bl	8005608 <serialOut>
  }
}
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000a5c 	.word	0x20000a5c
 8005664:	08017a08 	.word	0x08017a08
 8005668:	20000a68 	.word	0x20000a68
 800566c:	2000044c 	.word	0x2000044c
 8005670:	2000000c 	.word	0x2000000c
 8005674:	08017a10 	.word	0x08017a10
 8005678:	20000b64 	.word	0x20000b64

0800567c <getTimeBCD>:

/***************************************************************************************************************
*     T I M E S T A M P                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void getTimeBCD(void){
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 8005682:	f107 0308 	add.w	r3, r7, #8
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	609a      	str	r2, [r3, #8]
 800568e:	60da      	str	r2, [r3, #12]
 8005690:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8005692:	2300      	movs	r3, #0
 8005694:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 8005696:	f107 0308 	add.w	r3, r7, #8
 800569a:	2201      	movs	r2, #1
 800569c:	4619      	mov	r1, r3
 800569e:	480e      	ldr	r0, [pc, #56]	; (80056d8 <getTimeBCD+0x5c>)
 80056a0:	f00a fd60 	bl	8010164 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 80056a4:	1d3b      	adds	r3, r7, #4
 80056a6:	2201      	movs	r2, #1
 80056a8:	4619      	mov	r1, r3
 80056aa:	480b      	ldr	r0, [pc, #44]	; (80056d8 <getTimeBCD+0x5c>)
 80056ac:	f00a fe64 	bl	8010378 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 80056b0:	7abb      	ldrb	r3, [r7, #10]
 80056b2:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 80056b4:	7a7b      	ldrb	r3, [r7, #9]
 80056b6:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 80056b8:	7a3b      	ldrb	r3, [r7, #8]
 80056ba:	777b      	strb	r3, [r7, #29]
  sprintf(logtime,"%02x:%02x:%02x",hours,minutes,seconds);
 80056bc:	7f7a      	ldrb	r2, [r7, #29]
 80056be:	7fb9      	ldrb	r1, [r7, #30]
 80056c0:	7ffb      	ldrb	r3, [r7, #31]
 80056c2:	9300      	str	r3, [sp, #0]
 80056c4:	460b      	mov	r3, r1
 80056c6:	4905      	ldr	r1, [pc, #20]	; (80056dc <getTimeBCD+0x60>)
 80056c8:	4805      	ldr	r0, [pc, #20]	; (80056e0 <getTimeBCD+0x64>)
 80056ca:	f00e ffe3 	bl	8014694 <siprintf>
}
 80056ce:	bf00      	nop
 80056d0:	3720      	adds	r7, #32
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	200004ec 	.word	0x200004ec
 80056dc:	08017a34 	.word	0x08017a34
 80056e0:	20000a5c 	.word	0x20000a5c

080056e4 <writeRTC>:

/***************************************************************************************************************
*     w r i t e R T C                                                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void writeRTC(time_t now)
{
 80056e4:	b5b0      	push	{r4, r5, r7, lr}
 80056e6:	b092      	sub	sp, #72	; 0x48
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	e9c7 0100 	strd	r0, r1, [r7]

 RTC_TimeTypeDef sTime;
 RTC_DateTypeDef sDate;

 struct tm time_tm;
 time_tm = *(localtime(&now));
 80056ee:	463b      	mov	r3, r7
 80056f0:	4618      	mov	r0, r3
 80056f2:	f00d fe8d 	bl	8013410 <localtime>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f107 040c 	add.w	r4, r7, #12
 80056fc:	461d      	mov	r5, r3
 80056fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005702:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005704:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005706:	682b      	ldr	r3, [r5, #0]
 8005708:	6023      	str	r3, [r4, #0]

 sTime.Hours = (uint8_t)time_tm.tm_hour;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 sTime.Minutes = (uint8_t)time_tm.tm_min;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 sTime.Seconds = (uint8_t)time_tm.tm_sec;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 // Set the time in the RTC
 if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8005722:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005726:	2200      	movs	r2, #0
 8005728:	4619      	mov	r1, r3
 800572a:	4826      	ldr	r0, [pc, #152]	; (80057c4 <writeRTC+0xe0>)
 800572c:	f00a fc56 	bl	800ffdc <HAL_RTC_SetTime>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <writeRTC+0x6c>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetTime returned error"); serialOut(tempBuffer);}
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <writeRTC+0xe4>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d006      	beq.n	8005750 <writeRTC+0x6c>
 8005742:	4922      	ldr	r1, [pc, #136]	; (80057cc <writeRTC+0xe8>)
 8005744:	4822      	ldr	r0, [pc, #136]	; (80057d0 <writeRTC+0xec>)
 8005746:	f00e ffa5 	bl	8014694 <siprintf>
 800574a:	4821      	ldr	r0, [pc, #132]	; (80057d0 <writeRTC+0xec>)
 800574c:	f7ff ff5c 	bl	8005608 <serialOut>
 }

 if (time_tm.tm_wday == 0) { time_tm.tm_wday = 7; }     // STM32 day order is Monday to Sunday
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <writeRTC+0x76>
 8005756:	2307      	movs	r3, #7
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 sDate.WeekDay = (uint8_t)time_tm.tm_wday;
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	b2db      	uxtb	r3, r3
 800575e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 sDate.Month = (uint8_t)time_tm.tm_mon+1;               // STM32 month starts at 1
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	3301      	adds	r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 sDate.Date = (uint8_t)time_tm.tm_mday;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 sDate.Year = (uint16_t)(time_tm.tm_year + 1900-2000);  // time.h is years since 1900, STM32 is years since 2000
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	3b64      	subs	r3, #100	; 0x64
 800577c:	b2db      	uxtb	r3, r3
 800577e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//Set the Date in the RTC
 if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8005782:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005786:	2200      	movs	r2, #0
 8005788:	4619      	mov	r1, r3
 800578a:	480e      	ldr	r0, [pc, #56]	; (80057c4 <writeRTC+0xe0>)
 800578c:	f00a fd46 	bl	801021c <HAL_RTC_SetDate>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00c      	beq.n	80057b0 <writeRTC+0xcc>
 {
   if(debugLevel & DBG_ERRORS){ sprintf(tempBuffer,"ERROR - HAL_RTC_SetDate returned error"); serialOut(tempBuffer);}
 8005796:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <writeRTC+0xe4>)
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	f003 0301 	and.w	r3, r3, #1
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d006      	beq.n	80057b0 <writeRTC+0xcc>
 80057a2:	490c      	ldr	r1, [pc, #48]	; (80057d4 <writeRTC+0xf0>)
 80057a4:	480a      	ldr	r0, [pc, #40]	; (80057d0 <writeRTC+0xec>)
 80057a6:	f00e ff75 	bl	8014694 <siprintf>
 80057aa:	4809      	ldr	r0, [pc, #36]	; (80057d0 <writeRTC+0xec>)
 80057ac:	f7ff ff2c 	bl	8005608 <serialOut>
 }

 HAL_RTCEx_BKUPWrite(&hrtc,RTC_BKP_DR0,0x32F2);       // lock it in with the backup registers
 80057b0:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80057b4:	2100      	movs	r1, #0
 80057b6:	4803      	ldr	r0, [pc, #12]	; (80057c4 <writeRTC+0xe0>)
 80057b8:	f00a feb7 	bl	801052a <HAL_RTCEx_BKUPWrite>

}
 80057bc:	bf00      	nop
 80057be:	3748      	adds	r7, #72	; 0x48
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bdb0      	pop	{r4, r5, r7, pc}
 80057c4:	200004ec 	.word	0x200004ec
 80057c8:	2000000c 	.word	0x2000000c
 80057cc:	08017a44 	.word	0x08017a44
 80057d0:	20000b64 	.word	0x20000b64
 80057d4:	08017a6c 	.word	0x08017a6c

080057d8 <readRTC>:

/***************************************************************************************************************
*     r e a d R T C                                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
time_t readRTC(void)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b094      	sub	sp, #80	; 0x50
 80057dc:	af00      	add	r7, sp, #0

  RTC_DateTypeDef rtcDate;
  RTC_TimeTypeDef rtcTime;
  time_t currentTime = {0};
 80057de:	f04f 0200 	mov.w	r2, #0
 80057e2:	f04f 0300 	mov.w	r3, #0
 80057e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  struct tm tim = {0};
 80057ea:	463b      	mov	r3, r7
 80057ec:	2224      	movs	r2, #36	; 0x24
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f00d ff3d 	bl	8013670 <memset>

  HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80057f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057fa:	2200      	movs	r2, #0
 80057fc:	4619      	mov	r1, r3
 80057fe:	4822      	ldr	r0, [pc, #136]	; (8005888 <readRTC+0xb0>)
 8005800:	f00a fcb0 	bl	8010164 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8005804:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005808:	2200      	movs	r2, #0
 800580a:	4619      	mov	r1, r3
 800580c:	481e      	ldr	r0, [pc, #120]	; (8005888 <readRTC+0xb0>)
 800580e:	f00a fdb3 	bl	8010378 <HAL_RTC_GetDate>
  uint8_t hh  = rtcTime.Hours;
 8005812:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint8_t mm  = rtcTime.Minutes;
 800581a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800581e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint8_t ss  = rtcTime.Seconds;
 8005822:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005826:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  uint8_t d   = rtcDate.Date;
 800582a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800582e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  uint8_t m   = rtcDate.Month;
 8005832:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 8005836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  uint16_t y  = rtcDate.Year;
 800583a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800583e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t yr = (uint16_t)(y + 2000-1900);  // time.h is years since 1900, STM32 is years since 2000
 8005842:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005846:	3364      	adds	r3, #100	; 0x64
 8005848:	87fb      	strh	r3, [r7, #62]	; 0x3e

  tim.tm_year = yr;
 800584a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800584c:	617b      	str	r3, [r7, #20]
  tim.tm_mon  = m - 1;       // adjust the month numbering (STM32 starts at one, time.h starts at 0)
 800584e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005852:	3b01      	subs	r3, #1
 8005854:	613b      	str	r3, [r7, #16]
  tim.tm_mday = d;
 8005856:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800585a:	60fb      	str	r3, [r7, #12]
  tim.tm_hour = hh;
 800585c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005860:	60bb      	str	r3, [r7, #8]
  tim.tm_min  = mm;
 8005862:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8005866:	607b      	str	r3, [r7, #4]
  tim.tm_sec  = ss;
 8005868:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800586c:	603b      	str	r3, [r7, #0]
  currentTime = mktime(&tim);
 800586e:	463b      	mov	r3, r7
 8005870:	4618      	mov	r0, r3
 8005872:	f00d ffdd 	bl	8013830 <mktime>
 8005876:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48

  return currentTime;
 800587a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
  printTm = *(localtime(&currentTime));
  char buffer[80];
  strftime(buffer,80,'RTC %m/%d/%y %H:%M:%S', &printTm);
  sprintf('%s  ', buffer);
*/
}
 800587e:	4610      	mov	r0, r2
 8005880:	4619      	mov	r1, r3
 8005882:	3750      	adds	r7, #80	; 0x50
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	200004ec 	.word	0x200004ec

0800588c <LoadAllEEPROM>:
/***************************************************************************************************************
*     E E P R O M                                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/

EE_Status LoadAllEEPROM(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0

  uint16_t virtAddress;
  EE_Status eeStatus = EE_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	80bb      	strh	r3, [r7, #4]

  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 8005896:	2301      	movs	r3, #1
 8005898:	80fb      	strh	r3, [r7, #6]
 800589a:	e010      	b.n	80058be <LoadAllEEPROM+0x32>
    eeStatus |= EE_ReadVariable32bits(virtAddress, &eeVarDataTab[virtAddress]);
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4a0b      	ldr	r2, [pc, #44]	; (80058d0 <LoadAllEEPROM+0x44>)
 80058a2:	441a      	add	r2, r3
 80058a4:	88fb      	ldrh	r3, [r7, #6]
 80058a6:	4611      	mov	r1, r2
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe fe73 	bl	8004594 <EE_ReadVariable32bits>
 80058ae:	4603      	mov	r3, r0
 80058b0:	461a      	mov	r2, r3
 80058b2:	88bb      	ldrh	r3, [r7, #4]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	80bb      	strh	r3, [r7, #4]
  for(virtAddress = 1; virtAddress < (NB_OF_VARIABLES + 1); virtAddress++) {
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	3301      	adds	r3, #1
 80058bc:	80fb      	strh	r3, [r7, #6]
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b32      	cmp	r3, #50	; 0x32
 80058c2:	d9eb      	bls.n	800589c <LoadAllEEPROM+0x10>
  if(eeStatus == EE_OK){

  }


  return eeStatus;
 80058c4:	88bb      	ldrh	r3, [r7, #4]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3708      	adds	r7, #8
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	2000098c 	.word	0x2000098c

080058d4 <StoreEEPROM>:
  return eeStatus;
}


EE_Status StoreEEPROM(uint16_t virtAddress, uint32_t data)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	4603      	mov	r3, r0
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	80fb      	strh	r3, [r7, #6]

  EE_Status eeStatus = EE_OK;
 80058e0:	2300      	movs	r3, #0
 80058e2:	81fb      	strh	r3, [r7, #14]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 80058e4:	f007 fffe 	bl	800d8e4 <HAL_FLASH_Unlock>

  //Clear OPTVERR bit
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80058e8:	4b1c      	ldr	r3, [pc, #112]	; (800595c <StoreEEPROM+0x88>)
 80058ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80058ee:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 80058f0:	bf00      	nop
 80058f2:	4b1a      	ldr	r3, [pc, #104]	; (800595c <StoreEEPROM+0x88>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fe:	d0f8      	beq.n	80058f2 <StoreEEPROM+0x1e>

  while (eeErasingOnGoing == 1) { }
 8005900:	bf00      	nop
 8005902:	4b17      	ldr	r3, [pc, #92]	; (8005960 <StoreEEPROM+0x8c>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d0fb      	beq.n	8005902 <StoreEEPROM+0x2e>

  eeStatus = EE_WriteVariable32bits(virtAddress, data);
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	4611      	mov	r1, r2
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe fe64 	bl	80045de <EE_WriteVariable32bits>
 8005916:	4603      	mov	r3, r0
 8005918:	81fb      	strh	r3, [r7, #14]
  eeStatus|= EE_ReadVariable32bits(virtAddress, &data);
 800591a:	463a      	mov	r2, r7
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	4611      	mov	r1, r2
 8005920:	4618      	mov	r0, r3
 8005922:	f7fe fe37 	bl	8004594 <EE_ReadVariable32bits>
 8005926:	4603      	mov	r3, r0
 8005928:	461a      	mov	r2, r3
 800592a:	89fb      	ldrh	r3, [r7, #14]
 800592c:	4313      	orrs	r3, r2
 800592e:	81fb      	strh	r3, [r7, #14]

  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005930:	89fb      	ldrh	r3, [r7, #14]
 8005932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <StoreEEPROM+0x7a>
 800593a:	4b09      	ldr	r3, [pc, #36]	; (8005960 <StoreEEPROM+0x8c>)
 800593c:	2201      	movs	r2, #1
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	f7fe fefa 	bl	8004738 <EE_CleanUp_IT>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	4313      	orrs	r3, r2
 800594c:	81fb      	strh	r3, [r7, #14]
 // if ((ee_status & EE_STATUSMASK_ERROR) == EE_STATUSMASK_ERROR) {Error_Handler();}

  /* Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 800594e:	f007 ffeb 	bl	800d928 <HAL_FLASH_Lock>

  return eeStatus;
 8005952:	89fb      	ldrh	r3, [r7, #14]

    */



}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	58004000 	.word	0x58004000
 8005960:	20000988 	.word	0x20000988

08005964 <switchLedOn>:

/***************************************************************************************************************
*     L E D   O N / O F F                                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void switchLedOn(uint8_t led)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 800596e:	79fb      	ldrb	r3, [r7, #7]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d82f      	bhi.n	80059d4 <switchLedOn+0x70>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <switchLedOn+0x18>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	0800598d 	.word	0x0800598d
 8005980:	0800599f 	.word	0x0800599f
 8005984:	080059b1 	.word	0x080059b1
 8005988:	080059c3 	.word	0x080059c3
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_SET);
 800598c:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <switchLedOn+0x7c>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <switchLedOn+0x80>)
 8005992:	8811      	ldrh	r1, [r2, #0]
 8005994:	2201      	movs	r2, #1
 8005996:	4618      	mov	r0, r3
 8005998:	f008 fb04 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 800599c:	e01b      	b.n	80059d6 <switchLedOn+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_SET);
 800599e:	4b12      	ldr	r3, [pc, #72]	; (80059e8 <switchLedOn+0x84>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a12      	ldr	r2, [pc, #72]	; (80059ec <switchLedOn+0x88>)
 80059a4:	8811      	ldrh	r1, [r2, #0]
 80059a6:	2201      	movs	r2, #1
 80059a8:	4618      	mov	r0, r3
 80059aa:	f008 fafb 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 80059ae:	e012      	b.n	80059d6 <switchLedOn+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_SET);
 80059b0:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <switchLedOn+0x8c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a0f      	ldr	r2, [pc, #60]	; (80059f4 <switchLedOn+0x90>)
 80059b6:	8811      	ldrh	r1, [r2, #0]
 80059b8:	2201      	movs	r2, #1
 80059ba:	4618      	mov	r0, r3
 80059bc:	f008 faf2 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 80059c0:	e009      	b.n	80059d6 <switchLedOn+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_SET);
 80059c2:	4b0d      	ldr	r3, [pc, #52]	; (80059f8 <switchLedOn+0x94>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a0d      	ldr	r2, [pc, #52]	; (80059fc <switchLedOn+0x98>)
 80059c8:	8811      	ldrh	r1, [r2, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	4618      	mov	r0, r3
 80059ce:	f008 fae9 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 80059d2:	e000      	b.n	80059d6 <switchLedOn+0x72>
      default: break;
 80059d4:	bf00      	nop
  }
}
 80059d6:	bf00      	nop
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000cf0 	.word	0x20000cf0
 80059e4:	20000cee 	.word	0x20000cee
 80059e8:	20000cf8 	.word	0x20000cf8
 80059ec:	20000cf4 	.word	0x20000cf4
 80059f0:	20000d00 	.word	0x20000d00
 80059f4:	20000cfc 	.word	0x20000cfc
 80059f8:	20000d08 	.word	0x20000d08
 80059fc:	20000d04 	.word	0x20000d04

08005a00 <switchLedOff>:

void switchLedOff(uint8_t led)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	71fb      	strb	r3, [r7, #7]
  switch (led) {
 8005a0a:	79fb      	ldrb	r3, [r7, #7]
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d82f      	bhi.n	8005a70 <switchLedOff+0x70>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <switchLedOff+0x18>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005a3b 	.word	0x08005a3b
 8005a20:	08005a4d 	.word	0x08005a4d
 8005a24:	08005a5f 	.word	0x08005a5f
      case 0:
        HAL_GPIO_WritePin(LED1_GPIO_Port,  LED1_Pin , GPIO_PIN_RESET);
 8005a28:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <switchLedOff+0x7c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <switchLedOff+0x80>)
 8005a2e:	8811      	ldrh	r1, [r2, #0]
 8005a30:	2200      	movs	r2, #0
 8005a32:	4618      	mov	r0, r3
 8005a34:	f008 fab6 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 8005a38:	e01b      	b.n	8005a72 <switchLedOff+0x72>
      case 1:
          HAL_GPIO_WritePin(LED2_GPIO_Port,  LED2_Pin , GPIO_PIN_RESET);
 8005a3a:	4b12      	ldr	r3, [pc, #72]	; (8005a84 <switchLedOff+0x84>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <switchLedOff+0x88>)
 8005a40:	8811      	ldrh	r1, [r2, #0]
 8005a42:	2200      	movs	r2, #0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f008 faad 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 8005a4a:	e012      	b.n	8005a72 <switchLedOff+0x72>
      case 2:
          HAL_GPIO_WritePin(LED3_GPIO_Port,  LED3_Pin , GPIO_PIN_RESET);
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <switchLedOff+0x8c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0f      	ldr	r2, [pc, #60]	; (8005a90 <switchLedOff+0x90>)
 8005a52:	8811      	ldrh	r1, [r2, #0]
 8005a54:	2200      	movs	r2, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f008 faa4 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 8005a5c:	e009      	b.n	8005a72 <switchLedOff+0x72>
      case 3:
          HAL_GPIO_WritePin(LED4_GPIO_Port,  LED4_Pin , GPIO_PIN_RESET);
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <switchLedOff+0x94>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <switchLedOff+0x98>)
 8005a64:	8811      	ldrh	r1, [r2, #0]
 8005a66:	2200      	movs	r2, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f008 fa9b 	bl	800dfa4 <HAL_GPIO_WritePin>
          break;
 8005a6e:	e000      	b.n	8005a72 <switchLedOff+0x72>
      default: break;
 8005a70:	bf00      	nop
  }
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000cf0 	.word	0x20000cf0
 8005a80:	20000cee 	.word	0x20000cee
 8005a84:	20000cf8 	.word	0x20000cf8
 8005a88:	20000cf4 	.word	0x20000cf4
 8005a8c:	20000d00 	.word	0x20000d00
 8005a90:	20000cfc 	.word	0x20000cfc
 8005a94:	20000d08 	.word	0x20000d08
 8005a98:	20000d04 	.word	0x20000d04

08005a9c <HAL_GPIO_EXTI_Callback>:


/***************************************************************************************************************
 *   G P I O     I N T E R R U P T    C A L L B A C K                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	80fb      	strh	r3, [r7, #6]
  // BUTTON2_PIN    = GPIO_PIN_10 Port B
  // CAN1_INT1_Pin  = GPIO_PIN_10 Port A



  if(GPIO_Pin == CAN1_INT_Pin){
 8005aa6:	4b39      	ldr	r3, [pc, #228]	; (8005b8c <HAL_GPIO_EXTI_Callback+0xf0>)
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d068      	beq.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
    // CAN1 (VCU) Interrupt
  }else if (GPIO_Pin == CAN1_INT0_Pin){
 8005ab0:	4b37      	ldr	r3, [pc, #220]	; (8005b90 <HAL_GPIO_EXTI_Callback+0xf4>)
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d103      	bne.n	8005ac2 <HAL_GPIO_EXTI_Callback+0x26>
    // CAN1 (VCU) TX Interrupt
    can1TxInterrupt = 1;
 8005aba:	4b36      	ldr	r3, [pc, #216]	; (8005b94 <HAL_GPIO_EXTI_Callback+0xf8>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]
  }else if(GPIO_Pin == BUTTON3_Pin){

  }else if(GPIO_Pin == BUTTON4_Pin){

  }
}
 8005ac0:	e05f      	b.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN1_INT1_Pin){
 8005ac2:	4b35      	ldr	r3, [pc, #212]	; (8005b98 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	88fa      	ldrh	r2, [r7, #6]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d11c      	bne.n	8005b06 <HAL_GPIO_EXTI_Callback+0x6a>
     can1RxInterrupt = !HAL_GPIO_ReadPin(CAN1_INT1_GPIO_Port, CAN1_INT1_Pin); // Active Low - inverted with !
 8005acc:	4b33      	ldr	r3, [pc, #204]	; (8005b9c <HAL_GPIO_EXTI_Callback+0x100>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a31      	ldr	r2, [pc, #196]	; (8005b98 <HAL_GPIO_EXTI_Callback+0xfc>)
 8005ad2:	8812      	ldrh	r2, [r2, #0]
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f008 fa4c 	bl	800df74 <HAL_GPIO_ReadPin>
 8005adc:	4603      	mov	r3, r0
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bf0c      	ite	eq
 8005ae2:	2301      	moveq	r3, #1
 8005ae4:	2300      	movne	r3, #0
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	461a      	mov	r2, r3
 8005aea:	4b2d      	ldr	r3, [pc, #180]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0x104>)
 8005aec:	701a      	strb	r2, [r3, #0]
     if (can1RxInterrupt) switchLedOn(VCU_RX_LED);
 8005aee:	4b2c      	ldr	r3, [pc, #176]	; (8005ba0 <HAL_GPIO_EXTI_Callback+0x104>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_GPIO_EXTI_Callback+0x62>
 8005af6:	2000      	movs	r0, #0
 8005af8:	f7ff ff34 	bl	8005964 <switchLedOn>
}
 8005afc:	e041      	b.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
     else switchLedOff(VCU_RX_LED);
 8005afe:	2000      	movs	r0, #0
 8005b00:	f7ff ff7e 	bl	8005a00 <switchLedOff>
}
 8005b04:	e03d      	b.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT_Pin){
 8005b06:	4b27      	ldr	r3, [pc, #156]	; (8005ba4 <HAL_GPIO_EXTI_Callback+0x108>)
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	88fa      	ldrh	r2, [r7, #6]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d038      	beq.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT0_Pin){
 8005b10:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <HAL_GPIO_EXTI_Callback+0x10c>)
 8005b12:	881b      	ldrh	r3, [r3, #0]
 8005b14:	88fa      	ldrh	r2, [r7, #6]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d103      	bne.n	8005b22 <HAL_GPIO_EXTI_Callback+0x86>
    can2TxInterrupt = 1;
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <HAL_GPIO_EXTI_Callback+0x110>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	701a      	strb	r2, [r3, #0]
}
 8005b20:	e02f      	b.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if (GPIO_Pin == CAN2_INT1_Pin){
 8005b22:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b24:	881b      	ldrh	r3, [r3, #0]
 8005b26:	88fa      	ldrh	r2, [r7, #6]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d11c      	bne.n	8005b66 <HAL_GPIO_EXTI_Callback+0xca>
    can2RxInterrupt = !HAL_GPIO_ReadPin(CAN2_INT1_GPIO_Port, CAN2_INT1_Pin); // Active Low - inverted with !
 8005b2c:	4b21      	ldr	r3, [pc, #132]	; (8005bb4 <HAL_GPIO_EXTI_Callback+0x118>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1f      	ldr	r2, [pc, #124]	; (8005bb0 <HAL_GPIO_EXTI_Callback+0x114>)
 8005b32:	8812      	ldrh	r2, [r2, #0]
 8005b34:	4611      	mov	r1, r2
 8005b36:	4618      	mov	r0, r3
 8005b38:	f008 fa1c 	bl	800df74 <HAL_GPIO_ReadPin>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	bf0c      	ite	eq
 8005b42:	2301      	moveq	r3, #1
 8005b44:	2300      	movne	r3, #0
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	461a      	mov	r2, r3
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b4c:	701a      	strb	r2, [r3, #0]
    if (can2RxInterrupt) switchLedOn(MCU_RX_LED);
 8005b4e:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <HAL_GPIO_EXTI_Callback+0x11c>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <HAL_GPIO_EXTI_Callback+0xc2>
 8005b56:	2001      	movs	r0, #1
 8005b58:	f7ff ff04 	bl	8005964 <switchLedOn>
}
 8005b5c:	e011      	b.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
    else switchLedOff(MCU_RX_LED);
 8005b5e:	2001      	movs	r0, #1
 8005b60:	f7ff ff4e 	bl	8005a00 <switchLedOff>
}
 8005b64:	e00d      	b.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON1_Pin){
 8005b66:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <HAL_GPIO_EXTI_Callback+0x120>)
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	88fa      	ldrh	r2, [r7, #6]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d008      	beq.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON2_Pin){
 8005b70:	4b13      	ldr	r3, [pc, #76]	; (8005bc0 <HAL_GPIO_EXTI_Callback+0x124>)
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	88fa      	ldrh	r2, [r7, #6]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d003      	beq.n	8005b82 <HAL_GPIO_EXTI_Callback+0xe6>
  }else if(GPIO_Pin == BUTTON3_Pin){
 8005b7a:	4b12      	ldr	r3, [pc, #72]	; (8005bc4 <HAL_GPIO_EXTI_Callback+0x128>)
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	429a      	cmp	r2, r3
}
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000c5e 	.word	0x20000c5e
 8005b90:	20000c66 	.word	0x20000c66
 8005b94:	20000d27 	.word	0x20000d27
 8005b98:	20000c6e 	.word	0x20000c6e
 8005b9c:	20000c70 	.word	0x20000c70
 8005ba0:	20000d26 	.word	0x20000d26
 8005ba4:	20000c7c 	.word	0x20000c7c
 8005ba8:	20000c86 	.word	0x20000c86
 8005bac:	20000d25 	.word	0x20000d25
 8005bb0:	20000c8e 	.word	0x20000c8e
 8005bb4:	20000c90 	.word	0x20000c90
 8005bb8:	20000d24 	.word	0x20000d24
 8005bbc:	20000ccc 	.word	0x20000ccc
 8005bc0:	20000cd6 	.word	0x20000cd6
 8005bc4:	20000cde 	.word	0x20000cde

08005bc8 <HAL_TIM_PeriodElapsedCallback>:

/***************************************************************************************************************
*     T I M E R     P E R I O D    E L A P S E D    C A L L B A C K                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]

  // This callback is automatically called by the HAL on the UEV event
  if(htim->Instance == htim1.Instance){
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b24      	ldr	r3, [pc, #144]	; (8005c68 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d140      	bne.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x96>
    // last contact timer overflow
    etTimerOverflows++;
 8005bdc:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	3301      	adds	r3, #1
 8005be2:	4a22      	ldr	r2, [pc, #136]	; (8005c6c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8005be4:	6013      	str	r3, [r2, #0]
    decSec++;
 8005be6:	4b22      	ldr	r3, [pc, #136]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	3301      	adds	r3, #1
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	4b20      	ldr	r3, [pc, #128]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005bf0:	701a      	strb	r2, [r3, #0]
    if(decSec == 10){
 8005bf2:	4b1f      	ldr	r3, [pc, #124]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b0a      	cmp	r3, #10
 8005bf8:	d117      	bne.n	8005c2a <HAL_TIM_PeriodElapsedCallback+0x62>
      decSec = 0;
 8005bfa:	4b1d      	ldr	r3, [pc, #116]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]

      if(hwPlatform == PLATFORM_NUCLEO){
 8005c00:	4b1c      	ldr	r3, [pc, #112]	; (8005c74 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d108      	bne.n	8005c1a <HAL_TIM_PeriodElapsedCallback+0x52>
        HAL_GPIO_TogglePin(LED3_GPIO_Port,  LED3_Pin);
 8005c08:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005c0e:	8812      	ldrh	r2, [r2, #0]
 8005c10:	4611      	mov	r1, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	f008 f9de 	bl	800dfd4 <HAL_GPIO_TogglePin>
 8005c18:	e007      	b.n	8005c2a <HAL_TIM_PeriodElapsedCallback+0x62>
      } else {
        // PLATFORM_MODBATT
        HAL_GPIO_TogglePin(LED4_GPIO_Port,  LED4_Pin);
 8005c1a:	4b19      	ldr	r3, [pc, #100]	; (8005c80 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a19      	ldr	r2, [pc, #100]	; (8005c84 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8005c20:	8812      	ldrh	r2, [r2, #0]
 8005c22:	4611      	mov	r1, r2
 8005c24:	4618      	mov	r0, r3
 8005c26:	f008 f9d5 	bl	800dfd4 <HAL_GPIO_TogglePin>
      }
    }
    if((decSec % 2) == 0) sendMaxState = 1;
 8005c2a:	4b11      	ldr	r3, [pc, #68]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <HAL_TIM_PeriodElapsedCallback+0x76>
 8005c38:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
    if((decSec % 5) == 0) sendState = 1;
 8005c3e:	4b0c      	ldr	r3, [pc, #48]	; (8005c70 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005c40:	781a      	ldrb	r2, [r3, #0]
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8005c44:	fba3 1302 	umull	r1, r3, r3, r2
 8005c48:	0899      	lsrs	r1, r3, #2
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <HAL_TIM_PeriodElapsedCallback+0x96>
 8005c58:	4b0d      	ldr	r3, [pc, #52]	; (8005c90 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	701a      	strb	r2, [r3, #0]
  }
}
 8005c5e:	bf00      	nop
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	200005d8 	.word	0x200005d8
 8005c6c:	20000d28 	.word	0x20000d28
 8005c70:	20000d2c 	.word	0x20000d2c
 8005c74:	20000a58 	.word	0x20000a58
 8005c78:	20000d00 	.word	0x20000d00
 8005c7c:	20000cfc 	.word	0x20000cfc
 8005c80:	20000d08 	.word	0x20000d08
 8005c84:	20000d04 	.word	0x20000d04
 8005c88:	20000d2d 	.word	0x20000d2d
 8005c8c:	cccccccd 	.word	0xcccccccd
 8005c90:	20000d2e 	.word	0x20000d2e

08005c94 <eepromDefaults>:

/***************************************************************************************************************
*     E E P R O M   D E F A U L T   V A L U E S                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
EE_Status eepromDefaults(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
  EE_Status eeStatus = EE_OK;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	80fb      	strh	r3, [r7, #6]

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005c9e:	f007 fe21 	bl	800d8e4 <HAL_FLASH_Unlock>

  // Check EEPROM has been set up
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC1, MAGIC1);            // Add Magic data
 8005ca2:	492f      	ldr	r1, [pc, #188]	; (8005d60 <eepromDefaults+0xcc>)
 8005ca4:	2001      	movs	r0, #1
 8005ca6:	f7fe fc9a 	bl	80045de <EE_WriteVariable32bits>
 8005caa:	4603      	mov	r3, r0
 8005cac:	461a      	mov	r2, r3
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	80fb      	strh	r3, [r7, #6]
  // Start cleanup IT mode, if cleanup is needed
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005cb4:	88fb      	ldrh	r3, [r7, #6]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <eepromDefaults+0x3e>
 8005cbe:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <eepromDefaults+0xd0>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	f7fe fd38 	bl	8004738 <EE_CleanUp_IT>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	88fb      	ldrh	r3, [r7, #6]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005cd2:	bf00      	nop
 8005cd4:	4b23      	ldr	r3, [pc, #140]	; (8005d64 <eepromDefaults+0xd0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1fb      	bne.n	8005cd4 <eepromDefaults+0x40>
  eeStatus |= EE_WriteVariable32bits(EE_MAGIC2, MAGIC2);
 8005cdc:	4922      	ldr	r1, [pc, #136]	; (8005d68 <eepromDefaults+0xd4>)
 8005cde:	2002      	movs	r0, #2
 8005ce0:	f7fe fc7d 	bl	80045de <EE_WriteVariable32bits>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005cee:	88fb      	ldrh	r3, [r7, #6]
 8005cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d009      	beq.n	8005d0c <eepromDefaults+0x78>
 8005cf8:	4b1a      	ldr	r3, [pc, #104]	; (8005d64 <eepromDefaults+0xd0>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	f7fe fd1b 	bl	8004738 <EE_CleanUp_IT>
 8005d02:	4603      	mov	r3, r0
 8005d04:	461a      	mov	r2, r3
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d0c:	bf00      	nop
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <eepromDefaults+0xd0>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1fb      	bne.n	8005d0e <eepromDefaults+0x7a>
  eeStatus |= EE_WriteVariable32bits(EE_PACK_CONTROLLER_ID, 0);     // Pack controller ID 0 is default
 8005d16:	2100      	movs	r1, #0
 8005d18:	2003      	movs	r0, #3
 8005d1a:	f7fe fc60 	bl	80045de <EE_WriteVariable32bits>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	461a      	mov	r2, r3
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	4313      	orrs	r3, r2
 8005d26:	80fb      	strh	r3, [r7, #6]
  if ((eeStatus & EE_STATUSMASK_CLEANUP) == EE_STATUSMASK_CLEANUP) {eeErasingOnGoing = 1;eeStatus|= EE_CleanUp_IT();}
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d009      	beq.n	8005d46 <eepromDefaults+0xb2>
 8005d32:	4b0c      	ldr	r3, [pc, #48]	; (8005d64 <eepromDefaults+0xd0>)
 8005d34:	2201      	movs	r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f7fe fcfe 	bl	8004738 <EE_CleanUp_IT>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	88fb      	ldrh	r3, [r7, #6]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	80fb      	strh	r3, [r7, #6]
  while(eeErasingOnGoing){};
 8005d46:	bf00      	nop
 8005d48:	4b06      	ldr	r3, [pc, #24]	; (8005d64 <eepromDefaults+0xd0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1fb      	bne.n	8005d48 <eepromDefaults+0xb4>

  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005d50:	f007 fdea 	bl	800d928 <HAL_FLASH_Lock>

  return eeStatus;
 8005d54:	88fb      	ldrh	r3, [r7, #6]

}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	50616c61 	.word	0x50616c61
 8005d64:	20000988 	.word	0x20000988
 8005d68:	746f7621 	.word	0x746f7621

08005d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  EE_Status eeStatus = EE_OK;
 8005d72:	2300      	movs	r3, #0
 8005d74:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d76:	f007 faf9 	bl	800d36c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d7a:	f000 f8bb 	bl	8005ef4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005d7e:	f000 f925 	bl	8005fcc <PeriphCommonClock_Config>
  // FLASH STUFF WAS HERE

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005d82:	f000 fb67 	bl	8006454 <MX_GPIO_Init>
  MX_SPI1_Init();
 8005d86:	f000 fa13 	bl	80061b0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8005d8a:	f000 fa4f 	bl	800622c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8005d8e:	f000 f987 	bl	80060a0 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8005d92:	f000 fb37 	bl	8006404 <MX_USB_PCD_Init>
  MX_PKA_Init();
 8005d96:	f000 f9cf 	bl	8006138 <MX_PKA_Init>
  MX_RTC_Init();
 8005d9a:	f000 f9e1 	bl	8006160 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8005d9e:	f000 f933 	bl	8006008 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8005da2:	f000 fa81 	bl	80062a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  /* Enable and set FLASH Interrupt priority */
  /* FLASH interrupt is used for the purpose of pages clean up under interrupt */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8005da6:	2200      	movs	r2, #0
 8005da8:	2100      	movs	r1, #0
 8005daa:	2004      	movs	r0, #4
 8005dac:	f007 fc63 	bl	800d676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8005db0:	2004      	movs	r0, #4
 8005db2:	f007 fc7a 	bl	800d6aa <HAL_NVIC_EnableIRQ>

  /* Unlock the Flash Program Erase controller */
  HAL_FLASH_Unlock();
 8005db6:	f007 fd95 	bl	800d8e4 <HAL_FLASH_Unlock>

  /* Clear OPTVERR bit */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8005dba:	4b45      	ldr	r3, [pc, #276]	; (8005ed0 <main+0x164>)
 8005dbc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005dc0:	611a      	str	r2, [r3, #16]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) != RESET) ;
 8005dc2:	bf00      	nop
 8005dc4:	4b42      	ldr	r3, [pc, #264]	; (8005ed0 <main+0x164>)
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dd0:	d0f8      	beq.n	8005dc4 <main+0x58>

  // Set EEPROM emulation firmware to erase all potentially incompletely erased
  // pages if the system came from an asynchronous reset. Conditional erase is
  // safe to use if all Flash operations where completed before the system reset
  if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8005dd2:	4b40      	ldr	r3, [pc, #256]	; (8005ed4 <main+0x168>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <main+0x8a>
  {
    // System reset comes from a power-on reset: Forced Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_FORCED_ERASE);
 8005de0:	2000      	movs	r0, #0
 8005de2:	f7fd fe4d 	bl	8003a80 <EE_Init>
 8005de6:	4603      	mov	r3, r0
 8005de8:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005dea:	88fb      	ldrh	r3, [r7, #6]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d019      	beq.n	8005e24 <main+0xb8>
 8005df0:	f000 ffbe 	bl	8006d70 <Error_Handler>
 8005df4:	e016      	b.n	8005e24 <main+0xb8>
  }
  else
  {
    // Clear the Standby flag
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 8005df6:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <main+0x168>)
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    // Check and Clear the Wakeup flag
    if (__HAL_PWR_GET_FLAG(PWR_FLAG_WUF) != RESET)
 8005dfe:	4b35      	ldr	r3, [pc, #212]	; (8005ed4 <main+0x168>)
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <main+0xa4>
    {
      __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WUF);
 8005e0a:	4b32      	ldr	r3, [pc, #200]	; (8005ed4 <main+0x168>)
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	619a      	str	r2, [r3, #24]
    }
    // System reset comes from a STANDBY wakeup: Conditional Erase
    // Initialize EEPROM emulation driver (mandatory)
    eeStatus = EE_Init(EE_CONDITIONAL_ERASE);
 8005e10:	2001      	movs	r0, #1
 8005e12:	f7fd fe35 	bl	8003a80 <EE_Init>
 8005e16:	4603      	mov	r3, r0
 8005e18:	80fb      	strh	r3, [r7, #6]
    if(eeStatus != EE_OK) {Error_Handler();}
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <main+0xb8>
 8005e20:	f000 ffa6 	bl	8006d70 <Error_Handler>
  }

  // Load EEPROM
  LoadAllEEPROM();
 8005e24:	f7ff fd32 	bl	800588c <LoadAllEEPROM>

  // Check EEPROM has been set up
  if(eeVarDataTab[EE_MAGIC1] != MAGIC1 || eeVarDataTab[EE_MAGIC2] != MAGIC2 ){
 8005e28:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <main+0x16c>)
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	; (8005edc <main+0x170>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d104      	bne.n	8005e3c <main+0xd0>
 8005e32:	4b29      	ldr	r3, [pc, #164]	; (8005ed8 <main+0x16c>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	4a2a      	ldr	r2, [pc, #168]	; (8005ee0 <main+0x174>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d005      	beq.n	8005e48 <main+0xdc>
    // Not set up. Set up initial default values for EEPROM data
    eeStatus = eepromDefaults();
 8005e3c:	f7ff ff2a 	bl	8005c94 <eepromDefaults>
 8005e40:	4603      	mov	r3, r0
 8005e42:	80fb      	strh	r3, [r7, #6]

    LoadAllEEPROM();
 8005e44:	f7ff fd22 	bl	800588c <LoadAllEEPROM>
  }
  // Lock the Flash Program Erase controller */
  HAL_FLASH_Lock();
 8005e48:	f007 fd6e 	bl	800d928 <HAL_FLASH_Lock>
  // Enable Battery Charger
  //HAL_GPIO_WritePin(BAT_CHRG_EN_GPIO_Port,  BAT_CHRG_EN_Pin , GPIO_PIN_RESET);


  // Cycle LED's
  switchLedOn(VCU_RX_LED);
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f7ff fd89 	bl	8005964 <switchLedOn>
  HAL_Delay(250);
 8005e52:	20fa      	movs	r0, #250	; 0xfa
 8005e54:	f007 fb10 	bl	800d478 <HAL_Delay>
  switchLedOff(VCU_RX_LED);
 8005e58:	2000      	movs	r0, #0
 8005e5a:	f7ff fdd1 	bl	8005a00 <switchLedOff>
  switchLedOn(MCU_RX_LED);
 8005e5e:	2001      	movs	r0, #1
 8005e60:	f7ff fd80 	bl	8005964 <switchLedOn>
  HAL_Delay(250);
 8005e64:	20fa      	movs	r0, #250	; 0xfa
 8005e66:	f007 fb07 	bl	800d478 <HAL_Delay>
  switchLedOff(MCU_RX_LED);
 8005e6a:	2001      	movs	r0, #1
 8005e6c:	f7ff fdc8 	bl	8005a00 <switchLedOff>
  switchLedOn(MCU2_RX_LED);
 8005e70:	2002      	movs	r0, #2
 8005e72:	f7ff fd77 	bl	8005964 <switchLedOn>
  HAL_Delay(250);
 8005e76:	20fa      	movs	r0, #250	; 0xfa
 8005e78:	f007 fafe 	bl	800d478 <HAL_Delay>
  switchLedOff(MCU2_RX_LED);
 8005e7c:	2002      	movs	r0, #2
 8005e7e:	f7ff fdbf 	bl	8005a00 <switchLedOff>
  switchLedOn(HBEAT_LED);
 8005e82:	2003      	movs	r0, #3
 8005e84:	f7ff fd6e 	bl	8005964 <switchLedOn>
  HAL_Delay(250);
 8005e88:	20fa      	movs	r0, #250	; 0xfa
 8005e8a:	f007 faf5 	bl	800d478 <HAL_Delay>
  switchLedOff(HBEAT_LED);
 8005e8e:	2003      	movs	r0, #3
 8005e90:	f7ff fdb6 	bl	8005a00 <switchLedOff>

  //start the TIM Base generation in interrupt mode
  //HAL_TIM_OC_Start_IT( &htim1, TIM_CHANNEL_1 );
  HAL_TIM_Base_Start_IT(&htim1);
 8005e94:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <main+0x178>)
 8005e96:	f00a ffdf 	bl	8010e58 <HAL_TIM_Base_Start_IT>

  // Enable CAN Clock
  HAL_GPIO_WritePin(CAN_CLK_EN_GPIO_Port,  CAN_CLK_EN_Pin , GPIO_PIN_SET);
 8005e9a:	4b13      	ldr	r3, [pc, #76]	; (8005ee8 <main+0x17c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a13      	ldr	r2, [pc, #76]	; (8005eec <main+0x180>)
 8005ea0:	8811      	ldrh	r1, [r2, #0]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f008 f87d 	bl	800dfa4 <HAL_GPIO_WritePin>

  // Reset CAN interfaces
  DRV_CANFDSPI_Reset(CAN1);
 8005eaa:	2000      	movs	r0, #0
 8005eac:	f7fb f8a0 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  DRV_CANFDSPI_Reset(CAN2);
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f7fb f89d 	bl	8000ff0 <DRV_CANFDSPI_Reset>

  if(hwPlatform==PLATFORM_MODBATT){
 8005eb6:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <main+0x184>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d102      	bne.n	8005ec4 <main+0x158>
    DRV_CANFDSPI_Reset(CAN3);
 8005ebe:	2002      	movs	r0, #2
 8005ec0:	f7fb f896 	bl	8000ff0 <DRV_CANFDSPI_Reset>
  }
  PCU_Initialize();
 8005ec4:	f000 ff64 	bl	8006d90 <PCU_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    PCU_Tasks();
 8005ec8:	f001 f92e 	bl	8007128 <PCU_Tasks>
 8005ecc:	e7fc      	b.n	8005ec8 <main+0x15c>
 8005ece:	bf00      	nop
 8005ed0:	58004000 	.word	0x58004000
 8005ed4:	58000400 	.word	0x58000400
 8005ed8:	2000098c 	.word	0x2000098c
 8005edc:	50616c61 	.word	0x50616c61
 8005ee0:	746f7621 	.word	0x746f7621
 8005ee4:	200005d8 	.word	0x200005d8
 8005ee8:	20000d18 	.word	0x20000d18
 8005eec:	20000d14 	.word	0x20000d14
 8005ef0:	20000a58 	.word	0x20000a58

08005ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b09a      	sub	sp, #104	; 0x68
 8005ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005efa:	f107 0320 	add.w	r3, r7, #32
 8005efe:	2248      	movs	r2, #72	; 0x48
 8005f00:	2100      	movs	r1, #0
 8005f02:	4618      	mov	r0, r3
 8005f04:	f00d fbb4 	bl	8013670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f08:	1d3b      	adds	r3, r7, #4
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	609a      	str	r2, [r3, #8]
 8005f12:	60da      	str	r2, [r3, #12]
 8005f14:	611a      	str	r2, [r3, #16]
 8005f16:	615a      	str	r2, [r3, #20]
 8005f18:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8005f1a:	f008 f9e3 	bl	800e2e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8005f1e:	2010      	movs	r0, #16
 8005f20:	f7ff fb42 	bl	80055a8 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f24:	4b28      	ldr	r3, [pc, #160]	; (8005fc8 <SystemClock_Config+0xd4>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f2c:	4a26      	ldr	r2, [pc, #152]	; (8005fc8 <SystemClock_Config+0xd4>)
 8005f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <SystemClock_Config+0xd4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f3c:	603b      	str	r3, [r7, #0]
 8005f3e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8005f40:	2307      	movs	r3, #7
 8005f42:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005f4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005f54:	2340      	movs	r3, #64	; 0x40
 8005f56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005f58:	2302      	movs	r3, #2
 8005f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005f60:	2310      	movs	r3, #16
 8005f62:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005f64:	2308      	movs	r3, #8
 8005f66:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005f68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005f6e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005f72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005f74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f78:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005f7a:	f107 0320 	add.w	r3, r7, #32
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f008 fd44 	bl	800ea0c <HAL_RCC_OscConfig>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8005f8a:	f000 fef1 	bl	8006d70 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8005f8e:	236f      	movs	r3, #111	; 0x6f
 8005f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005f92:	2303      	movs	r3, #3
 8005f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8005fa2:	2380      	movs	r3, #128	; 0x80
 8005fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8005faa:	1d3b      	adds	r3, r7, #4
 8005fac:	2103      	movs	r1, #3
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f009 f8a0 	bl	800f0f4 <HAL_RCC_ClockConfig>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8005fba:	f000 fed9 	bl	8006d70 <Error_Handler>
  }
}
 8005fbe:	bf00      	nop
 8005fc0:	3768      	adds	r7, #104	; 0x68
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	58000400 	.word	0x58000400

08005fcc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b094      	sub	sp, #80	; 0x50
 8005fd0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	2250      	movs	r2, #80	; 0x50
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f00d fb49 	bl	8013670 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8005fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005fe2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8005fe8:	2310      	movs	r3, #16
 8005fea:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fec:	463b      	mov	r3, r7
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f009 fcbd 	bl	800f96e <HAL_RCCEx_PeriphCLKConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8005ffa:	f000 feb9 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8005ffe:	bf00      	nop
 8006000:	3750      	adds	r7, #80	; 0x50
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
	...

08006008 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800600c:	4b22      	ldr	r3, [pc, #136]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 800600e:	4a23      	ldr	r2, [pc, #140]	; (800609c <MX_LPUART1_UART_Init+0x94>)
 8006010:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8006012:	4b21      	ldr	r3, [pc, #132]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006014:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006018:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800601a:	4b1f      	ldr	r3, [pc, #124]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 800601c:	2200      	movs	r2, #0
 800601e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006020:	4b1d      	ldr	r3, [pc, #116]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006022:	2200      	movs	r2, #0
 8006024:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006028:	2200      	movs	r2, #0
 800602a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800602c:	4b1a      	ldr	r3, [pc, #104]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 800602e:	220c      	movs	r2, #12
 8006030:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006032:	4b19      	ldr	r3, [pc, #100]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006034:	2200      	movs	r2, #0
 8006036:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006038:	4b17      	ldr	r3, [pc, #92]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 800603a:	2200      	movs	r2, #0
 800603c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800603e:	4b16      	ldr	r3, [pc, #88]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006040:	2200      	movs	r2, #0
 8006042:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006044:	4b14      	ldr	r3, [pc, #80]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006046:	2200      	movs	r2, #0
 8006048:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800604a:	4b13      	ldr	r3, [pc, #76]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 800604c:	2200      	movs	r2, #0
 800604e:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006050:	4811      	ldr	r0, [pc, #68]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006052:	f00b ffb1 	bl	8011fb8 <HAL_UART_Init>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 800605c:	f000 fe88 	bl	8006d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006060:	2100      	movs	r1, #0
 8006062:	480d      	ldr	r0, [pc, #52]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006064:	f00d f8a3 	bl	80131ae <HAL_UARTEx_SetTxFifoThreshold>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800606e:	f000 fe7f 	bl	8006d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006072:	2100      	movs	r1, #0
 8006074:	4808      	ldr	r0, [pc, #32]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006076:	f00d f8d8 	bl	801322a <HAL_UARTEx_SetRxFifoThreshold>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006080:	f000 fe76 	bl	8006d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006084:	4804      	ldr	r0, [pc, #16]	; (8006098 <MX_LPUART1_UART_Init+0x90>)
 8006086:	f00d f859 	bl	801313c <HAL_UARTEx_DisableFifoMode>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d001      	beq.n	8006094 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006090:	f000 fe6e 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006094:	bf00      	nop
 8006096:	bd80      	pop	{r7, pc}
 8006098:	200003b8 	.word	0x200003b8
 800609c:	40008000 	.word	0x40008000

080060a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060a6:	4a23      	ldr	r2, [pc, #140]	; (8006134 <MX_USART1_UART_Init+0x94>)
 80060a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80060aa:	4b21      	ldr	r3, [pc, #132]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80060b2:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80060b8:	4b1d      	ldr	r3, [pc, #116]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80060be:	4b1c      	ldr	r3, [pc, #112]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060c6:	220c      	movs	r2, #12
 80060c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060ca:	4b19      	ldr	r3, [pc, #100]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80060d0:	4b17      	ldr	r3, [pc, #92]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060d2:	2200      	movs	r2, #0
 80060d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80060d6:	4b16      	ldr	r3, [pc, #88]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060d8:	2200      	movs	r2, #0
 80060da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80060dc:	4b14      	ldr	r3, [pc, #80]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060de:	2200      	movs	r2, #0
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80060e2:	4b13      	ldr	r3, [pc, #76]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80060e8:	4811      	ldr	r0, [pc, #68]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060ea:	f00b ff65 	bl	8011fb8 <HAL_UART_Init>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80060f4:	f000 fe3c 	bl	8006d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80060f8:	2100      	movs	r1, #0
 80060fa:	480d      	ldr	r0, [pc, #52]	; (8006130 <MX_USART1_UART_Init+0x90>)
 80060fc:	f00d f857 	bl	80131ae <HAL_UARTEx_SetTxFifoThreshold>
 8006100:	4603      	mov	r3, r0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006106:	f000 fe33 	bl	8006d70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800610a:	2100      	movs	r1, #0
 800610c:	4808      	ldr	r0, [pc, #32]	; (8006130 <MX_USART1_UART_Init+0x90>)
 800610e:	f00d f88c 	bl	801322a <HAL_UARTEx_SetRxFifoThreshold>
 8006112:	4603      	mov	r3, r0
 8006114:	2b00      	cmp	r3, #0
 8006116:	d001      	beq.n	800611c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006118:	f000 fe2a 	bl	8006d70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800611c:	4804      	ldr	r0, [pc, #16]	; (8006130 <MX_USART1_UART_Init+0x90>)
 800611e:	f00d f80d 	bl	801313c <HAL_UARTEx_DisableFifoMode>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006128:	f000 fe22 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800612c:	bf00      	nop
 800612e:	bd80      	pop	{r7, pc}
 8006130:	2000044c 	.word	0x2000044c
 8006134:	40013800 	.word	0x40013800

08006138 <MX_PKA_Init>:
  * @brief PKA Initialization Function
  * @param None
  * @retval None
  */
static void MX_PKA_Init(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* USER CODE END PKA_Init 0 */

  /* USER CODE BEGIN PKA_Init 1 */

  /* USER CODE END PKA_Init 1 */
  hpka.Instance = PKA;
 800613c:	4b06      	ldr	r3, [pc, #24]	; (8006158 <MX_PKA_Init+0x20>)
 800613e:	4a07      	ldr	r2, [pc, #28]	; (800615c <MX_PKA_Init+0x24>)
 8006140:	601a      	str	r2, [r3, #0]
  if (HAL_PKA_Init(&hpka) != HAL_OK)
 8006142:	4805      	ldr	r0, [pc, #20]	; (8006158 <MX_PKA_Init+0x20>)
 8006144:	f008 f89f 	bl	800e286 <HAL_PKA_Init>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d001      	beq.n	8006152 <MX_PKA_Init+0x1a>
  {
    Error_Handler();
 800614e:	f000 fe0f 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN PKA_Init 2 */

  /* USER CODE END PKA_Init 2 */

}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	200004e0 	.word	0x200004e0
 800615c:	58002000 	.word	0x58002000

08006160 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006164:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <MX_RTC_Init+0x48>)
 8006166:	4a11      	ldr	r2, [pc, #68]	; (80061ac <MX_RTC_Init+0x4c>)
 8006168:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800616a:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <MX_RTC_Init+0x48>)
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <MX_RTC_Init+0x48>)
 8006172:	227f      	movs	r2, #127	; 0x7f
 8006174:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8006176:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <MX_RTC_Init+0x48>)
 8006178:	22ff      	movs	r2, #255	; 0xff
 800617a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800617c:	4b0a      	ldr	r3, [pc, #40]	; (80061a8 <MX_RTC_Init+0x48>)
 800617e:	2200      	movs	r2, #0
 8006180:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006182:	4b09      	ldr	r3, [pc, #36]	; (80061a8 <MX_RTC_Init+0x48>)
 8006184:	2200      	movs	r2, #0
 8006186:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006188:	4b07      	ldr	r3, [pc, #28]	; (80061a8 <MX_RTC_Init+0x48>)
 800618a:	2200      	movs	r2, #0
 800618c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800618e:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <MX_RTC_Init+0x48>)
 8006190:	2200      	movs	r2, #0
 8006192:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006194:	4804      	ldr	r0, [pc, #16]	; (80061a8 <MX_RTC_Init+0x48>)
 8006196:	f009 fe71 	bl	800fe7c <HAL_RTC_Init>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80061a0:	f000 fde6 	bl	8006d70 <Error_Handler>
    Error_Handler();
  }
  */
  /* USER CODE END RTC_Init 2 */

}
 80061a4:	bf00      	nop
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	200004ec 	.word	0x200004ec
 80061ac:	40002800 	.word	0x40002800

080061b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80061b4:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <MX_SPI1_Init+0x74>)
 80061b6:	4a1c      	ldr	r2, [pc, #112]	; (8006228 <MX_SPI1_Init+0x78>)
 80061b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <MX_SPI1_Init+0x74>)
 80061bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80061c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80061c2:	4b18      	ldr	r3, [pc, #96]	; (8006224 <MX_SPI1_Init+0x74>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80061c8:	4b16      	ldr	r3, [pc, #88]	; (8006224 <MX_SPI1_Init+0x74>)
 80061ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80061ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80061d0:	4b14      	ldr	r3, [pc, #80]	; (8006224 <MX_SPI1_Init+0x74>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80061d6:	4b13      	ldr	r3, [pc, #76]	; (8006224 <MX_SPI1_Init+0x74>)
 80061d8:	2200      	movs	r2, #0
 80061da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80061dc:	4b11      	ldr	r3, [pc, #68]	; (8006224 <MX_SPI1_Init+0x74>)
 80061de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80061e4:	4b0f      	ldr	r3, [pc, #60]	; (8006224 <MX_SPI1_Init+0x74>)
 80061e6:	2208      	movs	r2, #8
 80061e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061ea:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <MX_SPI1_Init+0x74>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80061f0:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <MX_SPI1_Init+0x74>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <MX_SPI1_Init+0x74>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <MX_SPI1_Init+0x74>)
 80061fe:	2207      	movs	r2, #7
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <MX_SPI1_Init+0x74>)
 8006204:	2200      	movs	r2, #0
 8006206:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <MX_SPI1_Init+0x74>)
 800620a:	2200      	movs	r2, #0
 800620c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800620e:	4805      	ldr	r0, [pc, #20]	; (8006224 <MX_SPI1_Init+0x74>)
 8006210:	f00a f9a3 	bl	801055a <HAL_SPI_Init>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d001      	beq.n	800621e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800621a:	f000 fda9 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800621e:	bf00      	nop
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000510 	.word	0x20000510
 8006228:	40013000 	.word	0x40013000

0800622c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006230:	4b1b      	ldr	r3, [pc, #108]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006232:	4a1c      	ldr	r2, [pc, #112]	; (80062a4 <MX_SPI2_Init+0x78>)
 8006234:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8006236:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800623c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800623e:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006240:	2200      	movs	r2, #0
 8006242:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8006244:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006246:	f44f 7240 	mov.w	r2, #768	; 0x300
 800624a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800624c:	4b14      	ldr	r3, [pc, #80]	; (80062a0 <MX_SPI2_Init+0x74>)
 800624e:	2200      	movs	r2, #0
 8006250:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006252:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006254:	2200      	movs	r2, #0
 8006256:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8006258:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <MX_SPI2_Init+0x74>)
 800625a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800625e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006260:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006262:	2200      	movs	r2, #0
 8006264:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006266:	4b0e      	ldr	r3, [pc, #56]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006268:	2200      	movs	r2, #0
 800626a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800626c:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <MX_SPI2_Init+0x74>)
 800626e:	2200      	movs	r2, #0
 8006270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006272:	4b0b      	ldr	r3, [pc, #44]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006274:	2200      	movs	r2, #0
 8006276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8006278:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <MX_SPI2_Init+0x74>)
 800627a:	2207      	movs	r2, #7
 800627c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800627e:	4b08      	ldr	r3, [pc, #32]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <MX_SPI2_Init+0x74>)
 8006286:	2208      	movs	r2, #8
 8006288:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800628a:	4805      	ldr	r0, [pc, #20]	; (80062a0 <MX_SPI2_Init+0x74>)
 800628c:	f00a f965 	bl	801055a <HAL_SPI_Init>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8006296:	f000 fd6b 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800629a:	bf00      	nop
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000574 	.word	0x20000574
 80062a4:	40003800 	.word	0x40003800

080062a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b09c      	sub	sp, #112	; 0x70
 80062ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80062ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	609a      	str	r2, [r3, #8]
 80062ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]
 80062d0:	605a      	str	r2, [r3, #4]
 80062d2:	609a      	str	r2, [r3, #8]
 80062d4:	60da      	str	r2, [r3, #12]
 80062d6:	611a      	str	r2, [r3, #16]
 80062d8:	615a      	str	r2, [r3, #20]
 80062da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062dc:	1d3b      	adds	r3, r7, #4
 80062de:	2234      	movs	r2, #52	; 0x34
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f00d f9c4 	bl	8013670 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80062e8:	4b44      	ldr	r3, [pc, #272]	; (80063fc <MX_TIM1_Init+0x154>)
 80062ea:	4a45      	ldr	r2, [pc, #276]	; (8006400 <MX_TIM1_Init+0x158>)
 80062ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 80062ee:	4b43      	ldr	r3, [pc, #268]	; (80063fc <MX_TIM1_Init+0x154>)
 80062f0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80062f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062f6:	4b41      	ldr	r3, [pc, #260]	; (80063fc <MX_TIM1_Init+0x154>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80062fc:	4b3f      	ldr	r3, [pc, #252]	; (80063fc <MX_TIM1_Init+0x154>)
 80062fe:	2263      	movs	r2, #99	; 0x63
 8006300:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006302:	4b3e      	ldr	r3, [pc, #248]	; (80063fc <MX_TIM1_Init+0x154>)
 8006304:	2200      	movs	r2, #0
 8006306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006308:	4b3c      	ldr	r3, [pc, #240]	; (80063fc <MX_TIM1_Init+0x154>)
 800630a:	2200      	movs	r2, #0
 800630c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800630e:	4b3b      	ldr	r3, [pc, #236]	; (80063fc <MX_TIM1_Init+0x154>)
 8006310:	2200      	movs	r2, #0
 8006312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006314:	4839      	ldr	r0, [pc, #228]	; (80063fc <MX_TIM1_Init+0x154>)
 8006316:	f00a fd3b 	bl	8010d90 <HAL_TIM_Base_Init>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d001      	beq.n	8006324 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8006320:	f000 fd26 	bl	8006d70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006324:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006328:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800632a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800632e:	4619      	mov	r1, r3
 8006330:	4832      	ldr	r0, [pc, #200]	; (80063fc <MX_TIM1_Init+0x154>)
 8006332:	f00b f809 	bl	8011348 <HAL_TIM_ConfigClockSource>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800633c:	f000 fd18 	bl	8006d70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8006340:	482e      	ldr	r0, [pc, #184]	; (80063fc <MX_TIM1_Init+0x154>)
 8006342:	f00a fdd7 	bl	8010ef4 <HAL_TIM_OC_Init>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800634c:	f000 fd10 	bl	8006d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006350:	2300      	movs	r3, #0
 8006352:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006354:	2300      	movs	r3, #0
 8006356:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006358:	2300      	movs	r3, #0
 800635a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800635c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006360:	4619      	mov	r1, r3
 8006362:	4826      	ldr	r0, [pc, #152]	; (80063fc <MX_TIM1_Init+0x154>)
 8006364:	f00b fcf0 	bl	8011d48 <HAL_TIMEx_MasterConfigSynchronization>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800636e:	f000 fcff 	bl	8006d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8006372:	2300      	movs	r3, #0
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800637a:	2300      	movs	r3, #0
 800637c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800637e:	2300      	movs	r3, #0
 8006380:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006382:	2300      	movs	r3, #0
 8006384:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006386:	2300      	movs	r3, #0
 8006388:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800638a:	2300      	movs	r3, #0
 800638c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800638e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006392:	2200      	movs	r2, #0
 8006394:	4619      	mov	r1, r3
 8006396:	4819      	ldr	r0, [pc, #100]	; (80063fc <MX_TIM1_Init+0x154>)
 8006398:	f00a ff5c 	bl	8011254 <HAL_TIM_OC_ConfigChannel>
 800639c:	4603      	mov	r3, r0
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80063a2:	f000 fce5 	bl	8006d70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80063c4:	2300      	movs	r3, #0
 80063c6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80063c8:	2300      	movs	r3, #0
 80063ca:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80063cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80063d2:	2300      	movs	r3, #0
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80063d6:	2300      	movs	r3, #0
 80063d8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063da:	2300      	movs	r3, #0
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063de:	1d3b      	adds	r3, r7, #4
 80063e0:	4619      	mov	r1, r3
 80063e2:	4806      	ldr	r0, [pc, #24]	; (80063fc <MX_TIM1_Init+0x154>)
 80063e4:	f00b fd10 	bl	8011e08 <HAL_TIMEx_ConfigBreakDeadTime>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 80063ee:	f000 fcbf 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80063f2:	bf00      	nop
 80063f4:	3770      	adds	r7, #112	; 0x70
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	200005d8 	.word	0x200005d8
 8006400:	40012c00 	.word	0x40012c00

08006404 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8006408:	4b10      	ldr	r3, [pc, #64]	; (800644c <MX_USB_PCD_Init+0x48>)
 800640a:	4a11      	ldr	r2, [pc, #68]	; (8006450 <MX_USB_PCD_Init+0x4c>)
 800640c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800640e:	4b0f      	ldr	r3, [pc, #60]	; (800644c <MX_USB_PCD_Init+0x48>)
 8006410:	2208      	movs	r2, #8
 8006412:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006414:	4b0d      	ldr	r3, [pc, #52]	; (800644c <MX_USB_PCD_Init+0x48>)
 8006416:	2202      	movs	r2, #2
 8006418:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800641a:	4b0c      	ldr	r3, [pc, #48]	; (800644c <MX_USB_PCD_Init+0x48>)
 800641c:	2202      	movs	r2, #2
 800641e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <MX_USB_PCD_Init+0x48>)
 8006422:	2200      	movs	r2, #0
 8006424:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <MX_USB_PCD_Init+0x48>)
 8006428:	2200      	movs	r2, #0
 800642a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800642c:	4b07      	ldr	r3, [pc, #28]	; (800644c <MX_USB_PCD_Init+0x48>)
 800642e:	2200      	movs	r2, #0
 8006430:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <MX_USB_PCD_Init+0x48>)
 8006434:	2200      	movs	r2, #0
 8006436:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006438:	4804      	ldr	r0, [pc, #16]	; (800644c <MX_USB_PCD_Init+0x48>)
 800643a:	f007 fe21 	bl	800e080 <HAL_PCD_Init>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8006444:	f000 fc94 	bl	8006d70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8006448:	bf00      	nop
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000694 	.word	0x20000694
 8006450:	40006800 	.word	0x40006800

08006454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800645a:	1d3b      	adds	r3, r7, #4
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
 8006460:	605a      	str	r2, [r3, #4]
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	60da      	str	r2, [r3, #12]
 8006466:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

  if(hwPlatform == PLATFORM_NUCLEO){
 8006468:	4b9d      	ldr	r3, [pc, #628]	; (80066e0 <MX_GPIO_Init+0x28c>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 81c5 	bne.w	80067fc <MX_GPIO_Init+0x3a8>



    CAN1_INT0_Pin         = GPIO_PIN_8;
 8006472:	4b9c      	ldr	r3, [pc, #624]	; (80066e4 <MX_GPIO_Init+0x290>)
 8006474:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006478:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOB;
 800647a:	4b9b      	ldr	r3, [pc, #620]	; (80066e8 <MX_GPIO_Init+0x294>)
 800647c:	4a9b      	ldr	r2, [pc, #620]	; (80066ec <MX_GPIO_Init+0x298>)
 800647e:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 8006480:	4b9b      	ldr	r3, [pc, #620]	; (80066f0 <MX_GPIO_Init+0x29c>)
 8006482:	2217      	movs	r2, #23
 8006484:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_9;
 8006486:	4b9b      	ldr	r3, [pc, #620]	; (80066f4 <MX_GPIO_Init+0x2a0>)
 8006488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800648c:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOB;
 800648e:	4b9a      	ldr	r3, [pc, #616]	; (80066f8 <MX_GPIO_Init+0x2a4>)
 8006490:	4a96      	ldr	r2, [pc, #600]	; (80066ec <MX_GPIO_Init+0x298>)
 8006492:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI9_5_IRQn;
 8006494:	4b99      	ldr	r3, [pc, #612]	; (80066fc <MX_GPIO_Init+0x2a8>)
 8006496:	2217      	movs	r2, #23
 8006498:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 800649a:	4b99      	ldr	r3, [pc, #612]	; (8006700 <MX_GPIO_Init+0x2ac>)
 800649c:	2201      	movs	r2, #1
 800649e:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 80064a0:	4b98      	ldr	r3, [pc, #608]	; (8006704 <MX_GPIO_Init+0x2b0>)
 80064a2:	4a99      	ldr	r2, [pc, #612]	; (8006708 <MX_GPIO_Init+0x2b4>)
 80064a4:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 80064a6:	4b99      	ldr	r3, [pc, #612]	; (800670c <MX_GPIO_Init+0x2b8>)
 80064a8:	2208      	movs	r2, #8
 80064aa:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80064ac:	4b98      	ldr	r3, [pc, #608]	; (8006710 <MX_GPIO_Init+0x2bc>)
 80064ae:	4a96      	ldr	r2, [pc, #600]	; (8006708 <MX_GPIO_Init+0x2b4>)
 80064b0:	601a      	str	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_5;
 80064b2:	4b98      	ldr	r3, [pc, #608]	; (8006714 <MX_GPIO_Init+0x2c0>)
 80064b4:	2220      	movs	r2, #32
 80064b6:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOA;
 80064b8:	4b97      	ldr	r3, [pc, #604]	; (8006718 <MX_GPIO_Init+0x2c4>)
 80064ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80064be:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_4;
 80064c0:	4b96      	ldr	r3, [pc, #600]	; (800671c <MX_GPIO_Init+0x2c8>)
 80064c2:	2210      	movs	r2, #16
 80064c4:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOC;
 80064c6:	4b96      	ldr	r3, [pc, #600]	; (8006720 <MX_GPIO_Init+0x2cc>)
 80064c8:	4a8f      	ldr	r2, [pc, #572]	; (8006708 <MX_GPIO_Init+0x2b4>)
 80064ca:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI4_IRQn;
 80064cc:	4b95      	ldr	r3, [pc, #596]	; (8006724 <MX_GPIO_Init+0x2d0>)
 80064ce:	220a      	movs	r2, #10
 80064d0:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_5;
 80064d2:	4b95      	ldr	r3, [pc, #596]	; (8006728 <MX_GPIO_Init+0x2d4>)
 80064d4:	2220      	movs	r2, #32
 80064d6:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 80064d8:	4b94      	ldr	r3, [pc, #592]	; (800672c <MX_GPIO_Init+0x2d8>)
 80064da:	4a8b      	ldr	r2, [pc, #556]	; (8006708 <MX_GPIO_Init+0x2b4>)
 80064dc:	601a      	str	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0; //GREEN
 80064de:	4b94      	ldr	r3, [pc, #592]	; (8006730 <MX_GPIO_Init+0x2dc>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 80064e4:	4b93      	ldr	r3, [pc, #588]	; (8006734 <MX_GPIO_Init+0x2e0>)
 80064e6:	4a81      	ldr	r2, [pc, #516]	; (80066ec <MX_GPIO_Init+0x298>)
 80064e8:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1; //RED
 80064ea:	4b93      	ldr	r3, [pc, #588]	; (8006738 <MX_GPIO_Init+0x2e4>)
 80064ec:	2202      	movs	r2, #2
 80064ee:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 80064f0:	4b92      	ldr	r3, [pc, #584]	; (800673c <MX_GPIO_Init+0x2e8>)
 80064f2:	4a7e      	ldr	r2, [pc, #504]	; (80066ec <MX_GPIO_Init+0x298>)
 80064f4:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_12;
 80064f6:	4b92      	ldr	r3, [pc, #584]	; (8006740 <MX_GPIO_Init+0x2ec>)
 80064f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064fc:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOB;
 80064fe:	4b91      	ldr	r3, [pc, #580]	; (8006744 <MX_GPIO_Init+0x2f0>)
 8006500:	4a7a      	ldr	r2, [pc, #488]	; (80066ec <MX_GPIO_Init+0x298>)
 8006502:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006504:	4b90      	ldr	r3, [pc, #576]	; (8006748 <MX_GPIO_Init+0x2f4>)
 8006506:	2228      	movs	r2, #40	; 0x28
 8006508:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_13;
 800650a:	4b90      	ldr	r3, [pc, #576]	; (800674c <MX_GPIO_Init+0x2f8>)
 800650c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006510:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOB;
 8006512:	4b8f      	ldr	r3, [pc, #572]	; (8006750 <MX_GPIO_Init+0x2fc>)
 8006514:	4a75      	ldr	r2, [pc, #468]	; (80066ec <MX_GPIO_Init+0x298>)
 8006516:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006518:	4b8e      	ldr	r3, [pc, #568]	; (8006754 <MX_GPIO_Init+0x300>)
 800651a:	2228      	movs	r2, #40	; 0x28
 800651c:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_14;
 800651e:	4b8e      	ldr	r3, [pc, #568]	; (8006758 <MX_GPIO_Init+0x304>)
 8006520:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006524:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOB;
 8006526:	4b8d      	ldr	r3, [pc, #564]	; (800675c <MX_GPIO_Init+0x308>)
 8006528:	4a70      	ldr	r2, [pc, #448]	; (80066ec <MX_GPIO_Init+0x298>)
 800652a:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 800652c:	4b8c      	ldr	r3, [pc, #560]	; (8006760 <MX_GPIO_Init+0x30c>)
 800652e:	2228      	movs	r2, #40	; 0x28
 8006530:	801a      	strh	r2, [r3, #0]
    CAN1_INT_Pin          = GPIO_PIN_10;
 8006532:	4b8c      	ldr	r3, [pc, #560]	; (8006764 <MX_GPIO_Init+0x310>)
 8006534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006538:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOA;
 800653a:	4b8b      	ldr	r3, [pc, #556]	; (8006768 <MX_GPIO_Init+0x314>)
 800653c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006540:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006542:	4b8a      	ldr	r3, [pc, #552]	; (800676c <MX_GPIO_Init+0x318>)
 8006544:	2228      	movs	r2, #40	; 0x28
 8006546:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_0;
 8006548:	4b89      	ldr	r3, [pc, #548]	; (8006770 <MX_GPIO_Init+0x31c>)
 800654a:	2201      	movs	r2, #1
 800654c:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOD;
 800654e:	4b89      	ldr	r3, [pc, #548]	; (8006774 <MX_GPIO_Init+0x320>)
 8006550:	4a89      	ldr	r2, [pc, #548]	; (8006778 <MX_GPIO_Init+0x324>)
 8006552:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI0_IRQn;
 8006554:	4b89      	ldr	r3, [pc, #548]	; (800677c <MX_GPIO_Init+0x328>)
 8006556:	2206      	movs	r2, #6
 8006558:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_1;
 800655a:	4b89      	ldr	r3, [pc, #548]	; (8006780 <MX_GPIO_Init+0x32c>)
 800655c:	2202      	movs	r2, #2
 800655e:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOD;
 8006560:	4b88      	ldr	r3, [pc, #544]	; (8006784 <MX_GPIO_Init+0x330>)
 8006562:	4a85      	ldr	r2, [pc, #532]	; (8006778 <MX_GPIO_Init+0x324>)
 8006564:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI1_IRQn;
 8006566:	4b88      	ldr	r3, [pc, #544]	; (8006788 <MX_GPIO_Init+0x334>)
 8006568:	2207      	movs	r2, #7
 800656a:	801a      	strh	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_5; //BLUE
 800656c:	4b87      	ldr	r3, [pc, #540]	; (800678c <MX_GPIO_Init+0x338>)
 800656e:	2220      	movs	r2, #32
 8006570:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOB;
 8006572:	4b87      	ldr	r3, [pc, #540]	; (8006790 <MX_GPIO_Init+0x33c>)
 8006574:	4a5d      	ldr	r2, [pc, #372]	; (80066ec <MX_GPIO_Init+0x298>)
 8006576:	601a      	str	r2, [r3, #0]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006578:	2004      	movs	r0, #4
 800657a:	f7ff f82b 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800657e:	2002      	movs	r0, #2
 8006580:	f7ff f828 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006584:	2001      	movs	r0, #1
 8006586:	f7ff f825 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800658a:	2008      	movs	r0, #8
 800658c:	f7ff f822 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin, GPIO_PIN_RESET);
 8006590:	4b5b      	ldr	r3, [pc, #364]	; (8006700 <MX_GPIO_Init+0x2ac>)
 8006592:	881a      	ldrh	r2, [r3, #0]
 8006594:	4b5d      	ldr	r3, [pc, #372]	; (800670c <MX_GPIO_Init+0x2b8>)
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	4313      	orrs	r3, r2
 800659a:	b29a      	uxth	r2, r3
 800659c:	4b62      	ldr	r3, [pc, #392]	; (8006728 <MX_GPIO_Init+0x2d4>)
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2200      	movs	r2, #0
 80065a6:	4619      	mov	r1, r3
 80065a8:	4857      	ldr	r0, [pc, #348]	; (8006708 <MX_GPIO_Init+0x2b4>)
 80065aa:	f007 fcfb 	bl	800dfa4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(CAN1_CS_GPIO_Port, CAN1_CS_Pin, GPIO_PIN_RESET);
 80065ae:	4b5a      	ldr	r3, [pc, #360]	; (8006718 <MX_GPIO_Init+0x2c4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a58      	ldr	r2, [pc, #352]	; (8006714 <MX_GPIO_Init+0x2c0>)
 80065b4:	8811      	ldrh	r1, [r2, #0]
 80065b6:	2200      	movs	r2, #0
 80065b8:	4618      	mov	r0, r3
 80065ba:	f007 fcf3 	bl	800dfa4 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80065be:	4b5c      	ldr	r3, [pc, #368]	; (8006730 <MX_GPIO_Init+0x2dc>)
 80065c0:	881a      	ldrh	r2, [r3, #0]
 80065c2:	4b5d      	ldr	r3, [pc, #372]	; (8006738 <MX_GPIO_Init+0x2e4>)
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	4b70      	ldr	r3, [pc, #448]	; (800678c <MX_GPIO_Init+0x338>)
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	2200      	movs	r2, #0
 80065d4:	4619      	mov	r1, r3
 80065d6:	4845      	ldr	r0, [pc, #276]	; (80066ec <MX_GPIO_Init+0x298>)
 80065d8:	f007 fce4 	bl	800dfa4 <HAL_GPIO_WritePin>

    /*Configure GPIO pins : CAN1_INT0_Pin CAN1_INT1_Pin CAN2_INT_Pin CAN2_INT0_Pin   CAN2_INT1_Pin */
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
                            |CAN2_INT1_Pin;
 80065dc:	4b41      	ldr	r3, [pc, #260]	; (80066e4 <MX_GPIO_Init+0x290>)
 80065de:	881a      	ldrh	r2, [r3, #0]
 80065e0:	4b44      	ldr	r3, [pc, #272]	; (80066f4 <MX_GPIO_Init+0x2a0>)
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	4b55      	ldr	r3, [pc, #340]	; (8006740 <MX_GPIO_Init+0x2ec>)
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	4b56      	ldr	r3, [pc, #344]	; (800674c <MX_GPIO_Init+0x2f8>)
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	4b57      	ldr	r3, [pc, #348]	; (8006758 <MX_GPIO_Init+0x304>)
 80065fa:	881b      	ldrh	r3, [r3, #0]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	b29b      	uxth	r3, r3
    GPIO_InitStruct.Pin = CAN1_INT0_Pin|CAN1_INT1_Pin|CAN2_INT_Pin|CAN2_INT0_Pin
 8006600:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006602:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006606:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006608:	2301      	movs	r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4836      	ldr	r0, [pc, #216]	; (80066ec <MX_GPIO_Init+0x298>)
 8006612:	f007 fb3f 	bl	800dc94 <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI2_CS1_Pin SPI2_CS2_Pin CAN2_CS_Pin */
    GPIO_InitStruct.Pin = SPI2_CS1_Pin|SPI2_CS2_Pin|CAN2_CS_Pin;
 8006616:	4b3a      	ldr	r3, [pc, #232]	; (8006700 <MX_GPIO_Init+0x2ac>)
 8006618:	881a      	ldrh	r2, [r3, #0]
 800661a:	4b3c      	ldr	r3, [pc, #240]	; (800670c <MX_GPIO_Init+0x2b8>)
 800661c:	881b      	ldrh	r3, [r3, #0]
 800661e:	4313      	orrs	r3, r2
 8006620:	b29a      	uxth	r2, r3
 8006622:	4b41      	ldr	r3, [pc, #260]	; (8006728 <MX_GPIO_Init+0x2d4>)
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	4313      	orrs	r3, r2
 8006628:	b29b      	uxth	r3, r3
 800662a:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800662c:	2301      	movs	r3, #1
 800662e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006638:	1d3b      	adds	r3, r7, #4
 800663a:	4619      	mov	r1, r3
 800663c:	4832      	ldr	r0, [pc, #200]	; (8006708 <MX_GPIO_Init+0x2b4>)
 800663e:	f007 fb29 	bl	800dc94 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_CS_Pin */
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006642:	4b34      	ldr	r3, [pc, #208]	; (8006714 <MX_GPIO_Init+0x2c0>)
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006648:	2301      	movs	r3, #1
 800664a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664c:	2300      	movs	r3, #0
 800664e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006650:	2300      	movs	r3, #0
 8006652:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(CAN1_CS_GPIO_Port, &GPIO_InitStruct);
 8006654:	4b30      	ldr	r3, [pc, #192]	; (8006718 <MX_GPIO_Init+0x2c4>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	1d3a      	adds	r2, r7, #4
 800665a:	4611      	mov	r1, r2
 800665c:	4618      	mov	r0, r3
 800665e:	f007 fb19 	bl	800dc94 <HAL_GPIO_Init>

    /*Configure GPIO pin : BUTTON1_Pin */
    GPIO_InitStruct.Pin = BUTTON1_Pin;
 8006662:	4b2e      	ldr	r3, [pc, #184]	; (800671c <MX_GPIO_Init+0x2c8>)
 8006664:	881b      	ldrh	r3, [r3, #0]
 8006666:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006668:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800666c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800666e:	2301      	movs	r3, #1
 8006670:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON1_GPIO_Port, &GPIO_InitStruct);
 8006672:	4b2b      	ldr	r3, [pc, #172]	; (8006720 <MX_GPIO_Init+0x2cc>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	1d3a      	adds	r2, r7, #4
 8006678:	4611      	mov	r1, r2
 800667a:	4618      	mov	r0, r3
 800667c:	f007 fb0a 	bl	800dc94 <HAL_GPIO_Init>

    /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin LED_BLUE_Pin */
    GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8006680:	4b2b      	ldr	r3, [pc, #172]	; (8006730 <MX_GPIO_Init+0x2dc>)
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <MX_GPIO_Init+0x2e4>)
 8006686:	881b      	ldrh	r3, [r3, #0]
 8006688:	4313      	orrs	r3, r2
 800668a:	b29a      	uxth	r2, r3
 800668c:	4b3f      	ldr	r3, [pc, #252]	; (800678c <MX_GPIO_Init+0x338>)
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	4313      	orrs	r3, r2
 8006692:	b29b      	uxth	r3, r3
 8006694:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006696:	2301      	movs	r3, #1
 8006698:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	2300      	movs	r3, #0
 800669c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800669e:	2300      	movs	r3, #0
 80066a0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066a2:	1d3b      	adds	r3, r7, #4
 80066a4:	4619      	mov	r1, r3
 80066a6:	4811      	ldr	r0, [pc, #68]	; (80066ec <MX_GPIO_Init+0x298>)
 80066a8:	f007 faf4 	bl	800dc94 <HAL_GPIO_Init>

    /*Configure GPIO pin : CAN1_INT_Pin */
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 80066ac:	4b2d      	ldr	r3, [pc, #180]	; (8006764 <MX_GPIO_Init+0x310>)
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80066b6:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CAN1_INT_GPIO_Port, &GPIO_InitStruct);
 80066bc:	4b2a      	ldr	r3, [pc, #168]	; (8006768 <MX_GPIO_Init+0x314>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	1d3a      	adds	r2, r7, #4
 80066c2:	4611      	mov	r1, r2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f007 fae5 	bl	800dc94 <HAL_GPIO_Init>

    /*Configure GPIO pins : BUTTON2_Pin BUTTON3_Pin */
    GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON3_Pin;
 80066ca:	4b29      	ldr	r3, [pc, #164]	; (8006770 <MX_GPIO_Init+0x31c>)
 80066cc:	881a      	ldrh	r2, [r3, #0]
 80066ce:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <MX_GPIO_Init+0x32c>)
 80066d0:	881b      	ldrh	r3, [r3, #0]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80066d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80066dc:	e05a      	b.n	8006794 <MX_GPIO_Init+0x340>
 80066de:	bf00      	nop
 80066e0:	20000a58 	.word	0x20000a58
 80066e4:	20000c66 	.word	0x20000c66
 80066e8:	20000c68 	.word	0x20000c68
 80066ec:	48000400 	.word	0x48000400
 80066f0:	20000c6c 	.word	0x20000c6c
 80066f4:	20000c6e 	.word	0x20000c6e
 80066f8:	20000c70 	.word	0x20000c70
 80066fc:	20000c74 	.word	0x20000c74
 8006700:	20000cbc 	.word	0x20000cbc
 8006704:	20000cc0 	.word	0x20000cc0
 8006708:	48000800 	.word	0x48000800
 800670c:	20000cc4 	.word	0x20000cc4
 8006710:	20000cc8 	.word	0x20000cc8
 8006714:	20000c76 	.word	0x20000c76
 8006718:	20000c78 	.word	0x20000c78
 800671c:	20000ccc 	.word	0x20000ccc
 8006720:	20000cd0 	.word	0x20000cd0
 8006724:	20000cd4 	.word	0x20000cd4
 8006728:	20000c96 	.word	0x20000c96
 800672c:	20000c98 	.word	0x20000c98
 8006730:	20000cee 	.word	0x20000cee
 8006734:	20000cf0 	.word	0x20000cf0
 8006738:	20000cf4 	.word	0x20000cf4
 800673c:	20000cf8 	.word	0x20000cf8
 8006740:	20000c7c 	.word	0x20000c7c
 8006744:	20000c80 	.word	0x20000c80
 8006748:	20000c84 	.word	0x20000c84
 800674c:	20000c86 	.word	0x20000c86
 8006750:	20000c88 	.word	0x20000c88
 8006754:	20000c8c 	.word	0x20000c8c
 8006758:	20000c8e 	.word	0x20000c8e
 800675c:	20000c90 	.word	0x20000c90
 8006760:	20000c94 	.word	0x20000c94
 8006764:	20000c5e 	.word	0x20000c5e
 8006768:	20000c60 	.word	0x20000c60
 800676c:	20000c64 	.word	0x20000c64
 8006770:	20000cd6 	.word	0x20000cd6
 8006774:	20000cd8 	.word	0x20000cd8
 8006778:	48000c00 	.word	0x48000c00
 800677c:	20000cdc 	.word	0x20000cdc
 8006780:	20000cde 	.word	0x20000cde
 8006784:	20000ce0 	.word	0x20000ce0
 8006788:	20000ce4 	.word	0x20000ce4
 800678c:	20000cfc 	.word	0x20000cfc
 8006790:	20000d00 	.word	0x20000d00
 8006794:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006796:	2301      	movs	r3, #1
 8006798:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4816      	ldr	r0, [pc, #88]	; (80067f8 <MX_GPIO_Init+0x3a4>)
 80067a0:	f007 fa78 	bl	800dc94 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80067a4:	2200      	movs	r2, #0
 80067a6:	2100      	movs	r1, #0
 80067a8:	2006      	movs	r0, #6
 80067aa:	f006 ff64 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80067ae:	2006      	movs	r0, #6
 80067b0:	f006 ff7b 	bl	800d6aa <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80067b4:	2200      	movs	r2, #0
 80067b6:	2100      	movs	r1, #0
 80067b8:	2007      	movs	r0, #7
 80067ba:	f006 ff5c 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80067be:	2007      	movs	r0, #7
 80067c0:	f006 ff73 	bl	800d6aa <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80067c4:	2200      	movs	r2, #0
 80067c6:	2100      	movs	r1, #0
 80067c8:	200a      	movs	r0, #10
 80067ca:	f006 ff54 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80067ce:	200a      	movs	r0, #10
 80067d0:	f006 ff6b 	bl	800d6aa <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2100      	movs	r1, #0
 80067d8:	2017      	movs	r0, #23
 80067da:	f006 ff4c 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80067de:	2017      	movs	r0, #23
 80067e0:	f006 ff63 	bl	800d6aa <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80067e4:	2200      	movs	r2, #0
 80067e6:	2100      	movs	r1, #0
 80067e8:	2028      	movs	r0, #40	; 0x28
 80067ea:	f006 ff44 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80067ee:	2028      	movs	r0, #40	; 0x28
 80067f0:	f006 ff5b 	bl	800d6aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);


  }
}
 80067f4:	e290      	b.n	8006d18 <MX_GPIO_Init+0x8c4>
 80067f6:	bf00      	nop
 80067f8:	48000c00 	.word	0x48000c00
    CAN1_INT_Pin          = GPIO_PIN_15;
 80067fc:	4b9d      	ldr	r3, [pc, #628]	; (8006a74 <MX_GPIO_Init+0x620>)
 80067fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006802:	801a      	strh	r2, [r3, #0]
    CAN1_INT_GPIO_Port    = GPIOB;
 8006804:	4b9c      	ldr	r3, [pc, #624]	; (8006a78 <MX_GPIO_Init+0x624>)
 8006806:	4a9d      	ldr	r2, [pc, #628]	; (8006a7c <MX_GPIO_Init+0x628>)
 8006808:	601a      	str	r2, [r3, #0]
    CAN1_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 800680a:	4b9d      	ldr	r3, [pc, #628]	; (8006a80 <MX_GPIO_Init+0x62c>)
 800680c:	2228      	movs	r2, #40	; 0x28
 800680e:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_Pin         = GPIO_PIN_6;
 8006810:	4b9c      	ldr	r3, [pc, #624]	; (8006a84 <MX_GPIO_Init+0x630>)
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	801a      	strh	r2, [r3, #0]
    CAN1_INT0_GPIO_Port   = GPIOC;
 8006816:	4b9c      	ldr	r3, [pc, #624]	; (8006a88 <MX_GPIO_Init+0x634>)
 8006818:	4a9c      	ldr	r2, [pc, #624]	; (8006a8c <MX_GPIO_Init+0x638>)
 800681a:	601a      	str	r2, [r3, #0]
    CAN1_INT0_EXTI_IRQn   = EXTI9_5_IRQn;
 800681c:	4b9c      	ldr	r3, [pc, #624]	; (8006a90 <MX_GPIO_Init+0x63c>)
 800681e:	2217      	movs	r2, #23
 8006820:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_Pin         = GPIO_PIN_10;
 8006822:	4b9c      	ldr	r3, [pc, #624]	; (8006a94 <MX_GPIO_Init+0x640>)
 8006824:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006828:	801a      	strh	r2, [r3, #0]
    CAN1_INT1_GPIO_Port   = GPIOA;
 800682a:	4b9b      	ldr	r3, [pc, #620]	; (8006a98 <MX_GPIO_Init+0x644>)
 800682c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006830:	601a      	str	r2, [r3, #0]
    CAN1_INT1_EXTI_IRQn   = EXTI15_10_IRQn;
 8006832:	4b9a      	ldr	r3, [pc, #616]	; (8006a9c <MX_GPIO_Init+0x648>)
 8006834:	2228      	movs	r2, #40	; 0x28
 8006836:	801a      	strh	r2, [r3, #0]
    CAN1_CS_Pin           = GPIO_PIN_14;
 8006838:	4b99      	ldr	r3, [pc, #612]	; (8006aa0 <MX_GPIO_Init+0x64c>)
 800683a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800683e:	801a      	strh	r2, [r3, #0]
    CAN1_CS_GPIO_Port     = GPIOB;
 8006840:	4b98      	ldr	r3, [pc, #608]	; (8006aa4 <MX_GPIO_Init+0x650>)
 8006842:	4a8e      	ldr	r2, [pc, #568]	; (8006a7c <MX_GPIO_Init+0x628>)
 8006844:	601a      	str	r2, [r3, #0]
    CAN2_INT_Pin          = GPIO_PIN_11;
 8006846:	4b98      	ldr	r3, [pc, #608]	; (8006aa8 <MX_GPIO_Init+0x654>)
 8006848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800684c:	801a      	strh	r2, [r3, #0]
    CAN2_INT_GPIO_Port    = GPIOC;
 800684e:	4b97      	ldr	r3, [pc, #604]	; (8006aac <MX_GPIO_Init+0x658>)
 8006850:	4a8e      	ldr	r2, [pc, #568]	; (8006a8c <MX_GPIO_Init+0x638>)
 8006852:	601a      	str	r2, [r3, #0]
    CAN2_INT_EXTI_IRQn    = EXTI15_10_IRQn;
 8006854:	4b96      	ldr	r3, [pc, #600]	; (8006ab0 <MX_GPIO_Init+0x65c>)
 8006856:	2228      	movs	r2, #40	; 0x28
 8006858:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_Pin         = GPIO_PIN_12;
 800685a:	4b96      	ldr	r3, [pc, #600]	; (8006ab4 <MX_GPIO_Init+0x660>)
 800685c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006860:	801a      	strh	r2, [r3, #0]
    CAN2_INT0_GPIO_Port   = GPIOC;
 8006862:	4b95      	ldr	r3, [pc, #596]	; (8006ab8 <MX_GPIO_Init+0x664>)
 8006864:	4a89      	ldr	r2, [pc, #548]	; (8006a8c <MX_GPIO_Init+0x638>)
 8006866:	601a      	str	r2, [r3, #0]
    CAN2_INT0_EXTI_IRQn   = EXTI15_10_IRQn;
 8006868:	4b94      	ldr	r3, [pc, #592]	; (8006abc <MX_GPIO_Init+0x668>)
 800686a:	2228      	movs	r2, #40	; 0x28
 800686c:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_Pin         = GPIO_PIN_0;
 800686e:	4b94      	ldr	r3, [pc, #592]	; (8006ac0 <MX_GPIO_Init+0x66c>)
 8006870:	2201      	movs	r2, #1
 8006872:	801a      	strh	r2, [r3, #0]
    CAN2_INT1_GPIO_Port   = GPIOD;
 8006874:	4b93      	ldr	r3, [pc, #588]	; (8006ac4 <MX_GPIO_Init+0x670>)
 8006876:	4a94      	ldr	r2, [pc, #592]	; (8006ac8 <MX_GPIO_Init+0x674>)
 8006878:	601a      	str	r2, [r3, #0]
    CAN2_INT1_EXTI_IRQn   = EXTI0_IRQn;;
 800687a:	4b94      	ldr	r3, [pc, #592]	; (8006acc <MX_GPIO_Init+0x678>)
 800687c:	2206      	movs	r2, #6
 800687e:	801a      	strh	r2, [r3, #0]
    CAN2_CS_Pin           = GPIO_PIN_10;
 8006880:	4b93      	ldr	r3, [pc, #588]	; (8006ad0 <MX_GPIO_Init+0x67c>)
 8006882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006886:	801a      	strh	r2, [r3, #0]
    CAN2_CS_GPIO_Port     = GPIOC;
 8006888:	4b92      	ldr	r3, [pc, #584]	; (8006ad4 <MX_GPIO_Init+0x680>)
 800688a:	4a80      	ldr	r2, [pc, #512]	; (8006a8c <MX_GPIO_Init+0x638>)
 800688c:	601a      	str	r2, [r3, #0]
    CAN3_INT_Pin          = GPIO_PIN_8;
 800688e:	4b92      	ldr	r3, [pc, #584]	; (8006ad8 <MX_GPIO_Init+0x684>)
 8006890:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006894:	801a      	strh	r2, [r3, #0]
    CAN3_INT_GPIO_Port    = GPIOB;
 8006896:	4b91      	ldr	r3, [pc, #580]	; (8006adc <MX_GPIO_Init+0x688>)
 8006898:	4a78      	ldr	r2, [pc, #480]	; (8006a7c <MX_GPIO_Init+0x628>)
 800689a:	601a      	str	r2, [r3, #0]
    CAN3_INT_EXTI_IRQn    = EXTI9_5_IRQn;
 800689c:	4b90      	ldr	r3, [pc, #576]	; (8006ae0 <MX_GPIO_Init+0x68c>)
 800689e:	2217      	movs	r2, #23
 80068a0:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_Pin         = GPIO_PIN_4;
 80068a2:	4b90      	ldr	r3, [pc, #576]	; (8006ae4 <MX_GPIO_Init+0x690>)
 80068a4:	2210      	movs	r2, #16
 80068a6:	801a      	strh	r2, [r3, #0]
    CAN3_INT0_GPIO_Port   = GPIOB;
 80068a8:	4b8f      	ldr	r3, [pc, #572]	; (8006ae8 <MX_GPIO_Init+0x694>)
 80068aa:	4a74      	ldr	r2, [pc, #464]	; (8006a7c <MX_GPIO_Init+0x628>)
 80068ac:	601a      	str	r2, [r3, #0]
    CAN3_INT0_EXTI_IRQn   = EXTI4_IRQn;
 80068ae:	4b8f      	ldr	r3, [pc, #572]	; (8006aec <MX_GPIO_Init+0x698>)
 80068b0:	220a      	movs	r2, #10
 80068b2:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_Pin         = GPIO_PIN_5;
 80068b4:	4b8e      	ldr	r3, [pc, #568]	; (8006af0 <MX_GPIO_Init+0x69c>)
 80068b6:	2220      	movs	r2, #32
 80068b8:	801a      	strh	r2, [r3, #0]
    CAN3_INT1_GPIO_Port   = GPIOB;
 80068ba:	4b8e      	ldr	r3, [pc, #568]	; (8006af4 <MX_GPIO_Init+0x6a0>)
 80068bc:	4a6f      	ldr	r2, [pc, #444]	; (8006a7c <MX_GPIO_Init+0x628>)
 80068be:	601a      	str	r2, [r3, #0]
    CAN3_INT1_EXTI_IRQn   = EXTI9_5_IRQn;;
 80068c0:	4b8d      	ldr	r3, [pc, #564]	; (8006af8 <MX_GPIO_Init+0x6a4>)
 80068c2:	2217      	movs	r2, #23
 80068c4:	801a      	strh	r2, [r3, #0]
    CAN3_CS_Pin           = GPIO_PIN_1;
 80068c6:	4b8d      	ldr	r3, [pc, #564]	; (8006afc <MX_GPIO_Init+0x6a8>)
 80068c8:	2202      	movs	r2, #2
 80068ca:	801a      	strh	r2, [r3, #0]
    CAN3_CS_GPIO_Port     = GPIOD;
 80068cc:	4b8c      	ldr	r3, [pc, #560]	; (8006b00 <MX_GPIO_Init+0x6ac>)
 80068ce:	4a7e      	ldr	r2, [pc, #504]	; (8006ac8 <MX_GPIO_Init+0x674>)
 80068d0:	601a      	str	r2, [r3, #0]
    SPI2_CS1_Pin          = GPIO_PIN_0;
 80068d2:	4b8c      	ldr	r3, [pc, #560]	; (8006b04 <MX_GPIO_Init+0x6b0>)
 80068d4:	2201      	movs	r2, #1
 80068d6:	801a      	strh	r2, [r3, #0]
    SPI2_CS1_GPIO_Port    = GPIOC;
 80068d8:	4b8b      	ldr	r3, [pc, #556]	; (8006b08 <MX_GPIO_Init+0x6b4>)
 80068da:	4a6c      	ldr	r2, [pc, #432]	; (8006a8c <MX_GPIO_Init+0x638>)
 80068dc:	601a      	str	r2, [r3, #0]
    SPI2_CS2_Pin          = GPIO_PIN_3;
 80068de:	4b8b      	ldr	r3, [pc, #556]	; (8006b0c <MX_GPIO_Init+0x6b8>)
 80068e0:	2208      	movs	r2, #8
 80068e2:	801a      	strh	r2, [r3, #0]
    SPI2_CS2_GPIO_Port    = GPIOC;
 80068e4:	4b8a      	ldr	r3, [pc, #552]	; (8006b10 <MX_GPIO_Init+0x6bc>)
 80068e6:	4a69      	ldr	r2, [pc, #420]	; (8006a8c <MX_GPIO_Init+0x638>)
 80068e8:	601a      	str	r2, [r3, #0]
    BUTTON1_Pin           = GPIO_PIN_11;      // BTN0 in Schematic, SW2 PCB
 80068ea:	4b8a      	ldr	r3, [pc, #552]	; (8006b14 <MX_GPIO_Init+0x6c0>)
 80068ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068f0:	801a      	strh	r2, [r3, #0]
    BUTTON1_GPIO_Port     = GPIOB;
 80068f2:	4b89      	ldr	r3, [pc, #548]	; (8006b18 <MX_GPIO_Init+0x6c4>)
 80068f4:	4a61      	ldr	r2, [pc, #388]	; (8006a7c <MX_GPIO_Init+0x628>)
 80068f6:	601a      	str	r2, [r3, #0]
    BUTTON1_EXTI_IRQn     = EXTI15_10_IRQn;
 80068f8:	4b88      	ldr	r3, [pc, #544]	; (8006b1c <MX_GPIO_Init+0x6c8>)
 80068fa:	2228      	movs	r2, #40	; 0x28
 80068fc:	801a      	strh	r2, [r3, #0]
    BUTTON2_Pin           = GPIO_PIN_10;      // BTN1 in Schematic, SW3 PCB
 80068fe:	4b88      	ldr	r3, [pc, #544]	; (8006b20 <MX_GPIO_Init+0x6cc>)
 8006900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006904:	801a      	strh	r2, [r3, #0]
    BUTTON2_GPIO_Port     = GPIOB;
 8006906:	4b87      	ldr	r3, [pc, #540]	; (8006b24 <MX_GPIO_Init+0x6d0>)
 8006908:	4a5c      	ldr	r2, [pc, #368]	; (8006a7c <MX_GPIO_Init+0x628>)
 800690a:	601a      	str	r2, [r3, #0]
    BUTTON2_EXTI_IRQn     = EXTI15_10_IRQn;
 800690c:	4b86      	ldr	r3, [pc, #536]	; (8006b28 <MX_GPIO_Init+0x6d4>)
 800690e:	2228      	movs	r2, #40	; 0x28
 8006910:	801a      	strh	r2, [r3, #0]
    BUTTON3_Pin           = GPIO_PIN_2;       // BTN2 in Schematic, SW4 PCB
 8006912:	4b86      	ldr	r3, [pc, #536]	; (8006b2c <MX_GPIO_Init+0x6d8>)
 8006914:	2204      	movs	r2, #4
 8006916:	801a      	strh	r2, [r3, #0]
    BUTTON3_GPIO_Port     = GPIOB;
 8006918:	4b85      	ldr	r3, [pc, #532]	; (8006b30 <MX_GPIO_Init+0x6dc>)
 800691a:	4a58      	ldr	r2, [pc, #352]	; (8006a7c <MX_GPIO_Init+0x628>)
 800691c:	601a      	str	r2, [r3, #0]
    BUTTON3_EXTI_IRQn     = EXTI2_IRQn;
 800691e:	4b85      	ldr	r3, [pc, #532]	; (8006b34 <MX_GPIO_Init+0x6e0>)
 8006920:	2208      	movs	r2, #8
 8006922:	801a      	strh	r2, [r3, #0]
    BUTTON4_Pin           = GPIO_PIN_5;       // NC in Schematic
 8006924:	4b84      	ldr	r3, [pc, #528]	; (8006b38 <MX_GPIO_Init+0x6e4>)
 8006926:	2220      	movs	r2, #32
 8006928:	801a      	strh	r2, [r3, #0]
    BUTTON4_GPIO_Port     = GPIOC;
 800692a:	4b84      	ldr	r3, [pc, #528]	; (8006b3c <MX_GPIO_Init+0x6e8>)
 800692c:	4a57      	ldr	r2, [pc, #348]	; (8006a8c <MX_GPIO_Init+0x638>)
 800692e:	601a      	str	r2, [r3, #0]
    BUTTON4_EXTI_IRQn     = EXTI9_5_IRQn;
 8006930:	4b83      	ldr	r3, [pc, #524]	; (8006b40 <MX_GPIO_Init+0x6ec>)
 8006932:	2217      	movs	r2, #23
 8006934:	801a      	strh	r2, [r3, #0]
    LED1_Pin              = GPIO_PIN_0;       // LED_CAN1 Schematic, CAN1 PCB
 8006936:	4b83      	ldr	r3, [pc, #524]	; (8006b44 <MX_GPIO_Init+0x6f0>)
 8006938:	2201      	movs	r2, #1
 800693a:	801a      	strh	r2, [r3, #0]
    LED1_GPIO_Port        = GPIOB;
 800693c:	4b82      	ldr	r3, [pc, #520]	; (8006b48 <MX_GPIO_Init+0x6f4>)
 800693e:	4a4f      	ldr	r2, [pc, #316]	; (8006a7c <MX_GPIO_Init+0x628>)
 8006940:	601a      	str	r2, [r3, #0]
    LED2_Pin              = GPIO_PIN_1;       // LED_CAN2 Schematic, CAN2 PCB
 8006942:	4b82      	ldr	r3, [pc, #520]	; (8006b4c <MX_GPIO_Init+0x6f8>)
 8006944:	2202      	movs	r2, #2
 8006946:	801a      	strh	r2, [r3, #0]
    LED2_GPIO_Port        = GPIOB;
 8006948:	4b81      	ldr	r3, [pc, #516]	; (8006b50 <MX_GPIO_Init+0x6fc>)
 800694a:	4a4c      	ldr	r2, [pc, #304]	; (8006a7c <MX_GPIO_Init+0x628>)
 800694c:	601a      	str	r2, [r3, #0]
    LED3_Pin              = GPIO_PIN_4;       // LED_CAN3 Schematic, CAN3 PCB
 800694e:	4b81      	ldr	r3, [pc, #516]	; (8006b54 <MX_GPIO_Init+0x700>)
 8006950:	2210      	movs	r2, #16
 8006952:	801a      	strh	r2, [r3, #0]
    LED3_GPIO_Port        = GPIOE;
 8006954:	4b80      	ldr	r3, [pc, #512]	; (8006b58 <MX_GPIO_Init+0x704>)
 8006956:	4a81      	ldr	r2, [pc, #516]	; (8006b5c <MX_GPIO_Init+0x708>)
 8006958:	601a      	str	r2, [r3, #0]
    LED4_Pin              = GPIO_PIN_12;      // LED_HB Schematic, HB PCB
 800695a:	4b81      	ldr	r3, [pc, #516]	; (8006b60 <MX_GPIO_Init+0x70c>)
 800695c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006960:	801a      	strh	r2, [r3, #0]
    LED4_GPIO_Port        = GPIOB;
 8006962:	4b80      	ldr	r3, [pc, #512]	; (8006b64 <MX_GPIO_Init+0x710>)
 8006964:	4a45      	ldr	r2, [pc, #276]	; (8006a7c <MX_GPIO_Init+0x628>)
 8006966:	601a      	str	r2, [r3, #0]
    VDETECT_5V_Pin       = GPIO_PIN_9;
 8006968:	4b7f      	ldr	r3, [pc, #508]	; (8006b68 <MX_GPIO_Init+0x714>)
 800696a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696e:	801a      	strh	r2, [r3, #0]
    VDETECT_5V_GPIO_Port = GPIOB;
 8006970:	4b7e      	ldr	r3, [pc, #504]	; (8006b6c <MX_GPIO_Init+0x718>)
 8006972:	4a42      	ldr	r2, [pc, #264]	; (8006a7c <MX_GPIO_Init+0x628>)
 8006974:	601a      	str	r2, [r3, #0]
    CAN_CLK_EN_Pin       = GPIO_PIN_15;
 8006976:	4b7e      	ldr	r3, [pc, #504]	; (8006b70 <MX_GPIO_Init+0x71c>)
 8006978:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800697c:	801a      	strh	r2, [r3, #0]
    CAN_CLK_EN_GPIO_Port = GPIOA;
 800697e:	4b7d      	ldr	r3, [pc, #500]	; (8006b74 <MX_GPIO_Init+0x720>)
 8006980:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006984:	601a      	str	r2, [r3, #0]
    BAT_CHRG_EN_Pin      = GPIO_PIN_4;
 8006986:	4b7c      	ldr	r3, [pc, #496]	; (8006b78 <MX_GPIO_Init+0x724>)
 8006988:	2210      	movs	r2, #16
 800698a:	801a      	strh	r2, [r3, #0]
    BAT_CHRG_EN_GPIO_Port= GPIOA;
 800698c:	4b7b      	ldr	r3, [pc, #492]	; (8006b7c <MX_GPIO_Init+0x728>)
 800698e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006992:	601a      	str	r2, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006994:	2001      	movs	r0, #1
 8006996:	f7fe fe1d 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800699a:	2002      	movs	r0, #2
 800699c:	f7fe fe1a 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069a0:	2004      	movs	r0, #4
 80069a2:	f7fe fe17 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80069a6:	2008      	movs	r0, #8
 80069a8:	f7fe fe14 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069ac:	2010      	movs	r0, #16
 80069ae:	f7fe fe11 	bl	80055d4 <LL_AHB2_GRP1_EnableClock>
    HAL_GPIO_WritePin(GPIOC, SPI2_CS1_Pin | SPI2_CS2_Pin , GPIO_PIN_SET);
 80069b2:	4b54      	ldr	r3, [pc, #336]	; (8006b04 <MX_GPIO_Init+0x6b0>)
 80069b4:	881a      	ldrh	r2, [r3, #0]
 80069b6:	4b55      	ldr	r3, [pc, #340]	; (8006b0c <MX_GPIO_Init+0x6b8>)
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2201      	movs	r2, #1
 80069c0:	4619      	mov	r1, r3
 80069c2:	4832      	ldr	r0, [pc, #200]	; (8006a8c <MX_GPIO_Init+0x638>)
 80069c4:	f007 faee 	bl	800dfa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, CAN1_CS_Pin, GPIO_PIN_SET);
 80069c8:	4b35      	ldr	r3, [pc, #212]	; (8006aa0 <MX_GPIO_Init+0x64c>)
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	2201      	movs	r2, #1
 80069ce:	4619      	mov	r1, r3
 80069d0:	482a      	ldr	r0, [pc, #168]	; (8006a7c <MX_GPIO_Init+0x628>)
 80069d2:	f007 fae7 	bl	800dfa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOC, CAN2_CS_Pin, GPIO_PIN_SET);
 80069d6:	4b3e      	ldr	r3, [pc, #248]	; (8006ad0 <MX_GPIO_Init+0x67c>)
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	2201      	movs	r2, #1
 80069dc:	4619      	mov	r1, r3
 80069de:	482b      	ldr	r0, [pc, #172]	; (8006a8c <MX_GPIO_Init+0x638>)
 80069e0:	f007 fae0 	bl	800dfa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOD, CAN3_CS_Pin, GPIO_PIN_SET);
 80069e4:	4b45      	ldr	r3, [pc, #276]	; (8006afc <MX_GPIO_Init+0x6a8>)
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	2201      	movs	r2, #1
 80069ea:	4619      	mov	r1, r3
 80069ec:	4836      	ldr	r0, [pc, #216]	; (8006ac8 <MX_GPIO_Init+0x674>)
 80069ee:	f007 fad9 	bl	800dfa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin |LED4_Pin, GPIO_PIN_RESET);
 80069f2:	4b54      	ldr	r3, [pc, #336]	; (8006b44 <MX_GPIO_Init+0x6f0>)
 80069f4:	881a      	ldrh	r2, [r3, #0]
 80069f6:	4b55      	ldr	r3, [pc, #340]	; (8006b4c <MX_GPIO_Init+0x6f8>)
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	4b58      	ldr	r3, [pc, #352]	; (8006b60 <MX_GPIO_Init+0x70c>)
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	2200      	movs	r2, #0
 8006a08:	4619      	mov	r1, r3
 8006a0a:	481c      	ldr	r0, [pc, #112]	; (8006a7c <MX_GPIO_Init+0x628>)
 8006a0c:	f007 faca 	bl	800dfa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOE, LED3_Pin, GPIO_PIN_RESET);
 8006a10:	4b50      	ldr	r3, [pc, #320]	; (8006b54 <MX_GPIO_Init+0x700>)
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	2200      	movs	r2, #0
 8006a16:	4619      	mov	r1, r3
 8006a18:	4850      	ldr	r0, [pc, #320]	; (8006b5c <MX_GPIO_Init+0x708>)
 8006a1a:	f007 fac3 	bl	800dfa4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, BAT_CHRG_EN_Pin , GPIO_PIN_SET);
 8006a1e:	4b56      	ldr	r3, [pc, #344]	; (8006b78 <MX_GPIO_Init+0x724>)
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	2201      	movs	r2, #1
 8006a24:	4619      	mov	r1, r3
 8006a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a2a:	f007 fabb 	bl	800dfa4 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin =  CAN1_INT0_Pin | CAN2_INT_Pin | CAN2_INT0_Pin;
 8006a2e:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <MX_GPIO_Init+0x630>)
 8006a30:	881a      	ldrh	r2, [r3, #0]
 8006a32:	4b1d      	ldr	r3, [pc, #116]	; (8006aa8 <MX_GPIO_Init+0x654>)
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	b29a      	uxth	r2, r3
 8006a3a:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <MX_GPIO_Init+0x660>)
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a44:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006a48:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a4e:	1d3b      	adds	r3, r7, #4
 8006a50:	4619      	mov	r1, r3
 8006a52:	480e      	ldr	r0, [pc, #56]	; (8006a8c <MX_GPIO_Init+0x638>)
 8006a54:	f007 f91e 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN1_INT1_Pin;
 8006a58:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <MX_GPIO_Init+0x640>)
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006a5e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006a62:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a64:	2301      	movs	r3, #1
 8006a66:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a68:	1d3b      	adds	r3, r7, #4
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a70:	e086      	b.n	8006b80 <MX_GPIO_Init+0x72c>
 8006a72:	bf00      	nop
 8006a74:	20000c5e 	.word	0x20000c5e
 8006a78:	20000c60 	.word	0x20000c60
 8006a7c:	48000400 	.word	0x48000400
 8006a80:	20000c64 	.word	0x20000c64
 8006a84:	20000c66 	.word	0x20000c66
 8006a88:	20000c68 	.word	0x20000c68
 8006a8c:	48000800 	.word	0x48000800
 8006a90:	20000c6c 	.word	0x20000c6c
 8006a94:	20000c6e 	.word	0x20000c6e
 8006a98:	20000c70 	.word	0x20000c70
 8006a9c:	20000c74 	.word	0x20000c74
 8006aa0:	20000c76 	.word	0x20000c76
 8006aa4:	20000c78 	.word	0x20000c78
 8006aa8:	20000c7c 	.word	0x20000c7c
 8006aac:	20000c80 	.word	0x20000c80
 8006ab0:	20000c84 	.word	0x20000c84
 8006ab4:	20000c86 	.word	0x20000c86
 8006ab8:	20000c88 	.word	0x20000c88
 8006abc:	20000c8c 	.word	0x20000c8c
 8006ac0:	20000c8e 	.word	0x20000c8e
 8006ac4:	20000c90 	.word	0x20000c90
 8006ac8:	48000c00 	.word	0x48000c00
 8006acc:	20000c94 	.word	0x20000c94
 8006ad0:	20000c96 	.word	0x20000c96
 8006ad4:	20000c98 	.word	0x20000c98
 8006ad8:	20000c9c 	.word	0x20000c9c
 8006adc:	20000ca0 	.word	0x20000ca0
 8006ae0:	20000ca4 	.word	0x20000ca4
 8006ae4:	20000ca6 	.word	0x20000ca6
 8006ae8:	20000ca8 	.word	0x20000ca8
 8006aec:	20000cac 	.word	0x20000cac
 8006af0:	20000cae 	.word	0x20000cae
 8006af4:	20000cb0 	.word	0x20000cb0
 8006af8:	20000cb4 	.word	0x20000cb4
 8006afc:	20000cb6 	.word	0x20000cb6
 8006b00:	20000cb8 	.word	0x20000cb8
 8006b04:	20000cbc 	.word	0x20000cbc
 8006b08:	20000cc0 	.word	0x20000cc0
 8006b0c:	20000cc4 	.word	0x20000cc4
 8006b10:	20000cc8 	.word	0x20000cc8
 8006b14:	20000ccc 	.word	0x20000ccc
 8006b18:	20000cd0 	.word	0x20000cd0
 8006b1c:	20000cd4 	.word	0x20000cd4
 8006b20:	20000cd6 	.word	0x20000cd6
 8006b24:	20000cd8 	.word	0x20000cd8
 8006b28:	20000cdc 	.word	0x20000cdc
 8006b2c:	20000cde 	.word	0x20000cde
 8006b30:	20000ce0 	.word	0x20000ce0
 8006b34:	20000ce4 	.word	0x20000ce4
 8006b38:	20000ce6 	.word	0x20000ce6
 8006b3c:	20000ce8 	.word	0x20000ce8
 8006b40:	20000cec 	.word	0x20000cec
 8006b44:	20000cee 	.word	0x20000cee
 8006b48:	20000cf0 	.word	0x20000cf0
 8006b4c:	20000cf4 	.word	0x20000cf4
 8006b50:	20000cf8 	.word	0x20000cf8
 8006b54:	20000cfc 	.word	0x20000cfc
 8006b58:	20000d00 	.word	0x20000d00
 8006b5c:	48001000 	.word	0x48001000
 8006b60:	20000d04 	.word	0x20000d04
 8006b64:	20000d08 	.word	0x20000d08
 8006b68:	20000d0c 	.word	0x20000d0c
 8006b6c:	20000d10 	.word	0x20000d10
 8006b70:	20000d14 	.word	0x20000d14
 8006b74:	20000d18 	.word	0x20000d18
 8006b78:	20000d1c 	.word	0x20000d1c
 8006b7c:	20000d20 	.word	0x20000d20
 8006b80:	f007 f888 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_INT_Pin;
 8006b84:	4b66      	ldr	r3, [pc, #408]	; (8006d20 <MX_GPIO_Init+0x8cc>)
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006b8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006b8e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b94:	1d3b      	adds	r3, r7, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4862      	ldr	r0, [pc, #392]	; (8006d24 <MX_GPIO_Init+0x8d0>)
 8006b9a:	f007 f87b 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  CAN2_INT1_Pin;
 8006b9e:	4b62      	ldr	r3, [pc, #392]	; (8006d28 <MX_GPIO_Init+0x8d4>)
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006ba4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8006ba8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006baa:	2301      	movs	r3, #1
 8006bac:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006bae:	1d3b      	adds	r3, r7, #4
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	485e      	ldr	r0, [pc, #376]	; (8006d2c <MX_GPIO_Init+0x8d8>)
 8006bb4:	f007 f86e 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_CS1_Pin | SPI2_CS2_Pin | CAN2_CS_Pin;
 8006bb8:	4b5d      	ldr	r3, [pc, #372]	; (8006d30 <MX_GPIO_Init+0x8dc>)
 8006bba:	881a      	ldrh	r2, [r3, #0]
 8006bbc:	4b5d      	ldr	r3, [pc, #372]	; (8006d34 <MX_GPIO_Init+0x8e0>)
 8006bbe:	881b      	ldrh	r3, [r3, #0]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	b29a      	uxth	r2, r3
 8006bc4:	4b5c      	ldr	r3, [pc, #368]	; (8006d38 <MX_GPIO_Init+0x8e4>)
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bda:	1d3b      	adds	r3, r7, #4
 8006bdc:	4619      	mov	r1, r3
 8006bde:	4857      	ldr	r0, [pc, #348]	; (8006d3c <MX_GPIO_Init+0x8e8>)
 8006be0:	f007 f858 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN1_CS_Pin;
 8006be4:	4b56      	ldr	r3, [pc, #344]	; (8006d40 <MX_GPIO_Init+0x8ec>)
 8006be6:	881b      	ldrh	r3, [r3, #0]
 8006be8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bea:	2301      	movs	r3, #1
 8006bec:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	484a      	ldr	r0, [pc, #296]	; (8006d24 <MX_GPIO_Init+0x8d0>)
 8006bfc:	f007 f84a 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON1_Pin | BUTTON2_Pin | BUTTON3_Pin;
 8006c00:	4b50      	ldr	r3, [pc, #320]	; (8006d44 <MX_GPIO_Init+0x8f0>)
 8006c02:	881a      	ldrh	r2, [r3, #0]
 8006c04:	4b50      	ldr	r3, [pc, #320]	; (8006d48 <MX_GPIO_Init+0x8f4>)
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	4b4f      	ldr	r3, [pc, #316]	; (8006d4c <MX_GPIO_Init+0x8f8>)
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c16:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006c1a:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c20:	1d3b      	adds	r3, r7, #4
 8006c22:	4619      	mov	r1, r3
 8006c24:	483f      	ldr	r0, [pc, #252]	; (8006d24 <MX_GPIO_Init+0x8d0>)
 8006c26:	f007 f835 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BUTTON4_Pin;
 8006c2a:	4b49      	ldr	r3, [pc, #292]	; (8006d50 <MX_GPIO_Init+0x8fc>)
 8006c2c:	881b      	ldrh	r3, [r3, #0]
 8006c2e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006c30:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006c34:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c36:	2301      	movs	r3, #1
 8006c38:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c3a:	1d3b      	adds	r3, r7, #4
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	483f      	ldr	r0, [pc, #252]	; (8006d3c <MX_GPIO_Init+0x8e8>)
 8006c40:	f007 f828 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED4_Pin;
 8006c44:	4b43      	ldr	r3, [pc, #268]	; (8006d54 <MX_GPIO_Init+0x900>)
 8006c46:	881a      	ldrh	r2, [r3, #0]
 8006c48:	4b43      	ldr	r3, [pc, #268]	; (8006d58 <MX_GPIO_Init+0x904>)
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	4b42      	ldr	r3, [pc, #264]	; (8006d5c <MX_GPIO_Init+0x908>)
 8006c52:	881b      	ldrh	r3, [r3, #0]
 8006c54:	4313      	orrs	r3, r2
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c62:	2300      	movs	r3, #0
 8006c64:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c66:	1d3b      	adds	r3, r7, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	482e      	ldr	r0, [pc, #184]	; (8006d24 <MX_GPIO_Init+0x8d0>)
 8006c6c:	f007 f812 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED3_Pin;
 8006c70:	4b3b      	ldr	r3, [pc, #236]	; (8006d60 <MX_GPIO_Init+0x90c>)
 8006c72:	881b      	ldrh	r3, [r3, #0]
 8006c74:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c76:	2301      	movs	r3, #1
 8006c78:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006c82:	1d3b      	adds	r3, r7, #4
 8006c84:	4619      	mov	r1, r3
 8006c86:	4837      	ldr	r0, [pc, #220]	; (8006d64 <MX_GPIO_Init+0x910>)
 8006c88:	f007 f804 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = CAN_CLK_EN_Pin   ;
 8006c8c:	4b36      	ldr	r3, [pc, #216]	; (8006d68 <MX_GPIO_Init+0x914>)
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c92:	2301      	movs	r3, #1
 8006c94:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c9e:	1d3b      	adds	r3, r7, #4
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ca6:	f006 fff5 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin =  BAT_CHRG_EN_Pin  ;
 8006caa:	4b30      	ldr	r3, [pc, #192]	; (8006d6c <MX_GPIO_Init+0x918>)
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006cbc:	1d3b      	adds	r3, r7, #4
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006cc4:	f006 ffe6 	bl	800dc94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2100      	movs	r1, #0
 8006ccc:	2006      	movs	r0, #6
 8006cce:	f006 fcd2 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8006cd2:	2006      	movs	r0, #6
 8006cd4:	f006 fce9 	bl	800d6aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8006cd8:	2200      	movs	r2, #0
 8006cda:	2100      	movs	r1, #0
 8006cdc:	2008      	movs	r0, #8
 8006cde:	f006 fcca 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8006ce2:	2008      	movs	r0, #8
 8006ce4:	f006 fce1 	bl	800d6aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8006ce8:	2200      	movs	r2, #0
 8006cea:	2100      	movs	r1, #0
 8006cec:	200a      	movs	r0, #10
 8006cee:	f006 fcc2 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8006cf2:	200a      	movs	r0, #10
 8006cf4:	f006 fcd9 	bl	800d6aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2100      	movs	r1, #0
 8006cfc:	2017      	movs	r0, #23
 8006cfe:	f006 fcba 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006d02:	2017      	movs	r0, #23
 8006d04:	f006 fcd1 	bl	800d6aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	2028      	movs	r0, #40	; 0x28
 8006d0e:	f006 fcb2 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d12:	2028      	movs	r0, #40	; 0x28
 8006d14:	f006 fcc9 	bl	800d6aa <HAL_NVIC_EnableIRQ>
}
 8006d18:	bf00      	nop
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000c5e 	.word	0x20000c5e
 8006d24:	48000400 	.word	0x48000400
 8006d28:	20000c8e 	.word	0x20000c8e
 8006d2c:	48000c00 	.word	0x48000c00
 8006d30:	20000cbc 	.word	0x20000cbc
 8006d34:	20000cc4 	.word	0x20000cc4
 8006d38:	20000c96 	.word	0x20000c96
 8006d3c:	48000800 	.word	0x48000800
 8006d40:	20000c76 	.word	0x20000c76
 8006d44:	20000ccc 	.word	0x20000ccc
 8006d48:	20000cd6 	.word	0x20000cd6
 8006d4c:	20000cde 	.word	0x20000cde
 8006d50:	20000ce6 	.word	0x20000ce6
 8006d54:	20000cee 	.word	0x20000cee
 8006d58:	20000cf4 	.word	0x20000cf4
 8006d5c:	20000d04 	.word	0x20000d04
 8006d60:	20000cfc 	.word	0x20000cfc
 8006d64:	48001000 	.word	0x48001000
 8006d68:	20000d14 	.word	0x20000d14
 8006d6c:	20000d1c 	.word	0x20000d1c

08006d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  //__disable_irq();

  sprintf(tempBuffer,"ERROR_HANDLER"); serialOut(tempBuffer);
 8006d74:	4904      	ldr	r1, [pc, #16]	; (8006d88 <Error_Handler+0x18>)
 8006d76:	4805      	ldr	r0, [pc, #20]	; (8006d8c <Error_Handler+0x1c>)
 8006d78:	f00d fc8c 	bl	8014694 <siprintf>
 8006d7c:	4803      	ldr	r0, [pc, #12]	; (8006d8c <Error_Handler+0x1c>)
 8006d7e:	f7fe fc43 	bl	8005608 <serialOut>
  return;
 8006d82:	bf00      	nop

  /* USER CODE END Error_Handler_Debug */
}
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	08017a94 	.word	0x08017a94
 8006d8c:	20000b64 	.word	0x20000b64

08006d90 <PCU_Initialize>:

/***************************************************************************************************************
*     P C U _ I n i t i a l i z e                                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Initialize(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b082      	sub	sp, #8
 8006d94:	af00      	add	r7, sp, #0
  // - MANUFACTURER_ID    16 Bytes
  // - PART_NUMBER        16 Bytes
  // - SERIAL_NUMBER      16 Bytes


  LoadAllEEPROM();
 8006d96:	f7fe fd79 	bl	800588c <LoadAllEEPROM>

  memset(&pack,0,sizeof(pack));
 8006d9a:	2254      	movs	r2, #84	; 0x54
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	48ac      	ldr	r0, [pc, #688]	; (8007050 <PCU_Initialize+0x2c0>)
 8006da0:	f00c fc66 	bl	8013670 <memset>

  //pack.id = EE_PACK_ID;
  pack.id = eeVarDataTab[EE_PACK_CONTROLLER_ID];
 8006da4:	4bab      	ldr	r3, [pc, #684]	; (8007054 <PCU_Initialize+0x2c4>)
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	b2da      	uxtb	r2, r3
 8006daa:	4ba9      	ldr	r3, [pc, #676]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dac:	701a      	strb	r2, [r3, #0]
  pack.mfgId=0;
 8006dae:	4ba8      	ldr	r3, [pc, #672]	; (8007050 <PCU_Initialize+0x2c0>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	705a      	strb	r2, [r3, #1]
  pack.partId=0;
 8006db4:	4ba6      	ldr	r3, [pc, #664]	; (8007050 <PCU_Initialize+0x2c0>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	709a      	strb	r2, [r3, #2]
  pack.uniqueId=0;
 8006dba:	4ba5      	ldr	r3, [pc, #660]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	605a      	str	r2, [r3, #4]
  if (pack.id == 0)
 8006dc0:	4ba3      	ldr	r3, [pc, #652]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d103      	bne.n	8006dd0 <PCU_Initialize+0x40>
    pack.vcuCanOffset = 0;
 8006dc8:	4ba1      	ldr	r3, [pc, #644]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dca:	2200      	movs	r2, #0
 8006dcc:	815a      	strh	r2, [r3, #10]
 8006dce:	e007      	b.n	8006de0 <PCU_Initialize+0x50>
  else if (pack.id == 1)
 8006dd0:	4b9f      	ldr	r3, [pc, #636]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b01      	cmp	r3, #1
 8006dd6:	d103      	bne.n	8006de0 <PCU_Initialize+0x50>
    pack.vcuCanOffset =0x100;
 8006dd8:	4b9d      	ldr	r3, [pc, #628]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dde:	815a      	strh	r2, [r3, #10]
  pack.hwVersion=HW_VER;
 8006de0:	4b9b      	ldr	r3, [pc, #620]	; (8007050 <PCU_Initialize+0x2c0>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	721a      	strb	r2, [r3, #8]
  pack.fwVersion=FW_VER;
 8006de6:	4b9a      	ldr	r3, [pc, #616]	; (8007050 <PCU_Initialize+0x2c0>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	725a      	strb	r2, [r3, #9]
  pack.voltage=0;
 8006dec:	4b98      	ldr	r3, [pc, #608]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	819a      	strh	r2, [r3, #12]
  pack.current=0;
 8006df2:	4b97      	ldr	r3, [pc, #604]	; (8007050 <PCU_Initialize+0x2c0>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	611a      	str	r2, [r3, #16]
  pack.moduleCount=0;
 8006df8:	4b95      	ldr	r3, [pc, #596]	; (8007050 <PCU_Initialize+0x2c0>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	751a      	strb	r2, [r3, #20]
  pack.activeModules=0;
 8006dfe:	4b94      	ldr	r3, [pc, #592]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	75da      	strb	r2, [r3, #23]
  pack.totalCells=0;
 8006e04:	4b92      	ldr	r3, [pc, #584]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	839a      	strh	r2, [r3, #28]
  pack.cellHiTemp=0;
 8006e0a:	4b91      	ldr	r3, [pc, #580]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	83da      	strh	r2, [r3, #30]
  pack.cellLoTemp=0;
 8006e10:	4b8f      	ldr	r3, [pc, #572]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	845a      	strh	r2, [r3, #34]	; 0x22
  pack.cellAvgTemp=0;
 8006e16:	4b8e      	ldr	r3, [pc, #568]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	84da      	strh	r2, [r3, #38]	; 0x26
  pack.cellHiVolt=0;
 8006e1c:	4b8c      	ldr	r3, [pc, #560]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	851a      	strh	r2, [r3, #40]	; 0x28
  pack.cellLoVolt=0;
 8006e22:	4b8b      	ldr	r3, [pc, #556]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	859a      	strh	r2, [r3, #44]	; 0x2c
  pack.cellAvgVolt=0;
 8006e28:	4b89      	ldr	r3, [pc, #548]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	861a      	strh	r2, [r3, #48]	; 0x30
  pack.status=0;
 8006e2e:	4b88      	ldr	r3, [pc, #544]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  pack.vcuStateChange=0;
 8006e36:	4b86      	ldr	r3, [pc, #536]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  pack.state=0;
 8006e3e:	4b84      	ldr	r3, [pc, #528]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  pack.vcuRequestedState=0;
 8006e46:	4b82      	ldr	r3, [pc, #520]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  pack.soc=0;
 8006e4e:	4b80      	ldr	r3, [pc, #512]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  pack.soh=0;
 8006e56:	4b7e      	ldr	r3, [pc, #504]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  pack.vcuLastContact.overflows=0;
 8006e5e:	4b7c      	ldr	r3, [pc, #496]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e60:	2200      	movs	r2, #0
 8006e62:	649a      	str	r2, [r3, #72]	; 0x48
  pack.vcuLastContact.ticks=0;
 8006e64:	4b7a      	ldr	r3, [pc, #488]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	645a      	str	r2, [r3, #68]	; 0x44
  pack.cellBalanceActive=0;
 8006e6a:	4b79      	ldr	r3, [pc, #484]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	755a      	strb	r2, [r3, #21]
  pack.cellBalanceStatus=0;
 8006e70:	4b77      	ldr	r3, [pc, #476]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	759a      	strb	r2, [r3, #22]
  pack.faultedModules=0;
 8006e76:	4b76      	ldr	r3, [pc, #472]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	761a      	strb	r2, [r3, #24]
  pack.controlMode = packMode;
 8006e7c:	4b74      	ldr	r3, [pc, #464]	; (8007050 <PCU_Initialize+0x2c0>)
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  //clear the module memory structure
  uint8_t index;
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8006e84:	2300      	movs	r3, #0
 8006e86:	71fb      	strb	r3, [r7, #7]
 8006e88:	e00f      	b.n	8006eaa <PCU_Initialize+0x11a>
    memset(&module[index],0,sizeof(module[index]));
 8006e8a:	79fb      	ldrb	r3, [r7, #7]
 8006e8c:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	4a70      	ldr	r2, [pc, #448]	; (8007058 <PCU_Initialize+0x2c8>)
 8006e96:	4413      	add	r3, r2
 8006e98:	f240 42c4 	movw	r2, #1220	; 0x4c4
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f00c fbe6 	bl	8013670 <memset>
  for (index=0;index<MAX_MODULES_PER_PACK;index++){
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	71fb      	strb	r3, [r7, #7]
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	2b1f      	cmp	r3, #31
 8006eae:	d9ec      	bls.n	8006e8a <PCU_Initialize+0xfa>


  bool passed;


  serialOut("");
 8006eb0:	486a      	ldr	r0, [pc, #424]	; (800705c <PCU_Initialize+0x2cc>)
 8006eb2:	f7fe fba9 	bl	8005608 <serialOut>
  serialOut("");
 8006eb6:	4869      	ldr	r0, [pc, #420]	; (800705c <PCU_Initialize+0x2cc>)
 8006eb8:	f7fe fba6 	bl	8005608 <serialOut>
  serialOut("        ██    ██");
 8006ebc:	4868      	ldr	r0, [pc, #416]	; (8007060 <PCU_Initialize+0x2d0>)
 8006ebe:	f7fe fba3 	bl	8005608 <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 8006ec2:	4868      	ldr	r0, [pc, #416]	; (8007064 <PCU_Initialize+0x2d4>)
 8006ec4:	f7fe fba0 	bl	8005608 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Pack Controller V1.0     (c) 2024");
 8006ec8:	4867      	ldr	r0, [pc, #412]	; (8007068 <PCU_Initialize+0x2d8>)
 8006eca:	f7fe fb9d 	bl	8005608 <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 8006ece:	4867      	ldr	r0, [pc, #412]	; (800706c <PCU_Initialize+0x2dc>)
 8006ed0:	f7fe fb9a 	bl	8005608 <serialOut>
  serialOut("     ██    ██    ██");
 8006ed4:	4866      	ldr	r0, [pc, #408]	; (8007070 <PCU_Initialize+0x2e0>)
 8006ed6:	f7fe fb97 	bl	8005608 <serialOut>
  serialOut("     m o d b a t t");
 8006eda:	4866      	ldr	r0, [pc, #408]	; (8007074 <PCU_Initialize+0x2e4>)
 8006edc:	f7fe fb94 	bl	8005608 <serialOut>
  serialOut("");
 8006ee0:	485e      	ldr	r0, [pc, #376]	; (800705c <PCU_Initialize+0x2cc>)
 8006ee2:	f7fe fb91 	bl	8005608 <serialOut>

  passed = CAN_TestRamAccess(CAN1);
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	f003 fde4 	bl	800aab4 <CAN_TestRamAccess>
 8006eec:	4603      	mov	r3, r0
 8006eee:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : OK"); serialOut(tempBuffer);
 8006ef0:	79bb      	ldrb	r3, [r7, #6]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <PCU_Initialize+0x176>
 8006ef6:	4960      	ldr	r1, [pc, #384]	; (8007078 <PCU_Initialize+0x2e8>)
 8006ef8:	4860      	ldr	r0, [pc, #384]	; (800707c <PCU_Initialize+0x2ec>)
 8006efa:	f00d fbcb 	bl	8014694 <siprintf>
 8006efe:	485f      	ldr	r0, [pc, #380]	; (800707c <PCU_Initialize+0x2ec>)
 8006f00:	f7fe fb82 	bl	8005608 <serialOut>
 8006f04:	e006      	b.n	8006f14 <PCU_Initialize+0x184>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD RAM TEST         (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006f06:	495e      	ldr	r1, [pc, #376]	; (8007080 <PCU_Initialize+0x2f0>)
 8006f08:	485c      	ldr	r0, [pc, #368]	; (800707c <PCU_Initialize+0x2ec>)
 8006f0a:	f00d fbc3 	bl	8014694 <siprintf>
 8006f0e:	485b      	ldr	r0, [pc, #364]	; (800707c <PCU_Initialize+0x2ec>)
 8006f10:	f7fe fb7a 	bl	8005608 <serialOut>
  }
  passed = CAN_TestRegisterAccess(CAN1);
 8006f14:	2000      	movs	r0, #0
 8006f16:	f003 fd53 	bl	800a9c0 <CAN_TestRegisterAccess>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	71bb      	strb	r3, [r7, #6]
  if (passed) { sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : OK"); serialOut(tempBuffer);
 8006f1e:	79bb      	ldrb	r3, [r7, #6]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <PCU_Initialize+0x1a4>
 8006f24:	4957      	ldr	r1, [pc, #348]	; (8007084 <PCU_Initialize+0x2f4>)
 8006f26:	4855      	ldr	r0, [pc, #340]	; (800707c <PCU_Initialize+0x2ec>)
 8006f28:	f00d fbb4 	bl	8014694 <siprintf>
 8006f2c:	4853      	ldr	r0, [pc, #332]	; (800707c <PCU_Initialize+0x2ec>)
 8006f2e:	f7fe fb6b 	bl	8005608 <serialOut>
 8006f32:	e006      	b.n	8006f42 <PCU_Initialize+0x1b2>
  }else{        sprintf(tempBuffer,  "     VCU MCP2518FD REGISTER TEST    (CAN1) : FAILED!"); serialOut(tempBuffer);
 8006f34:	4954      	ldr	r1, [pc, #336]	; (8007088 <PCU_Initialize+0x2f8>)
 8006f36:	4851      	ldr	r0, [pc, #324]	; (800707c <PCU_Initialize+0x2ec>)
 8006f38:	f00d fbac 	bl	8014694 <siprintf>
 8006f3c:	484f      	ldr	r0, [pc, #316]	; (800707c <PCU_Initialize+0x2ec>)
 8006f3e:	f7fe fb63 	bl	8005608 <serialOut>
  }
  sprintf(tempBuffer," "); serialOut(tempBuffer);
 8006f42:	4952      	ldr	r1, [pc, #328]	; (800708c <PCU_Initialize+0x2fc>)
 8006f44:	484d      	ldr	r0, [pc, #308]	; (800707c <PCU_Initialize+0x2ec>)
 8006f46:	f00d fba5 	bl	8014694 <siprintf>
 8006f4a:	484c      	ldr	r0, [pc, #304]	; (800707c <PCU_Initialize+0x2ec>)
 8006f4c:	f7fe fb5c 	bl	8005608 <serialOut>

  if(hwPlatform == PLATFORM_NUCLEO){
 8006f50:	4b4f      	ldr	r3, [pc, #316]	; (8007090 <PCU_Initialize+0x300>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d135      	bne.n	8006fc4 <PCU_Initialize+0x234>
    passed = CAN_TestRamAccess(CAN2);
 8006f58:	2001      	movs	r0, #1
 8006f5a:	f003 fdab 	bl	800aab4 <CAN_TestRamAccess>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : OK"); serialOut(tempBuffer);
 8006f62:	79bb      	ldrb	r3, [r7, #6]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d007      	beq.n	8006f78 <PCU_Initialize+0x1e8>
 8006f68:	494a      	ldr	r1, [pc, #296]	; (8007094 <PCU_Initialize+0x304>)
 8006f6a:	4844      	ldr	r0, [pc, #272]	; (800707c <PCU_Initialize+0x2ec>)
 8006f6c:	f00d fb92 	bl	8014694 <siprintf>
 8006f70:	4842      	ldr	r0, [pc, #264]	; (800707c <PCU_Initialize+0x2ec>)
 8006f72:	f7fe fb49 	bl	8005608 <serialOut>
 8006f76:	e006      	b.n	8006f86 <PCU_Initialize+0x1f6>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD RAM TEST         (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006f78:	4947      	ldr	r1, [pc, #284]	; (8007098 <PCU_Initialize+0x308>)
 8006f7a:	4840      	ldr	r0, [pc, #256]	; (800707c <PCU_Initialize+0x2ec>)
 8006f7c:	f00d fb8a 	bl	8014694 <siprintf>
 8006f80:	483e      	ldr	r0, [pc, #248]	; (800707c <PCU_Initialize+0x2ec>)
 8006f82:	f7fe fb41 	bl	8005608 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 8006f86:	2001      	movs	r0, #1
 8006f88:	f003 fd1a 	bl	800a9c0 <CAN_TestRegisterAccess>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : OK"); serialOut(tempBuffer);
 8006f90:	79bb      	ldrb	r3, [r7, #6]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <PCU_Initialize+0x216>
 8006f96:	4941      	ldr	r1, [pc, #260]	; (800709c <PCU_Initialize+0x30c>)
 8006f98:	4838      	ldr	r0, [pc, #224]	; (800707c <PCU_Initialize+0x2ec>)
 8006f9a:	f00d fb7b 	bl	8014694 <siprintf>
 8006f9e:	4837      	ldr	r0, [pc, #220]	; (800707c <PCU_Initialize+0x2ec>)
 8006fa0:	f7fe fb32 	bl	8005608 <serialOut>
 8006fa4:	e006      	b.n	8006fb4 <PCU_Initialize+0x224>
    }else{        sprintf(tempBuffer,"     MCU MCP2518FD REGISTER TEST    (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006fa6:	493e      	ldr	r1, [pc, #248]	; (80070a0 <PCU_Initialize+0x310>)
 8006fa8:	4834      	ldr	r0, [pc, #208]	; (800707c <PCU_Initialize+0x2ec>)
 8006faa:	f00d fb73 	bl	8014694 <siprintf>
 8006fae:	4833      	ldr	r0, [pc, #204]	; (800707c <PCU_Initialize+0x2ec>)
 8006fb0:	f7fe fb2a 	bl	8005608 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8006fb4:	4935      	ldr	r1, [pc, #212]	; (800708c <PCU_Initialize+0x2fc>)
 8006fb6:	4831      	ldr	r0, [pc, #196]	; (800707c <PCU_Initialize+0x2ec>)
 8006fb8:	f00d fb6c 	bl	8014694 <siprintf>
 8006fbc:	482f      	ldr	r0, [pc, #188]	; (800707c <PCU_Initialize+0x2ec>)
 8006fbe:	f7fe fb23 	bl	8005608 <serialOut>
 8006fc2:	e09e      	b.n	8007102 <PCU_Initialize+0x372>
  }else{
    // PLATFORM_MODBATT
    passed = CAN_TestRamAccess(CAN2);
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	f003 fd75 	bl	800aab4 <CAN_TestRamAccess>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : OK"); serialOut(tempBuffer);
 8006fce:	79bb      	ldrb	r3, [r7, #6]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d007      	beq.n	8006fe4 <PCU_Initialize+0x254>
 8006fd4:	4933      	ldr	r1, [pc, #204]	; (80070a4 <PCU_Initialize+0x314>)
 8006fd6:	4829      	ldr	r0, [pc, #164]	; (800707c <PCU_Initialize+0x2ec>)
 8006fd8:	f00d fb5c 	bl	8014694 <siprintf>
 8006fdc:	4827      	ldr	r0, [pc, #156]	; (800707c <PCU_Initialize+0x2ec>)
 8006fde:	f7fe fb13 	bl	8005608 <serialOut>
 8006fe2:	e006      	b.n	8006ff2 <PCU_Initialize+0x262>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD RAM TEST      (CAN2) : FAILED!"); serialOut(tempBuffer);
 8006fe4:	4930      	ldr	r1, [pc, #192]	; (80070a8 <PCU_Initialize+0x318>)
 8006fe6:	4825      	ldr	r0, [pc, #148]	; (800707c <PCU_Initialize+0x2ec>)
 8006fe8:	f00d fb54 	bl	8014694 <siprintf>
 8006fec:	4823      	ldr	r0, [pc, #140]	; (800707c <PCU_Initialize+0x2ec>)
 8006fee:	f7fe fb0b 	bl	8005608 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN2);
 8006ff2:	2001      	movs	r0, #1
 8006ff4:	f003 fce4 	bl	800a9c0 <CAN_TestRegisterAccess>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : OK"); serialOut(tempBuffer);
 8006ffc:	79bb      	ldrb	r3, [r7, #6]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d007      	beq.n	8007012 <PCU_Initialize+0x282>
 8007002:	492a      	ldr	r1, [pc, #168]	; (80070ac <PCU_Initialize+0x31c>)
 8007004:	481d      	ldr	r0, [pc, #116]	; (800707c <PCU_Initialize+0x2ec>)
 8007006:	f00d fb45 	bl	8014694 <siprintf>
 800700a:	481c      	ldr	r0, [pc, #112]	; (800707c <PCU_Initialize+0x2ec>)
 800700c:	f7fe fafc 	bl	8005608 <serialOut>
 8007010:	e006      	b.n	8007020 <PCU_Initialize+0x290>
    }else{        sprintf(tempBuffer,"     LO-MCU MCP2518FD REGISTER TEST (CAN2) : FAILED!"); serialOut(tempBuffer);
 8007012:	4927      	ldr	r1, [pc, #156]	; (80070b0 <PCU_Initialize+0x320>)
 8007014:	4819      	ldr	r0, [pc, #100]	; (800707c <PCU_Initialize+0x2ec>)
 8007016:	f00d fb3d 	bl	8014694 <siprintf>
 800701a:	4818      	ldr	r0, [pc, #96]	; (800707c <PCU_Initialize+0x2ec>)
 800701c:	f7fe faf4 	bl	8005608 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 8007020:	491a      	ldr	r1, [pc, #104]	; (800708c <PCU_Initialize+0x2fc>)
 8007022:	4816      	ldr	r0, [pc, #88]	; (800707c <PCU_Initialize+0x2ec>)
 8007024:	f00d fb36 	bl	8014694 <siprintf>
 8007028:	4814      	ldr	r0, [pc, #80]	; (800707c <PCU_Initialize+0x2ec>)
 800702a:	f7fe faed 	bl	8005608 <serialOut>

    passed = CAN_TestRamAccess(CAN3);
 800702e:	2002      	movs	r0, #2
 8007030:	f003 fd40 	bl	800aab4 <CAN_TestRamAccess>
 8007034:	4603      	mov	r3, r0
 8007036:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : OK"); serialOut(tempBuffer);
 8007038:	79bb      	ldrb	r3, [r7, #6]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d03c      	beq.n	80070b8 <PCU_Initialize+0x328>
 800703e:	491d      	ldr	r1, [pc, #116]	; (80070b4 <PCU_Initialize+0x324>)
 8007040:	480e      	ldr	r0, [pc, #56]	; (800707c <PCU_Initialize+0x2ec>)
 8007042:	f00d fb27 	bl	8014694 <siprintf>
 8007046:	480d      	ldr	r0, [pc, #52]	; (800707c <PCU_Initialize+0x2ec>)
 8007048:	f7fe fade 	bl	8005608 <serialOut>
 800704c:	e03b      	b.n	80070c6 <PCU_Initialize+0x336>
 800704e:	bf00      	nop
 8007050:	2000a66c 	.word	0x2000a66c
 8007054:	2000098c 	.word	0x2000098c
 8007058:	20000dec 	.word	0x20000dec
 800705c:	08017aa4 	.word	0x08017aa4
 8007060:	08017aa8 	.word	0x08017aa8
 8007064:	08017ac4 	.word	0x08017ac4
 8007068:	08017aec 	.word	0x08017aec
 800706c:	08017b3c 	.word	0x08017b3c
 8007070:	08017b8c 	.word	0x08017b8c
 8007074:	08017bac 	.word	0x08017bac
 8007078:	08017bc0 	.word	0x08017bc0
 800707c:	20000b64 	.word	0x20000b64
 8007080:	08017bf0 	.word	0x08017bf0
 8007084:	08017c28 	.word	0x08017c28
 8007088:	08017c58 	.word	0x08017c58
 800708c:	08017c90 	.word	0x08017c90
 8007090:	20000a58 	.word	0x20000a58
 8007094:	08017c94 	.word	0x08017c94
 8007098:	08017cc4 	.word	0x08017cc4
 800709c:	08017cfc 	.word	0x08017cfc
 80070a0:	08017d2c 	.word	0x08017d2c
 80070a4:	08017d64 	.word	0x08017d64
 80070a8:	08017d94 	.word	0x08017d94
 80070ac:	08017dcc 	.word	0x08017dcc
 80070b0:	08017dfc 	.word	0x08017dfc
 80070b4:	08017e34 	.word	0x08017e34
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD RAM TEST      (CAN3) : FAILED!"); serialOut(tempBuffer);
 80070b8:	4915      	ldr	r1, [pc, #84]	; (8007110 <PCU_Initialize+0x380>)
 80070ba:	4816      	ldr	r0, [pc, #88]	; (8007114 <PCU_Initialize+0x384>)
 80070bc:	f00d faea 	bl	8014694 <siprintf>
 80070c0:	4814      	ldr	r0, [pc, #80]	; (8007114 <PCU_Initialize+0x384>)
 80070c2:	f7fe faa1 	bl	8005608 <serialOut>
    }

    passed = CAN_TestRegisterAccess(CAN3);
 80070c6:	2002      	movs	r0, #2
 80070c8:	f003 fc7a 	bl	800a9c0 <CAN_TestRegisterAccess>
 80070cc:	4603      	mov	r3, r0
 80070ce:	71bb      	strb	r3, [r7, #6]
    if (passed) { sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : OK"); serialOut(tempBuffer);
 80070d0:	79bb      	ldrb	r3, [r7, #6]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <PCU_Initialize+0x356>
 80070d6:	4910      	ldr	r1, [pc, #64]	; (8007118 <PCU_Initialize+0x388>)
 80070d8:	480e      	ldr	r0, [pc, #56]	; (8007114 <PCU_Initialize+0x384>)
 80070da:	f00d fadb 	bl	8014694 <siprintf>
 80070de:	480d      	ldr	r0, [pc, #52]	; (8007114 <PCU_Initialize+0x384>)
 80070e0:	f7fe fa92 	bl	8005608 <serialOut>
 80070e4:	e006      	b.n	80070f4 <PCU_Initialize+0x364>
    }else{        sprintf(tempBuffer,"     HI-MCU MCP2518FD REGISTER TEST (CAN3) : FAILED!"); serialOut(tempBuffer);
 80070e6:	490d      	ldr	r1, [pc, #52]	; (800711c <PCU_Initialize+0x38c>)
 80070e8:	480a      	ldr	r0, [pc, #40]	; (8007114 <PCU_Initialize+0x384>)
 80070ea:	f00d fad3 	bl	8014694 <siprintf>
 80070ee:	4809      	ldr	r0, [pc, #36]	; (8007114 <PCU_Initialize+0x384>)
 80070f0:	f7fe fa8a 	bl	8005608 <serialOut>
    }
    sprintf(tempBuffer," "); serialOut(tempBuffer);
 80070f4:	490a      	ldr	r1, [pc, #40]	; (8007120 <PCU_Initialize+0x390>)
 80070f6:	4807      	ldr	r0, [pc, #28]	; (8007114 <PCU_Initialize+0x384>)
 80070f8:	f00d facc 	bl	8014694 <siprintf>
 80070fc:	4805      	ldr	r0, [pc, #20]	; (8007114 <PCU_Initialize+0x384>)
 80070fe:	f7fe fa83 	bl	8005608 <serialOut>

  }
  appData.state = PC_STATE_INIT;
 8007102:	4b08      	ldr	r3, [pc, #32]	; (8007124 <PCU_Initialize+0x394>)
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	08017e64 	.word	0x08017e64
 8007114:	20000b64 	.word	0x20000b64
 8007118:	08017e9c 	.word	0x08017e9c
 800711c:	08017ecc 	.word	0x08017ecc
 8007120:	08017c90 	.word	0x08017c90
 8007124:	20000d30 	.word	0x20000d30

08007128 <PCU_Tasks>:

/***************************************************************************************************************
*     P C U _ T a s k s                                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void PCU_Tasks(void)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
  uint8_t index;
  uint8_t moduleId;
  uint8_t firstModuleIndex;
  uint32_t elapsedTicks;

  if(appData.state == PC_STATE_INIT){  // Application initialization
 800712e:	4ba7      	ldr	r3, [pc, #668]	; (80073cc <PCU_Tasks+0x2a4>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d11a      	bne.n	800716c <PCU_Tasks+0x44>

    DRV_CANFDSPI_Init(CAN1);  // VCU interface
 8007136:	2000      	movs	r0, #0
 8007138:	f000 fcf4 	bl	8007b24 <DRV_CANFDSPI_Init>
    DRV_CANFDSPI_Init(CAN2);  // Module Controller interface
 800713c:	2001      	movs	r0, #1
 800713e:	f000 fcf1 	bl	8007b24 <DRV_CANFDSPI_Init>

    MCU_IsolateAllModules();
 8007142:	f001 fdcd 	bl	8008ce0 <MCU_IsolateAllModules>
    MCU_DeRegisterAllModules();
 8007146:	f001 fd77 	bl	8008c38 <MCU_DeRegisterAllModules>

    pack.vcuRequestedState = packOff;
 800714a:	4ba1      	ldr	r3, [pc, #644]	; (80073d0 <PCU_Tasks+0x2a8>)
 800714c:	2200      	movs	r2, #0
 800714e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


   // set up a reference time
    pack.vcuLastContact.overflows = etTimerOverflows;
 8007152:	4ba0      	ldr	r3, [pc, #640]	; (80073d4 <PCU_Tasks+0x2ac>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a9e      	ldr	r2, [pc, #632]	; (80073d0 <PCU_Tasks+0x2a8>)
 8007158:	6493      	str	r3, [r2, #72]	; 0x48
    pack.vcuLastContact.ticks = htim1.Instance->CNT;
 800715a:	4b9f      	ldr	r3, [pc, #636]	; (80073d8 <PCU_Tasks+0x2b0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	4a9b      	ldr	r2, [pc, #620]	; (80073d0 <PCU_Tasks+0x2a8>)
 8007162:	6453      	str	r3, [r2, #68]	; 0x44

    appData.state = PC_STATE_RUN;
 8007164:	4b99      	ldr	r3, [pc, #612]	; (80073cc <PCU_Tasks+0x2a4>)
 8007166:	2201      	movs	r2, #1
 8007168:	701a      	strb	r2, [r3, #0]
 800716a:	e126      	b.n	80073ba <PCU_Tasks+0x292>

  }else if (appData.state == PC_STATE_RUN){
 800716c:	4b97      	ldr	r3, [pc, #604]	; (80073cc <PCU_Tasks+0x2a4>)
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b01      	cmp	r3, #1
 8007172:	f040 8122 	bne.w	80073ba <PCU_Tasks+0x292>

    //Check for CAN2 RX Interrupt (module controller)
    if(can1RxInterrupt)
 8007176:	4b99      	ldr	r3, [pc, #612]	; (80073dc <PCU_Tasks+0x2b4>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <PCU_Tasks+0x5a>
      VCU_ReceiveMessages();
 800717e:	f004 f983 	bl	800b488 <VCU_ReceiveMessages>

    //Check for CAN1 RX Interrupt (VCU)
    if(can2RxInterrupt)
 8007182:	4b97      	ldr	r3, [pc, #604]	; (80073e0 <PCU_Tasks+0x2b8>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <PCU_Tasks+0x66>
      MCU_ReceiveMessages();
 800718a:	f001 fa69 	bl	8008660 <MCU_ReceiveMessages>

    //Check for expired last contact from VCU
    elapsedTicks = VCU_TicksSinceLastMessage();
 800718e:	f004 fe29 	bl	800bde4 <VCU_TicksSinceLastMessage>
 8007192:	60b8      	str	r0, [r7, #8]
    if(elapsedTicks > VCU_ET_TIMEOUT){
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800719a:	d920      	bls.n	80071de <PCU_Tasks+0xb6>
      if ((pack.state == packOn) || (pack.state == packStandby) || (pack.state == packPrecharge)){
 800719c:	4b8c      	ldr	r3, [pc, #560]	; (80073d0 <PCU_Tasks+0x2a8>)
 800719e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d009      	beq.n	80071ba <PCU_Tasks+0x92>
 80071a6:	4b8a      	ldr	r3, [pc, #552]	; (80073d0 <PCU_Tasks+0x2a8>)
 80071a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d004      	beq.n	80071ba <PCU_Tasks+0x92>
 80071b0:	4b87      	ldr	r3, [pc, #540]	; (80073d0 <PCU_Tasks+0x2a8>)
 80071b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d130      	bne.n	800721c <PCU_Tasks+0xf4>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU ERROR - LOST CONTACT TIMEOUT!"); serialOut(tempBuffer);}
 80071ba:	4b8a      	ldr	r3, [pc, #552]	; (80073e4 <PCU_Tasks+0x2bc>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 0304 	and.w	r3, r3, #4
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d006      	beq.n	80071d4 <PCU_Tasks+0xac>
 80071c6:	4988      	ldr	r1, [pc, #544]	; (80073e8 <PCU_Tasks+0x2c0>)
 80071c8:	4888      	ldr	r0, [pc, #544]	; (80073ec <PCU_Tasks+0x2c4>)
 80071ca:	f00d fa63 	bl	8014694 <siprintf>
 80071ce:	4887      	ldr	r0, [pc, #540]	; (80073ec <PCU_Tasks+0x2c4>)
 80071d0:	f7fe fa1a 	bl	8005608 <serialOut>
        pack.vcuRequestedState = packOff;
 80071d4:	4b7e      	ldr	r3, [pc, #504]	; (80073d0 <PCU_Tasks+0x2a8>)
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071dc:	e01e      	b.n	800721c <PCU_Tasks+0xf4>
      }
    }else if(elapsedTicks > VCU_ET_WARNING){
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80071e4:	d91a      	bls.n	800721c <PCU_Tasks+0xf4>
      if ((pack.state == packOn) || (pack.state == packPrecharge)){
 80071e6:	4b7a      	ldr	r3, [pc, #488]	; (80073d0 <PCU_Tasks+0x2a8>)
 80071e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071ec:	2b03      	cmp	r3, #3
 80071ee:	d004      	beq.n	80071fa <PCU_Tasks+0xd2>
 80071f0:	4b77      	ldr	r3, [pc, #476]	; (80073d0 <PCU_Tasks+0x2a8>)
 80071f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d110      	bne.n	800721c <PCU_Tasks+0xf4>
        if(debugLevel & (DBG_VCU)){ sprintf(tempBuffer,"VCU WARNING - LOST CONTACT WARNING!"); serialOut(tempBuffer);}
 80071fa:	4b7a      	ldr	r3, [pc, #488]	; (80073e4 <PCU_Tasks+0x2bc>)
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	f003 0304 	and.w	r3, r3, #4
 8007202:	2b00      	cmp	r3, #0
 8007204:	d006      	beq.n	8007214 <PCU_Tasks+0xec>
 8007206:	497a      	ldr	r1, [pc, #488]	; (80073f0 <PCU_Tasks+0x2c8>)
 8007208:	4878      	ldr	r0, [pc, #480]	; (80073ec <PCU_Tasks+0x2c4>)
 800720a:	f00d fa43 	bl	8014694 <siprintf>
 800720e:	4877      	ldr	r0, [pc, #476]	; (80073ec <PCU_Tasks+0x2c4>)
 8007210:	f7fe f9fa 	bl	8005608 <serialOut>
        pack.vcuRequestedState = packStandby;
 8007214:	4b6e      	ldr	r3, [pc, #440]	; (80073d0 <PCU_Tasks+0x2a8>)
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
    }

    //Check for expired last contact from module
    for (index =0;index < pack.moduleCount;index++){
 800721c:	2300      	movs	r3, #0
 800721e:	73fb      	strb	r3, [r7, #15]
 8007220:	e0c5      	b.n	80073ae <PCU_Tasks+0x286>
      elapsedTicks = MCU_TicksSinceLastMessage(module[index].moduleId);
 8007222:	7bfb      	ldrb	r3, [r7, #15]
 8007224:	4a73      	ldr	r2, [pc, #460]	; (80073f4 <PCU_Tasks+0x2cc>)
 8007226:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800722a:	fb01 f303 	mul.w	r3, r1, r3
 800722e:	4413      	add	r3, r2
 8007230:	3308      	adds	r3, #8
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	4618      	mov	r0, r3
 8007236:	f003 fad3 	bl	800a7e0 <MCU_TicksSinceLastMessage>
 800723a:	60b8      	str	r0, [r7, #8]
      if(elapsedTicks > MCU_ET_TIMEOUT && (module[index].statusPending == true)){
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8007242:	d95d      	bls.n	8007300 <PCU_Tasks+0x1d8>
 8007244:	7bfb      	ldrb	r3, [r7, #15]
 8007246:	4a6b      	ldr	r2, [pc, #428]	; (80073f4 <PCU_Tasks+0x2cc>)
 8007248:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800724c:	fb01 f303 	mul.w	r3, r1, r3
 8007250:	4413      	add	r3, r2
 8007252:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d051      	beq.n	8007300 <PCU_Tasks+0x1d8>
        if( module[index].faultCode.commsError == false){
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	4a65      	ldr	r2, [pc, #404]	; (80073f4 <PCU_Tasks+0x2cc>)
 8007260:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	4413      	add	r3, r2
 800726a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800726e:	789b      	ldrb	r3, [r3, #2]
 8007270:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b00      	cmp	r3, #0
 8007278:	f040 8096 	bne.w	80073a8 <PCU_Tasks+0x280>
          // Isolate Module
          if((debugLevel & ( DBG_MCU + DBG_ERRORS)) == ( DBG_MCU + DBG_ERRORS) ){ sprintf(tempBuffer,"MCU ERROR - Module timeout ID=%02x",module[index].moduleId ); serialOut(tempBuffer);}
 800727c:	4b59      	ldr	r3, [pc, #356]	; (80073e4 <PCU_Tasks+0x2bc>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f003 0303 	and.w	r3, r3, #3
 8007284:	2b03      	cmp	r3, #3
 8007286:	d110      	bne.n	80072aa <PCU_Tasks+0x182>
 8007288:	7bfb      	ldrb	r3, [r7, #15]
 800728a:	4a5a      	ldr	r2, [pc, #360]	; (80073f4 <PCU_Tasks+0x2cc>)
 800728c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	4413      	add	r3, r2
 8007296:	3308      	adds	r3, #8
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	4956      	ldr	r1, [pc, #344]	; (80073f8 <PCU_Tasks+0x2d0>)
 800729e:	4853      	ldr	r0, [pc, #332]	; (80073ec <PCU_Tasks+0x2c4>)
 80072a0:	f00d f9f8 	bl	8014694 <siprintf>
 80072a4:	4851      	ldr	r0, [pc, #324]	; (80073ec <PCU_Tasks+0x2c4>)
 80072a6:	f7fe f9af 	bl	8005608 <serialOut>
          if (pack.vcuRequestedState == packPrecharge && module[index].currentState == moduleOn){
 80072aa:	4b49      	ldr	r3, [pc, #292]	; (80073d0 <PCU_Tasks+0x2a8>)
 80072ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d10d      	bne.n	80072d0 <PCU_Tasks+0x1a8>
 80072b4:	7bfb      	ldrb	r3, [r7, #15]
 80072b6:	4a4f      	ldr	r2, [pc, #316]	; (80073f4 <PCU_Tasks+0x2cc>)
 80072b8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80072bc:	fb01 f303 	mul.w	r3, r1, r3
 80072c0:	4413      	add	r3, r2
 80072c2:	3327      	adds	r3, #39	; 0x27
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d102      	bne.n	80072d0 <PCU_Tasks+0x1a8>
            // This was the first module on and its faulted - select another!
            pack.powerStatus.powerStage = stageSelectModule;
 80072ca:	4b41      	ldr	r3, [pc, #260]	; (80073d0 <PCU_Tasks+0x2a8>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	769a      	strb	r2, [r3, #26]
          }
          // turn off the faulted module and flag the fault
          module[index].nextState = moduleOff;
 80072d0:	7bfb      	ldrb	r3, [r7, #15]
 80072d2:	4a48      	ldr	r2, [pc, #288]	; (80073f4 <PCU_Tasks+0x2cc>)
 80072d4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80072d8:	fb01 f303 	mul.w	r3, r1, r3
 80072dc:	4413      	add	r3, r2
 80072de:	3328      	adds	r3, #40	; 0x28
 80072e0:	2200      	movs	r2, #0
 80072e2:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.commsError = true;
 80072e4:	7bfb      	ldrb	r3, [r7, #15]
 80072e6:	4a43      	ldr	r2, [pc, #268]	; (80073f4 <PCU_Tasks+0x2cc>)
 80072e8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80072ec:	fb01 f303 	mul.w	r3, r1, r3
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80072f6:	7893      	ldrb	r3, [r2, #2]
 80072f8:	f043 0301 	orr.w	r3, r3, #1
 80072fc:	7093      	strb	r3, [r2, #2]
        if( module[index].faultCode.commsError == false){
 80072fe:	e053      	b.n	80073a8 <PCU_Tasks+0x280>
        }
      }else if(elapsedTicks > MCU_STATUS_INTERVAL && (module[index].statusPending == false)){
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007306:	d933      	bls.n	8007370 <PCU_Tasks+0x248>
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	4a3a      	ldr	r2, [pc, #232]	; (80073f4 <PCU_Tasks+0x2cc>)
 800730c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	4413      	add	r3, r2
 8007316:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	f083 0301 	eor.w	r3, r3, #1
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d024      	beq.n	8007370 <PCU_Tasks+0x248>
        // Send State
        MCU_RequestModuleStatus(module[index].moduleId);
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	4a32      	ldr	r2, [pc, #200]	; (80073f4 <PCU_Tasks+0x2cc>)
 800732a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800732e:	fb01 f303 	mul.w	r3, r1, r3
 8007332:	4413      	add	r3, r2
 8007334:	3308      	adds	r3, #8
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f002 f8ff 	bl	800953c <MCU_RequestModuleStatus>
        // Have we received the hardware info? This should have been sent at registration
        if(module[index].hardwarePending)
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	4a2c      	ldr	r2, [pc, #176]	; (80073f4 <PCU_Tasks+0x2cc>)
 8007342:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007346:	fb01 f303 	mul.w	r3, r1, r3
 800734a:	4413      	add	r3, r2
 800734c:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d028      	beq.n	80073a8 <PCU_Tasks+0x280>
          // Not received, so lets request it
          MCU_RequestHardware(module[index].moduleId);
 8007356:	7bfb      	ldrb	r3, [r7, #15]
 8007358:	4a26      	ldr	r2, [pc, #152]	; (80073f4 <PCU_Tasks+0x2cc>)
 800735a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800735e:	fb01 f303 	mul.w	r3, r1, r3
 8007362:	4413      	add	r3, r2
 8007364:	3308      	adds	r3, #8
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fd8d 	bl	8008e88 <MCU_RequestHardware>
        if(module[index].hardwarePending)
 800736e:	e01b      	b.n	80073a8 <PCU_Tasks+0x280>
      }else{
        // timers have not been exceeded
        if(module[index].faultCode.commsError == true){
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	4a20      	ldr	r2, [pc, #128]	; (80073f4 <PCU_Tasks+0x2cc>)
 8007374:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007378:	fb01 f303 	mul.w	r3, r1, r3
 800737c:	4413      	add	r3, r2
 800737e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007382:	789b      	ldrb	r3, [r3, #2]
 8007384:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b01      	cmp	r3, #1
 800738c:	d10c      	bne.n	80073a8 <PCU_Tasks+0x280>
          // if the module was in fault, bring it back online
          module[index].faultCode.commsError  = false;
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	4a18      	ldr	r2, [pc, #96]	; (80073f4 <PCU_Tasks+0x2cc>)
 8007392:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007396:	fb01 f303 	mul.w	r3, r1, r3
 800739a:	4413      	add	r3, r2
 800739c:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80073a0:	7893      	ldrb	r3, [r2, #2]
 80073a2:	f36f 0300 	bfc	r3, #0, #1
 80073a6:	7093      	strb	r3, [r2, #2]
    for (index =0;index < pack.moduleCount;index++){
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	3301      	adds	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
 80073ae:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <PCU_Tasks+0x2a8>)
 80073b0:	7d1b      	ldrb	r3, [r3, #20]
 80073b2:	7bfa      	ldrb	r2, [r7, #15]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	f4ff af34 	bcc.w	8007222 <PCU_Tasks+0xfa>
        }
      }
    }
  }

  if (pack.controlMode == dmcMode){
 80073ba:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <PCU_Tasks+0x2a8>)
 80073bc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	f040 80e4 	bne.w	800758e <PCU_Tasks+0x466>
   // DIRECT MODULE CONTROL MODE
   // Command the modules
    for (index =0;index < pack.moduleCount;index++){
 80073c6:	2300      	movs	r3, #0
 80073c8:	73fb      	strb	r3, [r7, #15]
 80073ca:	e0c7      	b.n	800755c <PCU_Tasks+0x434>
 80073cc:	20000d30 	.word	0x20000d30
 80073d0:	2000a66c 	.word	0x2000a66c
 80073d4:	20000d28 	.word	0x20000d28
 80073d8:	200005d8 	.word	0x200005d8
 80073dc:	20000d26 	.word	0x20000d26
 80073e0:	20000d24 	.word	0x20000d24
 80073e4:	2000000c 	.word	0x2000000c
 80073e8:	08017f04 	.word	0x08017f04
 80073ec:	20000b64 	.word	0x20000b64
 80073f0:	08017f28 	.word	0x08017f28
 80073f4:	20000dec 	.word	0x20000dec
 80073f8:	08017f4c 	.word	0x08017f4c
      // Handle the  over current condition
      if(module[index].faultCode.overCurrent == true){
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	4ab3      	ldr	r2, [pc, #716]	; (80076cc <PCU_Tasks+0x5a4>)
 8007400:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	4413      	add	r3, r2
 800740a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800740e:	789b      	ldrb	r3, [r3, #2]
 8007410:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007414:	b2db      	uxtb	r3, r3
 8007416:	2b01      	cmp	r3, #1
 8007418:	d123      	bne.n	8007462 <PCU_Tasks+0x33a>
        if (module[index].currentState != moduleOff){
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	4aab      	ldr	r2, [pc, #684]	; (80076cc <PCU_Tasks+0x5a4>)
 800741e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007422:	fb01 f303 	mul.w	r3, r1, r3
 8007426:	4413      	add	r3, r2
 8007428:	3327      	adds	r3, #39	; 0x27
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8092 	beq.w	8007556 <PCU_Tasks+0x42e>
          // Turn off the module
          module[index].nextState = moduleOff;
 8007432:	7bfb      	ldrb	r3, [r7, #15]
 8007434:	4aa5      	ldr	r2, [pc, #660]	; (80076cc <PCU_Tasks+0x5a4>)
 8007436:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800743a:	fb01 f303 	mul.w	r3, r1, r3
 800743e:	4413      	add	r3, r2
 8007440:	3328      	adds	r3, #40	; 0x28
 8007442:	2200      	movs	r2, #0
 8007444:	701a      	strb	r2, [r3, #0]
          // clear the over current flag
          module[index].faultCode.overCurrent = false;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	4aa0      	ldr	r2, [pc, #640]	; (80076cc <PCU_Tasks+0x5a4>)
 800744a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	4413      	add	r3, r2
 8007454:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8007458:	7893      	ldrb	r3, [r2, #2]
 800745a:	f36f 0382 	bfc	r3, #2, #1
 800745e:	7093      	strb	r3, [r2, #2]
 8007460:	e079      	b.n	8007556 <PCU_Tasks+0x42e>
        }
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	4a99      	ldr	r2, [pc, #612]	; (80076cc <PCU_Tasks+0x5a4>)
 8007466:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800746a:	fb01 f303 	mul.w	r3, r1, r3
 800746e:	4413      	add	r3, r2
 8007470:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007474:	789b      	ldrb	r3, [r3, #2]
 8007476:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	d16a      	bne.n	8007556 <PCU_Tasks+0x42e>
 8007480:	7bfb      	ldrb	r3, [r7, #15]
 8007482:	4a92      	ldr	r2, [pc, #584]	; (80076cc <PCU_Tasks+0x5a4>)
 8007484:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007488:	fb01 f303 	mul.w	r3, r1, r3
 800748c:	4413      	add	r3, r2
 800748e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007492:	789b      	ldrb	r3, [r3, #2]
 8007494:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d15b      	bne.n	8007556 <PCU_Tasks+0x42e>
        // No faults - have we already commanded the module?
        if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	4a8a      	ldr	r2, [pc, #552]	; (80076cc <PCU_Tasks+0x5a4>)
 80074a2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80074a6:	fb01 f303 	mul.w	r3, r1, r3
 80074aa:	4413      	add	r3, r2
 80074ac:	332a      	adds	r3, #42	; 0x2a
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d13a      	bne.n	800752a <PCU_Tasks+0x402>
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4a85      	ldr	r2, [pc, #532]	; (80076cc <PCU_Tasks+0x5a4>)
 80074b8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80074bc:	fb01 f303 	mul.w	r3, r1, r3
 80074c0:	4413      	add	r3, r2
 80074c2:	3329      	adds	r3, #41	; 0x29
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	4980      	ldr	r1, [pc, #512]	; (80076cc <PCU_Tasks+0x5a4>)
 80074ca:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80074ce:	fb00 f303 	mul.w	r3, r0, r3
 80074d2:	440b      	add	r3, r1
 80074d4:	3328      	adds	r3, #40	; 0x28
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d126      	bne.n	800752a <PCU_Tasks+0x402>
          // module has been commanded, allow some delay before re-issuing the command
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	4a7b      	ldr	r2, [pc, #492]	; (80076cc <PCU_Tasks+0x5a4>)
 80074e0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80074e4:	fb01 f303 	mul.w	r3, r1, r3
 80074e8:	4413      	add	r3, r2
 80074ea:	3308      	adds	r3, #8
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f003 f9ee 	bl	800a8d0 <MCU_TicksSinceLastStateTx>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074fa:	d92c      	bls.n	8007556 <PCU_Tasks+0x42e>
            // Command the module
            MCU_TransmitState(module[index].moduleId,module[index].nextState);
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	4a73      	ldr	r2, [pc, #460]	; (80076cc <PCU_Tasks+0x5a4>)
 8007500:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007504:	fb01 f303 	mul.w	r3, r1, r3
 8007508:	4413      	add	r3, r2
 800750a:	3308      	adds	r3, #8
 800750c:	781a      	ldrb	r2, [r3, #0]
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	496e      	ldr	r1, [pc, #440]	; (80076cc <PCU_Tasks+0x5a4>)
 8007512:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007516:	fb00 f303 	mul.w	r3, r0, r3
 800751a:	440b      	add	r3, r1
 800751c:	3328      	adds	r3, #40	; 0x28
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f002 fed8 	bl	800a2d8 <MCU_TransmitState>
          if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007528:	e015      	b.n	8007556 <PCU_Tasks+0x42e>
          }
        }else {
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 800752a:	7bfb      	ldrb	r3, [r7, #15]
 800752c:	4a67      	ldr	r2, [pc, #412]	; (80076cc <PCU_Tasks+0x5a4>)
 800752e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007532:	fb01 f303 	mul.w	r3, r1, r3
 8007536:	4413      	add	r3, r2
 8007538:	3308      	adds	r3, #8
 800753a:	781a      	ldrb	r2, [r3, #0]
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	4963      	ldr	r1, [pc, #396]	; (80076cc <PCU_Tasks+0x5a4>)
 8007540:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007544:	fb00 f303 	mul.w	r3, r0, r3
 8007548:	440b      	add	r3, r1
 800754a:	3328      	adds	r3, #40	; 0x28
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f002 fec1 	bl	800a2d8 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	3301      	adds	r3, #1
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	4b5c      	ldr	r3, [pc, #368]	; (80076d0 <PCU_Tasks+0x5a8>)
 800755e:	7d1b      	ldrb	r3, [r3, #20]
 8007560:	7bfa      	ldrb	r2, [r7, #15]
 8007562:	429a      	cmp	r2, r3
 8007564:	f4ff af4a 	bcc.w	80073fc <PCU_Tasks+0x2d4>
        }
      }
    }
    // This should fire every 500ms
    if(sendState > 0){
 8007568:	4b5a      	ldr	r3, [pc, #360]	; (80076d4 <PCU_Tasks+0x5ac>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 82cc 	beq.w	8007b0a <PCU_Tasks+0x9e2>
      // Send Module Data to VCU for module of interest
      VCU_TransmitModuleState();
 8007572:	f005 fb0b 	bl	800cb8c <VCU_TransmitModuleState>
      VCU_TransmitModulePower();
 8007576:	f005 fc23 	bl	800cdc0 <VCU_TransmitModulePower>
      VCU_TransmitModuleCellVoltage();
 800757a:	f005 fcad 	bl	800ced8 <VCU_TransmitModuleCellVoltage>
      VCU_TransmitModuleCellTemp();
 800757e:	f005 fd3f 	bl	800d000 <VCU_TransmitModuleCellTemp>
      VCU_TransmitModuleLimits();
 8007582:	f005 fdd1 	bl	800d128 <VCU_TransmitModuleLimits>
       *
       * VCU_TransmitModuleCellId();
       * VCU_TransmitModuleList();
       *
       */
      sendState = 0;
 8007586:	4b53      	ldr	r3, [pc, #332]	; (80076d4 <PCU_Tasks+0x5ac>)
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
      VCU_TransmitBmsData9();
      VCU_TransmitBmsData10();
      sendState=0;
    }
  }
}
 800758c:	e2bd      	b.n	8007b0a <PCU_Tasks+0x9e2>
  } else if(pack.controlMode == packMode){
 800758e:	4b50      	ldr	r3, [pc, #320]	; (80076d0 <PCU_Tasks+0x5a8>)
 8007590:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007594:	2b00      	cmp	r3, #0
 8007596:	f040 82b8 	bne.w	8007b0a <PCU_Tasks+0x9e2>
    if(pack.vcuRequestedState == packOn || pack.vcuRequestedState == packPrecharge){
 800759a:	4b4d      	ldr	r3, [pc, #308]	; (80076d0 <PCU_Tasks+0x5a8>)
 800759c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d005      	beq.n	80075b0 <PCU_Tasks+0x488>
 80075a4:	4b4a      	ldr	r3, [pc, #296]	; (80076d0 <PCU_Tasks+0x5a8>)
 80075a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	f040 813c 	bne.w	8007828 <PCU_Tasks+0x700>
      if(pack.powerStatus.powerStage == stageSelectModule){
 80075b0:	4b47      	ldr	r3, [pc, #284]	; (80076d0 <PCU_Tasks+0x5a8>)
 80075b2:	7e9b      	ldrb	r3, [r3, #26]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 80a1 	bne.w	80076fc <PCU_Tasks+0x5d4>
        if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU INFO - Selecting module with highest voltage"); serialOut(tempBuffer);}
 80075ba:	4b47      	ldr	r3, [pc, #284]	; (80076d8 <PCU_Tasks+0x5b0>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 030a 	and.w	r3, r3, #10
 80075c2:	2b0a      	cmp	r3, #10
 80075c4:	d115      	bne.n	80075f2 <PCU_Tasks+0x4ca>
 80075c6:	4b42      	ldr	r3, [pc, #264]	; (80076d0 <PCU_Tasks+0x5a8>)
 80075c8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80075cc:	4a43      	ldr	r2, [pc, #268]	; (80076dc <PCU_Tasks+0x5b4>)
 80075ce:	fba2 1203 	umull	r1, r2, r2, r3
 80075d2:	0b12      	lsrs	r2, r2, #12
 80075d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80075d8:	fb01 f202 	mul.w	r2, r1, r2
 80075dc:	1a9b      	subs	r3, r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d106      	bne.n	80075f2 <PCU_Tasks+0x4ca>
 80075e4:	493e      	ldr	r1, [pc, #248]	; (80076e0 <PCU_Tasks+0x5b8>)
 80075e6:	483f      	ldr	r0, [pc, #252]	; (80076e4 <PCU_Tasks+0x5bc>)
 80075e8:	f00d f854 	bl	8014694 <siprintf>
 80075ec:	483d      	ldr	r0, [pc, #244]	; (80076e4 <PCU_Tasks+0x5bc>)
 80075ee:	f7fe f80b 	bl	8005608 <serialOut>
        moduleId = MCU_FindMaxVoltageModule();
 80075f2:	f002 f83b 	bl	800966c <MCU_FindMaxVoltageModule>
 80075f6:	4603      	mov	r3, r0
 80075f8:	71fb      	strb	r3, [r7, #7]
        if (moduleId == 0){
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d12f      	bne.n	8007660 <PCU_Tasks+0x538>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0) ){ sprintf(tempBuffer,"MCU WARNING - all modules report 0V"); serialOut(tempBuffer);}
 8007600:	4b35      	ldr	r3, [pc, #212]	; (80076d8 <PCU_Tasks+0x5b0>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	2b03      	cmp	r3, #3
 800760a:	d115      	bne.n	8007638 <PCU_Tasks+0x510>
 800760c:	4b30      	ldr	r3, [pc, #192]	; (80076d0 <PCU_Tasks+0x5a8>)
 800760e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8007612:	4a32      	ldr	r2, [pc, #200]	; (80076dc <PCU_Tasks+0x5b4>)
 8007614:	fba2 1203 	umull	r1, r2, r2, r3
 8007618:	0b12      	lsrs	r2, r2, #12
 800761a:	f241 3188 	movw	r1, #5000	; 0x1388
 800761e:	fb01 f202 	mul.w	r2, r1, r2
 8007622:	1a9b      	subs	r3, r3, r2
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <PCU_Tasks+0x510>
 800762a:	492f      	ldr	r1, [pc, #188]	; (80076e8 <PCU_Tasks+0x5c0>)
 800762c:	482d      	ldr	r0, [pc, #180]	; (80076e4 <PCU_Tasks+0x5bc>)
 800762e:	f00d f831 	bl	8014694 <siprintf>
 8007632:	482c      	ldr	r0, [pc, #176]	; (80076e4 <PCU_Tasks+0x5bc>)
 8007634:	f7fd ffe8 	bl	8005608 <serialOut>
          pack.errorCounts.firstModule ++;
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <PCU_Tasks+0x5a8>)
 800763a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800763e:	3301      	adds	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	4b23      	ldr	r3, [pc, #140]	; (80076d0 <PCU_Tasks+0x5a8>)
 8007644:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 8007648:	4b21      	ldr	r3, [pc, #132]	; (80076d0 <PCU_Tasks+0x5a8>)
 800764a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800764e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8007652:	4293      	cmp	r3, r2
 8007654:	d952      	bls.n	80076fc <PCU_Tasks+0x5d4>
 8007656:	4b1e      	ldr	r3, [pc, #120]	; (80076d0 <PCU_Tasks+0x5a8>)
 8007658:	2200      	movs	r2, #0
 800765a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800765e:	e04d      	b.n	80076fc <PCU_Tasks+0x5d4>
        }else if (moduleId == pack.moduleCount +1 ){
 8007660:	79fa      	ldrb	r2, [r7, #7]
 8007662:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <PCU_Tasks+0x5a8>)
 8007664:	7d1b      	ldrb	r3, [r3, #20]
 8007666:	3301      	adds	r3, #1
 8007668:	429a      	cmp	r2, r3
 800766a:	d141      	bne.n	80076f0 <PCU_Tasks+0x5c8>
          if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS) && ((pack.errorCounts.firstModule % 5000) == 0)){ sprintf(tempBuffer,"MCU WARNING - no modules available"); serialOut(tempBuffer);}
 800766c:	4b1a      	ldr	r3, [pc, #104]	; (80076d8 <PCU_Tasks+0x5b0>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	f003 0303 	and.w	r3, r3, #3
 8007674:	2b03      	cmp	r3, #3
 8007676:	d115      	bne.n	80076a4 <PCU_Tasks+0x57c>
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <PCU_Tasks+0x5a8>)
 800767a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800767e:	4a17      	ldr	r2, [pc, #92]	; (80076dc <PCU_Tasks+0x5b4>)
 8007680:	fba2 1203 	umull	r1, r2, r2, r3
 8007684:	0b12      	lsrs	r2, r2, #12
 8007686:	f241 3188 	movw	r1, #5000	; 0x1388
 800768a:	fb01 f202 	mul.w	r2, r1, r2
 800768e:	1a9b      	subs	r3, r3, r2
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d106      	bne.n	80076a4 <PCU_Tasks+0x57c>
 8007696:	4915      	ldr	r1, [pc, #84]	; (80076ec <PCU_Tasks+0x5c4>)
 8007698:	4812      	ldr	r0, [pc, #72]	; (80076e4 <PCU_Tasks+0x5bc>)
 800769a:	f00c fffb 	bl	8014694 <siprintf>
 800769e:	4811      	ldr	r0, [pc, #68]	; (80076e4 <PCU_Tasks+0x5bc>)
 80076a0:	f7fd ffb2 	bl	8005608 <serialOut>
          pack.errorCounts.firstModule ++;
 80076a4:	4b0a      	ldr	r3, [pc, #40]	; (80076d0 <PCU_Tasks+0x5a8>)
 80076a6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80076aa:	3301      	adds	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <PCU_Tasks+0x5a8>)
 80076b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          if (pack.errorCounts.firstModule > 64999) pack.errorCounts.firstModule = 0;
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <PCU_Tasks+0x5a8>)
 80076b6:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 80076ba:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 80076be:	4293      	cmp	r3, r2
 80076c0:	d91c      	bls.n	80076fc <PCU_Tasks+0x5d4>
 80076c2:	4b03      	ldr	r3, [pc, #12]	; (80076d0 <PCU_Tasks+0x5a8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 80076ca:	e017      	b.n	80076fc <PCU_Tasks+0x5d4>
 80076cc:	20000dec 	.word	0x20000dec
 80076d0:	2000a66c 	.word	0x2000a66c
 80076d4:	20000d2e 	.word	0x20000d2e
 80076d8:	2000000c 	.word	0x2000000c
 80076dc:	d1b71759 	.word	0xd1b71759
 80076e0:	08017f70 	.word	0x08017f70
 80076e4:	20000b64 	.word	0x20000b64
 80076e8:	08017fa4 	.word	0x08017fa4
 80076ec:	08017fc8 	.word	0x08017fc8
          pack.powerStatus.firstModuleId = moduleId;
 80076f0:	4ab6      	ldr	r2, [pc, #728]	; (80079cc <PCU_Tasks+0x8a4>)
 80076f2:	79fb      	ldrb	r3, [r7, #7]
 80076f4:	7653      	strb	r3, [r2, #25]
          pack.powerStatus.powerStage = stagePowerOnModule;
 80076f6:	4bb5      	ldr	r3, [pc, #724]	; (80079cc <PCU_Tasks+0x8a4>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	769a      	strb	r2, [r3, #26]
      if(pack.powerStatus.powerStage == stagePowerOnModule){
 80076fc:	4bb3      	ldr	r3, [pc, #716]	; (80079cc <PCU_Tasks+0x8a4>)
 80076fe:	7e9b      	ldrb	r3, [r3, #26]
 8007700:	2b01      	cmp	r3, #1
 8007702:	f040 8091 	bne.w	8007828 <PCU_Tasks+0x700>
        firstModuleIndex = MCU_ModuleIndexFromId(pack.powerStatus.firstModuleId);
 8007706:	4bb1      	ldr	r3, [pc, #708]	; (80079cc <PCU_Tasks+0x8a4>)
 8007708:	7e5b      	ldrb	r3, [r3, #25]
 800770a:	4618      	mov	r0, r3
 800770c:	f003 f834 	bl	800a778 <MCU_ModuleIndexFromId>
 8007710:	4603      	mov	r3, r0
 8007712:	73bb      	strb	r3, [r7, #14]
        if (firstModuleIndex != pack.moduleCount){
 8007714:	4bad      	ldr	r3, [pc, #692]	; (80079cc <PCU_Tasks+0x8a4>)
 8007716:	7d1b      	ldrb	r3, [r3, #20]
 8007718:	7bba      	ldrb	r2, [r7, #14]
 800771a:	429a      	cmp	r2, r3
 800771c:	d077      	beq.n	800780e <PCU_Tasks+0x6e6>
          if(module[firstModuleIndex].faultCode.commsError == true || module[firstModuleIndex].faultCode.hwIncompatible == true){
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	4aab      	ldr	r2, [pc, #684]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007722:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007726:	fb01 f303 	mul.w	r3, r1, r3
 800772a:	4413      	add	r3, r2
 800772c:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007730:	789b      	ldrb	r3, [r3, #2]
 8007732:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	d00e      	beq.n	800775a <PCU_Tasks+0x632>
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	4aa4      	ldr	r2, [pc, #656]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007740:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007744:	fb01 f303 	mul.w	r3, r1, r3
 8007748:	4413      	add	r3, r2
 800774a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800774e:	789b      	ldrb	r3, [r3, #2]
 8007750:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d113      	bne.n	8007782 <PCU_Tasks+0x65a>
             pack.powerStatus.powerStage = stageSelectModule;
 800775a:	4b9c      	ldr	r3, [pc, #624]	; (80079cc <PCU_Tasks+0x8a4>)
 800775c:	2200      	movs	r2, #0
 800775e:	769a      	strb	r2, [r3, #26]
             if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Selected module %02x in fault - selecting another",pack.powerStatus.firstModuleId); serialOut(tempBuffer);}
 8007760:	4b9c      	ldr	r3, [pc, #624]	; (80079d4 <PCU_Tasks+0x8ac>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	f003 0303 	and.w	r3, r3, #3
 8007768:	2b03      	cmp	r3, #3
 800776a:	d15d      	bne.n	8007828 <PCU_Tasks+0x700>
 800776c:	4b97      	ldr	r3, [pc, #604]	; (80079cc <PCU_Tasks+0x8a4>)
 800776e:	7e5b      	ldrb	r3, [r3, #25]
 8007770:	461a      	mov	r2, r3
 8007772:	4999      	ldr	r1, [pc, #612]	; (80079d8 <PCU_Tasks+0x8b0>)
 8007774:	4899      	ldr	r0, [pc, #612]	; (80079dc <PCU_Tasks+0x8b4>)
 8007776:	f00c ff8d 	bl	8014694 <siprintf>
 800777a:	4898      	ldr	r0, [pc, #608]	; (80079dc <PCU_Tasks+0x8b4>)
 800777c:	f7fd ff44 	bl	8005608 <serialOut>
 8007780:	e052      	b.n	8007828 <PCU_Tasks+0x700>
          } else if (pack.vcuRequestedState == packOn){
 8007782:	4b92      	ldr	r3, [pc, #584]	; (80079cc <PCU_Tasks+0x8a4>)
 8007784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007788:	2b03      	cmp	r3, #3
 800778a:	d11d      	bne.n	80077c8 <PCU_Tasks+0x6a0>
            if (module[firstModuleIndex].currentState == moduleOn){
 800778c:	7bbb      	ldrb	r3, [r7, #14]
 800778e:	4a90      	ldr	r2, [pc, #576]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007790:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007794:	fb01 f303 	mul.w	r3, r1, r3
 8007798:	4413      	add	r3, r2
 800779a:	3327      	adds	r3, #39	; 0x27
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d107      	bne.n	80077b2 <PCU_Tasks+0x68a>
              pack.state = packOn;
 80077a2:	4b8a      	ldr	r3, [pc, #552]	; (80079cc <PCU_Tasks+0x8a4>)
 80077a4:	2203      	movs	r2, #3
 80077a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 80077aa:	4b88      	ldr	r3, [pc, #544]	; (80079cc <PCU_Tasks+0x8a4>)
 80077ac:	2202      	movs	r2, #2
 80077ae:	769a      	strb	r2, [r3, #26]
 80077b0:	e03a      	b.n	8007828 <PCU_Tasks+0x700>
                module[firstModuleIndex].nextState = moduleOn;
 80077b2:	7bbb      	ldrb	r3, [r7, #14]
 80077b4:	4a86      	ldr	r2, [pc, #536]	; (80079d0 <PCU_Tasks+0x8a8>)
 80077b6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077ba:	fb01 f303 	mul.w	r3, r1, r3
 80077be:	4413      	add	r3, r2
 80077c0:	3328      	adds	r3, #40	; 0x28
 80077c2:	2203      	movs	r2, #3
 80077c4:	701a      	strb	r2, [r3, #0]
 80077c6:	e02f      	b.n	8007828 <PCU_Tasks+0x700>
          } else if (pack.vcuRequestedState == packPrecharge){
 80077c8:	4b80      	ldr	r3, [pc, #512]	; (80079cc <PCU_Tasks+0x8a4>)
 80077ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d12a      	bne.n	8007828 <PCU_Tasks+0x700>
            if (module[firstModuleIndex].currentState == modulePrecharge){
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	4a7e      	ldr	r2, [pc, #504]	; (80079d0 <PCU_Tasks+0x8a8>)
 80077d6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80077da:	fb01 f303 	mul.w	r3, r1, r3
 80077de:	4413      	add	r3, r2
 80077e0:	3327      	adds	r3, #39	; 0x27
 80077e2:	781b      	ldrb	r3, [r3, #0]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d107      	bne.n	80077f8 <PCU_Tasks+0x6d0>
              pack.state = packPrecharge;
 80077e8:	4b78      	ldr	r3, [pc, #480]	; (80079cc <PCU_Tasks+0x8a4>)
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              pack.powerStatus.powerStage = stageIdle;
 80077f0:	4b76      	ldr	r3, [pc, #472]	; (80079cc <PCU_Tasks+0x8a4>)
 80077f2:	2202      	movs	r2, #2
 80077f4:	769a      	strb	r2, [r3, #26]
 80077f6:	e017      	b.n	8007828 <PCU_Tasks+0x700>
                module[firstModuleIndex].nextState = modulePrecharge;
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	4a75      	ldr	r2, [pc, #468]	; (80079d0 <PCU_Tasks+0x8a8>)
 80077fc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	4413      	add	r3, r2
 8007806:	3328      	adds	r3, #40	; 0x28
 8007808:	2202      	movs	r2, #2
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	e00c      	b.n	8007828 <PCU_Tasks+0x700>
           if((debugLevel & (DBG_MCU + DBG_ERRORS)) == (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module index not found!"); serialOut(tempBuffer);}
 800780e:	4b71      	ldr	r3, [pc, #452]	; (80079d4 <PCU_Tasks+0x8ac>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	f003 0303 	and.w	r3, r3, #3
 8007816:	2b03      	cmp	r3, #3
 8007818:	d106      	bne.n	8007828 <PCU_Tasks+0x700>
 800781a:	4971      	ldr	r1, [pc, #452]	; (80079e0 <PCU_Tasks+0x8b8>)
 800781c:	486f      	ldr	r0, [pc, #444]	; (80079dc <PCU_Tasks+0x8b4>)
 800781e:	f00c ff39 	bl	8014694 <siprintf>
 8007822:	486e      	ldr	r0, [pc, #440]	; (80079dc <PCU_Tasks+0x8b4>)
 8007824:	f7fd fef0 	bl	8005608 <serialOut>
    for (index =0;index < pack.moduleCount;index++){
 8007828:	2300      	movs	r3, #0
 800782a:	73fb      	strb	r3, [r7, #15]
 800782c:	e13a      	b.n	8007aa4 <PCU_Tasks+0x97c>
      if(module[index].faultCode.overCurrent == true){
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	4a67      	ldr	r2, [pc, #412]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007832:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007836:	fb01 f303 	mul.w	r3, r1, r3
 800783a:	4413      	add	r3, r2
 800783c:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007840:	789b      	ldrb	r3, [r3, #2]
 8007842:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b01      	cmp	r3, #1
 800784a:	d127      	bne.n	800789c <PCU_Tasks+0x774>
        if (pack.vcuRequestedState != packOff){
 800784c:	4b5f      	ldr	r3, [pc, #380]	; (80079cc <PCU_Tasks+0x8a4>)
 800784e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00a      	beq.n	800786c <PCU_Tasks+0x744>
          module[index].nextState = moduleStandby;
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	4a5d      	ldr	r2, [pc, #372]	; (80079d0 <PCU_Tasks+0x8a8>)
 800785a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	4413      	add	r3, r2
 8007864:	3328      	adds	r3, #40	; 0x28
 8007866:	2201      	movs	r2, #1
 8007868:	701a      	strb	r2, [r3, #0]
 800786a:	e0bc      	b.n	80079e6 <PCU_Tasks+0x8be>
          module[index].nextState = moduleOff;
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	4a58      	ldr	r2, [pc, #352]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007870:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007874:	fb01 f303 	mul.w	r3, r1, r3
 8007878:	4413      	add	r3, r2
 800787a:	3328      	adds	r3, #40	; 0x28
 800787c:	2200      	movs	r2, #0
 800787e:	701a      	strb	r2, [r3, #0]
          module[index].faultCode.overCurrent = false;
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	4a53      	ldr	r2, [pc, #332]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007884:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007888:	fb01 f303 	mul.w	r3, r1, r3
 800788c:	4413      	add	r3, r2
 800788e:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8007892:	7893      	ldrb	r3, [r2, #2]
 8007894:	f36f 0382 	bfc	r3, #2, #1
 8007898:	7093      	strb	r3, [r2, #2]
 800789a:	e0a4      	b.n	80079e6 <PCU_Tasks+0x8be>
      } else if (module[index].faultCode.commsError == false && module[index].faultCode.hwIncompatible == false ){
 800789c:	7bfb      	ldrb	r3, [r7, #15]
 800789e:	4a4c      	ldr	r2, [pc, #304]	; (80079d0 <PCU_Tasks+0x8a8>)
 80078a0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078a4:	fb01 f303 	mul.w	r3, r1, r3
 80078a8:	4413      	add	r3, r2
 80078aa:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80078ae:	789b      	ldrb	r3, [r3, #2]
 80078b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f040 8086 	bne.w	80079c8 <PCU_Tasks+0x8a0>
 80078bc:	7bfb      	ldrb	r3, [r7, #15]
 80078be:	4a44      	ldr	r2, [pc, #272]	; (80079d0 <PCU_Tasks+0x8a8>)
 80078c0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80078c4:	fb01 f303 	mul.w	r3, r1, r3
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80078ce:	789b      	ldrb	r3, [r3, #2]
 80078d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d176      	bne.n	80079c8 <PCU_Tasks+0x8a0>
        switch (pack.vcuRequestedState){
 80078da:	4b3c      	ldr	r3, [pc, #240]	; (80079cc <PCU_Tasks+0x8a4>)
 80078dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d87f      	bhi.n	80079e4 <PCU_Tasks+0x8bc>
 80078e4:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <PCU_Tasks+0x7c4>)
 80078e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ea:	bf00      	nop
 80078ec:	080079a3 	.word	0x080079a3
 80078f0:	0800797d 	.word	0x0800797d
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	080078fd 	.word	0x080078fd
            if(pack.state == packOn){
 80078fc:	4b33      	ldr	r3, [pc, #204]	; (80079cc <PCU_Tasks+0x8a4>)
 80078fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007902:	2b03      	cmp	r3, #3
 8007904:	d109      	bne.n	800791a <PCU_Tasks+0x7f2>
              module[index].nextState = moduleOn;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	4a31      	ldr	r2, [pc, #196]	; (80079d0 <PCU_Tasks+0x8a8>)
 800790a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	4413      	add	r3, r2
 8007914:	3328      	adds	r3, #40	; 0x28
 8007916:	2203      	movs	r2, #3
 8007918:	701a      	strb	r2, [r3, #0]
            if      (pack.soc < (PACK_EMPTY_SOC_THRESHOLD / PERCENTAGE_FACTOR )) { pack.status = packStatusEmpty; } // < 5% = Empty
 800791a:	4b2c      	ldr	r3, [pc, #176]	; (80079cc <PCU_Tasks+0x8a4>)
 800791c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007920:	2b09      	cmp	r3, #9
 8007922:	d804      	bhi.n	800792e <PCU_Tasks+0x806>
 8007924:	4b29      	ldr	r3, [pc, #164]	; (80079cc <PCU_Tasks+0x8a4>)
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 800792c:	e05b      	b.n	80079e6 <PCU_Tasks+0x8be>
            else if (pack.soc > (PACK_FULL_SOC_THRESHOLD  / PERCENTAGE_FACTOR )) { pack.status = packStatusFull;  } // > 95% = Full
 800792e:	4b27      	ldr	r3, [pc, #156]	; (80079cc <PCU_Tasks+0x8a4>)
 8007930:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007934:	2bbe      	cmp	r3, #190	; 0xbe
 8007936:	d904      	bls.n	8007942 <PCU_Tasks+0x81a>
 8007938:	4b24      	ldr	r3, [pc, #144]	; (80079cc <PCU_Tasks+0x8a4>)
 800793a:	2203      	movs	r2, #3
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 8007940:	e051      	b.n	80079e6 <PCU_Tasks+0x8be>
            else                                                                 { pack.status = packStatusNormal;} // 5% to 95% = Normal
 8007942:	4b22      	ldr	r3, [pc, #136]	; (80079cc <PCU_Tasks+0x8a4>)
 8007944:	2202      	movs	r2, #2
 8007946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 800794a:	e04c      	b.n	80079e6 <PCU_Tasks+0x8be>
            if (pack.state == packPrecharge && index != firstModuleIndex){
 800794c:	4b1f      	ldr	r3, [pc, #124]	; (80079cc <PCU_Tasks+0x8a4>)
 800794e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007952:	2b02      	cmp	r3, #2
 8007954:	d10d      	bne.n	8007972 <PCU_Tasks+0x84a>
 8007956:	7bfa      	ldrb	r2, [r7, #15]
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	429a      	cmp	r2, r3
 800795c:	d009      	beq.n	8007972 <PCU_Tasks+0x84a>
              module[index].nextState = moduleStandby;
 800795e:	7bfb      	ldrb	r3, [r7, #15]
 8007960:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007962:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007966:	fb01 f303 	mul.w	r3, r1, r3
 800796a:	4413      	add	r3, r2
 800796c:	3328      	adds	r3, #40	; 0x28
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
            pack.status = packStatusOff;
 8007972:	4b16      	ldr	r3, [pc, #88]	; (80079cc <PCU_Tasks+0x8a4>)
 8007974:	2200      	movs	r2, #0
 8007976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 800797a:	e034      	b.n	80079e6 <PCU_Tasks+0x8be>
            module[index].nextState = moduleStandby;
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	4a14      	ldr	r2, [pc, #80]	; (80079d0 <PCU_Tasks+0x8a8>)
 8007980:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	4413      	add	r3, r2
 800798a:	3328      	adds	r3, #40	; 0x28
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
            pack.state  = packStandby;
 8007990:	4b0e      	ldr	r3, [pc, #56]	; (80079cc <PCU_Tasks+0x8a4>)
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 8007998:	4b0c      	ldr	r3, [pc, #48]	; (80079cc <PCU_Tasks+0x8a4>)
 800799a:	2200      	movs	r2, #0
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80079a0:	e021      	b.n	80079e6 <PCU_Tasks+0x8be>
            module[index].nextState = moduleOff;
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	4a0a      	ldr	r2, [pc, #40]	; (80079d0 <PCU_Tasks+0x8a8>)
 80079a6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079aa:	fb01 f303 	mul.w	r3, r1, r3
 80079ae:	4413      	add	r3, r2
 80079b0:	3328      	adds	r3, #40	; 0x28
 80079b2:	2200      	movs	r2, #0
 80079b4:	701a      	strb	r2, [r3, #0]
            pack.state  = packOff;
 80079b6:	4b05      	ldr	r3, [pc, #20]	; (80079cc <PCU_Tasks+0x8a4>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            pack.status = packStatusOff;
 80079be:	4b03      	ldr	r3, [pc, #12]	; (80079cc <PCU_Tasks+0x8a4>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
            break;
 80079c6:	e00e      	b.n	80079e6 <PCU_Tasks+0x8be>
      }
 80079c8:	bf00      	nop
 80079ca:	e00c      	b.n	80079e6 <PCU_Tasks+0x8be>
 80079cc:	2000a66c 	.word	0x2000a66c
 80079d0:	20000dec 	.word	0x20000dec
 80079d4:	2000000c 	.word	0x2000000c
 80079d8:	08017fec 	.word	0x08017fec
 80079dc:	20000b64 	.word	0x20000b64
 80079e0:	0801802c 	.word	0x0801802c
            break;
 80079e4:	bf00      	nop
      if((module[index].command.commandStatus == commandIssued) && (module[index].command.commandedState == module[index].nextState)){
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	4a4a      	ldr	r2, [pc, #296]	; (8007b14 <PCU_Tasks+0x9ec>)
 80079ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80079ee:	fb01 f303 	mul.w	r3, r1, r3
 80079f2:	4413      	add	r3, r2
 80079f4:	332a      	adds	r3, #42	; 0x2a
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d13a      	bne.n	8007a72 <PCU_Tasks+0x94a>
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	4a45      	ldr	r2, [pc, #276]	; (8007b14 <PCU_Tasks+0x9ec>)
 8007a00:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	4413      	add	r3, r2
 8007a0a:	3329      	adds	r3, #41	; 0x29
 8007a0c:	781a      	ldrb	r2, [r3, #0]
 8007a0e:	7bfb      	ldrb	r3, [r7, #15]
 8007a10:	4940      	ldr	r1, [pc, #256]	; (8007b14 <PCU_Tasks+0x9ec>)
 8007a12:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007a16:	fb00 f303 	mul.w	r3, r0, r3
 8007a1a:	440b      	add	r3, r1
 8007a1c:	3328      	adds	r3, #40	; 0x28
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d126      	bne.n	8007a72 <PCU_Tasks+0x94a>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007a24:	7bfb      	ldrb	r3, [r7, #15]
 8007a26:	4a3b      	ldr	r2, [pc, #236]	; (8007b14 <PCU_Tasks+0x9ec>)
 8007a28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007a2c:	fb01 f303 	mul.w	r3, r1, r3
 8007a30:	4413      	add	r3, r2
 8007a32:	3308      	adds	r3, #8
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f002 ff4a 	bl	800a8d0 <MCU_TicksSinceLastStateTx>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a42:	d92c      	bls.n	8007a9e <PCU_Tasks+0x976>
          MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	4a33      	ldr	r2, [pc, #204]	; (8007b14 <PCU_Tasks+0x9ec>)
 8007a48:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007a4c:	fb01 f303 	mul.w	r3, r1, r3
 8007a50:	4413      	add	r3, r2
 8007a52:	3308      	adds	r3, #8
 8007a54:	781a      	ldrb	r2, [r3, #0]
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	492e      	ldr	r1, [pc, #184]	; (8007b14 <PCU_Tasks+0x9ec>)
 8007a5a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007a5e:	fb00 f303 	mul.w	r3, r0, r3
 8007a62:	440b      	add	r3, r1
 8007a64:	3328      	adds	r3, #40	; 0x28
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	4619      	mov	r1, r3
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	f002 fc34 	bl	800a2d8 <MCU_TransmitState>
        if(MCU_TicksSinceLastStateTx(module[index].moduleId) > MCU_STATE_TX_INTERVAL){
 8007a70:	e015      	b.n	8007a9e <PCU_Tasks+0x976>
        MCU_TransmitState(module[index].moduleId,module[index].nextState);
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	4a27      	ldr	r2, [pc, #156]	; (8007b14 <PCU_Tasks+0x9ec>)
 8007a76:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007a7a:	fb01 f303 	mul.w	r3, r1, r3
 8007a7e:	4413      	add	r3, r2
 8007a80:	3308      	adds	r3, #8
 8007a82:	781a      	ldrb	r2, [r3, #0]
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
 8007a86:	4923      	ldr	r1, [pc, #140]	; (8007b14 <PCU_Tasks+0x9ec>)
 8007a88:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8007a8c:	fb00 f303 	mul.w	r3, r0, r3
 8007a90:	440b      	add	r3, r1
 8007a92:	3328      	adds	r3, #40	; 0x28
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	4619      	mov	r1, r3
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f002 fc1d 	bl	800a2d8 <MCU_TransmitState>
    for (index =0;index < pack.moduleCount;index++){
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <PCU_Tasks+0x9f0>)
 8007aa6:	7d1b      	ldrb	r3, [r3, #20]
 8007aa8:	7bfa      	ldrb	r2, [r7, #15]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	f4ff aebf 	bcc.w	800782e <PCU_Tasks+0x706>
    MCU_UpdateStats();
 8007ab0:	f000 f8ea 	bl	8007c88 <MCU_UpdateStats>
    if(sendMaxState >0){
 8007ab4:	4b19      	ldr	r3, [pc, #100]	; (8007b1c <PCU_Tasks+0x9f4>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <PCU_Tasks+0x9a0>
      MCU_TransmitMaxState(pack.vcuRequestedState);
 8007abc:	4b16      	ldr	r3, [pc, #88]	; (8007b18 <PCU_Tasks+0x9f0>)
 8007abe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f002 fcca 	bl	800a45c <MCU_TransmitMaxState>
    if(sendState > 0){
 8007ac8:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <PCU_Tasks+0x9f8>)
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01c      	beq.n	8007b0a <PCU_Tasks+0x9e2>
      if (pack.rtcValid == false) VCU_RequestTime();
 8007ad0:	4b11      	ldr	r3, [pc, #68]	; (8007b18 <PCU_Tasks+0x9f0>)
 8007ad2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007ad6:	f083 0301 	eor.w	r3, r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d001      	beq.n	8007ae4 <PCU_Tasks+0x9bc>
 8007ae0:	f005 fbb6 	bl	800d250 <VCU_RequestTime>
      VCU_TransmitBmsState();
 8007ae4:	f004 f9b4 	bl	800be50 <VCU_TransmitBmsState>
      VCU_TransmitBmsData1();
 8007ae8:	f004 fa9a 	bl	800c020 <VCU_TransmitBmsData1>
      VCU_TransmitBmsData2();
 8007aec:	f004 fb7c 	bl	800c1e8 <VCU_TransmitBmsData2>
      VCU_TransmitBmsData3();
 8007af0:	f004 fcbe 	bl	800c470 <VCU_TransmitBmsData3>
      VCU_TransmitBmsData5();
 8007af4:	f004 fde8 	bl	800c6c8 <VCU_TransmitBmsData5>
      VCU_TransmitBmsData8();
 8007af8:	f004 ff06 	bl	800c908 <VCU_TransmitBmsData8>
      VCU_TransmitBmsData9();
 8007afc:	f004 ff72 	bl	800c9e4 <VCU_TransmitBmsData9>
      VCU_TransmitBmsData10();
 8007b00:	f004 ffde 	bl	800cac0 <VCU_TransmitBmsData10>
      sendState=0;
 8007b04:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <PCU_Tasks+0x9f8>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	701a      	strb	r2, [r3, #0]
}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20000dec 	.word	0x20000dec
 8007b18:	2000a66c 	.word	0x2000a66c
 8007b1c:	20000d2d 	.word	0x20000d2d
 8007b20:	20000d2e 	.word	0x20000d2e

08007b24 <DRV_CANFDSPI_Init>:

/***************************************************************************************************************
*     D R V _ C A N F D S P I _ I n i t                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void DRV_CANFDSPI_Init(CANFDSPI_MODULE_ID index)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	71fb      	strb	r3, [r7, #7]
  // Reset device
  DRV_CANFDSPI_Reset(index);
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7f9 fa5d 	bl	8000ff0 <DRV_CANFDSPI_Reset>

  // Enable ECC and initialize RAM
  DRV_CANFDSPI_EccEnable(index);
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7fa ff10 	bl	800295e <DRV_CANFDSPI_EccEnable>

  DRV_CANFDSPI_RamInit(index, 0xff);
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	21ff      	movs	r1, #255	; 0xff
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7fa ff3f 	bl	80029c6 <DRV_CANFDSPI_RamInit>

  // Configure device
  DRV_CANFDSPI_ConfigureObjectReset(&config);
 8007b48:	484a      	ldr	r0, [pc, #296]	; (8007c74 <DRV_CANFDSPI_Init+0x150>)
 8007b4a:	f7fa f921 	bl	8001d90 <DRV_CANFDSPI_ConfigureObjectReset>
  config.IsoCrcEnable = 1;
 8007b4e:	4a49      	ldr	r2, [pc, #292]	; (8007c74 <DRV_CANFDSPI_Init+0x150>)
 8007b50:	7813      	ldrb	r3, [r2, #0]
 8007b52:	f043 0320 	orr.w	r3, r3, #32
 8007b56:	7013      	strb	r3, [r2, #0]
  config.StoreInTEF = 0;
 8007b58:	4a46      	ldr	r2, [pc, #280]	; (8007c74 <DRV_CANFDSPI_Init+0x150>)
 8007b5a:	7853      	ldrb	r3, [r2, #1]
 8007b5c:	f36f 1386 	bfc	r3, #6, #1
 8007b60:	7053      	strb	r3, [r2, #1]

  DRV_CANFDSPI_Configure(index, &config);
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	4943      	ldr	r1, [pc, #268]	; (8007c74 <DRV_CANFDSPI_Init+0x150>)
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fa f884 	bl	8001c74 <DRV_CANFDSPI_Configure>

  // Setup TX FIFO
  DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8007b6c:	4842      	ldr	r0, [pc, #264]	; (8007c78 <DRV_CANFDSPI_Init+0x154>)
 8007b6e:	f7fa fa1f 	bl	8001fb0 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
  txConfig.FifoSize = 7;
 8007b72:	4a41      	ldr	r2, [pc, #260]	; (8007c78 <DRV_CANFDSPI_Init+0x154>)
 8007b74:	7853      	ldrb	r3, [r2, #1]
 8007b76:	2107      	movs	r1, #7
 8007b78:	f361 0304 	bfi	r3, r1, #0, #5
 8007b7c:	7053      	strb	r3, [r2, #1]
  txConfig.PayLoadSize = CAN_PLSIZE_64;
 8007b7e:	4a3e      	ldr	r2, [pc, #248]	; (8007c78 <DRV_CANFDSPI_Init+0x154>)
 8007b80:	7853      	ldrb	r3, [r2, #1]
 8007b82:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8007b86:	7053      	strb	r3, [r2, #1]
  txConfig.TxPriority = 1;
 8007b88:	4a3b      	ldr	r2, [pc, #236]	; (8007c78 <DRV_CANFDSPI_Init+0x154>)
 8007b8a:	7813      	ldrb	r3, [r2, #0]
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	f361 0345 	bfi	r3, r1, #1, #5
 8007b92:	7013      	strb	r3, [r2, #0]

  DRV_CANFDSPI_TransmitChannelConfigure(index, MCU_TX_FIFO, &txConfig);
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	4a38      	ldr	r2, [pc, #224]	; (8007c78 <DRV_CANFDSPI_Init+0x154>)
 8007b98:	2102      	movs	r1, #2
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fa f9b0 	bl	8001f00 <DRV_CANFDSPI_TransmitChannelConfigure>

  // Setup RX FIFO
  DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8007ba0:	4836      	ldr	r0, [pc, #216]	; (8007c7c <DRV_CANFDSPI_Init+0x158>)
 8007ba2:	f7fa fc5d 	bl	8002460 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
  rxConfig.FifoSize = 15;
 8007ba6:	4a35      	ldr	r2, [pc, #212]	; (8007c7c <DRV_CANFDSPI_Init+0x158>)
 8007ba8:	7813      	ldrb	r3, [r2, #0]
 8007baa:	210f      	movs	r1, #15
 8007bac:	f361 0345 	bfi	r3, r1, #1, #5
 8007bb0:	7013      	strb	r3, [r2, #0]
  rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8007bb2:	4a32      	ldr	r2, [pc, #200]	; (8007c7c <DRV_CANFDSPI_Init+0x158>)
 8007bb4:	8813      	ldrh	r3, [r2, #0]
 8007bb6:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8007bba:	8013      	strh	r3, [r2, #0]

  DRV_CANFDSPI_ReceiveChannelConfigure(index, MCU_RX_FIFO, &rxConfig);
 8007bbc:	79fb      	ldrb	r3, [r7, #7]
 8007bbe:	4a2f      	ldr	r2, [pc, #188]	; (8007c7c <DRV_CANFDSPI_Init+0x158>)
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f7fa fc00 	bl	80023c8 <DRV_CANFDSPI_ReceiveChannelConfigure>

  // Setup RX Filter
  fObj.word = 0;
 8007bc8:	4b2d      	ldr	r3, [pc, #180]	; (8007c80 <DRV_CANFDSPI_Init+0x15c>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
  fObj.bF.SID = 0x00;
 8007bce:	4a2c      	ldr	r2, [pc, #176]	; (8007c80 <DRV_CANFDSPI_Init+0x15c>)
 8007bd0:	8813      	ldrh	r3, [r2, #0]
 8007bd2:	f36f 030a 	bfc	r3, #0, #11
 8007bd6:	8013      	strh	r3, [r2, #0]
  fObj.bF.EXIDE = 0;
 8007bd8:	4a29      	ldr	r2, [pc, #164]	; (8007c80 <DRV_CANFDSPI_Init+0x15c>)
 8007bda:	78d3      	ldrb	r3, [r2, #3]
 8007bdc:	f36f 1386 	bfc	r3, #6, #1
 8007be0:	70d3      	strb	r3, [r2, #3]
  fObj.bF.EID = 0x00;
 8007be2:	4a27      	ldr	r2, [pc, #156]	; (8007c80 <DRV_CANFDSPI_Init+0x15c>)
 8007be4:	6813      	ldr	r3, [r2, #0]
 8007be6:	f36f 23dc 	bfc	r3, #11, #18
 8007bea:	6013      	str	r3, [r2, #0]

  DRV_CANFDSPI_FilterObjectConfigure(index, CAN_FILTER0, &fObj.bF);
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <DRV_CANFDSPI_Init+0x15c>)
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7fa fb6a 	bl	80022cc <DRV_CANFDSPI_FilterObjectConfigure>

  // Setup RX Mask
  mObj.word = 0;
 8007bf8:	4b22      	ldr	r3, [pc, #136]	; (8007c84 <DRV_CANFDSPI_Init+0x160>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
  mObj.bF.MSID = 0x0;
 8007bfe:	4a21      	ldr	r2, [pc, #132]	; (8007c84 <DRV_CANFDSPI_Init+0x160>)
 8007c00:	8813      	ldrh	r3, [r2, #0]
 8007c02:	f36f 030a 	bfc	r3, #0, #11
 8007c06:	8013      	strh	r3, [r2, #0]
  mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8007c08:	4a1e      	ldr	r2, [pc, #120]	; (8007c84 <DRV_CANFDSPI_Init+0x160>)
 8007c0a:	78d3      	ldrb	r3, [r2, #3]
 8007c0c:	f36f 1386 	bfc	r3, #6, #1
 8007c10:	70d3      	strb	r3, [r2, #3]
  mObj.bF.MEID = 0x0;
 8007c12:	4a1c      	ldr	r2, [pc, #112]	; (8007c84 <DRV_CANFDSPI_Init+0x160>)
 8007c14:	6813      	ldr	r3, [r2, #0]
 8007c16:	f36f 23dc 	bfc	r3, #11, #18
 8007c1a:	6013      	str	r3, [r2, #0]
  DRV_CANFDSPI_FilterMaskConfigure(index, CAN_FILTER0, &mObj.bF);
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	4a19      	ldr	r2, [pc, #100]	; (8007c84 <DRV_CANFDSPI_Init+0x160>)
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7fa fb74 	bl	8002310 <DRV_CANFDSPI_FilterMaskConfigure>

  // Link FIFO and Filter
  DRV_CANFDSPI_FilterToFifoLink(index, CAN_FILTER0, MCU_RX_FIFO, true);
 8007c28:	79f8      	ldrb	r0, [r7, #7]
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	2100      	movs	r1, #0
 8007c30:	f7fa fb92 	bl	8002358 <DRV_CANFDSPI_FilterToFifoLink>

  // Setup Bit Time
  DRV_CANFDSPI_BitTimeConfigure(index, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8007c34:	79f8      	ldrb	r0, [r7, #7]
 8007c36:	2300      	movs	r3, #0
 8007c38:	2202      	movs	r2, #2
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	f7fa ff03 	bl	8002a46 <DRV_CANFDSPI_BitTimeConfigure>

  // Setup Transmit and Receive Interrupts
  DRV_CANFDSPI_GpioModeConfigure(index, GPIO_MODE_INT, GPIO_MODE_INT);
 8007c40:	79fb      	ldrb	r3, [r7, #7]
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fb fe1c 	bl	8003884 <DRV_CANFDSPI_GpioModeConfigure>
#ifdef MCU_USE_TX_INT
  DRV_CANFDSPI_TransmitChannelEventEnable(index, MCU_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
#endif
  DRV_CANFDSPI_ReceiveChannelEventEnable(index, MCU_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	2101      	movs	r1, #1
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fa fe03 	bl	800285e <DRV_CANFDSPI_ReceiveChannelEventEnable>
  DRV_CANFDSPI_ModuleEventEnable(index, CAN_TX_EVENT | CAN_RX_EVENT);
 8007c58:	79fb      	ldrb	r3, [r7, #7]
 8007c5a:	2103      	movs	r1, #3
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fa fd52 	bl	8002706 <DRV_CANFDSPI_ModuleEventEnable>

  // Select Normal Mode
  DRV_CANFDSPI_OperationModeSelect(index, CAN_NORMAL_MODE);
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	2100      	movs	r1, #0
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fa f90e 	bl	8001e88 <DRV_CANFDSPI_OperationModeSelect>
}
 8007c6c:	bf00      	nop
 8007c6e:	3708      	adds	r7, #8
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}
 8007c74:	20000d34 	.word	0x20000d34
 8007c78:	20000d38 	.word	0x20000d38
 8007c7c:	20000d8c 	.word	0x20000d8c
 8007c80:	20000d90 	.word	0x20000d90
 8007c84:	20000d94 	.word	0x20000d94

08007c88 <MCU_UpdateStats>:

/***************************************************************************************************************
*     M C U _ U p d a t e S t a t s                                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_UpdateStats(void)
{
 8007c88:	b5b0      	push	{r4, r5, r7, lr}
 8007c8a:	b094      	sub	sp, #80	; 0x50
 8007c8c:	af02      	add	r7, sp, #8

  uint8_t index;
  uint8_t modulesOn            = 0;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  uint32_t voltage             = 0;
 8007c94:	2300      	movs	r3, #0
 8007c96:	643b      	str	r3, [r7, #64]	; 0x40
  float moduleCurrent          = 0;
 8007c98:	f04f 0300 	mov.w	r3, #0
 8007c9c:	613b      	str	r3, [r7, #16]
  float totalCurrent           = 0;
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  float moduleMaxChargeA       = 0;
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	60fb      	str	r3, [r7, #12]
  float moduleMaxDischargeA    = 0;
 8007caa:	f04f 0300 	mov.w	r3, #0
 8007cae:	60bb      	str	r3, [r7, #8]
  uint16_t lowestSoc           = 255;
 8007cb0:	23ff      	movs	r3, #255	; 0xff
 8007cb2:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t lowestSoh           = 255;
 8007cb4:	23ff      	movs	r3, #255	; 0xff
 8007cb6:	873b      	strh	r3, [r7, #56]	; 0x38
  uint32_t totalAvgCellVolt    = 0;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	637b      	str	r3, [r7, #52]	; 0x34
  uint16_t highestCellVolt     = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	867b      	strh	r3, [r7, #50]	; 0x32
  uint16_t lowestCellVolt      = 65535;
 8007cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cc4:	863b      	strh	r3, [r7, #48]	; 0x30
  uint32_t totalAvgCellTemp    = 0;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t highestCellTemp     = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t lowestCellTemp      = 65535;
 8007cce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cd2:	853b      	strh	r3, [r7, #40]	; 0x28
  float    maxChargeA          = 0;
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
  float    maxDischargeA       = 0;
 8007cda:	f04f 0300 	mov.w	r3, #0
 8007cde:	623b      	str	r3, [r7, #32]
  float    packCurrent         = 0;
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	607b      	str	r3, [r7, #4]
  uint32_t totalMaxChargeEndV  = 0;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61fb      	str	r3, [r7, #28]
  uint8_t  activeModules       = 0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	76fb      	strb	r3, [r7, #27]
  uint8_t  modLowestCellVolt   = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	76bb      	strb	r3, [r7, #26]
  uint8_t  modHighestCellVolt  = 0;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	767b      	strb	r3, [r7, #25]
  uint8_t  modLowestCellTemp   = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	763b      	strb	r3, [r7, #24]
  uint8_t  modHighestCellTemp  = 0;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]


  for(index = 0; index < pack.moduleCount; index++){
 8007cfe:	2300      	movs	r3, #0
 8007d00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d04:	e275      	b.n	80081f2 <MCU_UpdateStats+0x56a>
    // only generate stats for modules that are not in fault or in over current
    if(module[index].faultCode.commsError == false && module[index].faultCode.overCurrent ==  false && module[index].faultCode.hwIncompatible == false){
 8007d06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d0a:	4a85      	ldr	r2, [pc, #532]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007d0c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007d1a:	789b      	ldrb	r3, [r3, #2]
 8007d1c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 8260 	bne.w	80081e8 <MCU_UpdateStats+0x560>
 8007d28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d2c:	4a7c      	ldr	r2, [pc, #496]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007d2e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007d32:	fb01 f303 	mul.w	r3, r1, r3
 8007d36:	4413      	add	r3, r2
 8007d38:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007d3c:	789b      	ldrb	r3, [r3, #2]
 8007d3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f040 824f 	bne.w	80081e8 <MCU_UpdateStats+0x560>
 8007d4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d4e:	4a74      	ldr	r2, [pc, #464]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007d50:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007d5e:	789b      	ldrb	r3, [r3, #2]
 8007d60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f040 823e 	bne.w	80081e8 <MCU_UpdateStats+0x560>
      // sum the currents of all modules that are ON and average the voltages
      if(module[index].currentState == moduleOn) {
 8007d6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d70:	4a6b      	ldr	r2, [pc, #428]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007d72:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007d76:	fb01 f303 	mul.w	r3, r1, r3
 8007d7a:	4413      	add	r3, r2
 8007d7c:	3327      	adds	r3, #39	; 0x27
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	f040 8146 	bne.w	8008012 <MCU_UpdateStats+0x38a>
        // calculate module max currents in Amps
        moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[index].maxChargeA    * MODULE_CURRENT_FACTOR);
 8007d86:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d8a:	4a65      	ldr	r2, [pc, #404]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007d8c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007d90:	fb01 f303 	mul.w	r3, r1, r3
 8007d94:	4413      	add	r3, r2
 8007d96:	330e      	adds	r3, #14
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f7f8 fba4 	bl	80004e8 <__aeabi_i2d>
 8007da0:	a359      	add	r3, pc, #356	; (adr r3, 8007f08 <MCU_UpdateStats+0x280>)
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f7f8 fc09 	bl	80005bc <__aeabi_dmul>
 8007daa:	4602      	mov	r2, r0
 8007dac:	460b      	mov	r3, r1
 8007dae:	4610      	mov	r0, r2
 8007db0:	4619      	mov	r1, r3
 8007db2:	a357      	add	r3, pc, #348	; (adr r3, 8007f10 <MCU_UpdateStats+0x288>)
 8007db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db8:	f7f8 fa48 	bl	800024c <__aeabi_dsub>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	460b      	mov	r3, r1
 8007dc0:	4610      	mov	r0, r2
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	f7f8 fef2 	bl	8000bac <__aeabi_d2f>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	60fb      	str	r3, [r7, #12]
        moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[index].maxDischargeA * MODULE_CURRENT_FACTOR);
 8007dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dd0:	4a53      	ldr	r2, [pc, #332]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007dd2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	3310      	adds	r3, #16
 8007dde:	881b      	ldrh	r3, [r3, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7f8 fb81 	bl	80004e8 <__aeabi_i2d>
 8007de6:	a348      	add	r3, pc, #288	; (adr r3, 8007f08 <MCU_UpdateStats+0x280>)
 8007de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dec:	f7f8 fbe6 	bl	80005bc <__aeabi_dmul>
 8007df0:	4602      	mov	r2, r0
 8007df2:	460b      	mov	r3, r1
 8007df4:	4610      	mov	r0, r2
 8007df6:	4619      	mov	r1, r3
 8007df8:	a345      	add	r3, pc, #276	; (adr r3, 8007f10 <MCU_UpdateStats+0x288>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fa25 	bl	800024c <__aeabi_dsub>
 8007e02:	4602      	mov	r2, r0
 8007e04:	460b      	mov	r3, r1
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	f7f8 fecf 	bl	8000bac <__aeabi_d2f>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	60bb      	str	r3, [r7, #8]
        //sum the voltage - averaged later
        voltage = voltage + module[index].mmv;
 8007e12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e16:	4a42      	ldr	r2, [pc, #264]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007e18:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	3314      	adds	r3, #20
 8007e24:	881b      	ldrh	r3, [r3, #0]
 8007e26:	461a      	mov	r2, r3
 8007e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2a:	4413      	add	r3, r2
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
        //increment module on count
        modulesOn++;
 8007e2e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007e32:	3301      	adds	r3, #1
 8007e34:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
        //calculate module current in amps
        moduleCurrent       = MODULE_CURRENT_BASE + (module[index].mmc           * MODULE_CURRENT_FACTOR);
 8007e38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e3c:	4a38      	ldr	r2, [pc, #224]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007e3e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007e42:	fb01 f303 	mul.w	r3, r1, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	3316      	adds	r3, #22
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7f8 fb4b 	bl	80004e8 <__aeabi_i2d>
 8007e52:	a32d      	add	r3, pc, #180	; (adr r3, 8007f08 <MCU_UpdateStats+0x280>)
 8007e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e58:	f7f8 fbb0 	bl	80005bc <__aeabi_dmul>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4610      	mov	r0, r2
 8007e62:	4619      	mov	r1, r3
 8007e64:	a32a      	add	r3, pc, #168	; (adr r3, 8007f10 <MCU_UpdateStats+0x288>)
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f7f8 f9ef 	bl	800024c <__aeabi_dsub>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4610      	mov	r0, r2
 8007e74:	4619      	mov	r1, r3
 8007e76:	f7f8 fe99 	bl	8000bac <__aeabi_d2f>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	613b      	str	r3, [r7, #16]

       // Check for over current condition. Negative current flows out of battery, positive current flows into battery
       // ALLOW FOR +/- 0.3A ACCURACY FROM MODULE?? ie. If current limit is zero and the module is reporting 0.25A then allow for this.
       if(moduleCurrent - MODULE_CURRENT_TOLERANCE > moduleMaxChargeA){
 8007e7e:	6938      	ldr	r0, [r7, #16]
 8007e80:	f7f8 fb44 	bl	800050c <__aeabi_f2d>
 8007e84:	a324      	add	r3, pc, #144	; (adr r3, 8007f18 <MCU_UpdateStats+0x290>)
 8007e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e8a:	f7f8 f9df 	bl	800024c <__aeabi_dsub>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	460b      	mov	r3, r1
 8007e92:	4614      	mov	r4, r2
 8007e94:	461d      	mov	r5, r3
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7f8 fb38 	bl	800050c <__aeabi_f2d>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	4629      	mov	r1, r5
 8007ea4:	f7f8 fe1a 	bl	8000adc <__aeabi_dcmpgt>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d040      	beq.n	8007f30 <MCU_UpdateStats+0x2a8>
         module[index].faultCode.overCurrent = true;
 8007eae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007eb2:	4a1b      	ldr	r2, [pc, #108]	; (8007f20 <MCU_UpdateStats+0x298>)
 8007eb4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8007ec2:	7893      	ldrb	r3, [r2, #2]
 8007ec4:	f043 0304 	orr.w	r3, r3, #4
 8007ec8:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module charge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxChargeA); serialOut(tempBuffer);}
 8007eca:	4b16      	ldr	r3, [pc, #88]	; (8007f24 <MCU_UpdateStats+0x29c>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0303 	and.w	r3, r3, #3
 8007ed2:	2b03      	cmp	r3, #3
 8007ed4:	d16d      	bne.n	8007fb2 <MCU_UpdateStats+0x32a>
 8007ed6:	6938      	ldr	r0, [r7, #16]
 8007ed8:	f7f8 fb18 	bl	800050c <__aeabi_f2d>
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7f8 fb13 	bl	800050c <__aeabi_f2d>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9cd 2300 	strd	r2, r3, [sp]
 8007eee:	4622      	mov	r2, r4
 8007ef0:	462b      	mov	r3, r5
 8007ef2:	490d      	ldr	r1, [pc, #52]	; (8007f28 <MCU_UpdateStats+0x2a0>)
 8007ef4:	480d      	ldr	r0, [pc, #52]	; (8007f2c <MCU_UpdateStats+0x2a4>)
 8007ef6:	f00c fbcd 	bl	8014694 <siprintf>
 8007efa:	480c      	ldr	r0, [pc, #48]	; (8007f2c <MCU_UpdateStats+0x2a4>)
 8007efc:	f7fd fb84 	bl	8005608 <serialOut>
 8007f00:	e057      	b.n	8007fb2 <MCU_UpdateStats+0x32a>
 8007f02:	bf00      	nop
 8007f04:	f3af 8000 	nop.w
 8007f08:	47ae147b 	.word	0x47ae147b
 8007f0c:	3f947ae1 	.word	0x3f947ae1
 8007f10:	47ae147b 	.word	0x47ae147b
 8007f14:	40847ae1 	.word	0x40847ae1
 8007f18:	33333333 	.word	0x33333333
 8007f1c:	3fd33333 	.word	0x3fd33333
 8007f20:	20000dec 	.word	0x20000dec
 8007f24:	2000000c 	.word	0x2000000c
 8007f28:	08018050 	.word	0x08018050
 8007f2c:	20000b64 	.word	0x20000b64
        } else if(moduleCurrent + MODULE_CURRENT_TOLERANCE < moduleMaxDischargeA) {
 8007f30:	6938      	ldr	r0, [r7, #16]
 8007f32:	f7f8 faeb 	bl	800050c <__aeabi_f2d>
 8007f36:	a3d7      	add	r3, pc, #860	; (adr r3, 8008294 <MCU_UpdateStats+0x60c>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	f7f8 f988 	bl	8000250 <__adddf3>
 8007f40:	4602      	mov	r2, r0
 8007f42:	460b      	mov	r3, r1
 8007f44:	4614      	mov	r4, r2
 8007f46:	461d      	mov	r5, r3
 8007f48:	68b8      	ldr	r0, [r7, #8]
 8007f4a:	f7f8 fadf 	bl	800050c <__aeabi_f2d>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	f7f8 fda3 	bl	8000aa0 <__aeabi_dcmplt>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d028      	beq.n	8007fb2 <MCU_UpdateStats+0x32a>
          module[index].faultCode.overCurrent = true;
 8007f60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f64:	4ac4      	ldr	r2, [pc, #784]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8007f66:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007f6a:	fb01 f303 	mul.w	r3, r1, r3
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8007f74:	7893      	ldrb	r3, [r2, #2]
 8007f76:	f043 0304 	orr.w	r3, r3, #4
 8007f7a:	7093      	strb	r3, [r2, #2]
          if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - module discharge current (%.2fA) exceeds specification (max %.2fA)",moduleCurrent, moduleMaxDischargeA); serialOut(tempBuffer);}
 8007f7c:	4bbf      	ldr	r3, [pc, #764]	; (800827c <MCU_UpdateStats+0x5f4>)
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d114      	bne.n	8007fb2 <MCU_UpdateStats+0x32a>
 8007f88:	6938      	ldr	r0, [r7, #16]
 8007f8a:	f7f8 fabf 	bl	800050c <__aeabi_f2d>
 8007f8e:	4604      	mov	r4, r0
 8007f90:	460d      	mov	r5, r1
 8007f92:	68b8      	ldr	r0, [r7, #8]
 8007f94:	f7f8 faba 	bl	800050c <__aeabi_f2d>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	460b      	mov	r3, r1
 8007f9c:	e9cd 2300 	strd	r2, r3, [sp]
 8007fa0:	4622      	mov	r2, r4
 8007fa2:	462b      	mov	r3, r5
 8007fa4:	49b6      	ldr	r1, [pc, #728]	; (8008280 <MCU_UpdateStats+0x5f8>)
 8007fa6:	48b7      	ldr	r0, [pc, #732]	; (8008284 <MCU_UpdateStats+0x5fc>)
 8007fa8:	f00c fb74 	bl	8014694 <siprintf>
 8007fac:	48b5      	ldr	r0, [pc, #724]	; (8008284 <MCU_UpdateStats+0x5fc>)
 8007fae:	f7fd fb2b 	bl	8005608 <serialOut>
        }
        // have we now put the module into over current?
       if(module[index].faultCode.overCurrent == true){
 8007fb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fb6:	4ab0      	ldr	r2, [pc, #704]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8007fb8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8007fbc:	fb01 f303 	mul.w	r3, r1, r3
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8007fc6:	789b      	ldrb	r3, [r3, #2]
 8007fc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d107      	bne.n	8007fe2 <MCU_UpdateStats+0x35a>
          // are we in pre-charge (just the one module on)?
          if (pack.vcuRequestedState == packPrecharge){
 8007fd2:	4bad      	ldr	r3, [pc, #692]	; (8008288 <MCU_UpdateStats+0x600>)
 8007fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd8:	2b02      	cmp	r3, #2
 8007fda:	d102      	bne.n	8007fe2 <MCU_UpdateStats+0x35a>
            // ah crap - this was the first module on and its over current - go back and select another
            pack.powerStatus.powerStage = stageSelectModule;
 8007fdc:	4baa      	ldr	r3, [pc, #680]	; (8008288 <MCU_UpdateStats+0x600>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	769a      	strb	r2, [r3, #26]
          }
        }

        totalCurrent = totalCurrent + moduleCurrent;
 8007fe2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8007fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8007fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007fee:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        maxDischargeA      = maxDischargeA        + moduleMaxDischargeA;
 8007ff2:	ed97 7a08 	vldr	s14, [r7, #32]
 8007ff6:	edd7 7a02 	vldr	s15, [r7, #8]
 8007ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ffe:	edc7 7a08 	vstr	s15, [r7, #32]
        maxChargeA         = maxChargeA           + moduleMaxChargeA;
 8008002:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008006:	edd7 7a03 	vldr	s15, [r7, #12]
 800800a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800800e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      }
      // sum the maxCharge, maxDischarge currents, and average the maxChargeEndV, cellAvgVolt, cellAvgTemp
      totalMaxChargeEndV = totalMaxChargeEndV   + module[index].maxChargeEndV;
 8008012:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008016:	4a98      	ldr	r2, [pc, #608]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008018:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800801c:	fb01 f303 	mul.w	r3, r1, r3
 8008020:	4413      	add	r3, r2
 8008022:	3312      	adds	r3, #18
 8008024:	881b      	ldrh	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4413      	add	r3, r2
 800802c:	61fb      	str	r3, [r7, #28]
      totalAvgCellVolt   = totalAvgCellVolt     + module[index].cellAvgVolt;
 800802e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008032:	4a91      	ldr	r2, [pc, #580]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008034:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	3322      	adds	r3, #34	; 0x22
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008046:	4413      	add	r3, r2
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
      totalAvgCellTemp   = totalAvgCellTemp     + module[index].cellAvgTemp;
 800804a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800804e:	4a8a      	ldr	r2, [pc, #552]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008050:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008054:	fb01 f303 	mul.w	r3, r1, r3
 8008058:	4413      	add	r3, r2
 800805a:	331c      	adds	r3, #28
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	461a      	mov	r2, r3
 8008060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008062:	4413      	add	r3, r2
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
      // highest/lowest
      if( module[index].soc < lowestSoc) lowestSoc = module[index].soc;
 8008066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800806a:	4a83      	ldr	r2, [pc, #524]	; (8008278 <MCU_UpdateStats+0x5f0>)
 800806c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008070:	fb01 f303 	mul.w	r3, r1, r3
 8008074:	4413      	add	r3, r2
 8008076:	332b      	adds	r3, #43	; 0x2b
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800807e:	429a      	cmp	r2, r3
 8008080:	d90a      	bls.n	8008098 <MCU_UpdateStats+0x410>
 8008082:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008086:	4a7c      	ldr	r2, [pc, #496]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008088:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800808c:	fb01 f303 	mul.w	r3, r1, r3
 8008090:	4413      	add	r3, r2
 8008092:	332b      	adds	r3, #43	; 0x2b
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	877b      	strh	r3, [r7, #58]	; 0x3a
      if( module[index].soh < lowestSoh) lowestSoh = module[index].soh;
 8008098:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800809c:	4a76      	ldr	r2, [pc, #472]	; (8008278 <MCU_UpdateStats+0x5f0>)
 800809e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	4413      	add	r3, r2
 80080a8:	332c      	adds	r3, #44	; 0x2c
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d90a      	bls.n	80080ca <MCU_UpdateStats+0x442>
 80080b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080b8:	4a6f      	ldr	r2, [pc, #444]	; (8008278 <MCU_UpdateStats+0x5f0>)
 80080ba:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80080be:	fb01 f303 	mul.w	r3, r1, r3
 80080c2:	4413      	add	r3, r2
 80080c4:	332c      	adds	r3, #44	; 0x2c
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	873b      	strh	r3, [r7, #56]	; 0x38
      if( module[index].cellLoVolt < lowestCellVolt){
 80080ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080ce:	4a6a      	ldr	r2, [pc, #424]	; (8008278 <MCU_UpdateStats+0x5f0>)
 80080d0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80080d4:	fb01 f303 	mul.w	r3, r1, r3
 80080d8:	4413      	add	r3, r2
 80080da:	3320      	adds	r3, #32
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d915      	bls.n	8008110 <MCU_UpdateStats+0x488>
        lowestCellVolt  = module[index].cellLoVolt;
 80080e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080e8:	4a63      	ldr	r2, [pc, #396]	; (8008278 <MCU_UpdateStats+0x5f0>)
 80080ea:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80080ee:	fb01 f303 	mul.w	r3, r1, r3
 80080f2:	4413      	add	r3, r2
 80080f4:	3320      	adds	r3, #32
 80080f6:	881b      	ldrh	r3, [r3, #0]
 80080f8:	863b      	strh	r3, [r7, #48]	; 0x30
        modLowestCellVolt = module[index].moduleId;
 80080fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080fe:	4a5e      	ldr	r2, [pc, #376]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008100:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	4413      	add	r3, r2
 800810a:	3308      	adds	r3, #8
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	76bb      	strb	r3, [r7, #26]
      }
      if( module[index].cellHiVolt > highestCellVolt){
 8008110:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008114:	4a58      	ldr	r2, [pc, #352]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008116:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800811a:	fb01 f303 	mul.w	r3, r1, r3
 800811e:	4413      	add	r3, r2
 8008120:	331e      	adds	r3, #30
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8008126:	429a      	cmp	r2, r3
 8008128:	d215      	bcs.n	8008156 <MCU_UpdateStats+0x4ce>
        highestCellVolt = module[index].cellHiVolt;
 800812a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800812e:	4a52      	ldr	r2, [pc, #328]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008130:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008134:	fb01 f303 	mul.w	r3, r1, r3
 8008138:	4413      	add	r3, r2
 800813a:	331e      	adds	r3, #30
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	867b      	strh	r3, [r7, #50]	; 0x32
        modHighestCellVolt = module[index].moduleId;
 8008140:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008144:	4a4c      	ldr	r2, [pc, #304]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008146:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800814a:	fb01 f303 	mul.w	r3, r1, r3
 800814e:	4413      	add	r3, r2
 8008150:	3308      	adds	r3, #8
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	767b      	strb	r3, [r7, #25]
      }
      if( module[index].cellHiTemp > highestCellTemp){
 8008156:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800815a:	4a47      	ldr	r2, [pc, #284]	; (8008278 <MCU_UpdateStats+0x5f0>)
 800815c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008160:	fb01 f303 	mul.w	r3, r1, r3
 8008164:	4413      	add	r3, r2
 8008166:	3318      	adds	r3, #24
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800816c:	429a      	cmp	r2, r3
 800816e:	d215      	bcs.n	800819c <MCU_UpdateStats+0x514>
        highestCellTemp = module[index].cellHiTemp;
 8008170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008174:	4a40      	ldr	r2, [pc, #256]	; (8008278 <MCU_UpdateStats+0x5f0>)
 8008176:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800817a:	fb01 f303 	mul.w	r3, r1, r3
 800817e:	4413      	add	r3, r2
 8008180:	3318      	adds	r3, #24
 8008182:	881b      	ldrh	r3, [r3, #0]
 8008184:	857b      	strh	r3, [r7, #42]	; 0x2a
        modHighestCellTemp = module[index].moduleId;
 8008186:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800818a:	4a3b      	ldr	r2, [pc, #236]	; (8008278 <MCU_UpdateStats+0x5f0>)
 800818c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008190:	fb01 f303 	mul.w	r3, r1, r3
 8008194:	4413      	add	r3, r2
 8008196:	3308      	adds	r3, #8
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	75fb      	strb	r3, [r7, #23]
      }
      if( module[index].cellLoTemp < lowestCellTemp){
 800819c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80081a0:	4a35      	ldr	r2, [pc, #212]	; (8008278 <MCU_UpdateStats+0x5f0>)
 80081a2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80081a6:	fb01 f303 	mul.w	r3, r1, r3
 80081aa:	4413      	add	r3, r2
 80081ac:	331a      	adds	r3, #26
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d915      	bls.n	80081e2 <MCU_UpdateStats+0x55a>
        lowestCellTemp  = module[index].cellLoTemp;
 80081b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80081ba:	4a2f      	ldr	r2, [pc, #188]	; (8008278 <MCU_UpdateStats+0x5f0>)
 80081bc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80081c0:	fb01 f303 	mul.w	r3, r1, r3
 80081c4:	4413      	add	r3, r2
 80081c6:	331a      	adds	r3, #26
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	853b      	strh	r3, [r7, #40]	; 0x28
        modLowestCellTemp = module[index].moduleId;
 80081cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80081d0:	4a29      	ldr	r2, [pc, #164]	; (8008278 <MCU_UpdateStats+0x5f0>)
 80081d2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80081d6:	fb01 f303 	mul.w	r3, r1, r3
 80081da:	4413      	add	r3, r2
 80081dc:	3308      	adds	r3, #8
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	763b      	strb	r3, [r7, #24]
      }
      activeModules++; // a module that is flagged overcurrent in the preceeeding code is still active atm until it gets sent the standby
 80081e2:	7efb      	ldrb	r3, [r7, #27]
 80081e4:	3301      	adds	r3, #1
 80081e6:	76fb      	strb	r3, [r7, #27]
  for(index = 0; index < pack.moduleCount; index++){
 80081e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80081ec:	3301      	adds	r3, #1
 80081ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80081f2:	4b25      	ldr	r3, [pc, #148]	; (8008288 <MCU_UpdateStats+0x600>)
 80081f4:	7d1b      	ldrb	r3, [r3, #20]
 80081f6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80081fa:	429a      	cmp	r2, r3
 80081fc:	f4ff ad83 	bcc.w	8007d06 <MCU_UpdateStats+0x7e>
    }
  }
  // Pack active module count
  pack.activeModules = activeModules;
 8008200:	4a21      	ldr	r2, [pc, #132]	; (8008288 <MCU_UpdateStats+0x600>)
 8008202:	7efb      	ldrb	r3, [r7, #27]
 8008204:	75d3      	strb	r3, [r2, #23]

  // Pack faulted module count
  pack.faultedModules = pack.moduleCount - pack.activeModules;
 8008206:	4b20      	ldr	r3, [pc, #128]	; (8008288 <MCU_UpdateStats+0x600>)
 8008208:	7d1a      	ldrb	r2, [r3, #20]
 800820a:	4b1f      	ldr	r3, [pc, #124]	; (8008288 <MCU_UpdateStats+0x600>)
 800820c:	7ddb      	ldrb	r3, [r3, #23]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	b2da      	uxtb	r2, r3
 8008212:	4b1d      	ldr	r3, [pc, #116]	; (8008288 <MCU_UpdateStats+0x600>)
 8008214:	761a      	strb	r2, [r3, #24]

  // Pack Voltage and Current
  if (modulesOn > 0){
 8008216:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8087 	beq.w	800832e <MCU_UpdateStats+0x6a6>
    pack.voltage = voltage / modulesOn;
 8008220:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008224:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008226:	fbb2 f3f3 	udiv	r3, r2, r3
 800822a:	b29a      	uxth	r2, r3
 800822c:	4b16      	ldr	r3, [pc, #88]	; (8008288 <MCU_UpdateStats+0x600>)
 800822e:	819a      	strh	r2, [r3, #12]
    //Check for max/min current out of range - set to min/max and flag error
    if(totalCurrent > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008230:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8008234:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800828c <MCU_UpdateStats+0x604>
 8008238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800823c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008240:	dd32      	ble.n	80082a8 <MCU_UpdateStats+0x620>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %.2fA)",totalCurrent, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008242:	4b0e      	ldr	r3, [pc, #56]	; (800827c <MCU_UpdateStats+0x5f4>)
 8008244:	781b      	ldrb	r3, [r3, #0]
 8008246:	f003 0303 	and.w	r3, r3, #3
 800824a:	2b03      	cmp	r3, #3
 800824c:	d129      	bne.n	80082a2 <MCU_UpdateStats+0x61a>
 800824e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008250:	f7f8 f95c 	bl	800050c <__aeabi_f2d>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	a105      	add	r1, pc, #20	; (adr r1, 8008270 <MCU_UpdateStats+0x5e8>)
 800825a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800825e:	e9cd 0100 	strd	r0, r1, [sp]
 8008262:	490b      	ldr	r1, [pc, #44]	; (8008290 <MCU_UpdateStats+0x608>)
 8008264:	4807      	ldr	r0, [pc, #28]	; (8008284 <MCU_UpdateStats+0x5fc>)
 8008266:	f00c fa15 	bl	8014694 <siprintf>
 800826a:	e017      	b.n	800829c <MCU_UpdateStats+0x614>
 800826c:	f3af 8000 	nop.w
 8008270:	00000000 	.word	0x00000000
 8008274:	409a3300 	.word	0x409a3300
 8008278:	20000dec 	.word	0x20000dec
 800827c:	2000000c 	.word	0x2000000c
 8008280:	0801809c 	.word	0x0801809c
 8008284:	20000b64 	.word	0x20000b64
 8008288:	2000a66c 	.word	0x2000a66c
 800828c:	44d19800 	.word	0x44d19800
 8008290:	080180ec 	.word	0x080180ec
 8008294:	33333333 	.word	0x33333333
 8008298:	3fd33333 	.word	0x3fd33333
 800829c:	48b0      	ldr	r0, [pc, #704]	; (8008560 <MCU_UpdateStats+0x8d8>)
 800829e:	f7fd f9b3 	bl	8005608 <serialOut>
      totalCurrent = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 80082a2:	4bb0      	ldr	r3, [pc, #704]	; (8008564 <MCU_UpdateStats+0x8dc>)
 80082a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082a6:	e01e      	b.n	80082e6 <MCU_UpdateStats+0x65e>
    }
    else if(totalCurrent < PACK_CURRENT_BASE){
 80082a8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80082ac:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8008568 <MCU_UpdateStats+0x8e0>
 80082b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80082b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b8:	d515      	bpl.n	80082e6 <MCU_UpdateStats+0x65e>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total current (%.2fA) exceeds specification (max %dA)",totalCurrent, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 80082ba:	4bac      	ldr	r3, [pc, #688]	; (800856c <MCU_UpdateStats+0x8e4>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	f003 0303 	and.w	r3, r3, #3
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d10d      	bne.n	80082e2 <MCU_UpdateStats+0x65a>
 80082c6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082c8:	f7f8 f920 	bl	800050c <__aeabi_f2d>
 80082cc:	4602      	mov	r2, r0
 80082ce:	460b      	mov	r3, r1
 80082d0:	49a7      	ldr	r1, [pc, #668]	; (8008570 <MCU_UpdateStats+0x8e8>)
 80082d2:	9100      	str	r1, [sp, #0]
 80082d4:	49a7      	ldr	r1, [pc, #668]	; (8008574 <MCU_UpdateStats+0x8ec>)
 80082d6:	48a2      	ldr	r0, [pc, #648]	; (8008560 <MCU_UpdateStats+0x8d8>)
 80082d8:	f00c f9dc 	bl	8014694 <siprintf>
 80082dc:	48a0      	ldr	r0, [pc, #640]	; (8008560 <MCU_UpdateStats+0x8d8>)
 80082de:	f7fd f993 	bl	8005608 <serialOut>
      totalCurrent = PACK_CURRENT_BASE;
 80082e2:	4ba5      	ldr	r3, [pc, #660]	; (8008578 <MCU_UpdateStats+0x8f0>)
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    // value is now within limits
    packCurrent = (totalCurrent/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80082e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80082e8:	f7f8 f910 	bl	800050c <__aeabi_f2d>
 80082ec:	a398      	add	r3, pc, #608	; (adr r3, 8008550 <MCU_UpdateStats+0x8c8>)
 80082ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f2:	f7f8 fa8d 	bl	8000810 <__aeabi_ddiv>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4610      	mov	r0, r2
 80082fc:	4619      	mov	r1, r3
 80082fe:	f04f 0200 	mov.w	r2, #0
 8008302:	4b9e      	ldr	r3, [pc, #632]	; (800857c <MCU_UpdateStats+0x8f4>)
 8008304:	f7f7 ffa4 	bl	8000250 <__adddf3>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4610      	mov	r0, r2
 800830e:	4619      	mov	r1, r3
 8008310:	f7f8 fc4c 	bl	8000bac <__aeabi_d2f>
 8008314:	4603      	mov	r3, r0
 8008316:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008318:	edd7 7a01 	vldr	s15, [r7, #4]
 800831c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008320:	ee17 3a90 	vmov	r3, s15
 8008324:	b29b      	uxth	r3, r3
 8008326:	461a      	mov	r2, r3
 8008328:	4b95      	ldr	r3, [pc, #596]	; (8008580 <MCU_UpdateStats+0x8f8>)
 800832a:	611a      	str	r2, [r3, #16]
 800832c:	e00e      	b.n	800834c <MCU_UpdateStats+0x6c4>

  }else{
    pack.voltage = 0;
 800832e:	4b94      	ldr	r3, [pc, #592]	; (8008580 <MCU_UpdateStats+0x8f8>)
 8008330:	2200      	movs	r2, #0
 8008332:	819a      	strh	r2, [r3, #12]
    packCurrent = (0 / PACK_CURRENT_FACTOR) - (PACK_CURRENT_BASE / PACK_CURRENT_FACTOR); // 0 Amps converted.
 8008334:	4b93      	ldr	r3, [pc, #588]	; (8008584 <MCU_UpdateStats+0x8fc>)
 8008336:	607b      	str	r3, [r7, #4]
    pack.current = (uint16_t) packCurrent;
 8008338:	edd7 7a01 	vldr	s15, [r7, #4]
 800833c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008340:	ee17 3a90 	vmov	r3, s15
 8008344:	b29b      	uxth	r3, r3
 8008346:	461a      	mov	r2, r3
 8008348:	4b8d      	ldr	r3, [pc, #564]	; (8008580 <MCU_UpdateStats+0x8f8>)
 800834a:	611a      	str	r2, [r3, #16]
  }

  // Maximum Pack charge/discharge current and end voltage
  if(maxChargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 800834c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008350:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8008588 <MCU_UpdateStats+0x900>
 8008354:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835c:	dd19      	ble.n	8008392 <MCU_UpdateStats+0x70a>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %.2fA)",maxChargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 800835e:	4b83      	ldr	r3, [pc, #524]	; (800856c <MCU_UpdateStats+0x8e4>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	2b03      	cmp	r3, #3
 8008368:	d110      	bne.n	800838c <MCU_UpdateStats+0x704>
 800836a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800836c:	f7f8 f8ce 	bl	800050c <__aeabi_f2d>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	a178      	add	r1, pc, #480	; (adr r1, 8008558 <MCU_UpdateStats+0x8d0>)
 8008376:	e9d1 0100 	ldrd	r0, r1, [r1]
 800837a:	e9cd 0100 	strd	r0, r1, [sp]
 800837e:	4983      	ldr	r1, [pc, #524]	; (800858c <MCU_UpdateStats+0x904>)
 8008380:	4877      	ldr	r0, [pc, #476]	; (8008560 <MCU_UpdateStats+0x8d8>)
 8008382:	f00c f987 	bl	8014694 <siprintf>
 8008386:	4876      	ldr	r0, [pc, #472]	; (8008560 <MCU_UpdateStats+0x8d8>)
 8008388:	f7fd f93e 	bl	8005608 <serialOut>
    maxChargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 800838c:	4b75      	ldr	r3, [pc, #468]	; (8008564 <MCU_UpdateStats+0x8dc>)
 800838e:	627b      	str	r3, [r7, #36]	; 0x24
 8008390:	e01e      	b.n	80083d0 <MCU_UpdateStats+0x748>
  }else if(maxChargeA < PACK_CURRENT_BASE){
 8008392:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008396:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8008568 <MCU_UpdateStats+0x8e0>
 800839a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083a2:	d515      	bpl.n	80083d0 <MCU_UpdateStats+0x748>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxChargeA (%.2fA) exceeds specification (max %dA)",maxChargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 80083a4:	4b71      	ldr	r3, [pc, #452]	; (800856c <MCU_UpdateStats+0x8e4>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d10d      	bne.n	80083cc <MCU_UpdateStats+0x744>
 80083b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083b2:	f7f8 f8ab 	bl	800050c <__aeabi_f2d>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	496d      	ldr	r1, [pc, #436]	; (8008570 <MCU_UpdateStats+0x8e8>)
 80083bc:	9100      	str	r1, [sp, #0]
 80083be:	4974      	ldr	r1, [pc, #464]	; (8008590 <MCU_UpdateStats+0x908>)
 80083c0:	4867      	ldr	r0, [pc, #412]	; (8008560 <MCU_UpdateStats+0x8d8>)
 80083c2:	f00c f967 	bl	8014694 <siprintf>
 80083c6:	4866      	ldr	r0, [pc, #408]	; (8008560 <MCU_UpdateStats+0x8d8>)
 80083c8:	f7fd f91e 	bl	8005608 <serialOut>
    maxChargeA = PACK_CURRENT_BASE;
 80083cc:	4b6a      	ldr	r3, [pc, #424]	; (8008578 <MCU_UpdateStats+0x8f0>)
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  // value is within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80083d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083d2:	f7f8 f89b 	bl	800050c <__aeabi_f2d>
 80083d6:	a35e      	add	r3, pc, #376	; (adr r3, 8008550 <MCU_UpdateStats+0x8c8>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f7f8 fa18 	bl	8000810 <__aeabi_ddiv>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4610      	mov	r0, r2
 80083e6:	4619      	mov	r1, r3
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	4b63      	ldr	r3, [pc, #396]	; (800857c <MCU_UpdateStats+0x8f4>)
 80083ee:	f7f7 ff2f 	bl	8000250 <__adddf3>
 80083f2:	4602      	mov	r2, r0
 80083f4:	460b      	mov	r3, r1
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	f7f8 fbb7 	bl	8000b6c <__aeabi_d2uiz>
 80083fe:	4603      	mov	r3, r0
 8008400:	4a5f      	ldr	r2, [pc, #380]	; (8008580 <MCU_UpdateStats+0x8f8>)
 8008402:	6353      	str	r3, [r2, #52]	; 0x34

  // Maximum Pack charge/discharge current and end voltage
  if(maxDischargeA > (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))){
 8008404:	edd7 7a08 	vldr	s15, [r7, #32]
 8008408:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8008588 <MCU_UpdateStats+0x900>
 800840c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008414:	dd19      	ble.n	800844a <MCU_UpdateStats+0x7c2>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %.2fA)",maxDischargeA, (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR))); serialOut(tempBuffer);}
 8008416:	4b55      	ldr	r3, [pc, #340]	; (800856c <MCU_UpdateStats+0x8e4>)
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	f003 0303 	and.w	r3, r3, #3
 800841e:	2b03      	cmp	r3, #3
 8008420:	d110      	bne.n	8008444 <MCU_UpdateStats+0x7bc>
 8008422:	6a38      	ldr	r0, [r7, #32]
 8008424:	f7f8 f872 	bl	800050c <__aeabi_f2d>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	a14a      	add	r1, pc, #296	; (adr r1, 8008558 <MCU_UpdateStats+0x8d0>)
 800842e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008432:	e9cd 0100 	strd	r0, r1, [sp]
 8008436:	4957      	ldr	r1, [pc, #348]	; (8008594 <MCU_UpdateStats+0x90c>)
 8008438:	4849      	ldr	r0, [pc, #292]	; (8008560 <MCU_UpdateStats+0x8d8>)
 800843a:	f00c f92b 	bl	8014694 <siprintf>
 800843e:	4848      	ldr	r0, [pc, #288]	; (8008560 <MCU_UpdateStats+0x8d8>)
 8008440:	f7fd f8e2 	bl	8005608 <serialOut>
    maxDischargeA = (PACK_CURRENT_BASE + (65535 * PACK_CURRENT_FACTOR));
 8008444:	4b47      	ldr	r3, [pc, #284]	; (8008564 <MCU_UpdateStats+0x8dc>)
 8008446:	623b      	str	r3, [r7, #32]
 8008448:	e01e      	b.n	8008488 <MCU_UpdateStats+0x800>
  }else if(maxDischargeA < PACK_CURRENT_BASE){
 800844a:	edd7 7a08 	vldr	s15, [r7, #32]
 800844e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8008568 <MCU_UpdateStats+0x8e0>
 8008452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800845a:	d515      	bpl.n	8008488 <MCU_UpdateStats+0x800>
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Total maxDischargeA (%.2fA) exceeds specification (max %dA)",maxDischargeA, PACK_CURRENT_BASE); serialOut(tempBuffer);}
 800845c:	4b43      	ldr	r3, [pc, #268]	; (800856c <MCU_UpdateStats+0x8e4>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f003 0303 	and.w	r3, r3, #3
 8008464:	2b03      	cmp	r3, #3
 8008466:	d10d      	bne.n	8008484 <MCU_UpdateStats+0x7fc>
 8008468:	6a38      	ldr	r0, [r7, #32]
 800846a:	f7f8 f84f 	bl	800050c <__aeabi_f2d>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	493f      	ldr	r1, [pc, #252]	; (8008570 <MCU_UpdateStats+0x8e8>)
 8008474:	9100      	str	r1, [sp, #0]
 8008476:	4948      	ldr	r1, [pc, #288]	; (8008598 <MCU_UpdateStats+0x910>)
 8008478:	4839      	ldr	r0, [pc, #228]	; (8008560 <MCU_UpdateStats+0x8d8>)
 800847a:	f00c f90b 	bl	8014694 <siprintf>
 800847e:	4838      	ldr	r0, [pc, #224]	; (8008560 <MCU_UpdateStats+0x8d8>)
 8008480:	f7fd f8c2 	bl	8005608 <serialOut>
    maxDischargeA = PACK_CURRENT_BASE;
 8008484:	4b3c      	ldr	r3, [pc, #240]	; (8008578 <MCU_UpdateStats+0x8f0>)
 8008486:	623b      	str	r3, [r7, #32]
  }
  // value is now within limits
  pack.maxChargeA = (maxChargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 8008488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800848a:	f7f8 f83f 	bl	800050c <__aeabi_f2d>
 800848e:	a330      	add	r3, pc, #192	; (adr r3, 8008550 <MCU_UpdateStats+0x8c8>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f8 f9bc 	bl	8000810 <__aeabi_ddiv>
 8008498:	4602      	mov	r2, r0
 800849a:	460b      	mov	r3, r1
 800849c:	4610      	mov	r0, r2
 800849e:	4619      	mov	r1, r3
 80084a0:	f04f 0200 	mov.w	r2, #0
 80084a4:	4b35      	ldr	r3, [pc, #212]	; (800857c <MCU_UpdateStats+0x8f4>)
 80084a6:	f7f7 fed3 	bl	8000250 <__adddf3>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	4610      	mov	r0, r2
 80084b0:	4619      	mov	r1, r3
 80084b2:	f7f8 fb5b 	bl	8000b6c <__aeabi_d2uiz>
 80084b6:	4603      	mov	r3, r0
 80084b8:	4a31      	ldr	r2, [pc, #196]	; (8008580 <MCU_UpdateStats+0x8f8>)
 80084ba:	6353      	str	r3, [r2, #52]	; 0x34
  pack.maxDischargeA = (maxDischargeA/PACK_CURRENT_FACTOR)-(PACK_CURRENT_BASE/PACK_CURRENT_FACTOR);
 80084bc:	6a38      	ldr	r0, [r7, #32]
 80084be:	f7f8 f825 	bl	800050c <__aeabi_f2d>
 80084c2:	a323      	add	r3, pc, #140	; (adr r3, 8008550 <MCU_UpdateStats+0x8c8>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	f7f8 f9a2 	bl	8000810 <__aeabi_ddiv>
 80084cc:	4602      	mov	r2, r0
 80084ce:	460b      	mov	r3, r1
 80084d0:	4610      	mov	r0, r2
 80084d2:	4619      	mov	r1, r3
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	4b28      	ldr	r3, [pc, #160]	; (800857c <MCU_UpdateStats+0x8f4>)
 80084da:	f7f7 feb9 	bl	8000250 <__adddf3>
 80084de:	4602      	mov	r2, r0
 80084e0:	460b      	mov	r3, r1
 80084e2:	4610      	mov	r0, r2
 80084e4:	4619      	mov	r1, r3
 80084e6:	f7f8 fb41 	bl	8000b6c <__aeabi_d2uiz>
 80084ea:	4603      	mov	r3, r0
 80084ec:	4a24      	ldr	r2, [pc, #144]	; (8008580 <MCU_UpdateStats+0x8f8>)
 80084ee:	6393      	str	r3, [r2, #56]	; 0x38

  if(pack.activeModules > 0) pack.maxChargeEndV = totalMaxChargeEndV / pack.activeModules;
 80084f0:	4b23      	ldr	r3, [pc, #140]	; (8008580 <MCU_UpdateStats+0x8f8>)
 80084f2:	7ddb      	ldrb	r3, [r3, #23]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d009      	beq.n	800850c <MCU_UpdateStats+0x884>
 80084f8:	4b21      	ldr	r3, [pc, #132]	; (8008580 <MCU_UpdateStats+0x8f8>)
 80084fa:	7ddb      	ldrb	r3, [r3, #23]
 80084fc:	461a      	mov	r2, r3
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	fbb3 f3f2 	udiv	r3, r3, r2
 8008504:	b29a      	uxth	r2, r3
 8008506:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <MCU_UpdateStats+0x8f8>)
 8008508:	879a      	strh	r2, [r3, #60]	; 0x3c
 800850a:	e002      	b.n	8008512 <MCU_UpdateStats+0x88a>
  else pack.maxChargeEndV = 0;
 800850c:	4b1c      	ldr	r3, [pc, #112]	; (8008580 <MCU_UpdateStats+0x8f8>)
 800850e:	2200      	movs	r2, #0
 8008510:	879a      	strh	r2, [r3, #60]	; 0x3c

  // Pack SOC = SOC of weakest module
  if(pack.activeModules > 0 && lowestSoc < 255) pack.soc = lowestSoc;
 8008512:	4b1b      	ldr	r3, [pc, #108]	; (8008580 <MCU_UpdateStats+0x8f8>)
 8008514:	7ddb      	ldrb	r3, [r3, #23]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d008      	beq.n	800852c <MCU_UpdateStats+0x8a4>
 800851a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800851c:	2bfe      	cmp	r3, #254	; 0xfe
 800851e:	d805      	bhi.n	800852c <MCU_UpdateStats+0x8a4>
 8008520:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008522:	b2da      	uxtb	r2, r3
 8008524:	4b16      	ldr	r3, [pc, #88]	; (8008580 <MCU_UpdateStats+0x8f8>)
 8008526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800852a:	e003      	b.n	8008534 <MCU_UpdateStats+0x8ac>
  else pack.soc = 0;
 800852c:	4b14      	ldr	r3, [pc, #80]	; (8008580 <MCU_UpdateStats+0x8f8>)
 800852e:	2200      	movs	r2, #0
 8008530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  // Pack SOH = SOH of weakest module
  if(pack.activeModules > 0 && lowestSoh < 255) pack.soh = lowestSoh;
 8008534:	4b12      	ldr	r3, [pc, #72]	; (8008580 <MCU_UpdateStats+0x8f8>)
 8008536:	7ddb      	ldrb	r3, [r3, #23]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d02f      	beq.n	800859c <MCU_UpdateStats+0x914>
 800853c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800853e:	2bfe      	cmp	r3, #254	; 0xfe
 8008540:	d82c      	bhi.n	800859c <MCU_UpdateStats+0x914>
 8008542:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008544:	b2da      	uxtb	r2, r3
 8008546:	4b0e      	ldr	r3, [pc, #56]	; (8008580 <MCU_UpdateStats+0x8f8>)
 8008548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800854c:	e02a      	b.n	80085a4 <MCU_UpdateStats+0x91c>
 800854e:	bf00      	nop
 8008550:	9999999a 	.word	0x9999999a
 8008554:	3fa99999 	.word	0x3fa99999
 8008558:	00000000 	.word	0x00000000
 800855c:	409a3300 	.word	0x409a3300
 8008560:	20000b64 	.word	0x20000b64
 8008564:	44d19800 	.word	0x44d19800
 8008568:	c4c80000 	.word	0xc4c80000
 800856c:	2000000c 	.word	0x2000000c
 8008570:	fffff9c0 	.word	0xfffff9c0
 8008574:	08018130 	.word	0x08018130
 8008578:	c4c80000 	.word	0xc4c80000
 800857c:	40df4000 	.word	0x40df4000
 8008580:	2000a66c 	.word	0x2000a66c
 8008584:	46fa0000 	.word	0x46fa0000
 8008588:	44d19800 	.word	0x44d19800
 800858c:	08018174 	.word	0x08018174
 8008590:	080181bc 	.word	0x080181bc
 8008594:	08018204 	.word	0x08018204
 8008598:	08018250 	.word	0x08018250
  else pack.soh = 0;
 800859c:	4b2f      	ldr	r3, [pc, #188]	; (800865c <MCU_UpdateStats+0x9d4>)
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  // Pack Cell Avg Volt
  if(pack.activeModules > 0) pack.cellAvgVolt = totalAvgCellVolt / pack.activeModules;
 80085a4:	4b2d      	ldr	r3, [pc, #180]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085a6:	7ddb      	ldrb	r3, [r3, #23]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d009      	beq.n	80085c0 <MCU_UpdateStats+0x938>
 80085ac:	4b2b      	ldr	r3, [pc, #172]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085ae:	7ddb      	ldrb	r3, [r3, #23]
 80085b0:	461a      	mov	r2, r3
 80085b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085b8:	b29a      	uxth	r2, r3
 80085ba:	4b28      	ldr	r3, [pc, #160]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085bc:	861a      	strh	r2, [r3, #48]	; 0x30
 80085be:	e002      	b.n	80085c6 <MCU_UpdateStats+0x93e>
  else pack.cellAvgVolt = 0;
 80085c0:	4b26      	ldr	r3, [pc, #152]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085c2:	2200      	movs	r2, #0
 80085c4:	861a      	strh	r2, [r3, #48]	; 0x30

  // Pack Hi/Lo Cell Volt
  pack.cellHiVolt = highestCellVolt;
 80085c6:	4a25      	ldr	r2, [pc, #148]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085c8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80085ca:	8513      	strh	r3, [r2, #40]	; 0x28
  pack.modCellHiVolt = modHighestCellVolt;
 80085cc:	4a23      	ldr	r2, [pc, #140]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085ce:	7e7b      	ldrb	r3, [r7, #25]
 80085d0:	f882 302a 	strb.w	r3, [r2, #42]	; 0x2a
  if (lowestCellVolt < 65535){
 80085d4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085da:	4293      	cmp	r3, r2
 80085dc:	d007      	beq.n	80085ee <MCU_UpdateStats+0x966>
    pack.cellLoVolt = lowestCellVolt;
 80085de:	4a1f      	ldr	r2, [pc, #124]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80085e2:	8593      	strh	r3, [r2, #44]	; 0x2c
    pack.modCellLoVolt = modLowestCellVolt;
 80085e4:	4a1d      	ldr	r2, [pc, #116]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085e6:	7ebb      	ldrb	r3, [r7, #26]
 80085e8:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
 80085ec:	e006      	b.n	80085fc <MCU_UpdateStats+0x974>
  }
  else{
    pack.cellLoVolt = 0;
 80085ee:	4b1b      	ldr	r3, [pc, #108]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	859a      	strh	r2, [r3, #44]	; 0x2c
    pack.modCellLoVolt = 0;
 80085f4:	4b19      	ldr	r3, [pc, #100]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  }

  // Pack Cell Avg Temp
  if(pack.activeModules > 0) pack.cellAvgTemp = totalAvgCellTemp / pack.activeModules;
 80085fc:	4b17      	ldr	r3, [pc, #92]	; (800865c <MCU_UpdateStats+0x9d4>)
 80085fe:	7ddb      	ldrb	r3, [r3, #23]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d009      	beq.n	8008618 <MCU_UpdateStats+0x990>
 8008604:	4b15      	ldr	r3, [pc, #84]	; (800865c <MCU_UpdateStats+0x9d4>)
 8008606:	7ddb      	ldrb	r3, [r3, #23]
 8008608:	461a      	mov	r2, r3
 800860a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800860c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008610:	b29a      	uxth	r2, r3
 8008612:	4b12      	ldr	r3, [pc, #72]	; (800865c <MCU_UpdateStats+0x9d4>)
 8008614:	84da      	strh	r2, [r3, #38]	; 0x26
 8008616:	e002      	b.n	800861e <MCU_UpdateStats+0x996>
  else pack.cellAvgTemp = 0; //-55 degrees!
 8008618:	4b10      	ldr	r3, [pc, #64]	; (800865c <MCU_UpdateStats+0x9d4>)
 800861a:	2200      	movs	r2, #0
 800861c:	84da      	strh	r2, [r3, #38]	; 0x26

  // Pack Hi/Lo Cell Temp
  pack.cellHiTemp = highestCellTemp;
 800861e:	4a0f      	ldr	r2, [pc, #60]	; (800865c <MCU_UpdateStats+0x9d4>)
 8008620:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008622:	83d3      	strh	r3, [r2, #30]
  pack.modCellHiTemp = modHighestCellTemp;
 8008624:	4a0d      	ldr	r2, [pc, #52]	; (800865c <MCU_UpdateStats+0x9d4>)
 8008626:	7dfb      	ldrb	r3, [r7, #23]
 8008628:	f882 3020 	strb.w	r3, [r2, #32]
  if (lowestCellTemp < 65535){
 800862c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800862e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008632:	4293      	cmp	r3, r2
 8008634:	d007      	beq.n	8008646 <MCU_UpdateStats+0x9be>
    pack.cellLoTemp = lowestCellTemp;
 8008636:	4a09      	ldr	r2, [pc, #36]	; (800865c <MCU_UpdateStats+0x9d4>)
 8008638:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800863a:	8453      	strh	r3, [r2, #34]	; 0x22
    pack.modCellLoTemp = modLowestCellTemp;
 800863c:	4a07      	ldr	r2, [pc, #28]	; (800865c <MCU_UpdateStats+0x9d4>)
 800863e:	7e3b      	ldrb	r3, [r7, #24]
 8008640:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
  else{
    pack.cellLoTemp = 0; //-55 degrees!
    pack.modCellLoTemp = 0;
  }
}
 8008644:	e006      	b.n	8008654 <MCU_UpdateStats+0x9cc>
    pack.cellLoTemp = 0; //-55 degrees!
 8008646:	4b05      	ldr	r3, [pc, #20]	; (800865c <MCU_UpdateStats+0x9d4>)
 8008648:	2200      	movs	r2, #0
 800864a:	845a      	strh	r2, [r3, #34]	; 0x22
    pack.modCellLoTemp = 0;
 800864c:	4b03      	ldr	r3, [pc, #12]	; (800865c <MCU_UpdateStats+0x9d4>)
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8008654:	bf00      	nop
 8008656:	3748      	adds	r7, #72	; 0x48
 8008658:	46bd      	mov	sp, r7
 800865a:	bdb0      	pop	{r4, r5, r7, pc}
 800865c:	2000a66c 	.word	0x2000a66c

08008660 <MCU_ReceiveMessages>:

/***************************************************************************************************************
*     M C U _ R e c e i v e M e s s a g e s                                       P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ReceiveMessages(void)
{
 8008660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008662:	b08b      	sub	sp, #44	; 0x2c
 8008664:	af08      	add	r7, sp, #32

  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 8008666:	4a64      	ldr	r2, [pc, #400]	; (80087f8 <MCU_ReceiveMessages+0x198>)
 8008668:	2101      	movs	r1, #1
 800866a:	2001      	movs	r0, #1
 800866c:	f7fa f8be 	bl	80027ec <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8008670:	e0b6      	b.n	80087e0 <MCU_ReceiveMessages+0x180>

    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN2, MCU_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8008672:	2340      	movs	r3, #64	; 0x40
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	4b61      	ldr	r3, [pc, #388]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 8008678:	4a61      	ldr	r2, [pc, #388]	; (8008800 <MCU_ReceiveMessages+0x1a0>)
 800867a:	2101      	movs	r1, #1
 800867c:	2001      	movs	r0, #1
 800867e:	f7f9 ff19 	bl	80024b4 <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_MCU + DBG_VERBOSE)) == (DBG_MCU + DBG_VERBOSE) ){ sprintf(tempBuffer,"MCU RX ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008682:	4b60      	ldr	r3, [pc, #384]	; (8008804 <MCU_ReceiveMessages+0x1a4>)
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	f003 030a 	and.w	r3, r3, #10
 800868a:	2b0a      	cmp	r3, #10
 800868c:	d133      	bne.n	80086f6 <MCU_ReceiveMessages+0x96>
 800868e:	4b5c      	ldr	r3, [pc, #368]	; (8008800 <MCU_ReceiveMessages+0x1a0>)
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008696:	b29b      	uxth	r3, r3
 8008698:	469c      	mov	ip, r3
 800869a:	4b59      	ldr	r3, [pc, #356]	; (8008800 <MCU_ReceiveMessages+0x1a0>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80086a2:	469e      	mov	lr, r3
 80086a4:	4b55      	ldr	r3, [pc, #340]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	461a      	mov	r2, r3
 80086aa:	4b54      	ldr	r3, [pc, #336]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	4619      	mov	r1, r3
 80086b0:	4b52      	ldr	r3, [pc, #328]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086b2:	789b      	ldrb	r3, [r3, #2]
 80086b4:	4618      	mov	r0, r3
 80086b6:	4b51      	ldr	r3, [pc, #324]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086b8:	78db      	ldrb	r3, [r3, #3]
 80086ba:	461c      	mov	r4, r3
 80086bc:	4b4f      	ldr	r3, [pc, #316]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086be:	791b      	ldrb	r3, [r3, #4]
 80086c0:	461d      	mov	r5, r3
 80086c2:	4b4e      	ldr	r3, [pc, #312]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086c4:	795b      	ldrb	r3, [r3, #5]
 80086c6:	461e      	mov	r6, r3
 80086c8:	4b4c      	ldr	r3, [pc, #304]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086ca:	799b      	ldrb	r3, [r3, #6]
 80086cc:	607b      	str	r3, [r7, #4]
 80086ce:	4b4b      	ldr	r3, [pc, #300]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80086d0:	79db      	ldrb	r3, [r3, #7]
 80086d2:	9307      	str	r3, [sp, #28]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	9306      	str	r3, [sp, #24]
 80086d8:	9605      	str	r6, [sp, #20]
 80086da:	9504      	str	r5, [sp, #16]
 80086dc:	9403      	str	r4, [sp, #12]
 80086de:	9002      	str	r0, [sp, #8]
 80086e0:	9101      	str	r1, [sp, #4]
 80086e2:	9200      	str	r2, [sp, #0]
 80086e4:	4673      	mov	r3, lr
 80086e6:	4662      	mov	r2, ip
 80086e8:	4947      	ldr	r1, [pc, #284]	; (8008808 <MCU_ReceiveMessages+0x1a8>)
 80086ea:	4848      	ldr	r0, [pc, #288]	; (800880c <MCU_ReceiveMessages+0x1ac>)
 80086ec:	f00b ffd2 	bl	8014694 <siprintf>
 80086f0:	4846      	ldr	r0, [pc, #280]	; (800880c <MCU_ReceiveMessages+0x1ac>)
 80086f2:	f7fc ff89 	bl	8005608 <serialOut>

    switch (rxObj.bF.id.SID) {
 80086f6:	4b42      	ldr	r3, [pc, #264]	; (8008800 <MCU_ReceiveMessages+0x1a0>)
 80086f8:	881b      	ldrh	r3, [r3, #0]
 80086fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80086fe:	b29b      	uxth	r3, r3
 8008700:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 8008704:	2b07      	cmp	r3, #7
 8008706:	d82b      	bhi.n	8008760 <MCU_ReceiveMessages+0x100>
 8008708:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <MCU_ReceiveMessages+0xb0>)
 800870a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870e:	bf00      	nop
 8008710:	08008731 	.word	0x08008731
 8008714:	0800873d 	.word	0x0800873d
 8008718:	08008743 	.word	0x08008743
 800871c:	08008749 	.word	0x08008749
 8008720:	0800874f 	.word	0x0800874f
 8008724:	08008737 	.word	0x08008737
 8008728:	08008755 	.word	0x08008755
 800872c:	0800875b 	.word	0x0800875b
      case ID_MODULE_ANNOUNCEMENT:
        // Announcement from module - register it
        MCU_RegisterModule();
 8008730:	f000 f8ce 	bl	80088d0 <MCU_RegisterModule>
        break;
 8008734:	e04f      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_DETAIL:
        // Cell Information from module - process it
        MCU_ProcessCellDetail();
 8008736:	f001 fef7 	bl	800a528 <MCU_ProcessCellDetail>
        break;
 800873a:	e04c      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_HARDWARE:
        MCU_ProcessModuleHardware();
 800873c:	f000 fc3c 	bl	8008fb8 <MCU_ProcessModuleHardware>
        break;
 8008740:	e049      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_1:
        // Status packet from module - process it
        MCU_ProcessModuleStatus1();
 8008742:	f001 f80d 	bl	8009760 <MCU_ProcessModuleStatus1>
        break;
 8008746:	e046      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_2:
        // Status packet from module - process it
        MCU_ProcessModuleStatus2();
 8008748:	f001 fa92 	bl	8009c70 <MCU_ProcessModuleStatus2>
        break;
 800874c:	e043      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_STATUS_3:
        // Status packet from module - process it
        MCU_ProcessModuleStatus3();
 800874e:	f001 fc03 	bl	8009f58 <MCU_ProcessModuleStatus3>
        break;
 8008752:	e040      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_TIME_REQUEST:
        // Module is requesting time
        MCU_ProcessModuleTime();
 8008754:	f000 fb1e 	bl	8008d94 <MCU_ProcessModuleTime>
        break;
 8008758:	e03d      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      case ID_MODULE_CELL_COMM_STATUS1:
        // Cell communication Status #1
        MCU_ProcessCellCommStatus1();
 800875a:	f001 fd39 	bl	800a1d0 <MCU_ProcessCellCommStatus1>
        break;
 800875e:	e03a      	b.n	80087d6 <MCU_ReceiveMessages+0x176>
      default:
        // Unknown Message
         if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU RX UNKNOWN ID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",rxObj.bF.id.SID,rxObj.bF.id.EID,rxd[0],rxd[1],rxd[2],rxd[3],rxd[4],rxd[5],rxd[6],rxd[7]); serialOut(tempBuffer);}
 8008760:	4b28      	ldr	r3, [pc, #160]	; (8008804 <MCU_ReceiveMessages+0x1a4>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f003 0303 	and.w	r3, r3, #3
 8008768:	2b03      	cmp	r3, #3
 800876a:	d133      	bne.n	80087d4 <MCU_ReceiveMessages+0x174>
 800876c:	4b24      	ldr	r3, [pc, #144]	; (8008800 <MCU_ReceiveMessages+0x1a0>)
 800876e:	881b      	ldrh	r3, [r3, #0]
 8008770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008774:	b29b      	uxth	r3, r3
 8008776:	469c      	mov	ip, r3
 8008778:	4b21      	ldr	r3, [pc, #132]	; (8008800 <MCU_ReceiveMessages+0x1a0>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8008780:	469e      	mov	lr, r3
 8008782:	4b1e      	ldr	r3, [pc, #120]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 800878a:	785b      	ldrb	r3, [r3, #1]
 800878c:	4619      	mov	r1, r3
 800878e:	4b1b      	ldr	r3, [pc, #108]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 8008790:	789b      	ldrb	r3, [r3, #2]
 8008792:	4618      	mov	r0, r3
 8008794:	4b19      	ldr	r3, [pc, #100]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 8008796:	78db      	ldrb	r3, [r3, #3]
 8008798:	461c      	mov	r4, r3
 800879a:	4b18      	ldr	r3, [pc, #96]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 800879c:	791b      	ldrb	r3, [r3, #4]
 800879e:	461d      	mov	r5, r3
 80087a0:	4b16      	ldr	r3, [pc, #88]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80087a2:	795b      	ldrb	r3, [r3, #5]
 80087a4:	461e      	mov	r6, r3
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80087a8:	799b      	ldrb	r3, [r3, #6]
 80087aa:	607b      	str	r3, [r7, #4]
 80087ac:	4b13      	ldr	r3, [pc, #76]	; (80087fc <MCU_ReceiveMessages+0x19c>)
 80087ae:	79db      	ldrb	r3, [r3, #7]
 80087b0:	9307      	str	r3, [sp, #28]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	9306      	str	r3, [sp, #24]
 80087b6:	9605      	str	r6, [sp, #20]
 80087b8:	9504      	str	r5, [sp, #16]
 80087ba:	9403      	str	r4, [sp, #12]
 80087bc:	9002      	str	r0, [sp, #8]
 80087be:	9101      	str	r1, [sp, #4]
 80087c0:	9200      	str	r2, [sp, #0]
 80087c2:	4673      	mov	r3, lr
 80087c4:	4662      	mov	r2, ip
 80087c6:	4912      	ldr	r1, [pc, #72]	; (8008810 <MCU_ReceiveMessages+0x1b0>)
 80087c8:	4810      	ldr	r0, [pc, #64]	; (800880c <MCU_ReceiveMessages+0x1ac>)
 80087ca:	f00b ff63 	bl	8014694 <siprintf>
 80087ce:	480f      	ldr	r0, [pc, #60]	; (800880c <MCU_ReceiveMessages+0x1ac>)
 80087d0:	f7fc ff1a 	bl	8005608 <serialOut>
        break;
 80087d4:	bf00      	nop
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN2, MCU_RX_FIFO, &rxFlags);
 80087d6:	4a08      	ldr	r2, [pc, #32]	; (80087f8 <MCU_ReceiveMessages+0x198>)
 80087d8:	2101      	movs	r1, #1
 80087da:	2001      	movs	r0, #1
 80087dc:	f7fa f806 	bl	80027ec <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 80087e0:	4b05      	ldr	r3, [pc, #20]	; (80087f8 <MCU_ReceiveMessages+0x198>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f47f af42 	bne.w	8008672 <MCU_ReceiveMessages+0x12>
  }
}
 80087ee:	bf00      	nop
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f8:	20000d98 	.word	0x20000d98
 80087fc:	20000da8 	.word	0x20000da8
 8008800:	20000d9c 	.word	0x20000d9c
 8008804:	2000000c 	.word	0x2000000c
 8008808:	08018298 	.word	0x08018298
 800880c:	20000b64 	.word	0x20000b64
 8008810:	080182fc 	.word	0x080182fc

08008814 <MCU_TransmitMessageQueue>:
/***************************************************************************************************************
*     M C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af02      	add	r7, sp, #8
 800881a:	4603      	mov	r3, r0
 800881c:	71fb      	strb	r3, [r7, #7]
    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800881e:	2332      	movs	r3, #50	; 0x32
 8008820:	73fb      	strb	r3, [r7, #15]

    // Check if FIFO is not full
    do {
      DRV_CANFDSPI_TransmitChannelEventGet(index, MCU_TX_FIFO, &txFlags);
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	4a21      	ldr	r2, [pc, #132]	; (80088ac <MCU_TransmitMessageQueue+0x98>)
 8008826:	2102      	movs	r1, #2
 8008828:	4618      	mov	r0, r3
 800882a:	f7f9 ffac 	bl	8002786 <DRV_CANFDSPI_TransmitChannelEventGet>
      if (attempts == 0) {
 800882e:	7bfb      	ldrb	r3, [r7, #15]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d11a      	bne.n	800886a <MCU_TransmitMessageQueue+0x56>
        Nop();
 8008834:	bf00      	nop
        Nop();
 8008836:	bf00      	nop
        DRV_CANFDSPI_ErrorCountStateGet(index, &tec, &rec, &errorFlags);
 8008838:	79f8      	ldrb	r0, [r7, #7]
 800883a:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <MCU_TransmitMessageQueue+0x9c>)
 800883c:	4a1d      	ldr	r2, [pc, #116]	; (80088b4 <MCU_TransmitMessageQueue+0xa0>)
 800883e:	491e      	ldr	r1, [pc, #120]	; (80088b8 <MCU_TransmitMessageQueue+0xa4>)
 8008840:	f7fa f85b 	bl	80028fa <DRV_CANFDSPI_ErrorCountStateGet>
        if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 8008844:	4b1d      	ldr	r3, [pc, #116]	; (80088bc <MCU_TransmitMessageQueue+0xa8>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	2b03      	cmp	r3, #3
 800884e:	d106      	bne.n	800885e <MCU_TransmitMessageQueue+0x4a>
 8008850:	491b      	ldr	r1, [pc, #108]	; (80088c0 <MCU_TransmitMessageQueue+0xac>)
 8008852:	481c      	ldr	r0, [pc, #112]	; (80088c4 <MCU_TransmitMessageQueue+0xb0>)
 8008854:	f00b ff1e 	bl	8014694 <siprintf>
 8008858:	481a      	ldr	r0, [pc, #104]	; (80088c4 <MCU_TransmitMessageQueue+0xb0>)
 800885a:	f7fc fed5 	bl	8005608 <serialOut>

        //Flush channel
        DRV_CANFDSPI_TransmitChannelFlush(index, MCU_TX_FIFO);
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	2102      	movs	r1, #2
 8008862:	4618      	mov	r0, r3
 8008864:	f7f9 fcd2 	bl	800220c <DRV_CANFDSPI_TransmitChannelFlush>

        return;
 8008868:	e01c      	b.n	80088a4 <MCU_TransmitMessageQueue+0x90>
      }
      attempts--;
 800886a:	7bfb      	ldrb	r3, [r7, #15]
 800886c:	3b01      	subs	r3, #1
 800886e:	73fb      	strb	r3, [r7, #15]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <MCU_TransmitMessageQueue+0x98>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0d2      	beq.n	8008822 <MCU_TransmitMessageQueue+0xe>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 800887c:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <MCU_TransmitMessageQueue+0xb4>)
 800887e:	791b      	ldrb	r3, [r3, #4]
 8008880:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008884:	b2db      	uxtb	r3, r3
 8008886:	4618      	mov	r0, r3
 8008888:	f7fb f844 	bl	8003914 <DRV_CANFDSPI_DlcToDataBytes>
 800888c:	4603      	mov	r3, r0
 800888e:	73bb      	strb	r3, [r7, #14]

    DRV_CANFDSPI_TransmitChannelLoad(index, MCU_TX_FIFO, &txObj, txd, n, true);
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	79f8      	ldrb	r0, [r7, #7]
 8008894:	2201      	movs	r2, #1
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	9300      	str	r3, [sp, #0]
 800889a:	4b0c      	ldr	r3, [pc, #48]	; (80088cc <MCU_TransmitMessageQueue+0xb8>)
 800889c:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <MCU_TransmitMessageQueue+0xb4>)
 800889e:	2102      	movs	r1, #2
 80088a0:	f7f9 fbc2 	bl	8002028 <DRV_CANFDSPI_TransmitChannelLoad>
}
 80088a4:	3710      	adds	r7, #16
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	20000d3c 	.word	0x20000d3c
 80088b0:	20000deb 	.word	0x20000deb
 80088b4:	20000dea 	.word	0x20000dea
 80088b8:	20000de9 	.word	0x20000de9
 80088bc:	2000000c 	.word	0x2000000c
 80088c0:	08018368 	.word	0x08018368
 80088c4:	20000b64 	.word	0x20000b64
 80088c8:	20000d40 	.word	0x20000d40
 80088cc:	20000d4c 	.word	0x20000d4c

080088d0 <MCU_RegisterModule>:

/***************************************************************************************************************
*     M C U _ R e g i s t e r M o d u l e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RegisterModule(void){
 80088d0:	b590      	push	{r4, r7, lr}
 80088d2:	b08b      	sub	sp, #44	; 0x2c
 80088d4:	af04      	add	r7, sp, #16

  CANFRM_MODULE_ANNOUNCEMENT announcement;
  CANFRM_MODULE_REGISTRATION registration;
  uint8_t moduleIndex = 0;
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index;

  // copy data to announcement structure
  memcpy(&announcement, rxd,sizeof(announcement));
 80088da:	4a12      	ldr	r2, [pc, #72]	; (8008924 <MCU_RegisterModule+0x54>)
 80088dc:	f107 030c 	add.w	r3, r7, #12
 80088e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80088e4:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x500 Announcement: FW=%02x, MFG=%02x, PN=%02x, UID=%08x",announcement.moduleFw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);}
 80088e8:	4b0f      	ldr	r3, [pc, #60]	; (8008928 <MCU_RegisterModule+0x58>)
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <MCU_RegisterModule+0x46>
 80088f4:	89bb      	ldrh	r3, [r7, #12]
 80088f6:	4619      	mov	r1, r3
 80088f8:	7bbb      	ldrb	r3, [r7, #14]
 80088fa:	4618      	mov	r0, r3
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	9201      	str	r2, [sp, #4]
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	4603      	mov	r3, r0
 8008906:	460a      	mov	r2, r1
 8008908:	4908      	ldr	r1, [pc, #32]	; (800892c <MCU_RegisterModule+0x5c>)
 800890a:	4809      	ldr	r0, [pc, #36]	; (8008930 <MCU_RegisterModule+0x60>)
 800890c:	f00b fec2 	bl	8014694 <siprintf>
 8008910:	4807      	ldr	r0, [pc, #28]	; (8008930 <MCU_RegisterModule+0x60>)
 8008912:	f7fc fe79 	bl	8005608 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8008916:	4b07      	ldr	r3, [pc, #28]	; (8008934 <MCU_RegisterModule+0x64>)
 8008918:	7d1b      	ldrb	r3, [r3, #20]
 800891a:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800891c:	2300      	movs	r3, #0
 800891e:	75bb      	strb	r3, [r7, #22]
 8008920:	e06f      	b.n	8008a02 <MCU_RegisterModule+0x132>
 8008922:	bf00      	nop
 8008924:	20000da8 	.word	0x20000da8
 8008928:	2000000c 	.word	0x2000000c
 800892c:	08018398 	.word	0x08018398
 8008930:	20000b64 	.word	0x20000b64
 8008934:	2000a66c 	.word	0x2000a66c
    if((announcement.moduleMfgId == module[index].mfgId) && (announcement.modulePartId == module[index].partId)&&(announcement.moduleUniqueId == module[index].uniqueId)){
 8008938:	7bba      	ldrb	r2, [r7, #14]
 800893a:	7dbb      	ldrb	r3, [r7, #22]
 800893c:	49b4      	ldr	r1, [pc, #720]	; (8008c10 <MCU_RegisterModule+0x340>)
 800893e:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008942:	fb00 f303 	mul.w	r3, r0, r3
 8008946:	440b      	add	r3, r1
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d156      	bne.n	80089fc <MCU_RegisterModule+0x12c>
 800894e:	7bfa      	ldrb	r2, [r7, #15]
 8008950:	7dbb      	ldrb	r3, [r7, #22]
 8008952:	49af      	ldr	r1, [pc, #700]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008954:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008958:	fb00 f303 	mul.w	r3, r0, r3
 800895c:	440b      	add	r3, r1
 800895e:	3301      	adds	r3, #1
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	429a      	cmp	r2, r3
 8008964:	d14a      	bne.n	80089fc <MCU_RegisterModule+0x12c>
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	7dbb      	ldrb	r3, [r7, #22]
 800896a:	49a9      	ldr	r1, [pc, #676]	; (8008c10 <MCU_RegisterModule+0x340>)
 800896c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008970:	fb00 f303 	mul.w	r3, r0, r3
 8008974:	440b      	add	r3, r1
 8008976:	3304      	adds	r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d13e      	bne.n	80089fc <MCU_RegisterModule+0x12c>
      moduleIndex = index; // module is already registered, save the index
 800897e:	7dbb      	ldrb	r3, [r7, #22]
 8008980:	75fb      	strb	r3, [r7, #23]

      // Clear any previous module fault condition and update last contact details
      module[moduleIndex].faultCode.commsError  = 0;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	4aa2      	ldr	r2, [pc, #648]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008986:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800898a:	fb01 f303 	mul.w	r3, r1, r3
 800898e:	4413      	add	r3, r2
 8008990:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 8008994:	7893      	ldrb	r3, [r2, #2]
 8008996:	f36f 0300 	bfc	r3, #0, #1
 800899a:	7093      	strb	r3, [r2, #2]
      module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800899c:	4b9d      	ldr	r3, [pc, #628]	; (8008c14 <MCU_RegisterModule+0x344>)
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	7dfb      	ldrb	r3, [r7, #23]
 80089a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089a4:	499a      	ldr	r1, [pc, #616]	; (8008c10 <MCU_RegisterModule+0x340>)
 80089a6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80089aa:	fb00 f303 	mul.w	r3, r0, r3
 80089ae:	440b      	add	r3, r1
 80089b0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80089b4:	601a      	str	r2, [r3, #0]
      module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	4a97      	ldr	r2, [pc, #604]	; (8008c18 <MCU_RegisterModule+0x348>)
 80089ba:	6812      	ldr	r2, [r2, #0]
 80089bc:	4994      	ldr	r1, [pc, #592]	; (8008c10 <MCU_RegisterModule+0x340>)
 80089be:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80089c2:	fb00 f303 	mul.w	r3, r0, r3
 80089c6:	440b      	add	r3, r1
 80089c8:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80089cc:	601a      	str	r2, [r3, #0]
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU WARNING - module is already registered: ID=%02x",module[moduleIndex].moduleId); serialOut(tempBuffer);}
 80089ce:	4b93      	ldr	r3, [pc, #588]	; (8008c1c <MCU_RegisterModule+0x34c>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	f003 0303 	and.w	r3, r3, #3
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d110      	bne.n	80089fc <MCU_RegisterModule+0x12c>
 80089da:	7dfb      	ldrb	r3, [r7, #23]
 80089dc:	4a8c      	ldr	r2, [pc, #560]	; (8008c10 <MCU_RegisterModule+0x340>)
 80089de:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80089e2:	fb01 f303 	mul.w	r3, r1, r3
 80089e6:	4413      	add	r3, r2
 80089e8:	3308      	adds	r3, #8
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	498c      	ldr	r1, [pc, #560]	; (8008c20 <MCU_RegisterModule+0x350>)
 80089f0:	488c      	ldr	r0, [pc, #560]	; (8008c24 <MCU_RegisterModule+0x354>)
 80089f2:	f00b fe4f 	bl	8014694 <siprintf>
 80089f6:	488b      	ldr	r0, [pc, #556]	; (8008c24 <MCU_RegisterModule+0x354>)
 80089f8:	f7fc fe06 	bl	8005608 <serialOut>
  for(index = 0; index < pack.moduleCount; index++){
 80089fc:	7dbb      	ldrb	r3, [r7, #22]
 80089fe:	3301      	adds	r3, #1
 8008a00:	75bb      	strb	r3, [r7, #22]
 8008a02:	4b89      	ldr	r3, [pc, #548]	; (8008c28 <MCU_RegisterModule+0x358>)
 8008a04:	7d1b      	ldrb	r3, [r3, #20]
 8008a06:	7dba      	ldrb	r2, [r7, #22]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d395      	bcc.n	8008938 <MCU_RegisterModule+0x68>
    }
  }
  if (moduleIndex == pack.moduleCount){ // not previously registered, so add the new module details
 8008a0c:	4b86      	ldr	r3, [pc, #536]	; (8008c28 <MCU_RegisterModule+0x358>)
 8008a0e:	7d1b      	ldrb	r3, [r3, #20]
 8008a10:	7dfa      	ldrb	r2, [r7, #23]
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d15f      	bne.n	8008ad6 <MCU_RegisterModule+0x206>
    module[moduleIndex].fwVersion             = announcement.moduleFw;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
 8008a18:	89b8      	ldrh	r0, [r7, #12]
 8008a1a:	4a7d      	ldr	r2, [pc, #500]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008a1c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a20:	fb01 f303 	mul.w	r3, r1, r3
 8008a24:	4413      	add	r3, r2
 8008a26:	330a      	adds	r3, #10
 8008a28:	4602      	mov	r2, r0
 8008a2a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].partId                = announcement.modulePartId;
 8008a2c:	7dfb      	ldrb	r3, [r7, #23]
 8008a2e:	7bf8      	ldrb	r0, [r7, #15]
 8008a30:	4a77      	ldr	r2, [pc, #476]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008a32:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a36:	fb01 f303 	mul.w	r3, r1, r3
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	4602      	mov	r2, r0
 8008a40:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mfgId                 = announcement.moduleMfgId;
 8008a42:	7dfb      	ldrb	r3, [r7, #23]
 8008a44:	7bb8      	ldrb	r0, [r7, #14]
 8008a46:	4a72      	ldr	r2, [pc, #456]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008a48:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008a4c:	fb01 f303 	mul.w	r3, r1, r3
 8008a50:	4413      	add	r3, r2
 8008a52:	4602      	mov	r2, r0
 8008a54:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].uniqueId              = announcement.moduleUniqueId;
 8008a56:	7dfb      	ldrb	r3, [r7, #23]
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	496d      	ldr	r1, [pc, #436]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008a5c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008a60:	fb00 f303 	mul.w	r3, r0, r3
 8008a64:	440b      	add	r3, r1
 8008a66:	3304      	adds	r3, #4
 8008a68:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8008a6a:	4b6a      	ldr	r3, [pc, #424]	; (8008c14 <MCU_RegisterModule+0x344>)
 8008a6c:	681a      	ldr	r2, [r3, #0]
 8008a6e:	7dfb      	ldrb	r3, [r7, #23]
 8008a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a72:	4967      	ldr	r1, [pc, #412]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008a74:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008a78:	fb00 f303 	mul.w	r3, r0, r3
 8008a7c:	440b      	add	r3, r1
 8008a7e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8008a82:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	4a64      	ldr	r2, [pc, #400]	; (8008c18 <MCU_RegisterModule+0x348>)
 8008a88:	6812      	ldr	r2, [r2, #0]
 8008a8a:	4961      	ldr	r1, [pc, #388]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008a8c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008a90:	fb00 f303 	mul.w	r3, r0, r3
 8008a94:	440b      	add	r3, r1
 8008a96:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8008a9a:	601a      	str	r2, [r3, #0]
    module[moduleIndex].statusPending       = true;
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	4a5c      	ldr	r2, [pc, #368]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008aa0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008aa4:	fb01 f303 	mul.w	r3, r1, r3
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8008aae:	2201      	movs	r2, #1
 8008ab0:	701a      	strb	r2, [r3, #0]

    //increase moduleCount
    pack.moduleCount++;
 8008ab2:	4b5d      	ldr	r3, [pc, #372]	; (8008c28 <MCU_RegisterModule+0x358>)
 8008ab4:	7d1b      	ldrb	r3, [r3, #20]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	4b5b      	ldr	r3, [pc, #364]	; (8008c28 <MCU_RegisterModule+0x358>)
 8008abc:	751a      	strb	r2, [r3, #20]
    module[moduleIndex].moduleId = pack.moduleCount; //first module should have a module id of 1
 8008abe:	7dfb      	ldrb	r3, [r7, #23]
 8008ac0:	4a59      	ldr	r2, [pc, #356]	; (8008c28 <MCU_RegisterModule+0x358>)
 8008ac2:	7d10      	ldrb	r0, [r2, #20]
 8008ac4:	4a52      	ldr	r2, [pc, #328]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008ac6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008aca:	fb01 f303 	mul.w	r3, r1, r3
 8008ace:	4413      	add	r3, r2
 8008ad0:	3308      	adds	r3, #8
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	701a      	strb	r2, [r3, #0]
  }

  // hardware ok - register the module
  // set flags for status and hardware pending
  module[moduleIndex].statusPending = true;
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	4a4d      	ldr	r2, [pc, #308]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008ada:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ade:	fb01 f303 	mul.w	r3, r1, r3
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8008ae8:	2201      	movs	r2, #1
 8008aea:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].hardwarePending = true;
 8008aec:	7dfb      	ldrb	r3, [r7, #23]
 8008aee:	4a48      	ldr	r2, [pc, #288]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008af0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008af4:	fb01 f303 	mul.w	r3, r1, r3
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008afe:	2201      	movs	r2, #1
 8008b00:	701a      	strb	r2, [r3, #0]

  // send the details back to the module
  registration.moduleId       = module[moduleIndex].moduleId;
 8008b02:	7dfb      	ldrb	r3, [r7, #23]
 8008b04:	4a42      	ldr	r2, [pc, #264]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008b06:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b0a:	fb01 f303 	mul.w	r3, r1, r3
 8008b0e:	4413      	add	r3, r2
 8008b10:	3308      	adds	r3, #8
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	713b      	strb	r3, [r7, #4]
  registration.controllerId   = pack.id;
 8008b16:	4b44      	ldr	r3, [pc, #272]	; (8008c28 <MCU_RegisterModule+0x358>)
 8008b18:	781b      	ldrb	r3, [r3, #0]
 8008b1a:	717b      	strb	r3, [r7, #5]
  registration.modulePartId   = module[moduleIndex].partId;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
 8008b1e:	4a3c      	ldr	r2, [pc, #240]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008b20:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b24:	fb01 f303 	mul.w	r3, r1, r3
 8008b28:	4413      	add	r3, r2
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	71fb      	strb	r3, [r7, #7]
  registration.moduleMfgId    = module[moduleIndex].mfgId;
 8008b30:	7dfb      	ldrb	r3, [r7, #23]
 8008b32:	4a37      	ldr	r2, [pc, #220]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008b34:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b38:	fb01 f303 	mul.w	r3, r1, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	71bb      	strb	r3, [r7, #6]
  registration.moduleUniqueId = module[moduleIndex].uniqueId;
 8008b42:	7dfb      	ldrb	r3, [r7, #23]
 8008b44:	4a32      	ldr	r2, [pc, #200]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008b46:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b4a:	fb01 f303 	mul.w	r3, r1, r3
 8008b4e:	4413      	add	r3, r2
 8008b50:	3304      	adds	r3, #4
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60bb      	str	r3, [r7, #8]

    // clear bitfields
  txObj.word[0] = 0;                              // Configure transmit message
 8008b56:	4b35      	ldr	r3, [pc, #212]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008b5c:	4b33      	ldr	r3, [pc, #204]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008b62:	4b32      	ldr	r3, [pc, #200]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	609a      	str	r2, [r3, #8]

  memcpy(txd, &registration, sizeof(registration));
 8008b68:	4b31      	ldr	r3, [pc, #196]	; (8008c30 <MCU_RegisterModule+0x360>)
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	1d3b      	adds	r3, r7, #4
 8008b6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008b72:	e882 0003 	stmia.w	r2, {r0, r1}

  txObj.bF.id.SID = ID_MODULE_REGISTRATION;        // Standard ID
 8008b76:	4a2d      	ldr	r2, [pc, #180]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008b78:	8813      	ldrh	r3, [r2, #0]
 8008b7a:	f44f 61a2 	mov.w	r1, #1296	; 0x510
 8008b7e:	f361 030a 	bfi	r3, r1, #0, #11
 8008b82:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[moduleIndex].moduleId;  // Extended ID
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	4a22      	ldr	r2, [pc, #136]	; (8008c10 <MCU_RegisterModule+0x340>)
 8008b88:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008b8c:	fb01 f303 	mul.w	r3, r1, r3
 8008b90:	4413      	add	r3, r2
 8008b92:	3308      	adds	r3, #8
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008b9c:	4923      	ldr	r1, [pc, #140]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008b9e:	680b      	ldr	r3, [r1, #0]
 8008ba0:	f362 23dc 	bfi	r3, r2, #11, #18
 8008ba4:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008ba6:	4a21      	ldr	r2, [pc, #132]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008ba8:	7913      	ldrb	r3, [r2, #4]
 8008baa:	f36f 1386 	bfc	r3, #6, #1
 8008bae:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8008bb0:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008bb2:	7913      	ldrb	r3, [r2, #4]
 8008bb4:	2108      	movs	r1, #8
 8008bb6:	f361 0303 	bfi	r3, r1, #0, #4
 8008bba:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008bbc:	4a1b      	ldr	r2, [pc, #108]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008bbe:	7913      	ldrb	r3, [r2, #4]
 8008bc0:	f36f 13c7 	bfc	r3, #7, #1
 8008bc4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008bc6:	4a19      	ldr	r2, [pc, #100]	; (8008c2c <MCU_RegisterModule+0x35c>)
 8008bc8:	7913      	ldrb	r3, [r2, #4]
 8008bca:	f043 0310 	orr.w	r3, r3, #16
 8008bce:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);}
 8008bd0:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <MCU_RegisterModule+0x34c>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	f003 0302 	and.w	r3, r3, #2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d012      	beq.n	8008c02 <MCU_RegisterModule+0x332>
 8008bdc:	793b      	ldrb	r3, [r7, #4]
 8008bde:	4618      	mov	r0, r3
 8008be0:	797b      	ldrb	r3, [r7, #5]
 8008be2:	461c      	mov	r4, r3
 8008be4:	79bb      	ldrb	r3, [r7, #6]
 8008be6:	79fa      	ldrb	r2, [r7, #7]
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	9102      	str	r1, [sp, #8]
 8008bec:	9201      	str	r2, [sp, #4]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	490f      	ldr	r1, [pc, #60]	; (8008c34 <MCU_RegisterModule+0x364>)
 8008bf6:	480b      	ldr	r0, [pc, #44]	; (8008c24 <MCU_RegisterModule+0x354>)
 8008bf8:	f00b fd4c 	bl	8014694 <siprintf>
 8008bfc:	4809      	ldr	r0, [pc, #36]	; (8008c24 <MCU_RegisterModule+0x354>)
 8008bfe:	f7fc fd03 	bl	8005608 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008c02:	2001      	movs	r0, #1
 8008c04:	f7ff fe06 	bl	8008814 <MCU_TransmitMessageQueue>
}
 8008c08:	bf00      	nop
 8008c0a:	371c      	adds	r7, #28
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd90      	pop	{r4, r7, pc}
 8008c10:	20000dec 	.word	0x20000dec
 8008c14:	200005d8 	.word	0x200005d8
 8008c18:	20000d28 	.word	0x20000d28
 8008c1c:	2000000c 	.word	0x2000000c
 8008c20:	080183d8 	.word	0x080183d8
 8008c24:	20000b64 	.word	0x20000b64
 8008c28:	2000a66c 	.word	0x2000a66c
 8008c2c:	20000d40 	.word	0x20000d40
 8008c30:	20000d4c 	.word	0x20000d4c
 8008c34:	0801840c 	.word	0x0801840c

08008c38 <MCU_DeRegisterAllModules>:

/***************************************************************************************************************
*     M C U _ D e R e g i s t e r A l l M o d u l e s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_DeRegisterAllModules(void){
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b082      	sub	sp, #8
 8008c3c:	af00      	add	r7, sp, #0
    CANFRM_MODULE_ALL_DEREGISTER deRegistration;

    // configure the packet
    deRegistration.controllerId = pack.id;
 8008c3e:	4b22      	ldr	r3, [pc, #136]	; (8008cc8 <MCU_DeRegisterAllModules+0x90>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	713b      	strb	r3, [r7, #4]

      // register the new module
    txObj.word[0] = 0;                              // Configure transmit message
 8008c44:	4b21      	ldr	r3, [pc, #132]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008c4a:	4b20      	ldr	r3, [pc, #128]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008c50:	4b1e      	ldr	r3, [pc, #120]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	609a      	str	r2, [r3, #8]
 8008c56:	793a      	ldrb	r2, [r7, #4]

    // copy de-registration packet to txd structure
    memcpy(txd, &deRegistration, sizeof(deRegistration));
 8008c58:	4b1d      	ldr	r3, [pc, #116]	; (8008cd0 <MCU_DeRegisterAllModules+0x98>)
 8008c5a:	701a      	strb	r2, [r3, #0]

    txObj.bF.id.SID = ID_MODULE_ALL_DEREGISTER;     // Standard ID
 8008c5c:	4a1b      	ldr	r2, [pc, #108]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c5e:	8813      	ldrh	r3, [r2, #0]
 8008c60:	f240 511e 	movw	r1, #1310	; 0x51e
 8008c64:	f361 030a 	bfi	r3, r1, #0, #11
 8008c68:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = 0;                            // Extended ID
 8008c6a:	4a18      	ldr	r2, [pc, #96]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c6c:	6813      	ldr	r3, [r2, #0]
 8008c6e:	f36f 23dc 	bfc	r3, #11, #18
 8008c72:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008c74:	4a15      	ldr	r2, [pc, #84]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c76:	7913      	ldrb	r3, [r2, #4]
 8008c78:	f36f 1386 	bfc	r3, #6, #1
 8008c7c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8008c7e:	4a13      	ldr	r2, [pc, #76]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c80:	7913      	ldrb	r3, [r2, #4]
 8008c82:	2101      	movs	r1, #1
 8008c84:	f361 0303 	bfi	r3, r1, #0, #4
 8008c88:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008c8a:	4a10      	ldr	r2, [pc, #64]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c8c:	7913      	ldrb	r3, [r2, #4]
 8008c8e:	f36f 13c7 	bfc	r3, #7, #1
 8008c92:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008c94:	4a0d      	ldr	r2, [pc, #52]	; (8008ccc <MCU_DeRegisterAllModules+0x94>)
 8008c96:	7913      	ldrb	r3, [r2, #4]
 8008c98:	f043 0310 	orr.w	r3, r3, #16
 8008c9c:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51E De-Register all modules"); serialOut(tempBuffer);}
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <MCU_DeRegisterAllModules+0x9c>)
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	f003 0302 	and.w	r3, r3, #2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d006      	beq.n	8008cb8 <MCU_DeRegisterAllModules+0x80>
 8008caa:	490b      	ldr	r1, [pc, #44]	; (8008cd8 <MCU_DeRegisterAllModules+0xa0>)
 8008cac:	480b      	ldr	r0, [pc, #44]	; (8008cdc <MCU_DeRegisterAllModules+0xa4>)
 8008cae:	f00b fcf1 	bl	8014694 <siprintf>
 8008cb2:	480a      	ldr	r0, [pc, #40]	; (8008cdc <MCU_DeRegisterAllModules+0xa4>)
 8008cb4:	f7fc fca8 	bl	8005608 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008cb8:	2001      	movs	r0, #1
 8008cba:	f7ff fdab 	bl	8008814 <MCU_TransmitMessageQueue>
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	2000a66c 	.word	0x2000a66c
 8008ccc:	20000d40 	.word	0x20000d40
 8008cd0:	20000d4c 	.word	0x20000d4c
 8008cd4:	2000000c 	.word	0x2000000c
 8008cd8:	08018458 	.word	0x08018458
 8008cdc:	20000b64 	.word	0x20000b64

08008ce0 <MCU_IsolateAllModules>:

/***************************************************************************************************************
*     M C U _ I s o l a t e A l l M o d u l e s                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_IsolateAllModules(void){
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b082      	sub	sp, #8
 8008ce4:	af00      	add	r7, sp, #0
  CANFRM_MODULE_ALL_ISOLATE isolate;
  memset(&isolate,0,sizeof(isolate));
 8008ce6:	1d3b      	adds	r3, r7, #4
 8008ce8:	2201      	movs	r2, #1
 8008cea:	2100      	movs	r1, #0
 8008cec:	4618      	mov	r0, r3
 8008cee:	f00a fcbf 	bl	8013670 <memset>

  // configure the packet
  isolate.controllerId = pack.id;
 8008cf2:	4b22      	ldr	r3, [pc, #136]	; (8008d7c <MCU_IsolateAllModules+0x9c>)
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	713b      	strb	r3, [r7, #4]

    // register the new module
  txObj.word[0] = 0;                              // Configure transmit message
 8008cf8:	4b21      	ldr	r3, [pc, #132]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008cfe:	4b20      	ldr	r3, [pc, #128]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008d04:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d06:	2200      	movs	r2, #0
 8008d08:	609a      	str	r2, [r3, #8]
 8008d0a:	793a      	ldrb	r2, [r7, #4]

  // copy isolation packet to txd structure
  memcpy(txd, &isolate, sizeof(isolate));
 8008d0c:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <MCU_IsolateAllModules+0xa4>)
 8008d0e:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_ALL_ISOLATE;        // Standard ID
 8008d10:	4a1b      	ldr	r2, [pc, #108]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d12:	8813      	ldrh	r3, [r2, #0]
 8008d14:	f240 511f 	movw	r1, #1311	; 0x51f
 8008d18:	f361 030a 	bfi	r3, r1, #0, #11
 8008d1c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8008d1e:	4a18      	ldr	r2, [pc, #96]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d20:	6813      	ldr	r3, [r2, #0]
 8008d22:	f36f 23dc 	bfc	r3, #11, #18
 8008d26:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008d28:	4a15      	ldr	r2, [pc, #84]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d2a:	7913      	ldrb	r3, [r2, #4]
 8008d2c:	f36f 1386 	bfc	r3, #6, #1
 8008d30:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                  // 8 bytes to transmit
 8008d32:	4a13      	ldr	r2, [pc, #76]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d34:	7913      	ldrb	r3, [r2, #4]
 8008d36:	2101      	movs	r1, #1
 8008d38:	f361 0303 	bfi	r3, r1, #0, #4
 8008d3c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008d3e:	4a10      	ldr	r2, [pc, #64]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d40:	7913      	ldrb	r3, [r2, #4]
 8008d42:	f36f 13c7 	bfc	r3, #7, #1
 8008d46:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008d48:	4a0d      	ldr	r2, [pc, #52]	; (8008d80 <MCU_IsolateAllModules+0xa0>)
 8008d4a:	7913      	ldrb	r3, [r2, #4]
 8008d4c:	f043 0310 	orr.w	r3, r3, #16
 8008d50:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x51F Isolate all modules"); serialOut(tempBuffer);}
 8008d52:	4b0d      	ldr	r3, [pc, #52]	; (8008d88 <MCU_IsolateAllModules+0xa8>)
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	f003 0302 	and.w	r3, r3, #2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d006      	beq.n	8008d6c <MCU_IsolateAllModules+0x8c>
 8008d5e:	490b      	ldr	r1, [pc, #44]	; (8008d8c <MCU_IsolateAllModules+0xac>)
 8008d60:	480b      	ldr	r0, [pc, #44]	; (8008d90 <MCU_IsolateAllModules+0xb0>)
 8008d62:	f00b fc97 	bl	8014694 <siprintf>
 8008d66:	480a      	ldr	r0, [pc, #40]	; (8008d90 <MCU_IsolateAllModules+0xb0>)
 8008d68:	f7fc fc4e 	bl	8005608 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f7ff fd51 	bl	8008814 <MCU_TransmitMessageQueue>
}
 8008d72:	bf00      	nop
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	2000a66c 	.word	0x2000a66c
 8008d80:	20000d40 	.word	0x20000d40
 8008d84:	20000d4c 	.word	0x20000d4c
 8008d88:	2000000c 	.word	0x2000000c
 8008d8c:	08018480 	.word	0x08018480
 8008d90:	20000b64 	.word	0x20000b64

08008d94 <MCU_ProcessModuleTime>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e T i m e                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleTime(void){
 8008d94:	b5b0      	push	{r4, r5, r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0

  time_t packTime;
  CANFRM_MODULE_TIME moduleTime;

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x506 Time Request"); serialOut(tempBuffer);}
 8008d9a:	4b34      	ldr	r3, [pc, #208]	; (8008e6c <MCU_ProcessModuleTime+0xd8>)
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d006      	beq.n	8008db4 <MCU_ProcessModuleTime+0x20>
 8008da6:	4932      	ldr	r1, [pc, #200]	; (8008e70 <MCU_ProcessModuleTime+0xdc>)
 8008da8:	4832      	ldr	r0, [pc, #200]	; (8008e74 <MCU_ProcessModuleTime+0xe0>)
 8008daa:	f00b fc73 	bl	8014694 <siprintf>
 8008dae:	4831      	ldr	r0, [pc, #196]	; (8008e74 <MCU_ProcessModuleTime+0xe0>)
 8008db0:	f7fc fc2a 	bl	8005608 <serialOut>

  // read the RTC as time_t
  packTime = readRTC();
 8008db4:	f7fc fd10 	bl	80057d8 <readRTC>
 8008db8:	e9c7 0102 	strd	r0, r1, [r7, #8]

  // set up the frame
  moduleTime.rtcValid = pack.rtcValid;
 8008dbc:	4b2e      	ldr	r3, [pc, #184]	; (8008e78 <MCU_ProcessModuleTime+0xe4>)
 8008dbe:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8008dc2:	79fb      	ldrb	r3, [r7, #7]
 8008dc4:	f362 13c7 	bfi	r3, r2, #7, #1
 8008dc8:	71fb      	strb	r3, [r7, #7]
  moduleTime.time = packTime;
 8008dca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dce:	4614      	mov	r4, r2
 8008dd0:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8008dd4:	4623      	mov	r3, r4
 8008dd6:	603b      	str	r3, [r7, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	462a      	mov	r2, r5
 8008ddc:	f362 031e 	bfi	r3, r2, #0, #31
 8008de0:	607b      	str	r3, [r7, #4]

  txObj.word[0] = 0;                              // Configure transmit message
 8008de2:	4b26      	ldr	r3, [pc, #152]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8008de8:	4b24      	ldr	r3, [pc, #144]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8008dee:	4b23      	ldr	r3, [pc, #140]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	609a      	str	r2, [r3, #8]

  // copy moduleTime frame to txd structure
  memcpy(txd, &moduleTime, sizeof(moduleTime));
 8008df4:	463b      	mov	r3, r7
 8008df6:	2208      	movs	r2, #8
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4821      	ldr	r0, [pc, #132]	; (8008e80 <MCU_ProcessModuleTime+0xec>)
 8008dfc:	f00a fc2a 	bl	8013654 <memcpy>

  txObj.bF.id.SID = ID_MODULE_TIME;     // Standard ID
 8008e00:	4a1e      	ldr	r2, [pc, #120]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008e02:	8813      	ldrh	r3, [r2, #0]
 8008e04:	f240 5116 	movw	r1, #1302	; 0x516
 8008e08:	f361 030a 	bfi	r3, r1, #0, #11
 8008e0c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = 0;                            // Extended ID
 8008e0e:	4a1b      	ldr	r2, [pc, #108]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008e10:	6813      	ldr	r3, [r2, #0]
 8008e12:	f36f 23dc 	bfc	r3, #11, #18
 8008e16:	6013      	str	r3, [r2, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8008e18:	4a18      	ldr	r2, [pc, #96]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008e1a:	7913      	ldrb	r3, [r2, #4]
 8008e1c:	f36f 1386 	bfc	r3, #6, #1
 8008e20:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8008e22:	4a16      	ldr	r2, [pc, #88]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008e24:	7913      	ldrb	r3, [r2, #4]
 8008e26:	2108      	movs	r1, #8
 8008e28:	f361 0303 	bfi	r3, r1, #0, #4
 8008e2c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008e2e:	4a13      	ldr	r2, [pc, #76]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008e30:	7913      	ldrb	r3, [r2, #4]
 8008e32:	f36f 13c7 	bfc	r3, #7, #1
 8008e36:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8008e38:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <MCU_ProcessModuleTime+0xe8>)
 8008e3a:	7913      	ldrb	r3, [r2, #4]
 8008e3c:	f043 0310 	orr.w	r3, r3, #16
 8008e40:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x516 Set Time"); serialOut(tempBuffer);}
 8008e42:	4b0a      	ldr	r3, [pc, #40]	; (8008e6c <MCU_ProcessModuleTime+0xd8>)
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d006      	beq.n	8008e5c <MCU_ProcessModuleTime+0xc8>
 8008e4e:	490d      	ldr	r1, [pc, #52]	; (8008e84 <MCU_ProcessModuleTime+0xf0>)
 8008e50:	4808      	ldr	r0, [pc, #32]	; (8008e74 <MCU_ProcessModuleTime+0xe0>)
 8008e52:	f00b fc1f 	bl	8014694 <siprintf>
 8008e56:	4807      	ldr	r0, [pc, #28]	; (8008e74 <MCU_ProcessModuleTime+0xe0>)
 8008e58:	f7fc fbd6 	bl	8005608 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                     // Send it
 8008e5c:	2001      	movs	r0, #1
 8008e5e:	f7ff fcd9 	bl	8008814 <MCU_TransmitMessageQueue>
}
 8008e62:	bf00      	nop
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bdb0      	pop	{r4, r5, r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	2000000c 	.word	0x2000000c
 8008e70:	080184a4 	.word	0x080184a4
 8008e74:	20000b64 	.word	0x20000b64
 8008e78:	2000a66c 	.word	0x2000a66c
 8008e7c:	20000d40 	.word	0x20000d40
 8008e80:	20000d4c 	.word	0x20000d4c
 8008e84:	080184c0 	.word	0x080184c0

08008e88 <MCU_RequestHardware>:


/***************************************************************************************************************
*     M C U _ R e q u e s t H a r d w a r e                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestHardware(uint8_t moduleId){
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	4603      	mov	r3, r0
 8008e90:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_HW_REQUEST hardwareRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8008e92:	4b41      	ldr	r3, [pc, #260]	; (8008f98 <MCU_RequestHardware+0x110>)
 8008e94:	7d1b      	ldrb	r3, [r3, #20]
 8008e96:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008e98:	2300      	movs	r3, #0
 8008e9a:	73bb      	strb	r3, [r7, #14]
 8008e9c:	e010      	b.n	8008ec0 <MCU_RequestHardware+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8008e9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ea0:	4a3e      	ldr	r2, [pc, #248]	; (8008f9c <MCU_RequestHardware+0x114>)
 8008ea2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ea6:	fb01 f303 	mul.w	r3, r1, r3
 8008eaa:	4413      	add	r3, r2
 8008eac:	3308      	adds	r3, #8
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	79fa      	ldrb	r2, [r7, #7]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d101      	bne.n	8008eba <MCU_RequestHardware+0x32>
      moduleIndex = index; // found it - save the index
 8008eb6:	7bbb      	ldrb	r3, [r7, #14]
 8008eb8:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 8008eba:	7bbb      	ldrb	r3, [r7, #14]
 8008ebc:	3301      	adds	r3, #1
 8008ebe:	73bb      	strb	r3, [r7, #14]
 8008ec0:	4b35      	ldr	r3, [pc, #212]	; (8008f98 <MCU_RequestHardware+0x110>)
 8008ec2:	7d1b      	ldrb	r3, [r3, #20]
 8008ec4:	7bba      	ldrb	r2, [r7, #14]
 8008ec6:	429a      	cmp	r2, r3
 8008ec8:	d3e9      	bcc.n	8008e9e <MCU_RequestHardware+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 8008eca:	4b33      	ldr	r3, [pc, #204]	; (8008f98 <MCU_RequestHardware+0x110>)
 8008ecc:	7d1b      	ldrb	r3, [r3, #20]
 8008ece:	7bfa      	ldrb	r2, [r7, #15]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d10d      	bne.n	8008ef0 <MCU_RequestHardware+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestHardware()"); serialOut(tempBuffer);}
 8008ed4:	4b32      	ldr	r3, [pc, #200]	; (8008fa0 <MCU_RequestHardware+0x118>)
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	2b03      	cmp	r3, #3
 8008ede:	d156      	bne.n	8008f8e <MCU_RequestHardware+0x106>
 8008ee0:	4930      	ldr	r1, [pc, #192]	; (8008fa4 <MCU_RequestHardware+0x11c>)
 8008ee2:	4831      	ldr	r0, [pc, #196]	; (8008fa8 <MCU_RequestHardware+0x120>)
 8008ee4:	f00b fbd6 	bl	8014694 <siprintf>
 8008ee8:	482f      	ldr	r0, [pc, #188]	; (8008fa8 <MCU_RequestHardware+0x120>)
 8008eea:	f7fc fb8d 	bl	8005608 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 8008eee:	e04e      	b.n	8008f8e <MCU_RequestHardware+0x106>
    module[moduleIndex].hardwarePending = true;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
 8008ef2:	4a2a      	ldr	r2, [pc, #168]	; (8008f9c <MCU_RequestHardware+0x114>)
 8008ef4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8008ef8:	fb01 f303 	mul.w	r3, r1, r3
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 8008f02:	2201      	movs	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
    hardwareRequest.moduleId = moduleId;
 8008f06:	79fb      	ldrb	r3, [r7, #7]
 8008f08:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 8008f0a:	4b28      	ldr	r3, [pc, #160]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 8008f10:	4b26      	ldr	r3, [pc, #152]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8008f16:	4b25      	ldr	r3, [pc, #148]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	609a      	str	r2, [r3, #8]
 8008f1c:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &hardwareRequest, sizeof(hardwareRequest));
 8008f1e:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <MCU_RequestHardware+0x128>)
 8008f20:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_HARDWARE_REQUEST;  // Standard ID
 8008f22:	4a22      	ldr	r2, [pc, #136]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f24:	8813      	ldrh	r3, [r2, #0]
 8008f26:	f240 5111 	movw	r1, #1297	; 0x511
 8008f2a:	f361 030a 	bfi	r3, r1, #0, #11
 8008f2e:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 8008f30:	79fa      	ldrb	r2, [r7, #7]
 8008f32:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8008f36:	491d      	ldr	r1, [pc, #116]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f38:	680b      	ldr	r3, [r1, #0]
 8008f3a:	f362 23dc 	bfi	r3, r2, #11, #18
 8008f3e:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 8008f40:	4a1a      	ldr	r2, [pc, #104]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f42:	7913      	ldrb	r3, [r2, #4]
 8008f44:	f36f 1386 	bfc	r3, #6, #1
 8008f48:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 8008f4a:	4a18      	ldr	r2, [pc, #96]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f4c:	7913      	ldrb	r3, [r2, #4]
 8008f4e:	2101      	movs	r1, #1
 8008f50:	f361 0303 	bfi	r3, r1, #0, #4
 8008f54:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8008f56:	4a15      	ldr	r2, [pc, #84]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f58:	7913      	ldrb	r3, [r2, #4]
 8008f5a:	f36f 13c7 	bfc	r3, #7, #1
 8008f5e:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8008f60:	4a12      	ldr	r2, [pc, #72]	; (8008fac <MCU_RequestHardware+0x124>)
 8008f62:	7913      	ldrb	r3, [r2, #4]
 8008f64:	f043 0310 	orr.w	r3, r3, #16
 8008f68:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x511 Request Hardware : ID=%02x",moduleId); serialOut(tempBuffer);}
 8008f6a:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <MCU_RequestHardware+0x118>)
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	f003 0302 	and.w	r3, r3, #2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d008      	beq.n	8008f88 <MCU_RequestHardware+0x100>
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	461a      	mov	r2, r3
 8008f7a:	490e      	ldr	r1, [pc, #56]	; (8008fb4 <MCU_RequestHardware+0x12c>)
 8008f7c:	480a      	ldr	r0, [pc, #40]	; (8008fa8 <MCU_RequestHardware+0x120>)
 8008f7e:	f00b fb89 	bl	8014694 <siprintf>
 8008f82:	4809      	ldr	r0, [pc, #36]	; (8008fa8 <MCU_RequestHardware+0x120>)
 8008f84:	f7fc fb40 	bl	8005608 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 8008f88:	2001      	movs	r0, #1
 8008f8a:	f7ff fc43 	bl	8008814 <MCU_TransmitMessageQueue>
}
 8008f8e:	bf00      	nop
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	2000a66c 	.word	0x2000a66c
 8008f9c:	20000dec 	.word	0x20000dec
 8008fa0:	2000000c 	.word	0x2000000c
 8008fa4:	080184d8 	.word	0x080184d8
 8008fa8:	20000b64 	.word	0x20000b64
 8008fac:	20000d40 	.word	0x20000d40
 8008fb0:	20000d4c 	.word	0x20000d4c
 8008fb4:	08018514 	.word	0x08018514

08008fb8 <MCU_ProcessModuleHardware>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e H a r d w a r e                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleHardware(void){
 8008fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fbc:	b08e      	sub	sp, #56	; 0x38
 8008fbe:	af08      	add	r7, sp, #32
  float moduleMaxDischargeA;
  float moduleMaxEndVoltage;
  //float maxEndVoltage;

  // copy received data to status structure
  memset(&hardware,0,sizeof(hardware));
 8008fc0:	463b      	mov	r3, r7
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f00a fb52 	bl	8013670 <memset>
  memcpy(&hardware, rxd, sizeof(hardware));
 8008fcc:	4a94      	ldr	r2, [pc, #592]	; (8009220 <MCU_ProcessModuleHardware+0x268>)
 8008fce:	463b      	mov	r3, r7
 8008fd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008fd4:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8008fd8:	4b92      	ldr	r3, [pc, #584]	; (8009224 <MCU_ProcessModuleHardware+0x26c>)
 8008fda:	7d1b      	ldrb	r3, [r3, #20]
 8008fdc:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75bb      	strb	r3, [r7, #22]
 8008fe2:	e015      	b.n	8009010 <MCU_ProcessModuleHardware+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8008fe4:	4b90      	ldr	r3, [pc, #576]	; (8009228 <MCU_ProcessModuleHardware+0x270>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8008fec:	7dbb      	ldrb	r3, [r7, #22]
 8008fee:	498f      	ldr	r1, [pc, #572]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 8008ff0:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8008ff4:	fb00 f303 	mul.w	r3, r0, r3
 8008ff8:	440b      	add	r3, r1
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009002:	429a      	cmp	r2, r3
 8009004:	d101      	bne.n	800900a <MCU_ProcessModuleHardware+0x52>
      moduleIndex = index; // found it - save the index
 8009006:	7dbb      	ldrb	r3, [r7, #22]
 8009008:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800900a:	7dbb      	ldrb	r3, [r7, #22]
 800900c:	3301      	adds	r3, #1
 800900e:	75bb      	strb	r3, [r7, #22]
 8009010:	4b84      	ldr	r3, [pc, #528]	; (8009224 <MCU_ProcessModuleHardware+0x26c>)
 8009012:	7d1b      	ldrb	r3, [r3, #20]
 8009014:	7dba      	ldrb	r2, [r7, #22]
 8009016:	429a      	cmp	r2, r3
 8009018:	d3e4      	bcc.n	8008fe4 <MCU_ProcessModuleHardware+0x2c>
  }

  if (moduleIndex == pack.moduleCount){
 800901a:	4b82      	ldr	r3, [pc, #520]	; (8009224 <MCU_ProcessModuleHardware+0x26c>)
 800901c:	7d1b      	ldrb	r3, [r3, #20]
 800901e:	7dfa      	ldrb	r2, [r7, #23]
 8009020:	429a      	cmp	r2, r3
 8009022:	d10e      	bne.n	8009042 <MCU_ProcessModuleHardware+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleHardware()"); serialOut(tempBuffer);}
 8009024:	4b82      	ldr	r3, [pc, #520]	; (8009230 <MCU_ProcessModuleHardware+0x278>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	f003 0303 	and.w	r3, r3, #3
 800902c:	2b03      	cmp	r3, #3
 800902e:	f040 825d 	bne.w	80094ec <MCU_ProcessModuleHardware+0x534>
 8009032:	4980      	ldr	r1, [pc, #512]	; (8009234 <MCU_ProcessModuleHardware+0x27c>)
 8009034:	4880      	ldr	r0, [pc, #512]	; (8009238 <MCU_ProcessModuleHardware+0x280>)
 8009036:	f00b fb2d 	bl	8014694 <siprintf>
 800903a:	487f      	ldr	r0, [pc, #508]	; (8009238 <MCU_ProcessModuleHardware+0x280>)
 800903c:	f7fc fae4 	bl	8005608 <serialOut>

      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
    }
  }
}
 8009040:	e254      	b.n	80094ec <MCU_ProcessModuleHardware+0x534>
    module[moduleIndex].maxChargeA    = hardware.maxChargeA;
 8009042:	7dfb      	ldrb	r3, [r7, #23]
 8009044:	8838      	ldrh	r0, [r7, #0]
 8009046:	4a79      	ldr	r2, [pc, #484]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 8009048:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800904c:	fb01 f303 	mul.w	r3, r1, r3
 8009050:	4413      	add	r3, r2
 8009052:	330e      	adds	r3, #14
 8009054:	4602      	mov	r2, r0
 8009056:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxDischargeA = hardware.maxDischargeA;
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	8878      	ldrh	r0, [r7, #2]
 800905c:	4a73      	ldr	r2, [pc, #460]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 800905e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009062:	fb01 f303 	mul.w	r3, r1, r3
 8009066:	4413      	add	r3, r2
 8009068:	3310      	adds	r3, #16
 800906a:	4602      	mov	r2, r0
 800906c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].maxChargeEndV = hardware.maxChargeEndV;
 800906e:	7dfb      	ldrb	r3, [r7, #23]
 8009070:	88b8      	ldrh	r0, [r7, #4]
 8009072:	4a6e      	ldr	r2, [pc, #440]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 8009074:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009078:	fb01 f303 	mul.w	r3, r1, r3
 800907c:	4413      	add	r3, r2
 800907e:	3312      	adds	r3, #18
 8009080:	4602      	mov	r2, r0
 8009082:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].hwVersion     = hardware.hwVersion;
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	88f8      	ldrh	r0, [r7, #6]
 8009088:	4a68      	ldr	r2, [pc, #416]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 800908a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800908e:	fb01 f303 	mul.w	r3, r1, r3
 8009092:	4413      	add	r3, r2
 8009094:	330c      	adds	r3, #12
 8009096:	4602      	mov	r2, r0
 8009098:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800909a:	4b68      	ldr	r3, [pc, #416]	; (800923c <MCU_ProcessModuleHardware+0x284>)
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090a2:	4962      	ldr	r1, [pc, #392]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80090a4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80090a8:	fb00 f303 	mul.w	r3, r0, r3
 80090ac:	440b      	add	r3, r1
 80090ae:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80090b2:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	4a62      	ldr	r2, [pc, #392]	; (8009240 <MCU_ProcessModuleHardware+0x288>)
 80090b8:	6812      	ldr	r2, [r2, #0]
 80090ba:	495c      	ldr	r1, [pc, #368]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80090bc:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80090c0:	fb00 f303 	mul.w	r3, r0, r3
 80090c4:	440b      	add	r3, r1
 80090c6:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 80090ca:	601a      	str	r2, [r3, #0]
    module[moduleIndex].hardwarePending = false;
 80090cc:	7dfb      	ldrb	r3, [r7, #23]
 80090ce:	4a57      	ldr	r2, [pc, #348]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80090d0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090d4:	fb01 f303 	mul.w	r3, r1, r3
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80090de:	2200      	movs	r2, #0
 80090e0:	701a      	strb	r2, [r3, #0]
    moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
 80090e4:	4a51      	ldr	r2, [pc, #324]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80090e6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80090ea:	fb01 f303 	mul.w	r3, r1, r3
 80090ee:	4413      	add	r3, r2
 80090f0:	330e      	adds	r3, #14
 80090f2:	881b      	ldrh	r3, [r3, #0]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7f7 f9f7 	bl	80004e8 <__aeabi_i2d>
 80090fa:	a345      	add	r3, pc, #276	; (adr r3, 8009210 <MCU_ProcessModuleHardware+0x258>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 fa5c 	bl	80005bc <__aeabi_dmul>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4610      	mov	r0, r2
 800910a:	4619      	mov	r1, r3
 800910c:	a342      	add	r3, pc, #264	; (adr r3, 8009218 <MCU_ProcessModuleHardware+0x260>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 f89b 	bl	800024c <__aeabi_dsub>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4610      	mov	r0, r2
 800911c:	4619      	mov	r1, r3
 800911e:	f7f7 fd45 	bl	8000bac <__aeabi_d2f>
 8009122:	4603      	mov	r3, r0
 8009124:	613b      	str	r3, [r7, #16]
    moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 8009126:	7dfb      	ldrb	r3, [r7, #23]
 8009128:	4a40      	ldr	r2, [pc, #256]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 800912a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800912e:	fb01 f303 	mul.w	r3, r1, r3
 8009132:	4413      	add	r3, r2
 8009134:	3310      	adds	r3, #16
 8009136:	881b      	ldrh	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7f7 f9d5 	bl	80004e8 <__aeabi_i2d>
 800913e:	a334      	add	r3, pc, #208	; (adr r3, 8009210 <MCU_ProcessModuleHardware+0x258>)
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fa3a 	bl	80005bc <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4610      	mov	r0, r2
 800914e:	4619      	mov	r1, r3
 8009150:	a331      	add	r3, pc, #196	; (adr r3, 8009218 <MCU_ProcessModuleHardware+0x260>)
 8009152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009156:	f7f7 f879 	bl	800024c <__aeabi_dsub>
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	4610      	mov	r0, r2
 8009160:	4619      	mov	r1, r3
 8009162:	f7f7 fd23 	bl	8000bac <__aeabi_d2f>
 8009166:	4603      	mov	r3, r0
 8009168:	60fb      	str	r3, [r7, #12]
    if ( moduleMaxChargeA < 0){
 800916a:	edd7 7a04 	vldr	s15, [r7, #16]
 800916e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009176:	d567      	bpl.n	8009248 <MCU_ProcessModuleHardware+0x290>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x incompatible. max charge value (%.2fA) < 0!",rxObj.bF.id.EID,moduleMaxChargeA ); serialOut(tempBuffer);}
 8009178:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <MCU_ProcessModuleHardware+0x278>)
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	f003 0303 	and.w	r3, r3, #3
 8009180:	2b03      	cmp	r3, #3
 8009182:	d113      	bne.n	80091ac <MCU_ProcessModuleHardware+0x1f4>
 8009184:	4b28      	ldr	r3, [pc, #160]	; (8009228 <MCU_ProcessModuleHardware+0x270>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800918c:	461c      	mov	r4, r3
 800918e:	6938      	ldr	r0, [r7, #16]
 8009190:	f7f7 f9bc 	bl	800050c <__aeabi_f2d>
 8009194:	4602      	mov	r2, r0
 8009196:	460b      	mov	r3, r1
 8009198:	e9cd 2300 	strd	r2, r3, [sp]
 800919c:	4622      	mov	r2, r4
 800919e:	4929      	ldr	r1, [pc, #164]	; (8009244 <MCU_ProcessModuleHardware+0x28c>)
 80091a0:	4825      	ldr	r0, [pc, #148]	; (8009238 <MCU_ProcessModuleHardware+0x280>)
 80091a2:	f00b fa77 	bl	8014694 <siprintf>
 80091a6:	4824      	ldr	r0, [pc, #144]	; (8009238 <MCU_ProcessModuleHardware+0x280>)
 80091a8:	f7fc fa2e 	bl	8005608 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
 80091ae:	4a1f      	ldr	r2, [pc, #124]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80091b0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091b4:	fb01 f303 	mul.w	r3, r1, r3
 80091b8:	4413      	add	r3, r2
 80091ba:	330e      	adds	r3, #14
 80091bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80091c0:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80091c2:	7dfb      	ldrb	r3, [r7, #23]
 80091c4:	4a19      	ldr	r2, [pc, #100]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80091c6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091ca:	fb01 f303 	mul.w	r3, r1, r3
 80091ce:	4413      	add	r3, r2
 80091d0:	3310      	adds	r3, #16
 80091d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80091d6:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 80091d8:	7dfb      	ldrb	r3, [r7, #23]
 80091da:	4a14      	ldr	r2, [pc, #80]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80091dc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091e0:	fb01 f303 	mul.w	r3, r1, r3
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 80091ea:	7893      	ldrb	r3, [r2, #2]
 80091ec:	f043 0302 	orr.w	r3, r3, #2
 80091f0:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	4a0d      	ldr	r2, [pc, #52]	; (800922c <MCU_ProcessModuleHardware+0x274>)
 80091f6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80091fa:	fb01 f303 	mul.w	r3, r1, r3
 80091fe:	4413      	add	r3, r2
 8009200:	3308      	adds	r3, #8
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	2100      	movs	r1, #0
 8009206:	4618      	mov	r0, r3
 8009208:	f001 f866 	bl	800a2d8 <MCU_TransmitState>
 800920c:	e04f      	b.n	80092ae <MCU_ProcessModuleHardware+0x2f6>
 800920e:	bf00      	nop
 8009210:	47ae147b 	.word	0x47ae147b
 8009214:	3f947ae1 	.word	0x3f947ae1
 8009218:	47ae147b 	.word	0x47ae147b
 800921c:	40847ae1 	.word	0x40847ae1
 8009220:	20000da8 	.word	0x20000da8
 8009224:	2000a66c 	.word	0x2000a66c
 8009228:	20000d9c 	.word	0x20000d9c
 800922c:	20000dec 	.word	0x20000dec
 8009230:	2000000c 	.word	0x2000000c
 8009234:	0801853c 	.word	0x0801853c
 8009238:	20000b64 	.word	0x20000b64
 800923c:	200005d8 	.word	0x200005d8
 8009240:	20000d28 	.word	0x20000d28
 8009244:	0801857c 	.word	0x0801857c
    }else if (moduleMaxChargeA > MODULE_MAX_CHARGE_A){
 8009248:	edd7 7a04 	vldr	s15, [r7, #16]
 800924c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8009250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009258:	dd29      	ble.n	80092ae <MCU_ProcessModuleHardware+0x2f6>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max charge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxChargeA, MODULE_MAX_CHARGE_A); serialOut(tempBuffer);}
 800925a:	4bad      	ldr	r3, [pc, #692]	; (8009510 <MCU_ProcessModuleHardware+0x558>)
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b00      	cmp	r3, #0
 8009264:	d018      	beq.n	8009298 <MCU_ProcessModuleHardware+0x2e0>
 8009266:	4bab      	ldr	r3, [pc, #684]	; (8009514 <MCU_ProcessModuleHardware+0x55c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800926e:	461c      	mov	r4, r3
 8009270:	6938      	ldr	r0, [r7, #16]
 8009272:	f7f7 f94b 	bl	800050c <__aeabi_f2d>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	f04f 0000 	mov.w	r0, #0
 800927e:	49a6      	ldr	r1, [pc, #664]	; (8009518 <MCU_ProcessModuleHardware+0x560>)
 8009280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009284:	e9cd 2300 	strd	r2, r3, [sp]
 8009288:	4622      	mov	r2, r4
 800928a:	49a4      	ldr	r1, [pc, #656]	; (800951c <MCU_ProcessModuleHardware+0x564>)
 800928c:	48a4      	ldr	r0, [pc, #656]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 800928e:	f00b fa01 	bl	8014694 <siprintf>
 8009292:	48a3      	ldr	r0, [pc, #652]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 8009294:	f7fc f9b8 	bl	8005608 <serialOut>
      module[moduleIndex].maxChargeA = (MODULE_MAX_CHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	4aa2      	ldr	r2, [pc, #648]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 800929c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80092a0:	fb01 f303 	mul.w	r3, r1, r3
 80092a4:	4413      	add	r3, r2
 80092a6:	330e      	adds	r3, #14
 80092a8:	f248 12f4 	movw	r2, #33268	; 0x81f4
 80092ac:	801a      	strh	r2, [r3, #0]
    if (moduleMaxDischargeA > 0){
 80092ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80092b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ba:	dd4a      	ble.n	8009352 <MCU_ProcessModuleHardware+0x39a>
      if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Module ID=%x in FAULT as max discharge value (%.2fA) > 0!",rxObj.bF.id.EID,moduleMaxDischargeA); serialOut(tempBuffer);}
 80092bc:	4b94      	ldr	r3, [pc, #592]	; (8009510 <MCU_ProcessModuleHardware+0x558>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f003 0303 	and.w	r3, r3, #3
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d113      	bne.n	80092f0 <MCU_ProcessModuleHardware+0x338>
 80092c8:	4b92      	ldr	r3, [pc, #584]	; (8009514 <MCU_ProcessModuleHardware+0x55c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80092d0:	461c      	mov	r4, r3
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7f7 f91a 	bl	800050c <__aeabi_f2d>
 80092d8:	4602      	mov	r2, r0
 80092da:	460b      	mov	r3, r1
 80092dc:	e9cd 2300 	strd	r2, r3, [sp]
 80092e0:	4622      	mov	r2, r4
 80092e2:	4991      	ldr	r1, [pc, #580]	; (8009528 <MCU_ProcessModuleHardware+0x570>)
 80092e4:	488e      	ldr	r0, [pc, #568]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 80092e6:	f00b f9d5 	bl	8014694 <siprintf>
 80092ea:	488d      	ldr	r0, [pc, #564]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 80092ec:	f7fc f98c 	bl	8005608 <serialOut>
      module[moduleIndex].maxChargeA     = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80092f0:	7dfb      	ldrb	r3, [r7, #23]
 80092f2:	4a8c      	ldr	r2, [pc, #560]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 80092f4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80092f8:	fb01 f303 	mul.w	r3, r1, r3
 80092fc:	4413      	add	r3, r2
 80092fe:	330e      	adds	r3, #14
 8009300:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8009304:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].maxDischargeA  = (0/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 8009306:	7dfb      	ldrb	r3, [r7, #23]
 8009308:	4a86      	ldr	r2, [pc, #536]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 800930a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800930e:	fb01 f303 	mul.w	r3, r1, r3
 8009312:	4413      	add	r3, r2
 8009314:	3310      	adds	r3, #16
 8009316:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800931a:	801a      	strh	r2, [r3, #0]
      module[moduleIndex].faultCode.hwIncompatible = true;
 800931c:	7dfb      	ldrb	r3, [r7, #23]
 800931e:	4a81      	ldr	r2, [pc, #516]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 8009320:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009324:	fb01 f303 	mul.w	r3, r1, r3
 8009328:	4413      	add	r3, r2
 800932a:	f503 6298 	add.w	r2, r3, #1216	; 0x4c0
 800932e:	7893      	ldrb	r3, [r2, #2]
 8009330:	f043 0302 	orr.w	r3, r3, #2
 8009334:	7093      	strb	r3, [r2, #2]
      MCU_TransmitState(module[moduleIndex].moduleId,moduleOff);
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	4a7a      	ldr	r2, [pc, #488]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 800933a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800933e:	fb01 f303 	mul.w	r3, r1, r3
 8009342:	4413      	add	r3, r2
 8009344:	3308      	adds	r3, #8
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	2100      	movs	r1, #0
 800934a:	4618      	mov	r0, r3
 800934c:	f000 ffc4 	bl	800a2d8 <MCU_TransmitState>
 8009350:	e032      	b.n	80093b8 <MCU_ProcessModuleHardware+0x400>
    } else if (moduleMaxDischargeA < MODULE_MAX_DISCHARGE_A) {
 8009352:	edd7 7a03 	vldr	s15, [r7, #12]
 8009356:	ed9f 7a75 	vldr	s14, [pc, #468]	; 800952c <MCU_ProcessModuleHardware+0x574>
 800935a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009362:	d529      	bpl.n	80093b8 <MCU_ProcessModuleHardware+0x400>
      if((debugLevel & DBG_MCU) == DBG_MCU ){ sprintf(tempBuffer,"MCU WARNING - Module ID=%x  max discharge value (%.2fA) clipped to %.2fA",rxObj.bF.id.EID, moduleMaxDischargeA, MODULE_MAX_DISCHARGE_A); serialOut(tempBuffer);}
 8009364:	4b6a      	ldr	r3, [pc, #424]	; (8009510 <MCU_ProcessModuleHardware+0x558>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b00      	cmp	r3, #0
 800936e:	d018      	beq.n	80093a2 <MCU_ProcessModuleHardware+0x3ea>
 8009370:	4b68      	ldr	r3, [pc, #416]	; (8009514 <MCU_ProcessModuleHardware+0x55c>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8009378:	461c      	mov	r4, r3
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f7f7 f8c6 	bl	800050c <__aeabi_f2d>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	f04f 0000 	mov.w	r0, #0
 8009388:	4969      	ldr	r1, [pc, #420]	; (8009530 <MCU_ProcessModuleHardware+0x578>)
 800938a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800938e:	e9cd 2300 	strd	r2, r3, [sp]
 8009392:	4622      	mov	r2, r4
 8009394:	4967      	ldr	r1, [pc, #412]	; (8009534 <MCU_ProcessModuleHardware+0x57c>)
 8009396:	4862      	ldr	r0, [pc, #392]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 8009398:	f00b f97c 	bl	8014694 <siprintf>
 800939c:	4860      	ldr	r0, [pc, #384]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 800939e:	f7fc f933 	bl	8005608 <serialOut>
      module[moduleIndex].maxDischargeA = (MODULE_MAX_DISCHARGE_A/MODULE_CURRENT_FACTOR) - (MODULE_CURRENT_BASE/MODULE_CURRENT_FACTOR);
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	4a5f      	ldr	r2, [pc, #380]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 80093a6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80093aa:	fb01 f303 	mul.w	r3, r1, r3
 80093ae:	4413      	add	r3, r2
 80093b0:	3310      	adds	r3, #16
 80093b2:	f247 72cc 	movw	r2, #30668	; 0x77cc
 80093b6:	801a      	strh	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 80093b8:	4b55      	ldr	r3, [pc, #340]	; (8009510 <MCU_ProcessModuleHardware+0x558>)
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	f000 8093 	beq.w	80094ec <MCU_ProcessModuleHardware+0x534>
      moduleMaxChargeA    = MODULE_CURRENT_BASE + (module[moduleIndex].maxChargeA    * MODULE_CURRENT_FACTOR);
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	4a56      	ldr	r2, [pc, #344]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 80093ca:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80093ce:	fb01 f303 	mul.w	r3, r1, r3
 80093d2:	4413      	add	r3, r2
 80093d4:	330e      	adds	r3, #14
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	4618      	mov	r0, r3
 80093da:	f7f7 f885 	bl	80004e8 <__aeabi_i2d>
 80093de:	a346      	add	r3, pc, #280	; (adr r3, 80094f8 <MCU_ProcessModuleHardware+0x540>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f7f7 f8ea 	bl	80005bc <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4610      	mov	r0, r2
 80093ee:	4619      	mov	r1, r3
 80093f0:	a343      	add	r3, pc, #268	; (adr r3, 8009500 <MCU_ProcessModuleHardware+0x548>)
 80093f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f6:	f7f6 ff29 	bl	800024c <__aeabi_dsub>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4610      	mov	r0, r2
 8009400:	4619      	mov	r1, r3
 8009402:	f7f7 fbd3 	bl	8000bac <__aeabi_d2f>
 8009406:	4603      	mov	r3, r0
 8009408:	613b      	str	r3, [r7, #16]
      moduleMaxDischargeA = MODULE_CURRENT_BASE + (module[moduleIndex].maxDischargeA * MODULE_CURRENT_FACTOR);
 800940a:	7dfb      	ldrb	r3, [r7, #23]
 800940c:	4a45      	ldr	r2, [pc, #276]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 800940e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009412:	fb01 f303 	mul.w	r3, r1, r3
 8009416:	4413      	add	r3, r2
 8009418:	3310      	adds	r3, #16
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	4618      	mov	r0, r3
 800941e:	f7f7 f863 	bl	80004e8 <__aeabi_i2d>
 8009422:	a335      	add	r3, pc, #212	; (adr r3, 80094f8 <MCU_ProcessModuleHardware+0x540>)
 8009424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009428:	f7f7 f8c8 	bl	80005bc <__aeabi_dmul>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	4610      	mov	r0, r2
 8009432:	4619      	mov	r1, r3
 8009434:	a332      	add	r3, pc, #200	; (adr r3, 8009500 <MCU_ProcessModuleHardware+0x548>)
 8009436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800943a:	f7f6 ff07 	bl	800024c <__aeabi_dsub>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4610      	mov	r0, r2
 8009444:	4619      	mov	r1, r3
 8009446:	f7f7 fbb1 	bl	8000bac <__aeabi_d2f>
 800944a:	4603      	mov	r3, r0
 800944c:	60fb      	str	r3, [r7, #12]
      moduleMaxEndVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].maxChargeEndV * MODULE_VOLTAGE_FACTOR);
 800944e:	7dfb      	ldrb	r3, [r7, #23]
 8009450:	4a34      	ldr	r2, [pc, #208]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 8009452:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009456:	fb01 f303 	mul.w	r3, r1, r3
 800945a:	4413      	add	r3, r2
 800945c:	3312      	adds	r3, #18
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f7f7 f841 	bl	80004e8 <__aeabi_i2d>
 8009466:	a328      	add	r3, pc, #160	; (adr r3, 8009508 <MCU_ProcessModuleHardware+0x550>)
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	f7f7 f8a6 	bl	80005bc <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4610      	mov	r0, r2
 8009476:	4619      	mov	r1, r3
 8009478:	f04f 0200 	mov.w	r2, #0
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	f7f6 fee6 	bl	8000250 <__adddf3>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4610      	mov	r0, r2
 800948a:	4619      	mov	r1, r3
 800948c:	f7f7 fb8e 	bl	8000bac <__aeabi_d2f>
 8009490:	4603      	mov	r3, r0
 8009492:	60bb      	str	r3, [r7, #8]
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 8009494:	4b1f      	ldr	r3, [pc, #124]	; (8009514 <MCU_ProcessModuleHardware+0x55c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 800949c:	469a      	mov	sl, r3
 800949e:	6938      	ldr	r0, [r7, #16]
 80094a0:	f7f7 f834 	bl	800050c <__aeabi_f2d>
 80094a4:	4604      	mov	r4, r0
 80094a6:	460d      	mov	r5, r1
 80094a8:	68f8      	ldr	r0, [r7, #12]
 80094aa:	f7f7 f82f 	bl	800050c <__aeabi_f2d>
 80094ae:	4680      	mov	r8, r0
 80094b0:	4689      	mov	r9, r1
 80094b2:	68b8      	ldr	r0, [r7, #8]
 80094b4:	f7f7 f82a 	bl	800050c <__aeabi_f2d>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 80094bc:	7df9      	ldrb	r1, [r7, #23]
 80094be:	4819      	ldr	r0, [pc, #100]	; (8009524 <MCU_ProcessModuleHardware+0x56c>)
 80094c0:	f240 46c4 	movw	r6, #1220	; 0x4c4
 80094c4:	fb06 f101 	mul.w	r1, r6, r1
 80094c8:	4401      	add	r1, r0
 80094ca:	310c      	adds	r1, #12
 80094cc:	8809      	ldrh	r1, [r1, #0]
      sprintf(tempBuffer,"MCU RX 0x501 Hardware: ID=%02x, Max Charge=%.2fA, Max Discharge=%.2fA, Max Charge End Voltage=%.2fA, HW=%d",
 80094ce:	9106      	str	r1, [sp, #24]
 80094d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094d4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80094d8:	e9cd 4500 	strd	r4, r5, [sp]
 80094dc:	4652      	mov	r2, sl
 80094de:	4916      	ldr	r1, [pc, #88]	; (8009538 <MCU_ProcessModuleHardware+0x580>)
 80094e0:	480f      	ldr	r0, [pc, #60]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 80094e2:	f00b f8d7 	bl	8014694 <siprintf>
        rxObj.bF.id.EID,moduleMaxChargeA, moduleMaxDischargeA, moduleMaxEndVoltage,module[moduleIndex].hwVersion); serialOut(tempBuffer);
 80094e6:	480e      	ldr	r0, [pc, #56]	; (8009520 <MCU_ProcessModuleHardware+0x568>)
 80094e8:	f7fc f88e 	bl	8005608 <serialOut>
}
 80094ec:	bf00      	nop
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f6:	bf00      	nop
 80094f8:	47ae147b 	.word	0x47ae147b
 80094fc:	3f947ae1 	.word	0x3f947ae1
 8009500:	47ae147b 	.word	0x47ae147b
 8009504:	40847ae1 	.word	0x40847ae1
 8009508:	eb851eb8 	.word	0xeb851eb8
 800950c:	3f8eb851 	.word	0x3f8eb851
 8009510:	2000000c 	.word	0x2000000c
 8009514:	20000d9c 	.word	0x20000d9c
 8009518:	40240000 	.word	0x40240000
 800951c:	080185c4 	.word	0x080185c4
 8009520:	20000b64 	.word	0x20000b64
 8009524:	20000dec 	.word	0x20000dec
 8009528:	0801860c 	.word	0x0801860c
 800952c:	c2280000 	.word	0xc2280000
 8009530:	c0450000 	.word	0xc0450000
 8009534:	08018654 	.word	0x08018654
 8009538:	080186a0 	.word	0x080186a0

0800953c <MCU_RequestModuleStatus>:


/***************************************************************************************************************
*     M C U _ R e q u e s t M o d u l e S t a t u s                               P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_RequestModuleStatus(uint8_t moduleId){
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	4603      	mov	r3, r0
 8009544:	71fb      	strb	r3, [r7, #7]
  CANFRM_MODULE_STATUS_REQUEST statusRequest;
  uint8_t moduleIndex;
  uint8_t index;

  //find the module index
  moduleIndex = pack.moduleCount;
 8009546:	4b41      	ldr	r3, [pc, #260]	; (800964c <MCU_RequestModuleStatus+0x110>)
 8009548:	7d1b      	ldrb	r3, [r3, #20]
 800954a:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 800954c:	2300      	movs	r3, #0
 800954e:	73bb      	strb	r3, [r7, #14]
 8009550:	e010      	b.n	8009574 <MCU_RequestModuleStatus+0x38>
    //if(status.moduleId == module[index].moduleId)
    if(moduleId == module[index].moduleId)
 8009552:	7bbb      	ldrb	r3, [r7, #14]
 8009554:	4a3e      	ldr	r2, [pc, #248]	; (8009650 <MCU_RequestModuleStatus+0x114>)
 8009556:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800955a:	fb01 f303 	mul.w	r3, r1, r3
 800955e:	4413      	add	r3, r2
 8009560:	3308      	adds	r3, #8
 8009562:	781b      	ldrb	r3, [r3, #0]
 8009564:	79fa      	ldrb	r2, [r7, #7]
 8009566:	429a      	cmp	r2, r3
 8009568:	d101      	bne.n	800956e <MCU_RequestModuleStatus+0x32>
      moduleIndex = index; // found it - save the index
 800956a:	7bbb      	ldrb	r3, [r7, #14]
 800956c:	73fb      	strb	r3, [r7, #15]
  for(index = 0; index < pack.moduleCount; index++){
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	3301      	adds	r3, #1
 8009572:	73bb      	strb	r3, [r7, #14]
 8009574:	4b35      	ldr	r3, [pc, #212]	; (800964c <MCU_RequestModuleStatus+0x110>)
 8009576:	7d1b      	ldrb	r3, [r3, #20]
 8009578:	7bba      	ldrb	r2, [r7, #14]
 800957a:	429a      	cmp	r2, r3
 800957c:	d3e9      	bcc.n	8009552 <MCU_RequestModuleStatus+0x16>
    }
  if (moduleIndex == pack.moduleCount){
 800957e:	4b33      	ldr	r3, [pc, #204]	; (800964c <MCU_RequestModuleStatus+0x110>)
 8009580:	7d1b      	ldrb	r3, [r3, #20]
 8009582:	7bfa      	ldrb	r2, [r7, #15]
 8009584:	429a      	cmp	r2, r3
 8009586:	d10d      	bne.n	80095a4 <MCU_RequestModuleStatus+0x68>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_RequestModuleStatus()"); serialOut(tempBuffer);}
 8009588:	4b32      	ldr	r3, [pc, #200]	; (8009654 <MCU_RequestModuleStatus+0x118>)
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	2b03      	cmp	r3, #3
 8009592:	d156      	bne.n	8009642 <MCU_RequestModuleStatus+0x106>
 8009594:	4930      	ldr	r1, [pc, #192]	; (8009658 <MCU_RequestModuleStatus+0x11c>)
 8009596:	4831      	ldr	r0, [pc, #196]	; (800965c <MCU_RequestModuleStatus+0x120>)
 8009598:	f00b f87c 	bl	8014694 <siprintf>
 800959c:	482f      	ldr	r0, [pc, #188]	; (800965c <MCU_RequestModuleStatus+0x120>)
 800959e:	f7fc f833 	bl	8005608 <serialOut>
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
    MCU_TransmitMessageQueue(CAN2);                    // Send it
  }
}
 80095a2:	e04e      	b.n	8009642 <MCU_RequestModuleStatus+0x106>
    module[moduleIndex].statusPending = true;
 80095a4:	7bfb      	ldrb	r3, [r7, #15]
 80095a6:	4a2a      	ldr	r2, [pc, #168]	; (8009650 <MCU_RequestModuleStatus+0x114>)
 80095a8:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80095ac:	fb01 f303 	mul.w	r3, r1, r3
 80095b0:	4413      	add	r3, r2
 80095b2:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 80095b6:	2201      	movs	r2, #1
 80095b8:	701a      	strb	r2, [r3, #0]
    statusRequest.moduleId = moduleId;
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	733b      	strb	r3, [r7, #12]
    txObj.word[0] = 0;                              // Configure transmit message
 80095be:	4b28      	ldr	r3, [pc, #160]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 80095c4:	4b26      	ldr	r3, [pc, #152]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 80095c6:	2200      	movs	r2, #0
 80095c8:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 80095ca:	4b25      	ldr	r3, [pc, #148]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 80095cc:	2200      	movs	r2, #0
 80095ce:	609a      	str	r2, [r3, #8]
 80095d0:	7b3a      	ldrb	r2, [r7, #12]
    memcpy(txd, &statusRequest, sizeof(statusRequest));
 80095d2:	4b24      	ldr	r3, [pc, #144]	; (8009664 <MCU_RequestModuleStatus+0x128>)
 80095d4:	701a      	strb	r2, [r3, #0]
    txObj.bF.id.SID = ID_MODULE_STATUS_REQUEST;    // Standard ID
 80095d6:	4a22      	ldr	r2, [pc, #136]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 80095d8:	8813      	ldrh	r3, [r2, #0]
 80095da:	f240 5112 	movw	r1, #1298	; 0x512
 80095de:	f361 030a 	bfi	r3, r1, #0, #11
 80095e2:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = moduleId;                    // Extended ID
 80095e4:	79fa      	ldrb	r2, [r7, #7]
 80095e6:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80095ea:	491d      	ldr	r1, [pc, #116]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 80095ec:	680b      	ldr	r3, [r1, #0]
 80095ee:	f362 23dc 	bfi	r3, r2, #11, #18
 80095f2:	600b      	str	r3, [r1, #0]
    txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 80095f4:	4a1a      	ldr	r2, [pc, #104]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 80095f6:	7913      	ldrb	r3, [r2, #4]
 80095f8:	f36f 1386 	bfc	r3, #6, #1
 80095fc:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 80095fe:	4a18      	ldr	r2, [pc, #96]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 8009600:	7913      	ldrb	r3, [r2, #4]
 8009602:	2101      	movs	r1, #1
 8009604:	f361 0303 	bfi	r3, r1, #0, #4
 8009608:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800960a:	4a15      	ldr	r2, [pc, #84]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 800960c:	7913      	ldrb	r3, [r2, #4]
 800960e:	f36f 13c7 	bfc	r3, #7, #1
 8009612:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 8009614:	4a12      	ldr	r2, [pc, #72]	; (8009660 <MCU_RequestModuleStatus+0x124>)
 8009616:	7913      	ldrb	r3, [r2, #4]
 8009618:	f043 0310 	orr.w	r3, r3, #16
 800961c:	7113      	strb	r3, [r2, #4]
    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x512 Request Status : ID=%02x",moduleId); serialOut(tempBuffer);}
 800961e:	4b0d      	ldr	r3, [pc, #52]	; (8009654 <MCU_RequestModuleStatus+0x118>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d008      	beq.n	800963c <MCU_RequestModuleStatus+0x100>
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	461a      	mov	r2, r3
 800962e:	490e      	ldr	r1, [pc, #56]	; (8009668 <MCU_RequestModuleStatus+0x12c>)
 8009630:	480a      	ldr	r0, [pc, #40]	; (800965c <MCU_RequestModuleStatus+0x120>)
 8009632:	f00b f82f 	bl	8014694 <siprintf>
 8009636:	4809      	ldr	r0, [pc, #36]	; (800965c <MCU_RequestModuleStatus+0x120>)
 8009638:	f7fb ffe6 	bl	8005608 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                    // Send it
 800963c:	2001      	movs	r0, #1
 800963e:	f7ff f8e9 	bl	8008814 <MCU_TransmitMessageQueue>
}
 8009642:	bf00      	nop
 8009644:	3710      	adds	r7, #16
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}
 800964a:	bf00      	nop
 800964c:	2000a66c 	.word	0x2000a66c
 8009650:	20000dec 	.word	0x20000dec
 8009654:	2000000c 	.word	0x2000000c
 8009658:	0801870c 	.word	0x0801870c
 800965c:	20000b64 	.word	0x20000b64
 8009660:	20000d40 	.word	0x20000d40
 8009664:	20000d4c 	.word	0x20000d4c
 8009668:	0801874c 	.word	0x0801874c

0800966c <MCU_FindMaxVoltageModule>:


/***************************************************************************************************************
*     M C U _ F i n d M a x V o l t a g e M o d u l e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_FindMaxVoltageModule(void){
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0

  uint8_t index;
  uint8_t activeModules = 0;
 8009672:	2300      	movs	r3, #0
 8009674:	71bb      	strb	r3, [r7, #6]
  uint16_t maxVoltage   = 0;
 8009676:	2300      	movs	r3, #0
 8009678:	80bb      	strh	r3, [r7, #4]
  uint8_t  moduleId = pack.moduleCount + 1; // default this to the last + 1
 800967a:	4b37      	ldr	r3, [pc, #220]	; (8009758 <MCU_FindMaxVoltageModule+0xec>)
 800967c:	7d1b      	ldrb	r3, [r3, #20]
 800967e:	3301      	adds	r3, #1
 8009680:	70fb      	strb	r3, [r7, #3]

  //find the module index of the module with the highest mmv that is not in fault
  for(index = 0; index < pack.moduleCount; index++){
 8009682:	2300      	movs	r3, #0
 8009684:	71fb      	strb	r3, [r7, #7]
 8009686:	e052      	b.n	800972e <MCU_FindMaxVoltageModule+0xc2>
    if(module[index].mmv > maxVoltage && module[index].faultCode.commsError == false && module[index].faultCode.overCurrent == false && module[index].faultCode.hwIncompatible == false ){
 8009688:	79fb      	ldrb	r3, [r7, #7]
 800968a:	4a34      	ldr	r2, [pc, #208]	; (800975c <MCU_FindMaxVoltageModule+0xf0>)
 800968c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009690:	fb01 f303 	mul.w	r3, r1, r3
 8009694:	4413      	add	r3, r2
 8009696:	3314      	adds	r3, #20
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	88ba      	ldrh	r2, [r7, #4]
 800969c:	429a      	cmp	r2, r3
 800969e:	d243      	bcs.n	8009728 <MCU_FindMaxVoltageModule+0xbc>
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	4a2e      	ldr	r2, [pc, #184]	; (800975c <MCU_FindMaxVoltageModule+0xf0>)
 80096a4:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80096a8:	fb01 f303 	mul.w	r3, r1, r3
 80096ac:	4413      	add	r3, r2
 80096ae:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80096b2:	789b      	ldrb	r3, [r3, #2]
 80096b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d134      	bne.n	8009728 <MCU_FindMaxVoltageModule+0xbc>
 80096be:	79fb      	ldrb	r3, [r7, #7]
 80096c0:	4a26      	ldr	r2, [pc, #152]	; (800975c <MCU_FindMaxVoltageModule+0xf0>)
 80096c2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80096c6:	fb01 f303 	mul.w	r3, r1, r3
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80096d0:	789b      	ldrb	r3, [r3, #2]
 80096d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d125      	bne.n	8009728 <MCU_FindMaxVoltageModule+0xbc>
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	4a1f      	ldr	r2, [pc, #124]	; (800975c <MCU_FindMaxVoltageModule+0xf0>)
 80096e0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80096e4:	fb01 f303 	mul.w	r3, r1, r3
 80096e8:	4413      	add	r3, r2
 80096ea:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 80096ee:	789b      	ldrb	r3, [r3, #2]
 80096f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d116      	bne.n	8009728 <MCU_FindMaxVoltageModule+0xbc>
      maxVoltage = module[index].mmv;
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	4a17      	ldr	r2, [pc, #92]	; (800975c <MCU_FindMaxVoltageModule+0xf0>)
 80096fe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009702:	fb01 f303 	mul.w	r3, r1, r3
 8009706:	4413      	add	r3, r2
 8009708:	3314      	adds	r3, #20
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	80bb      	strh	r3, [r7, #4]
      moduleId = module[index].moduleId;
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	4a12      	ldr	r2, [pc, #72]	; (800975c <MCU_FindMaxVoltageModule+0xf0>)
 8009712:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009716:	fb01 f303 	mul.w	r3, r1, r3
 800971a:	4413      	add	r3, r2
 800971c:	3308      	adds	r3, #8
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	70fb      	strb	r3, [r7, #3]
      activeModules++;
 8009722:	79bb      	ldrb	r3, [r7, #6]
 8009724:	3301      	adds	r3, #1
 8009726:	71bb      	strb	r3, [r7, #6]
  for(index = 0; index < pack.moduleCount; index++){
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	3301      	adds	r3, #1
 800972c:	71fb      	strb	r3, [r7, #7]
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <MCU_FindMaxVoltageModule+0xec>)
 8009730:	7d1b      	ldrb	r3, [r3, #20]
 8009732:	79fa      	ldrb	r2, [r7, #7]
 8009734:	429a      	cmp	r2, r3
 8009736:	d3a7      	bcc.n	8009688 <MCU_FindMaxVoltageModule+0x1c>
    }
  }
  if(maxVoltage == 0 && activeModules > 0 ) return 0;
 8009738:	88bb      	ldrh	r3, [r7, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d104      	bne.n	8009748 <MCU_FindMaxVoltageModule+0xdc>
 800973e:	79bb      	ldrb	r3, [r7, #6]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <MCU_FindMaxVoltageModule+0xdc>
 8009744:	2300      	movs	r3, #0
 8009746:	e000      	b.n	800974a <MCU_FindMaxVoltageModule+0xde>
  else return moduleId;
 8009748:	78fb      	ldrb	r3, [r7, #3]
}
 800974a:	4618      	mov	r0, r3
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	2000a66c 	.word	0x2000a66c
 800975c:	20000dec 	.word	0x20000dec

08009760 <MCU_ProcessModuleStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 1                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus1(void){
 8009760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009764:	b09d      	sub	sp, #116	; 0x74
 8009766:	af0a      	add	r7, sp, #40	; 0x28
  uint8_t moduleIndex;
  uint8_t index;


  // copy received data to status structure
  memset(&status1,0,sizeof(status1));
 8009768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800976c:	2208      	movs	r2, #8
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f009 ff7d 	bl	8013670 <memset>
  memcpy(&status1, rxd, sizeof(status1));
 8009776:	4ab1      	ldr	r2, [pc, #708]	; (8009a3c <MCU_ProcessModuleStatus1+0x2dc>)
 8009778:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800977c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009780:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009784:	4bae      	ldr	r3, [pc, #696]	; (8009a40 <MCU_ProcessModuleStatus1+0x2e0>)
 8009786:	7d1b      	ldrb	r3, [r3, #20]
 8009788:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 800978c:	2300      	movs	r3, #0
 800978e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8009792:	e01a      	b.n	80097ca <MCU_ProcessModuleStatus1+0x6a>
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009794:	4bab      	ldr	r3, [pc, #684]	; (8009a44 <MCU_ProcessModuleStatus1+0x2e4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800979c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80097a0:	49a9      	ldr	r1, [pc, #676]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 80097a2:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80097a6:	fb00 f303 	mul.w	r3, r0, r3
 80097aa:	440b      	add	r3, r1
 80097ac:	3308      	adds	r3, #8
 80097ae:	781b      	ldrb	r3, [r3, #0]
 80097b0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d103      	bne.n	80097c0 <MCU_ProcessModuleStatus1+0x60>
      moduleIndex = index; // found it - save the index
 80097b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80097bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  for(index = 0; index < pack.moduleCount; index++){
 80097c0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80097c4:	3301      	adds	r3, #1
 80097c6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80097ca:	4b9d      	ldr	r3, [pc, #628]	; (8009a40 <MCU_ProcessModuleStatus1+0x2e0>)
 80097cc:	7d1b      	ldrb	r3, [r3, #20]
 80097ce:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d3de      	bcc.n	8009794 <MCU_ProcessModuleStatus1+0x34>
    }
  if (moduleIndex == pack.moduleCount){
 80097d6:	4b9a      	ldr	r3, [pc, #616]	; (8009a40 <MCU_ProcessModuleStatus1+0x2e0>)
 80097d8:	7d1b      	ldrb	r3, [r3, #20]
 80097da:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80097de:	429a      	cmp	r2, r3
 80097e0:	d10e      	bne.n	8009800 <MCU_ProcessModuleStatus1+0xa0>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus1()"); serialOut(tempBuffer);}
 80097e2:	4b9a      	ldr	r3, [pc, #616]	; (8009a4c <MCU_ProcessModuleStatus1+0x2ec>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	f003 0303 	and.w	r3, r3, #3
 80097ea:	2b03      	cmp	r3, #3
 80097ec:	f040 8222 	bne.w	8009c34 <MCU_ProcessModuleStatus1+0x4d4>
 80097f0:	4997      	ldr	r1, [pc, #604]	; (8009a50 <MCU_ProcessModuleStatus1+0x2f0>)
 80097f2:	4898      	ldr	r0, [pc, #608]	; (8009a54 <MCU_ProcessModuleStatus1+0x2f4>)
 80097f4:	f00a ff4e 	bl	8014694 <siprintf>
 80097f8:	4896      	ldr	r0, [pc, #600]	; (8009a54 <MCU_ProcessModuleStatus1+0x2f4>)
 80097fa:	f7fb ff05 	bl	8005608 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
      serialOut(tempBuffer);
    }
  }
}
 80097fe:	e219      	b.n	8009c34 <MCU_ProcessModuleStatus1+0x4d4>
    module[moduleIndex].statusPending = false;
 8009800:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009804:	4a90      	ldr	r2, [pc, #576]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009806:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800980a:	fb01 f303 	mul.w	r3, r1, r3
 800980e:	4413      	add	r3, r2
 8009810:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009814:	2200      	movs	r2, #0
 8009816:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].mmc           = status1.moduleMmc; //MODULE_CURRENT_BASE + (MODULE_CURRENT_FACTOR * status1.moduleMmc);
 8009818:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800981c:	8e38      	ldrh	r0, [r7, #48]	; 0x30
 800981e:	4a8a      	ldr	r2, [pc, #552]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009820:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009824:	fb01 f303 	mul.w	r3, r1, r3
 8009828:	4413      	add	r3, r2
 800982a:	3316      	adds	r3, #22
 800982c:	4602      	mov	r2, r0
 800982e:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].mmv           = status1.moduleMmv; //MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * status1.moduleMmv);
 8009830:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009834:	8e78      	ldrh	r0, [r7, #50]	; 0x32
 8009836:	4a84      	ldr	r2, [pc, #528]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009838:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800983c:	fb01 f303 	mul.w	r3, r1, r3
 8009840:	4413      	add	r3, r2
 8009842:	3314      	adds	r3, #20
 8009844:	4602      	mov	r2, r0
 8009846:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].soc           = status1.moduleSoc; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoc);
 8009848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800984c:	f897 002d 	ldrb.w	r0, [r7, #45]	; 0x2d
 8009850:	4a7d      	ldr	r2, [pc, #500]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009852:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009856:	fb01 f303 	mul.w	r3, r1, r3
 800985a:	4413      	add	r3, r2
 800985c:	332b      	adds	r3, #43	; 0x2b
 800985e:	4602      	mov	r2, r0
 8009860:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].soh           = status1.moduleSoh; //PERCENTAGE_BASE + (PERCENTAGE_FACTOR * status1.moduleSoh);
 8009862:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009866:	f897 002e 	ldrb.w	r0, [r7, #46]	; 0x2e
 800986a:	4a77      	ldr	r2, [pc, #476]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 800986c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009870:	fb01 f303 	mul.w	r3, r1, r3
 8009874:	4413      	add	r3, r2
 8009876:	332c      	adds	r3, #44	; 0x2c
 8009878:	4602      	mov	r2, r0
 800987a:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].currentState  = status1.moduleState;
 800987c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009880:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009884:	b2da      	uxtb	r2, r3
 8009886:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800988a:	4610      	mov	r0, r2
 800988c:	4a6e      	ldr	r2, [pc, #440]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 800988e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009892:	fb01 f303 	mul.w	r3, r1, r3
 8009896:	4413      	add	r3, r2
 8009898:	3327      	adds	r3, #39	; 0x27
 800989a:	4602      	mov	r2, r0
 800989c:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].status        = status1.moduleStatus;
 800989e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80098a6:	b2da      	uxtb	r2, r3
 80098a8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098ac:	4610      	mov	r0, r2
 80098ae:	4a66      	ldr	r2, [pc, #408]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 80098b0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80098b4:	fb01 f303 	mul.w	r3, r1, r3
 80098b8:	4413      	add	r3, r2
 80098ba:	3326      	adds	r3, #38	; 0x26
 80098bc:	4602      	mov	r2, r0
 80098be:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellCount     = status1.cellCount;
 80098c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098c4:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 80098c8:	4a5f      	ldr	r2, [pc, #380]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 80098ca:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80098ce:	fb01 f303 	mul.w	r3, r1, r3
 80098d2:	4413      	add	r3, r2
 80098d4:	332d      	adds	r3, #45	; 0x2d
 80098d6:	4602      	mov	r2, r0
 80098d8:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 80098da:	4b5f      	ldr	r3, [pc, #380]	; (8009a58 <MCU_ProcessModuleStatus1+0x2f8>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80098e4:	4958      	ldr	r1, [pc, #352]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 80098e6:	f240 40c4 	movw	r0, #1220	; 0x4c4
 80098ea:	fb00 f303 	mul.w	r3, r0, r3
 80098ee:	440b      	add	r3, r1
 80098f0:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80098f4:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 80098f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098fa:	4a58      	ldr	r2, [pc, #352]	; (8009a5c <MCU_ProcessModuleStatus1+0x2fc>)
 80098fc:	6812      	ldr	r2, [r2, #0]
 80098fe:	4952      	ldr	r1, [pc, #328]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009900:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009904:	fb00 f303 	mul.w	r3, r0, r3
 8009908:	440b      	add	r3, r1
 800990a:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800990e:	601a      	str	r2, [r3, #0]
    if(module[moduleIndex].currentState ==  module[moduleIndex].command.commandedState){
 8009910:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009914:	4a4c      	ldr	r2, [pc, #304]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009916:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800991a:	fb01 f303 	mul.w	r3, r1, r3
 800991e:	4413      	add	r3, r2
 8009920:	3327      	adds	r3, #39	; 0x27
 8009922:	781a      	ldrb	r2, [r3, #0]
 8009924:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009928:	4947      	ldr	r1, [pc, #284]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 800992a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800992e:	fb00 f303 	mul.w	r3, r0, r3
 8009932:	440b      	add	r3, r1
 8009934:	3329      	adds	r3, #41	; 0x29
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	429a      	cmp	r2, r3
 800993a:	d10a      	bne.n	8009952 <MCU_ProcessModuleStatus1+0x1f2>
     module[moduleIndex].command.commandStatus = commandActive;
 800993c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009940:	4a41      	ldr	r2, [pc, #260]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009942:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009946:	fb01 f303 	mul.w	r3, r1, r3
 800994a:	4413      	add	r3, r2
 800994c:	332a      	adds	r3, #42	; 0x2a
 800994e:	2201      	movs	r2, #1
 8009950:	701a      	strb	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009952:	4b3e      	ldr	r3, [pc, #248]	; (8009a4c <MCU_ProcessModuleStatus1+0x2ec>)
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b00      	cmp	r3, #0
 800995c:	f000 816a 	beq.w	8009c34 <MCU_ProcessModuleStatus1+0x4d4>
      switch (module[moduleIndex].currentState){
 8009960:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009964:	4a38      	ldr	r2, [pc, #224]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 8009966:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800996a:	fb01 f303 	mul.w	r3, r1, r3
 800996e:	4413      	add	r3, r2
 8009970:	3327      	adds	r3, #39	; 0x27
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b03      	cmp	r3, #3
 8009976:	d014      	beq.n	80099a2 <MCU_ProcessModuleStatus1+0x242>
 8009978:	2b03      	cmp	r3, #3
 800997a:	dc19      	bgt.n	80099b0 <MCU_ProcessModuleStatus1+0x250>
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <MCU_ProcessModuleStatus1+0x226>
 8009980:	2b01      	cmp	r3, #1
 8009982:	d007      	beq.n	8009994 <MCU_ProcessModuleStatus1+0x234>
 8009984:	e014      	b.n	80099b0 <MCU_ProcessModuleStatus1+0x250>
        case 0   : sprintf(strState,"Off(0)"); break;  // both relays off
 8009986:	f107 031c 	add.w	r3, r7, #28
 800998a:	4935      	ldr	r1, [pc, #212]	; (8009a60 <MCU_ProcessModuleStatus1+0x300>)
 800998c:	4618      	mov	r0, r3
 800998e:	f00a fe81 	bl	8014694 <siprintf>
 8009992:	e01f      	b.n	80099d4 <MCU_ProcessModuleStatus1+0x274>
        case 1   : sprintf(strState,"Standby(1)"); break;  // mechanical on, FET off on all modules
 8009994:	f107 031c 	add.w	r3, r7, #28
 8009998:	4932      	ldr	r1, [pc, #200]	; (8009a64 <MCU_ProcessModuleStatus1+0x304>)
 800999a:	4618      	mov	r0, r3
 800999c:	f00a fe7a 	bl	8014694 <siprintf>
 80099a0:	e018      	b.n	80099d4 <MCU_ProcessModuleStatus1+0x274>
        case 3   : sprintf(strState,"On(3)"); break;  // both relays on for all modules."
 80099a2:	f107 031c 	add.w	r3, r7, #28
 80099a6:	4930      	ldr	r1, [pc, #192]	; (8009a68 <MCU_ProcessModuleStatus1+0x308>)
 80099a8:	4618      	mov	r0, r3
 80099aa:	f00a fe73 	bl	8014694 <siprintf>
 80099ae:	e011      	b.n	80099d4 <MCU_ProcessModuleStatus1+0x274>
        default  : sprintf(strState,"ERROR(%d)",module[moduleIndex].currentState); break;
 80099b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099b4:	4a24      	ldr	r2, [pc, #144]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 80099b6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80099ba:	fb01 f303 	mul.w	r3, r1, r3
 80099be:	4413      	add	r3, r2
 80099c0:	3327      	adds	r3, #39	; 0x27
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	f107 031c 	add.w	r3, r7, #28
 80099ca:	4928      	ldr	r1, [pc, #160]	; (8009a6c <MCU_ProcessModuleStatus1+0x30c>)
 80099cc:	4618      	mov	r0, r3
 80099ce:	f00a fe61 	bl	8014694 <siprintf>
 80099d2:	bf00      	nop
      switch (module[moduleIndex].status){
 80099d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80099d8:	4a1b      	ldr	r2, [pc, #108]	; (8009a48 <MCU_ProcessModuleStatus1+0x2e8>)
 80099da:	f240 41c4 	movw	r1, #1220	; 0x4c4
 80099de:	fb01 f303 	mul.w	r3, r1, r3
 80099e2:	4413      	add	r3, r2
 80099e4:	3326      	adds	r3, #38	; 0x26
 80099e6:	781b      	ldrb	r3, [r3, #0]
 80099e8:	2b03      	cmp	r3, #3
 80099ea:	d847      	bhi.n	8009a7c <MCU_ProcessModuleStatus1+0x31c>
 80099ec:	a201      	add	r2, pc, #4	; (adr r2, 80099f4 <MCU_ProcessModuleStatus1+0x294>)
 80099ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f2:	bf00      	nop
 80099f4:	08009a05 	.word	0x08009a05
 80099f8:	08009a13 	.word	0x08009a13
 80099fc:	08009a21 	.word	0x08009a21
 8009a00:	08009a2f 	.word	0x08009a2f
        case 0  : sprintf(strStatus,"Off(0)");    break; // charge prohibited/discharge prohibited
 8009a04:	f107 030c 	add.w	r3, r7, #12
 8009a08:	4915      	ldr	r1, [pc, #84]	; (8009a60 <MCU_ProcessModuleStatus1+0x300>)
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f00a fe42 	bl	8014694 <siprintf>
 8009a10:	e046      	b.n	8009aa0 <MCU_ProcessModuleStatus1+0x340>
        case 1  : sprintf(strStatus,"Empty(1)");  break; // charge allowed/discharge prohibited - pack is empty, state is ON"
 8009a12:	f107 030c 	add.w	r3, r7, #12
 8009a16:	4916      	ldr	r1, [pc, #88]	; (8009a70 <MCU_ProcessModuleStatus1+0x310>)
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f00a fe3b 	bl	8014694 <siprintf>
 8009a1e:	e03f      	b.n	8009aa0 <MCU_ProcessModuleStatus1+0x340>
        case 2  : sprintf(strStatus,"Normal(2)"); break; // charge allowed/discharge allowed - pack in a normal state, state is ON
 8009a20:	f107 030c 	add.w	r3, r7, #12
 8009a24:	4913      	ldr	r1, [pc, #76]	; (8009a74 <MCU_ProcessModuleStatus1+0x314>)
 8009a26:	4618      	mov	r0, r3
 8009a28:	f00a fe34 	bl	8014694 <siprintf>
 8009a2c:	e038      	b.n	8009aa0 <MCU_ProcessModuleStatus1+0x340>
        case 3  : sprintf(strStatus,"Full(3)");   break; // charge prohibited/discharge allowed - pack is full, state is ON
 8009a2e:	f107 030c 	add.w	r3, r7, #12
 8009a32:	4911      	ldr	r1, [pc, #68]	; (8009a78 <MCU_ProcessModuleStatus1+0x318>)
 8009a34:	4618      	mov	r0, r3
 8009a36:	f00a fe2d 	bl	8014694 <siprintf>
 8009a3a:	e031      	b.n	8009aa0 <MCU_ProcessModuleStatus1+0x340>
 8009a3c:	20000da8 	.word	0x20000da8
 8009a40:	2000a66c 	.word	0x2000a66c
 8009a44:	20000d9c 	.word	0x20000d9c
 8009a48:	20000dec 	.word	0x20000dec
 8009a4c:	2000000c 	.word	0x2000000c
 8009a50:	08018774 	.word	0x08018774
 8009a54:	20000b64 	.word	0x20000b64
 8009a58:	200005d8 	.word	0x200005d8
 8009a5c:	20000d28 	.word	0x20000d28
 8009a60:	080187b4 	.word	0x080187b4
 8009a64:	080187bc 	.word	0x080187bc
 8009a68:	080187c8 	.word	0x080187c8
 8009a6c:	080187d0 	.word	0x080187d0
 8009a70:	080187dc 	.word	0x080187dc
 8009a74:	080187e8 	.word	0x080187e8
 8009a78:	080187f4 	.word	0x080187f4
        default : sprintf(strStatus,"ERROR(%d)",module[moduleIndex].status); break;
 8009a7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009a80:	4a75      	ldr	r2, [pc, #468]	; (8009c58 <MCU_ProcessModuleStatus1+0x4f8>)
 8009a82:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009a86:	fb01 f303 	mul.w	r3, r1, r3
 8009a8a:	4413      	add	r3, r2
 8009a8c:	3326      	adds	r3, #38	; 0x26
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	461a      	mov	r2, r3
 8009a92:	f107 030c 	add.w	r3, r7, #12
 8009a96:	4971      	ldr	r1, [pc, #452]	; (8009c5c <MCU_ProcessModuleStatus1+0x4fc>)
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f00a fdfb 	bl	8014694 <siprintf>
 8009a9e:	bf00      	nop
      moduleVoltage = MODULE_VOLTAGE_BASE + (module[moduleIndex].mmv  * MODULE_VOLTAGE_FACTOR);
 8009aa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009aa4:	4a6c      	ldr	r2, [pc, #432]	; (8009c58 <MCU_ProcessModuleStatus1+0x4f8>)
 8009aa6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009aaa:	fb01 f303 	mul.w	r3, r1, r3
 8009aae:	4413      	add	r3, r2
 8009ab0:	3314      	adds	r3, #20
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f6 fd17 	bl	80004e8 <__aeabi_i2d>
 8009aba:	a361      	add	r3, pc, #388	; (adr r3, 8009c40 <MCU_ProcessModuleStatus1+0x4e0>)
 8009abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac0:	f7f6 fd7c 	bl	80005bc <__aeabi_dmul>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4619      	mov	r1, r3
 8009acc:	f04f 0200 	mov.w	r2, #0
 8009ad0:	f04f 0300 	mov.w	r3, #0
 8009ad4:	f7f6 fbbc 	bl	8000250 <__adddf3>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4610      	mov	r0, r2
 8009ade:	4619      	mov	r1, r3
 8009ae0:	f7f7 f864 	bl	8000bac <__aeabi_d2f>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	643b      	str	r3, [r7, #64]	; 0x40
      moduleCurrent = MODULE_CURRENT_BASE + (module[moduleIndex].mmc  * MODULE_CURRENT_FACTOR);
 8009ae8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009aec:	4a5a      	ldr	r2, [pc, #360]	; (8009c58 <MCU_ProcessModuleStatus1+0x4f8>)
 8009aee:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009af2:	fb01 f303 	mul.w	r3, r1, r3
 8009af6:	4413      	add	r3, r2
 8009af8:	3316      	adds	r3, #22
 8009afa:	881b      	ldrh	r3, [r3, #0]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7f6 fcf3 	bl	80004e8 <__aeabi_i2d>
 8009b02:	a351      	add	r3, pc, #324	; (adr r3, 8009c48 <MCU_ProcessModuleStatus1+0x4e8>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	f7f6 fd58 	bl	80005bc <__aeabi_dmul>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4610      	mov	r0, r2
 8009b12:	4619      	mov	r1, r3
 8009b14:	a34e      	add	r3, pc, #312	; (adr r3, 8009c50 <MCU_ProcessModuleStatus1+0x4f0>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	f7f6 fb97 	bl	800024c <__aeabi_dsub>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	460b      	mov	r3, r1
 8009b22:	4610      	mov	r0, r2
 8009b24:	4619      	mov	r1, r3
 8009b26:	f7f7 f841 	bl	8000bac <__aeabi_d2f>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      stateOfCharge = PERCENTAGE_BASE     + (module[moduleIndex].soc  * PERCENTAGE_FACTOR);
 8009b2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b32:	4a49      	ldr	r2, [pc, #292]	; (8009c58 <MCU_ProcessModuleStatus1+0x4f8>)
 8009b34:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009b38:	fb01 f303 	mul.w	r3, r1, r3
 8009b3c:	4413      	add	r3, r2
 8009b3e:	332b      	adds	r3, #43	; 0x2b
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7f6 fcd0 	bl	80004e8 <__aeabi_i2d>
 8009b48:	f04f 0200 	mov.w	r2, #0
 8009b4c:	4b44      	ldr	r3, [pc, #272]	; (8009c60 <MCU_ProcessModuleStatus1+0x500>)
 8009b4e:	f7f6 fd35 	bl	80005bc <__aeabi_dmul>
 8009b52:	4602      	mov	r2, r0
 8009b54:	460b      	mov	r3, r1
 8009b56:	4610      	mov	r0, r2
 8009b58:	4619      	mov	r1, r3
 8009b5a:	f04f 0200 	mov.w	r2, #0
 8009b5e:	f04f 0300 	mov.w	r3, #0
 8009b62:	f7f6 fb75 	bl	8000250 <__adddf3>
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f7f7 f81d 	bl	8000bac <__aeabi_d2f>
 8009b72:	4603      	mov	r3, r0
 8009b74:	63bb      	str	r3, [r7, #56]	; 0x38
      stateOfHealth = PERCENTAGE_BASE     + (module[moduleIndex].soh  * PERCENTAGE_FACTOR);
 8009b76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009b7a:	4a37      	ldr	r2, [pc, #220]	; (8009c58 <MCU_ProcessModuleStatus1+0x4f8>)
 8009b7c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	4413      	add	r3, r2
 8009b86:	332c      	adds	r3, #44	; 0x2c
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7f6 fcac 	bl	80004e8 <__aeabi_i2d>
 8009b90:	f04f 0200 	mov.w	r2, #0
 8009b94:	4b32      	ldr	r3, [pc, #200]	; (8009c60 <MCU_ProcessModuleStatus1+0x500>)
 8009b96:	f7f6 fd11 	bl	80005bc <__aeabi_dmul>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4610      	mov	r0, r2
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	f04f 0300 	mov.w	r3, #0
 8009baa:	f7f6 fb51 	bl	8000250 <__adddf3>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	4610      	mov	r0, r2
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f7f6 fff9 	bl	8000bac <__aeabi_d2f>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8009bbe:	4b29      	ldr	r3, [pc, #164]	; (8009c64 <MCU_ProcessModuleStatus1+0x504>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 8009bc6:	607b      	str	r3, [r7, #4]
          rxObj.bF.id.EID, strState, strStatus, module[moduleIndex].cellCount, moduleVoltage, moduleCurrent, stateOfCharge, stateOfHealth);
 8009bc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8009bcc:	4a22      	ldr	r2, [pc, #136]	; (8009c58 <MCU_ProcessModuleStatus1+0x4f8>)
 8009bce:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009bd2:	fb01 f303 	mul.w	r3, r1, r3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	332d      	adds	r3, #45	; 0x2d
 8009bda:	781b      	ldrb	r3, [r3, #0]
      sprintf(tempBuffer,"MCU RX 0x502 Status #1: ID=%02x, State=%s, Status=%s, Cell Count=%d, Voltage=%.2fV, Current=%.2fA, Charge=%.1f%% Health=%.1f%%",
 8009bdc:	461e      	mov	r6, r3
 8009bde:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8009be0:	f7f6 fc94 	bl	800050c <__aeabi_f2d>
 8009be4:	4604      	mov	r4, r0
 8009be6:	460d      	mov	r5, r1
 8009be8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009bea:	f7f6 fc8f 	bl	800050c <__aeabi_f2d>
 8009bee:	4680      	mov	r8, r0
 8009bf0:	4689      	mov	r9, r1
 8009bf2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009bf4:	f7f6 fc8a 	bl	800050c <__aeabi_f2d>
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	468b      	mov	fp, r1
 8009bfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009bfe:	f7f6 fc85 	bl	800050c <__aeabi_f2d>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	f107 011c 	add.w	r1, r7, #28
 8009c0a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009c0e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8009c12:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8009c16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009c1a:	9601      	str	r6, [sp, #4]
 8009c1c:	f107 030c 	add.w	r3, r7, #12
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	460b      	mov	r3, r1
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	4910      	ldr	r1, [pc, #64]	; (8009c68 <MCU_ProcessModuleStatus1+0x508>)
 8009c28:	4810      	ldr	r0, [pc, #64]	; (8009c6c <MCU_ProcessModuleStatus1+0x50c>)
 8009c2a:	f00a fd33 	bl	8014694 <siprintf>
      serialOut(tempBuffer);
 8009c2e:	480f      	ldr	r0, [pc, #60]	; (8009c6c <MCU_ProcessModuleStatus1+0x50c>)
 8009c30:	f7fb fcea 	bl	8005608 <serialOut>
}
 8009c34:	bf00      	nop
 8009c36:	374c      	adds	r7, #76	; 0x4c
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3e:	bf00      	nop
 8009c40:	eb851eb8 	.word	0xeb851eb8
 8009c44:	3f8eb851 	.word	0x3f8eb851
 8009c48:	47ae147b 	.word	0x47ae147b
 8009c4c:	3f947ae1 	.word	0x3f947ae1
 8009c50:	47ae147b 	.word	0x47ae147b
 8009c54:	40847ae1 	.word	0x40847ae1
 8009c58:	20000dec 	.word	0x20000dec
 8009c5c:	080187d0 	.word	0x080187d0
 8009c60:	3fe00000 	.word	0x3fe00000
 8009c64:	20000d9c 	.word	0x20000d9c
 8009c68:	080187fc 	.word	0x080187fc
 8009c6c:	20000b64 	.word	0x20000b64

08009c70 <MCU_ProcessModuleStatus2>:


/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 2                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus2(void){
 8009c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c74:	b091      	sub	sp, #68	; 0x44
 8009c76:	af08      	add	r7, sp, #32
  CANFRM_MODULE_STATUS_2 status2;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status2,0,sizeof(status2));
 8009c78:	1d3b      	adds	r3, r7, #4
 8009c7a:	2208      	movs	r2, #8
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f009 fcf6 	bl	8013670 <memset>
  memcpy(&status2, rxd, sizeof(status2));
 8009c84:	4aaa      	ldr	r2, [pc, #680]	; (8009f30 <MCU_ProcessModuleStatus2+0x2c0>)
 8009c86:	1d3b      	adds	r3, r7, #4
 8009c88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009c8c:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009c90:	4ba8      	ldr	r3, [pc, #672]	; (8009f34 <MCU_ProcessModuleStatus2+0x2c4>)
 8009c92:	7d1b      	ldrb	r3, [r3, #20]
 8009c94:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 8009c96:	2300      	movs	r3, #0
 8009c98:	77bb      	strb	r3, [r7, #30]
 8009c9a:	e015      	b.n	8009cc8 <MCU_ProcessModuleStatus2+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009c9c:	4ba6      	ldr	r3, [pc, #664]	; (8009f38 <MCU_ProcessModuleStatus2+0x2c8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009ca4:	7fbb      	ldrb	r3, [r7, #30]
 8009ca6:	49a5      	ldr	r1, [pc, #660]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009ca8:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009cac:	fb00 f303 	mul.w	r3, r0, r3
 8009cb0:	440b      	add	r3, r1
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d101      	bne.n	8009cc2 <MCU_ProcessModuleStatus2+0x52>
      moduleIndex = index; // found it - save the index
 8009cbe:	7fbb      	ldrb	r3, [r7, #30]
 8009cc0:	77fb      	strb	r3, [r7, #31]
  for(index = 0; index < pack.moduleCount; index++){
 8009cc2:	7fbb      	ldrb	r3, [r7, #30]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	77bb      	strb	r3, [r7, #30]
 8009cc8:	4b9a      	ldr	r3, [pc, #616]	; (8009f34 <MCU_ProcessModuleStatus2+0x2c4>)
 8009cca:	7d1b      	ldrb	r3, [r3, #20]
 8009ccc:	7fba      	ldrb	r2, [r7, #30]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d3e4      	bcc.n	8009c9c <MCU_ProcessModuleStatus2+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 8009cd2:	4b98      	ldr	r3, [pc, #608]	; (8009f34 <MCU_ProcessModuleStatus2+0x2c4>)
 8009cd4:	7d1b      	ldrb	r3, [r3, #20]
 8009cd6:	7ffa      	ldrb	r2, [r7, #31]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d10e      	bne.n	8009cfa <MCU_ProcessModuleStatus2+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus2()"); serialOut(tempBuffer);}
 8009cdc:	4b98      	ldr	r3, [pc, #608]	; (8009f40 <MCU_ProcessModuleStatus2+0x2d0>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	f003 0303 	and.w	r3, r3, #3
 8009ce4:	2b03      	cmp	r3, #3
 8009ce6:	f040 8114 	bne.w	8009f12 <MCU_ProcessModuleStatus2+0x2a2>
 8009cea:	4996      	ldr	r1, [pc, #600]	; (8009f44 <MCU_ProcessModuleStatus2+0x2d4>)
 8009cec:	4896      	ldr	r0, [pc, #600]	; (8009f48 <MCU_ProcessModuleStatus2+0x2d8>)
 8009cee:	f00a fcd1 	bl	8014694 <siprintf>
 8009cf2:	4895      	ldr	r0, [pc, #596]	; (8009f48 <MCU_ProcessModuleStatus2+0x2d8>)
 8009cf4:	f7fb fc88 	bl	8005608 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
      serialOut(tempBuffer);
    }
  }
}
 8009cf8:	e10b      	b.n	8009f12 <MCU_ProcessModuleStatus2+0x2a2>
    module[moduleIndex].statusPending = false;
 8009cfa:	7ffb      	ldrb	r3, [r7, #31]
 8009cfc:	4a8f      	ldr	r2, [pc, #572]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009cfe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d02:	fb01 f303 	mul.w	r3, r1, r3
 8009d06:	4413      	add	r3, r2
 8009d08:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgVolt           = status2.cellAvgVolt;
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
 8009d12:	8938      	ldrh	r0, [r7, #8]
 8009d14:	4a89      	ldr	r2, [pc, #548]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009d16:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d1a:	fb01 f303 	mul.w	r3, r1, r3
 8009d1e:	4413      	add	r3, r2
 8009d20:	3322      	adds	r3, #34	; 0x22
 8009d22:	4602      	mov	r2, r0
 8009d24:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiVolt            = status2.cellHiVolt;
 8009d26:	7ffb      	ldrb	r3, [r7, #31]
 8009d28:	88f8      	ldrh	r0, [r7, #6]
 8009d2a:	4a84      	ldr	r2, [pc, #528]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009d2c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d30:	fb01 f303 	mul.w	r3, r1, r3
 8009d34:	4413      	add	r3, r2
 8009d36:	331e      	adds	r3, #30
 8009d38:	4602      	mov	r2, r0
 8009d3a:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoVolt            = status2.cellLoVolt;
 8009d3c:	7ffb      	ldrb	r3, [r7, #31]
 8009d3e:	88b8      	ldrh	r0, [r7, #4]
 8009d40:	4a7e      	ldr	r2, [pc, #504]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009d42:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d46:	fb01 f303 	mul.w	r3, r1, r3
 8009d4a:	4413      	add	r3, r2
 8009d4c:	3320      	adds	r3, #32
 8009d4e:	4602      	mov	r2, r0
 8009d50:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellTotalVolt         = status2.cellTotalV;
 8009d52:	7ffb      	ldrb	r3, [r7, #31]
 8009d54:	8978      	ldrh	r0, [r7, #10]
 8009d56:	4a79      	ldr	r2, [pc, #484]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009d58:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009d5c:	fb01 f303 	mul.w	r3, r1, r3
 8009d60:	4413      	add	r3, r2
 8009d62:	3324      	adds	r3, #36	; 0x24
 8009d64:	4602      	mov	r2, r0
 8009d66:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 8009d68:	4b78      	ldr	r3, [pc, #480]	; (8009f4c <MCU_ProcessModuleStatus2+0x2dc>)
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	7ffb      	ldrb	r3, [r7, #31]
 8009d6e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009d70:	4972      	ldr	r1, [pc, #456]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009d72:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d76:	fb00 f303 	mul.w	r3, r0, r3
 8009d7a:	440b      	add	r3, r1
 8009d7c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 8009d80:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 8009d82:	7ffb      	ldrb	r3, [r7, #31]
 8009d84:	4a72      	ldr	r2, [pc, #456]	; (8009f50 <MCU_ProcessModuleStatus2+0x2e0>)
 8009d86:	6812      	ldr	r2, [r2, #0]
 8009d88:	496c      	ldr	r1, [pc, #432]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009d8a:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009d8e:	fb00 f303 	mul.w	r3, r0, r3
 8009d92:	440b      	add	r3, r1
 8009d94:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 8009d98:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 8009d9a:	4b69      	ldr	r3, [pc, #420]	; (8009f40 <MCU_ProcessModuleStatus2+0x2d0>)
 8009d9c:	781b      	ldrb	r3, [r3, #0]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f000 80b5 	beq.w	8009f12 <MCU_ProcessModuleStatus2+0x2a2>
      cellAvgVolt   = CELL_VOLTAGE_BASE + (module[moduleIndex].cellAvgVolt    * CELL_VOLTAGE_FACTOR);
 8009da8:	7ffb      	ldrb	r3, [r7, #31]
 8009daa:	4a64      	ldr	r2, [pc, #400]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009dac:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009db0:	fb01 f303 	mul.w	r3, r1, r3
 8009db4:	4413      	add	r3, r2
 8009db6:	3322      	adds	r3, #34	; 0x22
 8009db8:	881b      	ldrh	r3, [r3, #0]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f6 fb94 	bl	80004e8 <__aeabi_i2d>
 8009dc0:	a357      	add	r3, pc, #348	; (adr r3, 8009f20 <MCU_ProcessModuleStatus2+0x2b0>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fbf9 	bl	80005bc <__aeabi_dmul>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4610      	mov	r0, r2
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f04f 0200 	mov.w	r2, #0
 8009dd6:	f04f 0300 	mov.w	r3, #0
 8009dda:	f7f6 fa39 	bl	8000250 <__adddf3>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4610      	mov	r0, r2
 8009de4:	4619      	mov	r1, r3
 8009de6:	f7f6 fee1 	bl	8000bac <__aeabi_d2f>
 8009dea:	4603      	mov	r3, r0
 8009dec:	61bb      	str	r3, [r7, #24]
      cellHiVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellHiVolt     * CELL_VOLTAGE_FACTOR);
 8009dee:	7ffb      	ldrb	r3, [r7, #31]
 8009df0:	4a52      	ldr	r2, [pc, #328]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009df2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009df6:	fb01 f303 	mul.w	r3, r1, r3
 8009dfa:	4413      	add	r3, r2
 8009dfc:	331e      	adds	r3, #30
 8009dfe:	881b      	ldrh	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f7f6 fb71 	bl	80004e8 <__aeabi_i2d>
 8009e06:	a346      	add	r3, pc, #280	; (adr r3, 8009f20 <MCU_ProcessModuleStatus2+0x2b0>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	f7f6 fbd6 	bl	80005bc <__aeabi_dmul>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4610      	mov	r0, r2
 8009e16:	4619      	mov	r1, r3
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	f7f6 fa16 	bl	8000250 <__adddf3>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	f7f6 febe 	bl	8000bac <__aeabi_d2f>
 8009e30:	4603      	mov	r3, r0
 8009e32:	617b      	str	r3, [r7, #20]
      cellLoVolt    = CELL_VOLTAGE_BASE + (module[moduleIndex].cellLoVolt     * CELL_VOLTAGE_FACTOR);
 8009e34:	7ffb      	ldrb	r3, [r7, #31]
 8009e36:	4a41      	ldr	r2, [pc, #260]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009e38:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009e3c:	fb01 f303 	mul.w	r3, r1, r3
 8009e40:	4413      	add	r3, r2
 8009e42:	3320      	adds	r3, #32
 8009e44:	881b      	ldrh	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7f6 fb4e 	bl	80004e8 <__aeabi_i2d>
 8009e4c:	a334      	add	r3, pc, #208	; (adr r3, 8009f20 <MCU_ProcessModuleStatus2+0x2b0>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 fbb3 	bl	80005bc <__aeabi_dmul>
 8009e56:	4602      	mov	r2, r0
 8009e58:	460b      	mov	r3, r1
 8009e5a:	4610      	mov	r0, r2
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	f04f 0200 	mov.w	r2, #0
 8009e62:	f04f 0300 	mov.w	r3, #0
 8009e66:	f7f6 f9f3 	bl	8000250 <__adddf3>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	4610      	mov	r0, r2
 8009e70:	4619      	mov	r1, r3
 8009e72:	f7f6 fe9b 	bl	8000bac <__aeabi_d2f>
 8009e76:	4603      	mov	r3, r0
 8009e78:	613b      	str	r3, [r7, #16]
      cellTotalVolt = CELL_VOLTAGE_BASE + (module[moduleIndex].cellTotalVolt  * CELL_TOTAL_VOLTAGE_FACTOR);
 8009e7a:	7ffb      	ldrb	r3, [r7, #31]
 8009e7c:	4a2f      	ldr	r2, [pc, #188]	; (8009f3c <MCU_ProcessModuleStatus2+0x2cc>)
 8009e7e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009e82:	fb01 f303 	mul.w	r3, r1, r3
 8009e86:	4413      	add	r3, r2
 8009e88:	3324      	adds	r3, #36	; 0x24
 8009e8a:	881b      	ldrh	r3, [r3, #0]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f7f6 fb2b 	bl	80004e8 <__aeabi_i2d>
 8009e92:	a325      	add	r3, pc, #148	; (adr r3, 8009f28 <MCU_ProcessModuleStatus2+0x2b8>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fb90 	bl	80005bc <__aeabi_dmul>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	f04f 0200 	mov.w	r2, #0
 8009ea8:	f04f 0300 	mov.w	r3, #0
 8009eac:	f7f6 f9d0 	bl	8000250 <__adddf3>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	f7f6 fe78 	bl	8000bac <__aeabi_d2f>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	60fb      	str	r3, [r7, #12]
          rxObj.bF.id.EID, cellAvgVolt, cellHiVolt,cellLoVolt, cellTotalVolt);
 8009ec0:	4b1d      	ldr	r3, [pc, #116]	; (8009f38 <MCU_ProcessModuleStatus2+0x2c8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x503 Status #2: ID=%02x, Average Cell Voltage=%.2fV, Highest Cell Voltage=%.2fV, Lowest Cell Voltage=%.2fV, Total Cell Voltage=%.2fV",
 8009ec8:	461e      	mov	r6, r3
 8009eca:	69b8      	ldr	r0, [r7, #24]
 8009ecc:	f7f6 fb1e 	bl	800050c <__aeabi_f2d>
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	460d      	mov	r5, r1
 8009ed4:	6978      	ldr	r0, [r7, #20]
 8009ed6:	f7f6 fb19 	bl	800050c <__aeabi_f2d>
 8009eda:	4680      	mov	r8, r0
 8009edc:	4689      	mov	r9, r1
 8009ede:	6938      	ldr	r0, [r7, #16]
 8009ee0:	f7f6 fb14 	bl	800050c <__aeabi_f2d>
 8009ee4:	4682      	mov	sl, r0
 8009ee6:	468b      	mov	fp, r1
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f7f6 fb0f 	bl	800050c <__aeabi_f2d>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ef6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8009efa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009efe:	e9cd 4500 	strd	r4, r5, [sp]
 8009f02:	4632      	mov	r2, r6
 8009f04:	4913      	ldr	r1, [pc, #76]	; (8009f54 <MCU_ProcessModuleStatus2+0x2e4>)
 8009f06:	4810      	ldr	r0, [pc, #64]	; (8009f48 <MCU_ProcessModuleStatus2+0x2d8>)
 8009f08:	f00a fbc4 	bl	8014694 <siprintf>
      serialOut(tempBuffer);
 8009f0c:	480e      	ldr	r0, [pc, #56]	; (8009f48 <MCU_ProcessModuleStatus2+0x2d8>)
 8009f0e:	f7fb fb7b 	bl	8005608 <serialOut>
}
 8009f12:	bf00      	nop
 8009f14:	3724      	adds	r7, #36	; 0x24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1c:	f3af 8000 	nop.w
 8009f20:	d2f1a9fc 	.word	0xd2f1a9fc
 8009f24:	3f50624d 	.word	0x3f50624d
 8009f28:	eb851eb8 	.word	0xeb851eb8
 8009f2c:	3f8eb851 	.word	0x3f8eb851
 8009f30:	20000da8 	.word	0x20000da8
 8009f34:	2000a66c 	.word	0x2000a66c
 8009f38:	20000d9c 	.word	0x20000d9c
 8009f3c:	20000dec 	.word	0x20000dec
 8009f40:	2000000c 	.word	0x2000000c
 8009f44:	0801887c 	.word	0x0801887c
 8009f48:	20000b64 	.word	0x20000b64
 8009f4c:	200005d8 	.word	0x200005d8
 8009f50:	20000d28 	.word	0x20000d28
 8009f54:	080188bc 	.word	0x080188bc

08009f58 <MCU_ProcessModuleStatus3>:

/***************************************************************************************************************
*     M C U _ P r o c e s s M o d u l e S t a t u s 3                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessModuleStatus3(void){
 8009f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f5c:	b08d      	sub	sp, #52	; 0x34
 8009f5e:	af06      	add	r7, sp, #24
  CANFRM_MODULE_STATUS_3 status3;
  uint8_t moduleIndex;
  uint8_t index;

  // copy received data to status structure
  memset(&status3,0,sizeof(status3));
 8009f60:	463b      	mov	r3, r7
 8009f62:	2208      	movs	r2, #8
 8009f64:	2100      	movs	r1, #0
 8009f66:	4618      	mov	r0, r3
 8009f68:	f009 fb82 	bl	8013670 <memset>
  memcpy(&status3, rxd, sizeof(status3));
 8009f6c:	4a8e      	ldr	r2, [pc, #568]	; (800a1a8 <MCU_ProcessModuleStatus3+0x250>)
 8009f6e:	463b      	mov	r3, r7
 8009f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f74:	e883 0003 	stmia.w	r3, {r0, r1}

  //find the module index
  moduleIndex = pack.moduleCount;
 8009f78:	4b8c      	ldr	r3, [pc, #560]	; (800a1ac <MCU_ProcessModuleStatus3+0x254>)
 8009f7a:	7d1b      	ldrb	r3, [r3, #20]
 8009f7c:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009f7e:	2300      	movs	r3, #0
 8009f80:	75bb      	strb	r3, [r7, #22]
 8009f82:	e015      	b.n	8009fb0 <MCU_ProcessModuleStatus3+0x58>
    //if(status.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 8009f84:	4b8a      	ldr	r3, [pc, #552]	; (800a1b0 <MCU_ProcessModuleStatus3+0x258>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 8009f8c:	7dbb      	ldrb	r3, [r7, #22]
 8009f8e:	4989      	ldr	r1, [pc, #548]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 8009f90:	f240 40c4 	movw	r0, #1220	; 0x4c4
 8009f94:	fb00 f303 	mul.w	r3, r0, r3
 8009f98:	440b      	add	r3, r1
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d101      	bne.n	8009faa <MCU_ProcessModuleStatus3+0x52>
      moduleIndex = index; // found it - save the index
 8009fa6:	7dbb      	ldrb	r3, [r7, #22]
 8009fa8:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 8009faa:	7dbb      	ldrb	r3, [r7, #22]
 8009fac:	3301      	adds	r3, #1
 8009fae:	75bb      	strb	r3, [r7, #22]
 8009fb0:	4b7e      	ldr	r3, [pc, #504]	; (800a1ac <MCU_ProcessModuleStatus3+0x254>)
 8009fb2:	7d1b      	ldrb	r3, [r3, #20]
 8009fb4:	7dba      	ldrb	r2, [r7, #22]
 8009fb6:	429a      	cmp	r2, r3
 8009fb8:	d3e4      	bcc.n	8009f84 <MCU_ProcessModuleStatus3+0x2c>
    }
  if (moduleIndex == pack.moduleCount){
 8009fba:	4b7c      	ldr	r3, [pc, #496]	; (800a1ac <MCU_ProcessModuleStatus3+0x254>)
 8009fbc:	7d1b      	ldrb	r3, [r3, #20]
 8009fbe:	7dfa      	ldrb	r2, [r7, #23]
 8009fc0:	429a      	cmp	r2, r3
 8009fc2:	d10e      	bne.n	8009fe2 <MCU_ProcessModuleStatus3+0x8a>
    // Unregistered module
    if((debugLevel & (DBG_MCU + DBG_ERRORS))== (DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_ProcessModuleStatus3()"); serialOut(tempBuffer);}
 8009fc4:	4b7c      	ldr	r3, [pc, #496]	; (800a1b8 <MCU_ProcessModuleStatus3+0x260>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	f003 0303 	and.w	r3, r3, #3
 8009fcc:	2b03      	cmp	r3, #3
 8009fce:	f040 80dc 	bne.w	800a18a <MCU_ProcessModuleStatus3+0x232>
 8009fd2:	497a      	ldr	r1, [pc, #488]	; (800a1bc <MCU_ProcessModuleStatus3+0x264>)
 8009fd4:	487a      	ldr	r0, [pc, #488]	; (800a1c0 <MCU_ProcessModuleStatus3+0x268>)
 8009fd6:	f00a fb5d 	bl	8014694 <siprintf>
 8009fda:	4879      	ldr	r0, [pc, #484]	; (800a1c0 <MCU_ProcessModuleStatus3+0x268>)
 8009fdc:	f7fb fb14 	bl	8005608 <serialOut>
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
      serialOut(tempBuffer);
    }
  }
}
 8009fe0:	e0d3      	b.n	800a18a <MCU_ProcessModuleStatus3+0x232>
    module[moduleIndex].statusPending = false;
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	4a73      	ldr	r2, [pc, #460]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 8009fe6:	f240 41c4 	movw	r1, #1220	; 0x4c4
 8009fea:	fb01 f303 	mul.w	r3, r1, r3
 8009fee:	4413      	add	r3, r2
 8009ff0:	f203 43c1 	addw	r3, r3, #1217	; 0x4c1
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	701a      	strb	r2, [r3, #0]
    module[moduleIndex].cellAvgTemp           = status3.cellAvgTemp;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
 8009ffa:	88b8      	ldrh	r0, [r7, #4]
 8009ffc:	4a6d      	ldr	r2, [pc, #436]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 8009ffe:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a002:	fb01 f303 	mul.w	r3, r1, r3
 800a006:	4413      	add	r3, r2
 800a008:	331c      	adds	r3, #28
 800a00a:	4602      	mov	r2, r0
 800a00c:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellHiTemp            = status3.cellHiTemp;
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	8878      	ldrh	r0, [r7, #2]
 800a012:	4a68      	ldr	r2, [pc, #416]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 800a014:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a018:	fb01 f303 	mul.w	r3, r1, r3
 800a01c:	4413      	add	r3, r2
 800a01e:	3318      	adds	r3, #24
 800a020:	4602      	mov	r2, r0
 800a022:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].cellLoTemp            = status3.cellLoTemp;
 800a024:	7dfb      	ldrb	r3, [r7, #23]
 800a026:	8838      	ldrh	r0, [r7, #0]
 800a028:	4a62      	ldr	r2, [pc, #392]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 800a02a:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a02e:	fb01 f303 	mul.w	r3, r1, r3
 800a032:	4413      	add	r3, r2
 800a034:	331a      	adds	r3, #26
 800a036:	4602      	mov	r2, r0
 800a038:	801a      	strh	r2, [r3, #0]
    module[moduleIndex].lastContact.ticks     = htim1.Instance->CNT;
 800a03a:	4b62      	ldr	r3, [pc, #392]	; (800a1c4 <MCU_ProcessModuleStatus3+0x26c>)
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	7dfb      	ldrb	r3, [r7, #23]
 800a040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a042:	495c      	ldr	r1, [pc, #368]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 800a044:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a048:	fb00 f303 	mul.w	r3, r0, r3
 800a04c:	440b      	add	r3, r1
 800a04e:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a052:	601a      	str	r2, [r3, #0]
    module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	4a5c      	ldr	r2, [pc, #368]	; (800a1c8 <MCU_ProcessModuleStatus3+0x270>)
 800a058:	6812      	ldr	r2, [r2, #0]
 800a05a:	4956      	ldr	r1, [pc, #344]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 800a05c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a060:	fb00 f303 	mul.w	r3, r0, r3
 800a064:	440b      	add	r3, r1
 800a066:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800a06a:	601a      	str	r2, [r3, #0]
    if(debugLevel & DBG_MCU){
 800a06c:	4b52      	ldr	r3, [pc, #328]	; (800a1b8 <MCU_ProcessModuleStatus3+0x260>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	f003 0302 	and.w	r3, r3, #2
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 8088 	beq.w	800a18a <MCU_ProcessModuleStatus3+0x232>
      cellAvgTemp = TEMPERATURE_BASE + (module[moduleIndex].cellAvgTemp * TEMPERATURE_FACTOR);
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	4a4d      	ldr	r2, [pc, #308]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 800a07e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a082:	fb01 f303 	mul.w	r3, r1, r3
 800a086:	4413      	add	r3, r2
 800a088:	331c      	adds	r3, #28
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7f6 fa2b 	bl	80004e8 <__aeabi_i2d>
 800a092:	a341      	add	r3, pc, #260	; (adr r3, 800a198 <MCU_ProcessModuleStatus3+0x240>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 fa90 	bl	80005bc <__aeabi_dmul>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	a33e      	add	r3, pc, #248	; (adr r3, 800a1a0 <MCU_ProcessModuleStatus3+0x248>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f8cf 	bl	800024c <__aeabi_dsub>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	f7f6 fd79 	bl	8000bac <__aeabi_d2f>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	613b      	str	r3, [r7, #16]
      cellHiTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellHiTemp  * TEMPERATURE_FACTOR);
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	4a3c      	ldr	r2, [pc, #240]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 800a0c2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a0c6:	fb01 f303 	mul.w	r3, r1, r3
 800a0ca:	4413      	add	r3, r2
 800a0cc:	3318      	adds	r3, #24
 800a0ce:	881b      	ldrh	r3, [r3, #0]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f6 fa09 	bl	80004e8 <__aeabi_i2d>
 800a0d6:	a330      	add	r3, pc, #192	; (adr r3, 800a198 <MCU_ProcessModuleStatus3+0x240>)
 800a0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0dc:	f7f6 fa6e 	bl	80005bc <__aeabi_dmul>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	a32d      	add	r3, pc, #180	; (adr r3, 800a1a0 <MCU_ProcessModuleStatus3+0x248>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 f8ad 	bl	800024c <__aeabi_dsub>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4610      	mov	r0, r2
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f7f6 fd57 	bl	8000bac <__aeabi_d2f>
 800a0fe:	4603      	mov	r3, r0
 800a100:	60fb      	str	r3, [r7, #12]
      cellLoTemp  = TEMPERATURE_BASE + (module[moduleIndex].cellLoTemp  * TEMPERATURE_FACTOR);
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	4a2b      	ldr	r2, [pc, #172]	; (800a1b4 <MCU_ProcessModuleStatus3+0x25c>)
 800a106:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a10a:	fb01 f303 	mul.w	r3, r1, r3
 800a10e:	4413      	add	r3, r2
 800a110:	331a      	adds	r3, #26
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	4618      	mov	r0, r3
 800a116:	f7f6 f9e7 	bl	80004e8 <__aeabi_i2d>
 800a11a:	a31f      	add	r3, pc, #124	; (adr r3, 800a198 <MCU_ProcessModuleStatus3+0x240>)
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f7f6 fa4c 	bl	80005bc <__aeabi_dmul>
 800a124:	4602      	mov	r2, r0
 800a126:	460b      	mov	r3, r1
 800a128:	4610      	mov	r0, r2
 800a12a:	4619      	mov	r1, r3
 800a12c:	a31c      	add	r3, pc, #112	; (adr r3, 800a1a0 <MCU_ProcessModuleStatus3+0x248>)
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	f7f6 f88b 	bl	800024c <__aeabi_dsub>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	4610      	mov	r0, r2
 800a13c:	4619      	mov	r1, r3
 800a13e:	f7f6 fd35 	bl	8000bac <__aeabi_d2f>
 800a142:	4603      	mov	r3, r0
 800a144:	60bb      	str	r3, [r7, #8]
          rxObj.bF.id.EID, cellAvgTemp, cellHiTemp,cellLoTemp);
 800a146:	4b1a      	ldr	r3, [pc, #104]	; (800a1b0 <MCU_ProcessModuleStatus3+0x258>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f3c3 23d1 	ubfx	r3, r3, #11, #18
      sprintf(tempBuffer,"MCU RX 0x504 Status #3: ID=%02x, Average Cell Temp=%.2fC, Highest Cell Temp=%.2fC, Lowest Cell Temp=%.2fC",
 800a14e:	461e      	mov	r6, r3
 800a150:	6938      	ldr	r0, [r7, #16]
 800a152:	f7f6 f9db 	bl	800050c <__aeabi_f2d>
 800a156:	4604      	mov	r4, r0
 800a158:	460d      	mov	r5, r1
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f7f6 f9d6 	bl	800050c <__aeabi_f2d>
 800a160:	4680      	mov	r8, r0
 800a162:	4689      	mov	r9, r1
 800a164:	68b8      	ldr	r0, [r7, #8]
 800a166:	f7f6 f9d1 	bl	800050c <__aeabi_f2d>
 800a16a:	4602      	mov	r2, r0
 800a16c:	460b      	mov	r3, r1
 800a16e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a172:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a176:	e9cd 4500 	strd	r4, r5, [sp]
 800a17a:	4632      	mov	r2, r6
 800a17c:	4913      	ldr	r1, [pc, #76]	; (800a1cc <MCU_ProcessModuleStatus3+0x274>)
 800a17e:	4810      	ldr	r0, [pc, #64]	; (800a1c0 <MCU_ProcessModuleStatus3+0x268>)
 800a180:	f00a fa88 	bl	8014694 <siprintf>
      serialOut(tempBuffer);
 800a184:	480e      	ldr	r0, [pc, #56]	; (800a1c0 <MCU_ProcessModuleStatus3+0x268>)
 800a186:	f7fb fa3f 	bl	8005608 <serialOut>
}
 800a18a:	bf00      	nop
 800a18c:	371c      	adds	r7, #28
 800a18e:	46bd      	mov	sp, r7
 800a190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a194:	f3af 8000 	nop.w
 800a198:	47ae147b 	.word	0x47ae147b
 800a19c:	3f847ae1 	.word	0x3f847ae1
 800a1a0:	cccccccd 	.word	0xcccccccd
 800a1a4:	404baccc 	.word	0x404baccc
 800a1a8:	20000da8 	.word	0x20000da8
 800a1ac:	2000a66c 	.word	0x2000a66c
 800a1b0:	20000d9c 	.word	0x20000d9c
 800a1b4:	20000dec 	.word	0x20000dec
 800a1b8:	2000000c 	.word	0x2000000c
 800a1bc:	0801894c 	.word	0x0801894c
 800a1c0:	20000b64 	.word	0x20000b64
 800a1c4:	200005d8 	.word	0x200005d8
 800a1c8:	20000d28 	.word	0x20000d28
 800a1cc:	0801898c 	.word	0x0801898c

0800a1d0 <MCU_ProcessCellCommStatus1>:


/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l C o m m S t a t u s 1                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellCommStatus1(void){
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b094      	sub	sp, #80	; 0x50
 800a1d4:	af04      	add	r7, sp, #16

  CANFRM_MODULE_CELL_COMM_STATUS_1 cellStatus1;

  // copy received data to status structure
  memset(&cellStatus1,0,sizeof(cellStatus1));
 800a1d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1da:	2208      	movs	r2, #8
 800a1dc:	2100      	movs	r1, #0
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f009 fa46 	bl	8013670 <memset>
  memcpy(&cellStatus1, rxd, sizeof(cellStatus1));
 800a1e4:	4a31      	ldr	r2, [pc, #196]	; (800a2ac <MCU_ProcessCellCommStatus1+0xdc>)
 800a1e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a1ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a1ee:	e883 0003 	stmia.w	r3, {r0, r1}

  if(debugLevel & DBG_MCU){ 
 800a1f2:	4b2f      	ldr	r3, [pc, #188]	; (800a2b0 <MCU_ProcessCellCommStatus1+0xe0>)
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d052      	beq.n	800a2a4 <MCU_ProcessCellCommStatus1+0xd4>
    char eCellCPUs[30];
    char eCellI2CFault[20];

    // Process range of low/high cell messages (if any)
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800a1fe:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a202:	2bff      	cmp	r3, #255	; 0xff
 800a204:	d10a      	bne.n	800a21c <MCU_ProcessCellCommStatus1+0x4c>
        (0 == cellStatus1.mostCellMsgs))
 800a206:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
    if ((0xff == cellStatus1.leastCellMsgs) &&
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d106      	bne.n	800a21c <MCU_ProcessCellCommStatus1+0x4c>
    {
      sprintf(eCellCPUs,"No cells");
 800a20e:	f107 0318 	add.w	r3, r7, #24
 800a212:	4928      	ldr	r1, [pc, #160]	; (800a2b4 <MCU_ProcessCellCommStatus1+0xe4>)
 800a214:	4618      	mov	r0, r3
 800a216:	f00a fa3d 	bl	8014694 <siprintf>
 800a21a:	e019      	b.n	800a250 <MCU_ProcessCellCommStatus1+0x80>
    }
    else {
      if (cellStatus1.leastCellMsgs == cellStatus1.mostCellMsgs) {
 800a21c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a220:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a224:	429a      	cmp	r2, r3
 800a226:	d109      	bne.n	800a23c <MCU_ProcessCellCommStatus1+0x6c>
        sprintf(eCellCPUs, "%u cells", cellStatus1.leastCellMsgs);
 800a228:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a22c:	461a      	mov	r2, r3
 800a22e:	f107 0318 	add.w	r3, r7, #24
 800a232:	4921      	ldr	r1, [pc, #132]	; (800a2b8 <MCU_ProcessCellCommStatus1+0xe8>)
 800a234:	4618      	mov	r0, r3
 800a236:	f00a fa2d 	bl	8014694 <siprintf>
 800a23a:	e009      	b.n	800a250 <MCU_ProcessCellCommStatus1+0x80>
      }
      else {
        sprintf(eCellCPUs, "cells %u-%u", cellStatus1.leastCellMsgs, cellStatus1.mostCellMsgs);
 800a23c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800a240:	461a      	mov	r2, r3
 800a242:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800a246:	f107 0018 	add.w	r0, r7, #24
 800a24a:	491c      	ldr	r1, [pc, #112]	; (800a2bc <MCU_ProcessCellCommStatus1+0xec>)
 800a24c:	f00a fa22 	bl	8014694 <siprintf>
      }
    }
    // State either "No faults" or "First fault=%u" cell
    if (0xff == cellStatus1.cellI2cFaultFirst) {
 800a250:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a254:	2bff      	cmp	r3, #255	; 0xff
 800a256:	d105      	bne.n	800a264 <MCU_ProcessCellCommStatus1+0x94>
      sprintf(eCellI2CFault, "I2C OK");
 800a258:	1d3b      	adds	r3, r7, #4
 800a25a:	4919      	ldr	r1, [pc, #100]	; (800a2c0 <MCU_ProcessCellCommStatus1+0xf0>)
 800a25c:	4618      	mov	r0, r3
 800a25e:	f00a fa19 	bl	8014694 <siprintf>
 800a262:	e007      	b.n	800a274 <MCU_ProcessCellCommStatus1+0xa4>
    }
    else {
      sprintf(eCellI2CFault, "Cell %u I2C fault", cellStatus1.cellI2cFaultFirst);
 800a264:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800a268:	461a      	mov	r2, r3
 800a26a:	1d3b      	adds	r3, r7, #4
 800a26c:	4915      	ldr	r1, [pc, #84]	; (800a2c4 <MCU_ProcessCellCommStatus1+0xf4>)
 800a26e:	4618      	mov	r0, r3
 800a270:	f00a fa10 	bl	8014694 <siprintf>
    }

    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a274:	4b14      	ldr	r3, [pc, #80]	; (800a2c8 <MCU_ProcessCellCommStatus1+0xf8>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f3c3 23d1 	ubfx	r3, r3, #11, #18
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a27c:	4618      	mov	r0, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a27e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a280:	4619      	mov	r1, r3
      rxObj.bF.id.EID, eCellCPUs, cellStatus1.i2cErrors, eCellI2CFault, cellStatus1.framingErrors);
 800a282:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
    sprintf(tempBuffer,"MCU RX 0x507 Cell Status #1: ID=%02x, %s, Total I2C err=%d, %s, Framing errors=%d",
 800a286:	f107 0218 	add.w	r2, r7, #24
 800a28a:	9302      	str	r3, [sp, #8]
 800a28c:	1d3b      	adds	r3, r7, #4
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	9100      	str	r1, [sp, #0]
 800a292:	4613      	mov	r3, r2
 800a294:	4602      	mov	r2, r0
 800a296:	490d      	ldr	r1, [pc, #52]	; (800a2cc <MCU_ProcessCellCommStatus1+0xfc>)
 800a298:	480d      	ldr	r0, [pc, #52]	; (800a2d0 <MCU_ProcessCellCommStatus1+0x100>)
 800a29a:	f00a f9fb 	bl	8014694 <siprintf>

    serialOut(tempBuffer);
 800a29e:	480c      	ldr	r0, [pc, #48]	; (800a2d0 <MCU_ProcessCellCommStatus1+0x100>)
 800a2a0:	f7fb f9b2 	bl	8005608 <serialOut>
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	3740      	adds	r7, #64	; 0x40
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	20000da8 	.word	0x20000da8
 800a2b0:	2000000c 	.word	0x2000000c
 800a2b4:	080189f8 	.word	0x080189f8
 800a2b8:	08018a04 	.word	0x08018a04
 800a2bc:	08018a10 	.word	0x08018a10
 800a2c0:	08018a1c 	.word	0x08018a1c
 800a2c4:	08018a24 	.word	0x08018a24
 800a2c8:	20000d9c 	.word	0x20000d9c
 800a2cc:	08018a38 	.word	0x08018a38
 800a2d0:	20000b64 	.word	0x20000b64
 800a2d4:	00000000 	.word	0x00000000

0800a2d8 <MCU_TransmitState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t S t a t e                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitState(uint8_t moduleId, moduleState state){
 800a2d8:	b5b0      	push	{r4, r5, r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af02      	add	r7, sp, #8
 800a2de:	4603      	mov	r3, r0
 800a2e0:	460a      	mov	r2, r1
 800a2e2:	71fb      	strb	r3, [r7, #7]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	71bb      	strb	r3, [r7, #6]

  CANFRM_MODULE_STATE_CHANGE stateChange;
  uint8_t index;

  // set up the frame
  stateChange.moduleId = moduleId;
 800a2e8:	79fb      	ldrb	r3, [r7, #7]
 800a2ea:	723b      	strb	r3, [r7, #8]
  stateChange.state = state;
 800a2ec:	79bb      	ldrb	r3, [r7, #6]
 800a2ee:	f003 030f 	and.w	r3, r3, #15
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	7a7b      	ldrb	r3, [r7, #9]
 800a2f6:	f362 0303 	bfi	r3, r2, #0, #4
 800a2fa:	727b      	strb	r3, [r7, #9]
  stateChange.UNUSED_12_15 = 0;
 800a2fc:	7a7b      	ldrb	r3, [r7, #9]
 800a2fe:	f36f 1307 	bfc	r3, #4, #4
 800a302:	727b      	strb	r3, [r7, #9]
  stateChange.hvBusVoltage = pack.vcuHvBusVoltage;
 800a304:	4b4c      	ldr	r3, [pc, #304]	; (800a438 <MCU_TransmitState+0x160>)
 800a306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a30a:	817b      	strh	r3, [r7, #10]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800a30c:	4b4b      	ldr	r3, [pc, #300]	; (800a43c <MCU_TransmitState+0x164>)
 800a30e:	2200      	movs	r2, #0
 800a310:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800a312:	4b4a      	ldr	r3, [pc, #296]	; (800a43c <MCU_TransmitState+0x164>)
 800a314:	2200      	movs	r2, #0
 800a316:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800a318:	4b48      	ldr	r3, [pc, #288]	; (800a43c <MCU_TransmitState+0x164>)
 800a31a:	2200      	movs	r2, #0
 800a31c:	609a      	str	r2, [r3, #8]
 800a31e:	68bb      	ldr	r3, [r7, #8]

  memcpy(txd, &stateChange, sizeof(stateChange));
 800a320:	4a47      	ldr	r2, [pc, #284]	; (800a440 <MCU_TransmitState+0x168>)
 800a322:	6013      	str	r3, [r2, #0]

  txObj.bF.id.SID = ID_MODULE_STATE_CHANGE;     // Standard ID
 800a324:	4a45      	ldr	r2, [pc, #276]	; (800a43c <MCU_TransmitState+0x164>)
 800a326:	8813      	ldrh	r3, [r2, #0]
 800a328:	f240 5114 	movw	r1, #1300	; 0x514
 800a32c:	f361 030a 	bfi	r3, r1, #0, #11
 800a330:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = moduleId;                    // Extended ID
 800a332:	79fa      	ldrb	r2, [r7, #7]
 800a334:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800a338:	4940      	ldr	r1, [pc, #256]	; (800a43c <MCU_TransmitState+0x164>)
 800a33a:	680b      	ldr	r3, [r1, #0]
 800a33c:	f362 23dc 	bfi	r3, r2, #11, #18
 800a340:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800a342:	4a3e      	ldr	r2, [pc, #248]	; (800a43c <MCU_TransmitState+0x164>)
 800a344:	7913      	ldrb	r3, [r2, #4]
 800a346:	f36f 1386 	bfc	r3, #6, #1
 800a34a:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_4;                 // 4 bytes to transmit
 800a34c:	4a3b      	ldr	r2, [pc, #236]	; (800a43c <MCU_TransmitState+0x164>)
 800a34e:	7913      	ldrb	r3, [r2, #4]
 800a350:	2104      	movs	r1, #4
 800a352:	f361 0303 	bfi	r3, r1, #0, #4
 800a356:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a358:	4a38      	ldr	r2, [pc, #224]	; (800a43c <MCU_TransmitState+0x164>)
 800a35a:	7913      	ldrb	r3, [r2, #4]
 800a35c:	f36f 13c7 	bfc	r3, #7, #1
 800a360:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800a362:	4a36      	ldr	r2, [pc, #216]	; (800a43c <MCU_TransmitState+0x164>)
 800a364:	7913      	ldrb	r3, [r2, #4]
 800a366:	f043 0310 	orr.w	r3, r3, #16
 800a36a:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x514 State Change ID=%02x, STATE=%02x HV=%.2fV",moduleId,state, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800a36c:	4b35      	ldr	r3, [pc, #212]	; (800a444 <MCU_TransmitState+0x16c>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d019      	beq.n	800a3ac <MCU_TransmitState+0xd4>
 800a378:	79fc      	ldrb	r4, [r7, #7]
 800a37a:	79bd      	ldrb	r5, [r7, #6]
 800a37c:	4b2e      	ldr	r3, [pc, #184]	; (800a438 <MCU_TransmitState+0x160>)
 800a37e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a382:	4618      	mov	r0, r3
 800a384:	f7f6 f8b0 	bl	80004e8 <__aeabi_i2d>
 800a388:	a329      	add	r3, pc, #164	; (adr r3, 800a430 <MCU_TransmitState+0x158>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f6 f915 	bl	80005bc <__aeabi_dmul>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	e9cd 2300 	strd	r2, r3, [sp]
 800a39a:	462b      	mov	r3, r5
 800a39c:	4622      	mov	r2, r4
 800a39e:	492a      	ldr	r1, [pc, #168]	; (800a448 <MCU_TransmitState+0x170>)
 800a3a0:	482a      	ldr	r0, [pc, #168]	; (800a44c <MCU_TransmitState+0x174>)
 800a3a2:	f00a f977 	bl	8014694 <siprintf>
 800a3a6:	4829      	ldr	r0, [pc, #164]	; (800a44c <MCU_TransmitState+0x174>)
 800a3a8:	f7fb f92e 	bl	8005608 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800a3ac:	2001      	movs	r0, #1
 800a3ae:	f7fe fa31 	bl	8008814 <MCU_TransmitMessageQueue>

  // Update commanded state and command status
  index = MCU_ModuleIndexFromId(moduleId);
 800a3b2:	79fb      	ldrb	r3, [r7, #7]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 f9df 	bl	800a778 <MCU_ModuleIndexFromId>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]
  if(index != pack.moduleCount){
 800a3be:	4b1e      	ldr	r3, [pc, #120]	; (800a438 <MCU_TransmitState+0x160>)
 800a3c0:	7d1b      	ldrb	r3, [r3, #20]
 800a3c2:	7bfa      	ldrb	r2, [r7, #15]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d02c      	beq.n	800a422 <MCU_TransmitState+0x14a>
    module[index].command.commandedState  = state;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ca:	4a21      	ldr	r2, [pc, #132]	; (800a450 <MCU_TransmitState+0x178>)
 800a3cc:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a3d0:	fb01 f303 	mul.w	r3, r1, r3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	3329      	adds	r3, #41	; 0x29
 800a3d8:	79ba      	ldrb	r2, [r7, #6]
 800a3da:	701a      	strb	r2, [r3, #0]
    module[index].command.commandStatus   = commandIssued;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
 800a3de:	4a1c      	ldr	r2, [pc, #112]	; (800a450 <MCU_TransmitState+0x178>)
 800a3e0:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a3e4:	fb01 f303 	mul.w	r3, r1, r3
 800a3e8:	4413      	add	r3, r2
 800a3ea:	332a      	adds	r3, #42	; 0x2a
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	701a      	strb	r2, [r3, #0]
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
 800a3f0:	4b18      	ldr	r3, [pc, #96]	; (800a454 <MCU_TransmitState+0x17c>)
 800a3f2:	681a      	ldr	r2, [r3, #0]
 800a3f4:	7bfb      	ldrb	r3, [r7, #15]
 800a3f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3f8:	4915      	ldr	r1, [pc, #84]	; (800a450 <MCU_TransmitState+0x178>)
 800a3fa:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a3fe:	fb00 f303 	mul.w	r3, r0, r3
 800a402:	440b      	add	r3, r1
 800a404:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a408:	601a      	str	r2, [r3, #0]
    module[index].lastTransmit.overflows  = etTimerOverflows;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	4a12      	ldr	r2, [pc, #72]	; (800a458 <MCU_TransmitState+0x180>)
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	490f      	ldr	r1, [pc, #60]	; (800a450 <MCU_TransmitState+0x178>)
 800a412:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a416:	fb00 f303 	mul.w	r3, r0, r3
 800a41a:	440b      	add	r3, r1
 800a41c:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 800a420:	601a      	str	r2, [r3, #0]
  }
}
 800a422:	bf00      	nop
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bdb0      	pop	{r4, r5, r7, pc}
 800a42a:	bf00      	nop
 800a42c:	f3af 8000 	nop.w
 800a430:	eb851eb8 	.word	0xeb851eb8
 800a434:	3f8eb851 	.word	0x3f8eb851
 800a438:	2000a66c 	.word	0x2000a66c
 800a43c:	20000d40 	.word	0x20000d40
 800a440:	20000d4c 	.word	0x20000d4c
 800a444:	2000000c 	.word	0x2000000c
 800a448:	08018abc 	.word	0x08018abc
 800a44c:	20000b64 	.word	0x20000b64
 800a450:	20000dec 	.word	0x20000dec
 800a454:	200005d8 	.word	0x200005d8
 800a458:	20000d28 	.word	0x20000d28

0800a45c <MCU_TransmitMaxState>:


/***************************************************************************************************************
*     M C U _ T r a n s m i t M a x S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_TransmitMaxState(moduleState state){
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	4603      	mov	r3, r0
 800a464:	71fb      	strb	r3, [r7, #7]
  // This is a broadcast to all module to define their maximum permissible state
  // i.e. They will be able to set state to anything up to and including the maximum state

  CANFRM_MODULE_MAX_STATE maxState;

  maxState.maximumState = state;
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	f003 030f 	and.w	r3, r3, #15
 800a46c:	b2da      	uxtb	r2, r3
 800a46e:	7b3b      	ldrb	r3, [r7, #12]
 800a470:	f362 0303 	bfi	r3, r2, #0, #4
 800a474:	733b      	strb	r3, [r7, #12]
  maxState.UNUSED_4_7 = 0;
 800a476:	7b3b      	ldrb	r3, [r7, #12]
 800a478:	f36f 1307 	bfc	r3, #4, #4
 800a47c:	733b      	strb	r3, [r7, #12]

   // clear bit fields
  txObj.word[0] = 0;                              // Configure transmit message
 800a47e:	4b24      	ldr	r3, [pc, #144]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 800a484:	4b22      	ldr	r3, [pc, #136]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a486:	2200      	movs	r2, #0
 800a488:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800a48a:	4b21      	ldr	r3, [pc, #132]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	609a      	str	r2, [r3, #8]
 800a490:	7b3a      	ldrb	r2, [r7, #12]

  memcpy(txd, &maxState, sizeof(maxState));
 800a492:	4b20      	ldr	r3, [pc, #128]	; (800a514 <MCU_TransmitMaxState+0xb8>)
 800a494:	701a      	strb	r2, [r3, #0]

  txObj.bF.id.SID = ID_MODULE_MAX_STATE;         // Standard ID
 800a496:	4a1e      	ldr	r2, [pc, #120]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a498:	8813      	ldrh	r3, [r2, #0]
 800a49a:	f240 5117 	movw	r1, #1303	; 0x517
 800a49e:	f361 030a 	bfi	r3, r1, #0, #11
 800a4a2:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = pack.id;                     // Extended ID = controller ID
 800a4a4:	4b1c      	ldr	r3, [pc, #112]	; (800a518 <MCU_TransmitMaxState+0xbc>)
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800a4ae:	4918      	ldr	r1, [pc, #96]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a4b0:	680b      	ldr	r3, [r1, #0]
 800a4b2:	f362 23dc 	bfi	r3, r2, #11, #18
 800a4b6:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                         // Bit Rate Switch - use DBR when set, NBR when cleared
 800a4b8:	4a15      	ldr	r2, [pc, #84]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a4ba:	7913      	ldrb	r3, [r2, #4]
 800a4bc:	f36f 1386 	bfc	r3, #6, #1
 800a4c0:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_1;                 // 1 bytes to transmit
 800a4c2:	4a13      	ldr	r2, [pc, #76]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a4c4:	7913      	ldrb	r3, [r2, #4]
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	f361 0303 	bfi	r3, r1, #0, #4
 800a4cc:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                         // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a4ce:	4a10      	ldr	r2, [pc, #64]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a4d0:	7913      	ldrb	r3, [r2, #4]
 800a4d2:	f36f 13c7 	bfc	r3, #7, #1
 800a4d6:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                         // ID Extension selection - send base frame when cleared, extended frame when set
 800a4d8:	4a0d      	ldr	r2, [pc, #52]	; (800a510 <MCU_TransmitMaxState+0xb4>)
 800a4da:	7913      	ldrb	r3, [r2, #4]
 800a4dc:	f043 0310 	orr.w	r3, r3, #16
 800a4e0:	7113      	strb	r3, [r2, #4]

  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x517 Maximum Permissible State, STATE=%02x",state); serialOut(tempBuffer);}
 800a4e2:	4b0e      	ldr	r3, [pc, #56]	; (800a51c <MCU_TransmitMaxState+0xc0>)
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	f003 0302 	and.w	r3, r3, #2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d008      	beq.n	800a500 <MCU_TransmitMaxState+0xa4>
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	490b      	ldr	r1, [pc, #44]	; (800a520 <MCU_TransmitMaxState+0xc4>)
 800a4f4:	480b      	ldr	r0, [pc, #44]	; (800a524 <MCU_TransmitMaxState+0xc8>)
 800a4f6:	f00a f8cd 	bl	8014694 <siprintf>
 800a4fa:	480a      	ldr	r0, [pc, #40]	; (800a524 <MCU_TransmitMaxState+0xc8>)
 800a4fc:	f7fb f884 	bl	8005608 <serialOut>
  MCU_TransmitMessageQueue(CAN2);                    // Send it
 800a500:	2001      	movs	r0, #1
 800a502:	f7fe f987 	bl	8008814 <MCU_TransmitMessageQueue>
    module[index].command.commandStatus   = commandIssued;
    module[index].lastTransmit.ticks      = htim1.Instance->CNT;
    module[index].lastTransmit.overflows  = etTimerOverflows;
  }
  */
}
 800a506:	bf00      	nop
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	20000d40 	.word	0x20000d40
 800a514:	20000d4c 	.word	0x20000d4c
 800a518:	2000a66c 	.word	0x2000a66c
 800a51c:	2000000c 	.word	0x2000000c
 800a520:	08018af4 	.word	0x08018af4
 800a524:	20000b64 	.word	0x20000b64

0800a528 <MCU_ProcessCellDetail>:

/***************************************************************************************************************
*     M C U _ P r o c e s s C e l l D e t a i l                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void MCU_ProcessCellDetail(void){
 800a528:	b5b0      	push	{r4, r5, r7, lr}
 800a52a:	b08a      	sub	sp, #40	; 0x28
 800a52c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
  CANFRM_MODULE_DETAIL cellDetail;
  uint8_t moduleIndex = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	75fb      	strb	r3, [r7, #23]
  uint8_t index;


  // copy data to announcement structure
  memcpy(&cellDetail, rxd,sizeof(cellDetail));
 800a532:	4a85      	ldr	r2, [pc, #532]	; (800a748 <MCU_ProcessCellDetail+0x220>)
 800a534:	1d3b      	adds	r3, r7, #4
 800a536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a53a:	e883 0003 	stmia.w	r3, {r0, r1}
  if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU RX 0x505 Cell Detail: ID=%02x, CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x",rxObj.bF.id.EID, cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);}
 800a53e:	4b83      	ldr	r3, [pc, #524]	; (800a74c <MCU_ProcessCellDetail+0x224>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d017      	beq.n	800a57a <MCU_ProcessCellDetail+0x52>
 800a54a:	4b81      	ldr	r3, [pc, #516]	; (800a750 <MCU_ProcessCellDetail+0x228>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800a552:	461c      	mov	r4, r3
 800a554:	797b      	ldrb	r3, [r7, #5]
 800a556:	461d      	mov	r5, r3
 800a558:	793b      	ldrb	r3, [r7, #4]
 800a55a:	7aba      	ldrb	r2, [r7, #10]
 800a55c:	88f9      	ldrh	r1, [r7, #6]
 800a55e:	8938      	ldrh	r0, [r7, #8]
 800a560:	9003      	str	r0, [sp, #12]
 800a562:	9102      	str	r1, [sp, #8]
 800a564:	9201      	str	r2, [sp, #4]
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	462b      	mov	r3, r5
 800a56a:	4622      	mov	r2, r4
 800a56c:	4979      	ldr	r1, [pc, #484]	; (800a754 <MCU_ProcessCellDetail+0x22c>)
 800a56e:	487a      	ldr	r0, [pc, #488]	; (800a758 <MCU_ProcessCellDetail+0x230>)
 800a570:	f00a f890 	bl	8014694 <siprintf>
 800a574:	4878      	ldr	r0, [pc, #480]	; (800a758 <MCU_ProcessCellDetail+0x230>)
 800a576:	f7fb f847 	bl	8005608 <serialOut>

  //check whether the module is already registered and perhaps lost its registration
  moduleIndex = pack.moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 800a57a:	4b78      	ldr	r3, [pc, #480]	; (800a75c <MCU_ProcessCellDetail+0x234>)
 800a57c:	7d1b      	ldrb	r3, [r3, #20]
 800a57e:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a580:	2300      	movs	r3, #0
 800a582:	75bb      	strb	r3, [r7, #22]
 800a584:	e015      	b.n	800a5b2 <MCU_ProcessCellDetail+0x8a>
    //if(cellDetail.moduleId == module[index].moduleId)
    if(rxObj.bF.id.EID == module[index].moduleId)
 800a586:	4b72      	ldr	r3, [pc, #456]	; (800a750 <MCU_ProcessCellDetail+0x228>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800a58e:	7dbb      	ldrb	r3, [r7, #22]
 800a590:	4973      	ldr	r1, [pc, #460]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a592:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a596:	fb00 f303 	mul.w	r3, r0, r3
 800a59a:	440b      	add	r3, r1
 800a59c:	3308      	adds	r3, #8
 800a59e:	781b      	ldrb	r3, [r3, #0]
 800a5a0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d101      	bne.n	800a5ac <MCU_ProcessCellDetail+0x84>
      moduleIndex = index; // module is already registered, save the index
 800a5a8:	7dbb      	ldrb	r3, [r7, #22]
 800a5aa:	75fb      	strb	r3, [r7, #23]
  for(index = 0; index < pack.moduleCount; index++){
 800a5ac:	7dbb      	ldrb	r3, [r7, #22]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	75bb      	strb	r3, [r7, #22]
 800a5b2:	4b6a      	ldr	r3, [pc, #424]	; (800a75c <MCU_ProcessCellDetail+0x234>)
 800a5b4:	7d1b      	ldrb	r3, [r3, #20]
 800a5b6:	7dba      	ldrb	r2, [r7, #22]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d3e4      	bcc.n	800a586 <MCU_ProcessCellDetail+0x5e>
  }
  // store the details
  module[moduleIndex].cellCount = cellDetail.cellCount;
 800a5bc:	7dfb      	ldrb	r3, [r7, #23]
 800a5be:	7978      	ldrb	r0, [r7, #5]
 800a5c0:	4a67      	ldr	r2, [pc, #412]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a5c2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a5c6:	fb01 f303 	mul.w	r3, r1, r3
 800a5ca:	4413      	add	r3, r2
 800a5cc:	332d      	adds	r3, #45	; 0x2d
 800a5ce:	4602      	mov	r2, r0
 800a5d0:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soc = cellDetail.cellSoc;
 800a5d2:	7dfa      	ldrb	r2, [r7, #23]
 800a5d4:	793b      	ldrb	r3, [r7, #4]
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	7abc      	ldrb	r4, [r7, #10]
 800a5da:	4961      	ldr	r1, [pc, #388]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a5dc:	4603      	mov	r3, r0
 800a5de:	005b      	lsls	r3, r3, #1
 800a5e0:	4403      	add	r3, r0
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a5e8:	fb00 f202 	mul.w	r2, r0, r2
 800a5ec:	4413      	add	r3, r2
 800a5ee:	440b      	add	r3, r1
 800a5f0:	3332      	adds	r3, #50	; 0x32
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].soh = cellDetail.cellSoh;
 800a5f6:	7dfa      	ldrb	r2, [r7, #23]
 800a5f8:	793b      	ldrb	r3, [r7, #4]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	7afc      	ldrb	r4, [r7, #11]
 800a5fe:	4958      	ldr	r1, [pc, #352]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a600:	4603      	mov	r3, r0
 800a602:	005b      	lsls	r3, r3, #1
 800a604:	4403      	add	r3, r0
 800a606:	005b      	lsls	r3, r3, #1
 800a608:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a60c:	fb00 f202 	mul.w	r2, r0, r2
 800a610:	4413      	add	r3, r2
 800a612:	440b      	add	r3, r1
 800a614:	3333      	adds	r3, #51	; 0x33
 800a616:	4622      	mov	r2, r4
 800a618:	701a      	strb	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].temp = cellDetail.cellTemp;
 800a61a:	7dfa      	ldrb	r2, [r7, #23]
 800a61c:	793b      	ldrb	r3, [r7, #4]
 800a61e:	4618      	mov	r0, r3
 800a620:	88fc      	ldrh	r4, [r7, #6]
 800a622:	494f      	ldr	r1, [pc, #316]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a624:	4603      	mov	r3, r0
 800a626:	005b      	lsls	r3, r3, #1
 800a628:	4403      	add	r3, r0
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a630:	fb00 f202 	mul.w	r2, r0, r2
 800a634:	4413      	add	r3, r2
 800a636:	440b      	add	r3, r1
 800a638:	3330      	adds	r3, #48	; 0x30
 800a63a:	4622      	mov	r2, r4
 800a63c:	801a      	strh	r2, [r3, #0]
  module[moduleIndex].cell[cellDetail.cellId].voltage= cellDetail.cellVoltage;
 800a63e:	7dfa      	ldrb	r2, [r7, #23]
 800a640:	793b      	ldrb	r3, [r7, #4]
 800a642:	4618      	mov	r0, r3
 800a644:	893c      	ldrh	r4, [r7, #8]
 800a646:	4946      	ldr	r1, [pc, #280]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a648:	4603      	mov	r3, r0
 800a64a:	005b      	lsls	r3, r3, #1
 800a64c:	4403      	add	r3, r0
 800a64e:	005b      	lsls	r3, r3, #1
 800a650:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a654:	fb00 f202 	mul.w	r2, r0, r2
 800a658:	4413      	add	r3, r2
 800a65a:	440b      	add	r3, r1
 800a65c:	332e      	adds	r3, #46	; 0x2e
 800a65e:	4622      	mov	r2, r4
 800a660:	801a      	strh	r2, [r3, #0]

  module[moduleIndex].lastContact.ticks = htim1.Instance->CNT;
 800a662:	4b40      	ldr	r3, [pc, #256]	; (800a764 <MCU_ProcessCellDetail+0x23c>)
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	7dfb      	ldrb	r3, [r7, #23]
 800a668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a66a:	493d      	ldr	r1, [pc, #244]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a66c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a670:	fb00 f303 	mul.w	r3, r0, r3
 800a674:	440b      	add	r3, r1
 800a676:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a67a:	601a      	str	r2, [r3, #0]
  module[moduleIndex].lastContact.overflows = etTimerOverflows;
 800a67c:	7dfb      	ldrb	r3, [r7, #23]
 800a67e:	4a3a      	ldr	r2, [pc, #232]	; (800a768 <MCU_ProcessCellDetail+0x240>)
 800a680:	6812      	ldr	r2, [r2, #0]
 800a682:	4937      	ldr	r1, [pc, #220]	; (800a760 <MCU_ProcessCellDetail+0x238>)
 800a684:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a688:	fb00 f303 	mul.w	r3, r0, r3
 800a68c:	440b      	add	r3, r1
 800a68e:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800a692:	601a      	str	r2, [r3, #0]

  // request the next cell detail packet
  if (cellDetail.cellId < (cellDetail.cellCount -1)){
 800a694:	793b      	ldrb	r3, [r7, #4]
 800a696:	461a      	mov	r2, r3
 800a698:	797b      	ldrb	r3, [r7, #5]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	429a      	cmp	r2, r3
 800a69e:	da4f      	bge.n	800a740 <MCU_ProcessCellDetail+0x218>

    detailRequest.cellId = cellDetail.cellId +1;
 800a6a0:	793b      	ldrb	r3, [r7, #4]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	737b      	strb	r3, [r7, #13]

     // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 800a6a8:	4b30      	ldr	r3, [pc, #192]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800a6ae:	4b2f      	ldr	r3, [pc, #188]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 800a6b4:	4b2d      	ldr	r3, [pc, #180]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	609a      	str	r2, [r3, #8]

    memcpy(txd, &detailRequest, sizeof(detailRequest));
 800a6ba:	4b2d      	ldr	r3, [pc, #180]	; (800a770 <MCU_ProcessCellDetail+0x248>)
 800a6bc:	461a      	mov	r2, r3
 800a6be:	f107 030c 	add.w	r3, r7, #12
 800a6c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6c6:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL_REQUEST;    // Standard ID
 800a6ca:	4a28      	ldr	r2, [pc, #160]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a6cc:	8813      	ldrh	r3, [r2, #0]
 800a6ce:	f240 5115 	movw	r1, #1301	; 0x515
 800a6d2:	f361 030a 	bfi	r3, r1, #0, #11
 800a6d6:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = rxObj.bF.id.EID;             // Extended ID
 800a6d8:	4b1d      	ldr	r3, [pc, #116]	; (800a750 <MCU_ProcessCellDetail+0x228>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f3c3 21d1 	ubfx	r1, r3, #11, #18
 800a6e0:	4a22      	ldr	r2, [pc, #136]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a6e2:	6813      	ldr	r3, [r2, #0]
 800a6e4:	f361 23dc 	bfi	r3, r1, #11, #18
 800a6e8:	6013      	str	r3, [r2, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800a6ea:	4a20      	ldr	r2, [pc, #128]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a6ec:	7913      	ldrb	r3, [r2, #4]
 800a6ee:	f36f 1386 	bfc	r3, #6, #1
 800a6f2:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_2;                  // 2 bytes to transmit
 800a6f4:	4a1d      	ldr	r2, [pc, #116]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a6f6:	7913      	ldrb	r3, [r2, #4]
 800a6f8:	2102      	movs	r1, #2
 800a6fa:	f361 0303 	bfi	r3, r1, #0, #4
 800a6fe:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800a700:	4a1a      	ldr	r2, [pc, #104]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a702:	7913      	ldrb	r3, [r2, #4]
 800a704:	f36f 13c7 	bfc	r3, #7, #1
 800a708:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800a70a:	4a18      	ldr	r2, [pc, #96]	; (800a76c <MCU_ProcessCellDetail+0x244>)
 800a70c:	7913      	ldrb	r3, [r2, #4]
 800a70e:	f043 0310 	orr.w	r3, r3, #16
 800a712:	7113      	strb	r3, [r2, #4]

    if(debugLevel & DBG_MCU){ sprintf(tempBuffer,"MCU TX 0x515 Request detail: ID=%02x, CELL=%02x",rxObj.bF.id.EID,detailRequest.cellId ); serialOut(tempBuffer);}
 800a714:	4b0d      	ldr	r3, [pc, #52]	; (800a74c <MCU_ProcessCellDetail+0x224>)
 800a716:	781b      	ldrb	r3, [r3, #0]
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00c      	beq.n	800a73a <MCU_ProcessCellDetail+0x212>
 800a720:	4b0b      	ldr	r3, [pc, #44]	; (800a750 <MCU_ProcessCellDetail+0x228>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800a728:	461a      	mov	r2, r3
 800a72a:	7b7b      	ldrb	r3, [r7, #13]
 800a72c:	4911      	ldr	r1, [pc, #68]	; (800a774 <MCU_ProcessCellDetail+0x24c>)
 800a72e:	480a      	ldr	r0, [pc, #40]	; (800a758 <MCU_ProcessCellDetail+0x230>)
 800a730:	f009 ffb0 	bl	8014694 <siprintf>
 800a734:	4808      	ldr	r0, [pc, #32]	; (800a758 <MCU_ProcessCellDetail+0x230>)
 800a736:	f7fa ff67 	bl	8005608 <serialOut>
    MCU_TransmitMessageQueue(CAN2);                     // Send it
 800a73a:	2001      	movs	r0, #1
 800a73c:	f7fe f86a 	bl	8008814 <MCU_TransmitMessageQueue>
  }
}
 800a740:	bf00      	nop
 800a742:	3718      	adds	r7, #24
 800a744:	46bd      	mov	sp, r7
 800a746:	bdb0      	pop	{r4, r5, r7, pc}
 800a748:	20000da8 	.word	0x20000da8
 800a74c:	2000000c 	.word	0x2000000c
 800a750:	20000d9c 	.word	0x20000d9c
 800a754:	08018b28 	.word	0x08018b28
 800a758:	20000b64 	.word	0x20000b64
 800a75c:	2000a66c 	.word	0x2000a66c
 800a760:	20000dec 	.word	0x20000dec
 800a764:	200005d8 	.word	0x200005d8
 800a768:	20000d28 	.word	0x20000d28
 800a76c:	20000d40 	.word	0x20000d40
 800a770:	20000d4c 	.word	0x20000d4c
 800a774:	08018b84 	.word	0x08018b84

0800a778 <MCU_ModuleIndexFromId>:

/***************************************************************************************************************
*     M C U _ M o d u l e I n d e x F r o m I d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint8_t MCU_ModuleIndexFromId(uint8_t moduleId)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4603      	mov	r3, r0
 800a780:	71fb      	strb	r3, [r7, #7]
   uint8_t moduleIndex;
   uint8_t index;

   //find the module index
   moduleIndex = pack.moduleCount;
 800a782:	4b15      	ldr	r3, [pc, #84]	; (800a7d8 <MCU_ModuleIndexFromId+0x60>)
 800a784:	7d1b      	ldrb	r3, [r3, #20]
 800a786:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800a788:	2300      	movs	r3, #0
 800a78a:	73bb      	strb	r3, [r7, #14]
 800a78c:	e010      	b.n	800a7b0 <MCU_ModuleIndexFromId+0x38>
     if(moduleId == module[index].moduleId)
 800a78e:	7bbb      	ldrb	r3, [r7, #14]
 800a790:	4a12      	ldr	r2, [pc, #72]	; (800a7dc <MCU_ModuleIndexFromId+0x64>)
 800a792:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a796:	fb01 f303 	mul.w	r3, r1, r3
 800a79a:	4413      	add	r3, r2
 800a79c:	3308      	adds	r3, #8
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	79fa      	ldrb	r2, [r7, #7]
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d101      	bne.n	800a7aa <MCU_ModuleIndexFromId+0x32>
       moduleIndex = index; // found it - save the index
 800a7a6:	7bbb      	ldrb	r3, [r7, #14]
 800a7a8:	73fb      	strb	r3, [r7, #15]
   for(index = 0; index < pack.moduleCount; index++){
 800a7aa:	7bbb      	ldrb	r3, [r7, #14]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	73bb      	strb	r3, [r7, #14]
 800a7b0:	4b09      	ldr	r3, [pc, #36]	; (800a7d8 <MCU_ModuleIndexFromId+0x60>)
 800a7b2:	7d1b      	ldrb	r3, [r3, #20]
 800a7b4:	7bba      	ldrb	r2, [r7, #14]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d3e9      	bcc.n	800a78e <MCU_ModuleIndexFromId+0x16>
     }
   if (moduleIndex != pack.moduleCount) return moduleIndex;
 800a7ba:	4b07      	ldr	r3, [pc, #28]	; (800a7d8 <MCU_ModuleIndexFromId+0x60>)
 800a7bc:	7d1b      	ldrb	r3, [r3, #20]
 800a7be:	7bfa      	ldrb	r2, [r7, #15]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d001      	beq.n	800a7c8 <MCU_ModuleIndexFromId+0x50>
 800a7c4:	7bfb      	ldrb	r3, [r7, #15]
 800a7c6:	e001      	b.n	800a7cc <MCU_ModuleIndexFromId+0x54>
   else return pack.moduleCount; // unregistered module
 800a7c8:	4b03      	ldr	r3, [pc, #12]	; (800a7d8 <MCU_ModuleIndexFromId+0x60>)
 800a7ca:	7d1b      	ldrb	r3, [r3, #20]

}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr
 800a7d8:	2000a66c 	.word	0x2000a66c
 800a7dc:	20000dec 	.word	0x20000dec

0800a7e0 <MCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t M e s s a g e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastMessage(uint8_t moduleId)
{
 800a7e0:	b590      	push	{r4, r7, lr}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800a7ea:	4b32      	ldr	r3, [pc, #200]	; (800a8b4 <MCU_TicksSinceLastMessage+0xd4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800a7f2:	4b31      	ldr	r3, [pc, #196]	; (800a8b8 <MCU_TicksSinceLastMessage+0xd8>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800a7f8:	79fb      	ldrb	r3, [r7, #7]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff ffbc 	bl	800a778 <MCU_ModuleIndexFromId>
 800a800:	4603      	mov	r3, r0
 800a802:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800a804:	4b2d      	ldr	r3, [pc, #180]	; (800a8bc <MCU_TicksSinceLastMessage+0xdc>)
 800a806:	7d1b      	ldrb	r3, [r3, #20]
 800a808:	7afa      	ldrb	r2, [r7, #11]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d040      	beq.n	800a890 <MCU_TicksSinceLastMessage+0xb0>
    if ((overFlows - module[moduleIndex].lastContact.overflows) == 0){
 800a80e:	7afb      	ldrb	r3, [r7, #11]
 800a810:	4a2b      	ldr	r2, [pc, #172]	; (800a8c0 <MCU_TicksSinceLastMessage+0xe0>)
 800a812:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a816:	fb01 f303 	mul.w	r3, r1, r3
 800a81a:	4413      	add	r3, r2
 800a81c:	f203 43b4 	addw	r3, r3, #1204	; 0x4b4
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	429a      	cmp	r2, r3
 800a826:	d10d      	bne.n	800a844 <MCU_TicksSinceLastMessage+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastContact.ticks;
 800a828:	7afb      	ldrb	r3, [r7, #11]
 800a82a:	4a25      	ldr	r2, [pc, #148]	; (800a8c0 <MCU_TicksSinceLastMessage+0xe0>)
 800a82c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a830:	fb01 f303 	mul.w	r3, r1, r3
 800a834:	4413      	add	r3, r2
 800a836:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	693a      	ldr	r2, [r7, #16]
 800a83e:	1ad3      	subs	r3, r2, r3
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	e023      	b.n	800a88c <MCU_TicksSinceLastMessage+0xac>
    } else {
      //             (           ticks last contact to overflow point               ) + (                           ticks in completed overflows                               ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastContact.overflows +1))) + (timerCNT);
 800a844:	4b1b      	ldr	r3, [pc, #108]	; (800a8b4 <MCU_TicksSinceLastMessage+0xd4>)
 800a846:	68da      	ldr	r2, [r3, #12]
 800a848:	7afb      	ldrb	r3, [r7, #11]
 800a84a:	491d      	ldr	r1, [pc, #116]	; (800a8c0 <MCU_TicksSinceLastMessage+0xe0>)
 800a84c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a850:	fb00 f303 	mul.w	r3, r0, r3
 800a854:	440b      	add	r3, r1
 800a856:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	1ad2      	subs	r2, r2, r3
 800a85e:	4b15      	ldr	r3, [pc, #84]	; (800a8b4 <MCU_TicksSinceLastMessage+0xd4>)
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	3301      	adds	r3, #1
 800a864:	7af9      	ldrb	r1, [r7, #11]
 800a866:	4816      	ldr	r0, [pc, #88]	; (800a8c0 <MCU_TicksSinceLastMessage+0xe0>)
 800a868:	f240 44c4 	movw	r4, #1220	; 0x4c4
 800a86c:	fb04 f101 	mul.w	r1, r4, r1
 800a870:	4401      	add	r1, r0
 800a872:	f201 41b4 	addw	r1, r1, #1204	; 0x4b4
 800a876:	6809      	ldr	r1, [r1, #0]
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	1a41      	subs	r1, r0, r1
 800a87c:	3901      	subs	r1, #1
 800a87e:	fb01 f303 	mul.w	r3, r1, r3
 800a882:	441a      	add	r2, r3
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	4413      	add	r3, r2
 800a888:	3301      	adds	r3, #1
 800a88a:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	e00d      	b.n	800a8ac <MCU_TicksSinceLastMessage+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastMessage()"); serialOut(tempBuffer);}
 800a890:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <MCU_TicksSinceLastMessage+0xe4>)
 800a892:	781b      	ldrb	r3, [r3, #0]
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	2b03      	cmp	r3, #3
 800a89a:	d106      	bne.n	800a8aa <MCU_TicksSinceLastMessage+0xca>
 800a89c:	490a      	ldr	r1, [pc, #40]	; (800a8c8 <MCU_TicksSinceLastMessage+0xe8>)
 800a89e:	480b      	ldr	r0, [pc, #44]	; (800a8cc <MCU_TicksSinceLastMessage+0xec>)
 800a8a0:	f009 fef8 	bl	8014694 <siprintf>
 800a8a4:	4809      	ldr	r0, [pc, #36]	; (800a8cc <MCU_TicksSinceLastMessage+0xec>)
 800a8a6:	f7fa feaf 	bl	8005608 <serialOut>
    return 0; // TODO Handle this error
 800a8aa:	2300      	movs	r3, #0
  }
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	371c      	adds	r7, #28
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd90      	pop	{r4, r7, pc}
 800a8b4:	200005d8 	.word	0x200005d8
 800a8b8:	20000d28 	.word	0x20000d28
 800a8bc:	2000a66c 	.word	0x2000a66c
 800a8c0:	20000dec 	.word	0x20000dec
 800a8c4:	2000000c 	.word	0x2000000c
 800a8c8:	08018bb4 	.word	0x08018bb4
 800a8cc:	20000b64 	.word	0x20000b64

0800a8d0 <MCU_TicksSinceLastStateTx>:

/***************************************************************************************************************
*     M C U _ T i c k S i n c e L a s t S t a t e T x                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
uint32_t MCU_TicksSinceLastStateTx(uint8_t moduleId)
{
 800a8d0:	b590      	push	{r4, r7, lr}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	71fb      	strb	r3, [r7, #7]
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800a8da:	4b32      	ldr	r3, [pc, #200]	; (800a9a4 <MCU_TicksSinceLastStateTx+0xd4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	613b      	str	r3, [r7, #16]
  overFlows = etTimerOverflows;
 800a8e2:	4b31      	ldr	r3, [pc, #196]	; (800a9a8 <MCU_TicksSinceLastStateTx+0xd8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	60fb      	str	r3, [r7, #12]

  uint8_t moduleIndex = MCU_ModuleIndexFromId(moduleId);
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff ff44 	bl	800a778 <MCU_ModuleIndexFromId>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	72fb      	strb	r3, [r7, #11]
  if(moduleIndex != pack.moduleCount){
 800a8f4:	4b2d      	ldr	r3, [pc, #180]	; (800a9ac <MCU_TicksSinceLastStateTx+0xdc>)
 800a8f6:	7d1b      	ldrb	r3, [r3, #20]
 800a8f8:	7afa      	ldrb	r2, [r7, #11]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d040      	beq.n	800a980 <MCU_TicksSinceLastStateTx+0xb0>
    if ((overFlows - module[moduleIndex].lastTransmit.overflows) ==0){
 800a8fe:	7afb      	ldrb	r3, [r7, #11]
 800a900:	4a2b      	ldr	r2, [pc, #172]	; (800a9b0 <MCU_TicksSinceLastStateTx+0xe0>)
 800a902:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a906:	fb01 f303 	mul.w	r3, r1, r3
 800a90a:	4413      	add	r3, r2
 800a90c:	f203 43bc 	addw	r3, r3, #1212	; 0x4bc
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	429a      	cmp	r2, r3
 800a916:	d10d      	bne.n	800a934 <MCU_TicksSinceLastStateTx+0x64>
      elapsedTicks = timerCNT - module[moduleIndex].lastTransmit.ticks;
 800a918:	7afb      	ldrb	r3, [r7, #11]
 800a91a:	4a25      	ldr	r2, [pc, #148]	; (800a9b0 <MCU_TicksSinceLastStateTx+0xe0>)
 800a91c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800a920:	fb01 f303 	mul.w	r3, r1, r3
 800a924:	4413      	add	r3, r2
 800a926:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	1ad3      	subs	r3, r2, r3
 800a930:	617b      	str	r3, [r7, #20]
 800a932:	e023      	b.n	800a97c <MCU_TicksSinceLastStateTx+0xac>
    } else {
      //             (           ticks last contact to overflow point                ) + (                           ticks in completed overflows                                ) + ( ticks in current timer period)
      elapsedTicks = ((htim1.Init.Period +1) - module[moduleIndex].lastTransmit.ticks) + ( (htim1.Init.Period +1) * (overFlows - (module[moduleIndex].lastTransmit.overflows +1))) + (timerCNT);
 800a934:	4b1b      	ldr	r3, [pc, #108]	; (800a9a4 <MCU_TicksSinceLastStateTx+0xd4>)
 800a936:	68da      	ldr	r2, [r3, #12]
 800a938:	7afb      	ldrb	r3, [r7, #11]
 800a93a:	491d      	ldr	r1, [pc, #116]	; (800a9b0 <MCU_TicksSinceLastStateTx+0xe0>)
 800a93c:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800a940:	fb00 f303 	mul.w	r3, r0, r3
 800a944:	440b      	add	r3, r1
 800a946:	f503 6397 	add.w	r3, r3, #1208	; 0x4b8
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	1ad2      	subs	r2, r2, r3
 800a94e:	4b15      	ldr	r3, [pc, #84]	; (800a9a4 <MCU_TicksSinceLastStateTx+0xd4>)
 800a950:	68db      	ldr	r3, [r3, #12]
 800a952:	3301      	adds	r3, #1
 800a954:	7af9      	ldrb	r1, [r7, #11]
 800a956:	4816      	ldr	r0, [pc, #88]	; (800a9b0 <MCU_TicksSinceLastStateTx+0xe0>)
 800a958:	f240 44c4 	movw	r4, #1220	; 0x4c4
 800a95c:	fb04 f101 	mul.w	r1, r4, r1
 800a960:	4401      	add	r1, r0
 800a962:	f201 41bc 	addw	r1, r1, #1212	; 0x4bc
 800a966:	6809      	ldr	r1, [r1, #0]
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	1a41      	subs	r1, r0, r1
 800a96c:	3901      	subs	r1, #1
 800a96e:	fb01 f303 	mul.w	r3, r1, r3
 800a972:	441a      	add	r2, r3
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	4413      	add	r3, r2
 800a978:	3301      	adds	r3, #1
 800a97a:	617b      	str	r3, [r7, #20]
    }
    return elapsedTicks;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	e00d      	b.n	800a99c <MCU_TicksSinceLastStateTx+0xcc>
  } else {
    // Unregistered module
    if((debugLevel & ( DBG_MCU + DBG_ERRORS))== ( DBG_MCU + DBG_ERRORS)){ sprintf(tempBuffer,"MCU ERROR - Unregistered module in MCU_TicksSinceLastTx()"); serialOut(tempBuffer);}
 800a980:	4b0c      	ldr	r3, [pc, #48]	; (800a9b4 <MCU_TicksSinceLastStateTx+0xe4>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	f003 0303 	and.w	r3, r3, #3
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d106      	bne.n	800a99a <MCU_TicksSinceLastStateTx+0xca>
 800a98c:	490a      	ldr	r1, [pc, #40]	; (800a9b8 <MCU_TicksSinceLastStateTx+0xe8>)
 800a98e:	480b      	ldr	r0, [pc, #44]	; (800a9bc <MCU_TicksSinceLastStateTx+0xec>)
 800a990:	f009 fe80 	bl	8014694 <siprintf>
 800a994:	4809      	ldr	r0, [pc, #36]	; (800a9bc <MCU_TicksSinceLastStateTx+0xec>)
 800a996:	f7fa fe37 	bl	8005608 <serialOut>
    return 0; // TODO Handle this error
 800a99a:	2300      	movs	r3, #0
  }
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd90      	pop	{r4, r7, pc}
 800a9a4:	200005d8 	.word	0x200005d8
 800a9a8:	20000d28 	.word	0x20000d28
 800a9ac:	2000a66c 	.word	0x2000a66c
 800a9b0:	20000dec 	.word	0x20000dec
 800a9b4:	2000000c 	.word	0x2000000c
 800a9b8:	08018bf4 	.word	0x08018bf4
 800a9bc:	20000b64 	.word	0x20000b64

0800a9c0 <CAN_TestRegisterAccess>:

/***************************************************************************************************************
*     C A N _ T e s t R e g i s t e r A c c e s s                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRegisterAccess(CANFDSPI_MODULE_ID index)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	73bb      	strb	r3, [r7, #14]
  Nop();
 800a9ce:	bf00      	nop

  // Verify read/write with different access length
  // Note: registers can be accessed in multiples of bytes
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	73fb      	strb	r3, [r7, #15]
 800a9d4:	e05d      	b.n	800aa92 <CAN_TestRegisterAccess+0xd2>
    for (i = 0; i < length; i++) {
 800a9d6:	4b34      	ldr	r3, [pc, #208]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800a9d8:	2200      	movs	r2, #0
 800a9da:	701a      	strb	r2, [r3, #0]
 800a9dc:	e016      	b.n	800aa0c <CAN_TestRegisterAccess+0x4c>
        txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 800a9de:	f009 fe0b 	bl	80145f8 <rand>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	4a30      	ldr	r2, [pc, #192]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800a9e8:	7812      	ldrb	r2, [r2, #0]
 800a9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9ee:	b2d9      	uxtb	r1, r3
 800a9f0:	4b2e      	ldr	r3, [pc, #184]	; (800aaac <CAN_TestRegisterAccess+0xec>)
 800a9f2:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800a9f4:	4b2c      	ldr	r3, [pc, #176]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	4b2d      	ldr	r3, [pc, #180]	; (800aab0 <CAN_TestRegisterAccess+0xf0>)
 800a9fc:	21ff      	movs	r1, #255	; 0xff
 800a9fe:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800aa00:	4b29      	ldr	r3, [pc, #164]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	3301      	adds	r3, #1
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	4b27      	ldr	r3, [pc, #156]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa0a:	701a      	strb	r2, [r3, #0]
 800aa0c:	4b26      	ldr	r3, [pc, #152]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	7bfa      	ldrb	r2, [r7, #15]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d8e3      	bhi.n	800a9de <CAN_TestRegisterAccess+0x1e>
    }
    Nop();
 800aa16:	bf00      	nop

    // Write data to registers
    DRV_CANFDSPI_WriteByteArray(index, cREGADDR_CiFLTOBJ, txd, length);
 800aa18:	7bfb      	ldrb	r3, [r7, #15]
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	79f8      	ldrb	r0, [r7, #7]
 800aa1e:	4a23      	ldr	r2, [pc, #140]	; (800aaac <CAN_TestRegisterAccess+0xec>)
 800aa20:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800aa24:	f7f6 ffb2 	bl	800198c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from registers
    DRV_CANFDSPI_ReadByteArray(index, cREGADDR_CiFLTOBJ, rxd, length);
 800aa28:	7bfb      	ldrb	r3, [r7, #15]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	79f8      	ldrb	r0, [r7, #7]
 800aa2e:	4a20      	ldr	r2, [pc, #128]	; (800aab0 <CAN_TestRegisterAccess+0xf0>)
 800aa30:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800aa34:	f7f6 fef8 	bl	8001828 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800aa3c:	4b1a      	ldr	r3, [pc, #104]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	701a      	strb	r2, [r3, #0]
 800aa42:	e01e      	b.n	800aa82 <CAN_TestRegisterAccess+0xc2>
        good = txd[i] == rxd[i];
 800aa44:	4b18      	ldr	r3, [pc, #96]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b18      	ldr	r3, [pc, #96]	; (800aaac <CAN_TestRegisterAccess+0xec>)
 800aa4c:	5c9a      	ldrb	r2, [r3, r2]
 800aa4e:	4b16      	ldr	r3, [pc, #88]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	4619      	mov	r1, r3
 800aa54:	4b16      	ldr	r3, [pc, #88]	; (800aab0 <CAN_TestRegisterAccess+0xf0>)
 800aa56:	5c5b      	ldrb	r3, [r3, r1]
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	bf0c      	ite	eq
 800aa5c:	2301      	moveq	r3, #1
 800aa5e:	2300      	movne	r3, #0
 800aa60:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	f083 0301 	eor.w	r3, r3, #1
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d003      	beq.n	800aa76 <CAN_TestRegisterAccess+0xb6>
        Nop();
 800aa6e:	bf00      	nop
        Nop();
 800aa70:	bf00      	nop

        // Data mismatch
        return false;
 800aa72:	2300      	movs	r3, #0
 800aa74:	e013      	b.n	800aa9e <CAN_TestRegisterAccess+0xde>
    for (i = 0; i < length; i++) {
 800aa76:	4b0c      	ldr	r3, [pc, #48]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa80:	701a      	strb	r2, [r3, #0]
 800aa82:	4b09      	ldr	r3, [pc, #36]	; (800aaa8 <CAN_TestRegisterAccess+0xe8>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	7bfa      	ldrb	r2, [r7, #15]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d8db      	bhi.n	800aa44 <CAN_TestRegisterAccess+0x84>
  for (length = 1; length <= MAX_DATA_BYTES; length++) {
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	73fb      	strb	r3, [r7, #15]
 800aa92:	7bfb      	ldrb	r3, [r7, #15]
 800aa94:	2b40      	cmp	r3, #64	; 0x40
 800aa96:	d99e      	bls.n	800a9d6 <CAN_TestRegisterAccess+0x16>
      }
    }
  }
  Nop();
 800aa98:	bf00      	nop
  Nop();
 800aa9a:	bf00      	nop
  return true;
 800aa9c:	2301      	movs	r3, #1
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3710      	adds	r7, #16
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000de8 	.word	0x20000de8
 800aaac:	20000d4c 	.word	0x20000d4c
 800aab0:	20000da8 	.word	0x20000da8

0800aab4 <CAN_TestRamAccess>:
//! Test RAM access
/***************************************************************************************************************
*     C A N _ T e s t R a m A c c e s s                                            P A C K   C O N T R O L L E R
***************************************************************************************************************/
bool CAN_TestRamAccess(CANFDSPI_MODULE_ID index)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	4603      	mov	r3, r0
 800aabc:	71fb      	strb	r3, [r7, #7]
  // Variables
  uint8_t length;
  bool good = false;
 800aabe:	2300      	movs	r3, #0
 800aac0:	73bb      	strb	r3, [r7, #14]
  Nop();
 800aac2:	bf00      	nop

  // Verify read/write with different access length
  // Note: RAM can only be accessed in multiples of 4 bytes
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800aac4:	2304      	movs	r3, #4
 800aac6:	73fb      	strb	r3, [r7, #15]
 800aac8:	e05b      	b.n	800ab82 <CAN_TestRamAccess+0xce>
    for (i = 0; i < length; i++) {
 800aaca:	4b32      	ldr	r3, [pc, #200]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800aacc:	2200      	movs	r2, #0
 800aace:	701a      	strb	r2, [r3, #0]
 800aad0:	e014      	b.n	800aafc <CAN_TestRamAccess+0x48>
        txd[i] = rand() & 0xff;
 800aad2:	f009 fd91 	bl	80145f8 <rand>
 800aad6:	4601      	mov	r1, r0
 800aad8:	4b2e      	ldr	r3, [pc, #184]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800aada:	781b      	ldrb	r3, [r3, #0]
 800aadc:	461a      	mov	r2, r3
 800aade:	b2c9      	uxtb	r1, r1
 800aae0:	4b2d      	ldr	r3, [pc, #180]	; (800ab98 <CAN_TestRamAccess+0xe4>)
 800aae2:	5499      	strb	r1, [r3, r2]
        rxd[i] = 0xff;
 800aae4:	4b2b      	ldr	r3, [pc, #172]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	461a      	mov	r2, r3
 800aaea:	4b2c      	ldr	r3, [pc, #176]	; (800ab9c <CAN_TestRamAccess+0xe8>)
 800aaec:	21ff      	movs	r1, #255	; 0xff
 800aaee:	5499      	strb	r1, [r3, r2]
    for (i = 0; i < length; i++) {
 800aaf0:	4b28      	ldr	r3, [pc, #160]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800aaf2:	781b      	ldrb	r3, [r3, #0]
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	4b26      	ldr	r3, [pc, #152]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800aafa:	701a      	strb	r2, [r3, #0]
 800aafc:	4b25      	ldr	r3, [pc, #148]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	7bfa      	ldrb	r2, [r7, #15]
 800ab02:	429a      	cmp	r2, r3
 800ab04:	d8e5      	bhi.n	800aad2 <CAN_TestRamAccess+0x1e>
    }
    Nop();
 800ab06:	bf00      	nop

    // Write data to RAM
    DRV_CANFDSPI_WriteByteArray(index, cRAMADDR_START, txd, length);
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	79f8      	ldrb	r0, [r7, #7]
 800ab0e:	4a22      	ldr	r2, [pc, #136]	; (800ab98 <CAN_TestRamAccess+0xe4>)
 800ab10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab14:	f7f6 ff3a 	bl	800198c <DRV_CANFDSPI_WriteByteArray>

    // Read data back from RAM
    DRV_CANFDSPI_ReadByteArray(index, cRAMADDR_START, rxd, length);
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	b29b      	uxth	r3, r3
 800ab1c:	79f8      	ldrb	r0, [r7, #7]
 800ab1e:	4a1f      	ldr	r2, [pc, #124]	; (800ab9c <CAN_TestRamAccess+0xe8>)
 800ab20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800ab24:	f7f6 fe80 	bl	8001828 <DRV_CANFDSPI_ReadByteArray>

    // Verify
    good = false;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < length; i++) {
 800ab2c:	4b19      	ldr	r3, [pc, #100]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800ab2e:	2200      	movs	r2, #0
 800ab30:	701a      	strb	r2, [r3, #0]
 800ab32:	e01e      	b.n	800ab72 <CAN_TestRamAccess+0xbe>
        good = txd[i] == rxd[i];
 800ab34:	4b17      	ldr	r3, [pc, #92]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4b17      	ldr	r3, [pc, #92]	; (800ab98 <CAN_TestRamAccess+0xe4>)
 800ab3c:	5c9a      	ldrb	r2, [r3, r2]
 800ab3e:	4b15      	ldr	r3, [pc, #84]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	4619      	mov	r1, r3
 800ab44:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <CAN_TestRamAccess+0xe8>)
 800ab46:	5c5b      	ldrb	r3, [r3, r1]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	bf0c      	ite	eq
 800ab4c:	2301      	moveq	r3, #1
 800ab4e:	2300      	movne	r3, #0
 800ab50:	73bb      	strb	r3, [r7, #14]

      if (!good) {
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	f083 0301 	eor.w	r3, r3, #1
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <CAN_TestRamAccess+0xb2>
        Nop();
 800ab5e:	bf00      	nop
        Nop();
 800ab60:	bf00      	nop

        // Data mismatch
        return false;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e011      	b.n	800ab8a <CAN_TestRamAccess+0xd6>
    for (i = 0; i < length; i++) {
 800ab66:	4b0b      	ldr	r3, [pc, #44]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	4b09      	ldr	r3, [pc, #36]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	4b08      	ldr	r3, [pc, #32]	; (800ab94 <CAN_TestRamAccess+0xe0>)
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	7bfa      	ldrb	r2, [r7, #15]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d8db      	bhi.n	800ab34 <CAN_TestRamAccess+0x80>
  for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	3304      	adds	r3, #4
 800ab80:	73fb      	strb	r3, [r7, #15]
 800ab82:	7bfb      	ldrb	r3, [r7, #15]
 800ab84:	2b40      	cmp	r3, #64	; 0x40
 800ab86:	d9a0      	bls.n	800aaca <CAN_TestRamAccess+0x16>
      }
    }
  }
  return true;
 800ab88:	2301      	movs	r3, #1
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20000de8 	.word	0x20000de8
 800ab98:	20000d4c 	.word	0x20000d4c
 800ab9c:	20000da8 	.word	0x20000da8

0800aba0 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800aba0:	b480      	push	{r7}
 800aba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800aba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800abb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800abb8:	bf00      	nop
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <LL_AHB2_GRP1_EnableClock>:
{
 800abc2:	b480      	push	{r7}
 800abc4:	b085      	sub	sp, #20
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800abca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800abda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abde:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4013      	ands	r3, r2
 800abe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800abe6:	68fb      	ldr	r3, [r7, #12]
}
 800abe8:	bf00      	nop
 800abea:	3714      	adds	r7, #20
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b085      	sub	sp, #20
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800abfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800ac0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	4013      	ands	r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ac18:	68fb      	ldr	r3, [r7, #12]
}
 800ac1a:	bf00      	nop
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ac2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ac3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4013      	ands	r3, r2
 800ac48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
}
 800ac4c:	bf00      	nop
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800ac60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac64:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800ac70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4013      	ands	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
}
 800ac7e:	bf00      	nop
 800ac80:	3714      	adds	r7, #20
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr

0800ac8a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800ac8a:	b480      	push	{r7}
 800ac8c:	b085      	sub	sp, #20
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800ac92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ac98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800aca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aca6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4013      	ands	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800acae:	68fb      	ldr	r3, [r7, #12]
}
 800acb0:	bf00      	nop
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800acc0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800acc4:	f7ff ff96 	bl	800abf4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800acc8:	2200      	movs	r2, #0
 800acca:	2100      	movs	r1, #0
 800accc:	202e      	movs	r0, #46	; 0x2e
 800acce:	f002 fcd2 	bl	800d676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800acd2:	202e      	movs	r0, #46	; 0x2e
 800acd4:	f002 fce9 	bl	800d6aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acd8:	bf00      	nop
 800acda:	bd80      	pop	{r7, pc}

0800acdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b09c      	sub	sp, #112	; 0x70
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ace4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ace8:	2200      	movs	r2, #0
 800acea:	601a      	str	r2, [r3, #0]
 800acec:	605a      	str	r2, [r3, #4]
 800acee:	609a      	str	r2, [r3, #8]
 800acf0:	60da      	str	r2, [r3, #12]
 800acf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800acf4:	f107 030c 	add.w	r3, r7, #12
 800acf8:	2250      	movs	r2, #80	; 0x50
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f008 fcb7 	bl	8013670 <memset>
  if(huart->Instance==LPUART1)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a2f      	ldr	r2, [pc, #188]	; (800adc4 <HAL_UART_MspInit+0xe8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d125      	bne.n	800ad58 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800ad10:	2300      	movs	r3, #0
 800ad12:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad14:	f107 030c 	add.w	r3, r7, #12
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f004 fe28 	bl	800f96e <HAL_RCCEx_PeriphCLKConfig>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800ad24:	f7fc f824 	bl	8006d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800ad28:	2001      	movs	r0, #1
 800ad2a:	f7ff ff95 	bl	800ac58 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad2e:	2001      	movs	r0, #1
 800ad30:	f7ff ff47 	bl	800abc2 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800ad34:	230c      	movs	r3, #12
 800ad36:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad38:	2302      	movs	r3, #2
 800ad3a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad40:	2300      	movs	r3, #0
 800ad42:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800ad44:	2308      	movs	r3, #8
 800ad46:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ad52:	f002 ff9f 	bl	800dc94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ad56:	e031      	b.n	800adbc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART1)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	4a1a      	ldr	r2, [pc, #104]	; (800adc8 <HAL_UART_MspInit+0xec>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d12c      	bne.n	800adbc <HAL_UART_MspInit+0xe0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800ad62:	2301      	movs	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800ad66:	2302      	movs	r3, #2
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad6a:	f107 030c 	add.w	r3, r7, #12
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f004 fdfd 	bl	800f96e <HAL_RCCEx_PeriphCLKConfig>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d001      	beq.n	800ad7e <HAL_UART_MspInit+0xa2>
      Error_Handler();
 800ad7a:	f7fb fff9 	bl	8006d70 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800ad7e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ad82:	f7ff ff82 	bl	800ac8a <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ad86:	2002      	movs	r0, #2
 800ad88:	f7ff ff1b 	bl	800abc2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ad8c:	23c0      	movs	r3, #192	; 0xc0
 800ad8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad90:	2302      	movs	r3, #2
 800ad92:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad94:	2300      	movs	r3, #0
 800ad96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ad9c:	2307      	movs	r3, #7
 800ad9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ada0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800ada4:	4619      	mov	r1, r3
 800ada6:	4809      	ldr	r0, [pc, #36]	; (800adcc <HAL_UART_MspInit+0xf0>)
 800ada8:	f002 ff74 	bl	800dc94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800adac:	2200      	movs	r2, #0
 800adae:	2100      	movs	r1, #0
 800adb0:	2024      	movs	r0, #36	; 0x24
 800adb2:	f002 fc60 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800adb6:	2024      	movs	r0, #36	; 0x24
 800adb8:	f002 fc77 	bl	800d6aa <HAL_NVIC_EnableIRQ>
}
 800adbc:	bf00      	nop
 800adbe:	3770      	adds	r7, #112	; 0x70
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}
 800adc4:	40008000 	.word	0x40008000
 800adc8:	40013800 	.word	0x40013800
 800adcc:	48000400 	.word	0x48000400

0800add0 <HAL_PKA_MspInit>:
* This function configures the hardware resources used in this example
* @param hpka: PKA handle pointer
* @retval None
*/
void HAL_PKA_MspInit(PKA_HandleTypeDef* hpka)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
  if(hpka->Instance==PKA)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a05      	ldr	r2, [pc, #20]	; (800adf4 <HAL_PKA_MspInit+0x24>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d103      	bne.n	800adea <HAL_PKA_MspInit+0x1a>
  {
  /* USER CODE BEGIN PKA_MspInit 0 */

  /* USER CODE END PKA_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_PKA_CLK_ENABLE();
 800ade2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ade6:	f7ff ff05 	bl	800abf4 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN PKA_MspInit 1 */

  /* USER CODE END PKA_MspInit 1 */
  }

}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	58002000 	.word	0x58002000

0800adf8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b096      	sub	sp, #88	; 0x58
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ae00:	f107 0308 	add.w	r3, r7, #8
 800ae04:	2250      	movs	r2, #80	; 0x50
 800ae06:	2100      	movs	r1, #0
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f008 fc31 	bl	8013670 <memset>
  if(hrtc->Instance==RTC)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a0e      	ldr	r2, [pc, #56]	; (800ae4c <HAL_RTC_MspInit+0x54>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d115      	bne.n	800ae44 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800ae18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ae1c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800ae1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae22:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ae24:	f107 0308 	add.w	r3, r7, #8
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f004 fda0 	bl	800f96e <HAL_RCCEx_PeriphCLKConfig>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800ae34:	f7fb ff9c 	bl	8006d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800ae38:	f7ff feb2 	bl	800aba0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800ae3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ae40:	f7ff fef1 	bl	800ac26 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800ae44:	bf00      	nop
 800ae46:	3758      	adds	r7, #88	; 0x58
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	40002800 	.word	0x40002800

0800ae50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae58:	f107 030c 	add.w	r3, r7, #12
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	605a      	str	r2, [r3, #4]
 800ae62:	609a      	str	r2, [r3, #8]
 800ae64:	60da      	str	r2, [r3, #12]
 800ae66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a30      	ldr	r2, [pc, #192]	; (800af30 <HAL_SPI_MspInit+0xe0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d118      	bne.n	800aea4 <HAL_SPI_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ae72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ae76:	f7ff ff08 	bl	800ac8a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae7a:	2001      	movs	r0, #1
 800ae7c:	f7ff fea1 	bl	800abc2 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800ae80:	23c2      	movs	r3, #194	; 0xc2
 800ae82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae84:	2302      	movs	r3, #2
 800ae86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ae90:	2305      	movs	r3, #5
 800ae92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae94:	f107 030c 	add.w	r3, r7, #12
 800ae98:	4619      	mov	r1, r3
 800ae9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ae9e:	f002 fef9 	bl	800dc94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800aea2:	e040      	b.n	800af26 <HAL_SPI_MspInit+0xd6>
  else if(hspi->Instance==SPI2)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	4a22      	ldr	r2, [pc, #136]	; (800af34 <HAL_SPI_MspInit+0xe4>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d13b      	bne.n	800af26 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800aeae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800aeb2:	f7ff feb8 	bl	800ac26 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aeb6:	2004      	movs	r0, #4
 800aeb8:	f7ff fe83 	bl	800abc2 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aebc:	2001      	movs	r0, #1
 800aebe:	f7ff fe80 	bl	800abc2 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800aec2:	2302      	movs	r3, #2
 800aec4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aec6:	2302      	movs	r3, #2
 800aec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeca:	2300      	movs	r3, #0
 800aecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aece:	2300      	movs	r3, #0
 800aed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 800aed2:	2303      	movs	r3, #3
 800aed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aed6:	f107 030c 	add.w	r3, r7, #12
 800aeda:	4619      	mov	r1, r3
 800aedc:	4816      	ldr	r0, [pc, #88]	; (800af38 <HAL_SPI_MspInit+0xe8>)
 800aede:	f002 fed9 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800aee2:	2304      	movs	r3, #4
 800aee4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aee6:	2302      	movs	r3, #2
 800aee8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aeee:	2300      	movs	r3, #0
 800aef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800aef2:	2305      	movs	r3, #5
 800aef4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aef6:	f107 030c 	add.w	r3, r7, #12
 800aefa:	4619      	mov	r1, r3
 800aefc:	480e      	ldr	r0, [pc, #56]	; (800af38 <HAL_SPI_MspInit+0xe8>)
 800aefe:	f002 fec9 	bl	800dc94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800af02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af08:	2302      	movs	r3, #2
 800af0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af10:	2300      	movs	r3, #0
 800af12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800af14:	2305      	movs	r3, #5
 800af16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af18:	f107 030c 	add.w	r3, r7, #12
 800af1c:	4619      	mov	r1, r3
 800af1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800af22:	f002 feb7 	bl	800dc94 <HAL_GPIO_Init>
}
 800af26:	bf00      	nop
 800af28:	3720      	adds	r7, #32
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	40013000 	.word	0x40013000
 800af34:	40003800 	.word	0x40003800
 800af38:	48000800 	.word	0x48000800

0800af3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a09      	ldr	r2, [pc, #36]	; (800af70 <HAL_TIM_Base_MspInit+0x34>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d10b      	bne.n	800af66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800af4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800af52:	f7ff fe9a 	bl	800ac8a <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800af56:	2200      	movs	r2, #0
 800af58:	2100      	movs	r1, #0
 800af5a:	2019      	movs	r0, #25
 800af5c:	f002 fb8b 	bl	800d676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800af60:	2019      	movs	r0, #25
 800af62:	f002 fba2 	bl	800d6aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	40012c00 	.word	0x40012c00

0800af74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b09c      	sub	sp, #112	; 0x70
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800af7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800af80:	2200      	movs	r2, #0
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	605a      	str	r2, [r3, #4]
 800af86:	609a      	str	r2, [r3, #8]
 800af88:	60da      	str	r2, [r3, #12]
 800af8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800af8c:	f107 030c 	add.w	r3, r7, #12
 800af90:	2250      	movs	r2, #80	; 0x50
 800af92:	2100      	movs	r1, #0
 800af94:	4618      	mov	r0, r3
 800af96:	f008 fb6b 	bl	8013670 <memset>
  if(hpcd->Instance==USB)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4a1f      	ldr	r2, [pc, #124]	; (800b01c <HAL_PCD_MspInit+0xa8>)
 800afa0:	4293      	cmp	r3, r2
 800afa2:	d136      	bne.n	800b012 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800afa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afa8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800afaa:	2306      	movs	r3, #6
 800afac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800afae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800afb2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800afb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800afba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800afbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 800afc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afc4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800afc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800afca:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800afcc:	f107 030c 	add.w	r3, r7, #12
 800afd0:	4618      	mov	r0, r3
 800afd2:	f004 fccc 	bl	800f96e <HAL_RCCEx_PeriphCLKConfig>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800afdc:	f7fb fec8 	bl	8006d70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afe0:	2001      	movs	r0, #1
 800afe2:	f7ff fdee 	bl	800abc2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800afe6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800afea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800afec:	2302      	movs	r3, #2
 800afee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff0:	2300      	movs	r3, #0
 800aff2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aff4:	2300      	movs	r3, #0
 800aff6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800aff8:	230a      	movs	r3, #10
 800affa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800affc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800b000:	4619      	mov	r1, r3
 800b002:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b006:	f002 fe45 	bl	800dc94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b00a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800b00e:	f7ff fe0a 	bl	800ac26 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800b012:	bf00      	nop
 800b014:	3770      	adds	r7, #112	; 0x70
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
 800b01a:	bf00      	nop
 800b01c:	40006800 	.word	0x40006800

0800b020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b020:	b480      	push	{r7}
 800b022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800b024:	e7fe      	b.n	800b024 <NMI_Handler+0x4>

0800b026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b026:	b480      	push	{r7}
 800b028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b02a:	e7fe      	b.n	800b02a <HardFault_Handler+0x4>

0800b02c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b02c:	b480      	push	{r7}
 800b02e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b030:	e7fe      	b.n	800b030 <MemManage_Handler+0x4>

0800b032 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b032:	b480      	push	{r7}
 800b034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b036:	e7fe      	b.n	800b036 <BusFault_Handler+0x4>

0800b038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b038:	b480      	push	{r7}
 800b03a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b03c:	e7fe      	b.n	800b03c <UsageFault_Handler+0x4>

0800b03e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b03e:	b480      	push	{r7}
 800b040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b042:	bf00      	nop
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b04c:	b480      	push	{r7}
 800b04e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b050:	bf00      	nop
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr

0800b05a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b05a:	b480      	push	{r7}
 800b05c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b05e:	bf00      	nop
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr

0800b068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b06c:	f002 f9d8 	bl	800d420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b070:	bf00      	nop
 800b072:	bd80      	pop	{r7, pc}

0800b074 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0

  /* USER CODE END EXTI0_IRQn 0 */


  /* USER CODE BEGIN EXTI0_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b078:	4b08      	ldr	r3, [pc, #32]	; (800b09c <EXTI0_IRQHandler+0x28>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d105      	bne.n	800b08c <EXTI0_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800b080:	4b07      	ldr	r3, [pc, #28]	; (800b0a0 <EXTI0_IRQHandler+0x2c>)
 800b082:	881b      	ldrh	r3, [r3, #0]
 800b084:	4618      	mov	r0, r3
 800b086:	f002 ffbf 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
  }else{
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 800b08a:	e004      	b.n	800b096 <EXTI0_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800b08c:	4b05      	ldr	r3, [pc, #20]	; (800b0a4 <EXTI0_IRQHandler+0x30>)
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	4618      	mov	r0, r3
 800b092:	f002 ffb9 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
}
 800b096:	bf00      	nop
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	20000a58 	.word	0x20000a58
 800b0a0:	20000cd6 	.word	0x20000cd6
 800b0a4:	20000c8e 	.word	0x20000c8e

0800b0a8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800b0ac:	4b05      	ldr	r3, [pc, #20]	; (800b0c4 <EXTI1_IRQHandler+0x1c>)
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d104      	bne.n	800b0be <EXTI1_IRQHandler+0x16>
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800b0b4:	4b04      	ldr	r3, [pc, #16]	; (800b0c8 <EXTI1_IRQHandler+0x20>)
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f002 ffa5 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b0be:	bf00      	nop
 800b0c0:	bd80      	pop	{r7, pc}
 800b0c2:	bf00      	nop
 800b0c4:	20000a58 	.word	0x20000a58
 800b0c8:	20000cde 	.word	0x20000cde

0800b0cc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  if(hwPlatform == PLATFORM_NUCLEO){
 800b0d0:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <EXTI2_IRQHandler+0x1c>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d004      	beq.n	800b0e2 <EXTI2_IRQHandler+0x16>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(BUTTON3_Pin);
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <EXTI2_IRQHandler+0x20>)
 800b0da:	881b      	ldrh	r3, [r3, #0]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f002 ff93 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE END EXTI1_IRQn 0 */

  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800b0e2:	bf00      	nop
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000a58 	.word	0x20000a58
 800b0ec:	20000cde 	.word	0x20000cde

0800b0f0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */

  /* USER CODE BEGIN EXTI4_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b0f4:	4b08      	ldr	r3, [pc, #32]	; (800b118 <EXTI4_IRQHandler+0x28>)
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d105      	bne.n	800b108 <EXTI4_IRQHandler+0x18>
    HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800b0fc:	4b07      	ldr	r3, [pc, #28]	; (800b11c <EXTI4_IRQHandler+0x2c>)
 800b0fe:	881b      	ldrh	r3, [r3, #0]
 800b100:	4618      	mov	r0, r3
 800b102:	f002 ff81 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
  } else {
    // MODBATT
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 800b106:	e004      	b.n	800b112 <EXTI4_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT0_Pin);
 800b108:	4b05      	ldr	r3, [pc, #20]	; (800b120 <EXTI4_IRQHandler+0x30>)
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f002 ff7b 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
}
 800b112:	bf00      	nop
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	20000a58 	.word	0x20000a58
 800b11c:	20000ccc 	.word	0x20000ccc
 800b120:	20000ca6 	.word	0x20000ca6

0800b124 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  /* USER CODE END EXTI9_5_IRQn 0 */



  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b128:	4b12      	ldr	r3, [pc, #72]	; (800b174 <EXTI9_5_IRQHandler+0x50>)
 800b12a:	781b      	ldrb	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10a      	bne.n	800b146 <EXTI9_5_IRQHandler+0x22>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800b130:	4b11      	ldr	r3, [pc, #68]	; (800b178 <EXTI9_5_IRQHandler+0x54>)
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f002 ff67 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800b13a:	4b10      	ldr	r3, [pc, #64]	; (800b17c <EXTI9_5_IRQHandler+0x58>)
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	4618      	mov	r0, r3
 800b140:	f002 ff62 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
  }
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800b144:	e013      	b.n	800b16e <EXTI9_5_IRQHandler+0x4a>
    HAL_GPIO_EXTI_IRQHandler(CAN1_INT0_Pin);
 800b146:	4b0c      	ldr	r3, [pc, #48]	; (800b178 <EXTI9_5_IRQHandler+0x54>)
 800b148:	881b      	ldrh	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f002 ff5c 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT_Pin);
 800b150:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <EXTI9_5_IRQHandler+0x5c>)
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	4618      	mov	r0, r3
 800b156:	f002 ff57 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(CAN3_INT1_Pin);
 800b15a:	4b0a      	ldr	r3, [pc, #40]	; (800b184 <EXTI9_5_IRQHandler+0x60>)
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f002 ff52 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
    HAL_GPIO_EXTI_IRQHandler(BUTTON4_Pin);
 800b164:	4b08      	ldr	r3, [pc, #32]	; (800b188 <EXTI9_5_IRQHandler+0x64>)
 800b166:	881b      	ldrh	r3, [r3, #0]
 800b168:	4618      	mov	r0, r3
 800b16a:	f002 ff4d 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
}
 800b16e:	bf00      	nop
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000a58 	.word	0x20000a58
 800b178:	20000c66 	.word	0x20000c66
 800b17c:	20000c6e 	.word	0x20000c6e
 800b180:	20000c9c 	.word	0x20000c9c
 800b184:	20000cae 	.word	0x20000cae
 800b188:	20000ce6 	.word	0x20000ce6

0800b18c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b190:	4802      	ldr	r0, [pc, #8]	; (800b19c <TIM1_UP_TIM16_IRQHandler+0x10>)
 800b192:	f005 ff1d 	bl	8010fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b196:	bf00      	nop
 800b198:	bd80      	pop	{r7, pc}
 800b19a:	bf00      	nop
 800b19c:	200005d8 	.word	0x200005d8

0800b1a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b1a4:	4802      	ldr	r0, [pc, #8]	; (800b1b0 <USART1_IRQHandler+0x10>)
 800b1a6:	f006 ffe5 	bl	8012174 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b1aa:	bf00      	nop
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	2000044c 	.word	0x2000044c

0800b1b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if(hwPlatform == PLATFORM_NUCLEO){
 800b1b8:	4b1c      	ldr	r3, [pc, #112]	; (800b22c <EXTI15_10_IRQHandler+0x78>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d114      	bne.n	800b1ea <EXTI15_10_IRQHandler+0x36>

      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800b1c0:	4b1b      	ldr	r3, [pc, #108]	; (800b230 <EXTI15_10_IRQHandler+0x7c>)
 800b1c2:	881b      	ldrh	r3, [r3, #0]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f002 ff1f 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800b1ca:	4b1a      	ldr	r3, [pc, #104]	; (800b234 <EXTI15_10_IRQHandler+0x80>)
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f002 ff1a 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800b1d4:	4b18      	ldr	r3, [pc, #96]	; (800b238 <EXTI15_10_IRQHandler+0x84>)
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f002 ff15 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT1_Pin);
 800b1de:	4b17      	ldr	r3, [pc, #92]	; (800b23c <EXTI15_10_IRQHandler+0x88>)
 800b1e0:	881b      	ldrh	r3, [r3, #0]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f002 ff10 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>

      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
    }
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b1e8:	e01d      	b.n	800b226 <EXTI15_10_IRQHandler+0x72>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT_Pin);
 800b1ea:	4b11      	ldr	r3, [pc, #68]	; (800b230 <EXTI15_10_IRQHandler+0x7c>)
 800b1ec:	881b      	ldrh	r3, [r3, #0]
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f002 ff0a 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN1_INT1_Pin);
 800b1f4:	4b12      	ldr	r3, [pc, #72]	; (800b240 <EXTI15_10_IRQHandler+0x8c>)
 800b1f6:	881b      	ldrh	r3, [r3, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f002 ff05 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT_Pin);
 800b1fe:	4b0d      	ldr	r3, [pc, #52]	; (800b234 <EXTI15_10_IRQHandler+0x80>)
 800b200:	881b      	ldrh	r3, [r3, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	f002 ff00 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(CAN2_INT0_Pin);
 800b208:	4b0b      	ldr	r3, [pc, #44]	; (800b238 <EXTI15_10_IRQHandler+0x84>)
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f002 fefb 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON1_Pin);
 800b212:	4b0c      	ldr	r3, [pc, #48]	; (800b244 <EXTI15_10_IRQHandler+0x90>)
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	4618      	mov	r0, r3
 800b218:	f002 fef6 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
      HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 800b21c:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <EXTI15_10_IRQHandler+0x94>)
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	4618      	mov	r0, r3
 800b222:	f002 fef1 	bl	800e008 <HAL_GPIO_EXTI_IRQHandler>
}
 800b226:	bf00      	nop
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20000a58 	.word	0x20000a58
 800b230:	20000c5e 	.word	0x20000c5e
 800b234:	20000c7c 	.word	0x20000c7c
 800b238:	20000c86 	.word	0x20000c86
 800b23c:	20000c8e 	.word	0x20000c8e
 800b240:	20000c6e 	.word	0x20000c6e
 800b244:	20000ccc 	.word	0x20000ccc
 800b248:	20000cd6 	.word	0x20000cd6

0800b24c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800b250:	f002 fef2 	bl	800e038 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800b254:	bf00      	nop
 800b256:	bd80      	pop	{r7, pc}

0800b258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b258:	b480      	push	{r7}
 800b25a:	af00      	add	r7, sp, #0
  return 1;
 800b25c:	2301      	movs	r3, #1
}
 800b25e:	4618      	mov	r0, r3
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <_kill>:

int _kill(int pid, int sig)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b082      	sub	sp, #8
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b272:	f008 f8a3 	bl	80133bc <__errno>
 800b276:	4603      	mov	r3, r0
 800b278:	2216      	movs	r2, #22
 800b27a:	601a      	str	r2, [r3, #0]
  return -1;
 800b27c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b280:	4618      	mov	r0, r3
 800b282:	3708      	adds	r7, #8
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <_exit>:

void _exit (int status)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b290:	f04f 31ff 	mov.w	r1, #4294967295
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7ff ffe7 	bl	800b268 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b29a:	e7fe      	b.n	800b29a <_exit+0x12>

0800b29c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b086      	sub	sp, #24
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	617b      	str	r3, [r7, #20]
 800b2ac:	e00a      	b.n	800b2c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b2ae:	f3af 8000 	nop.w
 800b2b2:	4601      	mov	r1, r0
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	1c5a      	adds	r2, r3, #1
 800b2b8:	60ba      	str	r2, [r7, #8]
 800b2ba:	b2ca      	uxtb	r2, r1
 800b2bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	dbf0      	blt.n	800b2ae <_read+0x12>
  }

  return len;
 800b2cc:	687b      	ldr	r3, [r7, #4]
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3718      	adds	r7, #24
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b086      	sub	sp, #24
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	60f8      	str	r0, [r7, #12]
 800b2de:	60b9      	str	r1, [r7, #8]
 800b2e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	e009      	b.n	800b2fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	1c5a      	adds	r2, r3, #1
 800b2ec:	60ba      	str	r2, [r7, #8]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	617b      	str	r3, [r7, #20]
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	429a      	cmp	r2, r3
 800b302:	dbf1      	blt.n	800b2e8 <_write+0x12>
  }
  return len;
 800b304:	687b      	ldr	r3, [r7, #4]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3718      	adds	r7, #24
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <_close>:

int _close(int file)
{
 800b30e:	b480      	push	{r7}
 800b310:	b083      	sub	sp, #12
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	370c      	adds	r7, #12
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b326:	b480      	push	{r7}
 800b328:	b083      	sub	sp, #12
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b336:	605a      	str	r2, [r3, #4]
  return 0;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <_isatty>:

int _isatty(int file)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b34e:	2301      	movs	r3, #1
}
 800b350:	4618      	mov	r0, r3
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr

0800b35c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	60b9      	str	r1, [r7, #8]
 800b366:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3714      	adds	r7, #20
 800b36e:	46bd      	mov	sp, r7
 800b370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b374:	4770      	bx	lr
	...

0800b378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b086      	sub	sp, #24
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b380:	4a14      	ldr	r2, [pc, #80]	; (800b3d4 <_sbrk+0x5c>)
 800b382:	4b15      	ldr	r3, [pc, #84]	; (800b3d8 <_sbrk+0x60>)
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b38c:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <_sbrk+0x64>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d102      	bne.n	800b39a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b394:	4b11      	ldr	r3, [pc, #68]	; (800b3dc <_sbrk+0x64>)
 800b396:	4a12      	ldr	r2, [pc, #72]	; (800b3e0 <_sbrk+0x68>)
 800b398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b39a:	4b10      	ldr	r3, [pc, #64]	; (800b3dc <_sbrk+0x64>)
 800b39c:	681a      	ldr	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	693a      	ldr	r2, [r7, #16]
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d207      	bcs.n	800b3b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b3a8:	f008 f808 	bl	80133bc <__errno>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	220c      	movs	r2, #12
 800b3b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	e009      	b.n	800b3cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b3b8:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <_sbrk+0x64>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b3be:	4b07      	ldr	r3, [pc, #28]	; (800b3dc <_sbrk+0x64>)
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4a05      	ldr	r2, [pc, #20]	; (800b3dc <_sbrk+0x64>)
 800b3c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	20030000 	.word	0x20030000
 800b3d8:	00000400 	.word	0x00000400
 800b3dc:	2000a6c4 	.word	0x2000a6c4
 800b3e0:	2000a7c0 	.word	0x2000a7c0

0800b3e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800b3e8:	4b24      	ldr	r3, [pc, #144]	; (800b47c <SystemInit+0x98>)
 800b3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b3ee:	4a23      	ldr	r2, [pc, #140]	; (800b47c <SystemInit+0x98>)
 800b3f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b3f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b3f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b402:	f043 0301 	orr.w	r3, r3, #1
 800b406:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800b408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b40c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800b410:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800b412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800b41c:	4b18      	ldr	r3, [pc, #96]	; (800b480 <SystemInit+0x9c>)
 800b41e:	4013      	ands	r3, r2
 800b420:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800b422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b426:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b42a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b42e:	f023 0305 	bic.w	r3, r3, #5
 800b432:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800b436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b43a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b43e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b442:	f023 0301 	bic.w	r3, r3, #1
 800b446:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800b44a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b44e:	4a0d      	ldr	r2, [pc, #52]	; (800b484 <SystemInit+0xa0>)
 800b450:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800b452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b456:	4a0b      	ldr	r2, [pc, #44]	; (800b484 <SystemInit+0xa0>)
 800b458:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b45a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800b464:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b468:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800b46a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b46e:	2200      	movs	r2, #0
 800b470:	619a      	str	r2, [r3, #24]
}
 800b472:	bf00      	nop
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	e000ed00 	.word	0xe000ed00
 800b480:	faf6fefb 	.word	0xfaf6fefb
 800b484:	22041000 	.word	0x22041000

0800b488 <VCU_ReceiveMessages>:
/***************************************************************************************************************
*     V C U _ R e c e i v e M e s s a g e s                                        P A C K   C O N T R O L L E R
***************************************************************************************************************/

void VCU_ReceiveMessages(void)
{
 800b488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b48a:	b08b      	sub	sp, #44	; 0x2c
 800b48c:	af08      	add	r7, sp, #32
  // Check if FIFO is not empty
  DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800b48e:	4a7a      	ldr	r2, [pc, #488]	; (800b678 <VCU_ReceiveMessages+0x1f0>)
 800b490:	2101      	movs	r1, #1
 800b492:	2000      	movs	r0, #0
 800b494:	f7f7 f9aa 	bl	80027ec <DRV_CANFDSPI_ReceiveChannelEventGet>

  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800b498:	e0e2      	b.n	800b660 <VCU_ReceiveMessages+0x1d8>
    // Get message
    DRV_CANFDSPI_ReceiveMessageGet(CAN1, VCU_RX_FIFO, &vcu_rxObj, vcu_rxd, MAX_DATA_BYTES);
 800b49a:	2340      	movs	r3, #64	; 0x40
 800b49c:	9300      	str	r3, [sp, #0]
 800b49e:	4b77      	ldr	r3, [pc, #476]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4a0:	4a77      	ldr	r2, [pc, #476]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b4a2:	2101      	movs	r1, #1
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	f7f7 f805 	bl	80024b4 <DRV_CANFDSPI_ReceiveMessageGet>

    if((debugLevel & (DBG_VCU + DBG_VERBOSE)) == (DBG_VCU + DBG_VERBOSE)){ sprintf(tempBuffer,"VCU RX SID=0x%03x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800b4aa:	4b76      	ldr	r3, [pc, #472]	; (800b684 <VCU_ReceiveMessages+0x1fc>)
 800b4ac:	781b      	ldrb	r3, [r3, #0]
 800b4ae:	f003 030c 	and.w	r3, r3, #12
 800b4b2:	2b0c      	cmp	r3, #12
 800b4b4:	d12c      	bne.n	800b510 <VCU_ReceiveMessages+0x88>
 800b4b6:	4b72      	ldr	r3, [pc, #456]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b4b8:	881b      	ldrh	r3, [r3, #0]
 800b4ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	469c      	mov	ip, r3
 800b4c2:	4b6e      	ldr	r3, [pc, #440]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	469e      	mov	lr, r3
 800b4c8:	4b6c      	ldr	r3, [pc, #432]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4ca:	785b      	ldrb	r3, [r3, #1]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	4b6b      	ldr	r3, [pc, #428]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4d0:	789b      	ldrb	r3, [r3, #2]
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4b69      	ldr	r3, [pc, #420]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4d6:	78db      	ldrb	r3, [r3, #3]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	4b68      	ldr	r3, [pc, #416]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4dc:	791b      	ldrb	r3, [r3, #4]
 800b4de:	461c      	mov	r4, r3
 800b4e0:	4b66      	ldr	r3, [pc, #408]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4e2:	795b      	ldrb	r3, [r3, #5]
 800b4e4:	461d      	mov	r5, r3
 800b4e6:	4b65      	ldr	r3, [pc, #404]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4e8:	799b      	ldrb	r3, [r3, #6]
 800b4ea:	461e      	mov	r6, r3
 800b4ec:	4b63      	ldr	r3, [pc, #396]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b4ee:	79db      	ldrb	r3, [r3, #7]
 800b4f0:	9306      	str	r3, [sp, #24]
 800b4f2:	9605      	str	r6, [sp, #20]
 800b4f4:	9504      	str	r5, [sp, #16]
 800b4f6:	9403      	str	r4, [sp, #12]
 800b4f8:	9002      	str	r0, [sp, #8]
 800b4fa:	9101      	str	r1, [sp, #4]
 800b4fc:	9200      	str	r2, [sp, #0]
 800b4fe:	4673      	mov	r3, lr
 800b500:	4662      	mov	r2, ip
 800b502:	4961      	ldr	r1, [pc, #388]	; (800b688 <VCU_ReceiveMessages+0x200>)
 800b504:	4861      	ldr	r0, [pc, #388]	; (800b68c <VCU_ReceiveMessages+0x204>)
 800b506:	f009 f8c5 	bl	8014694 <siprintf>
 800b50a:	4860      	ldr	r0, [pc, #384]	; (800b68c <VCU_ReceiveMessages+0x204>)
 800b50c:	f7fa f87c 	bl	8005608 <serialOut>

    if(vcu_rxObj.bF.id.SID == ID_VCU_COMMAND  + pack.vcuCanOffset){
 800b510:	4b5b      	ldr	r3, [pc, #364]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b518:	b29b      	uxth	r3, r3
 800b51a:	461a      	mov	r2, r3
 800b51c:	4b5c      	ldr	r3, [pc, #368]	; (800b690 <VCU_ReceiveMessages+0x208>)
 800b51e:	895b      	ldrh	r3, [r3, #10]
 800b520:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b524:	429a      	cmp	r2, r3
 800b526:	d102      	bne.n	800b52e <VCU_ReceiveMessages+0xa6>
        /// Process the command
        VCU_ProcessVcuCommand();
 800b528:	f000 f916 	bl	800b758 <VCU_ProcessVcuCommand>
 800b52c:	e093      	b.n	800b656 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_TIME + pack.vcuCanOffset){
 800b52e:	4b54      	ldr	r3, [pc, #336]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b530:	881b      	ldrh	r3, [r3, #0]
 800b532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b536:	b29b      	uxth	r3, r3
 800b538:	461a      	mov	r2, r3
 800b53a:	4b55      	ldr	r3, [pc, #340]	; (800b690 <VCU_ReceiveMessages+0x208>)
 800b53c:	895b      	ldrh	r3, [r3, #10]
 800b53e:	f203 4301 	addw	r3, r3, #1025	; 0x401
 800b542:	429a      	cmp	r2, r3
 800b544:	d102      	bne.n	800b54c <VCU_ReceiveMessages+0xc4>
        /// Process the command
        VCU_ProcessVcuTime();
 800b546:	f000 fa7d 	bl	800ba44 <VCU_ProcessVcuTime>
 800b54a:	e084      	b.n	800b656 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_READ_EEPROM + pack.vcuCanOffset){
 800b54c:	4b4c      	ldr	r3, [pc, #304]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b54e:	881b      	ldrh	r3, [r3, #0]
 800b550:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b554:	b29b      	uxth	r3, r3
 800b556:	461a      	mov	r2, r3
 800b558:	4b4d      	ldr	r3, [pc, #308]	; (800b690 <VCU_ReceiveMessages+0x208>)
 800b55a:	895b      	ldrh	r3, [r3, #10]
 800b55c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b560:	429a      	cmp	r2, r3
 800b562:	d102      	bne.n	800b56a <VCU_ReceiveMessages+0xe2>
        VCU_ProcessReadEeprom();
 800b564:	f000 faba 	bl	800badc <VCU_ProcessReadEeprom>
 800b568:	e075      	b.n	800b656 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_WRITE_EEPROM + pack.vcuCanOffset){
 800b56a:	4b45      	ldr	r3, [pc, #276]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b572:	b29b      	uxth	r3, r3
 800b574:	461a      	mov	r2, r3
 800b576:	4b46      	ldr	r3, [pc, #280]	; (800b690 <VCU_ReceiveMessages+0x208>)
 800b578:	895b      	ldrh	r3, [r3, #10]
 800b57a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 800b57e:	429a      	cmp	r2, r3
 800b580:	d102      	bne.n	800b588 <VCU_ReceiveMessages+0x100>
        VCU_ProcessWriteEeprom();
 800b582:	f000 fb67 	bl	800bc54 <VCU_ProcessWriteEeprom>
 800b586:	e066      	b.n	800b656 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_MODULE_COMMAND + pack.vcuCanOffset){
 800b588:	4b3d      	ldr	r3, [pc, #244]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b590:	b29b      	uxth	r3, r3
 800b592:	461a      	mov	r2, r3
 800b594:	4b3e      	ldr	r3, [pc, #248]	; (800b690 <VCU_ReceiveMessages+0x208>)
 800b596:	895b      	ldrh	r3, [r3, #10]
 800b598:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b59c:	429a      	cmp	r2, r3
 800b59e:	d102      	bne.n	800b5a6 <VCU_ReceiveMessages+0x11e>
        VCU_ProcessVcuModuleCommand();
 800b5a0:	f000 f988 	bl	800b8b4 <VCU_ProcessVcuModuleCommand>
 800b5a4:	e057      	b.n	800b656 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_KEEP_ALIVE + pack.vcuCanOffset){
 800b5a6:	4b36      	ldr	r3, [pc, #216]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b5a8:	881b      	ldrh	r3, [r3, #0]
 800b5aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	4b37      	ldr	r3, [pc, #220]	; (800b690 <VCU_ReceiveMessages+0x208>)
 800b5b4:	895b      	ldrh	r3, [r3, #10]
 800b5b6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d102      	bne.n	800b5c4 <VCU_ReceiveMessages+0x13c>
        VCU_ProcessVcuKeepAlive();
 800b5be:	f000 f9f1 	bl	800b9a4 <VCU_ProcessVcuKeepAlive>
 800b5c2:	e048      	b.n	800b656 <VCU_ReceiveMessages+0x1ce>
    } else if(vcu_rxObj.bF.id.SID == ID_VCU_REQUEST_MODULE_LIST + pack.vcuCanOffset){
 800b5c4:	4b2e      	ldr	r3, [pc, #184]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	4b2f      	ldr	r3, [pc, #188]	; (800b690 <VCU_ReceiveMessages+0x208>)
 800b5d2:	895b      	ldrh	r3, [r3, #10]
 800b5d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d102      	bne.n	800b5e2 <VCU_ReceiveMessages+0x15a>
        VCU_ProcessVcuRequestModuleList();
 800b5dc:	f000 fbfa 	bl	800bdd4 <VCU_ProcessVcuRequestModuleList>
 800b5e0:	e039      	b.n	800b656 <VCU_ReceiveMessages+0x1ce>
    } else {
       // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN SID=0x%03x : EID=0x%08x : Byte[0..7]=0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x",vcu_rxObj.bF.id.SID,vcu_rxObj.bF.id.EID,vcu_rxd[0],vcu_rxd[1],vcu_rxd[2],vcu_rxd[3],vcu_rxd[4],vcu_rxd[5],vcu_rxd[6],vcu_rxd[7]); serialOut(tempBuffer);}
 800b5e2:	4b28      	ldr	r3, [pc, #160]	; (800b684 <VCU_ReceiveMessages+0x1fc>)
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	f003 0305 	and.w	r3, r3, #5
 800b5ea:	2b05      	cmp	r3, #5
 800b5ec:	d133      	bne.n	800b656 <VCU_ReceiveMessages+0x1ce>
 800b5ee:	4b24      	ldr	r3, [pc, #144]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	469c      	mov	ip, r3
 800b5fa:	4b21      	ldr	r3, [pc, #132]	; (800b680 <VCU_ReceiveMessages+0x1f8>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 800b602:	469e      	mov	lr, r3
 800b604:	4b1d      	ldr	r3, [pc, #116]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	461a      	mov	r2, r3
 800b60a:	4b1c      	ldr	r3, [pc, #112]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b60c:	785b      	ldrb	r3, [r3, #1]
 800b60e:	4619      	mov	r1, r3
 800b610:	4b1a      	ldr	r3, [pc, #104]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b612:	789b      	ldrb	r3, [r3, #2]
 800b614:	4618      	mov	r0, r3
 800b616:	4b19      	ldr	r3, [pc, #100]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b618:	78db      	ldrb	r3, [r3, #3]
 800b61a:	461c      	mov	r4, r3
 800b61c:	4b17      	ldr	r3, [pc, #92]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b61e:	791b      	ldrb	r3, [r3, #4]
 800b620:	461d      	mov	r5, r3
 800b622:	4b16      	ldr	r3, [pc, #88]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b624:	795b      	ldrb	r3, [r3, #5]
 800b626:	461e      	mov	r6, r3
 800b628:	4b14      	ldr	r3, [pc, #80]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b62a:	799b      	ldrb	r3, [r3, #6]
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	4b13      	ldr	r3, [pc, #76]	; (800b67c <VCU_ReceiveMessages+0x1f4>)
 800b630:	79db      	ldrb	r3, [r3, #7]
 800b632:	9307      	str	r3, [sp, #28]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	9306      	str	r3, [sp, #24]
 800b638:	9605      	str	r6, [sp, #20]
 800b63a:	9504      	str	r5, [sp, #16]
 800b63c:	9403      	str	r4, [sp, #12]
 800b63e:	9002      	str	r0, [sp, #8]
 800b640:	9101      	str	r1, [sp, #4]
 800b642:	9200      	str	r2, [sp, #0]
 800b644:	4673      	mov	r3, lr
 800b646:	4662      	mov	r2, ip
 800b648:	4912      	ldr	r1, [pc, #72]	; (800b694 <VCU_ReceiveMessages+0x20c>)
 800b64a:	4810      	ldr	r0, [pc, #64]	; (800b68c <VCU_ReceiveMessages+0x204>)
 800b64c:	f009 f822 	bl	8014694 <siprintf>
 800b650:	480e      	ldr	r0, [pc, #56]	; (800b68c <VCU_ReceiveMessages+0x204>)
 800b652:	f7f9 ffd9 	bl	8005608 <serialOut>
    }

    // check for any more messages
    DRV_CANFDSPI_ReceiveChannelEventGet(CAN1, VCU_RX_FIFO, &vcu_rxFlags);
 800b656:	4a08      	ldr	r2, [pc, #32]	; (800b678 <VCU_ReceiveMessages+0x1f0>)
 800b658:	2101      	movs	r1, #1
 800b65a:	2000      	movs	r0, #0
 800b65c:	f7f7 f8c6 	bl	80027ec <DRV_CANFDSPI_ReceiveChannelEventGet>
  while ( vcu_rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 800b660:	4b05      	ldr	r3, [pc, #20]	; (800b678 <VCU_ReceiveMessages+0x1f0>)
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f47f af16 	bne.w	800b49a <VCU_ReceiveMessages+0x12>
  }
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b678:	2000a718 	.word	0x2000a718
 800b67c:	2000a728 	.word	0x2000a728
 800b680:	2000a71c 	.word	0x2000a71c
 800b684:	2000000c 	.word	0x2000000c
 800b688:	08018c30 	.word	0x08018c30
 800b68c:	20000b64 	.word	0x20000b64
 800b690:	2000a66c 	.word	0x2000a66c
 800b694:	08018c88 	.word	0x08018c88

0800b698 <VCU_TransmitMessageQueue>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M e s s a g e Q u e u e                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitMessageQueue(CANFDSPI_MODULE_ID index)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af02      	add	r7, sp, #8
 800b69e:	4603      	mov	r3, r0
 800b6a0:	71fb      	strb	r3, [r7, #7]
  uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 800b6a2:	2332      	movs	r3, #50	; 0x32
 800b6a4:	73fb      	strb	r3, [r7, #15]

  // Check if FIFO is not full
  do {
    DRV_CANFDSPI_TransmitChannelEventGet(index, VCU_TX_FIFO, &vcu_txFlags);
 800b6a6:	79fb      	ldrb	r3, [r7, #7]
 800b6a8:	4a21      	ldr	r2, [pc, #132]	; (800b730 <VCU_TransmitMessageQueue+0x98>)
 800b6aa:	2102      	movs	r1, #2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7f7 f86a 	bl	8002786 <DRV_CANFDSPI_TransmitChannelEventGet>
    if (attempts == 0) {
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d11a      	bne.n	800b6ee <VCU_TransmitMessageQueue+0x56>
      Nop();
 800b6b8:	bf00      	nop
      Nop();
 800b6ba:	bf00      	nop
      DRV_CANFDSPI_ErrorCountStateGet(index, &vcu_tec, &vcu_rec, &vcu_errorFlags);
 800b6bc:	79f8      	ldrb	r0, [r7, #7]
 800b6be:	4b1d      	ldr	r3, [pc, #116]	; (800b734 <VCU_TransmitMessageQueue+0x9c>)
 800b6c0:	4a1d      	ldr	r2, [pc, #116]	; (800b738 <VCU_TransmitMessageQueue+0xa0>)
 800b6c2:	491e      	ldr	r1, [pc, #120]	; (800b73c <VCU_TransmitMessageQueue+0xa4>)
 800b6c4:	f7f7 f919 	bl	80028fa <DRV_CANFDSPI_ErrorCountStateGet>
      if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU TX ERROR - FIFO Full! Check CAN Connection."); serialOut(tempBuffer);}
 800b6c8:	4b1d      	ldr	r3, [pc, #116]	; (800b740 <VCU_TransmitMessageQueue+0xa8>)
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	f003 0305 	and.w	r3, r3, #5
 800b6d0:	2b05      	cmp	r3, #5
 800b6d2:	d106      	bne.n	800b6e2 <VCU_TransmitMessageQueue+0x4a>
 800b6d4:	491b      	ldr	r1, [pc, #108]	; (800b744 <VCU_TransmitMessageQueue+0xac>)
 800b6d6:	481c      	ldr	r0, [pc, #112]	; (800b748 <VCU_TransmitMessageQueue+0xb0>)
 800b6d8:	f008 ffdc 	bl	8014694 <siprintf>
 800b6dc:	481a      	ldr	r0, [pc, #104]	; (800b748 <VCU_TransmitMessageQueue+0xb0>)
 800b6de:	f7f9 ff93 	bl	8005608 <serialOut>

      //Flush channel
      DRV_CANFDSPI_TransmitChannelFlush(index, VCU_TX_FIFO);
 800b6e2:	79fb      	ldrb	r3, [r7, #7]
 800b6e4:	2102      	movs	r1, #2
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f7f6 fd90 	bl	800220c <DRV_CANFDSPI_TransmitChannelFlush>
      return;
 800b6ec:	e01c      	b.n	800b728 <VCU_TransmitMessageQueue+0x90>
    }
    attempts--;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
 800b6f0:	3b01      	subs	r3, #1
 800b6f2:	73fb      	strb	r3, [r7, #15]
  }
  while (!(vcu_txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <VCU_TransmitMessageQueue+0x98>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	f003 0301 	and.w	r3, r3, #1
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0d2      	beq.n	800b6a6 <VCU_TransmitMessageQueue+0xe>

  // Load message and transmit
  uint8_t n = DRV_CANFDSPI_DlcToDataBytes(vcu_txObj.bF.ctrl.DLC);
 800b700:	4b12      	ldr	r3, [pc, #72]	; (800b74c <VCU_TransmitMessageQueue+0xb4>)
 800b702:	791b      	ldrb	r3, [r3, #4]
 800b704:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7f8 f902 	bl	8003914 <DRV_CANFDSPI_DlcToDataBytes>
 800b710:	4603      	mov	r3, r0
 800b712:	73bb      	strb	r3, [r7, #14]

  DRV_CANFDSPI_TransmitChannelLoad(index, VCU_TX_FIFO, &vcu_txObj, vcu_txd, n, true);
 800b714:	7bbb      	ldrb	r3, [r7, #14]
 800b716:	79f8      	ldrb	r0, [r7, #7]
 800b718:	2201      	movs	r2, #1
 800b71a:	9201      	str	r2, [sp, #4]
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	4b0c      	ldr	r3, [pc, #48]	; (800b750 <VCU_TransmitMessageQueue+0xb8>)
 800b720:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <VCU_TransmitMessageQueue+0xb4>)
 800b722:	2102      	movs	r1, #2
 800b724:	f7f6 fc80 	bl	8002028 <DRV_CANFDSPI_TransmitChannelLoad>
}
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	2000a6c8 	.word	0x2000a6c8
 800b734:	2000a76a 	.word	0x2000a76a
 800b738:	2000a769 	.word	0x2000a769
 800b73c:	2000a768 	.word	0x2000a768
 800b740:	2000000c 	.word	0x2000000c
 800b744:	08018cf4 	.word	0x08018cf4
 800b748:	20000b64 	.word	0x20000b64
 800b74c:	2000a6cc 	.word	0x2000a6cc
 800b750:	2000a6d8 	.word	0x2000a6d8
 800b754:	00000000 	.word	0x00000000

0800b758 <VCU_ProcessVcuCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u C o m m a n d                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuCommand(void){
 800b758:	b5b0      	push	{r4, r5, r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af02      	add	r7, sp, #8

  CANFRM_0x400_VCU_COMMAND command;


  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b75e:	4b4c      	ldr	r3, [pc, #304]	; (800b890 <VCU_ProcessVcuCommand+0x138>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a4c      	ldr	r2, [pc, #304]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b764:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b766:	4b4c      	ldr	r3, [pc, #304]	; (800b898 <VCU_ProcessVcuCommand+0x140>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b76c:	4a49      	ldr	r2, [pc, #292]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b76e:	6453      	str	r3, [r2, #68]	; 0x44

  // received a pack message so set mode to pack mode
  pack.controlMode = packMode;
 800b770:	4b48      	ldr	r3, [pc, #288]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  // copy received data to status structure
  memset(&command,0,sizeof(command));
 800b778:	463b      	mov	r3, r7
 800b77a:	2208      	movs	r2, #8
 800b77c:	2100      	movs	r1, #0
 800b77e:	4618      	mov	r0, r3
 800b780:	f007 ff76 	bl	8013670 <memset>
  memcpy(&command, vcu_rxd, sizeof(command));
 800b784:	4a45      	ldr	r2, [pc, #276]	; (800b89c <VCU_ProcessVcuCommand+0x144>)
 800b786:	463b      	mov	r3, r7
 800b788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b78c:	e883 0003 	stmia.w	r3, {r0, r1}
  packValue = (floatValue/MODULE_VOLTAGE_FACTOR) - (MODULE_VOLTAGE_BASE/MODULE_VOLTAGE_FACTOR);
  pack.vcuHvBusVoltage = packValue;
*/

  // pack hv bus voltage is encoder the same as vcu so no need to convert it
  pack.vcuHvBusVoltage = command.vcu_hv_bus_voltage;
 800b790:	887a      	ldrh	r2, [r7, #2]
 800b792:	4b40      	ldr	r3, [pc, #256]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b794:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50


  if(pack.vcuRequestedState != command.vcu_contactor_ctrl){
 800b798:	4b3e      	ldr	r3, [pc, #248]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b79a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b79e:	783a      	ldrb	r2, [r7, #0]
 800b7a0:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d03a      	beq.n	800b820 <VCU_ProcessVcuCommand+0xc8>

    // State Change! Set requested state
    pack.vcuRequestedState = command.vcu_contactor_ctrl;
 800b7aa:	783b      	ldrb	r3, [r7, #0]
 800b7ac:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	4b37      	ldr	r3, [pc, #220]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b7b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    switch (pack.vcuRequestedState) {
 800b7ba:	4b36      	ldr	r3, [pc, #216]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b7bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b7c0:	2b03      	cmp	r3, #3
 800b7c2:	d81b      	bhi.n	800b7fc <VCU_ProcessVcuCommand+0xa4>
 800b7c4:	a201      	add	r2, pc, #4	; (adr r2, 800b7cc <VCU_ProcessVcuCommand+0x74>)
 800b7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7ca:	bf00      	nop
 800b7cc:	0800b825 	.word	0x0800b825
 800b7d0:	0800b825 	.word	0x0800b825
 800b7d4:	0800b7ed 	.word	0x0800b7ed
 800b7d8:	0800b7dd 	.word	0x0800b7dd
      case packOn:
        pack.powerStatus.powerStage = stageSelectModule;
 800b7dc:	4b2d      	ldr	r3, [pc, #180]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800b7e2:	4b2c      	ldr	r3, [pc, #176]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800b7ea:	e01e      	b.n	800b82a <VCU_ProcessVcuCommand+0xd2>
      case packPrecharge:
        pack.powerStatus.powerStage = stageSelectModule;
 800b7ec:	4b29      	ldr	r3, [pc, #164]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	769a      	strb	r2, [r3, #26]
        pack.errorCounts.firstModule = 0;
 800b7f2:	4b28      	ldr	r3, [pc, #160]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        break;
 800b7fa:	e016      	b.n	800b82a <VCU_ProcessVcuCommand+0xd2>
      case packStandby:
        // Mechanical on, FET off for all modules (handled in app.c)
        break;
      default:
        // Unknown Message
        if((debugLevel & ( DBG_VCU + DBG_ERRORS))==( DBG_VCU + DBG_ERRORS)){ sprintf(tempBuffer,"VCU RX UNKNOWN REQUESTED STATE : 0x%02x",pack.vcuRequestedState); serialOut(tempBuffer);}
 800b7fc:	4b28      	ldr	r3, [pc, #160]	; (800b8a0 <VCU_ProcessVcuCommand+0x148>)
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	f003 0305 	and.w	r3, r3, #5
 800b804:	2b05      	cmp	r3, #5
 800b806:	d10f      	bne.n	800b828 <VCU_ProcessVcuCommand+0xd0>
 800b808:	4b22      	ldr	r3, [pc, #136]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b80a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b80e:	461a      	mov	r2, r3
 800b810:	4924      	ldr	r1, [pc, #144]	; (800b8a4 <VCU_ProcessVcuCommand+0x14c>)
 800b812:	4825      	ldr	r0, [pc, #148]	; (800b8a8 <VCU_ProcessVcuCommand+0x150>)
 800b814:	f008 ff3e 	bl	8014694 <siprintf>
 800b818:	4823      	ldr	r0, [pc, #140]	; (800b8a8 <VCU_ProcessVcuCommand+0x150>)
 800b81a:	f7f9 fef5 	bl	8005608 <serialOut>
        break;
 800b81e:	e003      	b.n	800b828 <VCU_ProcessVcuCommand+0xd0>
    }
  }
 800b820:	bf00      	nop
 800b822:	e002      	b.n	800b82a <VCU_ProcessVcuCommand+0xd2>
        break;
 800b824:	bf00      	nop
 800b826:	e000      	b.n	800b82a <VCU_ProcessVcuCommand+0xd2>
        break;
 800b828:	bf00      	nop
  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Command : STATE=%02x HV=%.2fV", vcu_txObj.bF.id.SID, pack.vcuRequestedState, pack.vcuHvBusVoltage * MODULE_VOLTAGE_FACTOR); serialOut(tempBuffer);}
 800b82a:	4b1d      	ldr	r3, [pc, #116]	; (800b8a0 <VCU_ProcessVcuCommand+0x148>)
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	f003 0304 	and.w	r3, r3, #4
 800b832:	2b00      	cmp	r3, #0
 800b834:	d021      	beq.n	800b87a <VCU_ProcessVcuCommand+0x122>
 800b836:	4b1d      	ldr	r3, [pc, #116]	; (800b8ac <VCU_ProcessVcuCommand+0x154>)
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b83e:	b29b      	uxth	r3, r3
 800b840:	461c      	mov	r4, r3
 800b842:	4b14      	ldr	r3, [pc, #80]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b844:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b848:	461d      	mov	r5, r3
 800b84a:	4b12      	ldr	r3, [pc, #72]	; (800b894 <VCU_ProcessVcuCommand+0x13c>)
 800b84c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b850:	4618      	mov	r0, r3
 800b852:	f7f4 fe49 	bl	80004e8 <__aeabi_i2d>
 800b856:	a30c      	add	r3, pc, #48	; (adr r3, 800b888 <VCU_ProcessVcuCommand+0x130>)
 800b858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85c:	f7f4 feae 	bl	80005bc <__aeabi_dmul>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	e9cd 2300 	strd	r2, r3, [sp]
 800b868:	462b      	mov	r3, r5
 800b86a:	4622      	mov	r2, r4
 800b86c:	4910      	ldr	r1, [pc, #64]	; (800b8b0 <VCU_ProcessVcuCommand+0x158>)
 800b86e:	480e      	ldr	r0, [pc, #56]	; (800b8a8 <VCU_ProcessVcuCommand+0x150>)
 800b870:	f008 ff10 	bl	8014694 <siprintf>
 800b874:	480c      	ldr	r0, [pc, #48]	; (800b8a8 <VCU_ProcessVcuCommand+0x150>)
 800b876:	f7f9 fec7 	bl	8005608 <serialOut>
}
 800b87a:	bf00      	nop
 800b87c:	3708      	adds	r7, #8
 800b87e:	46bd      	mov	sp, r7
 800b880:	bdb0      	pop	{r4, r5, r7, pc}
 800b882:	bf00      	nop
 800b884:	f3af 8000 	nop.w
 800b888:	eb851eb8 	.word	0xeb851eb8
 800b88c:	3f8eb851 	.word	0x3f8eb851
 800b890:	20000d28 	.word	0x20000d28
 800b894:	2000a66c 	.word	0x2000a66c
 800b898:	200005d8 	.word	0x200005d8
 800b89c:	2000a728 	.word	0x2000a728
 800b8a0:	2000000c 	.word	0x2000000c
 800b8a4:	08018d24 	.word	0x08018d24
 800b8a8:	20000b64 	.word	0x20000b64
 800b8ac:	2000a6cc 	.word	0x2000a6cc
 800b8b0:	08018d4c 	.word	0x08018d4c

0800b8b4 <VCU_ProcessVcuModuleCommand>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u M o d u l e C o m m a n d                        P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuModuleCommand(void){
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0

  CANFRM_0x404_VCU_MODULE_COMMAND moduleCommand;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b8ba:	4b31      	ldr	r3, [pc, #196]	; (800b980 <VCU_ProcessVcuModuleCommand+0xcc>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a31      	ldr	r2, [pc, #196]	; (800b984 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8c0:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b8c2:	4b31      	ldr	r3, [pc, #196]	; (800b988 <VCU_ProcessVcuModuleCommand+0xd4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c8:	4a2e      	ldr	r2, [pc, #184]	; (800b984 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8ca:	6453      	str	r3, [r2, #68]	; 0x44

  // received a pack message so set mode to direct module control (DMC) mode
  pack.controlMode = dmcMode;
 800b8cc:	4b2d      	ldr	r3, [pc, #180]	; (800b984 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  // copy received data to status structure
  memset(&moduleCommand,0,sizeof(moduleCommand));
 800b8d4:	463b      	mov	r3, r7
 800b8d6:	220c      	movs	r2, #12
 800b8d8:	2100      	movs	r1, #0
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f007 fec8 	bl	8013670 <memset>
  memcpy(&moduleCommand, vcu_rxd, sizeof(moduleCommand));
 800b8e0:	4a2a      	ldr	r2, [pc, #168]	; (800b98c <VCU_ProcessVcuModuleCommand+0xd8>)
 800b8e2:	463b      	mov	r3, r7
 800b8e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b8e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  // set the DMC module ID
  pack.dmcModuleId = moduleCommand.module_id;
 800b8ea:	783a      	ldrb	r2, [r7, #0]
 800b8ec:	4b25      	ldr	r3, [pc, #148]	; (800b984 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8ee:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800b8f2:	4b24      	ldr	r3, [pc, #144]	; (800b984 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b8f4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe ff3d 	bl	800a778 <MCU_ModuleIndexFromId>
 800b8fe:	4603      	mov	r3, r0
 800b900:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800b902:	4b20      	ldr	r3, [pc, #128]	; (800b984 <VCU_ProcessVcuModuleCommand+0xd0>)
 800b904:	7d1b      	ldrb	r3, [r3, #20]
 800b906:	7bfa      	ldrb	r2, [r7, #15]
 800b908:	429a      	cmp	r2, r3
 800b90a:	d034      	beq.n	800b976 <VCU_ProcessVcuModuleCommand+0xc2>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU RX ERROR - VCU_ProcessVcuModuleCommand - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    if(module[moduleIndex].currentState != moduleCommand.module_contactor_ctrl){
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	4a20      	ldr	r2, [pc, #128]	; (800b990 <VCU_ProcessVcuModuleCommand+0xdc>)
 800b910:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800b914:	fb01 f303 	mul.w	r3, r1, r3
 800b918:	4413      	add	r3, r2
 800b91a:	3327      	adds	r3, #39	; 0x27
 800b91c:	781b      	ldrb	r3, [r3, #0]
 800b91e:	787a      	ldrb	r2, [r7, #1]
 800b920:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800b924:	b2d2      	uxtb	r2, r2
 800b926:	4293      	cmp	r3, r2
 800b928:	d00e      	beq.n	800b948 <VCU_ProcessVcuModuleCommand+0x94>
      // State Change! Set requested state
      module[moduleIndex].nextState = moduleCommand.module_contactor_ctrl;
 800b92a:	787b      	ldrb	r3, [r7, #1]
 800b92c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b930:	b2da      	uxtb	r2, r3
 800b932:	7bfb      	ldrb	r3, [r7, #15]
 800b934:	4610      	mov	r0, r2
 800b936:	4a16      	ldr	r2, [pc, #88]	; (800b990 <VCU_ProcessVcuModuleCommand+0xdc>)
 800b938:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800b93c:	fb01 f303 	mul.w	r3, r1, r3
 800b940:	4413      	add	r3, r2
 800b942:	3328      	adds	r3, #40	; 0x28
 800b944:	4602      	mov	r2, r0
 800b946:	701a      	strb	r2, [r3, #0]
 * moduleCommand.module_cell_balance_ctrl
 * moduleCommand.module_hv_bus_actv_iso
 * moduleCommand.vcu_hv_bus_voltage
 *
 */
    if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Module Command : STATE=%02x", vcu_txObj.bF.id.SID, moduleCommand.module_contactor_ctrl); serialOut(tempBuffer);}
 800b948:	4b12      	ldr	r3, [pc, #72]	; (800b994 <VCU_ProcessVcuModuleCommand+0xe0>)
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	f003 0304 	and.w	r3, r3, #4
 800b950:	2b00      	cmp	r3, #0
 800b952:	d010      	beq.n	800b976 <VCU_ProcessVcuModuleCommand+0xc2>
 800b954:	4b10      	ldr	r3, [pc, #64]	; (800b998 <VCU_ProcessVcuModuleCommand+0xe4>)
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	461a      	mov	r2, r3
 800b960:	787b      	ldrb	r3, [r7, #1]
 800b962:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b966:	b2db      	uxtb	r3, r3
 800b968:	490c      	ldr	r1, [pc, #48]	; (800b99c <VCU_ProcessVcuModuleCommand+0xe8>)
 800b96a:	480d      	ldr	r0, [pc, #52]	; (800b9a0 <VCU_ProcessVcuModuleCommand+0xec>)
 800b96c:	f008 fe92 	bl	8014694 <siprintf>
 800b970:	480b      	ldr	r0, [pc, #44]	; (800b9a0 <VCU_ProcessVcuModuleCommand+0xec>)
 800b972:	f7f9 fe49 	bl	8005608 <serialOut>
  }
}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20000d28 	.word	0x20000d28
 800b984:	2000a66c 	.word	0x2000a66c
 800b988:	200005d8 	.word	0x200005d8
 800b98c:	2000a728 	.word	0x2000a728
 800b990:	20000dec 	.word	0x20000dec
 800b994:	2000000c 	.word	0x2000000c
 800b998:	2000a6cc 	.word	0x2000a6cc
 800b99c:	08018d7c 	.word	0x08018d7c
 800b9a0:	20000b64 	.word	0x20000b64

0800b9a4 <VCU_ProcessVcuKeepAlive>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u K e e p A l i v e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuKeepAlive(void){
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b082      	sub	sp, #8
 800b9a8:	af00      	add	r7, sp, #0

  CANFRM_0x405_VCU_KEEP_ALIVE keepAlive;

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800b9aa:	4b1e      	ldr	r3, [pc, #120]	; (800ba24 <VCU_ProcessVcuKeepAlive+0x80>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a1e      	ldr	r2, [pc, #120]	; (800ba28 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9b0:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800b9b2:	4b1e      	ldr	r3, [pc, #120]	; (800ba2c <VCU_ProcessVcuKeepAlive+0x88>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	4a1b      	ldr	r2, [pc, #108]	; (800ba28 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9ba:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&keepAlive,0,sizeof(keepAlive));
 800b9bc:	463b      	mov	r3, r7
 800b9be:	2208      	movs	r2, #8
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f007 fe54 	bl	8013670 <memset>
  memcpy(&keepAlive, vcu_rxd, sizeof(keepAlive));
 800b9c8:	4a19      	ldr	r2, [pc, #100]	; (800ba30 <VCU_ProcessVcuKeepAlive+0x8c>)
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b9d0:	e883 0003 	stmia.w	r3, {r0, r1}

  // Is this a keepalive in DMC mode? If it is, then the module Id will be set
  if(keepAlive.module_id > 0){
 800b9d4:	783b      	ldrb	r3, [r7, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d008      	beq.n	800b9ec <VCU_ProcessVcuKeepAlive+0x48>
    // yes - set mode to direct module control (DMC) mode
    pack.controlMode = dmcMode;
 800b9da:	4b13      	ldr	r3, [pc, #76]	; (800ba28 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
    // set the DMC module ID
    pack.dmcModuleId = keepAlive.module_id;
 800b9e2:	783a      	ldrb	r2, [r7, #0]
 800b9e4:	4b10      	ldr	r3, [pc, #64]	; (800ba28 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800b9ea:	e003      	b.n	800b9f4 <VCU_ProcessVcuKeepAlive+0x50>
  } else {
    // No module ID set, so its a pack keep-alive. Set to pack mode.
    pack.controlMode = packMode;
 800b9ec:	4b0e      	ldr	r3, [pc, #56]	; (800ba28 <VCU_ProcessVcuKeepAlive+0x84>)
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
  }

  if(debugLevel & DBG_VCU){ sprintf(tempBuffer,"VCU RX 0x%03x VCU Keep Alive", vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800b9f4:	4b0f      	ldr	r3, [pc, #60]	; (800ba34 <VCU_ProcessVcuKeepAlive+0x90>)
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	f003 0304 	and.w	r3, r3, #4
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00c      	beq.n	800ba1a <VCU_ProcessVcuKeepAlive+0x76>
 800ba00:	4b0d      	ldr	r3, [pc, #52]	; (800ba38 <VCU_ProcessVcuKeepAlive+0x94>)
 800ba02:	881b      	ldrh	r3, [r3, #0]
 800ba04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	490b      	ldr	r1, [pc, #44]	; (800ba3c <VCU_ProcessVcuKeepAlive+0x98>)
 800ba0e:	480c      	ldr	r0, [pc, #48]	; (800ba40 <VCU_ProcessVcuKeepAlive+0x9c>)
 800ba10:	f008 fe40 	bl	8014694 <siprintf>
 800ba14:	480a      	ldr	r0, [pc, #40]	; (800ba40 <VCU_ProcessVcuKeepAlive+0x9c>)
 800ba16:	f7f9 fdf7 	bl	8005608 <serialOut>
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	20000d28 	.word	0x20000d28
 800ba28:	2000a66c 	.word	0x2000a66c
 800ba2c:	200005d8 	.word	0x200005d8
 800ba30:	2000a728 	.word	0x2000a728
 800ba34:	2000000c 	.word	0x2000000c
 800ba38:	2000a6cc 	.word	0x2000a6cc
 800ba3c:	08018dac 	.word	0x08018dac
 800ba40:	20000b64 	.word	0x20000b64

0800ba44 <VCU_ProcessVcuTime>:


/***************************************************************************************************************
*     V C U _ P r o c e s s V c u T i m e                                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuTime(void){
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
  // 0x401 VCU_TIME - 8 bytes         8 bytes : Bits          Factor     Offset   Min     Max           Unit
  //  uint64_t time                           : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x401_VCU_TIME vcuTime;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ba4a:	4b1c      	ldr	r3, [pc, #112]	; (800babc <VCU_ProcessVcuTime+0x78>)
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00c      	beq.n	800ba70 <VCU_ProcessVcuTime+0x2c>
 800ba56:	4b1a      	ldr	r3, [pc, #104]	; (800bac0 <VCU_ProcessVcuTime+0x7c>)
 800ba58:	881b      	ldrh	r3, [r3, #0]
 800ba5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	461a      	mov	r2, r3
 800ba62:	4918      	ldr	r1, [pc, #96]	; (800bac4 <VCU_ProcessVcuTime+0x80>)
 800ba64:	4818      	ldr	r0, [pc, #96]	; (800bac8 <VCU_ProcessVcuTime+0x84>)
 800ba66:	f008 fe15 	bl	8014694 <siprintf>
 800ba6a:	4817      	ldr	r0, [pc, #92]	; (800bac8 <VCU_ProcessVcuTime+0x84>)
 800ba6c:	f7f9 fdcc 	bl	8005608 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800ba70:	4b16      	ldr	r3, [pc, #88]	; (800bacc <VCU_ProcessVcuTime+0x88>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a16      	ldr	r2, [pc, #88]	; (800bad0 <VCU_ProcessVcuTime+0x8c>)
 800ba76:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800ba78:	4b16      	ldr	r3, [pc, #88]	; (800bad4 <VCU_ProcessVcuTime+0x90>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7e:	4a14      	ldr	r2, [pc, #80]	; (800bad0 <VCU_ProcessVcuTime+0x8c>)
 800ba80:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuTime,0,sizeof(vcuTime));
 800ba82:	463b      	mov	r3, r7
 800ba84:	2208      	movs	r2, #8
 800ba86:	2100      	movs	r1, #0
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f007 fdf1 	bl	8013670 <memset>
  memcpy(&vcuTime, vcu_rxd, sizeof(vcuTime));
 800ba8e:	463b      	mov	r3, r7
 800ba90:	2208      	movs	r2, #8
 800ba92:	4911      	ldr	r1, [pc, #68]	; (800bad8 <VCU_ProcessVcuTime+0x94>)
 800ba94:	4618      	mov	r0, r3
 800ba96:	f007 fddd 	bl	8013654 <memcpy>

  time_t rtcTime = vcuTime.vcu_time;
 800ba9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba9e:	e9c7 2302 	strd	r2, r3, [r7, #8]

  //set the STM32 RTC based on the time received from the VCU
  writeRTC(rtcTime);
 800baa2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800baa6:	f7f9 fe1d 	bl	80056e4 <writeRTC>

  // flag time as being valid as its come from the VCU
  pack.rtcValid = true;
 800baaa:	4b09      	ldr	r3, [pc, #36]	; (800bad0 <VCU_ProcessVcuTime+0x8c>)
 800baac:	2201      	movs	r2, #1
 800baae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

}
 800bab2:	bf00      	nop
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	2000000c 	.word	0x2000000c
 800bac0:	2000a6cc 	.word	0x2000a6cc
 800bac4:	08018dcc 	.word	0x08018dcc
 800bac8:	20000b64 	.word	0x20000b64
 800bacc:	20000d28 	.word	0x20000d28
 800bad0:	2000a66c 	.word	0x2000a66c
 800bad4:	200005d8 	.word	0x200005d8
 800bad8:	2000a728 	.word	0x2000a728

0800badc <VCU_ProcessReadEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s R e a d E e p r o m                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessReadEeprom(void){
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x402_VCU_READ_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	603b      	str	r3, [r7, #0]
  EE_Status eeStatus;
  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_READ_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bae6:	4b50      	ldr	r3, [pc, #320]	; (800bc28 <VCU_ProcessReadEeprom+0x14c>)
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	f003 0304 	and.w	r3, r3, #4
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d00c      	beq.n	800bb0c <VCU_ProcessReadEeprom+0x30>
 800baf2:	4b4e      	ldr	r3, [pc, #312]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800baf4:	881b      	ldrh	r3, [r3, #0]
 800baf6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	461a      	mov	r2, r3
 800bafe:	494c      	ldr	r1, [pc, #304]	; (800bc30 <VCU_ProcessReadEeprom+0x154>)
 800bb00:	484c      	ldr	r0, [pc, #304]	; (800bc34 <VCU_ProcessReadEeprom+0x158>)
 800bb02:	f008 fdc7 	bl	8014694 <siprintf>
 800bb06:	484b      	ldr	r0, [pc, #300]	; (800bc34 <VCU_ProcessReadEeprom+0x158>)
 800bb08:	f7f9 fd7e 	bl	8005608 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800bb0c:	4b4a      	ldr	r3, [pc, #296]	; (800bc38 <VCU_ProcessReadEeprom+0x15c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4a4a      	ldr	r2, [pc, #296]	; (800bc3c <VCU_ProcessReadEeprom+0x160>)
 800bb12:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800bb14:	4b4a      	ldr	r3, [pc, #296]	; (800bc40 <VCU_ProcessReadEeprom+0x164>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1a:	4a48      	ldr	r2, [pc, #288]	; (800bc3c <VCU_ProcessReadEeprom+0x160>)
 800bb1c:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800bb1e:	f107 030c 	add.w	r3, r7, #12
 800bb22:	2208      	movs	r2, #8
 800bb24:	2100      	movs	r1, #0
 800bb26:	4618      	mov	r0, r3
 800bb28:	f007 fda2 	bl	8013670 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800bb2c:	4a45      	ldr	r2, [pc, #276]	; (800bc44 <VCU_ProcessReadEeprom+0x168>)
 800bb2e:	f107 030c 	add.w	r3, r7, #12
 800bb32:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bb36:	e883 0003 	stmia.w	r3, {r0, r1}

  // select the register
  eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800bb3a:	7b3b      	ldrb	r3, [r7, #12]
 800bb3c:	82fb      	strh	r3, [r7, #22]

  // get the data from emulated EEPROM
  eeStatus = EE_ReadVariable32bits(eepromRegister, &eepromData);
 800bb3e:	463a      	mov	r2, r7
 800bb40:	8afb      	ldrh	r3, [r7, #22]
 800bb42:	4611      	mov	r1, r2
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f8 fd25 	bl	8004594 <EE_ReadVariable32bits>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	82bb      	strh	r3, [r7, #20]

  if(eeStatus == EE_OK){
 800bb4e:	8abb      	ldrh	r3, [r7, #20]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d156      	bne.n	800bc02 <VCU_ProcessReadEeprom+0x126>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f36f 231f 	bfc	r3, #8, #24
 800bb5a:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	60bb      	str	r3, [r7, #8]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800bb60:	8afb      	ldrh	r3, [r7, #22]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	713b      	strb	r3, [r7, #4]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bb66:	4b31      	ldr	r3, [pc, #196]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800bb6c:	4b2f      	ldr	r3, [pc, #188]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800bb72:	4b2e      	ldr	r3, [pc, #184]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800bb78:	4b33      	ldr	r3, [pc, #204]	; (800bc48 <VCU_ProcessReadEeprom+0x16c>)
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	1d3b      	adds	r3, r7, #4
 800bb7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb82:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bb86:	4b2d      	ldr	r3, [pc, #180]	; (800bc3c <VCU_ProcessReadEeprom+0x160>)
 800bb88:	895b      	ldrh	r3, [r3, #10]
 800bb8a:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bb94:	b299      	uxth	r1, r3
 800bb96:	4a25      	ldr	r2, [pc, #148]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bb98:	8813      	ldrh	r3, [r2, #0]
 800bb9a:	f361 030a 	bfi	r3, r1, #0, #11
 800bb9e:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bba0:	4a22      	ldr	r2, [pc, #136]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bba2:	6813      	ldr	r3, [r2, #0]
 800bba4:	f36f 23dc 	bfc	r3, #11, #18
 800bba8:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bbaa:	4a20      	ldr	r2, [pc, #128]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bbac:	7913      	ldrb	r3, [r2, #4]
 800bbae:	f36f 1386 	bfc	r3, #6, #1
 800bbb2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bbb4:	4a1d      	ldr	r2, [pc, #116]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bbb6:	7913      	ldrb	r3, [r2, #4]
 800bbb8:	2108      	movs	r1, #8
 800bbba:	f361 0303 	bfi	r3, r1, #0, #4
 800bbbe:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bbc0:	4a1a      	ldr	r2, [pc, #104]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bbc2:	7913      	ldrb	r3, [r2, #4]
 800bbc4:	f36f 13c7 	bfc	r3, #7, #1
 800bbc8:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bbca:	4a18      	ldr	r2, [pc, #96]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bbcc:	7913      	ldrb	r3, [r2, #4]
 800bbce:	f36f 1304 	bfc	r3, #4, #1
 800bbd2:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bbd4:	4b14      	ldr	r3, [pc, #80]	; (800bc28 <VCU_ProcessReadEeprom+0x14c>)
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	f003 0304 	and.w	r3, r3, #4
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d00c      	beq.n	800bbfa <VCU_ProcessReadEeprom+0x11e>
 800bbe0:	4b12      	ldr	r3, [pc, #72]	; (800bc2c <VCU_ProcessReadEeprom+0x150>)
 800bbe2:	881b      	ldrh	r3, [r3, #0]
 800bbe4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	461a      	mov	r2, r3
 800bbec:	4917      	ldr	r1, [pc, #92]	; (800bc4c <VCU_ProcessReadEeprom+0x170>)
 800bbee:	4811      	ldr	r0, [pc, #68]	; (800bc34 <VCU_ProcessReadEeprom+0x158>)
 800bbf0:	f008 fd50 	bl	8014694 <siprintf>
 800bbf4:	480f      	ldr	r0, [pc, #60]	; (800bc34 <VCU_ProcessReadEeprom+0x158>)
 800bbf6:	f7f9 fd07 	bl	8005608 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	f7ff fd4c 	bl	800b698 <VCU_TransmitMessageQueue>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
  }
}
 800bc00:	e00e      	b.n	800bc20 <VCU_ProcessReadEeprom+0x144>
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM READ ERROR EESTATUS 0x%03x ",eeStatus); serialOut(tempBuffer);}
 800bc02:	4b09      	ldr	r3, [pc, #36]	; (800bc28 <VCU_ProcessReadEeprom+0x14c>)
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	f003 0301 	and.w	r3, r3, #1
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d008      	beq.n	800bc20 <VCU_ProcessReadEeprom+0x144>
 800bc0e:	8abb      	ldrh	r3, [r7, #20]
 800bc10:	461a      	mov	r2, r3
 800bc12:	490f      	ldr	r1, [pc, #60]	; (800bc50 <VCU_ProcessReadEeprom+0x174>)
 800bc14:	4807      	ldr	r0, [pc, #28]	; (800bc34 <VCU_ProcessReadEeprom+0x158>)
 800bc16:	f008 fd3d 	bl	8014694 <siprintf>
 800bc1a:	4806      	ldr	r0, [pc, #24]	; (800bc34 <VCU_ProcessReadEeprom+0x158>)
 800bc1c:	f7f9 fcf4 	bl	8005608 <serialOut>
}
 800bc20:	bf00      	nop
 800bc22:	3718      	adds	r7, #24
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}
 800bc28:	2000000c 	.word	0x2000000c
 800bc2c:	2000a6cc 	.word	0x2000a6cc
 800bc30:	08018de4 	.word	0x08018de4
 800bc34:	20000b64 	.word	0x20000b64
 800bc38:	20000d28 	.word	0x20000d28
 800bc3c:	2000a66c 	.word	0x2000a66c
 800bc40:	200005d8 	.word	0x200005d8
 800bc44:	2000a728 	.word	0x2000a728
 800bc48:	2000a6d8 	.word	0x2000a6d8
 800bc4c:	08018e04 	.word	0x08018e04
 800bc50:	08018e24 	.word	0x08018e24

0800bc54 <VCU_ProcessWriteEeprom>:


/***************************************************************************************************************
*     V C U _ P r o c e s s W r i t e E e p r o m                                  P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessWriteEeprom(void){
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b086      	sub	sp, #24
 800bc58:	af00      	add	r7, sp, #0
  // uint32_t bms_eeprom_data               : 32; // eeprom data                         : 64;           0          0        0       2^64          time_t    // 64 bit time_t

  CANFRM_0x403_VCU_WRITE_EEPROM vcuEepromFrame;
  CANFRM_0x441_BMS_EEPROM_DATA eeDataFrame;
  uint16_t  eepromRegister;
  uint32_t  eepromData = 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	617b      	str	r3, [r7, #20]
  EE_Status eeStatus;

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU RX 0x%03x VCU_WRITE_EEPROM",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bc5e:	4b52      	ldr	r3, [pc, #328]	; (800bda8 <VCU_ProcessWriteEeprom+0x154>)
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	f003 0304 	and.w	r3, r3, #4
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00c      	beq.n	800bc84 <VCU_ProcessWriteEeprom+0x30>
 800bc6a:	4b50      	ldr	r3, [pc, #320]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	494e      	ldr	r1, [pc, #312]	; (800bdb0 <VCU_ProcessWriteEeprom+0x15c>)
 800bc78:	484e      	ldr	r0, [pc, #312]	; (800bdb4 <VCU_ProcessWriteEeprom+0x160>)
 800bc7a:	f008 fd0b 	bl	8014694 <siprintf>
 800bc7e:	484d      	ldr	r0, [pc, #308]	; (800bdb4 <VCU_ProcessWriteEeprom+0x160>)
 800bc80:	f7f9 fcc2 	bl	8005608 <serialOut>

  // Heartbeat - update last contact
  pack.vcuLastContact.overflows = etTimerOverflows ;
 800bc84:	4b4c      	ldr	r3, [pc, #304]	; (800bdb8 <VCU_ProcessWriteEeprom+0x164>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a4c      	ldr	r2, [pc, #304]	; (800bdbc <VCU_ProcessWriteEeprom+0x168>)
 800bc8a:	6493      	str	r3, [r2, #72]	; 0x48
  pack.vcuLastContact.ticks =  htim1.Instance->CNT;
 800bc8c:	4b4c      	ldr	r3, [pc, #304]	; (800bdc0 <VCU_ProcessWriteEeprom+0x16c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc92:	4a4a      	ldr	r2, [pc, #296]	; (800bdbc <VCU_ProcessWriteEeprom+0x168>)
 800bc94:	6453      	str	r3, [r2, #68]	; 0x44

  // copy received data to status structure
  memset(&vcuEepromFrame,0,sizeof(vcuEepromFrame));
 800bc96:	f107 0308 	add.w	r3, r7, #8
 800bc9a:	2208      	movs	r2, #8
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f007 fce6 	bl	8013670 <memset>
  memcpy(&vcuEepromFrame, vcu_rxd, sizeof(vcuEepromFrame));
 800bca4:	4a47      	ldr	r2, [pc, #284]	; (800bdc4 <VCU_ProcessWriteEeprom+0x170>)
 800bca6:	f107 0308 	add.w	r3, r7, #8
 800bcaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bcae:	e883 0003 	stmia.w	r3, {r0, r1}

 // write to emulated EEPROM
 eepromRegister = vcuEepromFrame.bms_eeprom_data_register;
 800bcb2:	7a3b      	ldrb	r3, [r7, #8]
 800bcb4:	827b      	strh	r3, [r7, #18]
 eepromData     = vcuEepromFrame.bms_eeprom_data;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	617b      	str	r3, [r7, #20]


 eeStatus = StoreEEPROM(eepromRegister, eepromData);
 800bcba:	8a7b      	ldrh	r3, [r7, #18]
 800bcbc:	6979      	ldr	r1, [r7, #20]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7f9 fe08 	bl	80058d4 <StoreEEPROM>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	823b      	strh	r3, [r7, #16]


 if(eeStatus == EE_OK){
 800bcc8:	8a3b      	ldrh	r3, [r7, #16]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d156      	bne.n	800bd7c <VCU_ProcessWriteEeprom+0x128>
    // set up the reply frame
    eeDataFrame.UNUSED_8_31               = 0;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	f36f 231f 	bfc	r3, #8, #24
 800bcd4:	603b      	str	r3, [r7, #0]
    eeDataFrame.bms_eeprom_data           = eepromData;
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	607b      	str	r3, [r7, #4]
    eeDataFrame.bms_eeprom_data_register  = eepromRegister;
 800bcda:	8a7b      	ldrh	r3, [r7, #18]
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	703b      	strb	r3, [r7, #0]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bce0:	4b32      	ldr	r3, [pc, #200]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800bce6:	4b31      	ldr	r3, [pc, #196]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800bcec:	4b2f      	ldr	r3, [pc, #188]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &eeDataFrame,sizeof(eeDataFrame));
 800bcf2:	4b35      	ldr	r3, [pc, #212]	; (800bdc8 <VCU_ProcessWriteEeprom+0x174>)
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	463b      	mov	r3, r7
 800bcf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bcfc:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_BMS_EEPROM_DATA + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bd00:	4b2e      	ldr	r3, [pc, #184]	; (800bdbc <VCU_ProcessWriteEeprom+0x168>)
 800bd02:	895b      	ldrh	r3, [r3, #10]
 800bd04:	f203 4341 	addw	r3, r3, #1089	; 0x441
 800bd08:	b29b      	uxth	r3, r3
 800bd0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd0e:	b299      	uxth	r1, r3
 800bd10:	4a26      	ldr	r2, [pc, #152]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bd12:	8813      	ldrh	r3, [r2, #0]
 800bd14:	f361 030a 	bfi	r3, r1, #0, #11
 800bd18:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bd1a:	4a24      	ldr	r2, [pc, #144]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bd1c:	6813      	ldr	r3, [r2, #0]
 800bd1e:	f36f 23dc 	bfc	r3, #11, #18
 800bd22:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bd24:	4a21      	ldr	r2, [pc, #132]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bd26:	7913      	ldrb	r3, [r2, #4]
 800bd28:	f36f 1386 	bfc	r3, #6, #1
 800bd2c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bd2e:	4a1f      	ldr	r2, [pc, #124]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bd30:	7913      	ldrb	r3, [r2, #4]
 800bd32:	2108      	movs	r1, #8
 800bd34:	f361 0303 	bfi	r3, r1, #0, #4
 800bd38:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bd3a:	4a1c      	ldr	r2, [pc, #112]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bd3c:	7913      	ldrb	r3, [r2, #4]
 800bd3e:	f36f 13c7 	bfc	r3, #7, #1
 800bd42:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bd44:	4a19      	ldr	r2, [pc, #100]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bd46:	7913      	ldrb	r3, [r2, #4]
 800bd48:	f36f 1304 	bfc	r3, #4, #1
 800bd4c:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_EEPROM_DATA",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bd4e:	4b16      	ldr	r3, [pc, #88]	; (800bda8 <VCU_ProcessWriteEeprom+0x154>)
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	f003 0304 	and.w	r3, r3, #4
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d00c      	beq.n	800bd74 <VCU_ProcessWriteEeprom+0x120>
 800bd5a:	4b14      	ldr	r3, [pc, #80]	; (800bdac <VCU_ProcessWriteEeprom+0x158>)
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	461a      	mov	r2, r3
 800bd66:	4919      	ldr	r1, [pc, #100]	; (800bdcc <VCU_ProcessWriteEeprom+0x178>)
 800bd68:	4812      	ldr	r0, [pc, #72]	; (800bdb4 <VCU_ProcessWriteEeprom+0x160>)
 800bd6a:	f008 fc93 	bl	8014694 <siprintf>
 800bd6e:	4811      	ldr	r0, [pc, #68]	; (800bdb4 <VCU_ProcessWriteEeprom+0x160>)
 800bd70:	f7f9 fc4a 	bl	8005608 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bd74:	2000      	movs	r0, #0
 800bd76:	f7ff fc8f 	bl	800b698 <VCU_TransmitMessageQueue>
 800bd7a:	e00e      	b.n	800bd9a <VCU_ProcessWriteEeprom+0x146>
  } else {
    // EEPROM error
    if(debugLevel  & DBG_ERRORS) {sprintf(tempBuffer,"EEPROM WRITE ERROR EESTATUS 0x%02x",eeStatus ); serialOut(tempBuffer);}
 800bd7c:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <VCU_ProcessWriteEeprom+0x154>)
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	f003 0301 	and.w	r3, r3, #1
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d008      	beq.n	800bd9a <VCU_ProcessWriteEeprom+0x146>
 800bd88:	8a3b      	ldrh	r3, [r7, #16]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4910      	ldr	r1, [pc, #64]	; (800bdd0 <VCU_ProcessWriteEeprom+0x17c>)
 800bd8e:	4809      	ldr	r0, [pc, #36]	; (800bdb4 <VCU_ProcessWriteEeprom+0x160>)
 800bd90:	f008 fc80 	bl	8014694 <siprintf>
 800bd94:	4807      	ldr	r0, [pc, #28]	; (800bdb4 <VCU_ProcessWriteEeprom+0x160>)
 800bd96:	f7f9 fc37 	bl	8005608 <serialOut>
  }
 // Reboot the Pack Controller to reload data from eeprom
 PCU_Initialize();
 800bd9a:	f7fa fff9 	bl	8006d90 <PCU_Initialize>
}
 800bd9e:	bf00      	nop
 800bda0:	3718      	adds	r7, #24
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}
 800bda6:	bf00      	nop
 800bda8:	2000000c 	.word	0x2000000c
 800bdac:	2000a6cc 	.word	0x2000a6cc
 800bdb0:	08018e48 	.word	0x08018e48
 800bdb4:	20000b64 	.word	0x20000b64
 800bdb8:	20000d28 	.word	0x20000d28
 800bdbc:	2000a66c 	.word	0x2000a66c
 800bdc0:	200005d8 	.word	0x200005d8
 800bdc4:	2000a728 	.word	0x2000a728
 800bdc8:	2000a6d8 	.word	0x2000a6d8
 800bdcc:	08018e04 	.word	0x08018e04
 800bdd0:	08018e68 	.word	0x08018e68

0800bdd4 <VCU_ProcessVcuRequestModuleList>:

/***************************************************************************************************************
*    V C U _ P r o c e s s V c u R e q u e s t M o d u l e L i s t                 P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_ProcessVcuRequestModuleList(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0

}
 800bdd8:	bf00      	nop
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
	...

0800bde4 <VCU_TicksSinceLastMessage>:

/***************************************************************************************************************
*    V C U _ T i c k s S i n c e L a s t M e s s a g e                             P A C K   C O N T R O L L E R
***************************************************************************************************************/

uint32_t VCU_TicksSinceLastMessage(void){
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
  uint32_t elapsedTicks;
  uint32_t timerCNT;
  uint32_t overFlows;

  //take a snapshot of the timer counter and overflows
  timerCNT = htim1.Instance->CNT;
 800bdea:	4b16      	ldr	r3, [pc, #88]	; (800be44 <VCU_TicksSinceLastMessage+0x60>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	60bb      	str	r3, [r7, #8]
  overFlows = etTimerOverflows;
 800bdf2:	4b15      	ldr	r3, [pc, #84]	; (800be48 <VCU_TicksSinceLastMessage+0x64>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	607b      	str	r3, [r7, #4]

  if ((overFlows - pack.vcuLastContact.overflows) == 0){
 800bdf8:	4b14      	ldr	r3, [pc, #80]	; (800be4c <VCU_TicksSinceLastMessage+0x68>)
 800bdfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d105      	bne.n	800be0e <VCU_TicksSinceLastMessage+0x2a>
    elapsedTicks = timerCNT - pack.vcuLastContact.ticks;
 800be02:	4b12      	ldr	r3, [pc, #72]	; (800be4c <VCU_TicksSinceLastMessage+0x68>)
 800be04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be06:	68ba      	ldr	r2, [r7, #8]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	60fb      	str	r3, [r7, #12]
 800be0c:	e013      	b.n	800be36 <VCU_TicksSinceLastMessage+0x52>
  }else{
    //             (ticks last contact to overflow point)          + (              ticks in completed overflows                                  ) + ( ticks in current timer period)
    elapsedTicks = ((htim1.Init.Period +1) - pack.vcuLastContact.ticks) + ( (htim1.Init.Period +1) * (overFlows - (pack.vcuLastContact.overflows +1))) + (timerCNT);
 800be0e:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <VCU_TicksSinceLastMessage+0x60>)
 800be10:	68da      	ldr	r2, [r3, #12]
 800be12:	4b0e      	ldr	r3, [pc, #56]	; (800be4c <VCU_TicksSinceLastMessage+0x68>)
 800be14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be16:	1ad2      	subs	r2, r2, r3
 800be18:	4b0a      	ldr	r3, [pc, #40]	; (800be44 <VCU_TicksSinceLastMessage+0x60>)
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	3301      	adds	r3, #1
 800be1e:	490b      	ldr	r1, [pc, #44]	; (800be4c <VCU_TicksSinceLastMessage+0x68>)
 800be20:	6c89      	ldr	r1, [r1, #72]	; 0x48
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	1a41      	subs	r1, r0, r1
 800be26:	3901      	subs	r1, #1
 800be28:	fb01 f303 	mul.w	r3, r1, r3
 800be2c:	441a      	add	r2, r3
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	4413      	add	r3, r2
 800be32:	3301      	adds	r3, #1
 800be34:	60fb      	str	r3, [r7, #12]
   }
  return elapsedTicks;
 800be36:	68fb      	ldr	r3, [r7, #12]
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr
 800be44:	200005d8 	.word	0x200005d8
 800be48:	20000d28 	.word	0x20000d28
 800be4c:	2000a66c 	.word	0x2000a66c

0800be50 <VCU_TransmitBmsState>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s S t a t e                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsState(void){
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0


  CANFRM_0x410_BMS_STATE bmsState;

  float   floatValue  = 0;
 800be56:	f04f 0300 	mov.w	r3, #0
 800be5a:	617b      	str	r3, [r7, #20]
  float   vcuValue    = 0;
 800be5c:	f04f 0300 	mov.w	r3, #0
 800be60:	613b      	str	r3, [r7, #16]

  //SOH
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soh);
 800be62:	4b67      	ldr	r3, [pc, #412]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800be64:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f4 fb3d 	bl	80004e8 <__aeabi_i2d>
 800be6e:	f04f 0200 	mov.w	r2, #0
 800be72:	4b64      	ldr	r3, [pc, #400]	; (800c004 <VCU_TransmitBmsState+0x1b4>)
 800be74:	f7f4 fba2 	bl	80005bc <__aeabi_dmul>
 800be78:	4602      	mov	r2, r0
 800be7a:	460b      	mov	r3, r1
 800be7c:	4610      	mov	r0, r2
 800be7e:	4619      	mov	r1, r3
 800be80:	f04f 0200 	mov.w	r2, #0
 800be84:	f04f 0300 	mov.w	r3, #0
 800be88:	f7f4 f9e2 	bl	8000250 <__adddf3>
 800be8c:	4602      	mov	r2, r0
 800be8e:	460b      	mov	r3, r1
 800be90:	4610      	mov	r0, r2
 800be92:	4619      	mov	r1, r3
 800be94:	f7f4 fe8a 	bl	8000bac <__aeabi_d2f>
 800be98:	4603      	mov	r3, r0
 800be9a:	617b      	str	r3, [r7, #20]
  vcuValue = (floatValue/VCU_SOH_PERCENTAGE_FACTOR) - (VCU_SOH_PERCENTAGE_BASE/VCU_SOH_PERCENTAGE_FACTOR);
 800be9c:	6978      	ldr	r0, [r7, #20]
 800be9e:	f7f4 fb35 	bl	800050c <__aeabi_f2d>
 800bea2:	a355      	add	r3, pc, #340	; (adr r3, 800bff8 <VCU_TransmitBmsState+0x1a8>)
 800bea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea8:	f7f4 fcb2 	bl	8000810 <__aeabi_ddiv>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4610      	mov	r0, r2
 800beb2:	4619      	mov	r1, r3
 800beb4:	f7f4 fe7a 	bl	8000bac <__aeabi_d2f>
 800beb8:	4603      	mov	r3, r0
 800beba:	613b      	str	r3, [r7, #16]
  bmsState.bms_soh = vcuValue;
 800bebc:	edd7 7a04 	vldr	s15, [r7, #16]
 800bec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bec4:	edc7 7a01 	vstr	s15, [r7, #4]
 800bec8:	793b      	ldrb	r3, [r7, #4]
 800beca:	b2da      	uxtb	r2, r3
 800becc:	893b      	ldrh	r3, [r7, #8]
 800bece:	f362 0389 	bfi	r3, r2, #2, #8
 800bed2:	813b      	strh	r3, [r7, #8]

  bmsState.bms_state                = pack.state;
 800bed4:	4b4a      	ldr	r3, [pc, #296]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800bed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800beda:	f003 0303 	and.w	r3, r3, #3
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	7a3b      	ldrb	r3, [r7, #8]
 800bee2:	f362 0301 	bfi	r3, r2, #0, #2
 800bee6:	723b      	strb	r3, [r7, #8]
  bmsState.bms_status               = pack.status;
 800bee8:	4b45      	ldr	r3, [pc, #276]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800beea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800beee:	f003 0303 	and.w	r3, r3, #3
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	7a7b      	ldrb	r3, [r7, #9]
 800bef6:	f362 0383 	bfi	r3, r2, #2, #2
 800befa:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_status  = pack.cellBalanceStatus;
 800befc:	4b40      	ldr	r3, [pc, #256]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800befe:	7d9b      	ldrb	r3, [r3, #22]
 800bf00:	f003 0301 	and.w	r3, r3, #1
 800bf04:	b2da      	uxtb	r2, r3
 800bf06:	7a7b      	ldrb	r3, [r7, #9]
 800bf08:	f362 1304 	bfi	r3, r2, #4, #1
 800bf0c:	727b      	strb	r3, [r7, #9]
  bmsState.bms_cell_balance_active  = pack.cellBalanceActive;
 800bf0e:	4b3c      	ldr	r3, [pc, #240]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800bf10:	7d5b      	ldrb	r3, [r3, #21]
 800bf12:	f003 0301 	and.w	r3, r3, #1
 800bf16:	b2da      	uxtb	r2, r3
 800bf18:	7a7b      	ldrb	r3, [r7, #9]
 800bf1a:	f362 1345 	bfi	r3, r2, #5, #1
 800bf1e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_active_mod_cnt       = pack.activeModules;
 800bf20:	4b37      	ldr	r3, [pc, #220]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800bf22:	7ddb      	ldrb	r3, [r3, #23]
 800bf24:	72fb      	strb	r3, [r7, #11]
  if (pack.faultedModules > 0){
 800bf26:	4b36      	ldr	r3, [pc, #216]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800bf28:	7e1b      	ldrb	r3, [r3, #24]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d004      	beq.n	800bf38 <VCU_TransmitBmsState+0xe8>
    bmsState.bms_module_off = 1;
 800bf2e:	7a7b      	ldrb	r3, [r7, #9]
 800bf30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf34:	727b      	strb	r3, [r7, #9]
 800bf36:	e003      	b.n	800bf40 <VCU_TransmitBmsState+0xf0>
  }
  else bmsState.bms_module_off = 0;
 800bf38:	7a7b      	ldrb	r3, [r7, #9]
 800bf3a:	f36f 1386 	bfc	r3, #6, #1
 800bf3e:	727b      	strb	r3, [r7, #9]
  bmsState.bms_total_mod_cnt        = pack.moduleCount;
 800bf40:	4b2f      	ldr	r3, [pc, #188]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800bf42:	7d1b      	ldrb	r3, [r3, #20]
 800bf44:	72bb      	strb	r3, [r7, #10]
  bmsState.UNUSED_16                = 0;
 800bf46:	7a7b      	ldrb	r3, [r7, #9]
 800bf48:	f36f 13c7 	bfc	r3, #7, #1
 800bf4c:	727b      	strb	r3, [r7, #9]
  bmsState.UNUSED_31_63             = 0;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60fb      	str	r3, [r7, #12]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800bf52:	4b2d      	ldr	r3, [pc, #180]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800bf58:	4b2b      	ldr	r3, [pc, #172]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800bf5e:	4b2a      	ldr	r3, [pc, #168]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bf60:	2200      	movs	r2, #0
 800bf62:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsState,sizeof(bmsState));
 800bf64:	4b29      	ldr	r3, [pc, #164]	; (800c00c <VCU_TransmitBmsState+0x1bc>)
 800bf66:	461a      	mov	r2, r3
 800bf68:	f107 0308 	add.w	r3, r7, #8
 800bf6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bf70:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_STATE + pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800bf74:	4b22      	ldr	r3, [pc, #136]	; (800c000 <VCU_TransmitBmsState+0x1b0>)
 800bf76:	895b      	ldrh	r3, [r3, #10]
 800bf78:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bf82:	b299      	uxth	r1, r3
 800bf84:	4a20      	ldr	r2, [pc, #128]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bf86:	8813      	ldrh	r3, [r2, #0]
 800bf88:	f361 030a 	bfi	r3, r1, #0, #11
 800bf8c:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800bf8e:	4a1e      	ldr	r2, [pc, #120]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bf90:	6813      	ldr	r3, [r2, #0]
 800bf92:	f36f 23dc 	bfc	r3, #11, #18
 800bf96:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800bf98:	4a1b      	ldr	r2, [pc, #108]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bf9a:	7913      	ldrb	r3, [r2, #4]
 800bf9c:	f36f 1386 	bfc	r3, #6, #1
 800bfa0:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800bfa2:	4a19      	ldr	r2, [pc, #100]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bfa4:	7913      	ldrb	r3, [r2, #4]
 800bfa6:	2108      	movs	r1, #8
 800bfa8:	f361 0303 	bfi	r3, r1, #0, #4
 800bfac:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800bfae:	4a16      	ldr	r2, [pc, #88]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bfb0:	7913      	ldrb	r3, [r2, #4]
 800bfb2:	f36f 13c7 	bfc	r3, #7, #1
 800bfb6:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800bfb8:	4a13      	ldr	r2, [pc, #76]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bfba:	7913      	ldrb	r3, [r2, #4]
 800bfbc:	f36f 1304 	bfc	r3, #4, #1
 800bfc0:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800bfc2:	4b13      	ldr	r3, [pc, #76]	; (800c010 <VCU_TransmitBmsState+0x1c0>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00c      	beq.n	800bfe8 <VCU_TransmitBmsState+0x198>
 800bfce:	4b0e      	ldr	r3, [pc, #56]	; (800c008 <VCU_TransmitBmsState+0x1b8>)
 800bfd0:	881b      	ldrh	r3, [r3, #0]
 800bfd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	461a      	mov	r2, r3
 800bfda:	490e      	ldr	r1, [pc, #56]	; (800c014 <VCU_TransmitBmsState+0x1c4>)
 800bfdc:	480e      	ldr	r0, [pc, #56]	; (800c018 <VCU_TransmitBmsState+0x1c8>)
 800bfde:	f008 fb59 	bl	8014694 <siprintf>
 800bfe2:	480d      	ldr	r0, [pc, #52]	; (800c018 <VCU_TransmitBmsState+0x1c8>)
 800bfe4:	f7f9 fb10 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800bfe8:	2000      	movs	r0, #0
 800bfea:	f7ff fb55 	bl	800b698 <VCU_TransmitMessageQueue>
}
 800bfee:	bf00      	nop
 800bff0:	3718      	adds	r7, #24
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	9999999a 	.word	0x9999999a
 800bffc:	3fd99999 	.word	0x3fd99999
 800c000:	2000a66c 	.word	0x2000a66c
 800c004:	3fe00000 	.word	0x3fe00000
 800c008:	2000a6cc 	.word	0x2000a6cc
 800c00c:	2000a6d8 	.word	0x2000a6d8
 800c010:	2000000c 	.word	0x2000000c
 800c014:	08018e8c 	.word	0x08018e8c
 800c018:	20000b64 	.word	0x20000b64
 800c01c:	00000000 	.word	0x00000000

0800c020 <VCU_TransmitBmsData1>:


/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData1(void){
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
  // uint32_t bms_pack_voltage               : 16; // 32-47  0.05       0        0       3276.75       Volts   The voltage level of the pack
  // uint32_t bms_pack_current               : 16; // 48-63  0.05       -1600    -1600   1676.75       Amps    The current in or out of the pack. A positive value represents current into (charging) the energy storage system.  A negative value represents current out of (discharging) the energy storage system.

  CANFRM_0x421_BMS_DATA_1 bmsData1;

  float   floatValue  = 0;
 800c026:	f04f 0300 	mov.w	r3, #0
 800c02a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c02c:	f04f 0300 	mov.w	r3, #0
 800c030:	60bb      	str	r3, [r7, #8]

  // Current
  // To convert from 16-bit module value to current (Amps), current = base + (16-bit value * factor). Remember offset is -ve
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.current);
 800c032:	4b65      	ldr	r3, [pc, #404]	; (800c1c8 <VCU_TransmitBmsData1+0x1a8>)
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	4618      	mov	r0, r3
 800c038:	f7f4 fa46 	bl	80004c8 <__aeabi_ui2d>
 800c03c:	a35e      	add	r3, pc, #376	; (adr r3, 800c1b8 <VCU_TransmitBmsData1+0x198>)
 800c03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c042:	f7f4 fabb 	bl	80005bc <__aeabi_dmul>
 800c046:	4602      	mov	r2, r0
 800c048:	460b      	mov	r3, r1
 800c04a:	4610      	mov	r0, r2
 800c04c:	4619      	mov	r1, r3
 800c04e:	f04f 0200 	mov.w	r2, #0
 800c052:	4b5e      	ldr	r3, [pc, #376]	; (800c1cc <VCU_TransmitBmsData1+0x1ac>)
 800c054:	f7f4 f8fa 	bl	800024c <__aeabi_dsub>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4610      	mov	r0, r2
 800c05e:	4619      	mov	r1, r3
 800c060:	f7f4 fda4 	bl	8000bac <__aeabi_d2f>
 800c064:	4603      	mov	r3, r0
 800c066:	60fb      	str	r3, [r7, #12]
  // To convert a current(Amps) to a 16-bit VCU value, VCU value  = (current/factor) - (base/factor). Remember offset is -ve
  vcuValue = (floatValue/VCU_CURRENT_FACTOR)-(VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800c068:	68f8      	ldr	r0, [r7, #12]
 800c06a:	f7f4 fa4f 	bl	800050c <__aeabi_f2d>
 800c06e:	a352      	add	r3, pc, #328	; (adr r3, 800c1b8 <VCU_TransmitBmsData1+0x198>)
 800c070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c074:	f7f4 fbcc 	bl	8000810 <__aeabi_ddiv>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	4610      	mov	r0, r2
 800c07e:	4619      	mov	r1, r3
 800c080:	f04f 0200 	mov.w	r2, #0
 800c084:	4b52      	ldr	r3, [pc, #328]	; (800c1d0 <VCU_TransmitBmsData1+0x1b0>)
 800c086:	f7f4 f8e3 	bl	8000250 <__adddf3>
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	4610      	mov	r0, r2
 800c090:	4619      	mov	r1, r3
 800c092:	f7f4 fd8b 	bl	8000bac <__aeabi_d2f>
 800c096:	4603      	mov	r3, r0
 800c098:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_current = vcuValue;
 800c09a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c09e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0a2:	ee17 3a90 	vmov	r3, s15
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	80fb      	strh	r3, [r7, #6]

  //Voltage
  // To convert from 16-bit module value to voltage (Volts), voltage = base + (16-bit value * factor). Remember offset is -ve
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.voltage);
 800c0aa:	4b47      	ldr	r3, [pc, #284]	; (800c1c8 <VCU_TransmitBmsData1+0x1a8>)
 800c0ac:	899b      	ldrh	r3, [r3, #12]
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7f4 fa1a 	bl	80004e8 <__aeabi_i2d>
 800c0b4:	a342      	add	r3, pc, #264	; (adr r3, 800c1c0 <VCU_TransmitBmsData1+0x1a0>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f7f4 fa7f 	bl	80005bc <__aeabi_dmul>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	460b      	mov	r3, r1
 800c0c2:	4610      	mov	r0, r2
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	f04f 0200 	mov.w	r2, #0
 800c0ca:	f04f 0300 	mov.w	r3, #0
 800c0ce:	f7f4 f8bf 	bl	8000250 <__adddf3>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	4619      	mov	r1, r3
 800c0da:	f7f4 fd67 	bl	8000bac <__aeabi_d2f>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	60fb      	str	r3, [r7, #12]
  // To convert a voltage (Volts) to a 16-bit VCU value, VCU value  = (voltage/factor) - (base/factor). Remember offset is -ve
  vcuValue = floatValue/VCU_VOLTAGE_FACTOR; // VCU_VOLTAGE_BASE is zero
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f7f4 fa12 	bl	800050c <__aeabi_f2d>
 800c0e8:	a333      	add	r3, pc, #204	; (adr r3, 800c1b8 <VCU_TransmitBmsData1+0x198>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f7f4 fb8f 	bl	8000810 <__aeabi_ddiv>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	f7f4 fd57 	bl	8000bac <__aeabi_d2f>
 800c0fe:	4603      	mov	r3, r0
 800c100:	60bb      	str	r3, [r7, #8]
  bmsData1.bms_pack_voltage = vcuValue;
 800c102:	edd7 7a02 	vldr	s15, [r7, #8]
 800c106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10a:	ee17 3a90 	vmov	r3, s15
 800c10e:	b29b      	uxth	r3, r3
 800c110:	80bb      	strh	r3, [r7, #4]

  bmsData1.UNUSED_00_31 = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	603b      	str	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c116:	4b2f      	ldr	r3, [pc, #188]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c118:	2200      	movs	r2, #0
 800c11a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c11c:	4b2d      	ldr	r3, [pc, #180]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c11e:	2200      	movs	r2, #0
 800c120:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c122:	4b2c      	ldr	r3, [pc, #176]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c124:	2200      	movs	r2, #0
 800c126:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData1, sizeof(bmsData1));
 800c128:	4b2b      	ldr	r3, [pc, #172]	; (800c1d8 <VCU_TransmitBmsData1+0x1b8>)
 800c12a:	461a      	mov	r2, r3
 800c12c:	463b      	mov	r3, r7
 800c12e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c132:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_1 +  pack.vcuCanOffset;    // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c136:	4b24      	ldr	r3, [pc, #144]	; (800c1c8 <VCU_TransmitBmsData1+0x1a8>)
 800c138:	895b      	ldrh	r3, [r3, #10]
 800c13a:	f203 4321 	addw	r3, r3, #1057	; 0x421
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c144:	b299      	uxth	r1, r3
 800c146:	4a23      	ldr	r2, [pc, #140]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c148:	8813      	ldrh	r3, [r2, #0]
 800c14a:	f361 030a 	bfi	r3, r1, #0, #11
 800c14e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c150:	4a20      	ldr	r2, [pc, #128]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	f36f 23dc 	bfc	r3, #11, #18
 800c158:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c15a:	4a1e      	ldr	r2, [pc, #120]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c15c:	7913      	ldrb	r3, [r2, #4]
 800c15e:	f36f 1386 	bfc	r3, #6, #1
 800c162:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c164:	4a1b      	ldr	r2, [pc, #108]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c166:	7913      	ldrb	r3, [r2, #4]
 800c168:	2108      	movs	r1, #8
 800c16a:	f361 0303 	bfi	r3, r1, #0, #4
 800c16e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c170:	4a18      	ldr	r2, [pc, #96]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c172:	7913      	ldrb	r3, [r2, #4]
 800c174:	f36f 13c7 	bfc	r3, #7, #1
 800c178:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c17a:	4a16      	ldr	r2, [pc, #88]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c17c:	7913      	ldrb	r3, [r2, #4]
 800c17e:	f36f 1304 	bfc	r3, #4, #1
 800c182:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_1",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c184:	4b15      	ldr	r3, [pc, #84]	; (800c1dc <VCU_TransmitBmsData1+0x1bc>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f003 0304 	and.w	r3, r3, #4
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00c      	beq.n	800c1aa <VCU_TransmitBmsData1+0x18a>
 800c190:	4b10      	ldr	r3, [pc, #64]	; (800c1d4 <VCU_TransmitBmsData1+0x1b4>)
 800c192:	881b      	ldrh	r3, [r3, #0]
 800c194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c198:	b29b      	uxth	r3, r3
 800c19a:	461a      	mov	r2, r3
 800c19c:	4910      	ldr	r1, [pc, #64]	; (800c1e0 <VCU_TransmitBmsData1+0x1c0>)
 800c19e:	4811      	ldr	r0, [pc, #68]	; (800c1e4 <VCU_TransmitBmsData1+0x1c4>)
 800c1a0:	f008 fa78 	bl	8014694 <siprintf>
 800c1a4:	480f      	ldr	r0, [pc, #60]	; (800c1e4 <VCU_TransmitBmsData1+0x1c4>)
 800c1a6:	f7f9 fa2f 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c1aa:	2000      	movs	r0, #0
 800c1ac:	f7ff fa74 	bl	800b698 <VCU_TransmitMessageQueue>
}
 800c1b0:	bf00      	nop
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}
 800c1b8:	9999999a 	.word	0x9999999a
 800c1bc:	3fa99999 	.word	0x3fa99999
 800c1c0:	eb851eb8 	.word	0xeb851eb8
 800c1c4:	3f8eb851 	.word	0x3f8eb851
 800c1c8:	2000a66c 	.word	0x2000a66c
 800c1cc:	40990000 	.word	0x40990000
 800c1d0:	40df4000 	.word	0x40df4000
 800c1d4:	2000a6cc 	.word	0x2000a6cc
 800c1d8:	2000a6d8 	.word	0x2000a6d8
 800c1dc:	2000000c 	.word	0x2000000c
 800c1e0:	08018ea4 	.word	0x08018ea4
 800c1e4:	20000b64 	.word	0x20000b64

0800c1e8 <VCU_TransmitBmsData2>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 2                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData2(void){
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 // uint32_t bms_low_cell_volt              : 16; // 32-47  0.001      0        0       65.535        Volts    Lowest cell voltage reported by any cell
 // uint32_t bms_avg_cell_volt              : 16; // 48-63  0.001      0        0       65.535        Volts    Average cell voltage

  CANFRM_0x422_BMS_DATA_2 bmsData2;

  float   floatValue  = 0;
 800c1ee:	f04f 0300 	mov.w	r3, #0
 800c1f2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c1f4:	f04f 0300 	mov.w	r3, #0
 800c1f8:	60bb      	str	r3, [r7, #8]

  //SOC
  floatValue = PERCENTAGE_BASE + (PERCENTAGE_FACTOR * pack.soc);
 800c1fa:	4b95      	ldr	r3, [pc, #596]	; (800c450 <VCU_TransmitBmsData2+0x268>)
 800c1fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c200:	4618      	mov	r0, r3
 800c202:	f7f4 f971 	bl	80004e8 <__aeabi_i2d>
 800c206:	f04f 0200 	mov.w	r2, #0
 800c20a:	4b92      	ldr	r3, [pc, #584]	; (800c454 <VCU_TransmitBmsData2+0x26c>)
 800c20c:	f7f4 f9d6 	bl	80005bc <__aeabi_dmul>
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	4610      	mov	r0, r2
 800c216:	4619      	mov	r1, r3
 800c218:	f04f 0200 	mov.w	r2, #0
 800c21c:	f04f 0300 	mov.w	r3, #0
 800c220:	f7f4 f816 	bl	8000250 <__adddf3>
 800c224:	4602      	mov	r2, r0
 800c226:	460b      	mov	r3, r1
 800c228:	4610      	mov	r0, r2
 800c22a:	4619      	mov	r1, r3
 800c22c:	f7f4 fcbe 	bl	8000bac <__aeabi_d2f>
 800c230:	4603      	mov	r3, r0
 800c232:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_SOC_PERCENTAGE_FACTOR) - (VCU_SOC_PERCENTAGE_BASE/VCU_SOC_PERCENTAGE_FACTOR);
 800c234:	68f8      	ldr	r0, [r7, #12]
 800c236:	f7f4 f969 	bl	800050c <__aeabi_f2d>
 800c23a:	a381      	add	r3, pc, #516	; (adr r3, 800c440 <VCU_TransmitBmsData2+0x258>)
 800c23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c240:	f7f4 fae6 	bl	8000810 <__aeabi_ddiv>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4610      	mov	r0, r2
 800c24a:	4619      	mov	r1, r3
 800c24c:	f7f4 fcae 	bl	8000bac <__aeabi_d2f>
 800c250:	4603      	mov	r3, r0
 800c252:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_soc = vcuValue;
 800c254:	edd7 7a02 	vldr	s15, [r7, #8]
 800c258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c25c:	ee17 3a90 	vmov	r3, s15
 800c260:	b29b      	uxth	r3, r3
 800c262:	803b      	strh	r3, [r7, #0]

  //Avg Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellAvgVolt);
 800c264:	4b7a      	ldr	r3, [pc, #488]	; (800c450 <VCU_TransmitBmsData2+0x268>)
 800c266:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c268:	4618      	mov	r0, r3
 800c26a:	f7f4 f93d 	bl	80004e8 <__aeabi_i2d>
 800c26e:	a376      	add	r3, pc, #472	; (adr r3, 800c448 <VCU_TransmitBmsData2+0x260>)
 800c270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c274:	f7f4 f9a2 	bl	80005bc <__aeabi_dmul>
 800c278:	4602      	mov	r2, r0
 800c27a:	460b      	mov	r3, r1
 800c27c:	4610      	mov	r0, r2
 800c27e:	4619      	mov	r1, r3
 800c280:	f04f 0200 	mov.w	r2, #0
 800c284:	f04f 0300 	mov.w	r3, #0
 800c288:	f7f3 ffe2 	bl	8000250 <__adddf3>
 800c28c:	4602      	mov	r2, r0
 800c28e:	460b      	mov	r3, r1
 800c290:	4610      	mov	r0, r2
 800c292:	4619      	mov	r1, r3
 800c294:	f7f4 fc8a 	bl	8000bac <__aeabi_d2f>
 800c298:	4603      	mov	r3, r0
 800c29a:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_CELL_VOLTAGE_FACTOR- (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800c29c:	68f8      	ldr	r0, [r7, #12]
 800c29e:	f7f4 f935 	bl	800050c <__aeabi_f2d>
 800c2a2:	a369      	add	r3, pc, #420	; (adr r3, 800c448 <VCU_TransmitBmsData2+0x260>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f7f4 fab2 	bl	8000810 <__aeabi_ddiv>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	f7f4 fc7a 	bl	8000bac <__aeabi_d2f>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_avg_cell_volt = vcuValue;
 800c2bc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2c4:	ee17 3a90 	vmov	r3, s15
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	80fb      	strh	r3, [r7, #6]

  //High Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellHiVolt);
 800c2cc:	4b60      	ldr	r3, [pc, #384]	; (800c450 <VCU_TransmitBmsData2+0x268>)
 800c2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f7f4 f909 	bl	80004e8 <__aeabi_i2d>
 800c2d6:	a35c      	add	r3, pc, #368	; (adr r3, 800c448 <VCU_TransmitBmsData2+0x260>)
 800c2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2dc:	f7f4 f96e 	bl	80005bc <__aeabi_dmul>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	f04f 0200 	mov.w	r2, #0
 800c2ec:	f04f 0300 	mov.w	r3, #0
 800c2f0:	f7f3 ffae 	bl	8000250 <__adddf3>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4610      	mov	r0, r2
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	f7f4 fc56 	bl	8000bac <__aeabi_d2f>
 800c300:	4603      	mov	r3, r0
 800c302:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f7f4 f901 	bl	800050c <__aeabi_f2d>
 800c30a:	a34f      	add	r3, pc, #316	; (adr r3, 800c448 <VCU_TransmitBmsData2+0x260>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f4 fa7e 	bl	8000810 <__aeabi_ddiv>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	4610      	mov	r0, r2
 800c31a:	4619      	mov	r1, r3
 800c31c:	f7f4 fc46 	bl	8000bac <__aeabi_d2f>
 800c320:	4603      	mov	r3, r0
 800c322:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_high_cell_volt = vcuValue;
 800c324:	edd7 7a02 	vldr	s15, [r7, #8]
 800c328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c32c:	ee17 3a90 	vmov	r3, s15
 800c330:	b29b      	uxth	r3, r3
 800c332:	807b      	strh	r3, [r7, #2]

  //Low Cell Volt
  floatValue = CELL_VOLTAGE_BASE + (CELL_VOLTAGE_FACTOR * pack.cellLoVolt);
 800c334:	4b46      	ldr	r3, [pc, #280]	; (800c450 <VCU_TransmitBmsData2+0x268>)
 800c336:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c338:	4618      	mov	r0, r3
 800c33a:	f7f4 f8d5 	bl	80004e8 <__aeabi_i2d>
 800c33e:	a342      	add	r3, pc, #264	; (adr r3, 800c448 <VCU_TransmitBmsData2+0x260>)
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	f7f4 f93a 	bl	80005bc <__aeabi_dmul>
 800c348:	4602      	mov	r2, r0
 800c34a:	460b      	mov	r3, r1
 800c34c:	4610      	mov	r0, r2
 800c34e:	4619      	mov	r1, r3
 800c350:	f04f 0200 	mov.w	r2, #0
 800c354:	f04f 0300 	mov.w	r3, #0
 800c358:	f7f3 ff7a 	bl	8000250 <__adddf3>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4610      	mov	r0, r2
 800c362:	4619      	mov	r1, r3
 800c364:	f7f4 fc22 	bl	8000bac <__aeabi_d2f>
 800c368:	4603      	mov	r3, r0
 800c36a:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CELL_VOLTAGE_FACTOR) - (VCU_CELL_VOLTAGE_BASE/VCU_CELL_VOLTAGE_FACTOR);
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f7f4 f8cd 	bl	800050c <__aeabi_f2d>
 800c372:	a335      	add	r3, pc, #212	; (adr r3, 800c448 <VCU_TransmitBmsData2+0x260>)
 800c374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c378:	f7f4 fa4a 	bl	8000810 <__aeabi_ddiv>
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4610      	mov	r0, r2
 800c382:	4619      	mov	r1, r3
 800c384:	f7f4 fc12 	bl	8000bac <__aeabi_d2f>
 800c388:	4603      	mov	r3, r0
 800c38a:	60bb      	str	r3, [r7, #8]
  bmsData2.bms_low_cell_volt = vcuValue;
 800c38c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c390:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c394:	ee17 3a90 	vmov	r3, s15
 800c398:	b29b      	uxth	r3, r3
 800c39a:	80bb      	strh	r3, [r7, #4]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c39c:	4b2e      	ldr	r3, [pc, #184]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c3a2:	4b2d      	ldr	r3, [pc, #180]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c3a8:	4b2b      	ldr	r3, [pc, #172]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData2, sizeof(bmsData2));
 800c3ae:	4b2b      	ldr	r3, [pc, #172]	; (800c45c <VCU_TransmitBmsData2+0x274>)
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	463b      	mov	r3, r7
 800c3b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c3b8:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_2 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c3bc:	4b24      	ldr	r3, [pc, #144]	; (800c450 <VCU_TransmitBmsData2+0x268>)
 800c3be:	895b      	ldrh	r3, [r3, #10]
 800c3c0:	f203 4322 	addw	r3, r3, #1058	; 0x422
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3ca:	b299      	uxth	r1, r3
 800c3cc:	4a22      	ldr	r2, [pc, #136]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c3ce:	8813      	ldrh	r3, [r2, #0]
 800c3d0:	f361 030a 	bfi	r3, r1, #0, #11
 800c3d4:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c3d6:	4a20      	ldr	r2, [pc, #128]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c3d8:	6813      	ldr	r3, [r2, #0]
 800c3da:	f36f 23dc 	bfc	r3, #11, #18
 800c3de:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c3e0:	4a1d      	ldr	r2, [pc, #116]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c3e2:	7913      	ldrb	r3, [r2, #4]
 800c3e4:	f36f 1386 	bfc	r3, #6, #1
 800c3e8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c3ea:	4a1b      	ldr	r2, [pc, #108]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c3ec:	7913      	ldrb	r3, [r2, #4]
 800c3ee:	2108      	movs	r1, #8
 800c3f0:	f361 0303 	bfi	r3, r1, #0, #4
 800c3f4:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c3f6:	4a18      	ldr	r2, [pc, #96]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c3f8:	7913      	ldrb	r3, [r2, #4]
 800c3fa:	f36f 13c7 	bfc	r3, #7, #1
 800c3fe:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c400:	4a15      	ldr	r2, [pc, #84]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c402:	7913      	ldrb	r3, [r2, #4]
 800c404:	f36f 1304 	bfc	r3, #4, #1
 800c408:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_2",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c40a:	4b15      	ldr	r3, [pc, #84]	; (800c460 <VCU_TransmitBmsData2+0x278>)
 800c40c:	781b      	ldrb	r3, [r3, #0]
 800c40e:	f003 0304 	and.w	r3, r3, #4
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00c      	beq.n	800c430 <VCU_TransmitBmsData2+0x248>
 800c416:	4b10      	ldr	r3, [pc, #64]	; (800c458 <VCU_TransmitBmsData2+0x270>)
 800c418:	881b      	ldrh	r3, [r3, #0]
 800c41a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c41e:	b29b      	uxth	r3, r3
 800c420:	461a      	mov	r2, r3
 800c422:	4910      	ldr	r1, [pc, #64]	; (800c464 <VCU_TransmitBmsData2+0x27c>)
 800c424:	4810      	ldr	r0, [pc, #64]	; (800c468 <VCU_TransmitBmsData2+0x280>)
 800c426:	f008 f935 	bl	8014694 <siprintf>
 800c42a:	480f      	ldr	r0, [pc, #60]	; (800c468 <VCU_TransmitBmsData2+0x280>)
 800c42c:	f7f9 f8ec 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c430:	2000      	movs	r0, #0
 800c432:	f7ff f931 	bl	800b698 <VCU_TransmitMessageQueue>
}
 800c436:	bf00      	nop
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	9999999a 	.word	0x9999999a
 800c444:	3f599999 	.word	0x3f599999
 800c448:	d2f1a9fc 	.word	0xd2f1a9fc
 800c44c:	3f50624d 	.word	0x3f50624d
 800c450:	2000a66c 	.word	0x2000a66c
 800c454:	3fe00000 	.word	0x3fe00000
 800c458:	2000a6cc 	.word	0x2000a6cc
 800c45c:	2000a6d8 	.word	0x2000a6d8
 800c460:	2000000c 	.word	0x2000000c
 800c464:	08018ec0 	.word	0x08018ec0
 800c468:	20000b64 	.word	0x20000b64
 800c46c:	00000000 	.word	0x00000000

0800c470 <VCU_TransmitBmsData3>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 3                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData3(void){
 800c470:	b580      	push	{r7, lr}
 800c472:	b084      	sub	sp, #16
 800c474:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_temp              : 16; // 32-47  0.03125    -273     0       1774.96875    Degrees Celcius   The average temperature level of all cells
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x423_BMS_DATA_3 bmsData3;

  float   floatValue  = 0;
 800c476:	f04f 0300 	mov.w	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c47c:	f04f 0300 	mov.w	r3, #0
 800c480:	60bb      	str	r3, [r7, #8]

  //Average Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellAvgTemp);
 800c482:	4b89      	ldr	r3, [pc, #548]	; (800c6a8 <VCU_TransmitBmsData3+0x238>)
 800c484:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c486:	4618      	mov	r0, r3
 800c488:	f7f4 f82e 	bl	80004e8 <__aeabi_i2d>
 800c48c:	a380      	add	r3, pc, #512	; (adr r3, 800c690 <VCU_TransmitBmsData3+0x220>)
 800c48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c492:	f7f4 f893 	bl	80005bc <__aeabi_dmul>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	4610      	mov	r0, r2
 800c49c:	4619      	mov	r1, r3
 800c49e:	a37e      	add	r3, pc, #504	; (adr r3, 800c698 <VCU_TransmitBmsData3+0x228>)
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	f7f3 fed2 	bl	800024c <__aeabi_dsub>
 800c4a8:	4602      	mov	r2, r0
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	f7f4 fb7c 	bl	8000bac <__aeabi_d2f>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800c4b8:	68f8      	ldr	r0, [r7, #12]
 800c4ba:	f7f4 f827 	bl	800050c <__aeabi_f2d>
 800c4be:	f04f 0200 	mov.w	r2, #0
 800c4c2:	4b7a      	ldr	r3, [pc, #488]	; (800c6ac <VCU_TransmitBmsData3+0x23c>)
 800c4c4:	f7f4 f9a4 	bl	8000810 <__aeabi_ddiv>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	460b      	mov	r3, r1
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	a373      	add	r3, pc, #460	; (adr r3, 800c6a0 <VCU_TransmitBmsData3+0x230>)
 800c4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d6:	f7f3 febb 	bl	8000250 <__adddf3>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4610      	mov	r0, r2
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f7f4 fb63 	bl	8000bac <__aeabi_d2f>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_avg_cell_temp = vcuValue;
 800c4ea:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c4f2:	ee17 3a90 	vmov	r3, s15
 800c4f6:	b29b      	uxth	r3, r3
 800c4f8:	80bb      	strh	r3, [r7, #4]

  //High Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellHiTemp);
 800c4fa:	4b6b      	ldr	r3, [pc, #428]	; (800c6a8 <VCU_TransmitBmsData3+0x238>)
 800c4fc:	8bdb      	ldrh	r3, [r3, #30]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7f3 fff2 	bl	80004e8 <__aeabi_i2d>
 800c504:	a362      	add	r3, pc, #392	; (adr r3, 800c690 <VCU_TransmitBmsData3+0x220>)
 800c506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50a:	f7f4 f857 	bl	80005bc <__aeabi_dmul>
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4610      	mov	r0, r2
 800c514:	4619      	mov	r1, r3
 800c516:	a360      	add	r3, pc, #384	; (adr r3, 800c698 <VCU_TransmitBmsData3+0x228>)
 800c518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c51c:	f7f3 fe96 	bl	800024c <__aeabi_dsub>
 800c520:	4602      	mov	r2, r0
 800c522:	460b      	mov	r3, r1
 800c524:	4610      	mov	r0, r2
 800c526:	4619      	mov	r1, r3
 800c528:	f7f4 fb40 	bl	8000bac <__aeabi_d2f>
 800c52c:	4603      	mov	r3, r0
 800c52e:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800c530:	68f8      	ldr	r0, [r7, #12]
 800c532:	f7f3 ffeb 	bl	800050c <__aeabi_f2d>
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	4b5c      	ldr	r3, [pc, #368]	; (800c6ac <VCU_TransmitBmsData3+0x23c>)
 800c53c:	f7f4 f968 	bl	8000810 <__aeabi_ddiv>
 800c540:	4602      	mov	r2, r0
 800c542:	460b      	mov	r3, r1
 800c544:	4610      	mov	r0, r2
 800c546:	4619      	mov	r1, r3
 800c548:	a355      	add	r3, pc, #340	; (adr r3, 800c6a0 <VCU_TransmitBmsData3+0x230>)
 800c54a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54e:	f7f3 fe7f 	bl	8000250 <__adddf3>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	4610      	mov	r0, r2
 800c558:	4619      	mov	r1, r3
 800c55a:	f7f4 fb27 	bl	8000bac <__aeabi_d2f>
 800c55e:	4603      	mov	r3, r0
 800c560:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_high_cell_temp = vcuValue;
 800c562:	edd7 7a02 	vldr	s15, [r7, #8]
 800c566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c56a:	ee17 3a90 	vmov	r3, s15
 800c56e:	b29b      	uxth	r3, r3
 800c570:	803b      	strh	r3, [r7, #0]

  //Low Cell Temperature
  floatValue = TEMPERATURE_BASE + (TEMPERATURE_FACTOR * pack.cellLoTemp);
 800c572:	4b4d      	ldr	r3, [pc, #308]	; (800c6a8 <VCU_TransmitBmsData3+0x238>)
 800c574:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800c576:	4618      	mov	r0, r3
 800c578:	f7f3 ffb6 	bl	80004e8 <__aeabi_i2d>
 800c57c:	a344      	add	r3, pc, #272	; (adr r3, 800c690 <VCU_TransmitBmsData3+0x220>)
 800c57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c582:	f7f4 f81b 	bl	80005bc <__aeabi_dmul>
 800c586:	4602      	mov	r2, r0
 800c588:	460b      	mov	r3, r1
 800c58a:	4610      	mov	r0, r2
 800c58c:	4619      	mov	r1, r3
 800c58e:	a342      	add	r3, pc, #264	; (adr r3, 800c698 <VCU_TransmitBmsData3+0x228>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	f7f3 fe5a 	bl	800024c <__aeabi_dsub>
 800c598:	4602      	mov	r2, r0
 800c59a:	460b      	mov	r3, r1
 800c59c:	4610      	mov	r0, r2
 800c59e:	4619      	mov	r1, r3
 800c5a0:	f7f4 fb04 	bl	8000bac <__aeabi_d2f>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	60fb      	str	r3, [r7, #12]
  vcuValue = floatValue/VCU_TEMPERATURE_FACTOR - (VCU_TEMPERATURE_BASE/VCU_TEMPERATURE_FACTOR);
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f7f3 ffaf 	bl	800050c <__aeabi_f2d>
 800c5ae:	f04f 0200 	mov.w	r2, #0
 800c5b2:	4b3e      	ldr	r3, [pc, #248]	; (800c6ac <VCU_TransmitBmsData3+0x23c>)
 800c5b4:	f7f4 f92c 	bl	8000810 <__aeabi_ddiv>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	4610      	mov	r0, r2
 800c5be:	4619      	mov	r1, r3
 800c5c0:	a337      	add	r3, pc, #220	; (adr r3, 800c6a0 <VCU_TransmitBmsData3+0x230>)
 800c5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c6:	f7f3 fe43 	bl	8000250 <__adddf3>
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	460b      	mov	r3, r1
 800c5ce:	4610      	mov	r0, r2
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	f7f4 faeb 	bl	8000bac <__aeabi_d2f>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	60bb      	str	r3, [r7, #8]
  bmsData3.bms_low_cell_temp = vcuValue;
 800c5da:	edd7 7a02 	vldr	s15, [r7, #8]
 800c5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c5e2:	ee17 3a90 	vmov	r3, s15
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	807b      	strh	r3, [r7, #2]

  bmsData3.UNUSED_48_63 = 0;
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c5ee:	4b30      	ldr	r3, [pc, #192]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c5f4:	4b2e      	ldr	r3, [pc, #184]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c5fa:	4b2d      	ldr	r3, [pc, #180]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData3, sizeof(bmsData3));
 800c600:	4b2c      	ldr	r3, [pc, #176]	; (800c6b4 <VCU_TransmitBmsData3+0x244>)
 800c602:	461a      	mov	r2, r3
 800c604:	463b      	mov	r3, r7
 800c606:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c60a:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_3 +  pack.vcuCanOffset;  // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c60e:	4b26      	ldr	r3, [pc, #152]	; (800c6a8 <VCU_TransmitBmsData3+0x238>)
 800c610:	895b      	ldrh	r3, [r3, #10]
 800c612:	f203 4323 	addw	r3, r3, #1059	; 0x423
 800c616:	b29b      	uxth	r3, r3
 800c618:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c61c:	b299      	uxth	r1, r3
 800c61e:	4a24      	ldr	r2, [pc, #144]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c620:	8813      	ldrh	r3, [r2, #0]
 800c622:	f361 030a 	bfi	r3, r1, #0, #11
 800c626:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                               // Extended ID
 800c628:	4a21      	ldr	r2, [pc, #132]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c62a:	6813      	ldr	r3, [r2, #0]
 800c62c:	f36f 23dc 	bfc	r3, #11, #18
 800c630:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c632:	4a1f      	ldr	r2, [pc, #124]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c634:	7913      	ldrb	r3, [r2, #4]
 800c636:	f36f 1386 	bfc	r3, #6, #1
 800c63a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c63c:	4a1c      	ldr	r2, [pc, #112]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c63e:	7913      	ldrb	r3, [r2, #4]
 800c640:	2108      	movs	r1, #8
 800c642:	f361 0303 	bfi	r3, r1, #0, #4
 800c646:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c648:	4a19      	ldr	r2, [pc, #100]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c64a:	7913      	ldrb	r3, [r2, #4]
 800c64c:	f36f 13c7 	bfc	r3, #7, #1
 800c650:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c652:	4a17      	ldr	r2, [pc, #92]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c654:	7913      	ldrb	r3, [r2, #4]
 800c656:	f36f 1304 	bfc	r3, #4, #1
 800c65a:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_3",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c65c:	4b16      	ldr	r3, [pc, #88]	; (800c6b8 <VCU_TransmitBmsData3+0x248>)
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	f003 0304 	and.w	r3, r3, #4
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00c      	beq.n	800c682 <VCU_TransmitBmsData3+0x212>
 800c668:	4b11      	ldr	r3, [pc, #68]	; (800c6b0 <VCU_TransmitBmsData3+0x240>)
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c670:	b29b      	uxth	r3, r3
 800c672:	461a      	mov	r2, r3
 800c674:	4911      	ldr	r1, [pc, #68]	; (800c6bc <VCU_TransmitBmsData3+0x24c>)
 800c676:	4812      	ldr	r0, [pc, #72]	; (800c6c0 <VCU_TransmitBmsData3+0x250>)
 800c678:	f008 f80c 	bl	8014694 <siprintf>
 800c67c:	4810      	ldr	r0, [pc, #64]	; (800c6c0 <VCU_TransmitBmsData3+0x250>)
 800c67e:	f7f8 ffc3 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c682:	2000      	movs	r0, #0
 800c684:	f7ff f808 	bl	800b698 <VCU_TransmitMessageQueue>
}
 800c688:	bf00      	nop
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}
 800c690:	47ae147b 	.word	0x47ae147b
 800c694:	3f847ae1 	.word	0x3f847ae1
 800c698:	cccccccd 	.word	0xcccccccd
 800c69c:	404baccc 	.word	0x404baccc
 800c6a0:	00000000 	.word	0x00000000
 800c6a4:	40c11000 	.word	0x40c11000
 800c6a8:	2000a66c 	.word	0x2000a66c
 800c6ac:	3fa00000 	.word	0x3fa00000
 800c6b0:	2000a6cc 	.word	0x2000a6cc
 800c6b4:	2000a6d8 	.word	0x2000a6d8
 800c6b8:	2000000c 	.word	0x2000000c
 800c6bc:	08018edc 	.word	0x08018edc
 800c6c0:	20000b64 	.word	0x20000b64
 800c6c4:	00000000 	.word	0x00000000

0800c6c8 <VCU_TransmitBmsData5>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t B m s D a t a 5                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData5(void){
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b084      	sub	sp, #16
 800c6cc:	af00      	add	r7, sp, #0
 // uint32_t bms_charge_end_voltage_limit   : 16; // 32-47  0.05       0        0       3276.75       Volts    The maximum permissable voltage at end of charge
 // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x425_BMS_DATA_5 bmsData5;

  float   floatValue  = 0;
 800c6ce:	f04f 0300 	mov.w	r3, #0
 800c6d2:	60fb      	str	r3, [r7, #12]
  float   vcuValue    = 0;
 800c6d4:	f04f 0300 	mov.w	r3, #0
 800c6d8:	60bb      	str	r3, [r7, #8]

  //bms_charge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxChargeA);
 800c6da:	4b83      	ldr	r3, [pc, #524]	; (800c8e8 <VCU_TransmitBmsData5+0x220>)
 800c6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7f3 fef2 	bl	80004c8 <__aeabi_ui2d>
 800c6e4:	a37c      	add	r3, pc, #496	; (adr r3, 800c8d8 <VCU_TransmitBmsData5+0x210>)
 800c6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ea:	f7f3 ff67 	bl	80005bc <__aeabi_dmul>
 800c6ee:	4602      	mov	r2, r0
 800c6f0:	460b      	mov	r3, r1
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	f04f 0200 	mov.w	r2, #0
 800c6fa:	4b7c      	ldr	r3, [pc, #496]	; (800c8ec <VCU_TransmitBmsData5+0x224>)
 800c6fc:	f7f3 fda6 	bl	800024c <__aeabi_dsub>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4610      	mov	r0, r2
 800c706:	4619      	mov	r1, r3
 800c708:	f7f4 fa50 	bl	8000bac <__aeabi_d2f>
 800c70c:	4603      	mov	r3, r0
 800c70e:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f7f3 fefb 	bl	800050c <__aeabi_f2d>
 800c716:	a370      	add	r3, pc, #448	; (adr r3, 800c8d8 <VCU_TransmitBmsData5+0x210>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	f7f4 f878 	bl	8000810 <__aeabi_ddiv>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4610      	mov	r0, r2
 800c726:	4619      	mov	r1, r3
 800c728:	f04f 0200 	mov.w	r2, #0
 800c72c:	4b70      	ldr	r3, [pc, #448]	; (800c8f0 <VCU_TransmitBmsData5+0x228>)
 800c72e:	f7f3 fd8f 	bl	8000250 <__adddf3>
 800c732:	4602      	mov	r2, r0
 800c734:	460b      	mov	r3, r1
 800c736:	4610      	mov	r0, r2
 800c738:	4619      	mov	r1, r3
 800c73a:	f7f4 fa37 	bl	8000bac <__aeabi_d2f>
 800c73e:	4603      	mov	r3, r0
 800c740:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_limit = vcuValue;
 800c742:	edd7 7a02 	vldr	s15, [r7, #8]
 800c746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c74a:	ee17 3a90 	vmov	r3, s15
 800c74e:	b29b      	uxth	r3, r3
 800c750:	807b      	strh	r3, [r7, #2]

  //bms_discharge_limit
  floatValue = PACK_CURRENT_BASE + (PACK_CURRENT_FACTOR * pack.maxDischargeA);
 800c752:	4b65      	ldr	r3, [pc, #404]	; (800c8e8 <VCU_TransmitBmsData5+0x220>)
 800c754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c756:	4618      	mov	r0, r3
 800c758:	f7f3 feb6 	bl	80004c8 <__aeabi_ui2d>
 800c75c:	a35e      	add	r3, pc, #376	; (adr r3, 800c8d8 <VCU_TransmitBmsData5+0x210>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	f7f3 ff2b 	bl	80005bc <__aeabi_dmul>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4610      	mov	r0, r2
 800c76c:	4619      	mov	r1, r3
 800c76e:	f04f 0200 	mov.w	r2, #0
 800c772:	4b5e      	ldr	r3, [pc, #376]	; (800c8ec <VCU_TransmitBmsData5+0x224>)
 800c774:	f7f3 fd6a 	bl	800024c <__aeabi_dsub>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	4610      	mov	r0, r2
 800c77e:	4619      	mov	r1, r3
 800c780:	f7f4 fa14 	bl	8000bac <__aeabi_d2f>
 800c784:	4603      	mov	r3, r0
 800c786:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_CURRENT_FACTOR) - (VCU_CURRENT_BASE/VCU_CURRENT_FACTOR);
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7f3 febf 	bl	800050c <__aeabi_f2d>
 800c78e:	a352      	add	r3, pc, #328	; (adr r3, 800c8d8 <VCU_TransmitBmsData5+0x210>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f4 f83c 	bl	8000810 <__aeabi_ddiv>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	4610      	mov	r0, r2
 800c79e:	4619      	mov	r1, r3
 800c7a0:	f04f 0200 	mov.w	r2, #0
 800c7a4:	4b52      	ldr	r3, [pc, #328]	; (800c8f0 <VCU_TransmitBmsData5+0x228>)
 800c7a6:	f7f3 fd53 	bl	8000250 <__adddf3>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4610      	mov	r0, r2
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	f7f4 f9fb 	bl	8000bac <__aeabi_d2f>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_dischage_limit = vcuValue;
 800c7ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800c7be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7c2:	ee17 3a90 	vmov	r3, s15
 800c7c6:	b29b      	uxth	r3, r3
 800c7c8:	803b      	strh	r3, [r7, #0]

  //bms_charge_end_voltage_limit
  floatValue = MODULE_VOLTAGE_BASE + (MODULE_VOLTAGE_FACTOR * pack.maxChargeEndV);
 800c7ca:	4b47      	ldr	r3, [pc, #284]	; (800c8e8 <VCU_TransmitBmsData5+0x220>)
 800c7cc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7f3 fe8a 	bl	80004e8 <__aeabi_i2d>
 800c7d4:	a342      	add	r3, pc, #264	; (adr r3, 800c8e0 <VCU_TransmitBmsData5+0x218>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	f7f3 feef 	bl	80005bc <__aeabi_dmul>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4610      	mov	r0, r2
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	f04f 0200 	mov.w	r2, #0
 800c7ea:	f04f 0300 	mov.w	r3, #0
 800c7ee:	f7f3 fd2f 	bl	8000250 <__adddf3>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	f7f4 f9d7 	bl	8000bac <__aeabi_d2f>
 800c7fe:	4603      	mov	r3, r0
 800c800:	60fb      	str	r3, [r7, #12]
  vcuValue = (floatValue/VCU_VOLTAGE_FACTOR) - (VCU_VOLTAGE_BASE/VCU_VOLTAGE_FACTOR);
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f7f3 fe82 	bl	800050c <__aeabi_f2d>
 800c808:	a333      	add	r3, pc, #204	; (adr r3, 800c8d8 <VCU_TransmitBmsData5+0x210>)
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f7f3 ffff 	bl	8000810 <__aeabi_ddiv>
 800c812:	4602      	mov	r2, r0
 800c814:	460b      	mov	r3, r1
 800c816:	4610      	mov	r0, r2
 800c818:	4619      	mov	r1, r3
 800c81a:	f7f4 f9c7 	bl	8000bac <__aeabi_d2f>
 800c81e:	4603      	mov	r3, r0
 800c820:	60bb      	str	r3, [r7, #8]
  bmsData5.bms_charge_end_voltage_limit = vcuValue;
 800c822:	edd7 7a02 	vldr	s15, [r7, #8]
 800c826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c82a:	ee17 3a90 	vmov	r3, s15
 800c82e:	b29b      	uxth	r3, r3
 800c830:	80bb      	strh	r3, [r7, #4]

  bmsData5.UNUSED_48_63 = 0;
 800c832:	2300      	movs	r3, #0
 800c834:	80fb      	strh	r3, [r7, #6]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c836:	4b2f      	ldr	r3, [pc, #188]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c838:	2200      	movs	r2, #0
 800c83a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c83c:	4b2d      	ldr	r3, [pc, #180]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c83e:	2200      	movs	r2, #0
 800c840:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c842:	4b2c      	ldr	r3, [pc, #176]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c844:	2200      	movs	r2, #0
 800c846:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData5, sizeof(bmsData5));
 800c848:	4b2b      	ldr	r3, [pc, #172]	; (800c8f8 <VCU_TransmitBmsData5+0x230>)
 800c84a:	461a      	mov	r2, r3
 800c84c:	463b      	mov	r3, r7
 800c84e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c852:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_5 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c856:	4b24      	ldr	r3, [pc, #144]	; (800c8e8 <VCU_TransmitBmsData5+0x220>)
 800c858:	895b      	ldrh	r3, [r3, #10]
 800c85a:	f203 4325 	addw	r3, r3, #1061	; 0x425
 800c85e:	b29b      	uxth	r3, r3
 800c860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c864:	b299      	uxth	r1, r3
 800c866:	4a23      	ldr	r2, [pc, #140]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c868:	8813      	ldrh	r3, [r2, #0]
 800c86a:	f361 030a 	bfi	r3, r1, #0, #11
 800c86e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c870:	4a20      	ldr	r2, [pc, #128]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c872:	6813      	ldr	r3, [r2, #0]
 800c874:	f36f 23dc 	bfc	r3, #11, #18
 800c878:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c87a:	4a1e      	ldr	r2, [pc, #120]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c87c:	7913      	ldrb	r3, [r2, #4]
 800c87e:	f36f 1386 	bfc	r3, #6, #1
 800c882:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c884:	4a1b      	ldr	r2, [pc, #108]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c886:	7913      	ldrb	r3, [r2, #4]
 800c888:	2108      	movs	r1, #8
 800c88a:	f361 0303 	bfi	r3, r1, #0, #4
 800c88e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c890:	4a18      	ldr	r2, [pc, #96]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c892:	7913      	ldrb	r3, [r2, #4]
 800c894:	f36f 13c7 	bfc	r3, #7, #1
 800c898:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c89a:	4a16      	ldr	r2, [pc, #88]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c89c:	7913      	ldrb	r3, [r2, #4]
 800c89e:	f36f 1304 	bfc	r3, #4, #1
 800c8a2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_5",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c8a4:	4b15      	ldr	r3, [pc, #84]	; (800c8fc <VCU_TransmitBmsData5+0x234>)
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	f003 0304 	and.w	r3, r3, #4
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d00c      	beq.n	800c8ca <VCU_TransmitBmsData5+0x202>
 800c8b0:	4b10      	ldr	r3, [pc, #64]	; (800c8f4 <VCU_TransmitBmsData5+0x22c>)
 800c8b2:	881b      	ldrh	r3, [r3, #0]
 800c8b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	4910      	ldr	r1, [pc, #64]	; (800c900 <VCU_TransmitBmsData5+0x238>)
 800c8be:	4811      	ldr	r0, [pc, #68]	; (800c904 <VCU_TransmitBmsData5+0x23c>)
 800c8c0:	f007 fee8 	bl	8014694 <siprintf>
 800c8c4:	480f      	ldr	r0, [pc, #60]	; (800c904 <VCU_TransmitBmsData5+0x23c>)
 800c8c6:	f7f8 fe9f 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c8ca:	2000      	movs	r0, #0
 800c8cc:	f7fe fee4 	bl	800b698 <VCU_TransmitMessageQueue>
}
 800c8d0:	bf00      	nop
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	9999999a 	.word	0x9999999a
 800c8dc:	3fa99999 	.word	0x3fa99999
 800c8e0:	eb851eb8 	.word	0xeb851eb8
 800c8e4:	3f8eb851 	.word	0x3f8eb851
 800c8e8:	2000a66c 	.word	0x2000a66c
 800c8ec:	40990000 	.word	0x40990000
 800c8f0:	40df4000 	.word	0x40df4000
 800c8f4:	2000a6cc 	.word	0x2000a6cc
 800c8f8:	2000a6d8 	.word	0x2000a6d8
 800c8fc:	2000000c 	.word	0x2000000c
 800c900:	08018ef8 	.word	0x08018ef8
 800c904:	20000b64 	.word	0x20000b64

0800c908 <VCU_TransmitBmsData8>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 8                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData8(void){
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
  // uint32_t bms_avg_cell_volt              : 16; // 32-39  0.001      0        0       65.535        Volts   The average cell voltage
  // uint32_t UNUSED_48_63                   : 16; // 48-63

  CANFRM_0x428_BMS_DATA_8 bmsData8;

  bmsData8.UNUSED_32_63       = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	607b      	str	r3, [r7, #4]
  bmsData8.bms_max_volt_cell  = 0;                  // TODO - implement this
 800c912:	2300      	movs	r3, #0
 800c914:	707b      	strb	r3, [r7, #1]
  bmsData8.bms_max_volt_mod   = pack.modCellHiVolt; // Module with highest cell voltage
 800c916:	4b2d      	ldr	r3, [pc, #180]	; (800c9cc <VCU_TransmitBmsData8+0xc4>)
 800c918:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800c91c:	703b      	strb	r3, [r7, #0]
  bmsData8.bms_min_volt_cell  = 0;                  // TODO - implement this
 800c91e:	2300      	movs	r3, #0
 800c920:	70fb      	strb	r3, [r7, #3]
  bmsData8.bms_min_volt_mod   = pack.modCellLoVolt; // Module with lowest cell voltage
 800c922:	4b2a      	ldr	r3, [pc, #168]	; (800c9cc <VCU_TransmitBmsData8+0xc4>)
 800c924:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800c928:	70bb      	strb	r3, [r7, #2]


  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800c92a:	4b29      	ldr	r3, [pc, #164]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800c930:	4b27      	ldr	r3, [pc, #156]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c932:	2200      	movs	r2, #0
 800c934:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800c936:	4b26      	ldr	r3, [pc, #152]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c938:	2200      	movs	r2, #0
 800c93a:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData8, sizeof(bmsData8));
 800c93c:	4b25      	ldr	r3, [pc, #148]	; (800c9d4 <VCU_TransmitBmsData8+0xcc>)
 800c93e:	461a      	mov	r2, r3
 800c940:	463b      	mov	r3, r7
 800c942:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c946:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_8 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800c94a:	4b20      	ldr	r3, [pc, #128]	; (800c9cc <VCU_TransmitBmsData8+0xc4>)
 800c94c:	895b      	ldrh	r3, [r3, #10]
 800c94e:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800c952:	b29b      	uxth	r3, r3
 800c954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c958:	b299      	uxth	r1, r3
 800c95a:	4a1d      	ldr	r2, [pc, #116]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c95c:	8813      	ldrh	r3, [r2, #0]
 800c95e:	f361 030a 	bfi	r3, r1, #0, #11
 800c962:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800c964:	4a1a      	ldr	r2, [pc, #104]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c966:	6813      	ldr	r3, [r2, #0]
 800c968:	f36f 23dc 	bfc	r3, #11, #18
 800c96c:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800c96e:	4a18      	ldr	r2, [pc, #96]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c970:	7913      	ldrb	r3, [r2, #4]
 800c972:	f36f 1386 	bfc	r3, #6, #1
 800c976:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800c978:	4a15      	ldr	r2, [pc, #84]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c97a:	7913      	ldrb	r3, [r2, #4]
 800c97c:	2108      	movs	r1, #8
 800c97e:	f361 0303 	bfi	r3, r1, #0, #4
 800c982:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800c984:	4a12      	ldr	r2, [pc, #72]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c986:	7913      	ldrb	r3, [r2, #4]
 800c988:	f36f 13c7 	bfc	r3, #7, #1
 800c98c:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800c98e:	4a10      	ldr	r2, [pc, #64]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c990:	7913      	ldrb	r3, [r2, #4]
 800c992:	f36f 1304 	bfc	r3, #4, #1
 800c996:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_8",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800c998:	4b0f      	ldr	r3, [pc, #60]	; (800c9d8 <VCU_TransmitBmsData8+0xd0>)
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	f003 0304 	and.w	r3, r3, #4
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d00c      	beq.n	800c9be <VCU_TransmitBmsData8+0xb6>
 800c9a4:	4b0a      	ldr	r3, [pc, #40]	; (800c9d0 <VCU_TransmitBmsData8+0xc8>)
 800c9a6:	881b      	ldrh	r3, [r3, #0]
 800c9a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c9ac:	b29b      	uxth	r3, r3
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	490a      	ldr	r1, [pc, #40]	; (800c9dc <VCU_TransmitBmsData8+0xd4>)
 800c9b2:	480b      	ldr	r0, [pc, #44]	; (800c9e0 <VCU_TransmitBmsData8+0xd8>)
 800c9b4:	f007 fe6e 	bl	8014694 <siprintf>
 800c9b8:	4809      	ldr	r0, [pc, #36]	; (800c9e0 <VCU_TransmitBmsData8+0xd8>)
 800c9ba:	f7f8 fe25 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800c9be:	2000      	movs	r0, #0
 800c9c0:	f7fe fe6a 	bl	800b698 <VCU_TransmitMessageQueue>
}
 800c9c4:	bf00      	nop
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	2000a66c 	.word	0x2000a66c
 800c9d0:	2000a6cc 	.word	0x2000a6cc
 800c9d4:	2000a6d8 	.word	0x2000a6d8
 800c9d8:	2000000c 	.word	0x2000000c
 800c9dc:	08018f14 	.word	0x08018f14
 800c9e0:	20000b64 	.word	0x20000b64

0800c9e4 <VCU_TransmitBmsData9>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 9                                      P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData9(void){
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b082      	sub	sp, #8
 800c9e8:	af00      	add	r7, sp, #0
  //  uint32_t bms_min_temp_cell              : 8;  // 24-31  1          0        0       255                       The number of the cell with lowest temperature, within the module
  //  uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x429_BMS_DATA_9 bmsData9;

  bmsData9.UNUSED_32_63       = 0;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	607b      	str	r3, [r7, #4]
  bmsData9.bms_max_temp_cell  = 0;                   // TODO - implement this
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	707b      	strb	r3, [r7, #1]
  bmsData9.bms_max_temp_mod   = pack.modCellHiTemp;  // Module with highest cell temperature
 800c9f2:	4b2d      	ldr	r3, [pc, #180]	; (800caa8 <VCU_TransmitBmsData9+0xc4>)
 800c9f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c9f8:	703b      	strb	r3, [r7, #0]
  bmsData9.bms_min_temp_cell  = 0;                   // TODO - implement this
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	70fb      	strb	r3, [r7, #3]
  bmsData9.bms_min_temp_mod   = pack.modCellLoTemp;  // Module with lowest cell temperature
 800c9fe:	4b2a      	ldr	r3, [pc, #168]	; (800caa8 <VCU_TransmitBmsData9+0xc4>)
 800ca00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca04:	70bb      	strb	r3, [r7, #2]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800ca06:	4b29      	ldr	r3, [pc, #164]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800ca0c:	4b27      	ldr	r3, [pc, #156]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800ca12:	4b26      	ldr	r3, [pc, #152]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData9, sizeof(bmsData9));
 800ca18:	4b25      	ldr	r3, [pc, #148]	; (800cab0 <VCU_TransmitBmsData9+0xcc>)
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	463b      	mov	r3, r7
 800ca1e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ca22:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_9 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800ca26:	4b20      	ldr	r3, [pc, #128]	; (800caa8 <VCU_TransmitBmsData9+0xc4>)
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	f203 4329 	addw	r3, r3, #1065	; 0x429
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca34:	b299      	uxth	r1, r3
 800ca36:	4a1d      	ldr	r2, [pc, #116]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca38:	8813      	ldrh	r3, [r2, #0]
 800ca3a:	f361 030a 	bfi	r3, r1, #0, #11
 800ca3e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800ca40:	4a1a      	ldr	r2, [pc, #104]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca42:	6813      	ldr	r3, [r2, #0]
 800ca44:	f36f 23dc 	bfc	r3, #11, #18
 800ca48:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ca4a:	4a18      	ldr	r2, [pc, #96]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca4c:	7913      	ldrb	r3, [r2, #4]
 800ca4e:	f36f 1386 	bfc	r3, #6, #1
 800ca52:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ca54:	4a15      	ldr	r2, [pc, #84]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca56:	7913      	ldrb	r3, [r2, #4]
 800ca58:	2108      	movs	r1, #8
 800ca5a:	f361 0303 	bfi	r3, r1, #0, #4
 800ca5e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ca60:	4a12      	ldr	r2, [pc, #72]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca62:	7913      	ldrb	r3, [r2, #4]
 800ca64:	f36f 13c7 	bfc	r3, #7, #1
 800ca68:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ca6a:	4a10      	ldr	r2, [pc, #64]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca6c:	7913      	ldrb	r3, [r2, #4]
 800ca6e:	f36f 1304 	bfc	r3, #4, #1
 800ca72:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_9",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ca74:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <VCU_TransmitBmsData9+0xd0>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f003 0304 	and.w	r3, r3, #4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d00c      	beq.n	800ca9a <VCU_TransmitBmsData9+0xb6>
 800ca80:	4b0a      	ldr	r3, [pc, #40]	; (800caac <VCU_TransmitBmsData9+0xc8>)
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ca88:	b29b      	uxth	r3, r3
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	490a      	ldr	r1, [pc, #40]	; (800cab8 <VCU_TransmitBmsData9+0xd4>)
 800ca8e:	480b      	ldr	r0, [pc, #44]	; (800cabc <VCU_TransmitBmsData9+0xd8>)
 800ca90:	f007 fe00 	bl	8014694 <siprintf>
 800ca94:	4809      	ldr	r0, [pc, #36]	; (800cabc <VCU_TransmitBmsData9+0xd8>)
 800ca96:	f7f8 fdb7 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	f7fe fdfc 	bl	800b698 <VCU_TransmitMessageQueue>

}
 800caa0:	bf00      	nop
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	2000a66c 	.word	0x2000a66c
 800caac:	2000a6cc 	.word	0x2000a6cc
 800cab0:	2000a6d8 	.word	0x2000a6d8
 800cab4:	2000000c 	.word	0x2000000c
 800cab8:	08018f30 	.word	0x08018f30
 800cabc:	20000b64 	.word	0x20000b64

0800cac0 <VCU_TransmitBmsData10>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t B m s D a t a 1 0                                    P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitBmsData10(void){
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b082      	sub	sp, #8
 800cac4:	af00      	add	r7, sp, #0
  // uint32_t UNUSED_16_31                   : 16; // 16-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  CANFRM_0x430_BMS_DATA_10 bmsData10;

  bmsData10.UNUSED_16_31        = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	807b      	strh	r3, [r7, #2]
  bmsData10.UNUSED_32_63        = 0;
 800caca:	2300      	movs	r3, #0
 800cacc:	607b      	str	r3, [r7, #4]
  bmsData10.bms_hv_bus_actv_iso = 0;  // TODO - implement this
 800cace:	2300      	movs	r3, #0
 800cad0:	803b      	strh	r3, [r7, #0]

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cad2:	4b28      	ldr	r3, [pc, #160]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800cad8:	4b26      	ldr	r3, [pc, #152]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cada:	2200      	movs	r2, #0
 800cadc:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800cade:	4b25      	ldr	r3, [pc, #148]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	609a      	str	r2, [r3, #8]

  memcpy(vcu_txd, &bmsData10, sizeof(bmsData10));
 800cae4:	4b24      	ldr	r3, [pc, #144]	; (800cb78 <VCU_TransmitBmsData10+0xb8>)
 800cae6:	461a      	mov	r2, r3
 800cae8:	463b      	mov	r3, r7
 800caea:	e893 0003 	ldmia.w	r3, {r0, r1}
 800caee:	e882 0003 	stmia.w	r2, {r0, r1}

  vcu_txObj.bF.id.SID = ID_BMS_DATA_10 +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800caf2:	4b22      	ldr	r3, [pc, #136]	; (800cb7c <VCU_TransmitBmsData10+0xbc>)
 800caf4:	895b      	ldrh	r3, [r3, #10]
 800caf6:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb00:	b299      	uxth	r1, r3
 800cb02:	4a1c      	ldr	r2, [pc, #112]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cb04:	8813      	ldrh	r3, [r2, #0]
 800cb06:	f361 030a 	bfi	r3, r1, #0, #11
 800cb0a:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cb0c:	4a19      	ldr	r2, [pc, #100]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cb0e:	6813      	ldr	r3, [r2, #0]
 800cb10:	f36f 23dc 	bfc	r3, #11, #18
 800cb14:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cb16:	4a17      	ldr	r2, [pc, #92]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cb18:	7913      	ldrb	r3, [r2, #4]
 800cb1a:	f36f 1386 	bfc	r3, #6, #1
 800cb1e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cb20:	4a14      	ldr	r2, [pc, #80]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cb22:	7913      	ldrb	r3, [r2, #4]
 800cb24:	2108      	movs	r1, #8
 800cb26:	f361 0303 	bfi	r3, r1, #0, #4
 800cb2a:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cb2c:	4a11      	ldr	r2, [pc, #68]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cb2e:	7913      	ldrb	r3, [r2, #4]
 800cb30:	f36f 13c7 	bfc	r3, #7, #1
 800cb34:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cb36:	4a0f      	ldr	r2, [pc, #60]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cb38:	7913      	ldrb	r3, [r2, #4]
 800cb3a:	f36f 1304 	bfc	r3, #4, #1
 800cb3e:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_DATA_10",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cb40:	4b0f      	ldr	r3, [pc, #60]	; (800cb80 <VCU_TransmitBmsData10+0xc0>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	f003 0304 	and.w	r3, r3, #4
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00c      	beq.n	800cb66 <VCU_TransmitBmsData10+0xa6>
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <VCU_TransmitBmsData10+0xb4>)
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cb54:	b29b      	uxth	r3, r3
 800cb56:	461a      	mov	r2, r3
 800cb58:	490a      	ldr	r1, [pc, #40]	; (800cb84 <VCU_TransmitBmsData10+0xc4>)
 800cb5a:	480b      	ldr	r0, [pc, #44]	; (800cb88 <VCU_TransmitBmsData10+0xc8>)
 800cb5c:	f007 fd9a 	bl	8014694 <siprintf>
 800cb60:	4809      	ldr	r0, [pc, #36]	; (800cb88 <VCU_TransmitBmsData10+0xc8>)
 800cb62:	f7f8 fd51 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cb66:	2000      	movs	r0, #0
 800cb68:	f7fe fd96 	bl	800b698 <VCU_TransmitMessageQueue>

}
 800cb6c:	bf00      	nop
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	2000a6cc 	.word	0x2000a6cc
 800cb78:	2000a6d8 	.word	0x2000a6d8
 800cb7c:	2000a66c 	.word	0x2000a66c
 800cb80:	2000000c 	.word	0x2000000c
 800cb84:	08018f4c 	.word	0x08018f4c
 800cb88:	20000b64 	.word	0x20000b64

0800cb8c <VCU_TransmitModuleState>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e S t a t e                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleState(void)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
  CANFRM_0x411_MODULE_STATE moduleState;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800cb92:	4b84      	ldr	r3, [pc, #528]	; (800cda4 <VCU_TransmitModuleState+0x218>)
 800cb94:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f7fd fded 	bl	800a778 <MCU_ModuleIndexFromId>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800cba2:	4b80      	ldr	r3, [pc, #512]	; (800cda4 <VCU_TransmitModuleState+0x218>)
 800cba4:	7d1b      	ldrb	r3, [r3, #20]
 800cba6:	7bfa      	ldrb	r2, [r7, #15]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	f000 80f7 	beq.w	800cd9c <VCU_TransmitModuleState+0x210>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleState - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleState.module_id                   = pack.dmcModuleId;
 800cbae:	4b7d      	ldr	r3, [pc, #500]	; (800cda4 <VCU_TransmitModuleState+0x218>)
 800cbb0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cbb4:	713b      	strb	r3, [r7, #4]
    moduleState.module_soc                  = module[moduleIndex].soc;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
 800cbb8:	4a7b      	ldr	r2, [pc, #492]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cbba:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cbbe:	fb01 f303 	mul.w	r3, r1, r3
 800cbc2:	4413      	add	r3, r2
 800cbc4:	332b      	adds	r3, #43	; 0x2b
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	723b      	strb	r3, [r7, #8]
    moduleState.module_state                = module[moduleIndex].currentState;
 800cbca:	7bfb      	ldrb	r3, [r7, #15]
 800cbcc:	4a76      	ldr	r2, [pc, #472]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cbce:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cbd2:	fb01 f303 	mul.w	r3, r1, r3
 800cbd6:	4413      	add	r3, r2
 800cbd8:	3327      	adds	r3, #39	; 0x27
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	f003 0303 	and.w	r3, r3, #3
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	797b      	ldrb	r3, [r7, #5]
 800cbe4:	f362 0301 	bfi	r3, r2, #0, #2
 800cbe8:	717b      	strb	r3, [r7, #5]
    moduleState.module_status               = module[moduleIndex].status;
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	4a6e      	ldr	r2, [pc, #440]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cbee:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cbf2:	fb01 f303 	mul.w	r3, r1, r3
 800cbf6:	4413      	add	r3, r2
 800cbf8:	3326      	adds	r3, #38	; 0x26
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	f003 0303 	and.w	r3, r3, #3
 800cc00:	b2da      	uxtb	r2, r3
 800cc02:	79bb      	ldrb	r3, [r7, #6]
 800cc04:	f362 0383 	bfi	r3, r2, #2, #2
 800cc08:	71bb      	strb	r3, [r7, #6]
    moduleState.module_soh                  = module[moduleIndex].soh;
 800cc0a:	7bfb      	ldrb	r3, [r7, #15]
 800cc0c:	4a66      	ldr	r2, [pc, #408]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cc0e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cc12:	fb01 f303 	mul.w	r3, r1, r3
 800cc16:	4413      	add	r3, r2
 800cc18:	332c      	adds	r3, #44	; 0x2c
 800cc1a:	781a      	ldrb	r2, [r3, #0]
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f362 2391 	bfi	r3, r2, #10, #8
 800cc22:	607b      	str	r3, [r7, #4]
    moduleState.module_fault_code           = module[moduleIndex].faultCode.commsError | module[moduleIndex].faultCode.hwIncompatible << 1 | module[moduleIndex].faultCode.overCurrent << 2 | module[moduleIndex].faultCode.overTemperature << 3 | module[moduleIndex].faultCode.overVoltage << 4;
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	4a60      	ldr	r2, [pc, #384]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cc28:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cc2c:	fb01 f303 	mul.w	r3, r1, r3
 800cc30:	4413      	add	r3, r2
 800cc32:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800cc36:	789b      	ldrb	r3, [r3, #2]
 800cc38:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800cc3c:	b2db      	uxtb	r3, r3
 800cc3e:	b25a      	sxtb	r2, r3
 800cc40:	7bfb      	ldrb	r3, [r7, #15]
 800cc42:	4959      	ldr	r1, [pc, #356]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cc44:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800cc48:	fb00 f303 	mul.w	r3, r0, r3
 800cc4c:	440b      	add	r3, r1
 800cc4e:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800cc52:	789b      	ldrb	r3, [r3, #2]
 800cc54:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	b25b      	sxtb	r3, r3
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	b25a      	sxtb	r2, r3
 800cc62:	7bfb      	ldrb	r3, [r7, #15]
 800cc64:	4950      	ldr	r1, [pc, #320]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cc66:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800cc6a:	fb00 f303 	mul.w	r3, r0, r3
 800cc6e:	440b      	add	r3, r1
 800cc70:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800cc74:	789b      	ldrb	r3, [r3, #2]
 800cc76:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	b25b      	sxtb	r3, r3
 800cc80:	4313      	orrs	r3, r2
 800cc82:	b25a      	sxtb	r2, r3
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	4948      	ldr	r1, [pc, #288]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800cc88:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800cc8c:	fb00 f303 	mul.w	r3, r0, r3
 800cc90:	440b      	add	r3, r1
 800cc92:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800cc96:	789b      	ldrb	r3, [r3, #2]
 800cc98:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800cc9c:	b2db      	uxtb	r3, r3
 800cc9e:	00db      	lsls	r3, r3, #3
 800cca0:	b25b      	sxtb	r3, r3
 800cca2:	4313      	orrs	r3, r2
 800cca4:	b25a      	sxtb	r2, r3
 800cca6:	7bfb      	ldrb	r3, [r7, #15]
 800cca8:	493f      	ldr	r1, [pc, #252]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800ccaa:	f240 40c4 	movw	r0, #1220	; 0x4c4
 800ccae:	fb00 f303 	mul.w	r3, r0, r3
 800ccb2:	440b      	add	r3, r1
 800ccb4:	f503 6398 	add.w	r3, r3, #1216	; 0x4c0
 800ccb8:	789b      	ldrb	r3, [r3, #2]
 800ccba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ccbe:	b2db      	uxtb	r3, r3
 800ccc0:	011b      	lsls	r3, r3, #4
 800ccc2:	b25b      	sxtb	r3, r3
 800ccc4:	4313      	orrs	r3, r2
 800ccc6:	b25b      	sxtb	r3, r3
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	88fb      	ldrh	r3, [r7, #6]
 800cccc:	f362 138d 	bfi	r3, r2, #6, #8
 800ccd0:	80fb      	strh	r3, [r7, #6]
    moduleState.module_cell_balance_active  = 0;
 800ccd2:	79bb      	ldrb	r3, [r7, #6]
 800ccd4:	f36f 1345 	bfc	r3, #5, #1
 800ccd8:	71bb      	strb	r3, [r7, #6]
    moduleState.module_cell_balance_status  = 0;
 800ccda:	79bb      	ldrb	r3, [r7, #6]
 800ccdc:	f36f 1304 	bfc	r3, #4, #1
 800cce0:	71bb      	strb	r3, [r7, #6]
    moduleState.module_count_total          = pack.moduleCount;
 800cce2:	4b30      	ldr	r3, [pc, #192]	; (800cda4 <VCU_TransmitModuleState+0x218>)
 800cce4:	7d1b      	ldrb	r3, [r3, #20]
 800cce6:	727b      	strb	r3, [r7, #9]
    moduleState.module_count_active         = pack.activeModules;
 800cce8:	4b2e      	ldr	r3, [pc, #184]	; (800cda4 <VCU_TransmitModuleState+0x218>)
 800ccea:	7ddb      	ldrb	r3, [r3, #23]
 800ccec:	72bb      	strb	r3, [r7, #10]
    moduleState.module_cell_count           = module[moduleIndex].cellCount;
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
 800ccf0:	4a2d      	ldr	r2, [pc, #180]	; (800cda8 <VCU_TransmitModuleState+0x21c>)
 800ccf2:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800ccf6:	fb01 f303 	mul.w	r3, r1, r3
 800ccfa:	4413      	add	r3, r2
 800ccfc:	332d      	adds	r3, #45	; 0x2d
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	72fb      	strb	r3, [r7, #11]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cd02:	4b2a      	ldr	r3, [pc, #168]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd04:	2200      	movs	r2, #0
 800cd06:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cd08:	4b28      	ldr	r3, [pc, #160]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cd0e:	4b27      	ldr	r3, [pc, #156]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd10:	2200      	movs	r2, #0
 800cd12:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleState, sizeof(moduleState));
 800cd14:	4b26      	ldr	r3, [pc, #152]	; (800cdb0 <VCU_TransmitModuleState+0x224>)
 800cd16:	461a      	mov	r2, r3
 800cd18:	1d3b      	adds	r3, r7, #4
 800cd1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cd1e:	e882 0003 	stmia.w	r2, {r0, r1}

    vcu_txObj.bF.id.SID = ID_MODULE_STATE + pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cd22:	4b20      	ldr	r3, [pc, #128]	; (800cda4 <VCU_TransmitModuleState+0x218>)
 800cd24:	895b      	ldrh	r3, [r3, #10]
 800cd26:	f203 4311 	addw	r3, r3, #1041	; 0x411
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd30:	b299      	uxth	r1, r3
 800cd32:	4a1e      	ldr	r2, [pc, #120]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd34:	8813      	ldrh	r3, [r2, #0]
 800cd36:	f361 030a 	bfi	r3, r1, #0, #11
 800cd3a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cd3c:	4a1b      	ldr	r2, [pc, #108]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd3e:	6813      	ldr	r3, [r2, #0]
 800cd40:	f36f 23dc 	bfc	r3, #11, #18
 800cd44:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cd46:	4a19      	ldr	r2, [pc, #100]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd48:	7913      	ldrb	r3, [r2, #4]
 800cd4a:	f36f 1386 	bfc	r3, #6, #1
 800cd4e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cd50:	4a16      	ldr	r2, [pc, #88]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd52:	7913      	ldrb	r3, [r2, #4]
 800cd54:	2108      	movs	r1, #8
 800cd56:	f361 0303 	bfi	r3, r1, #0, #4
 800cd5a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cd5c:	4a13      	ldr	r2, [pc, #76]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd5e:	7913      	ldrb	r3, [r2, #4]
 800cd60:	f36f 13c7 	bfc	r3, #7, #1
 800cd64:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cd66:	4a11      	ldr	r2, [pc, #68]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd68:	7913      	ldrb	r3, [r2, #4]
 800cd6a:	f36f 1304 	bfc	r3, #4, #1
 800cd6e:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_STATE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cd70:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <VCU_TransmitModuleState+0x228>)
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	f003 0304 	and.w	r3, r3, #4
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00c      	beq.n	800cd96 <VCU_TransmitModuleState+0x20a>
 800cd7c:	4b0b      	ldr	r3, [pc, #44]	; (800cdac <VCU_TransmitModuleState+0x220>)
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	461a      	mov	r2, r3
 800cd88:	490b      	ldr	r1, [pc, #44]	; (800cdb8 <VCU_TransmitModuleState+0x22c>)
 800cd8a:	480c      	ldr	r0, [pc, #48]	; (800cdbc <VCU_TransmitModuleState+0x230>)
 800cd8c:	f007 fc82 	bl	8014694 <siprintf>
 800cd90:	480a      	ldr	r0, [pc, #40]	; (800cdbc <VCU_TransmitModuleState+0x230>)
 800cd92:	f7f8 fc39 	bl	8005608 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cd96:	2000      	movs	r0, #0
 800cd98:	f7fe fc7e 	bl	800b698 <VCU_TransmitMessageQueue>
  }
}
 800cd9c:	bf00      	nop
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	2000a66c 	.word	0x2000a66c
 800cda8:	20000dec 	.word	0x20000dec
 800cdac:	2000a6cc 	.word	0x2000a6cc
 800cdb0:	2000a6d8 	.word	0x2000a6d8
 800cdb4:	2000000c 	.word	0x2000000c
 800cdb8:	08018f68 	.word	0x08018f68
 800cdbc:	20000b64 	.word	0x20000b64

0800cdc0 <VCU_TransmitModulePower>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e P o w e r                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModulePower(void)
{
 800cdc0:	b590      	push	{r4, r7, lr}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
  CANFRM_0x412_MODULE_POWER modulePower;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800cdc6:	4b3d      	ldr	r3, [pc, #244]	; (800cebc <VCU_TransmitModulePower+0xfc>)
 800cdc8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fd fcd3 	bl	800a778 <MCU_ModuleIndexFromId>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800cdd6:	4b39      	ldr	r3, [pc, #228]	; (800cebc <VCU_TransmitModulePower+0xfc>)
 800cdd8:	7d1b      	ldrb	r3, [r3, #20]
 800cdda:	7bfa      	ldrb	r2, [r7, #15]
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d069      	beq.n	800ceb4 <VCU_TransmitModulePower+0xf4>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModulePower - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    modulePower.module_id       = pack.dmcModuleId;
 800cde0:	4b36      	ldr	r3, [pc, #216]	; (800cebc <VCU_TransmitModulePower+0xfc>)
 800cde2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cde6:	703b      	strb	r3, [r7, #0]
    modulePower.module_current  = module[moduleIndex].mmc;
 800cde8:	7bfb      	ldrb	r3, [r7, #15]
 800cdea:	4a35      	ldr	r2, [pc, #212]	; (800cec0 <VCU_TransmitModulePower+0x100>)
 800cdec:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cdf0:	fb01 f303 	mul.w	r3, r1, r3
 800cdf4:	4413      	add	r3, r2
 800cdf6:	3316      	adds	r3, #22
 800cdf8:	881b      	ldrh	r3, [r3, #0]
 800cdfa:	80bb      	strh	r3, [r7, #4]
    modulePower.module_voltage  = module[moduleIndex].mmv;
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
 800cdfe:	4a30      	ldr	r2, [pc, #192]	; (800cec0 <VCU_TransmitModulePower+0x100>)
 800ce00:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800ce04:	fb01 f303 	mul.w	r3, r1, r3
 800ce08:	4413      	add	r3, r2
 800ce0a:	3314      	adds	r3, #20
 800ce0c:	881b      	ldrh	r3, [r3, #0]
 800ce0e:	f8a7 3001 	strh.w	r3, [r7, #1]
    modulePower.UNUSED_40_63    = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	813b      	strh	r3, [r7, #8]
 800ce16:	2300      	movs	r3, #0
 800ce18:	72bb      	strb	r3, [r7, #10]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800ce1a:	4b2a      	ldr	r3, [pc, #168]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800ce20:	4b28      	ldr	r3, [pc, #160]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce22:	2200      	movs	r2, #0
 800ce24:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800ce26:	4b27      	ldr	r3, [pc, #156]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &modulePower, sizeof(modulePower));
 800ce2c:	4b26      	ldr	r3, [pc, #152]	; (800cec8 <VCU_TransmitModulePower+0x108>)
 800ce2e:	461c      	mov	r4, r3
 800ce30:	463b      	mov	r3, r7
 800ce32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ce36:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_POWER +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800ce3a:	4b20      	ldr	r3, [pc, #128]	; (800cebc <VCU_TransmitModulePower+0xfc>)
 800ce3c:	895b      	ldrh	r3, [r3, #10]
 800ce3e:	f203 4312 	addw	r3, r3, #1042	; 0x412
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce48:	b299      	uxth	r1, r3
 800ce4a:	4a1e      	ldr	r2, [pc, #120]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce4c:	8813      	ldrh	r3, [r2, #0]
 800ce4e:	f361 030a 	bfi	r3, r1, #0, #11
 800ce52:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800ce54:	4a1b      	ldr	r2, [pc, #108]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce56:	6813      	ldr	r3, [r2, #0]
 800ce58:	f36f 23dc 	bfc	r3, #11, #18
 800ce5c:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800ce5e:	4a19      	ldr	r2, [pc, #100]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce60:	7913      	ldrb	r3, [r2, #4]
 800ce62:	f36f 1386 	bfc	r3, #6, #1
 800ce66:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800ce68:	4a16      	ldr	r2, [pc, #88]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce6a:	7913      	ldrb	r3, [r2, #4]
 800ce6c:	2108      	movs	r1, #8
 800ce6e:	f361 0303 	bfi	r3, r1, #0, #4
 800ce72:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800ce74:	4a13      	ldr	r2, [pc, #76]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce76:	7913      	ldrb	r3, [r2, #4]
 800ce78:	f36f 13c7 	bfc	r3, #7, #1
 800ce7c:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800ce7e:	4a11      	ldr	r2, [pc, #68]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce80:	7913      	ldrb	r3, [r2, #4]
 800ce82:	f36f 1304 	bfc	r3, #4, #1
 800ce86:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_POWER",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800ce88:	4b10      	ldr	r3, [pc, #64]	; (800cecc <VCU_TransmitModulePower+0x10c>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	f003 0304 	and.w	r3, r3, #4
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d00c      	beq.n	800ceae <VCU_TransmitModulePower+0xee>
 800ce94:	4b0b      	ldr	r3, [pc, #44]	; (800cec4 <VCU_TransmitModulePower+0x104>)
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	461a      	mov	r2, r3
 800cea0:	490b      	ldr	r1, [pc, #44]	; (800ced0 <VCU_TransmitModulePower+0x110>)
 800cea2:	480c      	ldr	r0, [pc, #48]	; (800ced4 <VCU_TransmitModulePower+0x114>)
 800cea4:	f007 fbf6 	bl	8014694 <siprintf>
 800cea8:	480a      	ldr	r0, [pc, #40]	; (800ced4 <VCU_TransmitModulePower+0x114>)
 800ceaa:	f7f8 fbad 	bl	8005608 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800ceae:	2000      	movs	r0, #0
 800ceb0:	f7fe fbf2 	bl	800b698 <VCU_TransmitMessageQueue>
  }
}
 800ceb4:	bf00      	nop
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd90      	pop	{r4, r7, pc}
 800cebc:	2000a66c 	.word	0x2000a66c
 800cec0:	20000dec 	.word	0x20000dec
 800cec4:	2000a6cc 	.word	0x2000a6cc
 800cec8:	2000a6d8 	.word	0x2000a6d8
 800cecc:	2000000c 	.word	0x2000000c
 800ced0:	08018f84 	.word	0x08018f84
 800ced4:	20000b64 	.word	0x20000b64

0800ced8 <VCU_TransmitModuleCellVoltage>:

/***************************************************************************************************************
*    V C U _ T r a n s m i t M o d u l e C e l l V o l t a g e                     P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellVoltage(void)
{
 800ced8:	b590      	push	{r4, r7, lr}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
  CANFRM_0x413_MODULE_CELL_VOLTAGE moduleCellVoltage;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800cede:	4b41      	ldr	r3, [pc, #260]	; (800cfe4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800cee0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fd fc47 	bl	800a778 <MCU_ModuleIndexFromId>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800ceee:	4b3d      	ldr	r3, [pc, #244]	; (800cfe4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800cef0:	7d1b      	ldrb	r3, [r3, #20]
 800cef2:	7bfa      	ldrb	r2, [r7, #15]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d071      	beq.n	800cfdc <VCU_TransmitModuleCellVoltage+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellVoltage - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellVoltage.module_id             = pack.dmcModuleId;
 800cef8:	4b3a      	ldr	r3, [pc, #232]	; (800cfe4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800cefa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800cefe:	703b      	strb	r3, [r7, #0]
    moduleCellVoltage.module_avg_cell_volt  = module[moduleIndex].cellAvgVolt;
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
 800cf02:	4a39      	ldr	r2, [pc, #228]	; (800cfe8 <VCU_TransmitModuleCellVoltage+0x110>)
 800cf04:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cf08:	fb01 f303 	mul.w	r3, r1, r3
 800cf0c:	4413      	add	r3, r2
 800cf0e:	3322      	adds	r3, #34	; 0x22
 800cf10:	881b      	ldrh	r3, [r3, #0]
 800cf12:	80fb      	strh	r3, [r7, #6]
    moduleCellVoltage.module_high_cell_volt = module[moduleIndex].cellHiVolt;
 800cf14:	7bfb      	ldrb	r3, [r7, #15]
 800cf16:	4a34      	ldr	r2, [pc, #208]	; (800cfe8 <VCU_TransmitModuleCellVoltage+0x110>)
 800cf18:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cf1c:	fb01 f303 	mul.w	r3, r1, r3
 800cf20:	4413      	add	r3, r2
 800cf22:	331e      	adds	r3, #30
 800cf24:	881b      	ldrh	r3, [r3, #0]
 800cf26:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellVoltage.module_low_cell_volt  = module[moduleIndex].cellLoVolt;
 800cf2a:	7bfb      	ldrb	r3, [r7, #15]
 800cf2c:	4a2e      	ldr	r2, [pc, #184]	; (800cfe8 <VCU_TransmitModuleCellVoltage+0x110>)
 800cf2e:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800cf32:	fb01 f303 	mul.w	r3, r1, r3
 800cf36:	4413      	add	r3, r2
 800cf38:	3320      	adds	r3, #32
 800cf3a:	881b      	ldrh	r3, [r3, #0]
 800cf3c:	80bb      	strh	r3, [r7, #4]
    moduleCellVoltage.UNUSED_56_63          = 0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800cf42:	4b2a      	ldr	r3, [pc, #168]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800cf48:	4b28      	ldr	r3, [pc, #160]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800cf4e:	4b27      	ldr	r3, [pc, #156]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellVoltage, sizeof(moduleCellVoltage));
 800cf54:	4b26      	ldr	r3, [pc, #152]	; (800cff0 <VCU_TransmitModuleCellVoltage+0x118>)
 800cf56:	461c      	mov	r4, r3
 800cf58:	463b      	mov	r3, r7
 800cf5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_VOLTAGE +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800cf62:	4b20      	ldr	r3, [pc, #128]	; (800cfe4 <VCU_TransmitModuleCellVoltage+0x10c>)
 800cf64:	895b      	ldrh	r3, [r3, #10]
 800cf66:	f203 4313 	addw	r3, r3, #1043	; 0x413
 800cf6a:	b29b      	uxth	r3, r3
 800cf6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cf70:	b299      	uxth	r1, r3
 800cf72:	4a1e      	ldr	r2, [pc, #120]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf74:	8813      	ldrh	r3, [r2, #0]
 800cf76:	f361 030a 	bfi	r3, r1, #0, #11
 800cf7a:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800cf7c:	4a1b      	ldr	r2, [pc, #108]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf7e:	6813      	ldr	r3, [r2, #0]
 800cf80:	f36f 23dc 	bfc	r3, #11, #18
 800cf84:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800cf86:	4a19      	ldr	r2, [pc, #100]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf88:	7913      	ldrb	r3, [r2, #4]
 800cf8a:	f36f 1386 	bfc	r3, #6, #1
 800cf8e:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800cf90:	4a16      	ldr	r2, [pc, #88]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf92:	7913      	ldrb	r3, [r2, #4]
 800cf94:	2108      	movs	r1, #8
 800cf96:	f361 0303 	bfi	r3, r1, #0, #4
 800cf9a:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800cf9c:	4a13      	ldr	r2, [pc, #76]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cf9e:	7913      	ldrb	r3, [r2, #4]
 800cfa0:	f36f 13c7 	bfc	r3, #7, #1
 800cfa4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800cfa6:	4a11      	ldr	r2, [pc, #68]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cfa8:	7913      	ldrb	r3, [r2, #4]
 800cfaa:	f36f 1304 	bfc	r3, #4, #1
 800cfae:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_VOLTAGE",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800cfb0:	4b10      	ldr	r3, [pc, #64]	; (800cff4 <VCU_TransmitModuleCellVoltage+0x11c>)
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f003 0304 	and.w	r3, r3, #4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d00c      	beq.n	800cfd6 <VCU_TransmitModuleCellVoltage+0xfe>
 800cfbc:	4b0b      	ldr	r3, [pc, #44]	; (800cfec <VCU_TransmitModuleCellVoltage+0x114>)
 800cfbe:	881b      	ldrh	r3, [r3, #0]
 800cfc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	461a      	mov	r2, r3
 800cfc8:	490b      	ldr	r1, [pc, #44]	; (800cff8 <VCU_TransmitModuleCellVoltage+0x120>)
 800cfca:	480c      	ldr	r0, [pc, #48]	; (800cffc <VCU_TransmitModuleCellVoltage+0x124>)
 800cfcc:	f007 fb62 	bl	8014694 <siprintf>
 800cfd0:	480a      	ldr	r0, [pc, #40]	; (800cffc <VCU_TransmitModuleCellVoltage+0x124>)
 800cfd2:	f7f8 fb19 	bl	8005608 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800cfd6:	2000      	movs	r0, #0
 800cfd8:	f7fe fb5e 	bl	800b698 <VCU_TransmitMessageQueue>
  }
}
 800cfdc:	bf00      	nop
 800cfde:	3714      	adds	r7, #20
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd90      	pop	{r4, r7, pc}
 800cfe4:	2000a66c 	.word	0x2000a66c
 800cfe8:	20000dec 	.word	0x20000dec
 800cfec:	2000a6cc 	.word	0x2000a6cc
 800cff0:	2000a6d8 	.word	0x2000a6d8
 800cff4:	2000000c 	.word	0x2000000c
 800cff8:	08018fa0 	.word	0x08018fa0
 800cffc:	20000b64 	.word	0x20000b64

0800d000 <VCU_TransmitModuleCellTemp>:

/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e C e l l T e m p                          P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleCellTemp(void)
{
 800d000:	b590      	push	{r4, r7, lr}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
  CANFRM_0x414_MODULE_CELL_TEMP moduleCellTemp;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d006:	4b41      	ldr	r3, [pc, #260]	; (800d10c <VCU_TransmitModuleCellTemp+0x10c>)
 800d008:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d00c:	4618      	mov	r0, r3
 800d00e:	f7fd fbb3 	bl	800a778 <MCU_ModuleIndexFromId>
 800d012:	4603      	mov	r3, r0
 800d014:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d016:	4b3d      	ldr	r3, [pc, #244]	; (800d10c <VCU_TransmitModuleCellTemp+0x10c>)
 800d018:	7d1b      	ldrb	r3, [r3, #20]
 800d01a:	7bfa      	ldrb	r2, [r7, #15]
 800d01c:	429a      	cmp	r2, r3
 800d01e:	d071      	beq.n	800d104 <VCU_TransmitModuleCellTemp+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleCellTemp - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    // No conversions necessary - VCU uses the same module voltage/current/temperature/percentage base and factor as the module.
    moduleCellTemp.module_id             = pack.dmcModuleId;
 800d020:	4b3a      	ldr	r3, [pc, #232]	; (800d10c <VCU_TransmitModuleCellTemp+0x10c>)
 800d022:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d026:	703b      	strb	r3, [r7, #0]
    moduleCellTemp.module_avg_cell_temp  = module[moduleIndex].cellAvgTemp;
 800d028:	7bfb      	ldrb	r3, [r7, #15]
 800d02a:	4a39      	ldr	r2, [pc, #228]	; (800d110 <VCU_TransmitModuleCellTemp+0x110>)
 800d02c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800d030:	fb01 f303 	mul.w	r3, r1, r3
 800d034:	4413      	add	r3, r2
 800d036:	331c      	adds	r3, #28
 800d038:	881b      	ldrh	r3, [r3, #0]
 800d03a:	80fb      	strh	r3, [r7, #6]
    moduleCellTemp.module_high_cell_temp = module[moduleIndex].cellHiTemp;
 800d03c:	7bfb      	ldrb	r3, [r7, #15]
 800d03e:	4a34      	ldr	r2, [pc, #208]	; (800d110 <VCU_TransmitModuleCellTemp+0x110>)
 800d040:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800d044:	fb01 f303 	mul.w	r3, r1, r3
 800d048:	4413      	add	r3, r2
 800d04a:	3318      	adds	r3, #24
 800d04c:	881b      	ldrh	r3, [r3, #0]
 800d04e:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleCellTemp.module_low_cell_temp  = module[moduleIndex].cellLoTemp;
 800d052:	7bfb      	ldrb	r3, [r7, #15]
 800d054:	4a2e      	ldr	r2, [pc, #184]	; (800d110 <VCU_TransmitModuleCellTemp+0x110>)
 800d056:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800d05a:	fb01 f303 	mul.w	r3, r1, r3
 800d05e:	4413      	add	r3, r2
 800d060:	331a      	adds	r3, #26
 800d062:	881b      	ldrh	r3, [r3, #0]
 800d064:	80bb      	strh	r3, [r7, #4]
    moduleCellTemp.UNUSED_56_63          = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d06a:	4b2a      	ldr	r3, [pc, #168]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d06c:	2200      	movs	r2, #0
 800d06e:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d070:	4b28      	ldr	r3, [pc, #160]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d072:	2200      	movs	r2, #0
 800d074:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d076:	4b27      	ldr	r3, [pc, #156]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d078:	2200      	movs	r2, #0
 800d07a:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleCellTemp, sizeof(moduleCellTemp));
 800d07c:	4b26      	ldr	r3, [pc, #152]	; (800d118 <VCU_TransmitModuleCellTemp+0x118>)
 800d07e:	461c      	mov	r4, r3
 800d080:	463b      	mov	r3, r7
 800d082:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d086:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_CELL_TEMP +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d08a:	4b20      	ldr	r3, [pc, #128]	; (800d10c <VCU_TransmitModuleCellTemp+0x10c>)
 800d08c:	895b      	ldrh	r3, [r3, #10]
 800d08e:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800d092:	b29b      	uxth	r3, r3
 800d094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d098:	b299      	uxth	r1, r3
 800d09a:	4a1e      	ldr	r2, [pc, #120]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d09c:	8813      	ldrh	r3, [r2, #0]
 800d09e:	f361 030a 	bfi	r3, r1, #0, #11
 800d0a2:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d0a4:	4a1b      	ldr	r2, [pc, #108]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d0a6:	6813      	ldr	r3, [r2, #0]
 800d0a8:	f36f 23dc 	bfc	r3, #11, #18
 800d0ac:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d0ae:	4a19      	ldr	r2, [pc, #100]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d0b0:	7913      	ldrb	r3, [r2, #4]
 800d0b2:	f36f 1386 	bfc	r3, #6, #1
 800d0b6:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d0b8:	4a16      	ldr	r2, [pc, #88]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d0ba:	7913      	ldrb	r3, [r2, #4]
 800d0bc:	2108      	movs	r1, #8
 800d0be:	f361 0303 	bfi	r3, r1, #0, #4
 800d0c2:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d0c4:	4a13      	ldr	r2, [pc, #76]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d0c6:	7913      	ldrb	r3, [r2, #4]
 800d0c8:	f36f 13c7 	bfc	r3, #7, #1
 800d0cc:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d0ce:	4a11      	ldr	r2, [pc, #68]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d0d0:	7913      	ldrb	r3, [r2, #4]
 800d0d2:	f36f 1304 	bfc	r3, #4, #1
 800d0d6:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_CELL_TEMP",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d0d8:	4b10      	ldr	r3, [pc, #64]	; (800d11c <VCU_TransmitModuleCellTemp+0x11c>)
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 0304 	and.w	r3, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00c      	beq.n	800d0fe <VCU_TransmitModuleCellTemp+0xfe>
 800d0e4:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <VCU_TransmitModuleCellTemp+0x114>)
 800d0e6:	881b      	ldrh	r3, [r3, #0]
 800d0e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	461a      	mov	r2, r3
 800d0f0:	490b      	ldr	r1, [pc, #44]	; (800d120 <VCU_TransmitModuleCellTemp+0x120>)
 800d0f2:	480c      	ldr	r0, [pc, #48]	; (800d124 <VCU_TransmitModuleCellTemp+0x124>)
 800d0f4:	f007 face 	bl	8014694 <siprintf>
 800d0f8:	480a      	ldr	r0, [pc, #40]	; (800d124 <VCU_TransmitModuleCellTemp+0x124>)
 800d0fa:	f7f8 fa85 	bl	8005608 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d0fe:	2000      	movs	r0, #0
 800d100:	f7fe faca 	bl	800b698 <VCU_TransmitMessageQueue>
  }
}
 800d104:	bf00      	nop
 800d106:	3714      	adds	r7, #20
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd90      	pop	{r4, r7, pc}
 800d10c:	2000a66c 	.word	0x2000a66c
 800d110:	20000dec 	.word	0x20000dec
 800d114:	2000a6cc 	.word	0x2000a6cc
 800d118:	2000a6d8 	.word	0x2000a6d8
 800d11c:	2000000c 	.word	0x2000000c
 800d120:	08018fc4 	.word	0x08018fc4
 800d124:	20000b64 	.word	0x20000b64

0800d128 <VCU_TransmitModuleLimits>:
}
/***************************************************************************************************************
*     V C U _ T r a n s m i t M o d u l e L i m i t s                              P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_TransmitModuleLimits(void)
{
 800d128:	b590      	push	{r4, r7, lr}
 800d12a:	b085      	sub	sp, #20
 800d12c:	af00      	add	r7, sp, #0
  CANFRM_0x416_MODULE_LIMITS moduleLimits;

  uint8_t moduleIndex = MCU_ModuleIndexFromId(pack.dmcModuleId);
 800d12e:	4b41      	ldr	r3, [pc, #260]	; (800d234 <VCU_TransmitModuleLimits+0x10c>)
 800d130:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d134:	4618      	mov	r0, r3
 800d136:	f7fd fb1f 	bl	800a778 <MCU_ModuleIndexFromId>
 800d13a:	4603      	mov	r3, r0
 800d13c:	73fb      	strb	r3, [r7, #15]
  if (moduleIndex == pack.moduleCount){
 800d13e:	4b3d      	ldr	r3, [pc, #244]	; (800d234 <VCU_TransmitModuleLimits+0x10c>)
 800d140:	7d1b      	ldrb	r3, [r3, #20]
 800d142:	7bfa      	ldrb	r2, [r7, #15]
 800d144:	429a      	cmp	r2, r3
 800d146:	d071      	beq.n	800d22c <VCU_TransmitModuleLimits+0x104>
    // Invalid module Id
    if(debugLevel &  DBG_VCU & DBG_ERRORS) {sprintf(tempBuffer,"VCU TX ERROR - VCU_TransmitModuleLimits - Invalid ID 0x%02x", pack.dmcModuleId); serialOut(tempBuffer);}
  } else {

    moduleLimits.module_id                        = pack.dmcModuleId;
 800d148:	4b3a      	ldr	r3, [pc, #232]	; (800d234 <VCU_TransmitModuleLimits+0x10c>)
 800d14a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800d14e:	703b      	strb	r3, [r7, #0]
    moduleLimits.module_charge_end_voltage_limit  = module[moduleIndex].maxChargeEndV;
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	4a39      	ldr	r2, [pc, #228]	; (800d238 <VCU_TransmitModuleLimits+0x110>)
 800d154:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800d158:	fb01 f303 	mul.w	r3, r1, r3
 800d15c:	4413      	add	r3, r2
 800d15e:	3312      	adds	r3, #18
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	80fb      	strh	r3, [r7, #6]
    moduleLimits.module_charge_limit              = module[moduleIndex].maxChargeA;
 800d164:	7bfb      	ldrb	r3, [r7, #15]
 800d166:	4a34      	ldr	r2, [pc, #208]	; (800d238 <VCU_TransmitModuleLimits+0x110>)
 800d168:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800d16c:	fb01 f303 	mul.w	r3, r1, r3
 800d170:	4413      	add	r3, r2
 800d172:	330e      	adds	r3, #14
 800d174:	881b      	ldrh	r3, [r3, #0]
 800d176:	80bb      	strh	r3, [r7, #4]
    moduleLimits.module_dischage_limit            = module[moduleIndex].maxDischargeA;
 800d178:	7bfb      	ldrb	r3, [r7, #15]
 800d17a:	4a2f      	ldr	r2, [pc, #188]	; (800d238 <VCU_TransmitModuleLimits+0x110>)
 800d17c:	f240 41c4 	movw	r1, #1220	; 0x4c4
 800d180:	fb01 f303 	mul.w	r3, r1, r3
 800d184:	4413      	add	r3, r2
 800d186:	3310      	adds	r3, #16
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	f8a7 3001 	strh.w	r3, [r7, #1]
    moduleLimits.UNUSED_56_63                     = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	723b      	strb	r3, [r7, #8]

    // clear bit fields
    vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d192:	4b2a      	ldr	r3, [pc, #168]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d194:	2200      	movs	r2, #0
 800d196:	601a      	str	r2, [r3, #0]
    vcu_txObj.word[1] = 0;
 800d198:	4b28      	ldr	r3, [pc, #160]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d19a:	2200      	movs	r2, #0
 800d19c:	605a      	str	r2, [r3, #4]
    vcu_txObj.word[2] = 0;
 800d19e:	4b27      	ldr	r3, [pc, #156]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	609a      	str	r2, [r3, #8]

    memcpy(vcu_txd, &moduleLimits, sizeof(moduleLimits));
 800d1a4:	4b26      	ldr	r3, [pc, #152]	; (800d240 <VCU_TransmitModuleLimits+0x118>)
 800d1a6:	461c      	mov	r4, r3
 800d1a8:	463b      	mov	r3, r7
 800d1aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d1ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

    vcu_txObj.bF.id.SID = ID_MODULE_LIMITS +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d1b2:	4b20      	ldr	r3, [pc, #128]	; (800d234 <VCU_TransmitModuleLimits+0x10c>)
 800d1b4:	895b      	ldrh	r3, [r3, #10]
 800d1b6:	f203 4316 	addw	r3, r3, #1046	; 0x416
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d1c0:	b299      	uxth	r1, r3
 800d1c2:	4a1e      	ldr	r2, [pc, #120]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d1c4:	8813      	ldrh	r3, [r2, #0]
 800d1c6:	f361 030a 	bfi	r3, r1, #0, #11
 800d1ca:	8013      	strh	r3, [r2, #0]
    vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d1cc:	4a1b      	ldr	r2, [pc, #108]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d1ce:	6813      	ldr	r3, [r2, #0]
 800d1d0:	f36f 23dc 	bfc	r3, #11, #18
 800d1d4:	6013      	str	r3, [r2, #0]

    vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d1d6:	4a19      	ldr	r2, [pc, #100]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d1d8:	7913      	ldrb	r3, [r2, #4]
 800d1da:	f36f 1386 	bfc	r3, #6, #1
 800d1de:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d1e0:	4a16      	ldr	r2, [pc, #88]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d1e2:	7913      	ldrb	r3, [r2, #4]
 800d1e4:	2108      	movs	r1, #8
 800d1e6:	f361 0303 	bfi	r3, r1, #0, #4
 800d1ea:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d1ec:	4a13      	ldr	r2, [pc, #76]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d1ee:	7913      	ldrb	r3, [r2, #4]
 800d1f0:	f36f 13c7 	bfc	r3, #7, #1
 800d1f4:	7113      	strb	r3, [r2, #4]
    vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d1f6:	4a11      	ldr	r2, [pc, #68]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d1f8:	7913      	ldrb	r3, [r2, #4]
 800d1fa:	f36f 1304 	bfc	r3, #4, #1
 800d1fe:	7113      	strb	r3, [r2, #4]

    if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x MODULE_LIMITS",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d200:	4b10      	ldr	r3, [pc, #64]	; (800d244 <VCU_TransmitModuleLimits+0x11c>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	f003 0304 	and.w	r3, r3, #4
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d00c      	beq.n	800d226 <VCU_TransmitModuleLimits+0xfe>
 800d20c:	4b0b      	ldr	r3, [pc, #44]	; (800d23c <VCU_TransmitModuleLimits+0x114>)
 800d20e:	881b      	ldrh	r3, [r3, #0]
 800d210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d214:	b29b      	uxth	r3, r3
 800d216:	461a      	mov	r2, r3
 800d218:	490b      	ldr	r1, [pc, #44]	; (800d248 <VCU_TransmitModuleLimits+0x120>)
 800d21a:	480c      	ldr	r0, [pc, #48]	; (800d24c <VCU_TransmitModuleLimits+0x124>)
 800d21c:	f007 fa3a 	bl	8014694 <siprintf>
 800d220:	480a      	ldr	r0, [pc, #40]	; (800d24c <VCU_TransmitModuleLimits+0x124>)
 800d222:	f7f8 f9f1 	bl	8005608 <serialOut>

    VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d226:	2000      	movs	r0, #0
 800d228:	f7fe fa36 	bl	800b698 <VCU_TransmitMessageQueue>
  }

}
 800d22c:	bf00      	nop
 800d22e:	3714      	adds	r7, #20
 800d230:	46bd      	mov	sp, r7
 800d232:	bd90      	pop	{r4, r7, pc}
 800d234:	2000a66c 	.word	0x2000a66c
 800d238:	20000dec 	.word	0x20000dec
 800d23c:	2000a6cc 	.word	0x2000a6cc
 800d240:	2000a6d8 	.word	0x2000a6d8
 800d244:	2000000c 	.word	0x2000000c
 800d248:	08018fe4 	.word	0x08018fe4
 800d24c:	20000b64 	.word	0x20000b64

0800d250 <VCU_RequestTime>:


/***************************************************************************************************************
*     V C U _ R e q u e s t T i m e                                                P A C K   C O N T R O L L E R
***************************************************************************************************************/
void VCU_RequestTime(void){
 800d250:	b580      	push	{r7, lr}
 800d252:	af00      	add	r7, sp, #0
  // 0x440 BMS_REQUEST_TIME          8 bytes : Bits          Factor     Offset   Min     Max           Unit
  // uint32_t UNUSED_00_31                   : 32; // 00-31
  // uint32_t UNUSED_32_63                   : 32; // 32-63

  // clear bit fields
  vcu_txObj.word[0] = 0;                              // Configure transmit message
 800d254:	4b23      	ldr	r3, [pc, #140]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
  vcu_txObj.word[1] = 0;
 800d25a:	4b22      	ldr	r3, [pc, #136]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	605a      	str	r2, [r3, #4]
  vcu_txObj.word[2] = 0;
 800d260:	4b20      	ldr	r3, [pc, #128]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d262:	2200      	movs	r2, #0
 800d264:	609a      	str	r2, [r3, #8]

  vcu_txObj.bF.id.SID = ID_BMS_TIME_REQUEST +  pack.vcuCanOffset;   // Standard ID + 0x000 for pack 0, +0x100 for pack 1
 800d266:	4b20      	ldr	r3, [pc, #128]	; (800d2e8 <VCU_RequestTime+0x98>)
 800d268:	895b      	ldrh	r3, [r3, #10]
 800d26a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d26e:	b29b      	uxth	r3, r3
 800d270:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d274:	b299      	uxth	r1, r3
 800d276:	4a1b      	ldr	r2, [pc, #108]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d278:	8813      	ldrh	r3, [r2, #0]
 800d27a:	f361 030a 	bfi	r3, r1, #0, #11
 800d27e:	8013      	strh	r3, [r2, #0]
  vcu_txObj.bF.id.EID = 0   ;                         // Extended ID
 800d280:	4a18      	ldr	r2, [pc, #96]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	f36f 23dc 	bfc	r3, #11, #18
 800d288:	6013      	str	r3, [r2, #0]

  vcu_txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 800d28a:	4a16      	ldr	r2, [pc, #88]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d28c:	7913      	ldrb	r3, [r2, #4]
 800d28e:	f36f 1386 	bfc	r3, #6, #1
 800d292:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800d294:	4a13      	ldr	r2, [pc, #76]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d296:	7913      	ldrb	r3, [r2, #4]
 800d298:	2108      	movs	r1, #8
 800d29a:	f361 0303 	bfi	r3, r1, #0, #4
 800d29e:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800d2a0:	4a10      	ldr	r2, [pc, #64]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d2a2:	7913      	ldrb	r3, [r2, #4]
 800d2a4:	f36f 13c7 	bfc	r3, #7, #1
 800d2a8:	7113      	strb	r3, [r2, #4]
  vcu_txObj.bF.ctrl.IDE = 0;                          // ID Extension selection - send base frame when cleared, extended frame when set
 800d2aa:	4a0e      	ldr	r2, [pc, #56]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d2ac:	7913      	ldrb	r3, [r2, #4]
 800d2ae:	f36f 1304 	bfc	r3, #4, #1
 800d2b2:	7113      	strb	r3, [r2, #4]

  if(debugLevel &  DBG_VCU) {sprintf(tempBuffer,"VCU TX 0x%03x BMS_REQUEST_TIME",vcu_txObj.bF.id.SID); serialOut(tempBuffer);}
 800d2b4:	4b0d      	ldr	r3, [pc, #52]	; (800d2ec <VCU_RequestTime+0x9c>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	f003 0304 	and.w	r3, r3, #4
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d00c      	beq.n	800d2da <VCU_RequestTime+0x8a>
 800d2c0:	4b08      	ldr	r3, [pc, #32]	; (800d2e4 <VCU_RequestTime+0x94>)
 800d2c2:	881b      	ldrh	r3, [r3, #0]
 800d2c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	4908      	ldr	r1, [pc, #32]	; (800d2f0 <VCU_RequestTime+0xa0>)
 800d2ce:	4809      	ldr	r0, [pc, #36]	; (800d2f4 <VCU_RequestTime+0xa4>)
 800d2d0:	f007 f9e0 	bl	8014694 <siprintf>
 800d2d4:	4807      	ldr	r0, [pc, #28]	; (800d2f4 <VCU_RequestTime+0xa4>)
 800d2d6:	f7f8 f997 	bl	8005608 <serialOut>

  VCU_TransmitMessageQueue(VCU_CAN);                     // Send it
 800d2da:	2000      	movs	r0, #0
 800d2dc:	f7fe f9dc 	bl	800b698 <VCU_TransmitMessageQueue>

}
 800d2e0:	bf00      	nop
 800d2e2:	bd80      	pop	{r7, pc}
 800d2e4:	2000a6cc 	.word	0x2000a6cc
 800d2e8:	2000a66c 	.word	0x2000a66c
 800d2ec:	2000000c 	.word	0x2000000c
 800d2f0:	08019000 	.word	0x08019000
 800d2f4:	20000b64 	.word	0x20000b64

0800d2f8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800d2f8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800d2fa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800d2fc:	3304      	adds	r3, #4

0800d2fe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800d2fe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800d300:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800d302:	d3f9      	bcc.n	800d2f8 <CopyDataInit>
  bx lr
 800d304:	4770      	bx	lr

0800d306 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800d306:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800d308:	3004      	adds	r0, #4

0800d30a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800d30a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800d30c:	d3fb      	bcc.n	800d306 <FillZerobss>
  bx lr
 800d30e:	4770      	bx	lr

0800d310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800d310:	480c      	ldr	r0, [pc, #48]	; (800d344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800d312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800d314:	f7fe f866 	bl	800b3e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800d318:	480b      	ldr	r0, [pc, #44]	; (800d348 <LoopForever+0x6>)
 800d31a:	490c      	ldr	r1, [pc, #48]	; (800d34c <LoopForever+0xa>)
 800d31c:	4a0c      	ldr	r2, [pc, #48]	; (800d350 <LoopForever+0xe>)
 800d31e:	2300      	movs	r3, #0
 800d320:	f7ff ffed 	bl	800d2fe <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800d324:	480b      	ldr	r0, [pc, #44]	; (800d354 <LoopForever+0x12>)
 800d326:	490c      	ldr	r1, [pc, #48]	; (800d358 <LoopForever+0x16>)
 800d328:	4a0c      	ldr	r2, [pc, #48]	; (800d35c <LoopForever+0x1a>)
 800d32a:	2300      	movs	r3, #0
 800d32c:	f7ff ffe7 	bl	800d2fe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800d330:	480b      	ldr	r0, [pc, #44]	; (800d360 <LoopForever+0x1e>)
 800d332:	490c      	ldr	r1, [pc, #48]	; (800d364 <LoopForever+0x22>)
 800d334:	2300      	movs	r3, #0
 800d336:	f7ff ffe8 	bl	800d30a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800d33a:	f006 f845 	bl	80133c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800d33e:	f7f8 fd15 	bl	8005d6c <main>

0800d342 <LoopForever>:

LoopForever:
  b LoopForever
 800d342:	e7fe      	b.n	800d342 <LoopForever>
  ldr   r0, =_estack
 800d344:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800d348:	20000008 	.word	0x20000008
 800d34c:	200002d0 	.word	0x200002d0
 800d350:	080196e0 	.word	0x080196e0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800d354:	20030000 	.word	0x20030000
 800d358:	20030000 	.word	0x20030000
 800d35c:	080199a8 	.word	0x080199a8
  INIT_BSS _sbss, _ebss
 800d360:	200002d0 	.word	0x200002d0
 800d364:	2000a7c0 	.word	0x2000a7c0

0800d368 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800d368:	e7fe      	b.n	800d368 <ADC1_IRQHandler>
	...

0800d36c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d376:	4b0c      	ldr	r3, [pc, #48]	; (800d3a8 <HAL_Init+0x3c>)
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	4a0b      	ldr	r2, [pc, #44]	; (800d3a8 <HAL_Init+0x3c>)
 800d37c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d380:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d382:	2003      	movs	r0, #3
 800d384:	f000 f96c 	bl	800d660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d388:	200f      	movs	r0, #15
 800d38a:	f000 f80f 	bl	800d3ac <HAL_InitTick>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d002      	beq.n	800d39a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800d394:	2301      	movs	r3, #1
 800d396:	71fb      	strb	r3, [r7, #7]
 800d398:	e001      	b.n	800d39e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d39a:	f7fd fc8f 	bl	800acbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d39e:	79fb      	ldrb	r3, [r7, #7]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	58004000 	.word	0x58004000

0800d3ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800d3b8:	4b17      	ldr	r3, [pc, #92]	; (800d418 <HAL_InitTick+0x6c>)
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d024      	beq.n	800d40a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800d3c0:	f002 f844 	bl	800f44c <HAL_RCC_GetHCLKFreq>
 800d3c4:	4602      	mov	r2, r0
 800d3c6:	4b14      	ldr	r3, [pc, #80]	; (800d418 <HAL_InitTick+0x6c>)
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d3d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800d3d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 f974 	bl	800d6c6 <HAL_SYSTICK_Config>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d10f      	bne.n	800d404 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b0f      	cmp	r3, #15
 800d3e8:	d809      	bhi.n	800d3fe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	6879      	ldr	r1, [r7, #4]
 800d3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f2:	f000 f940 	bl	800d676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d3f6:	4a09      	ldr	r2, [pc, #36]	; (800d41c <HAL_InitTick+0x70>)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6013      	str	r3, [r2, #0]
 800d3fc:	e007      	b.n	800d40e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800d3fe:	2301      	movs	r3, #1
 800d400:	73fb      	strb	r3, [r7, #15]
 800d402:	e004      	b.n	800d40e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800d404:	2301      	movs	r3, #1
 800d406:	73fb      	strb	r3, [r7, #15]
 800d408:	e001      	b.n	800d40e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800d40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	2000001c 	.word	0x2000001c
 800d41c:	20000018 	.word	0x20000018

0800d420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d424:	4b06      	ldr	r3, [pc, #24]	; (800d440 <HAL_IncTick+0x20>)
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	461a      	mov	r2, r3
 800d42a:	4b06      	ldr	r3, [pc, #24]	; (800d444 <HAL_IncTick+0x24>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4413      	add	r3, r2
 800d430:	4a04      	ldr	r2, [pc, #16]	; (800d444 <HAL_IncTick+0x24>)
 800d432:	6013      	str	r3, [r2, #0]
}
 800d434:	bf00      	nop
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	2000001c 	.word	0x2000001c
 800d444:	2000a76c 	.word	0x2000a76c

0800d448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d448:	b480      	push	{r7}
 800d44a:	af00      	add	r7, sp, #0
  return uwTick;
 800d44c:	4b03      	ldr	r3, [pc, #12]	; (800d45c <HAL_GetTick+0x14>)
 800d44e:	681b      	ldr	r3, [r3, #0]
}
 800d450:	4618      	mov	r0, r3
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	2000a76c 	.word	0x2000a76c

0800d460 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800d460:	b480      	push	{r7}
 800d462:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800d464:	4b03      	ldr	r3, [pc, #12]	; (800d474 <HAL_GetTickPrio+0x14>)
 800d466:	681b      	ldr	r3, [r3, #0]
}
 800d468:	4618      	mov	r0, r3
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr
 800d472:	bf00      	nop
 800d474:	20000018 	.word	0x20000018

0800d478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d480:	f7ff ffe2 	bl	800d448 <HAL_GetTick>
 800d484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d490:	d005      	beq.n	800d49e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d492:	4b0a      	ldr	r3, [pc, #40]	; (800d4bc <HAL_Delay+0x44>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	461a      	mov	r2, r3
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	4413      	add	r3, r2
 800d49c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d49e:	bf00      	nop
 800d4a0:	f7ff ffd2 	bl	800d448 <HAL_GetTick>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	1ad3      	subs	r3, r2, r3
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d8f7      	bhi.n	800d4a0 <HAL_Delay+0x28>
  {
  }
}
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	2000001c 	.word	0x2000001c

0800d4c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b085      	sub	sp, #20
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f003 0307 	and.w	r3, r3, #7
 800d4ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d4d0:	4b0c      	ldr	r3, [pc, #48]	; (800d504 <__NVIC_SetPriorityGrouping+0x44>)
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d4d6:	68ba      	ldr	r2, [r7, #8]
 800d4d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d4dc:	4013      	ands	r3, r2
 800d4de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d4e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d4ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d4f2:	4a04      	ldr	r2, [pc, #16]	; (800d504 <__NVIC_SetPriorityGrouping+0x44>)
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	60d3      	str	r3, [r2, #12]
}
 800d4f8:	bf00      	nop
 800d4fa:	3714      	adds	r7, #20
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d502:	4770      	bx	lr
 800d504:	e000ed00 	.word	0xe000ed00

0800d508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d508:	b480      	push	{r7}
 800d50a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d50c:	4b04      	ldr	r3, [pc, #16]	; (800d520 <__NVIC_GetPriorityGrouping+0x18>)
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	0a1b      	lsrs	r3, r3, #8
 800d512:	f003 0307 	and.w	r3, r3, #7
}
 800d516:	4618      	mov	r0, r3
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr
 800d520:	e000ed00 	.word	0xe000ed00

0800d524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d524:	b480      	push	{r7}
 800d526:	b083      	sub	sp, #12
 800d528:	af00      	add	r7, sp, #0
 800d52a:	4603      	mov	r3, r0
 800d52c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d52e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d532:	2b00      	cmp	r3, #0
 800d534:	db0b      	blt.n	800d54e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	f003 021f 	and.w	r2, r3, #31
 800d53c:	4907      	ldr	r1, [pc, #28]	; (800d55c <__NVIC_EnableIRQ+0x38>)
 800d53e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d542:	095b      	lsrs	r3, r3, #5
 800d544:	2001      	movs	r0, #1
 800d546:	fa00 f202 	lsl.w	r2, r0, r2
 800d54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d54e:	bf00      	nop
 800d550:	370c      	adds	r7, #12
 800d552:	46bd      	mov	sp, r7
 800d554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d558:	4770      	bx	lr
 800d55a:	bf00      	nop
 800d55c:	e000e100 	.word	0xe000e100

0800d560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	4603      	mov	r3, r0
 800d568:	6039      	str	r1, [r7, #0]
 800d56a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d56c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d570:	2b00      	cmp	r3, #0
 800d572:	db0a      	blt.n	800d58a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	b2da      	uxtb	r2, r3
 800d578:	490c      	ldr	r1, [pc, #48]	; (800d5ac <__NVIC_SetPriority+0x4c>)
 800d57a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d57e:	0112      	lsls	r2, r2, #4
 800d580:	b2d2      	uxtb	r2, r2
 800d582:	440b      	add	r3, r1
 800d584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d588:	e00a      	b.n	800d5a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	b2da      	uxtb	r2, r3
 800d58e:	4908      	ldr	r1, [pc, #32]	; (800d5b0 <__NVIC_SetPriority+0x50>)
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	f003 030f 	and.w	r3, r3, #15
 800d596:	3b04      	subs	r3, #4
 800d598:	0112      	lsls	r2, r2, #4
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	440b      	add	r3, r1
 800d59e:	761a      	strb	r2, [r3, #24]
}
 800d5a0:	bf00      	nop
 800d5a2:	370c      	adds	r7, #12
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5aa:	4770      	bx	lr
 800d5ac:	e000e100 	.word	0xe000e100
 800d5b0:	e000ed00 	.word	0xe000ed00

0800d5b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d5b4:	b480      	push	{r7}
 800d5b6:	b089      	sub	sp, #36	; 0x24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	60b9      	str	r1, [r7, #8]
 800d5be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	f1c3 0307 	rsb	r3, r3, #7
 800d5ce:	2b04      	cmp	r3, #4
 800d5d0:	bf28      	it	cs
 800d5d2:	2304      	movcs	r3, #4
 800d5d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	3304      	adds	r3, #4
 800d5da:	2b06      	cmp	r3, #6
 800d5dc:	d902      	bls.n	800d5e4 <NVIC_EncodePriority+0x30>
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	3b03      	subs	r3, #3
 800d5e2:	e000      	b.n	800d5e6 <NVIC_EncodePriority+0x32>
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d5f2:	43da      	mvns	r2, r3
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	401a      	ands	r2, r3
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d5fc:	f04f 31ff 	mov.w	r1, #4294967295
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	fa01 f303 	lsl.w	r3, r1, r3
 800d606:	43d9      	mvns	r1, r3
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d60c:	4313      	orrs	r3, r2
         );
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3724      	adds	r7, #36	; 0x24
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr
	...

0800d61c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	3b01      	subs	r3, #1
 800d628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d62c:	d301      	bcc.n	800d632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d62e:	2301      	movs	r3, #1
 800d630:	e00f      	b.n	800d652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d632:	4a0a      	ldr	r2, [pc, #40]	; (800d65c <SysTick_Config+0x40>)
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3b01      	subs	r3, #1
 800d638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d63a:	210f      	movs	r1, #15
 800d63c:	f04f 30ff 	mov.w	r0, #4294967295
 800d640:	f7ff ff8e 	bl	800d560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d644:	4b05      	ldr	r3, [pc, #20]	; (800d65c <SysTick_Config+0x40>)
 800d646:	2200      	movs	r2, #0
 800d648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d64a:	4b04      	ldr	r3, [pc, #16]	; (800d65c <SysTick_Config+0x40>)
 800d64c:	2207      	movs	r2, #7
 800d64e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d650:	2300      	movs	r3, #0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	e000e010 	.word	0xe000e010

0800d660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b082      	sub	sp, #8
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f7ff ff29 	bl	800d4c0 <__NVIC_SetPriorityGrouping>
}
 800d66e:	bf00      	nop
 800d670:	3708      	adds	r7, #8
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	4603      	mov	r3, r0
 800d67e:	60b9      	str	r1, [r7, #8]
 800d680:	607a      	str	r2, [r7, #4]
 800d682:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d684:	f7ff ff40 	bl	800d508 <__NVIC_GetPriorityGrouping>
 800d688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	68b9      	ldr	r1, [r7, #8]
 800d68e:	6978      	ldr	r0, [r7, #20]
 800d690:	f7ff ff90 	bl	800d5b4 <NVIC_EncodePriority>
 800d694:	4602      	mov	r2, r0
 800d696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d69a:	4611      	mov	r1, r2
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7ff ff5f 	bl	800d560 <__NVIC_SetPriority>
}
 800d6a2:	bf00      	nop
 800d6a4:	3718      	adds	r7, #24
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d6b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7ff ff33 	bl	800d524 <__NVIC_EnableIRQ>
}
 800d6be:	bf00      	nop
 800d6c0:	3708      	adds	r7, #8
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b082      	sub	sp, #8
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7ff ffa4 	bl	800d61c <SysTick_Config>
 800d6d4:	4603      	mov	r3, r0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d101      	bne.n	800d6f0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800d6ec:	2301      	movs	r3, #1
 800d6ee:	e04f      	b.n	800d790 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d008      	beq.n	800d70e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2204      	movs	r2, #4
 800d700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	2200      	movs	r2, #0
 800d706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800d70a:	2301      	movs	r3, #1
 800d70c:	e040      	b.n	800d790 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f022 020e 	bic.w	r2, r2, #14
 800d71c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d72c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	681a      	ldr	r2, [r3, #0]
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f022 0201 	bic.w	r2, r2, #1
 800d73c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d742:	f003 021c 	and.w	r2, r3, #28
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d74a:	2101      	movs	r1, #1
 800d74c:	fa01 f202 	lsl.w	r2, r1, r2
 800d750:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d756:	687a      	ldr	r2, [r7, #4]
 800d758:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d75a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00c      	beq.n	800d77e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d76e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d772:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d778:	687a      	ldr	r2, [r7, #4]
 800d77a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d77c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2201      	movs	r2, #1
 800d782:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800d78e:	2300      	movs	r3, #0
}
 800d790:	4618      	mov	r0, r3
 800d792:	370c      	adds	r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr

0800d79c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b084      	sub	sp, #16
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d7ae:	b2db      	uxtb	r3, r3
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d005      	beq.n	800d7c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2204      	movs	r2, #4
 800d7b8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	73fb      	strb	r3, [r7, #15]
 800d7be:	e047      	b.n	800d850 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	681a      	ldr	r2, [r3, #0]
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f022 020e 	bic.w	r2, r2, #14
 800d7ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f022 0201 	bic.w	r2, r2, #1
 800d7de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7e4:	681a      	ldr	r2, [r3, #0]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d7ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7f4:	f003 021c 	and.w	r2, r3, #28
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7fc:	2101      	movs	r1, #1
 800d7fe:	fa01 f202 	lsl.w	r2, r1, r2
 800d802:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d808:	687a      	ldr	r2, [r7, #4]
 800d80a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d80c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00c      	beq.n	800d830 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d824:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d82e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2201      	movs	r2, #1
 800d834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2200      	movs	r2, #0
 800d83c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d844:	2b00      	cmp	r3, #0
 800d846:	d003      	beq.n	800d850 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	4798      	blx	r3
    }
  }
  return status;
 800d850:	7bfb      	ldrb	r3, [r7, #15]
}
 800d852:	4618      	mov	r0, r3
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800d86a:	4b1c      	ldr	r3, [pc, #112]	; (800d8dc <HAL_FLASH_Program+0x80>)
 800d86c:	781b      	ldrb	r3, [r3, #0]
 800d86e:	2b01      	cmp	r3, #1
 800d870:	d101      	bne.n	800d876 <HAL_FLASH_Program+0x1a>
 800d872:	2302      	movs	r3, #2
 800d874:	e02d      	b.n	800d8d2 <HAL_FLASH_Program+0x76>
 800d876:	4b19      	ldr	r3, [pc, #100]	; (800d8dc <HAL_FLASH_Program+0x80>)
 800d878:	2201      	movs	r2, #1
 800d87a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800d87c:	4b17      	ldr	r3, [pc, #92]	; (800d8dc <HAL_FLASH_Program+0x80>)
 800d87e:	2200      	movs	r2, #0
 800d880:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d886:	f000 f869 	bl	800d95c <FLASH_WaitForLastOperation>
 800d88a:	4603      	mov	r3, r0
 800d88c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800d88e:	7dfb      	ldrb	r3, [r7, #23]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d11a      	bne.n	800d8ca <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2b01      	cmp	r3, #1
 800d898:	d105      	bne.n	800d8a6 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800d89a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d89e:	68b8      	ldr	r0, [r7, #8]
 800d8a0:	f000 f8cc 	bl	800da3c <FLASH_Program_DoubleWord>
 800d8a4:	e004      	b.n	800d8b0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	68b8      	ldr	r0, [r7, #8]
 800d8ac:	f00a f8a8 	bl	8017a00 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800d8b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d8b4:	f000 f852 	bl	800d95c <FLASH_WaitForLastOperation>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800d8bc:	4b08      	ldr	r3, [pc, #32]	; (800d8e0 <HAL_FLASH_Program+0x84>)
 800d8be:	695a      	ldr	r2, [r3, #20]
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	43db      	mvns	r3, r3
 800d8c4:	4906      	ldr	r1, [pc, #24]	; (800d8e0 <HAL_FLASH_Program+0x84>)
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800d8ca:	4b04      	ldr	r3, [pc, #16]	; (800d8dc <HAL_FLASH_Program+0x80>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800d8d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3718      	adds	r7, #24
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	2000a770 	.word	0x2000a770
 800d8e0:	58004000 	.word	0x58004000

0800d8e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d8ee:	4b0b      	ldr	r3, [pc, #44]	; (800d91c <HAL_FLASH_Unlock+0x38>)
 800d8f0:	695b      	ldr	r3, [r3, #20]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	da0b      	bge.n	800d90e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800d8f6:	4b09      	ldr	r3, [pc, #36]	; (800d91c <HAL_FLASH_Unlock+0x38>)
 800d8f8:	4a09      	ldr	r2, [pc, #36]	; (800d920 <HAL_FLASH_Unlock+0x3c>)
 800d8fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800d8fc:	4b07      	ldr	r3, [pc, #28]	; (800d91c <HAL_FLASH_Unlock+0x38>)
 800d8fe:	4a09      	ldr	r2, [pc, #36]	; (800d924 <HAL_FLASH_Unlock+0x40>)
 800d900:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800d902:	4b06      	ldr	r3, [pc, #24]	; (800d91c <HAL_FLASH_Unlock+0x38>)
 800d904:	695b      	ldr	r3, [r3, #20]
 800d906:	2b00      	cmp	r3, #0
 800d908:	da01      	bge.n	800d90e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800d90a:	2301      	movs	r3, #1
 800d90c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800d90e:	79fb      	ldrb	r3, [r7, #7]
}
 800d910:	4618      	mov	r0, r3
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr
 800d91c:	58004000 	.word	0x58004000
 800d920:	45670123 	.word	0x45670123
 800d924:	cdef89ab 	.word	0xcdef89ab

0800d928 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800d932:	4b09      	ldr	r3, [pc, #36]	; (800d958 <HAL_FLASH_Lock+0x30>)
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	4a08      	ldr	r2, [pc, #32]	; (800d958 <HAL_FLASH_Lock+0x30>)
 800d938:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d93c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 800d93e:	4b06      	ldr	r3, [pc, #24]	; (800d958 <HAL_FLASH_Lock+0x30>)
 800d940:	695b      	ldr	r3, [r3, #20]
 800d942:	2b00      	cmp	r3, #0
 800d944:	db01      	blt.n	800d94a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d94a:	79fb      	ldrb	r3, [r7, #7]
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	370c      	adds	r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	58004000 	.word	0x58004000

0800d95c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b084      	sub	sp, #16
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800d964:	f7ff fd70 	bl	800d448 <HAL_GetTick>
 800d968:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d96a:	e009      	b.n	800d980 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800d96c:	f7ff fd6c 	bl	800d448 <HAL_GetTick>
 800d970:	4602      	mov	r2, r0
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	687a      	ldr	r2, [r7, #4]
 800d978:	429a      	cmp	r2, r3
 800d97a:	d801      	bhi.n	800d980 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 800d97c:	2303      	movs	r3, #3
 800d97e:	e054      	b.n	800da2a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800d980:	4b2c      	ldr	r3, [pc, #176]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d98c:	d0ee      	beq.n	800d96c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 800d98e:	4b29      	ldr	r3, [pc, #164]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800d990:	691b      	ldr	r3, [r3, #16]
 800d992:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800d99e:	4b25      	ldr	r3, [pc, #148]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d007      	beq.n	800d9be <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800d9ae:	4b21      	ldr	r3, [pc, #132]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800d9b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d9b4:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d9bc:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800d9be:	68fa      	ldr	r2, [r7, #12]
 800d9c0:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800d9c4:	4013      	ands	r3, r2
 800d9c6:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d007      	beq.n	800d9e2 <FLASH_WaitForLastOperation+0x86>
 800d9d2:	4b18      	ldr	r3, [pc, #96]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800d9d4:	699a      	ldr	r2, [r3, #24]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800d9dc:	4915      	ldr	r1, [pc, #84]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	618b      	str	r3, [r1, #24]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d004      	beq.n	800d9f6 <FLASH_WaitForLastOperation+0x9a>
 800d9ec:	4a11      	ldr	r2, [pc, #68]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800d9f4:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d00e      	beq.n	800da1a <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 800d9fc:	4a0e      	ldr	r2, [pc, #56]	; (800da38 <FLASH_WaitForLastOperation+0xdc>)
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 800da02:	2301      	movs	r3, #1
 800da04:	e011      	b.n	800da2a <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800da06:	f7ff fd1f 	bl	800d448 <HAL_GetTick>
 800da0a:	4602      	mov	r2, r0
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	429a      	cmp	r2, r3
 800da14:	d801      	bhi.n	800da1a <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 800da16:	2303      	movs	r3, #3
 800da18:	e007      	b.n	800da2a <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 800da1a:	4b06      	ldr	r3, [pc, #24]	; (800da34 <FLASH_WaitForLastOperation+0xd8>)
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800da22:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800da26:	d0ee      	beq.n	800da06 <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	58004000 	.word	0x58004000
 800da38:	2000a770 	.word	0x2000a770

0800da3c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800da48:	4b0e      	ldr	r3, [pc, #56]	; (800da84 <FLASH_Program_DoubleWord+0x48>)
 800da4a:	695b      	ldr	r3, [r3, #20]
 800da4c:	4a0d      	ldr	r2, [pc, #52]	; (800da84 <FLASH_Program_DoubleWord+0x48>)
 800da4e:	f043 0301 	orr.w	r3, r3, #1
 800da52:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	683a      	ldr	r2, [r7, #0]
 800da58:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800da5a:	f3bf 8f6f 	isb	sy
}
 800da5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800da60:	e9d7 0100 	ldrd	r0, r1, [r7]
 800da64:	f04f 0200 	mov.w	r2, #0
 800da68:	f04f 0300 	mov.w	r3, #0
 800da6c:	000a      	movs	r2, r1
 800da6e:	2300      	movs	r3, #0
 800da70:	68f9      	ldr	r1, [r7, #12]
 800da72:	3104      	adds	r1, #4
 800da74:	4613      	mov	r3, r2
 800da76:	600b      	str	r3, [r1, #0]
}
 800da78:	bf00      	nop
 800da7a:	3714      	adds	r7, #20
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	58004000 	.word	0x58004000

0800da88 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800da92:	4b24      	ldr	r3, [pc, #144]	; (800db24 <HAL_FLASHEx_Erase+0x9c>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	2b01      	cmp	r3, #1
 800da98:	d101      	bne.n	800da9e <HAL_FLASHEx_Erase+0x16>
 800da9a:	2302      	movs	r3, #2
 800da9c:	e03d      	b.n	800db1a <HAL_FLASHEx_Erase+0x92>
 800da9e:	4b21      	ldr	r3, [pc, #132]	; (800db24 <HAL_FLASHEx_Erase+0x9c>)
 800daa0:	2201      	movs	r2, #1
 800daa2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800daa4:	4b1f      	ldr	r3, [pc, #124]	; (800db24 <HAL_FLASHEx_Erase+0x9c>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800daaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800daae:	f7ff ff55 	bl	800d95c <FLASH_WaitForLastOperation>
 800dab2:	4603      	mov	r3, r0
 800dab4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800dab6:	7bfb      	ldrb	r3, [r7, #15]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d12a      	bne.n	800db12 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d124      	bne.n	800db0e <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	685b      	ldr	r3, [r3, #4]
 800dad0:	60bb      	str	r3, [r7, #8]
 800dad2:	e012      	b.n	800dafa <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800dad4:	68b8      	ldr	r0, [r7, #8]
 800dad6:	f000 f869 	bl	800dbac <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800dada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800dade:	f7ff ff3d 	bl	800d95c <FLASH_WaitForLastOperation>
 800dae2:	4603      	mov	r3, r0
 800dae4:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 800dae6:	7bfb      	ldrb	r3, [r7, #15]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d003      	beq.n	800daf4 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	68ba      	ldr	r2, [r7, #8]
 800daf0:	601a      	str	r2, [r3, #0]
          break;
 800daf2:	e00a      	b.n	800db0a <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	3301      	adds	r3, #1
 800daf8:	60bb      	str	r3, [r7, #8]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	689b      	ldr	r3, [r3, #8]
 800db02:	4413      	add	r3, r2
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	429a      	cmp	r2, r3
 800db08:	d3e4      	bcc.n	800dad4 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 800db0a:	f000 f8b1 	bl	800dc70 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800db0e:	f000 f867 	bl	800dbe0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800db12:	4b04      	ldr	r3, [pc, #16]	; (800db24 <HAL_FLASHEx_Erase+0x9c>)
 800db14:	2200      	movs	r2, #0
 800db16:	701a      	strb	r2, [r3, #0]

  return status;
 800db18:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	2000a770 	.word	0x2000a770

0800db28 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800db30:	4b1c      	ldr	r3, [pc, #112]	; (800dba4 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b01      	cmp	r3, #1
 800db36:	d101      	bne.n	800db3c <HAL_FLASHEx_Erase_IT+0x14>
 800db38:	2302      	movs	r3, #2
 800db3a:	e02e      	b.n	800db9a <HAL_FLASHEx_Erase_IT+0x72>
 800db3c:	4b19      	ldr	r3, [pc, #100]	; (800dba4 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db3e:	2201      	movs	r2, #1
 800db40:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800db42:	4b18      	ldr	r3, [pc, #96]	; (800dba4 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db44:	2200      	movs	r2, #0
 800db46:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	4a15      	ldr	r2, [pc, #84]	; (800dba4 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db4e:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800db50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800db54:	f7ff ff02 	bl	800d95c <FLASH_WaitForLastOperation>
 800db58:	4603      	mov	r3, r0
 800db5a:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 800db5c:	7bfb      	ldrb	r3, [r7, #15]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d003      	beq.n	800db6a <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800db62:	4b10      	ldr	r3, [pc, #64]	; (800dba4 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db64:	2200      	movs	r2, #0
 800db66:	701a      	strb	r2, [r3, #0]
 800db68:	e016      	b.n	800db98 <HAL_FLASHEx_Erase_IT+0x70>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800db6a:	4b0f      	ldr	r3, [pc, #60]	; (800dba8 <HAL_FLASHEx_Erase_IT+0x80>)
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	4a0e      	ldr	r2, [pc, #56]	; (800dba8 <HAL_FLASHEx_Erase_IT+0x80>)
 800db70:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800db74:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	2b02      	cmp	r3, #2
 800db7c:	d10c      	bne.n	800db98 <HAL_FLASHEx_Erase_IT+0x70>
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	689b      	ldr	r3, [r3, #8]
 800db82:	4a08      	ldr	r2, [pc, #32]	; (800dba4 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db84:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	4a06      	ldr	r2, [pc, #24]	; (800dba4 <HAL_FLASHEx_Erase_IT+0x7c>)
 800db8c:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	4618      	mov	r0, r3
 800db94:	f000 f80a 	bl	800dbac <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 800db98:	7bfb      	ldrb	r3, [r7, #15]
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	2000a770 	.word	0x2000a770
 800dba8:	58004000 	.word	0x58004000

0800dbac <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800dbac:	b480      	push	{r7}
 800dbae:	b083      	sub	sp, #12
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800dbb4:	4b09      	ldr	r3, [pc, #36]	; (800dbdc <FLASH_PageErase+0x30>)
 800dbb6:	695b      	ldr	r3, [r3, #20]
 800dbb8:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	00db      	lsls	r3, r3, #3
 800dbc0:	4313      	orrs	r3, r2
 800dbc2:	4a06      	ldr	r2, [pc, #24]	; (800dbdc <FLASH_PageErase+0x30>)
 800dbc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbc8:	f043 0302 	orr.w	r3, r3, #2
 800dbcc:	6153      	str	r3, [r2, #20]
}
 800dbce:	bf00      	nop
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	58004000 	.word	0x58004000

0800dbe0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 800dbe0:	b480      	push	{r7}
 800dbe2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 800dbe4:	4b21      	ldr	r3, [pc, #132]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dbec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbf0:	d117      	bne.n	800dc22 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800dbf2:	4b1e      	ldr	r3, [pc, #120]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a1d      	ldr	r2, [pc, #116]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dbf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dbfc:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800dbfe:	4b1b      	ldr	r3, [pc, #108]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4a1a      	ldr	r2, [pc, #104]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800dc08:	6013      	str	r3, [r2, #0]
 800dc0a:	4b18      	ldr	r3, [pc, #96]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	4a17      	ldr	r2, [pc, #92]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dc14:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dc16:	4b15      	ldr	r3, [pc, #84]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4a14      	ldr	r2, [pc, #80]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc20:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 800dc22:	4b12      	ldr	r3, [pc, #72]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc2e:	d117      	bne.n	800dc60 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800dc30:	4b0e      	ldr	r3, [pc, #56]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	4a0d      	ldr	r2, [pc, #52]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dc3a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800dc3c:	4b0b      	ldr	r3, [pc, #44]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0a      	ldr	r2, [pc, #40]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dc46:	6013      	str	r3, [r2, #0]
 800dc48:	4b08      	ldr	r3, [pc, #32]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a07      	ldr	r2, [pc, #28]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dc52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800dc54:	4b05      	ldr	r3, [pc, #20]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	4a04      	ldr	r2, [pc, #16]	; (800dc6c <FLASH_FlushCaches+0x8c>)
 800dc5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dc5e:	6013      	str	r3, [r2, #0]
  }
}
 800dc60:	bf00      	nop
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	58004000 	.word	0x58004000

0800dc70 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 800dc70:	b480      	push	{r7}
 800dc72:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800dc74:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <FLASH_AcknowledgePageErase+0x20>)
 800dc76:	695b      	ldr	r3, [r3, #20]
 800dc78:	4a05      	ldr	r2, [pc, #20]	; (800dc90 <FLASH_AcknowledgePageErase+0x20>)
 800dc7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800dc7e:	f023 0302 	bic.w	r3, r3, #2
 800dc82:	6153      	str	r3, [r2, #20]
}
 800dc84:	bf00      	nop
 800dc86:	46bd      	mov	sp, r7
 800dc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8c:	4770      	bx	lr
 800dc8e:	bf00      	nop
 800dc90:	58004000 	.word	0x58004000

0800dc94 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b087      	sub	sp, #28
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dca2:	e14c      	b.n	800df3e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	681a      	ldr	r2, [r3, #0]
 800dca8:	2101      	movs	r1, #1
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	fa01 f303 	lsl.w	r3, r1, r3
 800dcb0:	4013      	ands	r3, r2
 800dcb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	f000 813e 	beq.w	800df38 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	f003 0303 	and.w	r3, r3, #3
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d005      	beq.n	800dcd4 <HAL_GPIO_Init+0x40>
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	f003 0303 	and.w	r3, r3, #3
 800dcd0:	2b02      	cmp	r3, #2
 800dcd2:	d130      	bne.n	800dd36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	689b      	ldr	r3, [r3, #8]
 800dcd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dcda:	697b      	ldr	r3, [r7, #20]
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	2203      	movs	r2, #3
 800dce0:	fa02 f303 	lsl.w	r3, r2, r3
 800dce4:	43db      	mvns	r3, r3
 800dce6:	693a      	ldr	r2, [r7, #16]
 800dce8:	4013      	ands	r3, r2
 800dcea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	68da      	ldr	r2, [r3, #12]
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	005b      	lsls	r3, r3, #1
 800dcf4:	fa02 f303 	lsl.w	r3, r2, r3
 800dcf8:	693a      	ldr	r2, [r7, #16]
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	693a      	ldr	r2, [r7, #16]
 800dd02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd12:	43db      	mvns	r3, r3
 800dd14:	693a      	ldr	r2, [r7, #16]
 800dd16:	4013      	ands	r3, r2
 800dd18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	091b      	lsrs	r3, r3, #4
 800dd20:	f003 0201 	and.w	r2, r3, #1
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	fa02 f303 	lsl.w	r3, r2, r3
 800dd2a:	693a      	ldr	r2, [r7, #16]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	f003 0303 	and.w	r3, r3, #3
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d017      	beq.n	800dd72 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	005b      	lsls	r3, r3, #1
 800dd4c:	2203      	movs	r2, #3
 800dd4e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd52:	43db      	mvns	r3, r3
 800dd54:	693a      	ldr	r2, [r7, #16]
 800dd56:	4013      	ands	r3, r2
 800dd58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	689a      	ldr	r2, [r3, #8]
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	005b      	lsls	r3, r3, #1
 800dd62:	fa02 f303 	lsl.w	r3, r2, r3
 800dd66:	693a      	ldr	r2, [r7, #16]
 800dd68:	4313      	orrs	r3, r2
 800dd6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	f003 0303 	and.w	r3, r3, #3
 800dd7a:	2b02      	cmp	r3, #2
 800dd7c:	d123      	bne.n	800ddc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	08da      	lsrs	r2, r3, #3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3208      	adds	r2, #8
 800dd86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	f003 0307 	and.w	r3, r3, #7
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	220f      	movs	r2, #15
 800dd96:	fa02 f303 	lsl.w	r3, r2, r3
 800dd9a:	43db      	mvns	r3, r3
 800dd9c:	693a      	ldr	r2, [r7, #16]
 800dd9e:	4013      	ands	r3, r2
 800dda0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	691a      	ldr	r2, [r3, #16]
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f003 0307 	and.w	r3, r3, #7
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb2:	693a      	ldr	r2, [r7, #16]
 800ddb4:	4313      	orrs	r3, r2
 800ddb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ddb8:	697b      	ldr	r3, [r7, #20]
 800ddba:	08da      	lsrs	r2, r3, #3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	3208      	adds	r2, #8
 800ddc0:	6939      	ldr	r1, [r7, #16]
 800ddc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	005b      	lsls	r3, r3, #1
 800ddd0:	2203      	movs	r2, #3
 800ddd2:	fa02 f303 	lsl.w	r3, r2, r3
 800ddd6:	43db      	mvns	r3, r3
 800ddd8:	693a      	ldr	r2, [r7, #16]
 800ddda:	4013      	ands	r3, r2
 800dddc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	f003 0203 	and.w	r2, r3, #3
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	fa02 f303 	lsl.w	r3, r2, r3
 800ddee:	693a      	ldr	r2, [r7, #16]
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	693a      	ldr	r2, [r7, #16]
 800ddf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800de02:	2b00      	cmp	r3, #0
 800de04:	f000 8098 	beq.w	800df38 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800de08:	4a54      	ldr	r2, [pc, #336]	; (800df5c <HAL_GPIO_Init+0x2c8>)
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	089b      	lsrs	r3, r3, #2
 800de0e:	3302      	adds	r3, #2
 800de10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800de16:	697b      	ldr	r3, [r7, #20]
 800de18:	f003 0303 	and.w	r3, r3, #3
 800de1c:	009b      	lsls	r3, r3, #2
 800de1e:	220f      	movs	r2, #15
 800de20:	fa02 f303 	lsl.w	r3, r2, r3
 800de24:	43db      	mvns	r3, r3
 800de26:	693a      	ldr	r2, [r7, #16]
 800de28:	4013      	ands	r3, r2
 800de2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800de32:	d019      	beq.n	800de68 <HAL_GPIO_Init+0x1d4>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4a4a      	ldr	r2, [pc, #296]	; (800df60 <HAL_GPIO_Init+0x2cc>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d013      	beq.n	800de64 <HAL_GPIO_Init+0x1d0>
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	4a49      	ldr	r2, [pc, #292]	; (800df64 <HAL_GPIO_Init+0x2d0>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d00d      	beq.n	800de60 <HAL_GPIO_Init+0x1cc>
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	4a48      	ldr	r2, [pc, #288]	; (800df68 <HAL_GPIO_Init+0x2d4>)
 800de48:	4293      	cmp	r3, r2
 800de4a:	d007      	beq.n	800de5c <HAL_GPIO_Init+0x1c8>
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4a47      	ldr	r2, [pc, #284]	; (800df6c <HAL_GPIO_Init+0x2d8>)
 800de50:	4293      	cmp	r3, r2
 800de52:	d101      	bne.n	800de58 <HAL_GPIO_Init+0x1c4>
 800de54:	2304      	movs	r3, #4
 800de56:	e008      	b.n	800de6a <HAL_GPIO_Init+0x1d6>
 800de58:	2307      	movs	r3, #7
 800de5a:	e006      	b.n	800de6a <HAL_GPIO_Init+0x1d6>
 800de5c:	2303      	movs	r3, #3
 800de5e:	e004      	b.n	800de6a <HAL_GPIO_Init+0x1d6>
 800de60:	2302      	movs	r3, #2
 800de62:	e002      	b.n	800de6a <HAL_GPIO_Init+0x1d6>
 800de64:	2301      	movs	r3, #1
 800de66:	e000      	b.n	800de6a <HAL_GPIO_Init+0x1d6>
 800de68:	2300      	movs	r3, #0
 800de6a:	697a      	ldr	r2, [r7, #20]
 800de6c:	f002 0203 	and.w	r2, r2, #3
 800de70:	0092      	lsls	r2, r2, #2
 800de72:	4093      	lsls	r3, r2
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	4313      	orrs	r3, r2
 800de78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800de7a:	4938      	ldr	r1, [pc, #224]	; (800df5c <HAL_GPIO_Init+0x2c8>)
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	089b      	lsrs	r3, r3, #2
 800de80:	3302      	adds	r3, #2
 800de82:	693a      	ldr	r2, [r7, #16]
 800de84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800de88:	4b39      	ldr	r3, [pc, #228]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	43db      	mvns	r3, r3
 800de92:	693a      	ldr	r2, [r7, #16]
 800de94:	4013      	ands	r3, r2
 800de96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	685b      	ldr	r3, [r3, #4]
 800de9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d003      	beq.n	800deac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	4313      	orrs	r3, r2
 800deaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800deac:	4a30      	ldr	r2, [pc, #192]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800deb2:	4b2f      	ldr	r3, [pc, #188]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	43db      	mvns	r3, r3
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	4013      	ands	r3, r2
 800dec0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800deca:	2b00      	cmp	r3, #0
 800decc:	d003      	beq.n	800ded6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800dece:	693a      	ldr	r2, [r7, #16]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ded6:	4a26      	ldr	r2, [pc, #152]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800dedc:	4b24      	ldr	r3, [pc, #144]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800dede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	43db      	mvns	r3, r3
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	4013      	ands	r3, r2
 800deec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800def6:	2b00      	cmp	r3, #0
 800def8:	d003      	beq.n	800df02 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800defa:	693a      	ldr	r2, [r7, #16]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	4313      	orrs	r3, r2
 800df00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800df02:	4a1b      	ldr	r2, [pc, #108]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800df0a:	4b19      	ldr	r3, [pc, #100]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800df0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	43db      	mvns	r3, r3
 800df16:	693a      	ldr	r2, [r7, #16]
 800df18:	4013      	ands	r3, r2
 800df1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800df1c:	683b      	ldr	r3, [r7, #0]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df24:	2b00      	cmp	r3, #0
 800df26:	d003      	beq.n	800df30 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	4313      	orrs	r3, r2
 800df2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800df30:	4a0f      	ldr	r2, [pc, #60]	; (800df70 <HAL_GPIO_Init+0x2dc>)
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800df38:	697b      	ldr	r3, [r7, #20]
 800df3a:	3301      	adds	r3, #1
 800df3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	fa22 f303 	lsr.w	r3, r2, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f47f aeab 	bne.w	800dca4 <HAL_GPIO_Init+0x10>
  }
}
 800df4e:	bf00      	nop
 800df50:	bf00      	nop
 800df52:	371c      	adds	r7, #28
 800df54:	46bd      	mov	sp, r7
 800df56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5a:	4770      	bx	lr
 800df5c:	40010000 	.word	0x40010000
 800df60:	48000400 	.word	0x48000400
 800df64:	48000800 	.word	0x48000800
 800df68:	48000c00 	.word	0x48000c00
 800df6c:	48001000 	.word	0x48001000
 800df70:	58000800 	.word	0x58000800

0800df74 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800df74:	b480      	push	{r7}
 800df76:	b085      	sub	sp, #20
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
 800df7c:	460b      	mov	r3, r1
 800df7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	691a      	ldr	r2, [r3, #16]
 800df84:	887b      	ldrh	r3, [r7, #2]
 800df86:	4013      	ands	r3, r2
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d002      	beq.n	800df92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800df8c:	2301      	movs	r3, #1
 800df8e:	73fb      	strb	r3, [r7, #15]
 800df90:	e001      	b.n	800df96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800df92:	2300      	movs	r3, #0
 800df94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800df96:	7bfb      	ldrb	r3, [r7, #15]
}
 800df98:	4618      	mov	r0, r3
 800df9a:	3714      	adds	r7, #20
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr

0800dfa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	460b      	mov	r3, r1
 800dfae:	807b      	strh	r3, [r7, #2]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800dfb4:	787b      	ldrb	r3, [r7, #1]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d003      	beq.n	800dfc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800dfba:	887a      	ldrh	r2, [r7, #2]
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800dfc0:	e002      	b.n	800dfc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800dfc2:	887a      	ldrh	r2, [r7, #2]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 800dfc8:	bf00      	nop
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b085      	sub	sp, #20
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800dfe6:	887a      	ldrh	r2, [r7, #2]
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	4013      	ands	r3, r2
 800dfec:	041a      	lsls	r2, r3, #16
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	43d9      	mvns	r1, r3
 800dff2:	887b      	ldrh	r3, [r7, #2]
 800dff4:	400b      	ands	r3, r1
 800dff6:	431a      	orrs	r2, r3
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	619a      	str	r2, [r3, #24]
}
 800dffc:	bf00      	nop
 800dffe:	3714      	adds	r7, #20
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	4603      	mov	r3, r0
 800e010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800e012:	4b08      	ldr	r3, [pc, #32]	; (800e034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e014:	68da      	ldr	r2, [r3, #12]
 800e016:	88fb      	ldrh	r3, [r7, #6]
 800e018:	4013      	ands	r3, r2
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d006      	beq.n	800e02c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e01e:	4a05      	ldr	r2, [pc, #20]	; (800e034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e020:	88fb      	ldrh	r3, [r7, #6]
 800e022:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e024:	88fb      	ldrh	r3, [r7, #6]
 800e026:	4618      	mov	r0, r3
 800e028:	f7f7 fd38 	bl	8005a9c <HAL_GPIO_EXTI_Callback>
  }
}
 800e02c:	bf00      	nop
 800e02e:	3708      	adds	r7, #8
 800e030:	46bd      	mov	sp, r7
 800e032:	bd80      	pop	{r7, pc}
 800e034:	58000800 	.word	0x58000800

0800e038 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800e03e:	4b0a      	ldr	r3, [pc, #40]	; (800e068 <HAL_HSEM_IRQHandler+0x30>)
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800e044:	4b08      	ldr	r3, [pc, #32]	; (800e068 <HAL_HSEM_IRQHandler+0x30>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	43db      	mvns	r3, r3
 800e04c:	4906      	ldr	r1, [pc, #24]	; (800e068 <HAL_HSEM_IRQHandler+0x30>)
 800e04e:	4013      	ands	r3, r2
 800e050:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800e052:	4a05      	ldr	r2, [pc, #20]	; (800e068 <HAL_HSEM_IRQHandler+0x30>)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 f807 	bl	800e06c <HAL_HSEM_FreeCallback>
}
 800e05e:	bf00      	nop
 800e060:	3708      	adds	r7, #8
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}
 800e066:	bf00      	nop
 800e068:	58001500 	.word	0x58001500

0800e06c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b083      	sub	sp, #12
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr

0800e080 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800e080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e082:	b08b      	sub	sp, #44	; 0x2c
 800e084:	af06      	add	r7, sp, #24
 800e086:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d101      	bne.n	800e092 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800e08e:	2301      	movs	r3, #1
 800e090:	e0cb      	b.n	800e22a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d106      	bne.n	800e0ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800e0a6:	6878      	ldr	r0, [r7, #4]
 800e0a8:	f7fc ff64 	bl	800af74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2203      	movs	r2, #3
 800e0b0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	f005 f943 	bl	8013344 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e0be:	2300      	movs	r3, #0
 800e0c0:	73fb      	strb	r3, [r7, #15]
 800e0c2:	e040      	b.n	800e146 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800e0c4:	7bfb      	ldrb	r3, [r7, #15]
 800e0c6:	6879      	ldr	r1, [r7, #4]
 800e0c8:	1c5a      	adds	r2, r3, #1
 800e0ca:	4613      	mov	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	4413      	add	r3, r2
 800e0d0:	00db      	lsls	r3, r3, #3
 800e0d2:	440b      	add	r3, r1
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800e0da:	7bfb      	ldrb	r3, [r7, #15]
 800e0dc:	6879      	ldr	r1, [r7, #4]
 800e0de:	1c5a      	adds	r2, r3, #1
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	00db      	lsls	r3, r3, #3
 800e0e8:	440b      	add	r3, r1
 800e0ea:	7bfa      	ldrb	r2, [r7, #15]
 800e0ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800e0ee:	7bfb      	ldrb	r3, [r7, #15]
 800e0f0:	6879      	ldr	r1, [r7, #4]
 800e0f2:	1c5a      	adds	r2, r3, #1
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4413      	add	r3, r2
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	440b      	add	r3, r1
 800e0fe:	3303      	adds	r3, #3
 800e100:	2200      	movs	r2, #0
 800e102:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800e104:	7bfa      	ldrb	r2, [r7, #15]
 800e106:	6879      	ldr	r1, [r7, #4]
 800e108:	4613      	mov	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	440b      	add	r3, r1
 800e112:	3338      	adds	r3, #56	; 0x38
 800e114:	2200      	movs	r2, #0
 800e116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800e118:	7bfa      	ldrb	r2, [r7, #15]
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	4613      	mov	r3, r2
 800e11e:	009b      	lsls	r3, r3, #2
 800e120:	4413      	add	r3, r2
 800e122:	00db      	lsls	r3, r3, #3
 800e124:	440b      	add	r3, r1
 800e126:	333c      	adds	r3, #60	; 0x3c
 800e128:	2200      	movs	r2, #0
 800e12a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800e12c:	7bfa      	ldrb	r2, [r7, #15]
 800e12e:	6879      	ldr	r1, [r7, #4]
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	3340      	adds	r3, #64	; 0x40
 800e13c:	2200      	movs	r2, #0
 800e13e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e140:	7bfb      	ldrb	r3, [r7, #15]
 800e142:	3301      	adds	r3, #1
 800e144:	73fb      	strb	r3, [r7, #15]
 800e146:	7bfa      	ldrb	r2, [r7, #15]
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d3b9      	bcc.n	800e0c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e150:	2300      	movs	r3, #0
 800e152:	73fb      	strb	r3, [r7, #15]
 800e154:	e044      	b.n	800e1e0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800e156:	7bfa      	ldrb	r2, [r7, #15]
 800e158:	6879      	ldr	r1, [r7, #4]
 800e15a:	4613      	mov	r3, r2
 800e15c:	009b      	lsls	r3, r3, #2
 800e15e:	4413      	add	r3, r2
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	440b      	add	r3, r1
 800e164:	f203 1369 	addw	r3, r3, #361	; 0x169
 800e168:	2200      	movs	r2, #0
 800e16a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800e16c:	7bfa      	ldrb	r2, [r7, #15]
 800e16e:	6879      	ldr	r1, [r7, #4]
 800e170:	4613      	mov	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4413      	add	r3, r2
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	440b      	add	r3, r1
 800e17a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e17e:	7bfa      	ldrb	r2, [r7, #15]
 800e180:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800e182:	7bfa      	ldrb	r2, [r7, #15]
 800e184:	6879      	ldr	r1, [r7, #4]
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	00db      	lsls	r3, r3, #3
 800e18e:	440b      	add	r3, r1
 800e190:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800e194:	2200      	movs	r2, #0
 800e196:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800e198:	7bfa      	ldrb	r2, [r7, #15]
 800e19a:	6879      	ldr	r1, [r7, #4]
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	00db      	lsls	r3, r3, #3
 800e1a4:	440b      	add	r3, r1
 800e1a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800e1ae:	7bfa      	ldrb	r2, [r7, #15]
 800e1b0:	6879      	ldr	r1, [r7, #4]
 800e1b2:	4613      	mov	r3, r2
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	4413      	add	r3, r2
 800e1b8:	00db      	lsls	r3, r3, #3
 800e1ba:	440b      	add	r3, r1
 800e1bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800e1c4:	7bfa      	ldrb	r2, [r7, #15]
 800e1c6:	6879      	ldr	r1, [r7, #4]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	00db      	lsls	r3, r3, #3
 800e1d0:	440b      	add	r3, r1
 800e1d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800e1da:	7bfb      	ldrb	r3, [r7, #15]
 800e1dc:	3301      	adds	r3, #1
 800e1de:	73fb      	strb	r3, [r7, #15]
 800e1e0:	7bfa      	ldrb	r2, [r7, #15]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d3b5      	bcc.n	800e156 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	603b      	str	r3, [r7, #0]
 800e1f0:	687e      	ldr	r6, [r7, #4]
 800e1f2:	466d      	mov	r5, sp
 800e1f4:	f106 0410 	add.w	r4, r6, #16
 800e1f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e1fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	602b      	str	r3, [r5, #0]
 800e200:	1d33      	adds	r3, r6, #4
 800e202:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e204:	6838      	ldr	r0, [r7, #0]
 800e206:	f005 f8b8 	bl	801337a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2200      	movs	r2, #0
 800e20e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	69db      	ldr	r3, [r3, #28]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d102      	bne.n	800e228 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f805 	bl	800e232 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800e228:	2300      	movs	r3, #0
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3714      	adds	r7, #20
 800e22e:	46bd      	mov	sp, r7
 800e230:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e232 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e232:	b480      	push	{r7}
 800e234:	b085      	sub	sp, #20
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	2201      	movs	r2, #1
 800e244:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e256:	b29b      	uxth	r3, r3
 800e258:	f043 0301 	orr.w	r3, r3, #1
 800e25c:	b29a      	uxth	r2, r3
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	f043 0302 	orr.w	r3, r3, #2
 800e270:	b29a      	uxth	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr

0800e286 <HAL_PKA_Init>:
  *         parameters in the PKA_InitTypeDef and initialize the associated handle.
  * @param  hpka PKA handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PKA_Init(PKA_HandleTypeDef *hpka)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800e28e:	2300      	movs	r3, #0
 800e290:	73fb      	strb	r3, [r7, #15]

  /* Check the PKA handle allocation */
  if (hpka != NULL)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d01d      	beq.n	800e2d4 <HAL_PKA_Init+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_PKA_ALL_INSTANCE(hpka->Instance));

    if (hpka->State == HAL_PKA_STATE_RESET)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	791b      	ldrb	r3, [r3, #4]
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d102      	bne.n	800e2a8 <HAL_PKA_Init+0x22>

      /* Init the low level hardware */
      hpka->MspInitCallback(hpka);
#else
      /* Init the low level hardware */
      HAL_PKA_MspInit(hpka);
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7fc fd94 	bl	800add0 <HAL_PKA_MspInit>
#endif /* USE_HAL_PKA_REGISTER_CALLBACKS */
    }

    /* Set the state to busy */
    hpka->State = HAL_PKA_STATE_BUSY;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	711a      	strb	r2, [r3, #4]

    /* Reset the control register and enable the PKA */
    hpka->Instance->CR = PKA_CR_EN;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	601a      	str	r2, [r3, #0]

    /* Reset any pending flag */
    SET_BIT(hpka->Instance->CLRFR, PKA_CLRFR_PROCENDFC | PKA_CLRFR_RAMERRFC | PKA_CLRFR_ADDRERRFC);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	689a      	ldr	r2, [r3, #8]
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f442 12d0 	orr.w	r2, r2, #1703936	; 0x1a0000
 800e2c4:	609a      	str	r2, [r3, #8]

    /* Initialize the error code */
    hpka->ErrorCode = HAL_PKA_ERROR_NONE;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	609a      	str	r2, [r3, #8]

    /* Set the state to ready */
    hpka->State = HAL_PKA_STATE_READY;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	711a      	strb	r2, [r3, #4]
 800e2d2:	e001      	b.n	800e2d8 <HAL_PKA_Init+0x52>
  }
  else
  {
    err = HAL_ERROR;
 800e2d4:	2301      	movs	r3, #1
 800e2d6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800e2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
	...

0800e2e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e2e8:	4b05      	ldr	r3, [pc, #20]	; (800e300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	4a04      	ldr	r2, [pc, #16]	; (800e300 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800e2ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2f2:	6013      	str	r3, [r2, #0]
}
 800e2f4:	bf00      	nop
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	58000400 	.word	0x58000400

0800e304 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800e304:	b480      	push	{r7}
 800e306:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800e308:	4b04      	ldr	r3, [pc, #16]	; (800e31c <HAL_PWREx_GetVoltageRange+0x18>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800e310:	4618      	mov	r0, r3
 800e312:	46bd      	mov	sp, r7
 800e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e318:	4770      	bx	lr
 800e31a:	bf00      	nop
 800e31c:	58000400 	.word	0x58000400

0800e320 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800e320:	b480      	push	{r7}
 800e322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800e324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e32e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e332:	d101      	bne.n	800e338 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800e334:	2301      	movs	r3, #1
 800e336:	e000      	b.n	800e33a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800e338:	2300      	movs	r3, #0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr

0800e344 <LL_RCC_HSE_Enable>:
{
 800e344:	b480      	push	{r7}
 800e346:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800e348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e356:	6013      	str	r3, [r2, #0]
}
 800e358:	bf00      	nop
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr

0800e362 <LL_RCC_HSE_Disable>:
{
 800e362:	b480      	push	{r7}
 800e364:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800e366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e370:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e374:	6013      	str	r3, [r2, #0]
}
 800e376:	bf00      	nop
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <LL_RCC_HSE_IsReady>:
{
 800e380:	b480      	push	{r7}
 800e382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800e384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e392:	d101      	bne.n	800e398 <LL_RCC_HSE_IsReady+0x18>
 800e394:	2301      	movs	r3, #1
 800e396:	e000      	b.n	800e39a <LL_RCC_HSE_IsReady+0x1a>
 800e398:	2300      	movs	r3, #0
}
 800e39a:	4618      	mov	r0, r3
 800e39c:	46bd      	mov	sp, r7
 800e39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a2:	4770      	bx	lr

0800e3a4 <LL_RCC_HSI_Enable>:
{
 800e3a4:	b480      	push	{r7}
 800e3a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800e3a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e3b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e3b6:	6013      	str	r3, [r2, #0]
}
 800e3b8:	bf00      	nop
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c0:	4770      	bx	lr

0800e3c2 <LL_RCC_HSI_Disable>:
{
 800e3c2:	b480      	push	{r7}
 800e3c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800e3c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e3d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e3d4:	6013      	str	r3, [r2, #0]
}
 800e3d6:	bf00      	nop
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <LL_RCC_HSI_IsReady>:
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e3e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e3f2:	d101      	bne.n	800e3f8 <LL_RCC_HSI_IsReady+0x18>
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e000      	b.n	800e3fa <LL_RCC_HSI_IsReady+0x1a>
 800e3f8:	2300      	movs	r3, #0
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <LL_RCC_HSI_SetCalibTrimming>:
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800e40c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	061b      	lsls	r3, r3, #24
 800e41a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e41e:	4313      	orrs	r3, r2
 800e420:	604b      	str	r3, [r1, #4]
}
 800e422:	bf00      	nop
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr

0800e42e <LL_RCC_HSI48_Enable>:
{
 800e42e:	b480      	push	{r7}
 800e430:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e436:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e43a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e43e:	f043 0301 	orr.w	r3, r3, #1
 800e442:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800e446:	bf00      	nop
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <LL_RCC_HSI48_Disable>:
{
 800e450:	b480      	push	{r7}
 800e452:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800e454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e45c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e460:	f023 0301 	bic.w	r3, r3, #1
 800e464:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800e468:	bf00      	nop
 800e46a:	46bd      	mov	sp, r7
 800e46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e470:	4770      	bx	lr

0800e472 <LL_RCC_HSI48_IsReady>:
{
 800e472:	b480      	push	{r7}
 800e474:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800e476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e47a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e47e:	f003 0302 	and.w	r3, r3, #2
 800e482:	2b02      	cmp	r3, #2
 800e484:	d101      	bne.n	800e48a <LL_RCC_HSI48_IsReady+0x18>
 800e486:	2301      	movs	r3, #1
 800e488:	e000      	b.n	800e48c <LL_RCC_HSI48_IsReady+0x1a>
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr

0800e496 <LL_RCC_LSE_Enable>:
{
 800e496:	b480      	push	{r7}
 800e498:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e49a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e49e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e4a6:	f043 0301 	orr.w	r3, r3, #1
 800e4aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e4ae:	bf00      	nop
 800e4b0:	46bd      	mov	sp, r7
 800e4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b6:	4770      	bx	lr

0800e4b8 <LL_RCC_LSE_Disable>:
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800e4bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e4c8:	f023 0301 	bic.w	r3, r3, #1
 800e4cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e4d0:	bf00      	nop
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr

0800e4da <LL_RCC_LSE_EnableBypass>:
{
 800e4da:	b480      	push	{r7}
 800e4dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e4de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e4ea:	f043 0304 	orr.w	r3, r3, #4
 800e4ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e4f2:	bf00      	nop
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <LL_RCC_LSE_DisableBypass>:
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800e500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e508:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e50c:	f023 0304 	bic.w	r3, r3, #4
 800e510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800e514:	bf00      	nop
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr

0800e51e <LL_RCC_LSE_IsReady>:
{
 800e51e:	b480      	push	{r7}
 800e520:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e522:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e52a:	f003 0302 	and.w	r3, r3, #2
 800e52e:	2b02      	cmp	r3, #2
 800e530:	d101      	bne.n	800e536 <LL_RCC_LSE_IsReady+0x18>
 800e532:	2301      	movs	r3, #1
 800e534:	e000      	b.n	800e538 <LL_RCC_LSE_IsReady+0x1a>
 800e536:	2300      	movs	r3, #0
}
 800e538:	4618      	mov	r0, r3
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr

0800e542 <LL_RCC_LSI1_Enable>:
{
 800e542:	b480      	push	{r7}
 800e544:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e54a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e54e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e552:	f043 0301 	orr.w	r3, r3, #1
 800e556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800e55a:	bf00      	nop
 800e55c:	46bd      	mov	sp, r7
 800e55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e562:	4770      	bx	lr

0800e564 <LL_RCC_LSI1_Disable>:
{
 800e564:	b480      	push	{r7}
 800e566:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800e568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e56c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e570:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e574:	f023 0301 	bic.w	r3, r3, #1
 800e578:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800e57c:	bf00      	nop
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr

0800e586 <LL_RCC_LSI1_IsReady>:
{
 800e586:	b480      	push	{r7}
 800e588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800e58a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e58e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e592:	f003 0302 	and.w	r3, r3, #2
 800e596:	2b02      	cmp	r3, #2
 800e598:	d101      	bne.n	800e59e <LL_RCC_LSI1_IsReady+0x18>
 800e59a:	2301      	movs	r3, #1
 800e59c:	e000      	b.n	800e5a0 <LL_RCC_LSI1_IsReady+0x1a>
 800e59e:	2300      	movs	r3, #0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	46bd      	mov	sp, r7
 800e5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a8:	4770      	bx	lr

0800e5aa <LL_RCC_LSI2_Enable>:
{
 800e5aa:	b480      	push	{r7}
 800e5ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e5ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e5b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e5ba:	f043 0304 	orr.w	r3, r3, #4
 800e5be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800e5c2:	bf00      	nop
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ca:	4770      	bx	lr

0800e5cc <LL_RCC_LSI2_Disable>:
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800e5d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e5d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e5dc:	f023 0304 	bic.w	r3, r3, #4
 800e5e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800e5e4:	bf00      	nop
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ec:	4770      	bx	lr

0800e5ee <LL_RCC_LSI2_IsReady>:
{
 800e5ee:	b480      	push	{r7}
 800e5f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800e5f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e5f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e5fa:	f003 0308 	and.w	r3, r3, #8
 800e5fe:	2b08      	cmp	r3, #8
 800e600:	d101      	bne.n	800e606 <LL_RCC_LSI2_IsReady+0x18>
 800e602:	2301      	movs	r3, #1
 800e604:	e000      	b.n	800e608 <LL_RCC_LSI2_IsReady+0x1a>
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr

0800e612 <LL_RCC_LSI2_SetTrimming>:
{
 800e612:	b480      	push	{r7}
 800e614:	b083      	sub	sp, #12
 800e616:	af00      	add	r7, sp, #0
 800e618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800e61a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e61e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e622:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	021b      	lsls	r3, r3, #8
 800e62a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e62e:	4313      	orrs	r3, r2
 800e630:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800e634:	bf00      	nop
 800e636:	370c      	adds	r7, #12
 800e638:	46bd      	mov	sp, r7
 800e63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63e:	4770      	bx	lr

0800e640 <LL_RCC_MSI_Enable>:
{
 800e640:	b480      	push	{r7}
 800e642:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800e644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e64e:	f043 0301 	orr.w	r3, r3, #1
 800e652:	6013      	str	r3, [r2, #0]
}
 800e654:	bf00      	nop
 800e656:	46bd      	mov	sp, r7
 800e658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65c:	4770      	bx	lr

0800e65e <LL_RCC_MSI_Disable>:
{
 800e65e:	b480      	push	{r7}
 800e660:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800e662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e66c:	f023 0301 	bic.w	r3, r3, #1
 800e670:	6013      	str	r3, [r2, #0]
}
 800e672:	bf00      	nop
 800e674:	46bd      	mov	sp, r7
 800e676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67a:	4770      	bx	lr

0800e67c <LL_RCC_MSI_IsReady>:
{
 800e67c:	b480      	push	{r7}
 800e67e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800e680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	f003 0302 	and.w	r3, r3, #2
 800e68a:	2b02      	cmp	r3, #2
 800e68c:	d101      	bne.n	800e692 <LL_RCC_MSI_IsReady+0x16>
 800e68e:	2301      	movs	r3, #1
 800e690:	e000      	b.n	800e694 <LL_RCC_MSI_IsReady+0x18>
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	46bd      	mov	sp, r7
 800e698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69c:	4770      	bx	lr

0800e69e <LL_RCC_MSI_SetRange>:
{
 800e69e:	b480      	push	{r7}
 800e6a0:	b083      	sub	sp, #12
 800e6a2:	af00      	add	r7, sp, #0
 800e6a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800e6a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e6b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	600b      	str	r3, [r1, #0]
}
 800e6ba:	bf00      	nop
 800e6bc:	370c      	adds	r7, #12
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c4:	4770      	bx	lr

0800e6c6 <LL_RCC_MSI_GetRange>:
{
 800e6c6:	b480      	push	{r7}
 800e6c8:	b083      	sub	sp, #12
 800e6ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800e6cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2bb0      	cmp	r3, #176	; 0xb0
 800e6dc:	d901      	bls.n	800e6e2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800e6de:	23b0      	movs	r3, #176	; 0xb0
 800e6e0:	607b      	str	r3, [r7, #4]
  return msiRange;
 800e6e2:	687b      	ldr	r3, [r7, #4]
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <LL_RCC_MSI_SetCalibTrimming>:
{
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800e6f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	021b      	lsls	r3, r3, #8
 800e706:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e70a:	4313      	orrs	r3, r2
 800e70c:	604b      	str	r3, [r1, #4]
}
 800e70e:	bf00      	nop
 800e710:	370c      	adds	r7, #12
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <LL_RCC_SetSysClkSource>:
{
 800e71a:	b480      	push	{r7}
 800e71c:	b083      	sub	sp, #12
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800e722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e726:	689b      	ldr	r3, [r3, #8]
 800e728:	f023 0203 	bic.w	r2, r3, #3
 800e72c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	4313      	orrs	r3, r2
 800e734:	608b      	str	r3, [r1, #8]
}
 800e736:	bf00      	nop
 800e738:	370c      	adds	r7, #12
 800e73a:	46bd      	mov	sp, r7
 800e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e740:	4770      	bx	lr

0800e742 <LL_RCC_GetSysClkSource>:
{
 800e742:	b480      	push	{r7}
 800e744:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	f003 030c 	and.w	r3, r3, #12
}
 800e750:	4618      	mov	r0, r3
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <LL_RCC_SetAHBPrescaler>:
{
 800e75a:	b480      	push	{r7}
 800e75c:	b083      	sub	sp, #12
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800e762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e76c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	4313      	orrs	r3, r2
 800e774:	608b      	str	r3, [r1, #8]
}
 800e776:	bf00      	nop
 800e778:	370c      	adds	r7, #12
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <LL_C2_RCC_SetAHBPrescaler>:
{
 800e782:	b480      	push	{r7}
 800e784:	b083      	sub	sp, #12
 800e786:	af00      	add	r7, sp, #0
 800e788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800e78a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e78e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e792:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4313      	orrs	r3, r2
 800e79e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800e7a2:	bf00      	nop
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr

0800e7ae <LL_RCC_SetAHB4Prescaler>:
{
 800e7ae:	b480      	push	{r7}
 800e7b0:	b083      	sub	sp, #12
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800e7b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e7be:	f023 020f 	bic.w	r2, r3, #15
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	091b      	lsrs	r3, r3, #4
 800e7c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800e7d0:	bf00      	nop
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <LL_RCC_SetAPB1Prescaler>:
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800e7e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e7e8:	689b      	ldr	r3, [r3, #8]
 800e7ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e7ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	4313      	orrs	r3, r2
 800e7f6:	608b      	str	r3, [r1, #8]
}
 800e7f8:	bf00      	nop
 800e7fa:	370c      	adds	r7, #12
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e802:	4770      	bx	lr

0800e804 <LL_RCC_SetAPB2Prescaler>:
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800e80c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	608b      	str	r3, [r1, #8]
}
 800e820:	bf00      	nop
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr

0800e82c <LL_RCC_GetAHBPrescaler>:
{
 800e82c:	b480      	push	{r7}
 800e82e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e834:	689b      	ldr	r3, [r3, #8]
 800e836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <LL_RCC_GetAHB4Prescaler>:
{
 800e844:	b480      	push	{r7}
 800e846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800e848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e84c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e850:	011b      	lsls	r3, r3, #4
 800e852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800e856:	4618      	mov	r0, r3
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr

0800e860 <LL_RCC_GetAPB1Prescaler>:
{
 800e860:	b480      	push	{r7}
 800e862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800e86e:	4618      	mov	r0, r3
 800e870:	46bd      	mov	sp, r7
 800e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e876:	4770      	bx	lr

0800e878 <LL_RCC_GetAPB2Prescaler>:
{
 800e878:	b480      	push	{r7}
 800e87a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800e87c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800e886:	4618      	mov	r0, r3
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800e890:	b480      	push	{r7}
 800e892:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800e894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e89e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e8a2:	6013      	str	r3, [r2, #0]
}
 800e8a4:	bf00      	nop
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800e8ae:	b480      	push	{r7}
 800e8b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800e8b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800e8bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e8c0:	6013      	str	r3, [r2, #0]
}
 800e8c2:	bf00      	nop
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ca:	4770      	bx	lr

0800e8cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800e8d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8de:	d101      	bne.n	800e8e4 <LL_RCC_PLL_IsReady+0x18>
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e000      	b.n	800e8e6 <LL_RCC_PLL_IsReady+0x1a>
 800e8e4:	2300      	movs	r3, #0
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ee:	4770      	bx	lr

0800e8f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e8f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	0a1b      	lsrs	r3, r3, #8
 800e8fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800e900:	4618      	mov	r0, r3
 800e902:	46bd      	mov	sp, r7
 800e904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e908:	4770      	bx	lr

0800e90a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e90a:	b480      	push	{r7}
 800e90c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e90e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800e918:	4618      	mov	r0, r3
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr

0800e922 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e922:	b480      	push	{r7}
 800e924:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800e930:	4618      	mov	r0, r3
 800e932:	46bd      	mov	sp, r7
 800e934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e938:	4770      	bx	lr

0800e93a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e93a:	b480      	push	{r7}
 800e93c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e93e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e942:	68db      	ldr	r3, [r3, #12]
 800e944:	f003 0303 	and.w	r3, r3, #3
}
 800e948:	4618      	mov	r0, r3
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800e952:	b480      	push	{r7}
 800e954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800e956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e95a:	689b      	ldr	r3, [r3, #8]
 800e95c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e964:	d101      	bne.n	800e96a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800e966:	2301      	movs	r3, #1
 800e968:	e000      	b.n	800e96c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr

0800e976 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800e976:	b480      	push	{r7}
 800e978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800e97a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e97e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e98a:	d101      	bne.n	800e990 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800e98c:	2301      	movs	r3, #1
 800e98e:	e000      	b.n	800e992 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800e990:	2300      	movs	r3, #0
}
 800e992:	4618      	mov	r0, r3
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800e9a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e9a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800e9a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9b0:	d101      	bne.n	800e9b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	e000      	b.n	800e9b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800e9b6:	2300      	movs	r3, #0
}
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800e9c2:	b480      	push	{r7}
 800e9c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800e9c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e9ca:	689b      	ldr	r3, [r3, #8]
 800e9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e9d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e9d4:	d101      	bne.n	800e9da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800e9d6:	2301      	movs	r3, #1
 800e9d8:	e000      	b.n	800e9dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e4:	4770      	bx	lr

0800e9e6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800e9e6:	b480      	push	{r7}
 800e9e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800e9ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e9f8:	d101      	bne.n	800e9fe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	e000      	b.n	800ea00 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr
	...

0800ea0c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ea0c:	b590      	push	{r4, r7, lr}
 800ea0e:	b08d      	sub	sp, #52	; 0x34
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d101      	bne.n	800ea1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e363      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f003 0320 	and.w	r3, r3, #32
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f000 808d 	beq.w	800eb46 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ea2c:	f7ff fe89 	bl	800e742 <LL_RCC_GetSysClkSource>
 800ea30:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ea32:	f7ff ff82 	bl	800e93a <LL_RCC_PLL_GetMainSource>
 800ea36:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ea38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d005      	beq.n	800ea4a <HAL_RCC_OscConfig+0x3e>
 800ea3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea40:	2b0c      	cmp	r3, #12
 800ea42:	d147      	bne.n	800ead4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	2b01      	cmp	r3, #1
 800ea48:	d144      	bne.n	800ead4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	69db      	ldr	r3, [r3, #28]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d101      	bne.n	800ea56 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800ea52:	2301      	movs	r3, #1
 800ea54:	e347      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ea5a:	f7ff fe34 	bl	800e6c6 <LL_RCC_MSI_GetRange>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	429c      	cmp	r4, r3
 800ea62:	d914      	bls.n	800ea8e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 fd2f 	bl	800f4cc <RCC_SetFlashLatencyFromMSIRange>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d001      	beq.n	800ea78 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800ea74:	2301      	movs	r3, #1
 800ea76:	e336      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7ff fe0e 	bl	800e69e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	6a1b      	ldr	r3, [r3, #32]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7ff fe32 	bl	800e6f0 <LL_RCC_MSI_SetCalibTrimming>
 800ea8c:	e013      	b.n	800eab6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea92:	4618      	mov	r0, r3
 800ea94:	f7ff fe03 	bl	800e69e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a1b      	ldr	r3, [r3, #32]
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	f7ff fe27 	bl	800e6f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f000 fd10 	bl	800f4cc <RCC_SetFlashLatencyFromMSIRange>
 800eaac:	4603      	mov	r3, r0
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	e317      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800eab6:	f000 fcc9 	bl	800f44c <HAL_RCC_GetHCLKFreq>
 800eaba:	4603      	mov	r3, r0
 800eabc:	4aa4      	ldr	r2, [pc, #656]	; (800ed50 <HAL_RCC_OscConfig+0x344>)
 800eabe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800eac0:	4ba4      	ldr	r3, [pc, #656]	; (800ed54 <HAL_RCC_OscConfig+0x348>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4618      	mov	r0, r3
 800eac6:	f7fe fc71 	bl	800d3ac <HAL_InitTick>
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d039      	beq.n	800eb44 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800ead0:	2301      	movs	r3, #1
 800ead2:	e308      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	69db      	ldr	r3, [r3, #28]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d01e      	beq.n	800eb1a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800eadc:	f7ff fdb0 	bl	800e640 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800eae0:	f7fe fcb2 	bl	800d448 <HAL_GetTick>
 800eae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800eae6:	e008      	b.n	800eafa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eae8:	f7fe fcae 	bl	800d448 <HAL_GetTick>
 800eaec:	4602      	mov	r2, r0
 800eaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf0:	1ad3      	subs	r3, r2, r3
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d901      	bls.n	800eafa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800eaf6:	2303      	movs	r3, #3
 800eaf8:	e2f5      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800eafa:	f7ff fdbf 	bl	800e67c <LL_RCC_MSI_IsReady>
 800eafe:	4603      	mov	r3, r0
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d0f1      	beq.n	800eae8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb08:	4618      	mov	r0, r3
 800eb0a:	f7ff fdc8 	bl	800e69e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6a1b      	ldr	r3, [r3, #32]
 800eb12:	4618      	mov	r0, r3
 800eb14:	f7ff fdec 	bl	800e6f0 <LL_RCC_MSI_SetCalibTrimming>
 800eb18:	e015      	b.n	800eb46 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800eb1a:	f7ff fda0 	bl	800e65e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800eb1e:	f7fe fc93 	bl	800d448 <HAL_GetTick>
 800eb22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800eb24:	e008      	b.n	800eb38 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800eb26:	f7fe fc8f 	bl	800d448 <HAL_GetTick>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	1ad3      	subs	r3, r2, r3
 800eb30:	2b02      	cmp	r3, #2
 800eb32:	d901      	bls.n	800eb38 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800eb34:	2303      	movs	r3, #3
 800eb36:	e2d6      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800eb38:	f7ff fda0 	bl	800e67c <LL_RCC_MSI_IsReady>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1f1      	bne.n	800eb26 <HAL_RCC_OscConfig+0x11a>
 800eb42:	e000      	b.n	800eb46 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800eb44:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	f003 0301 	and.w	r3, r3, #1
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d047      	beq.n	800ebe2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800eb52:	f7ff fdf6 	bl	800e742 <LL_RCC_GetSysClkSource>
 800eb56:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800eb58:	f7ff feef 	bl	800e93a <LL_RCC_PLL_GetMainSource>
 800eb5c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800eb5e:	6a3b      	ldr	r3, [r7, #32]
 800eb60:	2b08      	cmp	r3, #8
 800eb62:	d005      	beq.n	800eb70 <HAL_RCC_OscConfig+0x164>
 800eb64:	6a3b      	ldr	r3, [r7, #32]
 800eb66:	2b0c      	cmp	r3, #12
 800eb68:	d108      	bne.n	800eb7c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	d105      	bne.n	800eb7c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d134      	bne.n	800ebe2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e2b4      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb84:	d102      	bne.n	800eb8c <HAL_RCC_OscConfig+0x180>
 800eb86:	f7ff fbdd 	bl	800e344 <LL_RCC_HSE_Enable>
 800eb8a:	e001      	b.n	800eb90 <HAL_RCC_OscConfig+0x184>
 800eb8c:	f7ff fbe9 	bl	800e362 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	685b      	ldr	r3, [r3, #4]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d012      	beq.n	800ebbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800eb98:	f7fe fc56 	bl	800d448 <HAL_GetTick>
 800eb9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800eb9e:	e008      	b.n	800ebb2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800eba0:	f7fe fc52 	bl	800d448 <HAL_GetTick>
 800eba4:	4602      	mov	r2, r0
 800eba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	2b64      	cmp	r3, #100	; 0x64
 800ebac:	d901      	bls.n	800ebb2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ebae:	2303      	movs	r3, #3
 800ebb0:	e299      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800ebb2:	f7ff fbe5 	bl	800e380 <LL_RCC_HSE_IsReady>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d0f1      	beq.n	800eba0 <HAL_RCC_OscConfig+0x194>
 800ebbc:	e011      	b.n	800ebe2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ebbe:	f7fe fc43 	bl	800d448 <HAL_GetTick>
 800ebc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800ebc4:	e008      	b.n	800ebd8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ebc6:	f7fe fc3f 	bl	800d448 <HAL_GetTick>
 800ebca:	4602      	mov	r2, r0
 800ebcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	2b64      	cmp	r3, #100	; 0x64
 800ebd2:	d901      	bls.n	800ebd8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	e286      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800ebd8:	f7ff fbd2 	bl	800e380 <LL_RCC_HSE_IsReady>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d1f1      	bne.n	800ebc6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f003 0302 	and.w	r3, r3, #2
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d04c      	beq.n	800ec88 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ebee:	f7ff fda8 	bl	800e742 <LL_RCC_GetSysClkSource>
 800ebf2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800ebf4:	f7ff fea1 	bl	800e93a <LL_RCC_PLL_GetMainSource>
 800ebf8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	2b04      	cmp	r3, #4
 800ebfe:	d005      	beq.n	800ec0c <HAL_RCC_OscConfig+0x200>
 800ec00:	69bb      	ldr	r3, [r7, #24]
 800ec02:	2b0c      	cmp	r3, #12
 800ec04:	d10e      	bne.n	800ec24 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800ec06:	697b      	ldr	r3, [r7, #20]
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	d10b      	bne.n	800ec24 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d101      	bne.n	800ec18 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	e266      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	f7ff fbf1 	bl	800e404 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800ec22:	e031      	b.n	800ec88 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d019      	beq.n	800ec60 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ec2c:	f7ff fbba 	bl	800e3a4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec30:	f7fe fc0a 	bl	800d448 <HAL_GetTick>
 800ec34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800ec36:	e008      	b.n	800ec4a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec38:	f7fe fc06 	bl	800d448 <HAL_GetTick>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d901      	bls.n	800ec4a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ec46:	2303      	movs	r3, #3
 800ec48:	e24d      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800ec4a:	f7ff fbc9 	bl	800e3e0 <LL_RCC_HSI_IsReady>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d0f1      	beq.n	800ec38 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	4618      	mov	r0, r3
 800ec5a:	f7ff fbd3 	bl	800e404 <LL_RCC_HSI_SetCalibTrimming>
 800ec5e:	e013      	b.n	800ec88 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ec60:	f7ff fbaf 	bl	800e3c2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec64:	f7fe fbf0 	bl	800d448 <HAL_GetTick>
 800ec68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800ec6a:	e008      	b.n	800ec7e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ec6c:	f7fe fbec 	bl	800d448 <HAL_GetTick>
 800ec70:	4602      	mov	r2, r0
 800ec72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	2b02      	cmp	r3, #2
 800ec78:	d901      	bls.n	800ec7e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800ec7a:	2303      	movs	r3, #3
 800ec7c:	e233      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800ec7e:	f7ff fbaf 	bl	800e3e0 <LL_RCC_HSI_IsReady>
 800ec82:	4603      	mov	r3, r0
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d1f1      	bne.n	800ec6c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f003 0308 	and.w	r3, r3, #8
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d106      	bne.n	800eca2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	f000 80a3 	beq.w	800ede8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d076      	beq.n	800ed98 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f003 0310 	and.w	r3, r3, #16
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d046      	beq.n	800ed44 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800ecb6:	f7ff fc66 	bl	800e586 <LL_RCC_LSI1_IsReady>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d113      	bne.n	800ece8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800ecc0:	f7ff fc3f 	bl	800e542 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ecc4:	f7fe fbc0 	bl	800d448 <HAL_GetTick>
 800ecc8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ecca:	e008      	b.n	800ecde <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800eccc:	f7fe fbbc 	bl	800d448 <HAL_GetTick>
 800ecd0:	4602      	mov	r2, r0
 800ecd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd4:	1ad3      	subs	r3, r2, r3
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d901      	bls.n	800ecde <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800ecda:	2303      	movs	r3, #3
 800ecdc:	e203      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800ecde:	f7ff fc52 	bl	800e586 <LL_RCC_LSI1_IsReady>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d0f1      	beq.n	800eccc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800ece8:	f7ff fc5f 	bl	800e5aa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ecec:	f7fe fbac 	bl	800d448 <HAL_GetTick>
 800ecf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ecf2:	e008      	b.n	800ed06 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ecf4:	f7fe fba8 	bl	800d448 <HAL_GetTick>
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfc:	1ad3      	subs	r3, r2, r3
 800ecfe:	2b03      	cmp	r3, #3
 800ed00:	d901      	bls.n	800ed06 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800ed02:	2303      	movs	r3, #3
 800ed04:	e1ef      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800ed06:	f7ff fc72 	bl	800e5ee <LL_RCC_LSI2_IsReady>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d0f1      	beq.n	800ecf4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	699b      	ldr	r3, [r3, #24]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff fc7c 	bl	800e612 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800ed1a:	f7ff fc23 	bl	800e564 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed1e:	f7fe fb93 	bl	800d448 <HAL_GetTick>
 800ed22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ed24:	e008      	b.n	800ed38 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ed26:	f7fe fb8f 	bl	800d448 <HAL_GetTick>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2e:	1ad3      	subs	r3, r2, r3
 800ed30:	2b02      	cmp	r3, #2
 800ed32:	d901      	bls.n	800ed38 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800ed34:	2303      	movs	r3, #3
 800ed36:	e1d6      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800ed38:	f7ff fc25 	bl	800e586 <LL_RCC_LSI1_IsReady>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d1f1      	bne.n	800ed26 <HAL_RCC_OscConfig+0x31a>
 800ed42:	e051      	b.n	800ede8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800ed44:	f7ff fbfd 	bl	800e542 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed48:	f7fe fb7e 	bl	800d448 <HAL_GetTick>
 800ed4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ed4e:	e00c      	b.n	800ed6a <HAL_RCC_OscConfig+0x35e>
 800ed50:	20000014 	.word	0x20000014
 800ed54:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ed58:	f7fe fb76 	bl	800d448 <HAL_GetTick>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed60:	1ad3      	subs	r3, r2, r3
 800ed62:	2b02      	cmp	r3, #2
 800ed64:	d901      	bls.n	800ed6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800ed66:	2303      	movs	r3, #3
 800ed68:	e1bd      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ed6a:	f7ff fc0c 	bl	800e586 <LL_RCC_LSI1_IsReady>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d0f1      	beq.n	800ed58 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ed74:	f7ff fc2a 	bl	800e5cc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ed78:	e008      	b.n	800ed8c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ed7a:	f7fe fb65 	bl	800d448 <HAL_GetTick>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed82:	1ad3      	subs	r3, r2, r3
 800ed84:	2b03      	cmp	r3, #3
 800ed86:	d901      	bls.n	800ed8c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ed88:	2303      	movs	r3, #3
 800ed8a:	e1ac      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ed8c:	f7ff fc2f 	bl	800e5ee <LL_RCC_LSI2_IsReady>
 800ed90:	4603      	mov	r3, r0
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d1f1      	bne.n	800ed7a <HAL_RCC_OscConfig+0x36e>
 800ed96:	e027      	b.n	800ede8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ed98:	f7ff fc18 	bl	800e5cc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ed9c:	f7fe fb54 	bl	800d448 <HAL_GetTick>
 800eda0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800eda2:	e008      	b.n	800edb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800eda4:	f7fe fb50 	bl	800d448 <HAL_GetTick>
 800eda8:	4602      	mov	r2, r0
 800edaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d901      	bls.n	800edb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e197      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800edb6:	f7ff fc1a 	bl	800e5ee <LL_RCC_LSI2_IsReady>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1f1      	bne.n	800eda4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800edc0:	f7ff fbd0 	bl	800e564 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800edc4:	f7fe fb40 	bl	800d448 <HAL_GetTick>
 800edc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800edca:	e008      	b.n	800edde <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800edcc:	f7fe fb3c 	bl	800d448 <HAL_GetTick>
 800edd0:	4602      	mov	r2, r0
 800edd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	d901      	bls.n	800edde <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800edda:	2303      	movs	r3, #3
 800eddc:	e183      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800edde:	f7ff fbd2 	bl	800e586 <LL_RCC_LSI1_IsReady>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1f1      	bne.n	800edcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f003 0304 	and.w	r3, r3, #4
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d05b      	beq.n	800eeac <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800edf4:	4ba7      	ldr	r3, [pc, #668]	; (800f094 <HAL_RCC_OscConfig+0x688>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d114      	bne.n	800ee2a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ee00:	f7ff fa70 	bl	800e2e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ee04:	f7fe fb20 	bl	800d448 <HAL_GetTick>
 800ee08:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ee0a:	e008      	b.n	800ee1e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ee0c:	f7fe fb1c 	bl	800d448 <HAL_GetTick>
 800ee10:	4602      	mov	r2, r0
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	1ad3      	subs	r3, r2, r3
 800ee16:	2b02      	cmp	r3, #2
 800ee18:	d901      	bls.n	800ee1e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ee1a:	2303      	movs	r3, #3
 800ee1c:	e163      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ee1e:	4b9d      	ldr	r3, [pc, #628]	; (800f094 <HAL_RCC_OscConfig+0x688>)
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d0f0      	beq.n	800ee0c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d102      	bne.n	800ee38 <HAL_RCC_OscConfig+0x42c>
 800ee32:	f7ff fb30 	bl	800e496 <LL_RCC_LSE_Enable>
 800ee36:	e00c      	b.n	800ee52 <HAL_RCC_OscConfig+0x446>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	2b05      	cmp	r3, #5
 800ee3e:	d104      	bne.n	800ee4a <HAL_RCC_OscConfig+0x43e>
 800ee40:	f7ff fb4b 	bl	800e4da <LL_RCC_LSE_EnableBypass>
 800ee44:	f7ff fb27 	bl	800e496 <LL_RCC_LSE_Enable>
 800ee48:	e003      	b.n	800ee52 <HAL_RCC_OscConfig+0x446>
 800ee4a:	f7ff fb35 	bl	800e4b8 <LL_RCC_LSE_Disable>
 800ee4e:	f7ff fb55 	bl	800e4fc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	689b      	ldr	r3, [r3, #8]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d014      	beq.n	800ee84 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee5a:	f7fe faf5 	bl	800d448 <HAL_GetTick>
 800ee5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ee60:	e00a      	b.n	800ee78 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee62:	f7fe faf1 	bl	800d448 <HAL_GetTick>
 800ee66:	4602      	mov	r2, r0
 800ee68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d901      	bls.n	800ee78 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e136      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ee78:	f7ff fb51 	bl	800e51e <LL_RCC_LSE_IsReady>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d0ef      	beq.n	800ee62 <HAL_RCC_OscConfig+0x456>
 800ee82:	e013      	b.n	800eeac <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ee84:	f7fe fae0 	bl	800d448 <HAL_GetTick>
 800ee88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ee8a:	e00a      	b.n	800eea2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ee8c:	f7fe fadc 	bl	800d448 <HAL_GetTick>
 800ee90:	4602      	mov	r2, r0
 800ee92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee94:	1ad3      	subs	r3, r2, r3
 800ee96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d901      	bls.n	800eea2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ee9e:	2303      	movs	r3, #3
 800eea0:	e121      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800eea2:	f7ff fb3c 	bl	800e51e <LL_RCC_LSE_IsReady>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d1ef      	bne.n	800ee8c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d02c      	beq.n	800ef12 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d014      	beq.n	800eeea <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800eec0:	f7ff fab5 	bl	800e42e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eec4:	f7fe fac0 	bl	800d448 <HAL_GetTick>
 800eec8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800eeca:	e008      	b.n	800eede <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eecc:	f7fe fabc 	bl	800d448 <HAL_GetTick>
 800eed0:	4602      	mov	r2, r0
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	1ad3      	subs	r3, r2, r3
 800eed6:	2b02      	cmp	r3, #2
 800eed8:	d901      	bls.n	800eede <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800eeda:	2303      	movs	r3, #3
 800eedc:	e103      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800eede:	f7ff fac8 	bl	800e472 <LL_RCC_HSI48_IsReady>
 800eee2:	4603      	mov	r3, r0
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d0f1      	beq.n	800eecc <HAL_RCC_OscConfig+0x4c0>
 800eee8:	e013      	b.n	800ef12 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eeea:	f7ff fab1 	bl	800e450 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eeee:	f7fe faab 	bl	800d448 <HAL_GetTick>
 800eef2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800eef4:	e008      	b.n	800ef08 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800eef6:	f7fe faa7 	bl	800d448 <HAL_GetTick>
 800eefa:	4602      	mov	r2, r0
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	1ad3      	subs	r3, r2, r3
 800ef00:	2b02      	cmp	r3, #2
 800ef02:	d901      	bls.n	800ef08 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ef04:	2303      	movs	r3, #3
 800ef06:	e0ee      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ef08:	f7ff fab3 	bl	800e472 <LL_RCC_HSI48_IsReady>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d1f1      	bne.n	800eef6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	f000 80e4 	beq.w	800f0e4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ef1c:	f7ff fc11 	bl	800e742 <LL_RCC_GetSysClkSource>
 800ef20:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ef22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef2e:	2b02      	cmp	r3, #2
 800ef30:	f040 80b4 	bne.w	800f09c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f003 0203 	and.w	r2, r3, #3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	d123      	bne.n	800ef8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ef4c:	429a      	cmp	r2, r3
 800ef4e:	d11c      	bne.n	800ef8a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	0a1b      	lsrs	r3, r3, #8
 800ef54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d114      	bne.n	800ef8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d10d      	bne.n	800ef8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ef78:	429a      	cmp	r2, r3
 800ef7a:	d106      	bne.n	800ef8a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d05d      	beq.n	800f046 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	2b0c      	cmp	r3, #12
 800ef8e:	d058      	beq.n	800f042 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ef90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d001      	beq.n	800efa2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	e0a1      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800efa2:	f7ff fc84 	bl	800e8ae <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800efa6:	f7fe fa4f 	bl	800d448 <HAL_GetTick>
 800efaa:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800efac:	e008      	b.n	800efc0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efae:	f7fe fa4b 	bl	800d448 <HAL_GetTick>
 800efb2:	4602      	mov	r2, r0
 800efb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb6:	1ad3      	subs	r3, r2, r3
 800efb8:	2b02      	cmp	r3, #2
 800efba:	d901      	bls.n	800efc0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800efbc:	2303      	movs	r3, #3
 800efbe:	e092      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800efc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1ef      	bne.n	800efae <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800efce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800efd2:	68da      	ldr	r2, [r3, #12]
 800efd4:	4b30      	ldr	r3, [pc, #192]	; (800f098 <HAL_RCC_OscConfig+0x68c>)
 800efd6:	4013      	ands	r3, r2
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800efdc:	687a      	ldr	r2, [r7, #4]
 800efde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800efe0:	4311      	orrs	r1, r2
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800efe6:	0212      	lsls	r2, r2, #8
 800efe8:	4311      	orrs	r1, r2
 800efea:	687a      	ldr	r2, [r7, #4]
 800efec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800efee:	4311      	orrs	r1, r2
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800eff4:	4311      	orrs	r1, r2
 800eff6:	687a      	ldr	r2, [r7, #4]
 800eff8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800effa:	430a      	orrs	r2, r1
 800effc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f000:	4313      	orrs	r3, r2
 800f002:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f004:	f7ff fc44 	bl	800e890 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f016:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f018:	f7fe fa16 	bl	800d448 <HAL_GetTick>
 800f01c:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f01e:	e008      	b.n	800f032 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f020:	f7fe fa12 	bl	800d448 <HAL_GetTick>
 800f024:	4602      	mov	r2, r0
 800f026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f028:	1ad3      	subs	r3, r2, r3
 800f02a:	2b02      	cmp	r3, #2
 800f02c:	d901      	bls.n	800f032 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800f02e:	2303      	movs	r3, #3
 800f030:	e059      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d0ef      	beq.n	800f020 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f040:	e050      	b.n	800f0e4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f042:	2301      	movs	r3, #1
 800f044:	e04f      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f050:	2b00      	cmp	r3, #0
 800f052:	d147      	bne.n	800f0e4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f054:	f7ff fc1c 	bl	800e890 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f05c:	68db      	ldr	r3, [r3, #12]
 800f05e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f066:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f068:	f7fe f9ee 	bl	800d448 <HAL_GetTick>
 800f06c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f06e:	e008      	b.n	800f082 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f070:	f7fe f9ea 	bl	800d448 <HAL_GetTick>
 800f074:	4602      	mov	r2, r0
 800f076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	2b02      	cmp	r3, #2
 800f07c:	d901      	bls.n	800f082 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800f07e:	2303      	movs	r3, #3
 800f080:	e031      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d0ef      	beq.n	800f070 <HAL_RCC_OscConfig+0x664>
 800f090:	e028      	b.n	800f0e4 <HAL_RCC_OscConfig+0x6d8>
 800f092:	bf00      	nop
 800f094:	58000400 	.word	0x58000400
 800f098:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	2b0c      	cmp	r3, #12
 800f0a0:	d01e      	beq.n	800f0e0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f0a2:	f7ff fc04 	bl	800e8ae <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f0a6:	f7fe f9cf 	bl	800d448 <HAL_GetTick>
 800f0aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f0ac:	e008      	b.n	800f0c0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f0ae:	f7fe f9cb 	bl	800d448 <HAL_GetTick>
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b6:	1ad3      	subs	r3, r2, r3
 800f0b8:	2b02      	cmp	r3, #2
 800f0ba:	d901      	bls.n	800f0c0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800f0bc:	2303      	movs	r3, #3
 800f0be:	e012      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f0c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d1ef      	bne.n	800f0ae <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800f0ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f0d2:	68da      	ldr	r2, [r3, #12]
 800f0d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f0d8:	4b05      	ldr	r3, [pc, #20]	; (800f0f0 <HAL_RCC_OscConfig+0x6e4>)
 800f0da:	4013      	ands	r3, r2
 800f0dc:	60cb      	str	r3, [r1, #12]
 800f0de:	e001      	b.n	800f0e4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e000      	b.n	800f0e6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800f0e4:	2300      	movs	r3, #0
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3734      	adds	r7, #52	; 0x34
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd90      	pop	{r4, r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	eefefffc 	.word	0xeefefffc

0800f0f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f104:	2301      	movs	r3, #1
 800f106:	e12d      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f108:	4b98      	ldr	r3, [pc, #608]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f003 0307 	and.w	r3, r3, #7
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	429a      	cmp	r2, r3
 800f114:	d91b      	bls.n	800f14e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f116:	4b95      	ldr	r3, [pc, #596]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	f023 0207 	bic.w	r2, r3, #7
 800f11e:	4993      	ldr	r1, [pc, #588]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	4313      	orrs	r3, r2
 800f124:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f126:	f7fe f98f 	bl	800d448 <HAL_GetTick>
 800f12a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f12c:	e008      	b.n	800f140 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f12e:	f7fe f98b 	bl	800d448 <HAL_GetTick>
 800f132:	4602      	mov	r2, r0
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	1ad3      	subs	r3, r2, r3
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d901      	bls.n	800f140 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800f13c:	2303      	movs	r3, #3
 800f13e:	e111      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f140:	4b8a      	ldr	r3, [pc, #552]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f003 0307 	and.w	r3, r3, #7
 800f148:	683a      	ldr	r2, [r7, #0]
 800f14a:	429a      	cmp	r2, r3
 800f14c:	d1ef      	bne.n	800f12e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	f003 0302 	and.w	r3, r3, #2
 800f156:	2b00      	cmp	r3, #0
 800f158:	d016      	beq.n	800f188 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	689b      	ldr	r3, [r3, #8]
 800f15e:	4618      	mov	r0, r3
 800f160:	f7ff fafb 	bl	800e75a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f164:	f7fe f970 	bl	800d448 <HAL_GetTick>
 800f168:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f16a:	e008      	b.n	800f17e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f16c:	f7fe f96c 	bl	800d448 <HAL_GetTick>
 800f170:	4602      	mov	r2, r0
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	1ad3      	subs	r3, r2, r3
 800f176:	2b02      	cmp	r3, #2
 800f178:	d901      	bls.n	800f17e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800f17a:	2303      	movs	r3, #3
 800f17c:	e0f2      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800f17e:	f7ff fbe8 	bl	800e952 <LL_RCC_IsActiveFlag_HPRE>
 800f182:	4603      	mov	r3, r0
 800f184:	2b00      	cmp	r3, #0
 800f186:	d0f1      	beq.n	800f16c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f003 0320 	and.w	r3, r3, #32
 800f190:	2b00      	cmp	r3, #0
 800f192:	d016      	beq.n	800f1c2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	695b      	ldr	r3, [r3, #20]
 800f198:	4618      	mov	r0, r3
 800f19a:	f7ff faf2 	bl	800e782 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f19e:	f7fe f953 	bl	800d448 <HAL_GetTick>
 800f1a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f1a4:	e008      	b.n	800f1b8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f1a6:	f7fe f94f 	bl	800d448 <HAL_GetTick>
 800f1aa:	4602      	mov	r2, r0
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	1ad3      	subs	r3, r2, r3
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	d901      	bls.n	800f1b8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800f1b4:	2303      	movs	r3, #3
 800f1b6:	e0d5      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800f1b8:	f7ff fbdd 	bl	800e976 <LL_RCC_IsActiveFlag_C2HPRE>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d0f1      	beq.n	800f1a6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d016      	beq.n	800f1fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7ff faeb 	bl	800e7ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f1d8:	f7fe f936 	bl	800d448 <HAL_GetTick>
 800f1dc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f1de:	e008      	b.n	800f1f2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f1e0:	f7fe f932 	bl	800d448 <HAL_GetTick>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	1ad3      	subs	r3, r2, r3
 800f1ea:	2b02      	cmp	r3, #2
 800f1ec:	d901      	bls.n	800f1f2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800f1ee:	2303      	movs	r3, #3
 800f1f0:	e0b8      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800f1f2:	f7ff fbd3 	bl	800e99c <LL_RCC_IsActiveFlag_SHDHPRE>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d0f1      	beq.n	800f1e0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f003 0304 	and.w	r3, r3, #4
 800f204:	2b00      	cmp	r3, #0
 800f206:	d016      	beq.n	800f236 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	68db      	ldr	r3, [r3, #12]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7ff fae5 	bl	800e7dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f212:	f7fe f919 	bl	800d448 <HAL_GetTick>
 800f216:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f218:	e008      	b.n	800f22c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f21a:	f7fe f915 	bl	800d448 <HAL_GetTick>
 800f21e:	4602      	mov	r2, r0
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	1ad3      	subs	r3, r2, r3
 800f224:	2b02      	cmp	r3, #2
 800f226:	d901      	bls.n	800f22c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800f228:	2303      	movs	r3, #3
 800f22a:	e09b      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800f22c:	f7ff fbc9 	bl	800e9c2 <LL_RCC_IsActiveFlag_PPRE1>
 800f230:	4603      	mov	r3, r0
 800f232:	2b00      	cmp	r3, #0
 800f234:	d0f1      	beq.n	800f21a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f003 0308 	and.w	r3, r3, #8
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d017      	beq.n	800f272 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	00db      	lsls	r3, r3, #3
 800f248:	4618      	mov	r0, r3
 800f24a:	f7ff fadb 	bl	800e804 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800f24e:	f7fe f8fb 	bl	800d448 <HAL_GetTick>
 800f252:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f254:	e008      	b.n	800f268 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800f256:	f7fe f8f7 	bl	800d448 <HAL_GetTick>
 800f25a:	4602      	mov	r2, r0
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	2b02      	cmp	r3, #2
 800f262:	d901      	bls.n	800f268 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800f264:	2303      	movs	r3, #3
 800f266:	e07d      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800f268:	f7ff fbbd 	bl	800e9e6 <LL_RCC_IsActiveFlag_PPRE2>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d0f1      	beq.n	800f256 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f003 0301 	and.w	r3, r3, #1
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d043      	beq.n	800f306 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	2b02      	cmp	r3, #2
 800f284:	d106      	bne.n	800f294 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800f286:	f7ff f87b 	bl	800e380 <LL_RCC_HSE_IsReady>
 800f28a:	4603      	mov	r3, r0
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d11e      	bne.n	800f2ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f290:	2301      	movs	r3, #1
 800f292:	e067      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	685b      	ldr	r3, [r3, #4]
 800f298:	2b03      	cmp	r3, #3
 800f29a:	d106      	bne.n	800f2aa <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800f29c:	f7ff fb16 	bl	800e8cc <LL_RCC_PLL_IsReady>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d113      	bne.n	800f2ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	e05c      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d106      	bne.n	800f2c0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800f2b2:	f7ff f9e3 	bl	800e67c <LL_RCC_MSI_IsReady>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d108      	bne.n	800f2ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	e051      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800f2c0:	f7ff f88e 	bl	800e3e0 <LL_RCC_HSI_IsReady>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d101      	bne.n	800f2ce <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e04a      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	685b      	ldr	r3, [r3, #4]
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7ff fa21 	bl	800e71a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f2d8:	f7fe f8b6 	bl	800d448 <HAL_GetTick>
 800f2dc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2de:	e00a      	b.n	800f2f6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f2e0:	f7fe f8b2 	bl	800d448 <HAL_GetTick>
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	1ad3      	subs	r3, r2, r3
 800f2ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2ee:	4293      	cmp	r3, r2
 800f2f0:	d901      	bls.n	800f2f6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800f2f2:	2303      	movs	r3, #3
 800f2f4:	e036      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f2f6:	f7ff fa24 	bl	800e742 <LL_RCC_GetSysClkSource>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	429a      	cmp	r2, r3
 800f304:	d1ec      	bne.n	800f2e0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800f306:	4b19      	ldr	r3, [pc, #100]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f003 0307 	and.w	r3, r3, #7
 800f30e:	683a      	ldr	r2, [r7, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	d21b      	bcs.n	800f34c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f314:	4b15      	ldr	r3, [pc, #84]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f023 0207 	bic.w	r2, r3, #7
 800f31c:	4913      	ldr	r1, [pc, #76]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	4313      	orrs	r3, r2
 800f322:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f324:	f7fe f890 	bl	800d448 <HAL_GetTick>
 800f328:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f32a:	e008      	b.n	800f33e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f32c:	f7fe f88c 	bl	800d448 <HAL_GetTick>
 800f330:	4602      	mov	r2, r0
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	1ad3      	subs	r3, r2, r3
 800f336:	2b02      	cmp	r3, #2
 800f338:	d901      	bls.n	800f33e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800f33a:	2303      	movs	r3, #3
 800f33c:	e012      	b.n	800f364 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f33e:	4b0b      	ldr	r3, [pc, #44]	; (800f36c <HAL_RCC_ClockConfig+0x278>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f003 0307 	and.w	r3, r3, #7
 800f346:	683a      	ldr	r2, [r7, #0]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d1ef      	bne.n	800f32c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800f34c:	f000 f87e 	bl	800f44c <HAL_RCC_GetHCLKFreq>
 800f350:	4603      	mov	r3, r0
 800f352:	4a07      	ldr	r2, [pc, #28]	; (800f370 <HAL_RCC_ClockConfig+0x27c>)
 800f354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800f356:	f7fe f883 	bl	800d460 <HAL_GetTickPrio>
 800f35a:	4603      	mov	r3, r0
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fe f825 	bl	800d3ac <HAL_InitTick>
 800f362:	4603      	mov	r3, r0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3710      	adds	r7, #16
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}
 800f36c:	58004000 	.word	0x58004000
 800f370:	20000014 	.word	0x20000014

0800f374 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f374:	b590      	push	{r4, r7, lr}
 800f376:	b085      	sub	sp, #20
 800f378:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f37a:	f7ff f9e2 	bl	800e742 <LL_RCC_GetSysClkSource>
 800f37e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d10a      	bne.n	800f39c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f386:	f7ff f99e 	bl	800e6c6 <LL_RCC_MSI_GetRange>
 800f38a:	4603      	mov	r3, r0
 800f38c:	091b      	lsrs	r3, r3, #4
 800f38e:	f003 030f 	and.w	r3, r3, #15
 800f392:	4a2b      	ldr	r2, [pc, #172]	; (800f440 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f398:	60fb      	str	r3, [r7, #12]
 800f39a:	e04b      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2b04      	cmp	r3, #4
 800f3a0:	d102      	bne.n	800f3a8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800f3a2:	4b28      	ldr	r3, [pc, #160]	; (800f444 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f3a4:	60fb      	str	r3, [r7, #12]
 800f3a6:	e045      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2b08      	cmp	r3, #8
 800f3ac:	d10a      	bne.n	800f3c4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f3ae:	f7fe ffb7 	bl	800e320 <LL_RCC_HSE_IsEnabledDiv2>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d102      	bne.n	800f3be <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800f3b8:	4b22      	ldr	r3, [pc, #136]	; (800f444 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f3ba:	60fb      	str	r3, [r7, #12]
 800f3bc:	e03a      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800f3be:	4b22      	ldr	r3, [pc, #136]	; (800f448 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f3c0:	60fb      	str	r3, [r7, #12]
 800f3c2:	e037      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800f3c4:	f7ff fab9 	bl	800e93a <LL_RCC_PLL_GetMainSource>
 800f3c8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d003      	beq.n	800f3d8 <HAL_RCC_GetSysClockFreq+0x64>
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	2b03      	cmp	r3, #3
 800f3d4:	d003      	beq.n	800f3de <HAL_RCC_GetSysClockFreq+0x6a>
 800f3d6:	e00d      	b.n	800f3f4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800f3d8:	4b1a      	ldr	r3, [pc, #104]	; (800f444 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f3da:	60bb      	str	r3, [r7, #8]
        break;
 800f3dc:	e015      	b.n	800f40a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800f3de:	f7fe ff9f 	bl	800e320 <LL_RCC_HSE_IsEnabledDiv2>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b01      	cmp	r3, #1
 800f3e6:	d102      	bne.n	800f3ee <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800f3e8:	4b16      	ldr	r3, [pc, #88]	; (800f444 <HAL_RCC_GetSysClockFreq+0xd0>)
 800f3ea:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800f3ec:	e00d      	b.n	800f40a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800f3ee:	4b16      	ldr	r3, [pc, #88]	; (800f448 <HAL_RCC_GetSysClockFreq+0xd4>)
 800f3f0:	60bb      	str	r3, [r7, #8]
        break;
 800f3f2:	e00a      	b.n	800f40a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800f3f4:	f7ff f967 	bl	800e6c6 <LL_RCC_MSI_GetRange>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	091b      	lsrs	r3, r3, #4
 800f3fc:	f003 030f 	and.w	r3, r3, #15
 800f400:	4a0f      	ldr	r2, [pc, #60]	; (800f440 <HAL_RCC_GetSysClockFreq+0xcc>)
 800f402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f406:	60bb      	str	r3, [r7, #8]
        break;
 800f408:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800f40a:	f7ff fa71 	bl	800e8f0 <LL_RCC_PLL_GetN>
 800f40e:	4602      	mov	r2, r0
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	fb03 f402 	mul.w	r4, r3, r2
 800f416:	f7ff fa84 	bl	800e922 <LL_RCC_PLL_GetDivider>
 800f41a:	4603      	mov	r3, r0
 800f41c:	091b      	lsrs	r3, r3, #4
 800f41e:	3301      	adds	r3, #1
 800f420:	fbb4 f4f3 	udiv	r4, r4, r3
 800f424:	f7ff fa71 	bl	800e90a <LL_RCC_PLL_GetR>
 800f428:	4603      	mov	r3, r0
 800f42a:	0f5b      	lsrs	r3, r3, #29
 800f42c:	3301      	adds	r3, #1
 800f42e:	fbb4 f3f3 	udiv	r3, r4, r3
 800f432:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800f434:	68fb      	ldr	r3, [r7, #12]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3714      	adds	r7, #20
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd90      	pop	{r4, r7, pc}
 800f43e:	bf00      	nop
 800f440:	080190b8 	.word	0x080190b8
 800f444:	00f42400 	.word	0x00f42400
 800f448:	01e84800 	.word	0x01e84800

0800f44c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f44c:	b598      	push	{r3, r4, r7, lr}
 800f44e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800f450:	f7ff ff90 	bl	800f374 <HAL_RCC_GetSysClockFreq>
 800f454:	4604      	mov	r4, r0
 800f456:	f7ff f9e9 	bl	800e82c <LL_RCC_GetAHBPrescaler>
 800f45a:	4603      	mov	r3, r0
 800f45c:	091b      	lsrs	r3, r3, #4
 800f45e:	f003 030f 	and.w	r3, r3, #15
 800f462:	4a03      	ldr	r2, [pc, #12]	; (800f470 <HAL_RCC_GetHCLKFreq+0x24>)
 800f464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f468:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800f46c:	4618      	mov	r0, r3
 800f46e:	bd98      	pop	{r3, r4, r7, pc}
 800f470:	08019058 	.word	0x08019058

0800f474 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f474:	b598      	push	{r3, r4, r7, lr}
 800f476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800f478:	f7ff ffe8 	bl	800f44c <HAL_RCC_GetHCLKFreq>
 800f47c:	4604      	mov	r4, r0
 800f47e:	f7ff f9ef 	bl	800e860 <LL_RCC_GetAPB1Prescaler>
 800f482:	4603      	mov	r3, r0
 800f484:	0a1b      	lsrs	r3, r3, #8
 800f486:	f003 0307 	and.w	r3, r3, #7
 800f48a:	4a04      	ldr	r2, [pc, #16]	; (800f49c <HAL_RCC_GetPCLK1Freq+0x28>)
 800f48c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f490:	f003 031f 	and.w	r3, r3, #31
 800f494:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f498:	4618      	mov	r0, r3
 800f49a:	bd98      	pop	{r3, r4, r7, pc}
 800f49c:	08019098 	.word	0x08019098

0800f4a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f4a0:	b598      	push	{r3, r4, r7, lr}
 800f4a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800f4a4:	f7ff ffd2 	bl	800f44c <HAL_RCC_GetHCLKFreq>
 800f4a8:	4604      	mov	r4, r0
 800f4aa:	f7ff f9e5 	bl	800e878 <LL_RCC_GetAPB2Prescaler>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	0adb      	lsrs	r3, r3, #11
 800f4b2:	f003 0307 	and.w	r3, r3, #7
 800f4b6:	4a04      	ldr	r2, [pc, #16]	; (800f4c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f4b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4bc:	f003 031f 	and.w	r3, r3, #31
 800f4c0:	fa24 f303 	lsr.w	r3, r4, r3
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	bd98      	pop	{r3, r4, r7, pc}
 800f4c8:	08019098 	.word	0x08019098

0800f4cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800f4cc:	b590      	push	{r4, r7, lr}
 800f4ce:	b085      	sub	sp, #20
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	2bb0      	cmp	r3, #176	; 0xb0
 800f4d8:	d903      	bls.n	800f4e2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800f4da:	4b15      	ldr	r3, [pc, #84]	; (800f530 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4de:	60fb      	str	r3, [r7, #12]
 800f4e0:	e007      	b.n	800f4f2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	091b      	lsrs	r3, r3, #4
 800f4e6:	f003 030f 	and.w	r3, r3, #15
 800f4ea:	4a11      	ldr	r2, [pc, #68]	; (800f530 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800f4ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4f0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800f4f2:	f7ff f9a7 	bl	800e844 <LL_RCC_GetAHB4Prescaler>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	091b      	lsrs	r3, r3, #4
 800f4fa:	f003 030f 	and.w	r3, r3, #15
 800f4fe:	4a0d      	ldr	r2, [pc, #52]	; (800f534 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800f500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f504:	68fa      	ldr	r2, [r7, #12]
 800f506:	fbb2 f3f3 	udiv	r3, r2, r3
 800f50a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800f50c:	68bb      	ldr	r3, [r7, #8]
 800f50e:	4a0a      	ldr	r2, [pc, #40]	; (800f538 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800f510:	fba2 2303 	umull	r2, r3, r2, r3
 800f514:	0c9c      	lsrs	r4, r3, #18
 800f516:	f7fe fef5 	bl	800e304 <HAL_PWREx_GetVoltageRange>
 800f51a:	4603      	mov	r3, r0
 800f51c:	4619      	mov	r1, r3
 800f51e:	4620      	mov	r0, r4
 800f520:	f000 f80c 	bl	800f53c <RCC_SetFlashLatency>
 800f524:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800f526:	4618      	mov	r0, r3
 800f528:	3714      	adds	r7, #20
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd90      	pop	{r4, r7, pc}
 800f52e:	bf00      	nop
 800f530:	080190b8 	.word	0x080190b8
 800f534:	08019058 	.word	0x08019058
 800f538:	431bde83 	.word	0x431bde83

0800f53c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800f53c:	b590      	push	{r4, r7, lr}
 800f53e:	b093      	sub	sp, #76	; 0x4c
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800f546:	4b37      	ldr	r3, [pc, #220]	; (800f624 <RCC_SetFlashLatency+0xe8>)
 800f548:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800f54c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f54e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800f552:	4a35      	ldr	r2, [pc, #212]	; (800f628 <RCC_SetFlashLatency+0xec>)
 800f554:	f107 031c 	add.w	r3, r7, #28
 800f558:	ca07      	ldmia	r2, {r0, r1, r2}
 800f55a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800f55e:	4b33      	ldr	r3, [pc, #204]	; (800f62c <RCC_SetFlashLatency+0xf0>)
 800f560:	f107 040c 	add.w	r4, r7, #12
 800f564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800f56a:	2300      	movs	r3, #0
 800f56c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f574:	d11a      	bne.n	800f5ac <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f576:	2300      	movs	r3, #0
 800f578:	643b      	str	r3, [r7, #64]	; 0x40
 800f57a:	e013      	b.n	800f5a4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800f57c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	3348      	adds	r3, #72	; 0x48
 800f582:	443b      	add	r3, r7
 800f584:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d807      	bhi.n	800f59e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f58e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f590:	009b      	lsls	r3, r3, #2
 800f592:	3348      	adds	r3, #72	; 0x48
 800f594:	443b      	add	r3, r7
 800f596:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f59a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800f59c:	e020      	b.n	800f5e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800f59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	643b      	str	r3, [r7, #64]	; 0x40
 800f5a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5a6:	2b03      	cmp	r3, #3
 800f5a8:	d9e8      	bls.n	800f57c <RCC_SetFlashLatency+0x40>
 800f5aa:	e019      	b.n	800f5e0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5b0:	e013      	b.n	800f5da <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800f5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	3348      	adds	r3, #72	; 0x48
 800f5b8:	443b      	add	r3, r7
 800f5ba:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800f5be:	687a      	ldr	r2, [r7, #4]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d807      	bhi.n	800f5d4 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800f5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	3348      	adds	r3, #72	; 0x48
 800f5ca:	443b      	add	r3, r7
 800f5cc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f5d0:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800f5d2:	e005      	b.n	800f5e0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800f5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f5da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5dc:	2b02      	cmp	r3, #2
 800f5de:	d9e8      	bls.n	800f5b2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800f5e0:	4b13      	ldr	r3, [pc, #76]	; (800f630 <RCC_SetFlashLatency+0xf4>)
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f023 0207 	bic.w	r2, r3, #7
 800f5e8:	4911      	ldr	r1, [pc, #68]	; (800f630 <RCC_SetFlashLatency+0xf4>)
 800f5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f5ec:	4313      	orrs	r3, r2
 800f5ee:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800f5f0:	f7fd ff2a 	bl	800d448 <HAL_GetTick>
 800f5f4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f5f6:	e008      	b.n	800f60a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800f5f8:	f7fd ff26 	bl	800d448 <HAL_GetTick>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f600:	1ad3      	subs	r3, r2, r3
 800f602:	2b02      	cmp	r3, #2
 800f604:	d901      	bls.n	800f60a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800f606:	2303      	movs	r3, #3
 800f608:	e007      	b.n	800f61a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800f60a:	4b09      	ldr	r3, [pc, #36]	; (800f630 <RCC_SetFlashLatency+0xf4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	f003 0307 	and.w	r3, r3, #7
 800f612:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f614:	429a      	cmp	r2, r3
 800f616:	d1ef      	bne.n	800f5f8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800f618:	2300      	movs	r3, #0
}
 800f61a:	4618      	mov	r0, r3
 800f61c:	374c      	adds	r7, #76	; 0x4c
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd90      	pop	{r4, r7, pc}
 800f622:	bf00      	nop
 800f624:	08019020 	.word	0x08019020
 800f628:	08019030 	.word	0x08019030
 800f62c:	0801903c 	.word	0x0801903c
 800f630:	58004000 	.word	0x58004000

0800f634 <LL_RCC_LSE_IsEnabled>:
{
 800f634:	b480      	push	{r7}
 800f636:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800f638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f63c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f640:	f003 0301 	and.w	r3, r3, #1
 800f644:	2b01      	cmp	r3, #1
 800f646:	d101      	bne.n	800f64c <LL_RCC_LSE_IsEnabled+0x18>
 800f648:	2301      	movs	r3, #1
 800f64a:	e000      	b.n	800f64e <LL_RCC_LSE_IsEnabled+0x1a>
 800f64c:	2300      	movs	r3, #0
}
 800f64e:	4618      	mov	r0, r3
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr

0800f658 <LL_RCC_LSE_IsReady>:
{
 800f658:	b480      	push	{r7}
 800f65a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800f65c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f664:	f003 0302 	and.w	r3, r3, #2
 800f668:	2b02      	cmp	r3, #2
 800f66a:	d101      	bne.n	800f670 <LL_RCC_LSE_IsReady+0x18>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <LL_RCC_LSE_IsReady+0x1a>
 800f670:	2300      	movs	r3, #0
}
 800f672:	4618      	mov	r0, r3
 800f674:	46bd      	mov	sp, r7
 800f676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67a:	4770      	bx	lr

0800f67c <LL_RCC_SetRFWKPClockSource>:
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800f684:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f68c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800f690:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4313      	orrs	r3, r2
 800f698:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800f69c:	bf00      	nop
 800f69e:	370c      	adds	r7, #12
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a6:	4770      	bx	lr

0800f6a8 <LL_RCC_SetSMPSClockSource>:
{
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800f6b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6b6:	f023 0203 	bic.w	r2, r3, #3
 800f6ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4313      	orrs	r3, r2
 800f6c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800f6c4:	bf00      	nop
 800f6c6:	370c      	adds	r7, #12
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ce:	4770      	bx	lr

0800f6d0 <LL_RCC_SetSMPSPrescaler>:
{
 800f6d0:	b480      	push	{r7}
 800f6d2:	b083      	sub	sp, #12
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800f6d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f6e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	624b      	str	r3, [r1, #36]	; 0x24
}
 800f6ec:	bf00      	nop
 800f6ee:	370c      	adds	r7, #12
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr

0800f6f8 <LL_RCC_SetUSARTClockSource>:
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	b083      	sub	sp, #12
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800f700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f708:	f023 0203 	bic.w	r2, r3, #3
 800f70c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	4313      	orrs	r3, r2
 800f714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f718:	bf00      	nop
 800f71a:	370c      	adds	r7, #12
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr

0800f724 <LL_RCC_SetLPUARTClockSource>:
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800f72c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f734:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800f738:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	4313      	orrs	r3, r2
 800f740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f744:	bf00      	nop
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <LL_RCC_SetI2CClockSource>:
{
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800f758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f75c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	091b      	lsrs	r3, r3, #4
 800f764:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800f768:	43db      	mvns	r3, r3
 800f76a:	401a      	ands	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	011b      	lsls	r3, r3, #4
 800f770:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800f774:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f778:	4313      	orrs	r3, r2
 800f77a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f77e:	bf00      	nop
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr

0800f78a <LL_RCC_SetLPTIMClockSource>:
{
 800f78a:	b480      	push	{r7}
 800f78c:	b083      	sub	sp, #12
 800f78e:	af00      	add	r7, sp, #0
 800f790:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800f792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f796:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	0c1b      	lsrs	r3, r3, #16
 800f79e:	041b      	lsls	r3, r3, #16
 800f7a0:	43db      	mvns	r3, r3
 800f7a2:	401a      	ands	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	041b      	lsls	r3, r3, #16
 800f7a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f7b2:	bf00      	nop
 800f7b4:	370c      	adds	r7, #12
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7bc:	4770      	bx	lr

0800f7be <LL_RCC_SetSAIClockSource>:
{
 800f7be:	b480      	push	{r7}
 800f7c0:	b083      	sub	sp, #12
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800f7c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f7d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f7de:	bf00      	nop
 800f7e0:	370c      	adds	r7, #12
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr

0800f7ea <LL_RCC_SetRNGClockSource>:
{
 800f7ea:	b480      	push	{r7}
 800f7ec:	b083      	sub	sp, #12
 800f7ee:	af00      	add	r7, sp, #0
 800f7f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800f7f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f7f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f7fa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800f7fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	4313      	orrs	r3, r2
 800f806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f80a:	bf00      	nop
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr

0800f816 <LL_RCC_SetCLK48ClockSource>:
{
 800f816:	b480      	push	{r7}
 800f818:	b083      	sub	sp, #12
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800f81e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f82a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4313      	orrs	r3, r2
 800f832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f836:	bf00      	nop
 800f838:	370c      	adds	r7, #12
 800f83a:	46bd      	mov	sp, r7
 800f83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f840:	4770      	bx	lr

0800f842 <LL_RCC_SetUSBClockSource>:
{
 800f842:	b580      	push	{r7, lr}
 800f844:	b082      	sub	sp, #8
 800f846:	af00      	add	r7, sp, #0
 800f848:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7ff ffe3 	bl	800f816 <LL_RCC_SetCLK48ClockSource>
}
 800f850:	bf00      	nop
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <LL_RCC_SetADCClockSource>:
{
 800f858:	b480      	push	{r7}
 800f85a:	b083      	sub	sp, #12
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800f860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f868:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800f86c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4313      	orrs	r3, r2
 800f874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800f878:	bf00      	nop
 800f87a:	370c      	adds	r7, #12
 800f87c:	46bd      	mov	sp, r7
 800f87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f882:	4770      	bx	lr

0800f884 <LL_RCC_SetRTCClockSource>:
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800f88c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800f8a4:	bf00      	nop
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <LL_RCC_GetRTCClockSource>:
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800f8b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr

0800f8ca <LL_RCC_ForceBackupDomainReset>:
{
 800f8ca:	b480      	push	{r7}
 800f8cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f8ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f8de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800f8e2:	bf00      	nop
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <LL_RCC_ReleaseBackupDomainReset>:
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800f8f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f8f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f8f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f8fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800f904:	bf00      	nop
 800f906:	46bd      	mov	sp, r7
 800f908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90c:	4770      	bx	lr

0800f90e <LL_RCC_PLLSAI1_Enable>:
{
 800f90e:	b480      	push	{r7}
 800f910:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f91c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f920:	6013      	str	r3, [r2, #0]
}
 800f922:	bf00      	nop
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <LL_RCC_PLLSAI1_Disable>:
{
 800f92c:	b480      	push	{r7}
 800f92e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800f930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f93a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f93e:	6013      	str	r3, [r2, #0]
}
 800f940:	bf00      	nop
 800f942:	46bd      	mov	sp, r7
 800f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f948:	4770      	bx	lr

0800f94a <LL_RCC_PLLSAI1_IsReady>:
{
 800f94a:	b480      	push	{r7}
 800f94c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800f94e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f958:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f95c:	d101      	bne.n	800f962 <LL_RCC_PLLSAI1_IsReady+0x18>
 800f95e:	2301      	movs	r3, #1
 800f960:	e000      	b.n	800f964 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800f962:	2300      	movs	r3, #0
}
 800f964:	4618      	mov	r0, r3
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f96e:	b580      	push	{r7, lr}
 800f970:	b088      	sub	sp, #32
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800f976:	2300      	movs	r3, #0
 800f978:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800f97a:	2300      	movs	r3, #0
 800f97c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f986:	2b00      	cmp	r3, #0
 800f988:	d034      	beq.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f98e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800f992:	d021      	beq.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800f994:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800f998:	d81b      	bhi.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f99a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f99e:	d01d      	beq.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800f9a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f9a4:	d815      	bhi.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d00b      	beq.n	800f9c2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800f9aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f9ae:	d110      	bne.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800f9b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800f9ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f9be:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800f9c0:	e00d      	b.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	3304      	adds	r3, #4
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	f000 f947 	bl	800fc5a <RCCEx_PLLSAI1_ConfigNP>
 800f9cc:	4603      	mov	r3, r0
 800f9ce:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800f9d0:	e005      	b.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800f9d2:	2301      	movs	r3, #1
 800f9d4:	77fb      	strb	r3, [r7, #31]
        break;
 800f9d6:	e002      	b.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f9d8:	bf00      	nop
 800f9da:	e000      	b.n	800f9de <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800f9dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800f9de:	7ffb      	ldrb	r3, [r7, #31]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d105      	bne.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7ff fee8 	bl	800f7be <LL_RCC_SetSAIClockSource>
 800f9ee:	e001      	b.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9f0:	7ffb      	ldrb	r3, [r7, #31]
 800f9f2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d046      	beq.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800fa00:	f7ff ff56 	bl	800f8b0 <LL_RCC_GetRTCClockSource>
 800fa04:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0a:	69ba      	ldr	r2, [r7, #24]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d03c      	beq.n	800fa8a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800fa10:	f7fe fc68 	bl	800e2e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d105      	bne.n	800fa26 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7ff ff30 	bl	800f884 <LL_RCC_SetRTCClockSource>
 800fa24:	e02e      	b.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800fa26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fa2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa2e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800fa30:	f7ff ff4b 	bl	800f8ca <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800fa34:	f7ff ff5a 	bl	800f8ec <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa42:	4313      	orrs	r3, r2
 800fa44:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800fa46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fa4a:	697b      	ldr	r3, [r7, #20]
 800fa4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800fa50:	f7ff fdf0 	bl	800f634 <LL_RCC_LSE_IsEnabled>
 800fa54:	4603      	mov	r3, r0
 800fa56:	2b01      	cmp	r3, #1
 800fa58:	d114      	bne.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fa5a:	f7fd fcf5 	bl	800d448 <HAL_GetTick>
 800fa5e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800fa60:	e00b      	b.n	800fa7a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fa62:	f7fd fcf1 	bl	800d448 <HAL_GetTick>
 800fa66:	4602      	mov	r2, r0
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	1ad3      	subs	r3, r2, r3
 800fa6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa70:	4293      	cmp	r3, r2
 800fa72:	d902      	bls.n	800fa7a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800fa74:	2303      	movs	r3, #3
 800fa76:	77fb      	strb	r3, [r7, #31]
              break;
 800fa78:	e004      	b.n	800fa84 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800fa7a:	f7ff fded 	bl	800f658 <LL_RCC_LSE_IsReady>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b01      	cmp	r3, #1
 800fa82:	d1ee      	bne.n	800fa62 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800fa84:	7ffb      	ldrb	r3, [r7, #31]
 800fa86:	77bb      	strb	r3, [r7, #30]
 800fa88:	e001      	b.n	800fa8e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa8a:	7ffb      	ldrb	r3, [r7, #31]
 800fa8c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f003 0301 	and.w	r3, r3, #1
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d004      	beq.n	800faa4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	699b      	ldr	r3, [r3, #24]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7ff fe2a 	bl	800f6f8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f003 0302 	and.w	r3, r3, #2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d004      	beq.n	800faba <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	69db      	ldr	r3, [r3, #28]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7ff fe35 	bl	800f724 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	f003 0310 	and.w	r3, r3, #16
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d004      	beq.n	800fad0 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faca:	4618      	mov	r0, r3
 800facc:	f7ff fe5d 	bl	800f78a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f003 0320 	and.w	r3, r3, #32
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d004      	beq.n	800fae6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7ff fe52 	bl	800f78a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f003 0304 	and.w	r3, r3, #4
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d004      	beq.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a1b      	ldr	r3, [r3, #32]
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7ff fe2a 	bl	800f750 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f003 0308 	and.w	r3, r3, #8
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d004      	beq.n	800fb12 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff fe1f 	bl	800f750 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d022      	beq.n	800fb64 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fe8d 	bl	800f842 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800fb30:	d107      	bne.n	800fb42 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800fb32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fb36:	68db      	ldr	r3, [r3, #12]
 800fb38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fb3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fb40:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fb4a:	d10b      	bne.n	800fb64 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	3304      	adds	r3, #4
 800fb50:	4618      	mov	r0, r3
 800fb52:	f000 f8dd 	bl	800fd10 <RCCEx_PLLSAI1_ConfigNQ>
 800fb56:	4603      	mov	r3, r0
 800fb58:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fb5a:	7ffb      	ldrb	r3, [r7, #31]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d001      	beq.n	800fb64 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800fb60:	7ffb      	ldrb	r3, [r7, #31]
 800fb62:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d02b      	beq.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb78:	d008      	beq.n	800fb8c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fb82:	d003      	beq.n	800fb8c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d105      	bne.n	800fb98 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7ff fe2a 	bl	800f7ea <LL_RCC_SetRNGClockSource>
 800fb96:	e00a      	b.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x240>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fba0:	60fb      	str	r3, [r7, #12]
 800fba2:	2000      	movs	r0, #0
 800fba4:	f7ff fe21 	bl	800f7ea <LL_RCC_SetRNGClockSource>
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f7ff fe34 	bl	800f816 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbb2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800fbb6:	d107      	bne.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800fbb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fbc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fbc6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d022      	beq.n	800fc1a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7ff fe3d 	bl	800f858 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fbe6:	d107      	bne.n	800fbf8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800fbe8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fbec:	68db      	ldr	r3, [r3, #12]
 800fbee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fbf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fbf6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fc00:	d10b      	bne.n	800fc1a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3304      	adds	r3, #4
 800fc06:	4618      	mov	r0, r3
 800fc08:	f000 f8dd 	bl	800fdc6 <RCCEx_PLLSAI1_ConfigNR>
 800fc0c:	4603      	mov	r3, r0
 800fc0e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800fc10:	7ffb      	ldrb	r3, [r7, #31]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d001      	beq.n	800fc1a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800fc16:	7ffb      	ldrb	r3, [r7, #31]
 800fc18:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d004      	beq.n	800fc30 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7ff fd26 	bl	800f67c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d009      	beq.n	800fc50 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7ff fd45 	bl	800f6d0 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff fd2c 	bl	800f6a8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800fc50:	7fbb      	ldrb	r3, [r7, #30]
}
 800fc52:	4618      	mov	r0, r3
 800fc54:	3720      	adds	r7, #32
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}

0800fc5a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fc5a:	b580      	push	{r7, lr}
 800fc5c:	b084      	sub	sp, #16
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc62:	2300      	movs	r3, #0
 800fc64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fc66:	f7ff fe61 	bl	800f92c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fc6a:	f7fd fbed 	bl	800d448 <HAL_GetTick>
 800fc6e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fc70:	e009      	b.n	800fc86 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fc72:	f7fd fbe9 	bl	800d448 <HAL_GetTick>
 800fc76:	4602      	mov	r2, r0
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	1ad3      	subs	r3, r2, r3
 800fc7c:	2b02      	cmp	r3, #2
 800fc7e:	d902      	bls.n	800fc86 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800fc80:	2303      	movs	r3, #3
 800fc82:	73fb      	strb	r3, [r7, #15]
      break;
 800fc84:	e004      	b.n	800fc90 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fc86:	f7ff fe60 	bl	800f94a <LL_RCC_PLLSAI1_IsReady>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1f0      	bne.n	800fc72 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800fc90:	7bfb      	ldrb	r3, [r7, #15]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d137      	bne.n	800fd06 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fc96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	021b      	lsls	r3, r3, #8
 800fca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fcaa:	4313      	orrs	r3, r2
 800fcac:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800fcae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fcb2:	691b      	ldr	r3, [r3, #16]
 800fcb4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fcc0:	4313      	orrs	r3, r2
 800fcc2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fcc4:	f7ff fe23 	bl	800f90e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fcc8:	f7fd fbbe 	bl	800d448 <HAL_GetTick>
 800fccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fcce:	e009      	b.n	800fce4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fcd0:	f7fd fbba 	bl	800d448 <HAL_GetTick>
 800fcd4:	4602      	mov	r2, r0
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	1ad3      	subs	r3, r2, r3
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d902      	bls.n	800fce4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800fcde:	2303      	movs	r3, #3
 800fce0:	73fb      	strb	r3, [r7, #15]
        break;
 800fce2:	e004      	b.n	800fcee <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fce4:	f7ff fe31 	bl	800f94a <LL_RCC_PLLSAI1_IsReady>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d1f0      	bne.n	800fcd0 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800fcee:	7bfb      	ldrb	r3, [r7, #15]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d108      	bne.n	800fd06 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fcf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fcf8:	691a      	ldr	r2, [r3, #16]
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	691b      	ldr	r3, [r3, #16]
 800fcfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fd02:	4313      	orrs	r3, r2
 800fd04:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fd06:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd08:	4618      	mov	r0, r3
 800fd0a:	3710      	adds	r7, #16
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b084      	sub	sp, #16
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd18:	2300      	movs	r3, #0
 800fd1a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fd1c:	f7ff fe06 	bl	800f92c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fd20:	f7fd fb92 	bl	800d448 <HAL_GetTick>
 800fd24:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fd26:	e009      	b.n	800fd3c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fd28:	f7fd fb8e 	bl	800d448 <HAL_GetTick>
 800fd2c:	4602      	mov	r2, r0
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	1ad3      	subs	r3, r2, r3
 800fd32:	2b02      	cmp	r3, #2
 800fd34:	d902      	bls.n	800fd3c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800fd36:	2303      	movs	r3, #3
 800fd38:	73fb      	strb	r3, [r7, #15]
      break;
 800fd3a:	e004      	b.n	800fd46 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fd3c:	f7ff fe05 	bl	800f94a <LL_RCC_PLLSAI1_IsReady>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d1f0      	bne.n	800fd28 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800fd46:	7bfb      	ldrb	r3, [r7, #15]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d137      	bne.n	800fdbc <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fd4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	021b      	lsls	r3, r3, #8
 800fd5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fd60:	4313      	orrs	r3, r2
 800fd62:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800fd64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fd68:	691b      	ldr	r3, [r3, #16]
 800fd6a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	689b      	ldr	r3, [r3, #8]
 800fd72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fd76:	4313      	orrs	r3, r2
 800fd78:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fd7a:	f7ff fdc8 	bl	800f90e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd7e:	f7fd fb63 	bl	800d448 <HAL_GetTick>
 800fd82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fd84:	e009      	b.n	800fd9a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fd86:	f7fd fb5f 	bl	800d448 <HAL_GetTick>
 800fd8a:	4602      	mov	r2, r0
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	1ad3      	subs	r3, r2, r3
 800fd90:	2b02      	cmp	r3, #2
 800fd92:	d902      	bls.n	800fd9a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800fd94:	2303      	movs	r3, #3
 800fd96:	73fb      	strb	r3, [r7, #15]
        break;
 800fd98:	e004      	b.n	800fda4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fd9a:	f7ff fdd6 	bl	800f94a <LL_RCC_PLLSAI1_IsReady>
 800fd9e:	4603      	mov	r3, r0
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d1f0      	bne.n	800fd86 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800fda4:	7bfb      	ldrb	r3, [r7, #15]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d108      	bne.n	800fdbc <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fdaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fdae:	691a      	ldr	r2, [r3, #16]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	691b      	ldr	r3, [r3, #16]
 800fdb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fdb8:	4313      	orrs	r3, r2
 800fdba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fdbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3710      	adds	r7, #16
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b084      	sub	sp, #16
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800fdd2:	f7ff fdab 	bl	800f92c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800fdd6:	f7fd fb37 	bl	800d448 <HAL_GetTick>
 800fdda:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fddc:	e009      	b.n	800fdf2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fdde:	f7fd fb33 	bl	800d448 <HAL_GetTick>
 800fde2:	4602      	mov	r2, r0
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	2b02      	cmp	r3, #2
 800fdea:	d902      	bls.n	800fdf2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800fdec:	2303      	movs	r3, #3
 800fdee:	73fb      	strb	r3, [r7, #15]
      break;
 800fdf0:	e004      	b.n	800fdfc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800fdf2:	f7ff fdaa 	bl	800f94a <LL_RCC_PLLSAI1_IsReady>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d1f0      	bne.n	800fdde <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d137      	bne.n	800fe72 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800fe02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe06:	691b      	ldr	r3, [r3, #16]
 800fe08:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	021b      	lsls	r3, r3, #8
 800fe12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fe16:	4313      	orrs	r3, r2
 800fe18:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800fe1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe1e:	691b      	ldr	r3, [r3, #16]
 800fe20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	68db      	ldr	r3, [r3, #12]
 800fe28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fe2c:	4313      	orrs	r3, r2
 800fe2e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800fe30:	f7ff fd6d 	bl	800f90e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe34:	f7fd fb08 	bl	800d448 <HAL_GetTick>
 800fe38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe3a:	e009      	b.n	800fe50 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800fe3c:	f7fd fb04 	bl	800d448 <HAL_GetTick>
 800fe40:	4602      	mov	r2, r0
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	2b02      	cmp	r3, #2
 800fe48:	d902      	bls.n	800fe50 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800fe4a:	2303      	movs	r3, #3
 800fe4c:	73fb      	strb	r3, [r7, #15]
        break;
 800fe4e:	e004      	b.n	800fe5a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800fe50:	f7ff fd7b 	bl	800f94a <LL_RCC_PLLSAI1_IsReady>
 800fe54:	4603      	mov	r3, r0
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d1f0      	bne.n	800fe3c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800fe5a:	7bfb      	ldrb	r3, [r7, #15]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d108      	bne.n	800fe72 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800fe60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fe64:	691a      	ldr	r2, [r3, #16]
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	691b      	ldr	r3, [r3, #16]
 800fe6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800fe72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3710      	adds	r7, #16
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d101      	bne.n	800fe8e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	e09f      	b.n	800ffce <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800fe94:	b2db      	uxtb	r3, r3
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d106      	bne.n	800fea8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800fea2:	6878      	ldr	r0, [r7, #4]
 800fea4:	f7fa ffa8 	bl	800adf8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	2202      	movs	r2, #2
 800feac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800feb0:	4b49      	ldr	r3, [pc, #292]	; (800ffd8 <HAL_RTC_Init+0x15c>)
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	f003 0310 	and.w	r3, r3, #16
 800feb8:	2b10      	cmp	r3, #16
 800feba:	d07e      	beq.n	800ffba <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	22ca      	movs	r2, #202	; 0xca
 800fec2:	625a      	str	r2, [r3, #36]	; 0x24
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2253      	movs	r2, #83	; 0x53
 800feca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f000 fac6 	bl	801045e <RTC_EnterInitMode>
 800fed2:	4603      	mov	r3, r0
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d00a      	beq.n	800feee <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	22ff      	movs	r2, #255	; 0xff
 800fede:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2204      	movs	r2, #4
 800fee4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800fee8:	2301      	movs	r3, #1
 800feea:	73fb      	strb	r3, [r7, #15]
 800feec:	e067      	b.n	800ffbe <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	689b      	ldr	r3, [r3, #8]
 800fef4:	687a      	ldr	r2, [r7, #4]
 800fef6:	6812      	ldr	r2, [r2, #0]
 800fef8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fefc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff00:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	6899      	ldr	r1, [r3, #8]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	685a      	ldr	r2, [r3, #4]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	691b      	ldr	r3, [r3, #16]
 800ff10:	431a      	orrs	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	699b      	ldr	r3, [r3, #24]
 800ff16:	431a      	orrs	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	430a      	orrs	r2, r1
 800ff1e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	68d2      	ldr	r2, [r2, #12]
 800ff28:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6919      	ldr	r1, [r3, #16]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	041a      	lsls	r2, r3, #16
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	430a      	orrs	r2, r1
 800ff3c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	68da      	ldr	r2, [r3, #12]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ff4c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f022 0203 	bic.w	r2, r2, #3
 800ff5c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	69da      	ldr	r2, [r3, #28]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	695b      	ldr	r3, [r3, #20]
 800ff6c:	431a      	orrs	r2, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	430a      	orrs	r2, r1
 800ff74:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	689b      	ldr	r3, [r3, #8]
 800ff7c:	f003 0320 	and.w	r3, r3, #32
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d113      	bne.n	800ffac <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ff84:	6878      	ldr	r0, [r7, #4]
 800ff86:	f000 fa44 	bl	8010412 <HAL_RTC_WaitForSynchro>
 800ff8a:	4603      	mov	r3, r0
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d00d      	beq.n	800ffac <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	22ff      	movs	r2, #255	; 0xff
 800ff96:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2204      	movs	r2, #4
 800ff9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e010      	b.n	800ffce <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	22ff      	movs	r2, #255	; 0xff
 800ffb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	73fb      	strb	r3, [r7, #15]
 800ffb8:	e001      	b.n	800ffbe <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ffbe:	7bfb      	ldrb	r3, [r7, #15]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d103      	bne.n	800ffcc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	2201      	movs	r2, #1
 800ffc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800ffcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffce:	4618      	mov	r0, r3
 800ffd0:	3710      	adds	r7, #16
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop
 800ffd8:	40002800 	.word	0x40002800

0800ffdc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ffdc:	b590      	push	{r4, r7, lr}
 800ffde:	b087      	sub	sp, #28
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	60f8      	str	r0, [r7, #12]
 800ffe4:	60b9      	str	r1, [r7, #8]
 800ffe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d101      	bne.n	800fff6 <HAL_RTC_SetTime+0x1a>
 800fff2:	2302      	movs	r3, #2
 800fff4:	e0b2      	b.n	801015c <HAL_RTC_SetTime+0x180>
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2201      	movs	r2, #1
 800fffa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2202      	movs	r2, #2
 8010002:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d126      	bne.n	801005a <HAL_RTC_SetTime+0x7e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	689b      	ldr	r3, [r3, #8]
 8010012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010016:	2b00      	cmp	r3, #0
 8010018:	d102      	bne.n	8010020 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	2200      	movs	r2, #0
 801001e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	781b      	ldrb	r3, [r3, #0]
 8010024:	4618      	mov	r0, r3
 8010026:	f000 fa44 	bl	80104b2 <RTC_ByteToBcd2>
 801002a:	4603      	mov	r3, r0
 801002c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	785b      	ldrb	r3, [r3, #1]
 8010032:	4618      	mov	r0, r3
 8010034:	f000 fa3d 	bl	80104b2 <RTC_ByteToBcd2>
 8010038:	4603      	mov	r3, r0
 801003a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 801003c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	789b      	ldrb	r3, [r3, #2]
 8010042:	4618      	mov	r0, r3
 8010044:	f000 fa35 	bl	80104b2 <RTC_ByteToBcd2>
 8010048:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 801004a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 801004e:	68bb      	ldr	r3, [r7, #8]
 8010050:	78db      	ldrb	r3, [r3, #3]
 8010052:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8010054:	4313      	orrs	r3, r2
 8010056:	617b      	str	r3, [r7, #20]
 8010058:	e018      	b.n	801008c <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	689b      	ldr	r3, [r3, #8]
 8010060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010064:	2b00      	cmp	r3, #0
 8010066:	d102      	bne.n	801006e <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8010068:	68bb      	ldr	r3, [r7, #8]
 801006a:	2200      	movs	r2, #0
 801006c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	785b      	ldrb	r3, [r3, #1]
 8010078:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 801007a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8010080:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	78db      	ldrb	r3, [r3, #3]
 8010086:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8010088:	4313      	orrs	r3, r2
 801008a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	22ca      	movs	r2, #202	; 0xca
 8010092:	625a      	str	r2, [r3, #36]	; 0x24
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	2253      	movs	r2, #83	; 0x53
 801009a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 801009c:	68f8      	ldr	r0, [r7, #12]
 801009e:	f000 f9de 	bl	801045e <RTC_EnterInitMode>
 80100a2:	4603      	mov	r3, r0
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d00d      	beq.n	80100c4 <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	22ff      	movs	r2, #255	; 0xff
 80100ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	2204      	movs	r2, #4
 80100b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80100c0:	2301      	movs	r3, #1
 80100c2:	e04b      	b.n	801015c <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681a      	ldr	r2, [r3, #0]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80100ce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80100d2:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	689a      	ldr	r2, [r3, #8]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80100e2:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	6899      	ldr	r1, [r3, #8]
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	68da      	ldr	r2, [r3, #12]
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	431a      	orrs	r2, r3
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	430a      	orrs	r2, r1
 80100fa:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	68da      	ldr	r2, [r3, #12]
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801010a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	689b      	ldr	r3, [r3, #8]
 8010112:	f003 0320 	and.w	r3, r3, #32
 8010116:	2b00      	cmp	r3, #0
 8010118:	d113      	bne.n	8010142 <HAL_RTC_SetTime+0x166>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f000 f979 	bl	8010412 <HAL_RTC_WaitForSynchro>
 8010120:	4603      	mov	r3, r0
 8010122:	2b00      	cmp	r3, #0
 8010124:	d00d      	beq.n	8010142 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	22ff      	movs	r2, #255	; 0xff
 801012c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2204      	movs	r2, #4
 8010132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2200      	movs	r2, #0
 801013a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801013e:	2301      	movs	r3, #1
 8010140:	e00c      	b.n	801015c <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	22ff      	movs	r2, #255	; 0xff
 8010148:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2201      	movs	r2, #1
 801014e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    __HAL_UNLOCK(hrtc);
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	2200      	movs	r2, #0
 8010156:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 801015a:	2300      	movs	r3, #0
  }
}
 801015c:	4618      	mov	r0, r3
 801015e:	371c      	adds	r7, #28
 8010160:	46bd      	mov	sp, r7
 8010162:	bd90      	pop	{r4, r7, pc}

08010164 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b086      	sub	sp, #24
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	691b      	ldr	r3, [r3, #16]
 8010180:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8010192:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8010196:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	0c1b      	lsrs	r3, r3, #16
 801019c:	b2db      	uxtb	r3, r3
 801019e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80101a2:	b2da      	uxtb	r2, r3
 80101a4:	68bb      	ldr	r3, [r7, #8]
 80101a6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	0a1b      	lsrs	r3, r3, #8
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101b2:	b2da      	uxtb	r2, r3
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101c0:	b2da      	uxtb	r2, r3
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80101c6:	697b      	ldr	r3, [r7, #20]
 80101c8:	0c1b      	lsrs	r3, r3, #16
 80101ca:	b2db      	uxtb	r3, r3
 80101cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101d0:	b2da      	uxtb	r2, r3
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d11a      	bne.n	8010212 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f000 f986 	bl	80104f2 <RTC_Bcd2ToByte>
 80101e6:	4603      	mov	r3, r0
 80101e8:	461a      	mov	r2, r3
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	785b      	ldrb	r3, [r3, #1]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 f97d 	bl	80104f2 <RTC_Bcd2ToByte>
 80101f8:	4603      	mov	r3, r0
 80101fa:	461a      	mov	r2, r3
 80101fc:	68bb      	ldr	r3, [r7, #8]
 80101fe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	789b      	ldrb	r3, [r3, #2]
 8010204:	4618      	mov	r0, r3
 8010206:	f000 f974 	bl	80104f2 <RTC_Bcd2ToByte>
 801020a:	4603      	mov	r3, r0
 801020c:	461a      	mov	r2, r3
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3718      	adds	r7, #24
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 801021c:	b590      	push	{r4, r7, lr}
 801021e:	b087      	sub	sp, #28
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801022e:	2b01      	cmp	r3, #1
 8010230:	d101      	bne.n	8010236 <HAL_RTC_SetDate+0x1a>
 8010232:	2302      	movs	r3, #2
 8010234:	e09c      	b.n	8010370 <HAL_RTC_SetDate+0x154>
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	2201      	movs	r2, #1
 801023a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	2202      	movs	r2, #2
 8010242:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d10e      	bne.n	801026a <HAL_RTC_SetDate+0x4e>
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	785b      	ldrb	r3, [r3, #1]
 8010250:	f003 0310 	and.w	r3, r3, #16
 8010254:	2b00      	cmp	r3, #0
 8010256:	d008      	beq.n	801026a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	785b      	ldrb	r3, [r3, #1]
 801025c:	f023 0310 	bic.w	r3, r3, #16
 8010260:	b2db      	uxtb	r3, r3
 8010262:	330a      	adds	r3, #10
 8010264:	b2da      	uxtb	r2, r3
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d11c      	bne.n	80102aa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	78db      	ldrb	r3, [r3, #3]
 8010274:	4618      	mov	r0, r3
 8010276:	f000 f91c 	bl	80104b2 <RTC_ByteToBcd2>
 801027a:	4603      	mov	r3, r0
 801027c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	785b      	ldrb	r3, [r3, #1]
 8010282:	4618      	mov	r0, r3
 8010284:	f000 f915 	bl	80104b2 <RTC_ByteToBcd2>
 8010288:	4603      	mov	r3, r0
 801028a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 801028c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	789b      	ldrb	r3, [r3, #2]
 8010292:	4618      	mov	r0, r3
 8010294:	f000 f90d 	bl	80104b2 <RTC_ByteToBcd2>
 8010298:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 801029a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80102a4:	4313      	orrs	r3, r2
 80102a6:	617b      	str	r3, [r7, #20]
 80102a8:	e00e      	b.n	80102c8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	78db      	ldrb	r3, [r3, #3]
 80102ae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	785b      	ldrb	r3, [r3, #1]
 80102b4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80102b6:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80102b8:	68ba      	ldr	r2, [r7, #8]
 80102ba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80102bc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80102c4:	4313      	orrs	r3, r2
 80102c6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	22ca      	movs	r2, #202	; 0xca
 80102ce:	625a      	str	r2, [r3, #36]	; 0x24
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	2253      	movs	r2, #83	; 0x53
 80102d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80102d8:	68f8      	ldr	r0, [r7, #12]
 80102da:	f000 f8c0 	bl	801045e <RTC_EnterInitMode>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00d      	beq.n	8010300 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	22ff      	movs	r2, #255	; 0xff
 80102ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2204      	movs	r2, #4
 80102f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	2200      	movs	r2, #0
 80102f8:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80102fc:	2301      	movs	r3, #1
 80102fe:	e037      	b.n	8010370 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	697b      	ldr	r3, [r7, #20]
 8010306:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801030a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 801030e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	68da      	ldr	r2, [r3, #12]
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801031e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	f003 0320 	and.w	r3, r3, #32
 801032a:	2b00      	cmp	r3, #0
 801032c:	d113      	bne.n	8010356 <HAL_RTC_SetDate+0x13a>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 801032e:	68f8      	ldr	r0, [r7, #12]
 8010330:	f000 f86f 	bl	8010412 <HAL_RTC_WaitForSynchro>
 8010334:	4603      	mov	r3, r0
 8010336:	2b00      	cmp	r3, #0
 8010338:	d00d      	beq.n	8010356 <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	22ff      	movs	r2, #255	; 0xff
 8010340:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	2204      	movs	r2, #4
 8010346:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	2200      	movs	r2, #0
 801034e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8010352:	2301      	movs	r3, #1
 8010354:	e00c      	b.n	8010370 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	22ff      	movs	r2, #255	; 0xff
 801035c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	2201      	movs	r2, #1
 8010362:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 801036e:	2300      	movs	r3, #0
  }
}
 8010370:	4618      	mov	r0, r3
 8010372:	371c      	adds	r7, #28
 8010374:	46bd      	mov	sp, r7
 8010376:	bd90      	pop	{r4, r7, pc}

08010378 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b086      	sub	sp, #24
 801037c:	af00      	add	r7, sp, #0
 801037e:	60f8      	str	r0, [r7, #12]
 8010380:	60b9      	str	r1, [r7, #8]
 8010382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801038e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8010392:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	0c1b      	lsrs	r3, r3, #16
 8010398:	b2da      	uxtb	r2, r3
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	0a1b      	lsrs	r3, r3, #8
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	f003 031f 	and.w	r3, r3, #31
 80103a8:	b2da      	uxtb	r2, r3
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80103ae:	697b      	ldr	r3, [r7, #20]
 80103b0:	b2db      	uxtb	r3, r3
 80103b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103b6:	b2da      	uxtb	r2, r3
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	0b5b      	lsrs	r3, r3, #13
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	f003 0307 	and.w	r3, r3, #7
 80103c6:	b2da      	uxtb	r2, r3
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d11a      	bne.n	8010408 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	78db      	ldrb	r3, [r3, #3]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f000 f88b 	bl	80104f2 <RTC_Bcd2ToByte>
 80103dc:	4603      	mov	r3, r0
 80103de:	461a      	mov	r2, r3
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	785b      	ldrb	r3, [r3, #1]
 80103e8:	4618      	mov	r0, r3
 80103ea:	f000 f882 	bl	80104f2 <RTC_Bcd2ToByte>
 80103ee:	4603      	mov	r3, r0
 80103f0:	461a      	mov	r2, r3
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	789b      	ldrb	r3, [r3, #2]
 80103fa:	4618      	mov	r0, r3
 80103fc:	f000 f879 	bl	80104f2 <RTC_Bcd2ToByte>
 8010400:	4603      	mov	r3, r0
 8010402:	461a      	mov	r2, r3
 8010404:	68bb      	ldr	r3, [r7, #8]
 8010406:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3718      	adds	r7, #24
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}

08010412 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8010412:	b580      	push	{r7, lr}
 8010414:	b084      	sub	sp, #16
 8010416:	af00      	add	r7, sp, #0
 8010418:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	68da      	ldr	r2, [r3, #12]
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8010428:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 801042a:	f7fd f80d 	bl	800d448 <HAL_GetTick>
 801042e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010430:	e009      	b.n	8010446 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8010432:	f7fd f809 	bl	800d448 <HAL_GetTick>
 8010436:	4602      	mov	r2, r0
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010440:	d901      	bls.n	8010446 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8010442:	2303      	movs	r3, #3
 8010444:	e007      	b.n	8010456 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	68db      	ldr	r3, [r3, #12]
 801044c:	f003 0320 	and.w	r3, r3, #32
 8010450:	2b00      	cmp	r3, #0
 8010452:	d0ee      	beq.n	8010432 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8010454:	2300      	movs	r3, #0
}
 8010456:	4618      	mov	r0, r3
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801045e:	b580      	push	{r7, lr}
 8010460:	b084      	sub	sp, #16
 8010462:	af00      	add	r7, sp, #0
 8010464:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010470:	2b00      	cmp	r3, #0
 8010472:	d119      	bne.n	80104a8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f04f 32ff 	mov.w	r2, #4294967295
 801047c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 801047e:	f7fc ffe3 	bl	800d448 <HAL_GetTick>
 8010482:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8010484:	e009      	b.n	801049a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8010486:	f7fc ffdf 	bl	800d448 <HAL_GetTick>
 801048a:	4602      	mov	r2, r0
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	1ad3      	subs	r3, r2, r3
 8010490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010494:	d901      	bls.n	801049a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8010496:	2303      	movs	r3, #3
 8010498:	e007      	b.n	80104aa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d0ee      	beq.n	8010486 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80104a8:	2300      	movs	r3, #0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3710      	adds	r7, #16
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80104b2:	b480      	push	{r7}
 80104b4:	b085      	sub	sp, #20
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	4603      	mov	r3, r0
 80104ba:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80104bc:	2300      	movs	r3, #0
 80104be:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80104c0:	79fb      	ldrb	r3, [r7, #7]
 80104c2:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 80104c4:	e005      	b.n	80104d2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	3301      	adds	r3, #1
 80104ca:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80104cc:	7afb      	ldrb	r3, [r7, #11]
 80104ce:	3b0a      	subs	r3, #10
 80104d0:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 80104d2:	7afb      	ldrb	r3, [r7, #11]
 80104d4:	2b09      	cmp	r3, #9
 80104d6:	d8f6      	bhi.n	80104c6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80104d8:	68fb      	ldr	r3, [r7, #12]
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	011b      	lsls	r3, r3, #4
 80104de:	b2da      	uxtb	r2, r3
 80104e0:	7afb      	ldrb	r3, [r7, #11]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	b2db      	uxtb	r3, r3
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	3714      	adds	r7, #20
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80104f2:	b480      	push	{r7}
 80104f4:	b085      	sub	sp, #20
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	4603      	mov	r3, r0
 80104fa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80104fc:	79fb      	ldrb	r3, [r7, #7]
 80104fe:	091b      	lsrs	r3, r3, #4
 8010500:	b2db      	uxtb	r3, r3
 8010502:	461a      	mov	r2, r3
 8010504:	4613      	mov	r3, r2
 8010506:	009b      	lsls	r3, r3, #2
 8010508:	4413      	add	r3, r2
 801050a:	005b      	lsls	r3, r3, #1
 801050c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	b2da      	uxtb	r2, r3
 8010512:	79fb      	ldrb	r3, [r7, #7]
 8010514:	f003 030f 	and.w	r3, r3, #15
 8010518:	b2db      	uxtb	r3, r3
 801051a:	4413      	add	r3, r2
 801051c:	b2db      	uxtb	r3, r3
}
 801051e:	4618      	mov	r0, r3
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 801052a:	b480      	push	{r7}
 801052c:	b087      	sub	sp, #28
 801052e:	af00      	add	r7, sp, #0
 8010530:	60f8      	str	r0, [r7, #12]
 8010532:	60b9      	str	r1, [r7, #8]
 8010534:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	3350      	adds	r3, #80	; 0x50
 801053c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	009b      	lsls	r3, r3, #2
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	4413      	add	r3, r2
 8010546:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	687a      	ldr	r2, [r7, #4]
 801054c:	601a      	str	r2, [r3, #0]
}
 801054e:	bf00      	nop
 8010550:	371c      	adds	r7, #28
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr

0801055a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801055a:	b580      	push	{r7, lr}
 801055c:	b084      	sub	sp, #16
 801055e:	af00      	add	r7, sp, #0
 8010560:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d101      	bne.n	801056c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010568:	2301      	movs	r3, #1
 801056a:	e095      	b.n	8010698 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010570:	2b00      	cmp	r3, #0
 8010572:	d108      	bne.n	8010586 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	685b      	ldr	r3, [r3, #4]
 8010578:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801057c:	d009      	beq.n	8010592 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2200      	movs	r2, #0
 8010582:	61da      	str	r2, [r3, #28]
 8010584:	e005      	b.n	8010592 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d106      	bne.n	80105b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2200      	movs	r2, #0
 80105a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80105ac:	6878      	ldr	r0, [r7, #4]
 80105ae:	f7fa fc4f 	bl	800ae50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2202      	movs	r2, #2
 80105b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80105c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	68db      	ldr	r3, [r3, #12]
 80105ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80105d2:	d902      	bls.n	80105da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80105d4:	2300      	movs	r3, #0
 80105d6:	60fb      	str	r3, [r7, #12]
 80105d8:	e002      	b.n	80105e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80105da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	68db      	ldr	r3, [r3, #12]
 80105e4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80105e8:	d007      	beq.n	80105fa <HAL_SPI_Init+0xa0>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80105f2:	d002      	beq.n	80105fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	689b      	ldr	r3, [r3, #8]
 8010606:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801060a:	431a      	orrs	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	f003 0302 	and.w	r3, r3, #2
 8010614:	431a      	orrs	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	695b      	ldr	r3, [r3, #20]
 801061a:	f003 0301 	and.w	r3, r3, #1
 801061e:	431a      	orrs	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	699b      	ldr	r3, [r3, #24]
 8010624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010628:	431a      	orrs	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	69db      	ldr	r3, [r3, #28]
 801062e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010632:	431a      	orrs	r2, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	6a1b      	ldr	r3, [r3, #32]
 8010638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801063c:	ea42 0103 	orr.w	r1, r2, r3
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010644:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	430a      	orrs	r2, r1
 801064e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	699b      	ldr	r3, [r3, #24]
 8010654:	0c1b      	lsrs	r3, r3, #16
 8010656:	f003 0204 	and.w	r2, r3, #4
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801065e:	f003 0310 	and.w	r3, r3, #16
 8010662:	431a      	orrs	r2, r3
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010668:	f003 0308 	and.w	r3, r3, #8
 801066c:	431a      	orrs	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	68db      	ldr	r3, [r3, #12]
 8010672:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010676:	ea42 0103 	orr.w	r1, r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	430a      	orrs	r2, r1
 8010686:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2200      	movs	r2, #0
 801068c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2201      	movs	r2, #1
 8010692:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8010696:	2300      	movs	r3, #0
}
 8010698:	4618      	mov	r0, r3
 801069a:	3710      	adds	r7, #16
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b08a      	sub	sp, #40	; 0x28
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	60b9      	str	r1, [r7, #8]
 80106aa:	607a      	str	r2, [r7, #4]
 80106ac:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80106ae:	2301      	movs	r3, #1
 80106b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80106b2:	2300      	movs	r3, #0
 80106b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80106be:	2b01      	cmp	r3, #1
 80106c0:	d101      	bne.n	80106c6 <HAL_SPI_TransmitReceive+0x26>
 80106c2:	2302      	movs	r3, #2
 80106c4:	e1fb      	b.n	8010abe <HAL_SPI_TransmitReceive+0x41e>
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	2201      	movs	r2, #1
 80106ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80106ce:	f7fc febb 	bl	800d448 <HAL_GetTick>
 80106d2:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80106da:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	685b      	ldr	r3, [r3, #4]
 80106e0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80106e2:	887b      	ldrh	r3, [r7, #2]
 80106e4:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80106e6:	887b      	ldrh	r3, [r7, #2]
 80106e8:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80106ea:	7efb      	ldrb	r3, [r7, #27]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d00e      	beq.n	801070e <HAL_SPI_TransmitReceive+0x6e>
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80106f6:	d106      	bne.n	8010706 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d102      	bne.n	8010706 <HAL_SPI_TransmitReceive+0x66>
 8010700:	7efb      	ldrb	r3, [r7, #27]
 8010702:	2b04      	cmp	r3, #4
 8010704:	d003      	beq.n	801070e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8010706:	2302      	movs	r3, #2
 8010708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801070c:	e1cd      	b.n	8010aaa <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801070e:	68bb      	ldr	r3, [r7, #8]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d005      	beq.n	8010720 <HAL_SPI_TransmitReceive+0x80>
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d002      	beq.n	8010720 <HAL_SPI_TransmitReceive+0x80>
 801071a:	887b      	ldrh	r3, [r7, #2]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d103      	bne.n	8010728 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8010720:	2301      	movs	r3, #1
 8010722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8010726:	e1c0      	b.n	8010aaa <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801072e:	b2db      	uxtb	r3, r3
 8010730:	2b04      	cmp	r3, #4
 8010732:	d003      	beq.n	801073c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2205      	movs	r2, #5
 8010738:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	2200      	movs	r2, #0
 8010740:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	687a      	ldr	r2, [r7, #4]
 8010746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	887a      	ldrh	r2, [r7, #2]
 801074c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	887a      	ldrh	r2, [r7, #2]
 8010754:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	68ba      	ldr	r2, [r7, #8]
 801075c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	887a      	ldrh	r2, [r7, #2]
 8010762:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	887a      	ldrh	r2, [r7, #2]
 8010768:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2200      	movs	r2, #0
 801076e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2200      	movs	r2, #0
 8010774:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801077e:	d802      	bhi.n	8010786 <HAL_SPI_TransmitReceive+0xe6>
 8010780:	8a3b      	ldrh	r3, [r7, #16]
 8010782:	2b01      	cmp	r3, #1
 8010784:	d908      	bls.n	8010798 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	685a      	ldr	r2, [r3, #4]
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010794:	605a      	str	r2, [r3, #4]
 8010796:	e007      	b.n	80107a8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	685a      	ldr	r2, [r3, #4]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80107a6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107b2:	2b40      	cmp	r3, #64	; 0x40
 80107b4:	d007      	beq.n	80107c6 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80107c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80107ce:	d97c      	bls.n	80108ca <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d002      	beq.n	80107de <HAL_SPI_TransmitReceive+0x13e>
 80107d8:	8a7b      	ldrh	r3, [r7, #18]
 80107da:	2b01      	cmp	r3, #1
 80107dc:	d169      	bne.n	80108b2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107e2:	881a      	ldrh	r2, [r3, #0]
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ee:	1c9a      	adds	r2, r3, #2
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	3b01      	subs	r3, #1
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010802:	e056      	b.n	80108b2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	f003 0302 	and.w	r3, r3, #2
 801080e:	2b02      	cmp	r3, #2
 8010810:	d11b      	bne.n	801084a <HAL_SPI_TransmitReceive+0x1aa>
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010816:	b29b      	uxth	r3, r3
 8010818:	2b00      	cmp	r3, #0
 801081a:	d016      	beq.n	801084a <HAL_SPI_TransmitReceive+0x1aa>
 801081c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801081e:	2b01      	cmp	r3, #1
 8010820:	d113      	bne.n	801084a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010826:	881a      	ldrh	r2, [r3, #0]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010832:	1c9a      	adds	r2, r3, #2
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801083c:	b29b      	uxth	r3, r3
 801083e:	3b01      	subs	r3, #1
 8010840:	b29a      	uxth	r2, r3
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8010846:	2300      	movs	r3, #0
 8010848:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	689b      	ldr	r3, [r3, #8]
 8010850:	f003 0301 	and.w	r3, r3, #1
 8010854:	2b01      	cmp	r3, #1
 8010856:	d11c      	bne.n	8010892 <HAL_SPI_TransmitReceive+0x1f2>
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801085e:	b29b      	uxth	r3, r3
 8010860:	2b00      	cmp	r3, #0
 8010862:	d016      	beq.n	8010892 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	68da      	ldr	r2, [r3, #12]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801086e:	b292      	uxth	r2, r2
 8010870:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010876:	1c9a      	adds	r2, r3, #2
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010882:	b29b      	uxth	r3, r3
 8010884:	3b01      	subs	r3, #1
 8010886:	b29a      	uxth	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801088e:	2301      	movs	r3, #1
 8010890:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010892:	f7fc fdd9 	bl	800d448 <HAL_GetTick>
 8010896:	4602      	mov	r2, r0
 8010898:	69fb      	ldr	r3, [r7, #28]
 801089a:	1ad3      	subs	r3, r2, r3
 801089c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801089e:	429a      	cmp	r2, r3
 80108a0:	d807      	bhi.n	80108b2 <HAL_SPI_TransmitReceive+0x212>
 80108a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108a8:	d003      	beq.n	80108b2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80108aa:	2303      	movs	r3, #3
 80108ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80108b0:	e0fb      	b.n	8010aaa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80108b6:	b29b      	uxth	r3, r3
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d1a3      	bne.n	8010804 <HAL_SPI_TransmitReceive+0x164>
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d19d      	bne.n	8010804 <HAL_SPI_TransmitReceive+0x164>
 80108c8:	e0df      	b.n	8010a8a <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d003      	beq.n	80108da <HAL_SPI_TransmitReceive+0x23a>
 80108d2:	8a7b      	ldrh	r3, [r7, #18]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	f040 80cb 	bne.w	8010a70 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80108de:	b29b      	uxth	r3, r3
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d912      	bls.n	801090a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108e8:	881a      	ldrh	r2, [r3, #0]
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108f4:	1c9a      	adds	r2, r3, #2
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80108fe:	b29b      	uxth	r3, r3
 8010900:	3b02      	subs	r3, #2
 8010902:	b29a      	uxth	r2, r3
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	87da      	strh	r2, [r3, #62]	; 0x3e
 8010908:	e0b2      	b.n	8010a70 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	330c      	adds	r3, #12
 8010914:	7812      	ldrb	r2, [r2, #0]
 8010916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801091c:	1c5a      	adds	r2, r3, #1
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010926:	b29b      	uxth	r3, r3
 8010928:	3b01      	subs	r3, #1
 801092a:	b29a      	uxth	r2, r3
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010930:	e09e      	b.n	8010a70 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	689b      	ldr	r3, [r3, #8]
 8010938:	f003 0302 	and.w	r3, r3, #2
 801093c:	2b02      	cmp	r3, #2
 801093e:	d134      	bne.n	80109aa <HAL_SPI_TransmitReceive+0x30a>
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010944:	b29b      	uxth	r3, r3
 8010946:	2b00      	cmp	r3, #0
 8010948:	d02f      	beq.n	80109aa <HAL_SPI_TransmitReceive+0x30a>
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	2b01      	cmp	r3, #1
 801094e:	d12c      	bne.n	80109aa <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010954:	b29b      	uxth	r3, r3
 8010956:	2b01      	cmp	r3, #1
 8010958:	d912      	bls.n	8010980 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801095e:	881a      	ldrh	r2, [r3, #0]
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801096a:	1c9a      	adds	r2, r3, #2
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010974:	b29b      	uxth	r3, r3
 8010976:	3b02      	subs	r3, #2
 8010978:	b29a      	uxth	r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801097e:	e012      	b.n	80109a6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	330c      	adds	r3, #12
 801098a:	7812      	ldrb	r2, [r2, #0]
 801098c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010992:	1c5a      	adds	r2, r3, #1
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801099c:	b29b      	uxth	r3, r3
 801099e:	3b01      	subs	r3, #1
 80109a0:	b29a      	uxth	r2, r3
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80109a6:	2300      	movs	r3, #0
 80109a8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	689b      	ldr	r3, [r3, #8]
 80109b0:	f003 0301 	and.w	r3, r3, #1
 80109b4:	2b01      	cmp	r3, #1
 80109b6:	d148      	bne.n	8010a4a <HAL_SPI_TransmitReceive+0x3aa>
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80109be:	b29b      	uxth	r3, r3
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d042      	beq.n	8010a4a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	2b01      	cmp	r3, #1
 80109ce:	d923      	bls.n	8010a18 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68da      	ldr	r2, [r3, #12]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109da:	b292      	uxth	r2, r2
 80109dc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109e2:	1c9a      	adds	r2, r3, #2
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	3b02      	subs	r3, #2
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	2b01      	cmp	r3, #1
 8010a04:	d81f      	bhi.n	8010a46 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010a14:	605a      	str	r2, [r3, #4]
 8010a16:	e016      	b.n	8010a46 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f103 020c 	add.w	r2, r3, #12
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a24:	7812      	ldrb	r2, [r2, #0]
 8010a26:	b2d2      	uxtb	r2, r2
 8010a28:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2e:	1c5a      	adds	r2, r3, #1
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	3b01      	subs	r3, #1
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010a46:	2301      	movs	r3, #1
 8010a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010a4a:	f7fc fcfd 	bl	800d448 <HAL_GetTick>
 8010a4e:	4602      	mov	r2, r0
 8010a50:	69fb      	ldr	r3, [r7, #28]
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d803      	bhi.n	8010a62 <HAL_SPI_TransmitReceive+0x3c2>
 8010a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a60:	d102      	bne.n	8010a68 <HAL_SPI_TransmitReceive+0x3c8>
 8010a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d103      	bne.n	8010a70 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8010a6e:	e01c      	b.n	8010aaa <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	f47f af5b 	bne.w	8010932 <HAL_SPI_TransmitReceive+0x292>
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f47f af54 	bne.w	8010932 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010a8a:	69fa      	ldr	r2, [r7, #28]
 8010a8c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a8e:	68f8      	ldr	r0, [r7, #12]
 8010a90:	f000 f938 	bl	8010d04 <SPI_EndRxTxTransaction>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d006      	beq.n	8010aa8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8010a9a:	2301      	movs	r3, #1
 8010a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2220      	movs	r2, #32
 8010aa4:	661a      	str	r2, [r3, #96]	; 0x60
 8010aa6:	e000      	b.n	8010aaa <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8010aa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	2201      	movs	r2, #1
 8010aae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	2200      	movs	r2, #0
 8010ab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8010aba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3728      	adds	r7, #40	; 0x28
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd80      	pop	{r7, pc}
	...

08010ac8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b088      	sub	sp, #32
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	60f8      	str	r0, [r7, #12]
 8010ad0:	60b9      	str	r1, [r7, #8]
 8010ad2:	603b      	str	r3, [r7, #0]
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8010ad8:	f7fc fcb6 	bl	800d448 <HAL_GetTick>
 8010adc:	4602      	mov	r2, r0
 8010ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae0:	1a9b      	subs	r3, r3, r2
 8010ae2:	683a      	ldr	r2, [r7, #0]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8010ae8:	f7fc fcae 	bl	800d448 <HAL_GetTick>
 8010aec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8010aee:	4b39      	ldr	r3, [pc, #228]	; (8010bd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	015b      	lsls	r3, r3, #5
 8010af4:	0d1b      	lsrs	r3, r3, #20
 8010af6:	69fa      	ldr	r2, [r7, #28]
 8010af8:	fb02 f303 	mul.w	r3, r2, r3
 8010afc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010afe:	e054      	b.n	8010baa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b06:	d050      	beq.n	8010baa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010b08:	f7fc fc9e 	bl	800d448 <HAL_GetTick>
 8010b0c:	4602      	mov	r2, r0
 8010b0e:	69bb      	ldr	r3, [r7, #24]
 8010b10:	1ad3      	subs	r3, r2, r3
 8010b12:	69fa      	ldr	r2, [r7, #28]
 8010b14:	429a      	cmp	r2, r3
 8010b16:	d902      	bls.n	8010b1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8010b18:	69fb      	ldr	r3, [r7, #28]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d13d      	bne.n	8010b9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	685a      	ldr	r2, [r3, #4]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010b2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010b36:	d111      	bne.n	8010b5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	689b      	ldr	r3, [r3, #8]
 8010b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010b40:	d004      	beq.n	8010b4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	689b      	ldr	r3, [r3, #8]
 8010b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010b4a:	d107      	bne.n	8010b5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	681a      	ldr	r2, [r3, #0]
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010b5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010b64:	d10f      	bne.n	8010b86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	681a      	ldr	r2, [r3, #0]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010b74:	601a      	str	r2, [r3, #0]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010b84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	2201      	movs	r2, #1
 8010b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010b96:	2303      	movs	r3, #3
 8010b98:	e017      	b.n	8010bca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d101      	bne.n	8010ba4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	689a      	ldr	r2, [r3, #8]
 8010bb0:	68bb      	ldr	r3, [r7, #8]
 8010bb2:	4013      	ands	r3, r2
 8010bb4:	68ba      	ldr	r2, [r7, #8]
 8010bb6:	429a      	cmp	r2, r3
 8010bb8:	bf0c      	ite	eq
 8010bba:	2301      	moveq	r3, #1
 8010bbc:	2300      	movne	r3, #0
 8010bbe:	b2db      	uxtb	r3, r3
 8010bc0:	461a      	mov	r2, r3
 8010bc2:	79fb      	ldrb	r3, [r7, #7]
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d19b      	bne.n	8010b00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3720      	adds	r7, #32
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20000014 	.word	0x20000014

08010bd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b08a      	sub	sp, #40	; 0x28
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	60f8      	str	r0, [r7, #12]
 8010be0:	60b9      	str	r1, [r7, #8]
 8010be2:	607a      	str	r2, [r7, #4]
 8010be4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8010be6:	2300      	movs	r3, #0
 8010be8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8010bea:	f7fc fc2d 	bl	800d448 <HAL_GetTick>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bf2:	1a9b      	subs	r3, r3, r2
 8010bf4:	683a      	ldr	r2, [r7, #0]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8010bfa:	f7fc fc25 	bl	800d448 <HAL_GetTick>
 8010bfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	330c      	adds	r3, #12
 8010c06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8010c08:	4b3d      	ldr	r3, [pc, #244]	; (8010d00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	009b      	lsls	r3, r3, #2
 8010c10:	4413      	add	r3, r2
 8010c12:	00da      	lsls	r2, r3, #3
 8010c14:	1ad3      	subs	r3, r2, r3
 8010c16:	0d1b      	lsrs	r3, r3, #20
 8010c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c1a:	fb02 f303 	mul.w	r3, r2, r3
 8010c1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8010c20:	e060      	b.n	8010ce4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8010c22:	68bb      	ldr	r3, [r7, #8]
 8010c24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010c28:	d107      	bne.n	8010c3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d104      	bne.n	8010c3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	b2db      	uxtb	r3, r3
 8010c36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8010c38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c40:	d050      	beq.n	8010ce4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8010c42:	f7fc fc01 	bl	800d448 <HAL_GetTick>
 8010c46:	4602      	mov	r2, r0
 8010c48:	6a3b      	ldr	r3, [r7, #32]
 8010c4a:	1ad3      	subs	r3, r2, r3
 8010c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d902      	bls.n	8010c58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8010c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d13d      	bne.n	8010cd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	685a      	ldr	r2, [r3, #4]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010c66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	685b      	ldr	r3, [r3, #4]
 8010c6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8010c70:	d111      	bne.n	8010c96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	689b      	ldr	r3, [r3, #8]
 8010c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010c7a:	d004      	beq.n	8010c86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c84:	d107      	bne.n	8010c96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	681a      	ldr	r2, [r3, #0]
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010c9e:	d10f      	bne.n	8010cc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010cae:	601a      	str	r2, [r3, #0]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	681a      	ldr	r2, [r3, #0]
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010cbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8010cd0:	2303      	movs	r3, #3
 8010cd2:	e010      	b.n	8010cf6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010cd4:	69bb      	ldr	r3, [r7, #24]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d101      	bne.n	8010cde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8010cda:	2300      	movs	r3, #0
 8010cdc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8010cde:	69bb      	ldr	r3, [r7, #24]
 8010ce0:	3b01      	subs	r3, #1
 8010ce2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	689a      	ldr	r2, [r3, #8]
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	4013      	ands	r3, r2
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d196      	bne.n	8010c22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8010cf4:	2300      	movs	r3, #0
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3728      	adds	r7, #40	; 0x28
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	20000014 	.word	0x20000014

08010d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b086      	sub	sp, #24
 8010d08:	af02      	add	r7, sp, #8
 8010d0a:	60f8      	str	r0, [r7, #12]
 8010d0c:	60b9      	str	r1, [r7, #8]
 8010d0e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	9300      	str	r3, [sp, #0]
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	2200      	movs	r2, #0
 8010d18:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8010d1c:	68f8      	ldr	r0, [r7, #12]
 8010d1e:	f7ff ff5b 	bl	8010bd8 <SPI_WaitFifoStateUntilTimeout>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d007      	beq.n	8010d38 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d2c:	f043 0220 	orr.w	r2, r3, #32
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010d34:	2303      	movs	r3, #3
 8010d36:	e027      	b.n	8010d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	9300      	str	r3, [sp, #0]
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	2180      	movs	r1, #128	; 0x80
 8010d42:	68f8      	ldr	r0, [r7, #12]
 8010d44:	f7ff fec0 	bl	8010ac8 <SPI_WaitFlagStateUntilTimeout>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d007      	beq.n	8010d5e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d52:	f043 0220 	orr.w	r2, r3, #32
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010d5a:	2303      	movs	r3, #3
 8010d5c:	e014      	b.n	8010d88 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	2200      	movs	r2, #0
 8010d66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8010d6a:	68f8      	ldr	r0, [r7, #12]
 8010d6c:	f7ff ff34 	bl	8010bd8 <SPI_WaitFifoStateUntilTimeout>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d007      	beq.n	8010d86 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010d7a:	f043 0220 	orr.w	r2, r3, #32
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8010d82:	2303      	movs	r3, #3
 8010d84:	e000      	b.n	8010d88 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8010d86:	2300      	movs	r3, #0
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3710      	adds	r7, #16
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d101      	bne.n	8010da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010d9e:	2301      	movs	r3, #1
 8010da0:	e054      	b.n	8010e4c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d111      	bne.n	8010dd2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f000 ff68 	bl	8011c8c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d102      	bne.n	8010dca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	4a23      	ldr	r2, [pc, #140]	; (8010e54 <HAL_TIM_Base_Init+0xc4>)
 8010dc8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	2202      	movs	r2, #2
 8010dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	3304      	adds	r3, #4
 8010de2:	4619      	mov	r1, r3
 8010de4:	4610      	mov	r0, r2
 8010de6:	f000 fbd3 	bl	8011590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2201      	movs	r2, #1
 8010dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2201      	movs	r2, #1
 8010df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2201      	movs	r2, #1
 8010dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	2201      	movs	r2, #1
 8010e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	2201      	movs	r2, #1
 8010e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2201      	movs	r2, #1
 8010e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2201      	movs	r2, #1
 8010e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2201      	movs	r2, #1
 8010e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2201      	movs	r2, #1
 8010e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2201      	movs	r2, #1
 8010e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010e4a:	2300      	movs	r3, #0
}
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	3708      	adds	r7, #8
 8010e50:	46bd      	mov	sp, r7
 8010e52:	bd80      	pop	{r7, pc}
 8010e54:	0800af3d 	.word	0x0800af3d

08010e58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b085      	sub	sp, #20
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d001      	beq.n	8010e70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	e036      	b.n	8010ede <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2202      	movs	r2, #2
 8010e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	68da      	ldr	r2, [r3, #12]
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f042 0201 	orr.w	r2, r2, #1
 8010e86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a17      	ldr	r2, [pc, #92]	; (8010eec <HAL_TIM_Base_Start_IT+0x94>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d004      	beq.n	8010e9c <HAL_TIM_Base_Start_IT+0x44>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e9a:	d115      	bne.n	8010ec8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	689a      	ldr	r2, [r3, #8]
 8010ea2:	4b13      	ldr	r3, [pc, #76]	; (8010ef0 <HAL_TIM_Base_Start_IT+0x98>)
 8010ea4:	4013      	ands	r3, r2
 8010ea6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2b06      	cmp	r3, #6
 8010eac:	d015      	beq.n	8010eda <HAL_TIM_Base_Start_IT+0x82>
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010eb4:	d011      	beq.n	8010eda <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	f042 0201 	orr.w	r2, r2, #1
 8010ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ec6:	e008      	b.n	8010eda <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	681a      	ldr	r2, [r3, #0]
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	f042 0201 	orr.w	r2, r2, #1
 8010ed6:	601a      	str	r2, [r3, #0]
 8010ed8:	e000      	b.n	8010edc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010eda:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010edc:	2300      	movs	r3, #0
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3714      	adds	r7, #20
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr
 8010eea:	bf00      	nop
 8010eec:	40012c00 	.word	0x40012c00
 8010ef0:	00010007 	.word	0x00010007

08010ef4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b082      	sub	sp, #8
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d101      	bne.n	8010f06 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8010f02:	2301      	movs	r3, #1
 8010f04:	e054      	b.n	8010fb0 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010f0c:	b2db      	uxtb	r3, r3
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d111      	bne.n	8010f36 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2200      	movs	r2, #0
 8010f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 feb6 	bl	8011c8c <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d102      	bne.n	8010f2e <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4a23      	ldr	r2, [pc, #140]	; (8010fb8 <HAL_TIM_OC_Init+0xc4>)
 8010f2c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2202      	movs	r2, #2
 8010f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	3304      	adds	r3, #4
 8010f46:	4619      	mov	r1, r3
 8010f48:	4610      	mov	r0, r2
 8010f4a:	f000 fb21 	bl	8011590 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	2201      	movs	r2, #1
 8010f52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2201      	movs	r2, #1
 8010f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2201      	movs	r2, #1
 8010f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2201      	movs	r2, #1
 8010f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	2201      	movs	r2, #1
 8010f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2201      	movs	r2, #1
 8010f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2201      	movs	r2, #1
 8010f9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	2201      	movs	r2, #1
 8010fa2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2201      	movs	r2, #1
 8010faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3708      	adds	r7, #8
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	08010fbd 	.word	0x08010fbd

08010fbc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b083      	sub	sp, #12
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8010fc4:	bf00      	nop
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	b082      	sub	sp, #8
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	691b      	ldr	r3, [r3, #16]
 8010fde:	f003 0302 	and.w	r3, r3, #2
 8010fe2:	2b02      	cmp	r3, #2
 8010fe4:	d128      	bne.n	8011038 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	f003 0302 	and.w	r3, r3, #2
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d121      	bne.n	8011038 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	f06f 0202 	mvn.w	r2, #2
 8010ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	2201      	movs	r2, #1
 8011002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	699b      	ldr	r3, [r3, #24]
 801100a:	f003 0303 	and.w	r3, r3, #3
 801100e:	2b00      	cmp	r3, #0
 8011010:	d005      	beq.n	801101e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011018:	6878      	ldr	r0, [r7, #4]
 801101a:	4798      	blx	r3
 801101c:	e009      	b.n	8011032 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	2200      	movs	r2, #0
 8011036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	691b      	ldr	r3, [r3, #16]
 801103e:	f003 0304 	and.w	r3, r3, #4
 8011042:	2b04      	cmp	r3, #4
 8011044:	d128      	bne.n	8011098 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	f003 0304 	and.w	r3, r3, #4
 8011050:	2b04      	cmp	r3, #4
 8011052:	d121      	bne.n	8011098 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	f06f 0204 	mvn.w	r2, #4
 801105c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2202      	movs	r2, #2
 8011062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	699b      	ldr	r3, [r3, #24]
 801106a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801106e:	2b00      	cmp	r3, #0
 8011070:	d005      	beq.n	801107e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011078:	6878      	ldr	r0, [r7, #4]
 801107a:	4798      	blx	r3
 801107c:	e009      	b.n	8011092 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011084:	6878      	ldr	r0, [r7, #4]
 8011086:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2200      	movs	r2, #0
 8011096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	691b      	ldr	r3, [r3, #16]
 801109e:	f003 0308 	and.w	r3, r3, #8
 80110a2:	2b08      	cmp	r3, #8
 80110a4:	d128      	bne.n	80110f8 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	f003 0308 	and.w	r3, r3, #8
 80110b0:	2b08      	cmp	r3, #8
 80110b2:	d121      	bne.n	80110f8 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f06f 0208 	mvn.w	r2, #8
 80110bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2204      	movs	r2, #4
 80110c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	69db      	ldr	r3, [r3, #28]
 80110ca:	f003 0303 	and.w	r3, r3, #3
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d005      	beq.n	80110de <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	4798      	blx	r3
 80110dc:	e009      	b.n	80110f2 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	691b      	ldr	r3, [r3, #16]
 80110fe:	f003 0310 	and.w	r3, r3, #16
 8011102:	2b10      	cmp	r3, #16
 8011104:	d128      	bne.n	8011158 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	f003 0310 	and.w	r3, r3, #16
 8011110:	2b10      	cmp	r3, #16
 8011112:	d121      	bne.n	8011158 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	f06f 0210 	mvn.w	r2, #16
 801111c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2208      	movs	r2, #8
 8011122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	69db      	ldr	r3, [r3, #28]
 801112a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801112e:	2b00      	cmp	r3, #0
 8011130:	d005      	beq.n	801113e <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011138:	6878      	ldr	r0, [r7, #4]
 801113a:	4798      	blx	r3
 801113c:	e009      	b.n	8011152 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801114e:	6878      	ldr	r0, [r7, #4]
 8011150:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	2200      	movs	r2, #0
 8011156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	691b      	ldr	r3, [r3, #16]
 801115e:	f003 0301 	and.w	r3, r3, #1
 8011162:	2b01      	cmp	r3, #1
 8011164:	d110      	bne.n	8011188 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	68db      	ldr	r3, [r3, #12]
 801116c:	f003 0301 	and.w	r3, r3, #1
 8011170:	2b01      	cmp	r3, #1
 8011172:	d109      	bne.n	8011188 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	f06f 0201 	mvn.w	r2, #1
 801117c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	681b      	ldr	r3, [r3, #0]
 801118c:	691b      	ldr	r3, [r3, #16]
 801118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011192:	2b80      	cmp	r3, #128	; 0x80
 8011194:	d110      	bne.n	80111b8 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	68db      	ldr	r3, [r3, #12]
 801119c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111a0:	2b80      	cmp	r3, #128	; 0x80
 80111a2:	d109      	bne.n	80111b8 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80111ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80111b4:	6878      	ldr	r0, [r7, #4]
 80111b6:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	691b      	ldr	r3, [r3, #16]
 80111be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80111c6:	d110      	bne.n	80111ea <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	68db      	ldr	r3, [r3, #12]
 80111ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111d2:	2b80      	cmp	r3, #128	; 0x80
 80111d4:	d109      	bne.n	80111ea <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80111de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	691b      	ldr	r3, [r3, #16]
 80111f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111f4:	2b40      	cmp	r3, #64	; 0x40
 80111f6:	d110      	bne.n	801121a <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	68db      	ldr	r3, [r3, #12]
 80111fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011202:	2b40      	cmp	r3, #64	; 0x40
 8011204:	d109      	bne.n	801121a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801120e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	f003 0320 	and.w	r3, r3, #32
 8011224:	2b20      	cmp	r3, #32
 8011226:	d110      	bne.n	801124a <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	f003 0320 	and.w	r3, r3, #32
 8011232:	2b20      	cmp	r3, #32
 8011234:	d109      	bne.n	801124a <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	f06f 0220 	mvn.w	r2, #32
 801123e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011246:	6878      	ldr	r0, [r7, #4]
 8011248:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801124a:	bf00      	nop
 801124c:	3708      	adds	r7, #8
 801124e:	46bd      	mov	sp, r7
 8011250:	bd80      	pop	{r7, pc}
	...

08011254 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b086      	sub	sp, #24
 8011258:	af00      	add	r7, sp, #0
 801125a:	60f8      	str	r0, [r7, #12]
 801125c:	60b9      	str	r1, [r7, #8]
 801125e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801126a:	2b01      	cmp	r3, #1
 801126c:	d101      	bne.n	8011272 <HAL_TIM_OC_ConfigChannel+0x1e>
 801126e:	2302      	movs	r3, #2
 8011270:	e066      	b.n	8011340 <HAL_TIM_OC_ConfigChannel+0xec>
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2201      	movs	r2, #1
 8011276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2b14      	cmp	r3, #20
 801127e:	d857      	bhi.n	8011330 <HAL_TIM_OC_ConfigChannel+0xdc>
 8011280:	a201      	add	r2, pc, #4	; (adr r2, 8011288 <HAL_TIM_OC_ConfigChannel+0x34>)
 8011282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011286:	bf00      	nop
 8011288:	080112dd 	.word	0x080112dd
 801128c:	08011331 	.word	0x08011331
 8011290:	08011331 	.word	0x08011331
 8011294:	08011331 	.word	0x08011331
 8011298:	080112eb 	.word	0x080112eb
 801129c:	08011331 	.word	0x08011331
 80112a0:	08011331 	.word	0x08011331
 80112a4:	08011331 	.word	0x08011331
 80112a8:	080112f9 	.word	0x080112f9
 80112ac:	08011331 	.word	0x08011331
 80112b0:	08011331 	.word	0x08011331
 80112b4:	08011331 	.word	0x08011331
 80112b8:	08011307 	.word	0x08011307
 80112bc:	08011331 	.word	0x08011331
 80112c0:	08011331 	.word	0x08011331
 80112c4:	08011331 	.word	0x08011331
 80112c8:	08011315 	.word	0x08011315
 80112cc:	08011331 	.word	0x08011331
 80112d0:	08011331 	.word	0x08011331
 80112d4:	08011331 	.word	0x08011331
 80112d8:	08011323 	.word	0x08011323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	68b9      	ldr	r1, [r7, #8]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f000 f9b8 	bl	8011658 <TIM_OC1_SetConfig>
      break;
 80112e8:	e025      	b.n	8011336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	68b9      	ldr	r1, [r7, #8]
 80112f0:	4618      	mov	r0, r3
 80112f2:	f000 fa2d 	bl	8011750 <TIM_OC2_SetConfig>
      break;
 80112f6:	e01e      	b.n	8011336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	68b9      	ldr	r1, [r7, #8]
 80112fe:	4618      	mov	r0, r3
 8011300:	f000 faa0 	bl	8011844 <TIM_OC3_SetConfig>
      break;
 8011304:	e017      	b.n	8011336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	68b9      	ldr	r1, [r7, #8]
 801130c:	4618      	mov	r0, r3
 801130e:	f000 fb11 	bl	8011934 <TIM_OC4_SetConfig>
      break;
 8011312:	e010      	b.n	8011336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	68b9      	ldr	r1, [r7, #8]
 801131a:	4618      	mov	r0, r3
 801131c:	f000 fb68 	bl	80119f0 <TIM_OC5_SetConfig>
      break;
 8011320:	e009      	b.n	8011336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	68b9      	ldr	r1, [r7, #8]
 8011328:	4618      	mov	r0, r3
 801132a:	f000 fbb9 	bl	8011aa0 <TIM_OC6_SetConfig>
      break;
 801132e:	e002      	b.n	8011336 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8011330:	2301      	movs	r3, #1
 8011332:	75fb      	strb	r3, [r7, #23]
      break;
 8011334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801133e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011340:	4618      	mov	r0, r3
 8011342:	3718      	adds	r7, #24
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b084      	sub	sp, #16
 801134c:	af00      	add	r7, sp, #0
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011352:	2300      	movs	r3, #0
 8011354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801135c:	2b01      	cmp	r3, #1
 801135e:	d101      	bne.n	8011364 <HAL_TIM_ConfigClockSource+0x1c>
 8011360:	2302      	movs	r3, #2
 8011362:	e0b6      	b.n	80114d2 <HAL_TIM_ConfigClockSource+0x18a>
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2201      	movs	r2, #1
 8011368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2202      	movs	r2, #2
 8011370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	689b      	ldr	r3, [r3, #8]
 801137a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8011382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8011386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801138e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80113a0:	d03e      	beq.n	8011420 <HAL_TIM_ConfigClockSource+0xd8>
 80113a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80113a6:	f200 8087 	bhi.w	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113ae:	f000 8086 	beq.w	80114be <HAL_TIM_ConfigClockSource+0x176>
 80113b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113b6:	d87f      	bhi.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113b8:	2b70      	cmp	r3, #112	; 0x70
 80113ba:	d01a      	beq.n	80113f2 <HAL_TIM_ConfigClockSource+0xaa>
 80113bc:	2b70      	cmp	r3, #112	; 0x70
 80113be:	d87b      	bhi.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113c0:	2b60      	cmp	r3, #96	; 0x60
 80113c2:	d050      	beq.n	8011466 <HAL_TIM_ConfigClockSource+0x11e>
 80113c4:	2b60      	cmp	r3, #96	; 0x60
 80113c6:	d877      	bhi.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113c8:	2b50      	cmp	r3, #80	; 0x50
 80113ca:	d03c      	beq.n	8011446 <HAL_TIM_ConfigClockSource+0xfe>
 80113cc:	2b50      	cmp	r3, #80	; 0x50
 80113ce:	d873      	bhi.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113d0:	2b40      	cmp	r3, #64	; 0x40
 80113d2:	d058      	beq.n	8011486 <HAL_TIM_ConfigClockSource+0x13e>
 80113d4:	2b40      	cmp	r3, #64	; 0x40
 80113d6:	d86f      	bhi.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113d8:	2b30      	cmp	r3, #48	; 0x30
 80113da:	d064      	beq.n	80114a6 <HAL_TIM_ConfigClockSource+0x15e>
 80113dc:	2b30      	cmp	r3, #48	; 0x30
 80113de:	d86b      	bhi.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113e0:	2b20      	cmp	r3, #32
 80113e2:	d060      	beq.n	80114a6 <HAL_TIM_ConfigClockSource+0x15e>
 80113e4:	2b20      	cmp	r3, #32
 80113e6:	d867      	bhi.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d05c      	beq.n	80114a6 <HAL_TIM_ConfigClockSource+0x15e>
 80113ec:	2b10      	cmp	r3, #16
 80113ee:	d05a      	beq.n	80114a6 <HAL_TIM_ConfigClockSource+0x15e>
 80113f0:	e062      	b.n	80114b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6818      	ldr	r0, [r3, #0]
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	6899      	ldr	r1, [r3, #8]
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	685a      	ldr	r2, [r3, #4]
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	68db      	ldr	r3, [r3, #12]
 8011402:	f000 fc23 	bl	8011c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	689b      	ldr	r3, [r3, #8]
 801140c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8011414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	68ba      	ldr	r2, [r7, #8]
 801141c:	609a      	str	r2, [r3, #8]
      break;
 801141e:	e04f      	b.n	80114c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6818      	ldr	r0, [r3, #0]
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	6899      	ldr	r1, [r3, #8]
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	685a      	ldr	r2, [r3, #4]
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	68db      	ldr	r3, [r3, #12]
 8011430:	f000 fc0c 	bl	8011c4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	689a      	ldr	r2, [r3, #8]
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011442:	609a      	str	r2, [r3, #8]
      break;
 8011444:	e03c      	b.n	80114c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	6818      	ldr	r0, [r3, #0]
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	6859      	ldr	r1, [r3, #4]
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	68db      	ldr	r3, [r3, #12]
 8011452:	461a      	mov	r2, r3
 8011454:	f000 fb7e 	bl	8011b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	2150      	movs	r1, #80	; 0x50
 801145e:	4618      	mov	r0, r3
 8011460:	f000 fbd7 	bl	8011c12 <TIM_ITRx_SetConfig>
      break;
 8011464:	e02c      	b.n	80114c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6818      	ldr	r0, [r3, #0]
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	6859      	ldr	r1, [r3, #4]
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	68db      	ldr	r3, [r3, #12]
 8011472:	461a      	mov	r2, r3
 8011474:	f000 fb9d 	bl	8011bb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	2160      	movs	r1, #96	; 0x60
 801147e:	4618      	mov	r0, r3
 8011480:	f000 fbc7 	bl	8011c12 <TIM_ITRx_SetConfig>
      break;
 8011484:	e01c      	b.n	80114c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6818      	ldr	r0, [r3, #0]
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	6859      	ldr	r1, [r3, #4]
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	461a      	mov	r2, r3
 8011494:	f000 fb5e 	bl	8011b54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	2140      	movs	r1, #64	; 0x40
 801149e:	4618      	mov	r0, r3
 80114a0:	f000 fbb7 	bl	8011c12 <TIM_ITRx_SetConfig>
      break;
 80114a4:	e00c      	b.n	80114c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	683b      	ldr	r3, [r7, #0]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	4619      	mov	r1, r3
 80114b0:	4610      	mov	r0, r2
 80114b2:	f000 fbae 	bl	8011c12 <TIM_ITRx_SetConfig>
      break;
 80114b6:	e003      	b.n	80114c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80114b8:	2301      	movs	r3, #1
 80114ba:	73fb      	strb	r3, [r7, #15]
      break;
 80114bc:	e000      	b.n	80114c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80114be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2201      	movs	r2, #1
 80114c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	2200      	movs	r2, #0
 80114cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80114d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80114d2:	4618      	mov	r0, r3
 80114d4:	3710      	adds	r7, #16
 80114d6:	46bd      	mov	sp, r7
 80114d8:	bd80      	pop	{r7, pc}

080114da <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80114da:	b480      	push	{r7}
 80114dc:	b083      	sub	sp, #12
 80114de:	af00      	add	r7, sp, #0
 80114e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80114e2:	bf00      	nop
 80114e4:	370c      	adds	r7, #12
 80114e6:	46bd      	mov	sp, r7
 80114e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ec:	4770      	bx	lr

080114ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80114ee:	b480      	push	{r7}
 80114f0:	b083      	sub	sp, #12
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80114f6:	bf00      	nop
 80114f8:	370c      	adds	r7, #12
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr

08011502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011502:	b480      	push	{r7}
 8011504:	b083      	sub	sp, #12
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801150a:	bf00      	nop
 801150c:	370c      	adds	r7, #12
 801150e:	46bd      	mov	sp, r7
 8011510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011514:	4770      	bx	lr

08011516 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011516:	b480      	push	{r7}
 8011518:	b083      	sub	sp, #12
 801151a:	af00      	add	r7, sp, #0
 801151c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 801151e:	bf00      	nop
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801152a:	b480      	push	{r7}
 801152c:	b083      	sub	sp, #12
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011532:	bf00      	nop
 8011534:	370c      	adds	r7, #12
 8011536:	46bd      	mov	sp, r7
 8011538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153c:	4770      	bx	lr

0801153e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 801153e:	b480      	push	{r7}
 8011540:	b083      	sub	sp, #12
 8011542:	af00      	add	r7, sp, #0
 8011544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8011546:	bf00      	nop
 8011548:	370c      	adds	r7, #12
 801154a:	46bd      	mov	sp, r7
 801154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011550:	4770      	bx	lr

08011552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011552:	b480      	push	{r7}
 8011554:	b083      	sub	sp, #12
 8011556:	af00      	add	r7, sp, #0
 8011558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801155a:	bf00      	nop
 801155c:	370c      	adds	r7, #12
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr

08011566 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011566:	b480      	push	{r7}
 8011568:	b083      	sub	sp, #12
 801156a:	af00      	add	r7, sp, #0
 801156c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 801156e:	bf00      	nop
 8011570:	370c      	adds	r7, #12
 8011572:	46bd      	mov	sp, r7
 8011574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011578:	4770      	bx	lr

0801157a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 801157a:	b480      	push	{r7}
 801157c:	b083      	sub	sp, #12
 801157e:	af00      	add	r7, sp, #0
 8011580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8011582:	bf00      	nop
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr
	...

08011590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011590:	b480      	push	{r7}
 8011592:	b085      	sub	sp, #20
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	4a2a      	ldr	r2, [pc, #168]	; (801164c <TIM_Base_SetConfig+0xbc>)
 80115a4:	4293      	cmp	r3, r2
 80115a6:	d003      	beq.n	80115b0 <TIM_Base_SetConfig+0x20>
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115ae:	d108      	bne.n	80115c2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80115b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	4313      	orrs	r3, r2
 80115c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	4a21      	ldr	r2, [pc, #132]	; (801164c <TIM_Base_SetConfig+0xbc>)
 80115c6:	4293      	cmp	r3, r2
 80115c8:	d00b      	beq.n	80115e2 <TIM_Base_SetConfig+0x52>
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115d0:	d007      	beq.n	80115e2 <TIM_Base_SetConfig+0x52>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	4a1e      	ldr	r2, [pc, #120]	; (8011650 <TIM_Base_SetConfig+0xc0>)
 80115d6:	4293      	cmp	r3, r2
 80115d8:	d003      	beq.n	80115e2 <TIM_Base_SetConfig+0x52>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	4a1d      	ldr	r2, [pc, #116]	; (8011654 <TIM_Base_SetConfig+0xc4>)
 80115de:	4293      	cmp	r3, r2
 80115e0:	d108      	bne.n	80115f4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80115ea:	683b      	ldr	r3, [r7, #0]
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	4313      	orrs	r3, r2
 80115f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	4313      	orrs	r3, r2
 8011600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	68fa      	ldr	r2, [r7, #12]
 8011606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011608:	683b      	ldr	r3, [r7, #0]
 801160a:	689a      	ldr	r2, [r3, #8]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	681a      	ldr	r2, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	4a0c      	ldr	r2, [pc, #48]	; (801164c <TIM_Base_SetConfig+0xbc>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d007      	beq.n	8011630 <TIM_Base_SetConfig+0xa0>
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	4a0b      	ldr	r2, [pc, #44]	; (8011650 <TIM_Base_SetConfig+0xc0>)
 8011624:	4293      	cmp	r3, r2
 8011626:	d003      	beq.n	8011630 <TIM_Base_SetConfig+0xa0>
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	4a0a      	ldr	r2, [pc, #40]	; (8011654 <TIM_Base_SetConfig+0xc4>)
 801162c:	4293      	cmp	r3, r2
 801162e:	d103      	bne.n	8011638 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	691a      	ldr	r2, [r3, #16]
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2201      	movs	r2, #1
 801163c:	615a      	str	r2, [r3, #20]
}
 801163e:	bf00      	nop
 8011640:	3714      	adds	r7, #20
 8011642:	46bd      	mov	sp, r7
 8011644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011648:	4770      	bx	lr
 801164a:	bf00      	nop
 801164c:	40012c00 	.word	0x40012c00
 8011650:	40014400 	.word	0x40014400
 8011654:	40014800 	.word	0x40014800

08011658 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011658:	b480      	push	{r7}
 801165a:	b087      	sub	sp, #28
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6a1b      	ldr	r3, [r3, #32]
 8011666:	f023 0201 	bic.w	r2, r3, #1
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6a1b      	ldr	r3, [r3, #32]
 8011672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	699b      	ldr	r3, [r3, #24]
 801167e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801168a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	f023 0303 	bic.w	r3, r3, #3
 8011692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011694:	683b      	ldr	r3, [r7, #0]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	68fa      	ldr	r2, [r7, #12]
 801169a:	4313      	orrs	r3, r2
 801169c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	f023 0302 	bic.w	r3, r3, #2
 80116a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	689b      	ldr	r3, [r3, #8]
 80116aa:	697a      	ldr	r2, [r7, #20]
 80116ac:	4313      	orrs	r3, r2
 80116ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	4a24      	ldr	r2, [pc, #144]	; (8011744 <TIM_OC1_SetConfig+0xec>)
 80116b4:	4293      	cmp	r3, r2
 80116b6:	d007      	beq.n	80116c8 <TIM_OC1_SetConfig+0x70>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	4a23      	ldr	r2, [pc, #140]	; (8011748 <TIM_OC1_SetConfig+0xf0>)
 80116bc:	4293      	cmp	r3, r2
 80116be:	d003      	beq.n	80116c8 <TIM_OC1_SetConfig+0x70>
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	4a22      	ldr	r2, [pc, #136]	; (801174c <TIM_OC1_SetConfig+0xf4>)
 80116c4:	4293      	cmp	r3, r2
 80116c6:	d10c      	bne.n	80116e2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	f023 0308 	bic.w	r3, r3, #8
 80116ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80116d0:	683b      	ldr	r3, [r7, #0]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	697a      	ldr	r2, [r7, #20]
 80116d6:	4313      	orrs	r3, r2
 80116d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	f023 0304 	bic.w	r3, r3, #4
 80116e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4a17      	ldr	r2, [pc, #92]	; (8011744 <TIM_OC1_SetConfig+0xec>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d007      	beq.n	80116fa <TIM_OC1_SetConfig+0xa2>
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	4a17      	ldr	r2, [pc, #92]	; (801174c <TIM_OC1_SetConfig+0xf4>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d003      	beq.n	80116fa <TIM_OC1_SetConfig+0xa2>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	4a14      	ldr	r2, [pc, #80]	; (8011748 <TIM_OC1_SetConfig+0xf0>)
 80116f6:	4293      	cmp	r3, r2
 80116f8:	d111      	bne.n	801171e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011702:	693b      	ldr	r3, [r7, #16]
 8011704:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	695b      	ldr	r3, [r3, #20]
 801170e:	693a      	ldr	r2, [r7, #16]
 8011710:	4313      	orrs	r3, r2
 8011712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	699b      	ldr	r3, [r3, #24]
 8011718:	693a      	ldr	r2, [r7, #16]
 801171a:	4313      	orrs	r3, r2
 801171c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	693a      	ldr	r2, [r7, #16]
 8011722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	68fa      	ldr	r2, [r7, #12]
 8011728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	685a      	ldr	r2, [r3, #4]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	697a      	ldr	r2, [r7, #20]
 8011736:	621a      	str	r2, [r3, #32]
}
 8011738:	bf00      	nop
 801173a:	371c      	adds	r7, #28
 801173c:	46bd      	mov	sp, r7
 801173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011742:	4770      	bx	lr
 8011744:	40012c00 	.word	0x40012c00
 8011748:	40014800 	.word	0x40014800
 801174c:	40014400 	.word	0x40014400

08011750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011750:	b480      	push	{r7}
 8011752:	b087      	sub	sp, #28
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a1b      	ldr	r3, [r3, #32]
 801175e:	f023 0210 	bic.w	r2, r3, #16
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	6a1b      	ldr	r3, [r3, #32]
 801176a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	685b      	ldr	r3, [r3, #4]
 8011770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	699b      	ldr	r3, [r3, #24]
 8011776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801177e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801178a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	021b      	lsls	r3, r3, #8
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	4313      	orrs	r3, r2
 8011796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	f023 0320 	bic.w	r3, r3, #32
 801179e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	011b      	lsls	r3, r3, #4
 80117a6:	697a      	ldr	r2, [r7, #20]
 80117a8:	4313      	orrs	r3, r2
 80117aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	4a22      	ldr	r2, [pc, #136]	; (8011838 <TIM_OC2_SetConfig+0xe8>)
 80117b0:	4293      	cmp	r3, r2
 80117b2:	d10d      	bne.n	80117d0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	68db      	ldr	r3, [r3, #12]
 80117c0:	011b      	lsls	r3, r3, #4
 80117c2:	697a      	ldr	r2, [r7, #20]
 80117c4:	4313      	orrs	r3, r2
 80117c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80117c8:	697b      	ldr	r3, [r7, #20]
 80117ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80117ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	4a19      	ldr	r2, [pc, #100]	; (8011838 <TIM_OC2_SetConfig+0xe8>)
 80117d4:	4293      	cmp	r3, r2
 80117d6:	d007      	beq.n	80117e8 <TIM_OC2_SetConfig+0x98>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	4a18      	ldr	r2, [pc, #96]	; (801183c <TIM_OC2_SetConfig+0xec>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d003      	beq.n	80117e8 <TIM_OC2_SetConfig+0x98>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	4a17      	ldr	r2, [pc, #92]	; (8011840 <TIM_OC2_SetConfig+0xf0>)
 80117e4:	4293      	cmp	r3, r2
 80117e6:	d113      	bne.n	8011810 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80117ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80117f0:	693b      	ldr	r3, [r7, #16]
 80117f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80117f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	695b      	ldr	r3, [r3, #20]
 80117fc:	009b      	lsls	r3, r3, #2
 80117fe:	693a      	ldr	r2, [r7, #16]
 8011800:	4313      	orrs	r3, r2
 8011802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	699b      	ldr	r3, [r3, #24]
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	693a      	ldr	r2, [r7, #16]
 801180c:	4313      	orrs	r3, r2
 801180e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	693a      	ldr	r2, [r7, #16]
 8011814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	697a      	ldr	r2, [r7, #20]
 8011828:	621a      	str	r2, [r3, #32]
}
 801182a:	bf00      	nop
 801182c:	371c      	adds	r7, #28
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr
 8011836:	bf00      	nop
 8011838:	40012c00 	.word	0x40012c00
 801183c:	40014400 	.word	0x40014400
 8011840:	40014800 	.word	0x40014800

08011844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011844:	b480      	push	{r7}
 8011846:	b087      	sub	sp, #28
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
 801184c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	6a1b      	ldr	r3, [r3, #32]
 8011852:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	6a1b      	ldr	r3, [r3, #32]
 801185e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	685b      	ldr	r3, [r3, #4]
 8011864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	69db      	ldr	r3, [r3, #28]
 801186a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	f023 0303 	bic.w	r3, r3, #3
 801187e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	68fa      	ldr	r2, [r7, #12]
 8011886:	4313      	orrs	r3, r2
 8011888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011890:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	689b      	ldr	r3, [r3, #8]
 8011896:	021b      	lsls	r3, r3, #8
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	4313      	orrs	r3, r2
 801189c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	4a21      	ldr	r2, [pc, #132]	; (8011928 <TIM_OC3_SetConfig+0xe4>)
 80118a2:	4293      	cmp	r3, r2
 80118a4:	d10d      	bne.n	80118c2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80118ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	68db      	ldr	r3, [r3, #12]
 80118b2:	021b      	lsls	r3, r3, #8
 80118b4:	697a      	ldr	r2, [r7, #20]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80118ba:	697b      	ldr	r3, [r7, #20]
 80118bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80118c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4a18      	ldr	r2, [pc, #96]	; (8011928 <TIM_OC3_SetConfig+0xe4>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	d007      	beq.n	80118da <TIM_OC3_SetConfig+0x96>
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	4a17      	ldr	r2, [pc, #92]	; (801192c <TIM_OC3_SetConfig+0xe8>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d003      	beq.n	80118da <TIM_OC3_SetConfig+0x96>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	4a16      	ldr	r2, [pc, #88]	; (8011930 <TIM_OC3_SetConfig+0xec>)
 80118d6:	4293      	cmp	r3, r2
 80118d8:	d113      	bne.n	8011902 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80118da:	693b      	ldr	r3, [r7, #16]
 80118dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80118e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80118e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	695b      	ldr	r3, [r3, #20]
 80118ee:	011b      	lsls	r3, r3, #4
 80118f0:	693a      	ldr	r2, [r7, #16]
 80118f2:	4313      	orrs	r3, r2
 80118f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	699b      	ldr	r3, [r3, #24]
 80118fa:	011b      	lsls	r3, r3, #4
 80118fc:	693a      	ldr	r2, [r7, #16]
 80118fe:	4313      	orrs	r3, r2
 8011900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	693a      	ldr	r2, [r7, #16]
 8011906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	68fa      	ldr	r2, [r7, #12]
 801190c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801190e:	683b      	ldr	r3, [r7, #0]
 8011910:	685a      	ldr	r2, [r3, #4]
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	697a      	ldr	r2, [r7, #20]
 801191a:	621a      	str	r2, [r3, #32]
}
 801191c:	bf00      	nop
 801191e:	371c      	adds	r7, #28
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr
 8011928:	40012c00 	.word	0x40012c00
 801192c:	40014400 	.word	0x40014400
 8011930:	40014800 	.word	0x40014800

08011934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011934:	b480      	push	{r7}
 8011936:	b087      	sub	sp, #28
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
 801193c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	6a1b      	ldr	r3, [r3, #32]
 8011942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6a1b      	ldr	r3, [r3, #32]
 801194e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	69db      	ldr	r3, [r3, #28]
 801195a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801196e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	021b      	lsls	r3, r3, #8
 8011976:	68fa      	ldr	r2, [r7, #12]
 8011978:	4313      	orrs	r3, r2
 801197a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801197c:	693b      	ldr	r3, [r7, #16]
 801197e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011984:	683b      	ldr	r3, [r7, #0]
 8011986:	689b      	ldr	r3, [r3, #8]
 8011988:	031b      	lsls	r3, r3, #12
 801198a:	693a      	ldr	r2, [r7, #16]
 801198c:	4313      	orrs	r3, r2
 801198e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	4a14      	ldr	r2, [pc, #80]	; (80119e4 <TIM_OC4_SetConfig+0xb0>)
 8011994:	4293      	cmp	r3, r2
 8011996:	d007      	beq.n	80119a8 <TIM_OC4_SetConfig+0x74>
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	4a13      	ldr	r2, [pc, #76]	; (80119e8 <TIM_OC4_SetConfig+0xb4>)
 801199c:	4293      	cmp	r3, r2
 801199e:	d003      	beq.n	80119a8 <TIM_OC4_SetConfig+0x74>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	4a12      	ldr	r2, [pc, #72]	; (80119ec <TIM_OC4_SetConfig+0xb8>)
 80119a4:	4293      	cmp	r3, r2
 80119a6:	d109      	bne.n	80119bc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80119ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	695b      	ldr	r3, [r3, #20]
 80119b4:	019b      	lsls	r3, r3, #6
 80119b6:	697a      	ldr	r2, [r7, #20]
 80119b8:	4313      	orrs	r3, r2
 80119ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	697a      	ldr	r2, [r7, #20]
 80119c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	68fa      	ldr	r2, [r7, #12]
 80119c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	685a      	ldr	r2, [r3, #4]
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	693a      	ldr	r2, [r7, #16]
 80119d4:	621a      	str	r2, [r3, #32]
}
 80119d6:	bf00      	nop
 80119d8:	371c      	adds	r7, #28
 80119da:	46bd      	mov	sp, r7
 80119dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e0:	4770      	bx	lr
 80119e2:	bf00      	nop
 80119e4:	40012c00 	.word	0x40012c00
 80119e8:	40014400 	.word	0x40014400
 80119ec:	40014800 	.word	0x40014800

080119f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b087      	sub	sp, #28
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	6a1b      	ldr	r3, [r3, #32]
 80119fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	6a1b      	ldr	r3, [r3, #32]
 8011a0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	685b      	ldr	r3, [r3, #4]
 8011a10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	68fa      	ldr	r2, [r7, #12]
 8011a2a:	4313      	orrs	r3, r2
 8011a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011a34:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	689b      	ldr	r3, [r3, #8]
 8011a3a:	041b      	lsls	r3, r3, #16
 8011a3c:	693a      	ldr	r2, [r7, #16]
 8011a3e:	4313      	orrs	r3, r2
 8011a40:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	4a13      	ldr	r2, [pc, #76]	; (8011a94 <TIM_OC5_SetConfig+0xa4>)
 8011a46:	4293      	cmp	r3, r2
 8011a48:	d007      	beq.n	8011a5a <TIM_OC5_SetConfig+0x6a>
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	4a12      	ldr	r2, [pc, #72]	; (8011a98 <TIM_OC5_SetConfig+0xa8>)
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	d003      	beq.n	8011a5a <TIM_OC5_SetConfig+0x6a>
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4a11      	ldr	r2, [pc, #68]	; (8011a9c <TIM_OC5_SetConfig+0xac>)
 8011a56:	4293      	cmp	r3, r2
 8011a58:	d109      	bne.n	8011a6e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	695b      	ldr	r3, [r3, #20]
 8011a66:	021b      	lsls	r3, r3, #8
 8011a68:	697a      	ldr	r2, [r7, #20]
 8011a6a:	4313      	orrs	r3, r2
 8011a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	697a      	ldr	r2, [r7, #20]
 8011a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	68fa      	ldr	r2, [r7, #12]
 8011a78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011a7a:	683b      	ldr	r3, [r7, #0]
 8011a7c:	685a      	ldr	r2, [r3, #4]
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	693a      	ldr	r2, [r7, #16]
 8011a86:	621a      	str	r2, [r3, #32]
}
 8011a88:	bf00      	nop
 8011a8a:	371c      	adds	r7, #28
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a92:	4770      	bx	lr
 8011a94:	40012c00 	.word	0x40012c00
 8011a98:	40014400 	.word	0x40014400
 8011a9c:	40014800 	.word	0x40014800

08011aa0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b087      	sub	sp, #28
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6a1b      	ldr	r3, [r3, #32]
 8011aae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6a1b      	ldr	r3, [r3, #32]
 8011aba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8011ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	681b      	ldr	r3, [r3, #0]
 8011ad8:	021b      	lsls	r3, r3, #8
 8011ada:	68fa      	ldr	r2, [r7, #12]
 8011adc:	4313      	orrs	r3, r2
 8011ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011ae0:	693b      	ldr	r3, [r7, #16]
 8011ae2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	689b      	ldr	r3, [r3, #8]
 8011aec:	051b      	lsls	r3, r3, #20
 8011aee:	693a      	ldr	r2, [r7, #16]
 8011af0:	4313      	orrs	r3, r2
 8011af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	4a14      	ldr	r2, [pc, #80]	; (8011b48 <TIM_OC6_SetConfig+0xa8>)
 8011af8:	4293      	cmp	r3, r2
 8011afa:	d007      	beq.n	8011b0c <TIM_OC6_SetConfig+0x6c>
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	4a13      	ldr	r2, [pc, #76]	; (8011b4c <TIM_OC6_SetConfig+0xac>)
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d003      	beq.n	8011b0c <TIM_OC6_SetConfig+0x6c>
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	4a12      	ldr	r2, [pc, #72]	; (8011b50 <TIM_OC6_SetConfig+0xb0>)
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	d109      	bne.n	8011b20 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011b0c:	697b      	ldr	r3, [r7, #20]
 8011b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011b12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	695b      	ldr	r3, [r3, #20]
 8011b18:	029b      	lsls	r3, r3, #10
 8011b1a:	697a      	ldr	r2, [r7, #20]
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	697a      	ldr	r2, [r7, #20]
 8011b24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	68fa      	ldr	r2, [r7, #12]
 8011b2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	685a      	ldr	r2, [r3, #4]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	693a      	ldr	r2, [r7, #16]
 8011b38:	621a      	str	r2, [r3, #32]
}
 8011b3a:	bf00      	nop
 8011b3c:	371c      	adds	r7, #28
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b44:	4770      	bx	lr
 8011b46:	bf00      	nop
 8011b48:	40012c00 	.word	0x40012c00
 8011b4c:	40014400 	.word	0x40014400
 8011b50:	40014800 	.word	0x40014800

08011b54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011b54:	b480      	push	{r7}
 8011b56:	b087      	sub	sp, #28
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	6a1b      	ldr	r3, [r3, #32]
 8011b64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	6a1b      	ldr	r3, [r3, #32]
 8011b6a:	f023 0201 	bic.w	r2, r3, #1
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	699b      	ldr	r3, [r3, #24]
 8011b76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011b78:	693b      	ldr	r3, [r7, #16]
 8011b7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	011b      	lsls	r3, r3, #4
 8011b84:	693a      	ldr	r2, [r7, #16]
 8011b86:	4313      	orrs	r3, r2
 8011b88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011b8a:	697b      	ldr	r3, [r7, #20]
 8011b8c:	f023 030a 	bic.w	r3, r3, #10
 8011b90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011b92:	697a      	ldr	r2, [r7, #20]
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	4313      	orrs	r3, r2
 8011b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	693a      	ldr	r2, [r7, #16]
 8011b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	697a      	ldr	r2, [r7, #20]
 8011ba4:	621a      	str	r2, [r3, #32]
}
 8011ba6:	bf00      	nop
 8011ba8:	371c      	adds	r7, #28
 8011baa:	46bd      	mov	sp, r7
 8011bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb0:	4770      	bx	lr

08011bb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011bb2:	b480      	push	{r7}
 8011bb4:	b087      	sub	sp, #28
 8011bb6:	af00      	add	r7, sp, #0
 8011bb8:	60f8      	str	r0, [r7, #12]
 8011bba:	60b9      	str	r1, [r7, #8]
 8011bbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	f023 0210 	bic.w	r2, r3, #16
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	699b      	ldr	r3, [r3, #24]
 8011bce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6a1b      	ldr	r3, [r3, #32]
 8011bd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011bdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	031b      	lsls	r3, r3, #12
 8011be2:	697a      	ldr	r2, [r7, #20]
 8011be4:	4313      	orrs	r3, r2
 8011be6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011bee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	011b      	lsls	r3, r3, #4
 8011bf4:	693a      	ldr	r2, [r7, #16]
 8011bf6:	4313      	orrs	r3, r2
 8011bf8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	697a      	ldr	r2, [r7, #20]
 8011bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	693a      	ldr	r2, [r7, #16]
 8011c04:	621a      	str	r2, [r3, #32]
}
 8011c06:	bf00      	nop
 8011c08:	371c      	adds	r7, #28
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr

08011c12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8011c12:	b480      	push	{r7}
 8011c14:	b085      	sub	sp, #20
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	6078      	str	r0, [r7, #4]
 8011c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	689b      	ldr	r3, [r3, #8]
 8011c20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011c2e:	683a      	ldr	r2, [r7, #0]
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	4313      	orrs	r3, r2
 8011c34:	f043 0307 	orr.w	r3, r3, #7
 8011c38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	68fa      	ldr	r2, [r7, #12]
 8011c3e:	609a      	str	r2, [r3, #8]
}
 8011c40:	bf00      	nop
 8011c42:	3714      	adds	r7, #20
 8011c44:	46bd      	mov	sp, r7
 8011c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4a:	4770      	bx	lr

08011c4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011c4c:	b480      	push	{r7}
 8011c4e:	b087      	sub	sp, #28
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	607a      	str	r2, [r7, #4]
 8011c58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	689b      	ldr	r3, [r3, #8]
 8011c5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011c66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011c68:	683b      	ldr	r3, [r7, #0]
 8011c6a:	021a      	lsls	r2, r3, #8
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	431a      	orrs	r2, r3
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	4313      	orrs	r3, r2
 8011c74:	697a      	ldr	r2, [r7, #20]
 8011c76:	4313      	orrs	r3, r2
 8011c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	697a      	ldr	r2, [r7, #20]
 8011c7e:	609a      	str	r2, [r3, #8]
}
 8011c80:	bf00      	nop
 8011c82:	371c      	adds	r7, #28
 8011c84:	46bd      	mov	sp, r7
 8011c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8a:	4770      	bx	lr

08011c8c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8011c8c:	b480      	push	{r7}
 8011c8e:	b083      	sub	sp, #12
 8011c90:	af00      	add	r7, sp, #0
 8011c92:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	4a1e      	ldr	r2, [pc, #120]	; (8011d10 <TIM_ResetCallback+0x84>)
 8011c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	4a1d      	ldr	r2, [pc, #116]	; (8011d14 <TIM_ResetCallback+0x88>)
 8011ca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	4a1c      	ldr	r2, [pc, #112]	; (8011d18 <TIM_ResetCallback+0x8c>)
 8011ca8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	4a1b      	ldr	r2, [pc, #108]	; (8011d1c <TIM_ResetCallback+0x90>)
 8011cb0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	4a1a      	ldr	r2, [pc, #104]	; (8011d20 <TIM_ResetCallback+0x94>)
 8011cb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	4a19      	ldr	r2, [pc, #100]	; (8011d24 <TIM_ResetCallback+0x98>)
 8011cc0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	4a18      	ldr	r2, [pc, #96]	; (8011d28 <TIM_ResetCallback+0x9c>)
 8011cc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4a17      	ldr	r2, [pc, #92]	; (8011d2c <TIM_ResetCallback+0xa0>)
 8011cd0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	4a16      	ldr	r2, [pc, #88]	; (8011d30 <TIM_ResetCallback+0xa4>)
 8011cd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	4a15      	ldr	r2, [pc, #84]	; (8011d34 <TIM_ResetCallback+0xa8>)
 8011ce0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	4a14      	ldr	r2, [pc, #80]	; (8011d38 <TIM_ResetCallback+0xac>)
 8011ce8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	4a13      	ldr	r2, [pc, #76]	; (8011d3c <TIM_ResetCallback+0xb0>)
 8011cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	4a12      	ldr	r2, [pc, #72]	; (8011d40 <TIM_ResetCallback+0xb4>)
 8011cf8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	4a11      	ldr	r2, [pc, #68]	; (8011d44 <TIM_ResetCallback+0xb8>)
 8011d00:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8011d04:	bf00      	nop
 8011d06:	370c      	adds	r7, #12
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr
 8011d10:	08005bc9 	.word	0x08005bc9
 8011d14:	080114db 	.word	0x080114db
 8011d18:	08011553 	.word	0x08011553
 8011d1c:	08011567 	.word	0x08011567
 8011d20:	08011503 	.word	0x08011503
 8011d24:	08011517 	.word	0x08011517
 8011d28:	080114ef 	.word	0x080114ef
 8011d2c:	0801152b 	.word	0x0801152b
 8011d30:	0801153f 	.word	0x0801153f
 8011d34:	0801157b 	.word	0x0801157b
 8011d38:	08011f29 	.word	0x08011f29
 8011d3c:	08011f3d 	.word	0x08011f3d
 8011d40:	08011f51 	.word	0x08011f51
 8011d44:	08011f65 	.word	0x08011f65

08011d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011d48:	b480      	push	{r7}
 8011d4a:	b085      	sub	sp, #20
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011d58:	2b01      	cmp	r3, #1
 8011d5a:	d101      	bne.n	8011d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011d5c:	2302      	movs	r3, #2
 8011d5e:	e04a      	b.n	8011df6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	2201      	movs	r2, #1
 8011d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2202      	movs	r2, #2
 8011d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	689b      	ldr	r3, [r3, #8]
 8011d7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4a1f      	ldr	r2, [pc, #124]	; (8011e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8011d86:	4293      	cmp	r3, r2
 8011d88:	d108      	bne.n	8011d9c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011d90:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011d92:	683b      	ldr	r3, [r7, #0]
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	68fa      	ldr	r2, [r7, #12]
 8011d98:	4313      	orrs	r3, r2
 8011d9a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011da2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	68fa      	ldr	r2, [r7, #12]
 8011daa:	4313      	orrs	r3, r2
 8011dac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	4a12      	ldr	r2, [pc, #72]	; (8011e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8011dbc:	4293      	cmp	r3, r2
 8011dbe:	d004      	beq.n	8011dca <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011dc8:	d10c      	bne.n	8011de4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011dd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	68ba      	ldr	r2, [r7, #8]
 8011dd8:	4313      	orrs	r3, r2
 8011dda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	681b      	ldr	r3, [r3, #0]
 8011de0:	68ba      	ldr	r2, [r7, #8]
 8011de2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	2201      	movs	r2, #1
 8011de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2200      	movs	r2, #0
 8011df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011df4:	2300      	movs	r3, #0
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3714      	adds	r7, #20
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e00:	4770      	bx	lr
 8011e02:	bf00      	nop
 8011e04:	40012c00 	.word	0x40012c00

08011e08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011e08:	b480      	push	{r7}
 8011e0a:	b085      	sub	sp, #20
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	6078      	str	r0, [r7, #4]
 8011e10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011e12:	2300      	movs	r3, #0
 8011e14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011e1c:	2b01      	cmp	r3, #1
 8011e1e:	d101      	bne.n	8011e24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011e20:	2302      	movs	r3, #2
 8011e22:	e078      	b.n	8011f16 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	4313      	orrs	r3, r2
 8011e38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	689b      	ldr	r3, [r3, #8]
 8011e44:	4313      	orrs	r3, r2
 8011e46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	685b      	ldr	r3, [r3, #4]
 8011e52:	4313      	orrs	r3, r2
 8011e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011e5c:	683b      	ldr	r3, [r7, #0]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	4313      	orrs	r3, r2
 8011e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	4313      	orrs	r3, r2
 8011e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011e72:	68fb      	ldr	r3, [r7, #12]
 8011e74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	695b      	ldr	r3, [r3, #20]
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011e86:	683b      	ldr	r3, [r7, #0]
 8011e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e8a:	4313      	orrs	r3, r2
 8011e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	699b      	ldr	r3, [r3, #24]
 8011e98:	041b      	lsls	r3, r3, #16
 8011e9a:	4313      	orrs	r3, r2
 8011e9c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	4a20      	ldr	r2, [pc, #128]	; (8011f24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011ea4:	4293      	cmp	r3, r2
 8011ea6:	d106      	bne.n	8011eb6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	69db      	ldr	r3, [r3, #28]
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	4a1a      	ldr	r2, [pc, #104]	; (8011f24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011ebc:	4293      	cmp	r3, r2
 8011ebe:	d121      	bne.n	8011f04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eca:	051b      	lsls	r3, r3, #20
 8011ecc:	4313      	orrs	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	6a1b      	ldr	r3, [r3, #32]
 8011eda:	4313      	orrs	r3, r2
 8011edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ee8:	4313      	orrs	r3, r2
 8011eea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	4a0c      	ldr	r2, [pc, #48]	; (8011f24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8011ef2:	4293      	cmp	r3, r2
 8011ef4:	d106      	bne.n	8011f04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f00:	4313      	orrs	r3, r2
 8011f02:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011f14:	2300      	movs	r3, #0
}
 8011f16:	4618      	mov	r0, r3
 8011f18:	3714      	adds	r7, #20
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f20:	4770      	bx	lr
 8011f22:	bf00      	nop
 8011f24:	40012c00 	.word	0x40012c00

08011f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011f28:	b480      	push	{r7}
 8011f2a:	b083      	sub	sp, #12
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011f30:	bf00      	nop
 8011f32:	370c      	adds	r7, #12
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	4770      	bx	lr

08011f3c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b083      	sub	sp, #12
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8011f44:	bf00      	nop
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011f50:	b480      	push	{r7}
 8011f52:	b083      	sub	sp, #12
 8011f54:	af00      	add	r7, sp, #0
 8011f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011f58:	bf00      	nop
 8011f5a:	370c      	adds	r7, #12
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b083      	sub	sp, #12
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011f6c:	bf00      	nop
 8011f6e:	370c      	adds	r7, #12
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr

08011f78 <LL_RCC_GetUSARTClockSource>:
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b083      	sub	sp, #12
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8011f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011f84:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	4013      	ands	r3, r2
}
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	370c      	adds	r7, #12
 8011f90:	46bd      	mov	sp, r7
 8011f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f96:	4770      	bx	lr

08011f98 <LL_RCC_GetLPUARTClockSource>:
{
 8011f98:	b480      	push	{r7}
 8011f9a:	b083      	sub	sp, #12
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8011fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8011fa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	4013      	ands	r3, r2
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	370c      	adds	r7, #12
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b082      	sub	sp, #8
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d101      	bne.n	8011fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011fc6:	2301      	movs	r3, #1
 8011fc8:	e042      	b.n	8012050 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d106      	bne.n	8011fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f7f8 fe7d 	bl	800acdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2224      	movs	r2, #36	; 0x24
 8011fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	f022 0201 	bic.w	r2, r2, #1
 8011ff8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 fbfe 	bl	80127fc <UART_SetConfig>
 8012000:	4603      	mov	r3, r0
 8012002:	2b01      	cmp	r3, #1
 8012004:	d101      	bne.n	801200a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012006:	2301      	movs	r3, #1
 8012008:	e022      	b.n	8012050 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801200e:	2b00      	cmp	r3, #0
 8012010:	d002      	beq.n	8012018 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f000 fe1a 	bl	8012c4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	685a      	ldr	r2, [r3, #4]
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	689a      	ldr	r2, [r3, #8]
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	681a      	ldr	r2, [r3, #0]
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	f042 0201 	orr.w	r2, r2, #1
 8012046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012048:	6878      	ldr	r0, [r7, #4]
 801204a:	f000 fea1 	bl	8012d90 <UART_CheckIdleState>
 801204e:	4603      	mov	r3, r0
}
 8012050:	4618      	mov	r0, r3
 8012052:	3708      	adds	r7, #8
 8012054:	46bd      	mov	sp, r7
 8012056:	bd80      	pop	{r7, pc}

08012058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	b08a      	sub	sp, #40	; 0x28
 801205c:	af02      	add	r7, sp, #8
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	603b      	str	r3, [r7, #0]
 8012064:	4613      	mov	r3, r2
 8012066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801206e:	2b20      	cmp	r3, #32
 8012070:	d17b      	bne.n	801216a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d002      	beq.n	801207e <HAL_UART_Transmit+0x26>
 8012078:	88fb      	ldrh	r3, [r7, #6]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d101      	bne.n	8012082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801207e:	2301      	movs	r3, #1
 8012080:	e074      	b.n	801216c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2200      	movs	r2, #0
 8012086:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	2221      	movs	r2, #33	; 0x21
 801208e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012092:	f7fb f9d9 	bl	800d448 <HAL_GetTick>
 8012096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	88fa      	ldrh	r2, [r7, #6]
 801209c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	88fa      	ldrh	r2, [r7, #6]
 80120a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80120b0:	d108      	bne.n	80120c4 <HAL_UART_Transmit+0x6c>
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	691b      	ldr	r3, [r3, #16]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d104      	bne.n	80120c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80120ba:	2300      	movs	r3, #0
 80120bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	61bb      	str	r3, [r7, #24]
 80120c2:	e003      	b.n	80120cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80120c8:	2300      	movs	r3, #0
 80120ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80120cc:	e030      	b.n	8012130 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	9300      	str	r3, [sp, #0]
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	2200      	movs	r2, #0
 80120d6:	2180      	movs	r1, #128	; 0x80
 80120d8:	68f8      	ldr	r0, [r7, #12]
 80120da:	f000 ff03 	bl	8012ee4 <UART_WaitOnFlagUntilTimeout>
 80120de:	4603      	mov	r3, r0
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d005      	beq.n	80120f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2220      	movs	r2, #32
 80120e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80120ec:	2303      	movs	r3, #3
 80120ee:	e03d      	b.n	801216c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d10b      	bne.n	801210e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80120f6:	69bb      	ldr	r3, [r7, #24]
 80120f8:	881b      	ldrh	r3, [r3, #0]
 80120fa:	461a      	mov	r2, r3
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012106:	69bb      	ldr	r3, [r7, #24]
 8012108:	3302      	adds	r3, #2
 801210a:	61bb      	str	r3, [r7, #24]
 801210c:	e007      	b.n	801211e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801210e:	69fb      	ldr	r3, [r7, #28]
 8012110:	781a      	ldrb	r2, [r3, #0]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012118:	69fb      	ldr	r3, [r7, #28]
 801211a:	3301      	adds	r3, #1
 801211c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012124:	b29b      	uxth	r3, r3
 8012126:	3b01      	subs	r3, #1
 8012128:	b29a      	uxth	r2, r3
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012136:	b29b      	uxth	r3, r3
 8012138:	2b00      	cmp	r3, #0
 801213a:	d1c8      	bne.n	80120ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	9300      	str	r3, [sp, #0]
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	2200      	movs	r2, #0
 8012144:	2140      	movs	r1, #64	; 0x40
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f000 fecc 	bl	8012ee4 <UART_WaitOnFlagUntilTimeout>
 801214c:	4603      	mov	r3, r0
 801214e:	2b00      	cmp	r3, #0
 8012150:	d005      	beq.n	801215e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	2220      	movs	r2, #32
 8012156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 801215a:	2303      	movs	r3, #3
 801215c:	e006      	b.n	801216c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	2220      	movs	r2, #32
 8012162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8012166:	2300      	movs	r3, #0
 8012168:	e000      	b.n	801216c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 801216a:	2302      	movs	r3, #2
  }
}
 801216c:	4618      	mov	r0, r3
 801216e:	3720      	adds	r7, #32
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b0ba      	sub	sp, #232	; 0xe8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	69db      	ldr	r3, [r3, #28]
 8012182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	681b      	ldr	r3, [r3, #0]
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801219a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801219e:	f640 030f 	movw	r3, #2063	; 0x80f
 80121a2:	4013      	ands	r3, r2
 80121a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80121a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d11b      	bne.n	80121e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80121b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80121b4:	f003 0320 	and.w	r3, r3, #32
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d015      	beq.n	80121e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80121bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80121c0:	f003 0320 	and.w	r3, r3, #32
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d105      	bne.n	80121d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80121c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80121cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d009      	beq.n	80121e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121d8:	2b00      	cmp	r3, #0
 80121da:	f000 82e3 	beq.w	80127a4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	4798      	blx	r3
      }
      return;
 80121e6:	e2dd      	b.n	80127a4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80121e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	f000 8123 	beq.w	8012438 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80121f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80121f6:	4b8d      	ldr	r3, [pc, #564]	; (801242c <HAL_UART_IRQHandler+0x2b8>)
 80121f8:	4013      	ands	r3, r2
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d106      	bne.n	801220c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80121fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8012202:	4b8b      	ldr	r3, [pc, #556]	; (8012430 <HAL_UART_IRQHandler+0x2bc>)
 8012204:	4013      	ands	r3, r2
 8012206:	2b00      	cmp	r3, #0
 8012208:	f000 8116 	beq.w	8012438 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801220c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012210:	f003 0301 	and.w	r3, r3, #1
 8012214:	2b00      	cmp	r3, #0
 8012216:	d011      	beq.n	801223c <HAL_UART_IRQHandler+0xc8>
 8012218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801221c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012220:	2b00      	cmp	r3, #0
 8012222:	d00b      	beq.n	801223c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	2201      	movs	r2, #1
 801222a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012232:	f043 0201 	orr.w	r2, r3, #1
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801223c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012240:	f003 0302 	and.w	r3, r3, #2
 8012244:	2b00      	cmp	r3, #0
 8012246:	d011      	beq.n	801226c <HAL_UART_IRQHandler+0xf8>
 8012248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801224c:	f003 0301 	and.w	r3, r3, #1
 8012250:	2b00      	cmp	r3, #0
 8012252:	d00b      	beq.n	801226c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	2202      	movs	r2, #2
 801225a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012262:	f043 0204 	orr.w	r2, r3, #4
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801226c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012270:	f003 0304 	and.w	r3, r3, #4
 8012274:	2b00      	cmp	r3, #0
 8012276:	d011      	beq.n	801229c <HAL_UART_IRQHandler+0x128>
 8012278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801227c:	f003 0301 	and.w	r3, r3, #1
 8012280:	2b00      	cmp	r3, #0
 8012282:	d00b      	beq.n	801229c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2204      	movs	r2, #4
 801228a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012292:	f043 0202 	orr.w	r2, r3, #2
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801229c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80122a0:	f003 0308 	and.w	r3, r3, #8
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d017      	beq.n	80122d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80122a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80122ac:	f003 0320 	and.w	r3, r3, #32
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d105      	bne.n	80122c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80122b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80122b8:	4b5c      	ldr	r3, [pc, #368]	; (801242c <HAL_UART_IRQHandler+0x2b8>)
 80122ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d00b      	beq.n	80122d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2208      	movs	r2, #8
 80122c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122ce:	f043 0208 	orr.w	r2, r3, #8
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80122d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80122dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d012      	beq.n	801230a <HAL_UART_IRQHandler+0x196>
 80122e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80122e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d00c      	beq.n	801230a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80122f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012300:	f043 0220 	orr.w	r2, r3, #32
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012310:	2b00      	cmp	r3, #0
 8012312:	f000 8249 	beq.w	80127a8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8012316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801231a:	f003 0320 	and.w	r3, r3, #32
 801231e:	2b00      	cmp	r3, #0
 8012320:	d013      	beq.n	801234a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8012322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012326:	f003 0320 	and.w	r3, r3, #32
 801232a:	2b00      	cmp	r3, #0
 801232c:	d105      	bne.n	801233a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801232e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012336:	2b00      	cmp	r3, #0
 8012338:	d007      	beq.n	801234a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801233e:	2b00      	cmp	r3, #0
 8012340:	d003      	beq.n	801234a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012346:	6878      	ldr	r0, [r7, #4]
 8012348:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012350:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	689b      	ldr	r3, [r3, #8]
 801235a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801235e:	2b40      	cmp	r3, #64	; 0x40
 8012360:	d005      	beq.n	801236e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8012362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012366:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801236a:	2b00      	cmp	r3, #0
 801236c:	d054      	beq.n	8012418 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f000 fe1f 	bl	8012fb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	689b      	ldr	r3, [r3, #8]
 801237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801237e:	2b40      	cmp	r3, #64	; 0x40
 8012380:	d146      	bne.n	8012410 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	3308      	adds	r3, #8
 8012388:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801238c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012390:	e853 3f00 	ldrex	r3, [r3]
 8012394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8012398:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801239c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80123a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	3308      	adds	r3, #8
 80123aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80123ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80123b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80123ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80123be:	e841 2300 	strex	r3, r2, [r1]
 80123c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80123c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d1d9      	bne.n	8012382 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d017      	beq.n	8012408 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80123de:	4a15      	ldr	r2, [pc, #84]	; (8012434 <HAL_UART_IRQHandler+0x2c0>)
 80123e0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80123e8:	4618      	mov	r0, r3
 80123ea:	f7fb f9d7 	bl	800d79c <HAL_DMA_Abort_IT>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d019      	beq.n	8012428 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80123fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123fc:	687a      	ldr	r2, [r7, #4]
 80123fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8012402:	4610      	mov	r0, r2
 8012404:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012406:	e00f      	b.n	8012428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f000 f9e1 	bl	80127d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801240e:	e00b      	b.n	8012428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f000 f9dd 	bl	80127d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012416:	e007      	b.n	8012428 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f000 f9d9 	bl	80127d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2200      	movs	r2, #0
 8012422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8012426:	e1bf      	b.n	80127a8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012428:	bf00      	nop
    return;
 801242a:	e1bd      	b.n	80127a8 <HAL_UART_IRQHandler+0x634>
 801242c:	10000001 	.word	0x10000001
 8012430:	04000120 	.word	0x04000120
 8012434:	0801307f 	.word	0x0801307f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801243c:	2b01      	cmp	r3, #1
 801243e:	f040 8153 	bne.w	80126e8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8012442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012446:	f003 0310 	and.w	r3, r3, #16
 801244a:	2b00      	cmp	r3, #0
 801244c:	f000 814c 	beq.w	80126e8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8012450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012454:	f003 0310 	and.w	r3, r3, #16
 8012458:	2b00      	cmp	r3, #0
 801245a:	f000 8145 	beq.w	80126e8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	2210      	movs	r2, #16
 8012464:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	689b      	ldr	r3, [r3, #8]
 801246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012470:	2b40      	cmp	r3, #64	; 0x40
 8012472:	f040 80bb 	bne.w	80125ec <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012484:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8012488:	2b00      	cmp	r3, #0
 801248a:	f000 818f 	beq.w	80127ac <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012494:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012498:	429a      	cmp	r2, r3
 801249a:	f080 8187 	bcs.w	80127ac <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80124a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	f003 0320 	and.w	r3, r3, #32
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f040 8087 	bne.w	80125ca <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80124c8:	e853 3f00 	ldrex	r3, [r3]
 80124cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80124d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80124d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	461a      	mov	r2, r3
 80124e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80124e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80124ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80124f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80124f6:	e841 2300 	strex	r3, r2, [r1]
 80124fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80124fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012502:	2b00      	cmp	r3, #0
 8012504:	d1da      	bne.n	80124bc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	3308      	adds	r3, #8
 801250c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801250e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012510:	e853 3f00 	ldrex	r3, [r3]
 8012514:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012518:	f023 0301 	bic.w	r3, r3, #1
 801251c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	3308      	adds	r3, #8
 8012526:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801252a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801252e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012530:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012532:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012536:	e841 2300 	strex	r3, r2, [r1]
 801253a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801253c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801253e:	2b00      	cmp	r3, #0
 8012540:	d1e1      	bne.n	8012506 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	3308      	adds	r3, #8
 8012548:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801254a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801254c:	e853 3f00 	ldrex	r3, [r3]
 8012550:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012558:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	3308      	adds	r3, #8
 8012562:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012566:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012568:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801256a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801256c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801256e:	e841 2300 	strex	r3, r2, [r1]
 8012572:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012576:	2b00      	cmp	r3, #0
 8012578:	d1e3      	bne.n	8012542 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2220      	movs	r2, #32
 801257e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2200      	movs	r2, #0
 8012586:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012590:	e853 3f00 	ldrex	r3, [r3]
 8012594:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012596:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012598:	f023 0310 	bic.w	r3, r3, #16
 801259c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	681b      	ldr	r3, [r3, #0]
 80125a4:	461a      	mov	r2, r3
 80125a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80125aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80125ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80125b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125b2:	e841 2300 	strex	r3, r2, [r1]
 80125b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80125b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1e4      	bne.n	8012588 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80125c4:	4618      	mov	r0, r3
 80125c6:	f7fb f88a 	bl	800d6de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	2202      	movs	r2, #2
 80125ce:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125dc:	b29b      	uxth	r3, r3
 80125de:	1ad3      	subs	r3, r2, r3
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	4619      	mov	r1, r3
 80125e4:	6878      	ldr	r0, [r7, #4]
 80125e6:	f000 f8fd 	bl	80127e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80125ea:	e0df      	b.n	80127ac <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80125f8:	b29b      	uxth	r3, r3
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012606:	b29b      	uxth	r3, r3
 8012608:	2b00      	cmp	r3, #0
 801260a:	f000 80d1 	beq.w	80127b0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801260e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012612:	2b00      	cmp	r3, #0
 8012614:	f000 80cc 	beq.w	80127b0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801261e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012620:	e853 3f00 	ldrex	r3, [r3]
 8012624:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012628:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801262c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	461a      	mov	r2, r3
 8012636:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801263a:	647b      	str	r3, [r7, #68]	; 0x44
 801263c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801263e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012640:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012642:	e841 2300 	strex	r3, r2, [r1]
 8012646:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801264a:	2b00      	cmp	r3, #0
 801264c:	d1e4      	bne.n	8012618 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	3308      	adds	r3, #8
 8012654:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012658:	e853 3f00 	ldrex	r3, [r3]
 801265c:	623b      	str	r3, [r7, #32]
   return(result);
 801265e:	6a3b      	ldr	r3, [r7, #32]
 8012660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012664:	f023 0301 	bic.w	r3, r3, #1
 8012668:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	3308      	adds	r3, #8
 8012672:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012676:	633a      	str	r2, [r7, #48]	; 0x30
 8012678:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801267a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801267c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801267e:	e841 2300 	strex	r3, r2, [r1]
 8012682:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012686:	2b00      	cmp	r3, #0
 8012688:	d1e1      	bne.n	801264e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2220      	movs	r2, #32
 801268e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	2200      	movs	r2, #0
 8012696:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2200      	movs	r2, #0
 801269c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a4:	693b      	ldr	r3, [r7, #16]
 80126a6:	e853 3f00 	ldrex	r3, [r3]
 80126aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f023 0310 	bic.w	r3, r3, #16
 80126b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	461a      	mov	r2, r3
 80126bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80126c0:	61fb      	str	r3, [r7, #28]
 80126c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126c4:	69b9      	ldr	r1, [r7, #24]
 80126c6:	69fa      	ldr	r2, [r7, #28]
 80126c8:	e841 2300 	strex	r3, r2, [r1]
 80126cc:	617b      	str	r3, [r7, #20]
   return(result);
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d1e4      	bne.n	801269e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2202      	movs	r2, #2
 80126d8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80126da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80126de:	4619      	mov	r1, r3
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f000 f87f 	bl	80127e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80126e6:	e063      	b.n	80127b0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80126e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80126ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d00e      	beq.n	8012712 <HAL_UART_IRQHandler+0x59e>
 80126f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80126f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d008      	beq.n	8012712 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012708:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f000 fcf8 	bl	8013100 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012710:	e051      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801271a:	2b00      	cmp	r3, #0
 801271c:	d014      	beq.n	8012748 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801271e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012726:	2b00      	cmp	r3, #0
 8012728:	d105      	bne.n	8012736 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801272a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801272e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012732:	2b00      	cmp	r3, #0
 8012734:	d008      	beq.n	8012748 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801273a:	2b00      	cmp	r3, #0
 801273c:	d03a      	beq.n	80127b4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	4798      	blx	r3
    }
    return;
 8012746:	e035      	b.n	80127b4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801274c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012750:	2b00      	cmp	r3, #0
 8012752:	d009      	beq.n	8012768 <HAL_UART_IRQHandler+0x5f4>
 8012754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801275c:	2b00      	cmp	r3, #0
 801275e:	d003      	beq.n	8012768 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 fca2 	bl	80130aa <UART_EndTransmit_IT>
    return;
 8012766:	e026      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801276c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012770:	2b00      	cmp	r3, #0
 8012772:	d009      	beq.n	8012788 <HAL_UART_IRQHandler+0x614>
 8012774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012778:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801277c:	2b00      	cmp	r3, #0
 801277e:	d003      	beq.n	8012788 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 fcd1 	bl	8013128 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012786:	e016      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801278c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012790:	2b00      	cmp	r3, #0
 8012792:	d010      	beq.n	80127b6 <HAL_UART_IRQHandler+0x642>
 8012794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012798:	2b00      	cmp	r3, #0
 801279a:	da0c      	bge.n	80127b6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f000 fcb9 	bl	8013114 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80127a2:	e008      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
      return;
 80127a4:	bf00      	nop
 80127a6:	e006      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
    return;
 80127a8:	bf00      	nop
 80127aa:	e004      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
      return;
 80127ac:	bf00      	nop
 80127ae:	e002      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
      return;
 80127b0:	bf00      	nop
 80127b2:	e000      	b.n	80127b6 <HAL_UART_IRQHandler+0x642>
    return;
 80127b4:	bf00      	nop
  }
}
 80127b6:	37e8      	adds	r7, #232	; 0xe8
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80127bc:	b480      	push	{r7}
 80127be:	b083      	sub	sp, #12
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80127c4:	bf00      	nop
 80127c6:	370c      	adds	r7, #12
 80127c8:	46bd      	mov	sp, r7
 80127ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ce:	4770      	bx	lr

080127d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80127d0:	b480      	push	{r7}
 80127d2:	b083      	sub	sp, #12
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80127d8:	bf00      	nop
 80127da:	370c      	adds	r7, #12
 80127dc:	46bd      	mov	sp, r7
 80127de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e2:	4770      	bx	lr

080127e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80127e4:	b480      	push	{r7}
 80127e6:	b083      	sub	sp, #12
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
 80127ec:	460b      	mov	r3, r1
 80127ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80127f0:	bf00      	nop
 80127f2:	370c      	adds	r7, #12
 80127f4:	46bd      	mov	sp, r7
 80127f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fa:	4770      	bx	lr

080127fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80127fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012800:	b08c      	sub	sp, #48	; 0x30
 8012802:	af00      	add	r7, sp, #0
 8012804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012806:	2300      	movs	r3, #0
 8012808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801280c:	697b      	ldr	r3, [r7, #20]
 801280e:	689a      	ldr	r2, [r3, #8]
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	431a      	orrs	r2, r3
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	695b      	ldr	r3, [r3, #20]
 801281a:	431a      	orrs	r2, r3
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	69db      	ldr	r3, [r3, #28]
 8012820:	4313      	orrs	r3, r2
 8012822:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	4baf      	ldr	r3, [pc, #700]	; (8012ae8 <UART_SetConfig+0x2ec>)
 801282c:	4013      	ands	r3, r2
 801282e:	697a      	ldr	r2, [r7, #20]
 8012830:	6812      	ldr	r2, [r2, #0]
 8012832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012834:	430b      	orrs	r3, r1
 8012836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012842:	697b      	ldr	r3, [r7, #20]
 8012844:	68da      	ldr	r2, [r3, #12]
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	430a      	orrs	r2, r1
 801284c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	699b      	ldr	r3, [r3, #24]
 8012852:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	4aa4      	ldr	r2, [pc, #656]	; (8012aec <UART_SetConfig+0x2f0>)
 801285a:	4293      	cmp	r3, r2
 801285c:	d004      	beq.n	8012868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	6a1b      	ldr	r3, [r3, #32]
 8012862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012864:	4313      	orrs	r3, r2
 8012866:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	689b      	ldr	r3, [r3, #8]
 801286e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8012872:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8012876:	697a      	ldr	r2, [r7, #20]
 8012878:	6812      	ldr	r2, [r2, #0]
 801287a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801287c:	430b      	orrs	r3, r1
 801287e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012886:	f023 010f 	bic.w	r1, r3, #15
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801288e:	697b      	ldr	r3, [r7, #20]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	430a      	orrs	r2, r1
 8012894:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012896:	697b      	ldr	r3, [r7, #20]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4a95      	ldr	r2, [pc, #596]	; (8012af0 <UART_SetConfig+0x2f4>)
 801289c:	4293      	cmp	r3, r2
 801289e:	d125      	bne.n	80128ec <UART_SetConfig+0xf0>
 80128a0:	2003      	movs	r0, #3
 80128a2:	f7ff fb69 	bl	8011f78 <LL_RCC_GetUSARTClockSource>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b03      	cmp	r3, #3
 80128aa:	d81b      	bhi.n	80128e4 <UART_SetConfig+0xe8>
 80128ac:	a201      	add	r2, pc, #4	; (adr r2, 80128b4 <UART_SetConfig+0xb8>)
 80128ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128b2:	bf00      	nop
 80128b4:	080128c5 	.word	0x080128c5
 80128b8:	080128d5 	.word	0x080128d5
 80128bc:	080128cd 	.word	0x080128cd
 80128c0:	080128dd 	.word	0x080128dd
 80128c4:	2301      	movs	r3, #1
 80128c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80128ca:	e042      	b.n	8012952 <UART_SetConfig+0x156>
 80128cc:	2302      	movs	r3, #2
 80128ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80128d2:	e03e      	b.n	8012952 <UART_SetConfig+0x156>
 80128d4:	2304      	movs	r3, #4
 80128d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80128da:	e03a      	b.n	8012952 <UART_SetConfig+0x156>
 80128dc:	2308      	movs	r3, #8
 80128de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80128e2:	e036      	b.n	8012952 <UART_SetConfig+0x156>
 80128e4:	2310      	movs	r3, #16
 80128e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80128ea:	e032      	b.n	8012952 <UART_SetConfig+0x156>
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	4a7e      	ldr	r2, [pc, #504]	; (8012aec <UART_SetConfig+0x2f0>)
 80128f2:	4293      	cmp	r3, r2
 80128f4:	d12a      	bne.n	801294c <UART_SetConfig+0x150>
 80128f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80128fa:	f7ff fb4d 	bl	8011f98 <LL_RCC_GetLPUARTClockSource>
 80128fe:	4603      	mov	r3, r0
 8012900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012904:	d01a      	beq.n	801293c <UART_SetConfig+0x140>
 8012906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801290a:	d81b      	bhi.n	8012944 <UART_SetConfig+0x148>
 801290c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012910:	d00c      	beq.n	801292c <UART_SetConfig+0x130>
 8012912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012916:	d815      	bhi.n	8012944 <UART_SetConfig+0x148>
 8012918:	2b00      	cmp	r3, #0
 801291a:	d003      	beq.n	8012924 <UART_SetConfig+0x128>
 801291c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012920:	d008      	beq.n	8012934 <UART_SetConfig+0x138>
 8012922:	e00f      	b.n	8012944 <UART_SetConfig+0x148>
 8012924:	2300      	movs	r3, #0
 8012926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801292a:	e012      	b.n	8012952 <UART_SetConfig+0x156>
 801292c:	2302      	movs	r3, #2
 801292e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012932:	e00e      	b.n	8012952 <UART_SetConfig+0x156>
 8012934:	2304      	movs	r3, #4
 8012936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801293a:	e00a      	b.n	8012952 <UART_SetConfig+0x156>
 801293c:	2308      	movs	r3, #8
 801293e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012942:	e006      	b.n	8012952 <UART_SetConfig+0x156>
 8012944:	2310      	movs	r3, #16
 8012946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801294a:	e002      	b.n	8012952 <UART_SetConfig+0x156>
 801294c:	2310      	movs	r3, #16
 801294e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	4a65      	ldr	r2, [pc, #404]	; (8012aec <UART_SetConfig+0x2f0>)
 8012958:	4293      	cmp	r3, r2
 801295a:	f040 8097 	bne.w	8012a8c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801295e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012962:	2b08      	cmp	r3, #8
 8012964:	d823      	bhi.n	80129ae <UART_SetConfig+0x1b2>
 8012966:	a201      	add	r2, pc, #4	; (adr r2, 801296c <UART_SetConfig+0x170>)
 8012968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801296c:	08012991 	.word	0x08012991
 8012970:	080129af 	.word	0x080129af
 8012974:	08012999 	.word	0x08012999
 8012978:	080129af 	.word	0x080129af
 801297c:	0801299f 	.word	0x0801299f
 8012980:	080129af 	.word	0x080129af
 8012984:	080129af 	.word	0x080129af
 8012988:	080129af 	.word	0x080129af
 801298c:	080129a7 	.word	0x080129a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012990:	f7fc fd70 	bl	800f474 <HAL_RCC_GetPCLK1Freq>
 8012994:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012996:	e010      	b.n	80129ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012998:	4b56      	ldr	r3, [pc, #344]	; (8012af4 <UART_SetConfig+0x2f8>)
 801299a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801299c:	e00d      	b.n	80129ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801299e:	f7fc fce9 	bl	800f374 <HAL_RCC_GetSysClockFreq>
 80129a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80129a4:	e009      	b.n	80129ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80129a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80129aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80129ac:	e005      	b.n	80129ba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80129ae:	2300      	movs	r3, #0
 80129b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80129b2:	2301      	movs	r3, #1
 80129b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80129b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80129ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129bc:	2b00      	cmp	r3, #0
 80129be:	f000 812b 	beq.w	8012c18 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129c6:	4a4c      	ldr	r2, [pc, #304]	; (8012af8 <UART_SetConfig+0x2fc>)
 80129c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80129cc:	461a      	mov	r2, r3
 80129ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80129d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	685a      	ldr	r2, [r3, #4]
 80129da:	4613      	mov	r3, r2
 80129dc:	005b      	lsls	r3, r3, #1
 80129de:	4413      	add	r3, r2
 80129e0:	69ba      	ldr	r2, [r7, #24]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d305      	bcc.n	80129f2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80129ec:	69ba      	ldr	r2, [r7, #24]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d903      	bls.n	80129fa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80129f2:	2301      	movs	r3, #1
 80129f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80129f8:	e10e      	b.n	8012c18 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80129fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fc:	2200      	movs	r2, #0
 80129fe:	60bb      	str	r3, [r7, #8]
 8012a00:	60fa      	str	r2, [r7, #12]
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a06:	4a3c      	ldr	r2, [pc, #240]	; (8012af8 <UART_SetConfig+0x2fc>)
 8012a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	2200      	movs	r2, #0
 8012a10:	603b      	str	r3, [r7, #0]
 8012a12:	607a      	str	r2, [r7, #4]
 8012a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012a1c:	f7ee f966 	bl	8000cec <__aeabi_uldivmod>
 8012a20:	4602      	mov	r2, r0
 8012a22:	460b      	mov	r3, r1
 8012a24:	4610      	mov	r0, r2
 8012a26:	4619      	mov	r1, r3
 8012a28:	f04f 0200 	mov.w	r2, #0
 8012a2c:	f04f 0300 	mov.w	r3, #0
 8012a30:	020b      	lsls	r3, r1, #8
 8012a32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012a36:	0202      	lsls	r2, r0, #8
 8012a38:	6979      	ldr	r1, [r7, #20]
 8012a3a:	6849      	ldr	r1, [r1, #4]
 8012a3c:	0849      	lsrs	r1, r1, #1
 8012a3e:	2000      	movs	r0, #0
 8012a40:	460c      	mov	r4, r1
 8012a42:	4605      	mov	r5, r0
 8012a44:	eb12 0804 	adds.w	r8, r2, r4
 8012a48:	eb43 0905 	adc.w	r9, r3, r5
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	2200      	movs	r2, #0
 8012a52:	469a      	mov	sl, r3
 8012a54:	4693      	mov	fp, r2
 8012a56:	4652      	mov	r2, sl
 8012a58:	465b      	mov	r3, fp
 8012a5a:	4640      	mov	r0, r8
 8012a5c:	4649      	mov	r1, r9
 8012a5e:	f7ee f945 	bl	8000cec <__aeabi_uldivmod>
 8012a62:	4602      	mov	r2, r0
 8012a64:	460b      	mov	r3, r1
 8012a66:	4613      	mov	r3, r2
 8012a68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012a6a:	6a3b      	ldr	r3, [r7, #32]
 8012a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012a70:	d308      	bcc.n	8012a84 <UART_SetConfig+0x288>
 8012a72:	6a3b      	ldr	r3, [r7, #32]
 8012a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012a78:	d204      	bcs.n	8012a84 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	6a3a      	ldr	r2, [r7, #32]
 8012a80:	60da      	str	r2, [r3, #12]
 8012a82:	e0c9      	b.n	8012c18 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8012a84:	2301      	movs	r3, #1
 8012a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012a8a:	e0c5      	b.n	8012c18 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	69db      	ldr	r3, [r3, #28]
 8012a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012a94:	d16d      	bne.n	8012b72 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8012a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a9a:	3b01      	subs	r3, #1
 8012a9c:	2b07      	cmp	r3, #7
 8012a9e:	d82d      	bhi.n	8012afc <UART_SetConfig+0x300>
 8012aa0:	a201      	add	r2, pc, #4	; (adr r2, 8012aa8 <UART_SetConfig+0x2ac>)
 8012aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aa6:	bf00      	nop
 8012aa8:	08012ac9 	.word	0x08012ac9
 8012aac:	08012ad1 	.word	0x08012ad1
 8012ab0:	08012afd 	.word	0x08012afd
 8012ab4:	08012ad7 	.word	0x08012ad7
 8012ab8:	08012afd 	.word	0x08012afd
 8012abc:	08012afd 	.word	0x08012afd
 8012ac0:	08012afd 	.word	0x08012afd
 8012ac4:	08012adf 	.word	0x08012adf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012ac8:	f7fc fcea 	bl	800f4a0 <HAL_RCC_GetPCLK2Freq>
 8012acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012ace:	e01b      	b.n	8012b08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012ad0:	4b08      	ldr	r3, [pc, #32]	; (8012af4 <UART_SetConfig+0x2f8>)
 8012ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012ad4:	e018      	b.n	8012b08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012ad6:	f7fc fc4d 	bl	800f374 <HAL_RCC_GetSysClockFreq>
 8012ada:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012adc:	e014      	b.n	8012b08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012ae4:	e010      	b.n	8012b08 <UART_SetConfig+0x30c>
 8012ae6:	bf00      	nop
 8012ae8:	cfff69f3 	.word	0xcfff69f3
 8012aec:	40008000 	.word	0x40008000
 8012af0:	40013800 	.word	0x40013800
 8012af4:	00f42400 	.word	0x00f42400
 8012af8:	080190f8 	.word	0x080190f8
      default:
        pclk = 0U;
 8012afc:	2300      	movs	r3, #0
 8012afe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8012b00:	2301      	movs	r3, #1
 8012b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8012b06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	f000 8084 	beq.w	8012c18 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012b10:	697b      	ldr	r3, [r7, #20]
 8012b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b14:	4a4b      	ldr	r2, [pc, #300]	; (8012c44 <UART_SetConfig+0x448>)
 8012b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b22:	005a      	lsls	r2, r3, #1
 8012b24:	697b      	ldr	r3, [r7, #20]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	085b      	lsrs	r3, r3, #1
 8012b2a:	441a      	add	r2, r3
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	685b      	ldr	r3, [r3, #4]
 8012b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8012b34:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012b36:	6a3b      	ldr	r3, [r7, #32]
 8012b38:	2b0f      	cmp	r3, #15
 8012b3a:	d916      	bls.n	8012b6a <UART_SetConfig+0x36e>
 8012b3c:	6a3b      	ldr	r3, [r7, #32]
 8012b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b42:	d212      	bcs.n	8012b6a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012b44:	6a3b      	ldr	r3, [r7, #32]
 8012b46:	b29b      	uxth	r3, r3
 8012b48:	f023 030f 	bic.w	r3, r3, #15
 8012b4c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012b4e:	6a3b      	ldr	r3, [r7, #32]
 8012b50:	085b      	lsrs	r3, r3, #1
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	f003 0307 	and.w	r3, r3, #7
 8012b58:	b29a      	uxth	r2, r3
 8012b5a:	8bfb      	ldrh	r3, [r7, #30]
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	8bfa      	ldrh	r2, [r7, #30]
 8012b66:	60da      	str	r2, [r3, #12]
 8012b68:	e056      	b.n	8012c18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8012b70:	e052      	b.n	8012c18 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012b76:	3b01      	subs	r3, #1
 8012b78:	2b07      	cmp	r3, #7
 8012b7a:	d822      	bhi.n	8012bc2 <UART_SetConfig+0x3c6>
 8012b7c:	a201      	add	r2, pc, #4	; (adr r2, 8012b84 <UART_SetConfig+0x388>)
 8012b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b82:	bf00      	nop
 8012b84:	08012ba5 	.word	0x08012ba5
 8012b88:	08012bad 	.word	0x08012bad
 8012b8c:	08012bc3 	.word	0x08012bc3
 8012b90:	08012bb3 	.word	0x08012bb3
 8012b94:	08012bc3 	.word	0x08012bc3
 8012b98:	08012bc3 	.word	0x08012bc3
 8012b9c:	08012bc3 	.word	0x08012bc3
 8012ba0:	08012bbb 	.word	0x08012bbb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012ba4:	f7fc fc7c 	bl	800f4a0 <HAL_RCC_GetPCLK2Freq>
 8012ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012baa:	e010      	b.n	8012bce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012bac:	4b26      	ldr	r3, [pc, #152]	; (8012c48 <UART_SetConfig+0x44c>)
 8012bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012bb0:	e00d      	b.n	8012bce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8012bb2:	f7fc fbdf 	bl	800f374 <HAL_RCC_GetSysClockFreq>
 8012bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8012bb8:	e009      	b.n	8012bce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8012bc0:	e005      	b.n	8012bce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8012bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8012bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d021      	beq.n	8012c18 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bd8:	4a1a      	ldr	r2, [pc, #104]	; (8012c44 <UART_SetConfig+0x448>)
 8012bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012bde:	461a      	mov	r2, r3
 8012be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be2:	fbb3 f2f2 	udiv	r2, r3, r2
 8012be6:	697b      	ldr	r3, [r7, #20]
 8012be8:	685b      	ldr	r3, [r3, #4]
 8012bea:	085b      	lsrs	r3, r3, #1
 8012bec:	441a      	add	r2, r3
 8012bee:	697b      	ldr	r3, [r7, #20]
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012bf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012bf8:	6a3b      	ldr	r3, [r7, #32]
 8012bfa:	2b0f      	cmp	r3, #15
 8012bfc:	d909      	bls.n	8012c12 <UART_SetConfig+0x416>
 8012bfe:	6a3b      	ldr	r3, [r7, #32]
 8012c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c04:	d205      	bcs.n	8012c12 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012c06:	6a3b      	ldr	r3, [r7, #32]
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	697b      	ldr	r3, [r7, #20]
 8012c0c:	681b      	ldr	r3, [r3, #0]
 8012c0e:	60da      	str	r2, [r3, #12]
 8012c10:	e002      	b.n	8012c18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8012c12:	2301      	movs	r3, #1
 8012c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012c18:	697b      	ldr	r3, [r7, #20]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	2201      	movs	r2, #1
 8012c24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	2200      	movs	r2, #0
 8012c32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8012c34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3730      	adds	r7, #48	; 0x30
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012c42:	bf00      	nop
 8012c44:	080190f8 	.word	0x080190f8
 8012c48:	00f42400 	.word	0x00f42400

08012c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012c4c:	b480      	push	{r7}
 8012c4e:	b083      	sub	sp, #12
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c58:	f003 0301 	and.w	r3, r3, #1
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d00a      	beq.n	8012c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	430a      	orrs	r2, r1
 8012c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c7a:	f003 0302 	and.w	r3, r3, #2
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d00a      	beq.n	8012c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	430a      	orrs	r2, r1
 8012c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c9c:	f003 0304 	and.w	r3, r3, #4
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d00a      	beq.n	8012cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	430a      	orrs	r2, r1
 8012cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cbe:	f003 0308 	and.w	r3, r3, #8
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d00a      	beq.n	8012cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	430a      	orrs	r2, r1
 8012cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ce0:	f003 0310 	and.w	r3, r3, #16
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00a      	beq.n	8012cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	689b      	ldr	r3, [r3, #8]
 8012cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	430a      	orrs	r2, r1
 8012cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d02:	f003 0320 	and.w	r3, r3, #32
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d00a      	beq.n	8012d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	689b      	ldr	r3, [r3, #8]
 8012d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	430a      	orrs	r2, r1
 8012d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d01a      	beq.n	8012d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	430a      	orrs	r2, r1
 8012d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012d4a:	d10a      	bne.n	8012d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	685b      	ldr	r3, [r3, #4]
 8012d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	430a      	orrs	r2, r1
 8012d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d00a      	beq.n	8012d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	430a      	orrs	r2, r1
 8012d82:	605a      	str	r2, [r3, #4]
  }
}
 8012d84:	bf00      	nop
 8012d86:	370c      	adds	r7, #12
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8e:	4770      	bx	lr

08012d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b098      	sub	sp, #96	; 0x60
 8012d94:	af02      	add	r7, sp, #8
 8012d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012da0:	f7fa fb52 	bl	800d448 <HAL_GetTick>
 8012da4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f003 0308 	and.w	r3, r3, #8
 8012db0:	2b08      	cmp	r3, #8
 8012db2:	d12f      	bne.n	8012e14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012db8:	9300      	str	r3, [sp, #0]
 8012dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012dc2:	6878      	ldr	r0, [r7, #4]
 8012dc4:	f000 f88e 	bl	8012ee4 <UART_WaitOnFlagUntilTimeout>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d022      	beq.n	8012e14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd6:	e853 3f00 	ldrex	r3, [r3]
 8012dda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012de2:	653b      	str	r3, [r7, #80]	; 0x50
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	461a      	mov	r2, r3
 8012dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dec:	647b      	str	r3, [r7, #68]	; 0x44
 8012dee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012df0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012df4:	e841 2300 	strex	r3, r2, [r1]
 8012df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d1e6      	bne.n	8012dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2220      	movs	r2, #32
 8012e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012e10:	2303      	movs	r3, #3
 8012e12:	e063      	b.n	8012edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	f003 0304 	and.w	r3, r3, #4
 8012e1e:	2b04      	cmp	r3, #4
 8012e20:	d149      	bne.n	8012eb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012e26:	9300      	str	r3, [sp, #0]
 8012e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e2a:	2200      	movs	r2, #0
 8012e2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012e30:	6878      	ldr	r0, [r7, #4]
 8012e32:	f000 f857 	bl	8012ee4 <UART_WaitOnFlagUntilTimeout>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d03c      	beq.n	8012eb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e44:	e853 3f00 	ldrex	r3, [r3]
 8012e48:	623b      	str	r3, [r7, #32]
   return(result);
 8012e4a:	6a3b      	ldr	r3, [r7, #32]
 8012e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	461a      	mov	r2, r3
 8012e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8012e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e62:	e841 2300 	strex	r3, r2, [r1]
 8012e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d1e6      	bne.n	8012e3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	3308      	adds	r3, #8
 8012e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e76:	693b      	ldr	r3, [r7, #16]
 8012e78:	e853 3f00 	ldrex	r3, [r3]
 8012e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f023 0301 	bic.w	r3, r3, #1
 8012e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	3308      	adds	r3, #8
 8012e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e8e:	61fa      	str	r2, [r7, #28]
 8012e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e92:	69b9      	ldr	r1, [r7, #24]
 8012e94:	69fa      	ldr	r2, [r7, #28]
 8012e96:	e841 2300 	strex	r3, r2, [r1]
 8012e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d1e5      	bne.n	8012e6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2220      	movs	r2, #32
 8012ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2200      	movs	r2, #0
 8012eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012eb2:	2303      	movs	r3, #3
 8012eb4:	e012      	b.n	8012edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	2220      	movs	r2, #32
 8012eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2220      	movs	r2, #32
 8012ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	2200      	movs	r2, #0
 8012eca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	2200      	movs	r2, #0
 8012ed0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012eda:	2300      	movs	r3, #0
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3758      	adds	r7, #88	; 0x58
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}

08012ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b084      	sub	sp, #16
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	603b      	str	r3, [r7, #0]
 8012ef0:	4613      	mov	r3, r2
 8012ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ef4:	e049      	b.n	8012f8a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012ef6:	69bb      	ldr	r3, [r7, #24]
 8012ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012efc:	d045      	beq.n	8012f8a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012efe:	f7fa faa3 	bl	800d448 <HAL_GetTick>
 8012f02:	4602      	mov	r2, r0
 8012f04:	683b      	ldr	r3, [r7, #0]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	69ba      	ldr	r2, [r7, #24]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d302      	bcc.n	8012f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8012f0e:	69bb      	ldr	r3, [r7, #24]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d101      	bne.n	8012f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012f14:	2303      	movs	r3, #3
 8012f16:	e048      	b.n	8012faa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	f003 0304 	and.w	r3, r3, #4
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d031      	beq.n	8012f8a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	69db      	ldr	r3, [r3, #28]
 8012f2c:	f003 0308 	and.w	r3, r3, #8
 8012f30:	2b08      	cmp	r3, #8
 8012f32:	d110      	bne.n	8012f56 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2208      	movs	r2, #8
 8012f3a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012f3c:	68f8      	ldr	r0, [r7, #12]
 8012f3e:	f000 f838 	bl	8012fb2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	2208      	movs	r2, #8
 8012f46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012f52:	2301      	movs	r3, #1
 8012f54:	e029      	b.n	8012faa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	69db      	ldr	r3, [r3, #28]
 8012f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012f64:	d111      	bne.n	8012f8a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012f6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012f70:	68f8      	ldr	r0, [r7, #12]
 8012f72:	f000 f81e 	bl	8012fb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2220      	movs	r2, #32
 8012f7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2200      	movs	r2, #0
 8012f82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012f86:	2303      	movs	r3, #3
 8012f88:	e00f      	b.n	8012faa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	69da      	ldr	r2, [r3, #28]
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	4013      	ands	r3, r2
 8012f94:	68ba      	ldr	r2, [r7, #8]
 8012f96:	429a      	cmp	r2, r3
 8012f98:	bf0c      	ite	eq
 8012f9a:	2301      	moveq	r3, #1
 8012f9c:	2300      	movne	r3, #0
 8012f9e:	b2db      	uxtb	r3, r3
 8012fa0:	461a      	mov	r2, r3
 8012fa2:	79fb      	ldrb	r3, [r7, #7]
 8012fa4:	429a      	cmp	r2, r3
 8012fa6:	d0a6      	beq.n	8012ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}

08012fb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012fb2:	b480      	push	{r7}
 8012fb4:	b095      	sub	sp, #84	; 0x54
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012fc2:	e853 3f00 	ldrex	r3, [r3]
 8012fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	461a      	mov	r2, r3
 8012fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8012fda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012fe0:	e841 2300 	strex	r3, r2, [r1]
 8012fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d1e6      	bne.n	8012fba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	3308      	adds	r3, #8
 8012ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ff4:	6a3b      	ldr	r3, [r7, #32]
 8012ff6:	e853 3f00 	ldrex	r3, [r3]
 8012ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ffc:	69fb      	ldr	r3, [r7, #28]
 8012ffe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013002:	f023 0301 	bic.w	r3, r3, #1
 8013006:	64bb      	str	r3, [r7, #72]	; 0x48
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	3308      	adds	r3, #8
 801300e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013010:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013014:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013018:	e841 2300 	strex	r3, r2, [r1]
 801301c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801301e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013020:	2b00      	cmp	r3, #0
 8013022:	d1e3      	bne.n	8012fec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013028:	2b01      	cmp	r3, #1
 801302a:	d118      	bne.n	801305e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	e853 3f00 	ldrex	r3, [r3]
 8013038:	60bb      	str	r3, [r7, #8]
   return(result);
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	f023 0310 	bic.w	r3, r3, #16
 8013040:	647b      	str	r3, [r7, #68]	; 0x44
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	461a      	mov	r2, r3
 8013048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801304a:	61bb      	str	r3, [r7, #24]
 801304c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801304e:	6979      	ldr	r1, [r7, #20]
 8013050:	69ba      	ldr	r2, [r7, #24]
 8013052:	e841 2300 	strex	r3, r2, [r1]
 8013056:	613b      	str	r3, [r7, #16]
   return(result);
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d1e6      	bne.n	801302c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2220      	movs	r2, #32
 8013062:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2200      	movs	r2, #0
 801306a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2200      	movs	r2, #0
 8013070:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013072:	bf00      	nop
 8013074:	3754      	adds	r7, #84	; 0x54
 8013076:	46bd      	mov	sp, r7
 8013078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307c:	4770      	bx	lr

0801307e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801307e:	b580      	push	{r7, lr}
 8013080:	b084      	sub	sp, #16
 8013082:	af00      	add	r7, sp, #0
 8013084:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801308a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2200      	movs	r2, #0
 8013090:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2200      	movs	r2, #0
 8013098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801309c:	68f8      	ldr	r0, [r7, #12]
 801309e:	f7ff fb97 	bl	80127d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80130a2:	bf00      	nop
 80130a4:	3710      	adds	r7, #16
 80130a6:	46bd      	mov	sp, r7
 80130a8:	bd80      	pop	{r7, pc}

080130aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80130aa:	b580      	push	{r7, lr}
 80130ac:	b088      	sub	sp, #32
 80130ae:	af00      	add	r7, sp, #0
 80130b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	e853 3f00 	ldrex	r3, [r3]
 80130be:	60bb      	str	r3, [r7, #8]
   return(result);
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80130c6:	61fb      	str	r3, [r7, #28]
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	461a      	mov	r2, r3
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	61bb      	str	r3, [r7, #24]
 80130d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130d4:	6979      	ldr	r1, [r7, #20]
 80130d6:	69ba      	ldr	r2, [r7, #24]
 80130d8:	e841 2300 	strex	r3, r2, [r1]
 80130dc:	613b      	str	r3, [r7, #16]
   return(result);
 80130de:	693b      	ldr	r3, [r7, #16]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d1e6      	bne.n	80130b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	2220      	movs	r2, #32
 80130e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	2200      	movs	r2, #0
 80130f0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7ff fb62 	bl	80127bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80130f8:	bf00      	nop
 80130fa:	3720      	adds	r7, #32
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013100:	b480      	push	{r7}
 8013102:	b083      	sub	sp, #12
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013108:	bf00      	nop
 801310a:	370c      	adds	r7, #12
 801310c:	46bd      	mov	sp, r7
 801310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013112:	4770      	bx	lr

08013114 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013114:	b480      	push	{r7}
 8013116:	b083      	sub	sp, #12
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801311c:	bf00      	nop
 801311e:	370c      	adds	r7, #12
 8013120:	46bd      	mov	sp, r7
 8013122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013126:	4770      	bx	lr

08013128 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013128:	b480      	push	{r7}
 801312a:	b083      	sub	sp, #12
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013130:	bf00      	nop
 8013132:	370c      	adds	r7, #12
 8013134:	46bd      	mov	sp, r7
 8013136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313a:	4770      	bx	lr

0801313c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801313c:	b480      	push	{r7}
 801313e:	b085      	sub	sp, #20
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801314a:	2b01      	cmp	r3, #1
 801314c:	d101      	bne.n	8013152 <HAL_UARTEx_DisableFifoMode+0x16>
 801314e:	2302      	movs	r3, #2
 8013150:	e027      	b.n	80131a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	2201      	movs	r2, #1
 8013156:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2224      	movs	r2, #36	; 0x24
 801315e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	681a      	ldr	r2, [r3, #0]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	f022 0201 	bic.w	r2, r2, #1
 8013178:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013180:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2200      	movs	r2, #0
 8013186:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	68fa      	ldr	r2, [r7, #12]
 801318e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	2220      	movs	r2, #32
 8013194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2200      	movs	r2, #0
 801319c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80131a0:	2300      	movs	r3, #0
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3714      	adds	r7, #20
 80131a6:	46bd      	mov	sp, r7
 80131a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ac:	4770      	bx	lr

080131ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80131ae:	b580      	push	{r7, lr}
 80131b0:	b084      	sub	sp, #16
 80131b2:	af00      	add	r7, sp, #0
 80131b4:	6078      	str	r0, [r7, #4]
 80131b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80131be:	2b01      	cmp	r3, #1
 80131c0:	d101      	bne.n	80131c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80131c2:	2302      	movs	r3, #2
 80131c4:	e02d      	b.n	8013222 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	2201      	movs	r2, #1
 80131ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2224      	movs	r2, #36	; 0x24
 80131d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	f022 0201 	bic.w	r2, r2, #1
 80131ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	689b      	ldr	r3, [r3, #8]
 80131f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	683a      	ldr	r2, [r7, #0]
 80131fe:	430a      	orrs	r2, r1
 8013200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 f850 	bl	80132a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	68fa      	ldr	r2, [r7, #12]
 801320e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2220      	movs	r2, #32
 8013214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	2200      	movs	r2, #0
 801321c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013220:	2300      	movs	r3, #0
}
 8013222:	4618      	mov	r0, r3
 8013224:	3710      	adds	r7, #16
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}

0801322a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801322a:	b580      	push	{r7, lr}
 801322c:	b084      	sub	sp, #16
 801322e:	af00      	add	r7, sp, #0
 8013230:	6078      	str	r0, [r7, #4]
 8013232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801323a:	2b01      	cmp	r3, #1
 801323c:	d101      	bne.n	8013242 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801323e:	2302      	movs	r3, #2
 8013240:	e02d      	b.n	801329e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	2201      	movs	r2, #1
 8013246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2224      	movs	r2, #36	; 0x24
 801324e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	f022 0201 	bic.w	r2, r2, #1
 8013268:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	689b      	ldr	r3, [r3, #8]
 8013270:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	683a      	ldr	r2, [r7, #0]
 801327a:	430a      	orrs	r2, r1
 801327c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f000 f812 	bl	80132a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	68fa      	ldr	r2, [r7, #12]
 801328a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	2220      	movs	r2, #32
 8013290:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	2200      	movs	r2, #0
 8013298:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801329c:	2300      	movs	r3, #0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3710      	adds	r7, #16
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
	...

080132a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80132a8:	b480      	push	{r7}
 80132aa:	b085      	sub	sp, #20
 80132ac:	af00      	add	r7, sp, #0
 80132ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d108      	bne.n	80132ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	2201      	movs	r2, #1
 80132bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	2201      	movs	r2, #1
 80132c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80132c8:	e031      	b.n	801332e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80132ca:	2308      	movs	r3, #8
 80132cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80132ce:	2308      	movs	r3, #8
 80132d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	689b      	ldr	r3, [r3, #8]
 80132d8:	0e5b      	lsrs	r3, r3, #25
 80132da:	b2db      	uxtb	r3, r3
 80132dc:	f003 0307 	and.w	r3, r3, #7
 80132e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	689b      	ldr	r3, [r3, #8]
 80132e8:	0f5b      	lsrs	r3, r3, #29
 80132ea:	b2db      	uxtb	r3, r3
 80132ec:	f003 0307 	and.w	r3, r3, #7
 80132f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80132f2:	7bbb      	ldrb	r3, [r7, #14]
 80132f4:	7b3a      	ldrb	r2, [r7, #12]
 80132f6:	4911      	ldr	r1, [pc, #68]	; (801333c <UARTEx_SetNbDataToProcess+0x94>)
 80132f8:	5c8a      	ldrb	r2, [r1, r2]
 80132fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80132fe:	7b3a      	ldrb	r2, [r7, #12]
 8013300:	490f      	ldr	r1, [pc, #60]	; (8013340 <UARTEx_SetNbDataToProcess+0x98>)
 8013302:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013304:	fb93 f3f2 	sdiv	r3, r3, r2
 8013308:	b29a      	uxth	r2, r3
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013310:	7bfb      	ldrb	r3, [r7, #15]
 8013312:	7b7a      	ldrb	r2, [r7, #13]
 8013314:	4909      	ldr	r1, [pc, #36]	; (801333c <UARTEx_SetNbDataToProcess+0x94>)
 8013316:	5c8a      	ldrb	r2, [r1, r2]
 8013318:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801331c:	7b7a      	ldrb	r2, [r7, #13]
 801331e:	4908      	ldr	r1, [pc, #32]	; (8013340 <UARTEx_SetNbDataToProcess+0x98>)
 8013320:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013322:	fb93 f3f2 	sdiv	r3, r3, r2
 8013326:	b29a      	uxth	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801332e:	bf00      	nop
 8013330:	3714      	adds	r7, #20
 8013332:	46bd      	mov	sp, r7
 8013334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013338:	4770      	bx	lr
 801333a:	bf00      	nop
 801333c:	08019110 	.word	0x08019110
 8013340:	08019118 	.word	0x08019118

08013344 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8013344:	b480      	push	{r7}
 8013346:	b085      	sub	sp, #20
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 801334c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8013350:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8013358:	b29a      	uxth	r2, r3
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	b29b      	uxth	r3, r3
 801335e:	43db      	mvns	r3, r3
 8013360:	b29b      	uxth	r3, r3
 8013362:	4013      	ands	r3, r2
 8013364:	b29a      	uxth	r2, r3
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 801336c:	2300      	movs	r3, #0
}
 801336e:	4618      	mov	r0, r3
 8013370:	3714      	adds	r7, #20
 8013372:	46bd      	mov	sp, r7
 8013374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013378:	4770      	bx	lr

0801337a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801337a:	b084      	sub	sp, #16
 801337c:	b480      	push	{r7}
 801337e:	b083      	sub	sp, #12
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	f107 0014 	add.w	r0, r7, #20
 8013388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2201      	movs	r2, #1
 8013390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2200      	movs	r2, #0
 8013398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	2200      	movs	r2, #0
 80133a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2200      	movs	r2, #0
 80133a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80133ac:	2300      	movs	r3, #0
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	370c      	adds	r7, #12
 80133b2:	46bd      	mov	sp, r7
 80133b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b8:	b004      	add	sp, #16
 80133ba:	4770      	bx	lr

080133bc <__errno>:
 80133bc:	4b01      	ldr	r3, [pc, #4]	; (80133c4 <__errno+0x8>)
 80133be:	6818      	ldr	r0, [r3, #0]
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	20000020 	.word	0x20000020

080133c8 <__libc_init_array>:
 80133c8:	b570      	push	{r4, r5, r6, lr}
 80133ca:	4d0d      	ldr	r5, [pc, #52]	; (8013400 <__libc_init_array+0x38>)
 80133cc:	4c0d      	ldr	r4, [pc, #52]	; (8013404 <__libc_init_array+0x3c>)
 80133ce:	1b64      	subs	r4, r4, r5
 80133d0:	10a4      	asrs	r4, r4, #2
 80133d2:	2600      	movs	r6, #0
 80133d4:	42a6      	cmp	r6, r4
 80133d6:	d109      	bne.n	80133ec <__libc_init_array+0x24>
 80133d8:	4d0b      	ldr	r5, [pc, #44]	; (8013408 <__libc_init_array+0x40>)
 80133da:	4c0c      	ldr	r4, [pc, #48]	; (801340c <__libc_init_array+0x44>)
 80133dc:	f004 fb04 	bl	80179e8 <_init>
 80133e0:	1b64      	subs	r4, r4, r5
 80133e2:	10a4      	asrs	r4, r4, #2
 80133e4:	2600      	movs	r6, #0
 80133e6:	42a6      	cmp	r6, r4
 80133e8:	d105      	bne.n	80133f6 <__libc_init_array+0x2e>
 80133ea:	bd70      	pop	{r4, r5, r6, pc}
 80133ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80133f0:	4798      	blx	r3
 80133f2:	3601      	adds	r6, #1
 80133f4:	e7ee      	b.n	80133d4 <__libc_init_array+0xc>
 80133f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80133fa:	4798      	blx	r3
 80133fc:	3601      	adds	r6, #1
 80133fe:	e7f2      	b.n	80133e6 <__libc_init_array+0x1e>
 8013400:	080196d8 	.word	0x080196d8
 8013404:	080196d8 	.word	0x080196d8
 8013408:	080196d8 	.word	0x080196d8
 801340c:	080196dc 	.word	0x080196dc

08013410 <localtime>:
 8013410:	b538      	push	{r3, r4, r5, lr}
 8013412:	4b0b      	ldr	r3, [pc, #44]	; (8013440 <localtime+0x30>)
 8013414:	681d      	ldr	r5, [r3, #0]
 8013416:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8013418:	4604      	mov	r4, r0
 801341a:	b953      	cbnz	r3, 8013432 <localtime+0x22>
 801341c:	2024      	movs	r0, #36	; 0x24
 801341e:	f000 f909 	bl	8013634 <malloc>
 8013422:	4602      	mov	r2, r0
 8013424:	63e8      	str	r0, [r5, #60]	; 0x3c
 8013426:	b920      	cbnz	r0, 8013432 <localtime+0x22>
 8013428:	4b06      	ldr	r3, [pc, #24]	; (8013444 <localtime+0x34>)
 801342a:	4807      	ldr	r0, [pc, #28]	; (8013448 <localtime+0x38>)
 801342c:	2132      	movs	r1, #50	; 0x32
 801342e:	f001 fb8d 	bl	8014b4c <__assert_func>
 8013432:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8013434:	4620      	mov	r0, r4
 8013436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801343a:	f000 b807 	b.w	801344c <localtime_r>
 801343e:	bf00      	nop
 8013440:	20000020 	.word	0x20000020
 8013444:	08019124 	.word	0x08019124
 8013448:	0801913b 	.word	0x0801913b

0801344c <localtime_r>:
 801344c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8013450:	4680      	mov	r8, r0
 8013452:	9101      	str	r1, [sp, #4]
 8013454:	f002 fa7c 	bl	8015950 <__gettzinfo>
 8013458:	9901      	ldr	r1, [sp, #4]
 801345a:	4605      	mov	r5, r0
 801345c:	4640      	mov	r0, r8
 801345e:	f002 fa7b 	bl	8015958 <gmtime_r>
 8013462:	6943      	ldr	r3, [r0, #20]
 8013464:	0799      	lsls	r1, r3, #30
 8013466:	4604      	mov	r4, r0
 8013468:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 801346c:	d105      	bne.n	801347a <localtime_r+0x2e>
 801346e:	2264      	movs	r2, #100	; 0x64
 8013470:	fb97 f3f2 	sdiv	r3, r7, r2
 8013474:	fb02 7313 	mls	r3, r2, r3, r7
 8013478:	bb73      	cbnz	r3, 80134d8 <localtime_r+0x8c>
 801347a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801347e:	fb97 f6f3 	sdiv	r6, r7, r3
 8013482:	fb03 7616 	mls	r6, r3, r6, r7
 8013486:	fab6 f386 	clz	r3, r6
 801348a:	095b      	lsrs	r3, r3, #5
 801348c:	4e67      	ldr	r6, [pc, #412]	; (801362c <localtime_r+0x1e0>)
 801348e:	2230      	movs	r2, #48	; 0x30
 8013490:	fb02 6603 	mla	r6, r2, r3, r6
 8013494:	f001 f9c8 	bl	8014828 <__tz_lock>
 8013498:	f001 f9d2 	bl	8014840 <_tzset_unlocked>
 801349c:	4b64      	ldr	r3, [pc, #400]	; (8013630 <localtime_r+0x1e4>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	b34b      	cbz	r3, 80134f6 <localtime_r+0xaa>
 80134a2:	686b      	ldr	r3, [r5, #4]
 80134a4:	42bb      	cmp	r3, r7
 80134a6:	d119      	bne.n	80134dc <localtime_r+0x90>
 80134a8:	682f      	ldr	r7, [r5, #0]
 80134aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80134ae:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80134b2:	b9df      	cbnz	r7, 80134ec <localtime_r+0xa0>
 80134b4:	4282      	cmp	r2, r0
 80134b6:	eb73 0101 	sbcs.w	r1, r3, r1
 80134ba:	da23      	bge.n	8013504 <localtime_r+0xb8>
 80134bc:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80134c0:	4282      	cmp	r2, r0
 80134c2:	eb73 0701 	sbcs.w	r7, r3, r1
 80134c6:	bfb4      	ite	lt
 80134c8:	2701      	movlt	r7, #1
 80134ca:	2700      	movge	r7, #0
 80134cc:	4282      	cmp	r2, r0
 80134ce:	418b      	sbcs	r3, r1
 80134d0:	6227      	str	r7, [r4, #32]
 80134d2:	db19      	blt.n	8013508 <localtime_r+0xbc>
 80134d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80134d6:	e018      	b.n	801350a <localtime_r+0xbe>
 80134d8:	2301      	movs	r3, #1
 80134da:	e7d7      	b.n	801348c <localtime_r+0x40>
 80134dc:	4638      	mov	r0, r7
 80134de:	f001 f8f9 	bl	80146d4 <__tzcalc_limits>
 80134e2:	2800      	cmp	r0, #0
 80134e4:	d1e0      	bne.n	80134a8 <localtime_r+0x5c>
 80134e6:	f04f 33ff 	mov.w	r3, #4294967295
 80134ea:	e004      	b.n	80134f6 <localtime_r+0xaa>
 80134ec:	4282      	cmp	r2, r0
 80134ee:	eb73 0101 	sbcs.w	r1, r3, r1
 80134f2:	da02      	bge.n	80134fa <localtime_r+0xae>
 80134f4:	2300      	movs	r3, #0
 80134f6:	6223      	str	r3, [r4, #32]
 80134f8:	e7ec      	b.n	80134d4 <localtime_r+0x88>
 80134fa:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80134fe:	4282      	cmp	r2, r0
 8013500:	418b      	sbcs	r3, r1
 8013502:	daf7      	bge.n	80134f4 <localtime_r+0xa8>
 8013504:	2301      	movs	r3, #1
 8013506:	6223      	str	r3, [r4, #32]
 8013508:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801350a:	6861      	ldr	r1, [r4, #4]
 801350c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8013510:	203c      	movs	r0, #60	; 0x3c
 8013512:	fb93 f5f2 	sdiv	r5, r3, r2
 8013516:	fb02 3315 	mls	r3, r2, r5, r3
 801351a:	fb93 f2f0 	sdiv	r2, r3, r0
 801351e:	fb00 3012 	mls	r0, r0, r2, r3
 8013522:	6823      	ldr	r3, [r4, #0]
 8013524:	1a89      	subs	r1, r1, r2
 8013526:	68a2      	ldr	r2, [r4, #8]
 8013528:	6061      	str	r1, [r4, #4]
 801352a:	1a1b      	subs	r3, r3, r0
 801352c:	1b52      	subs	r2, r2, r5
 801352e:	2b3b      	cmp	r3, #59	; 0x3b
 8013530:	6023      	str	r3, [r4, #0]
 8013532:	60a2      	str	r2, [r4, #8]
 8013534:	dd35      	ble.n	80135a2 <localtime_r+0x156>
 8013536:	3101      	adds	r1, #1
 8013538:	6061      	str	r1, [r4, #4]
 801353a:	3b3c      	subs	r3, #60	; 0x3c
 801353c:	6023      	str	r3, [r4, #0]
 801353e:	6863      	ldr	r3, [r4, #4]
 8013540:	2b3b      	cmp	r3, #59	; 0x3b
 8013542:	dd34      	ble.n	80135ae <localtime_r+0x162>
 8013544:	3201      	adds	r2, #1
 8013546:	60a2      	str	r2, [r4, #8]
 8013548:	3b3c      	subs	r3, #60	; 0x3c
 801354a:	6063      	str	r3, [r4, #4]
 801354c:	68a3      	ldr	r3, [r4, #8]
 801354e:	2b17      	cmp	r3, #23
 8013550:	dd33      	ble.n	80135ba <localtime_r+0x16e>
 8013552:	69e2      	ldr	r2, [r4, #28]
 8013554:	3201      	adds	r2, #1
 8013556:	61e2      	str	r2, [r4, #28]
 8013558:	69a2      	ldr	r2, [r4, #24]
 801355a:	3201      	adds	r2, #1
 801355c:	2a06      	cmp	r2, #6
 801355e:	bfc8      	it	gt
 8013560:	2200      	movgt	r2, #0
 8013562:	61a2      	str	r2, [r4, #24]
 8013564:	68e2      	ldr	r2, [r4, #12]
 8013566:	3b18      	subs	r3, #24
 8013568:	3201      	adds	r2, #1
 801356a:	60a3      	str	r3, [r4, #8]
 801356c:	6923      	ldr	r3, [r4, #16]
 801356e:	60e2      	str	r2, [r4, #12]
 8013570:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8013574:	428a      	cmp	r2, r1
 8013576:	dd0e      	ble.n	8013596 <localtime_r+0x14a>
 8013578:	2b0b      	cmp	r3, #11
 801357a:	eba2 0201 	sub.w	r2, r2, r1
 801357e:	60e2      	str	r2, [r4, #12]
 8013580:	f103 0201 	add.w	r2, r3, #1
 8013584:	bf09      	itett	eq
 8013586:	6963      	ldreq	r3, [r4, #20]
 8013588:	6122      	strne	r2, [r4, #16]
 801358a:	2200      	moveq	r2, #0
 801358c:	3301      	addeq	r3, #1
 801358e:	bf02      	ittt	eq
 8013590:	6122      	streq	r2, [r4, #16]
 8013592:	6163      	streq	r3, [r4, #20]
 8013594:	61e2      	streq	r2, [r4, #28]
 8013596:	f001 f94d 	bl	8014834 <__tz_unlock>
 801359a:	4620      	mov	r0, r4
 801359c:	b002      	add	sp, #8
 801359e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	dacb      	bge.n	801353e <localtime_r+0xf2>
 80135a6:	3901      	subs	r1, #1
 80135a8:	6061      	str	r1, [r4, #4]
 80135aa:	333c      	adds	r3, #60	; 0x3c
 80135ac:	e7c6      	b.n	801353c <localtime_r+0xf0>
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	dacc      	bge.n	801354c <localtime_r+0x100>
 80135b2:	3a01      	subs	r2, #1
 80135b4:	60a2      	str	r2, [r4, #8]
 80135b6:	333c      	adds	r3, #60	; 0x3c
 80135b8:	e7c7      	b.n	801354a <localtime_r+0xfe>
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	daeb      	bge.n	8013596 <localtime_r+0x14a>
 80135be:	69e2      	ldr	r2, [r4, #28]
 80135c0:	3a01      	subs	r2, #1
 80135c2:	61e2      	str	r2, [r4, #28]
 80135c4:	69a2      	ldr	r2, [r4, #24]
 80135c6:	3a01      	subs	r2, #1
 80135c8:	bf48      	it	mi
 80135ca:	2206      	movmi	r2, #6
 80135cc:	61a2      	str	r2, [r4, #24]
 80135ce:	68e2      	ldr	r2, [r4, #12]
 80135d0:	3318      	adds	r3, #24
 80135d2:	3a01      	subs	r2, #1
 80135d4:	60e2      	str	r2, [r4, #12]
 80135d6:	60a3      	str	r3, [r4, #8]
 80135d8:	2a00      	cmp	r2, #0
 80135da:	d1dc      	bne.n	8013596 <localtime_r+0x14a>
 80135dc:	6923      	ldr	r3, [r4, #16]
 80135de:	3b01      	subs	r3, #1
 80135e0:	d405      	bmi.n	80135ee <localtime_r+0x1a2>
 80135e2:	6123      	str	r3, [r4, #16]
 80135e4:	6923      	ldr	r3, [r4, #16]
 80135e6:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80135ea:	60e3      	str	r3, [r4, #12]
 80135ec:	e7d3      	b.n	8013596 <localtime_r+0x14a>
 80135ee:	230b      	movs	r3, #11
 80135f0:	6123      	str	r3, [r4, #16]
 80135f2:	6963      	ldr	r3, [r4, #20]
 80135f4:	1e5a      	subs	r2, r3, #1
 80135f6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80135fa:	6162      	str	r2, [r4, #20]
 80135fc:	079a      	lsls	r2, r3, #30
 80135fe:	d105      	bne.n	801360c <localtime_r+0x1c0>
 8013600:	2164      	movs	r1, #100	; 0x64
 8013602:	fb93 f2f1 	sdiv	r2, r3, r1
 8013606:	fb01 3212 	mls	r2, r1, r2, r3
 801360a:	b962      	cbnz	r2, 8013626 <localtime_r+0x1da>
 801360c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013610:	fb93 f1f2 	sdiv	r1, r3, r2
 8013614:	fb02 3311 	mls	r3, r2, r1, r3
 8013618:	fab3 f383 	clz	r3, r3
 801361c:	095b      	lsrs	r3, r3, #5
 801361e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8013622:	61e3      	str	r3, [r4, #28]
 8013624:	e7de      	b.n	80135e4 <localtime_r+0x198>
 8013626:	2301      	movs	r3, #1
 8013628:	e7f9      	b.n	801361e <localtime_r+0x1d2>
 801362a:	bf00      	nop
 801362c:	080191f8 	.word	0x080191f8
 8013630:	2000a7ac 	.word	0x2000a7ac

08013634 <malloc>:
 8013634:	4b02      	ldr	r3, [pc, #8]	; (8013640 <malloc+0xc>)
 8013636:	4601      	mov	r1, r0
 8013638:	6818      	ldr	r0, [r3, #0]
 801363a:	f000 baff 	b.w	8013c3c <_malloc_r>
 801363e:	bf00      	nop
 8013640:	20000020 	.word	0x20000020

08013644 <free>:
 8013644:	4b02      	ldr	r3, [pc, #8]	; (8013650 <free+0xc>)
 8013646:	4601      	mov	r1, r0
 8013648:	6818      	ldr	r0, [r3, #0]
 801364a:	f000 ba8b 	b.w	8013b64 <_free_r>
 801364e:	bf00      	nop
 8013650:	20000020 	.word	0x20000020

08013654 <memcpy>:
 8013654:	440a      	add	r2, r1
 8013656:	4291      	cmp	r1, r2
 8013658:	f100 33ff 	add.w	r3, r0, #4294967295
 801365c:	d100      	bne.n	8013660 <memcpy+0xc>
 801365e:	4770      	bx	lr
 8013660:	b510      	push	{r4, lr}
 8013662:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013666:	f803 4f01 	strb.w	r4, [r3, #1]!
 801366a:	4291      	cmp	r1, r2
 801366c:	d1f9      	bne.n	8013662 <memcpy+0xe>
 801366e:	bd10      	pop	{r4, pc}

08013670 <memset>:
 8013670:	4402      	add	r2, r0
 8013672:	4603      	mov	r3, r0
 8013674:	4293      	cmp	r3, r2
 8013676:	d100      	bne.n	801367a <memset+0xa>
 8013678:	4770      	bx	lr
 801367a:	f803 1b01 	strb.w	r1, [r3], #1
 801367e:	e7f9      	b.n	8013674 <memset+0x4>

08013680 <validate_structure>:
 8013680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013682:	6801      	ldr	r1, [r0, #0]
 8013684:	293b      	cmp	r1, #59	; 0x3b
 8013686:	4604      	mov	r4, r0
 8013688:	d911      	bls.n	80136ae <validate_structure+0x2e>
 801368a:	223c      	movs	r2, #60	; 0x3c
 801368c:	4668      	mov	r0, sp
 801368e:	f001 fa7b 	bl	8014b88 <div>
 8013692:	9a01      	ldr	r2, [sp, #4]
 8013694:	6863      	ldr	r3, [r4, #4]
 8013696:	9900      	ldr	r1, [sp, #0]
 8013698:	2a00      	cmp	r2, #0
 801369a:	440b      	add	r3, r1
 801369c:	6063      	str	r3, [r4, #4]
 801369e:	bfbb      	ittet	lt
 80136a0:	323c      	addlt	r2, #60	; 0x3c
 80136a2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80136a6:	6022      	strge	r2, [r4, #0]
 80136a8:	6022      	strlt	r2, [r4, #0]
 80136aa:	bfb8      	it	lt
 80136ac:	6063      	strlt	r3, [r4, #4]
 80136ae:	6861      	ldr	r1, [r4, #4]
 80136b0:	293b      	cmp	r1, #59	; 0x3b
 80136b2:	d911      	bls.n	80136d8 <validate_structure+0x58>
 80136b4:	223c      	movs	r2, #60	; 0x3c
 80136b6:	4668      	mov	r0, sp
 80136b8:	f001 fa66 	bl	8014b88 <div>
 80136bc:	9a01      	ldr	r2, [sp, #4]
 80136be:	68a3      	ldr	r3, [r4, #8]
 80136c0:	9900      	ldr	r1, [sp, #0]
 80136c2:	2a00      	cmp	r2, #0
 80136c4:	440b      	add	r3, r1
 80136c6:	60a3      	str	r3, [r4, #8]
 80136c8:	bfbb      	ittet	lt
 80136ca:	323c      	addlt	r2, #60	; 0x3c
 80136cc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80136d0:	6062      	strge	r2, [r4, #4]
 80136d2:	6062      	strlt	r2, [r4, #4]
 80136d4:	bfb8      	it	lt
 80136d6:	60a3      	strlt	r3, [r4, #8]
 80136d8:	68a1      	ldr	r1, [r4, #8]
 80136da:	2917      	cmp	r1, #23
 80136dc:	d911      	bls.n	8013702 <validate_structure+0x82>
 80136de:	2218      	movs	r2, #24
 80136e0:	4668      	mov	r0, sp
 80136e2:	f001 fa51 	bl	8014b88 <div>
 80136e6:	9a01      	ldr	r2, [sp, #4]
 80136e8:	68e3      	ldr	r3, [r4, #12]
 80136ea:	9900      	ldr	r1, [sp, #0]
 80136ec:	2a00      	cmp	r2, #0
 80136ee:	440b      	add	r3, r1
 80136f0:	60e3      	str	r3, [r4, #12]
 80136f2:	bfbb      	ittet	lt
 80136f4:	3218      	addlt	r2, #24
 80136f6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80136fa:	60a2      	strge	r2, [r4, #8]
 80136fc:	60a2      	strlt	r2, [r4, #8]
 80136fe:	bfb8      	it	lt
 8013700:	60e3      	strlt	r3, [r4, #12]
 8013702:	6921      	ldr	r1, [r4, #16]
 8013704:	290b      	cmp	r1, #11
 8013706:	d911      	bls.n	801372c <validate_structure+0xac>
 8013708:	220c      	movs	r2, #12
 801370a:	4668      	mov	r0, sp
 801370c:	f001 fa3c 	bl	8014b88 <div>
 8013710:	9a01      	ldr	r2, [sp, #4]
 8013712:	6963      	ldr	r3, [r4, #20]
 8013714:	9900      	ldr	r1, [sp, #0]
 8013716:	2a00      	cmp	r2, #0
 8013718:	440b      	add	r3, r1
 801371a:	6163      	str	r3, [r4, #20]
 801371c:	bfbb      	ittet	lt
 801371e:	320c      	addlt	r2, #12
 8013720:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8013724:	6122      	strge	r2, [r4, #16]
 8013726:	6122      	strlt	r2, [r4, #16]
 8013728:	bfb8      	it	lt
 801372a:	6163      	strlt	r3, [r4, #20]
 801372c:	6963      	ldr	r3, [r4, #20]
 801372e:	0798      	lsls	r0, r3, #30
 8013730:	d120      	bne.n	8013774 <validate_structure+0xf4>
 8013732:	2164      	movs	r1, #100	; 0x64
 8013734:	fb93 f2f1 	sdiv	r2, r3, r1
 8013738:	fb01 3212 	mls	r2, r1, r2, r3
 801373c:	b9e2      	cbnz	r2, 8013778 <validate_structure+0xf8>
 801373e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8013742:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013746:	fb93 f1f2 	sdiv	r1, r3, r2
 801374a:	fb02 3311 	mls	r3, r2, r1, r3
 801374e:	2b00      	cmp	r3, #0
 8013750:	bf14      	ite	ne
 8013752:	231c      	movne	r3, #28
 8013754:	231d      	moveq	r3, #29
 8013756:	68e2      	ldr	r2, [r4, #12]
 8013758:	2a00      	cmp	r2, #0
 801375a:	dc0f      	bgt.n	801377c <validate_structure+0xfc>
 801375c:	4f33      	ldr	r7, [pc, #204]	; (801382c <validate_structure+0x1ac>)
 801375e:	260b      	movs	r6, #11
 8013760:	2064      	movs	r0, #100	; 0x64
 8013762:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8013766:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801376a:	f1bc 0f00 	cmp.w	ip, #0
 801376e:	dd31      	ble.n	80137d4 <validate_structure+0x154>
 8013770:	b003      	add	sp, #12
 8013772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013774:	231c      	movs	r3, #28
 8013776:	e7ee      	b.n	8013756 <validate_structure+0xd6>
 8013778:	231d      	movs	r3, #29
 801377a:	e7ec      	b.n	8013756 <validate_structure+0xd6>
 801377c:	4e2b      	ldr	r6, [pc, #172]	; (801382c <validate_structure+0x1ac>)
 801377e:	2700      	movs	r7, #0
 8013780:	2064      	movs	r0, #100	; 0x64
 8013782:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8013786:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 801378a:	2a01      	cmp	r2, #1
 801378c:	bf14      	ite	ne
 801378e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8013792:	469c      	moveq	ip, r3
 8013794:	4561      	cmp	r1, ip
 8013796:	ddeb      	ble.n	8013770 <validate_structure+0xf0>
 8013798:	3201      	adds	r2, #1
 801379a:	eba1 010c 	sub.w	r1, r1, ip
 801379e:	2a0c      	cmp	r2, #12
 80137a0:	60e1      	str	r1, [r4, #12]
 80137a2:	6122      	str	r2, [r4, #16]
 80137a4:	d1ef      	bne.n	8013786 <validate_structure+0x106>
 80137a6:	6963      	ldr	r3, [r4, #20]
 80137a8:	1c5a      	adds	r2, r3, #1
 80137aa:	0791      	lsls	r1, r2, #30
 80137ac:	e9c4 7204 	strd	r7, r2, [r4, #16]
 80137b0:	d137      	bne.n	8013822 <validate_structure+0x1a2>
 80137b2:	fb92 f1f0 	sdiv	r1, r2, r0
 80137b6:	fb00 2211 	mls	r2, r0, r1, r2
 80137ba:	2a00      	cmp	r2, #0
 80137bc:	d133      	bne.n	8013826 <validate_structure+0x1a6>
 80137be:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80137c2:	fb93 f2f5 	sdiv	r2, r3, r5
 80137c6:	fb05 3312 	mls	r3, r5, r2, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	bf14      	ite	ne
 80137ce:	231c      	movne	r3, #28
 80137d0:	231d      	moveq	r3, #29
 80137d2:	e7d8      	b.n	8013786 <validate_structure+0x106>
 80137d4:	6921      	ldr	r1, [r4, #16]
 80137d6:	3901      	subs	r1, #1
 80137d8:	6121      	str	r1, [r4, #16]
 80137da:	3101      	adds	r1, #1
 80137dc:	d114      	bne.n	8013808 <validate_structure+0x188>
 80137de:	6963      	ldr	r3, [r4, #20]
 80137e0:	1e5a      	subs	r2, r3, #1
 80137e2:	0791      	lsls	r1, r2, #30
 80137e4:	e9c4 6204 	strd	r6, r2, [r4, #16]
 80137e8:	d117      	bne.n	801381a <validate_structure+0x19a>
 80137ea:	fb92 f1f0 	sdiv	r1, r2, r0
 80137ee:	fb00 2211 	mls	r2, r0, r1, r2
 80137f2:	b9a2      	cbnz	r2, 801381e <validate_structure+0x19e>
 80137f4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80137f8:	fb93 f2f5 	sdiv	r2, r3, r5
 80137fc:	fb05 3312 	mls	r3, r5, r2, r3
 8013800:	2b00      	cmp	r3, #0
 8013802:	bf14      	ite	ne
 8013804:	231c      	movne	r3, #28
 8013806:	231d      	moveq	r3, #29
 8013808:	6922      	ldr	r2, [r4, #16]
 801380a:	2a01      	cmp	r2, #1
 801380c:	bf14      	ite	ne
 801380e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8013812:	461a      	moveq	r2, r3
 8013814:	4462      	add	r2, ip
 8013816:	60e2      	str	r2, [r4, #12]
 8013818:	e7a5      	b.n	8013766 <validate_structure+0xe6>
 801381a:	231c      	movs	r3, #28
 801381c:	e7f4      	b.n	8013808 <validate_structure+0x188>
 801381e:	231d      	movs	r3, #29
 8013820:	e7f2      	b.n	8013808 <validate_structure+0x188>
 8013822:	231c      	movs	r3, #28
 8013824:	e7af      	b.n	8013786 <validate_structure+0x106>
 8013826:	231d      	movs	r3, #29
 8013828:	e7ad      	b.n	8013786 <validate_structure+0x106>
 801382a:	bf00      	nop
 801382c:	08019198 	.word	0x08019198

08013830 <mktime>:
 8013830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013834:	b085      	sub	sp, #20
 8013836:	4607      	mov	r7, r0
 8013838:	f002 f88a 	bl	8015950 <__gettzinfo>
 801383c:	4681      	mov	r9, r0
 801383e:	4638      	mov	r0, r7
 8013840:	f7ff ff1e 	bl	8013680 <validate_structure>
 8013844:	e9d7 4000 	ldrd	r4, r0, [r7]
 8013848:	233c      	movs	r3, #60	; 0x3c
 801384a:	fb03 4400 	mla	r4, r3, r0, r4
 801384e:	68b8      	ldr	r0, [r7, #8]
 8013850:	4abc      	ldr	r2, [pc, #752]	; (8013b44 <mktime+0x314>)
 8013852:	697e      	ldr	r6, [r7, #20]
 8013854:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013858:	fb03 4400 	mla	r4, r3, r0, r4
 801385c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8013860:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013864:	3d01      	subs	r5, #1
 8013866:	2b01      	cmp	r3, #1
 8013868:	4415      	add	r5, r2
 801386a:	dd11      	ble.n	8013890 <mktime+0x60>
 801386c:	07b1      	lsls	r1, r6, #30
 801386e:	d10f      	bne.n	8013890 <mktime+0x60>
 8013870:	2264      	movs	r2, #100	; 0x64
 8013872:	fb96 f3f2 	sdiv	r3, r6, r2
 8013876:	fb02 6313 	mls	r3, r2, r3, r6
 801387a:	b943      	cbnz	r3, 801388e <mktime+0x5e>
 801387c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8013880:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013884:	fb93 f1f2 	sdiv	r1, r3, r2
 8013888:	fb02 3311 	mls	r3, r2, r1, r3
 801388c:	b903      	cbnz	r3, 8013890 <mktime+0x60>
 801388e:	3501      	adds	r5, #1
 8013890:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8013894:	3310      	adds	r3, #16
 8013896:	f644 6220 	movw	r2, #20000	; 0x4e20
 801389a:	4293      	cmp	r3, r2
 801389c:	61fd      	str	r5, [r7, #28]
 801389e:	f200 815d 	bhi.w	8013b5c <mktime+0x32c>
 80138a2:	2e46      	cmp	r6, #70	; 0x46
 80138a4:	dd71      	ble.n	801398a <mktime+0x15a>
 80138a6:	2346      	movs	r3, #70	; 0x46
 80138a8:	f240 1c6d 	movw	ip, #365	; 0x16d
 80138ac:	2164      	movs	r1, #100	; 0x64
 80138ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80138b2:	079a      	lsls	r2, r3, #30
 80138b4:	d163      	bne.n	801397e <mktime+0x14e>
 80138b6:	fb93 f2f1 	sdiv	r2, r3, r1
 80138ba:	fb01 3212 	mls	r2, r1, r2, r3
 80138be:	2a00      	cmp	r2, #0
 80138c0:	d160      	bne.n	8013984 <mktime+0x154>
 80138c2:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80138c6:	fb92 fef0 	sdiv	lr, r2, r0
 80138ca:	fb00 221e 	mls	r2, r0, lr, r2
 80138ce:	2a00      	cmp	r2, #0
 80138d0:	bf14      	ite	ne
 80138d2:	4662      	movne	r2, ip
 80138d4:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80138d8:	3301      	adds	r3, #1
 80138da:	429e      	cmp	r6, r3
 80138dc:	4415      	add	r5, r2
 80138de:	d1e8      	bne.n	80138b2 <mktime+0x82>
 80138e0:	4b99      	ldr	r3, [pc, #612]	; (8013b48 <mktime+0x318>)
 80138e2:	ea4f 78e4 	mov.w	r8, r4, asr #31
 80138e6:	fbc5 4803 	smlal	r4, r8, r5, r3
 80138ea:	f000 ff9d 	bl	8014828 <__tz_lock>
 80138ee:	f000 ffa7 	bl	8014840 <_tzset_unlocked>
 80138f2:	4b96      	ldr	r3, [pc, #600]	; (8013b4c <mktime+0x31c>)
 80138f4:	f8d3 b000 	ldr.w	fp, [r3]
 80138f8:	f1bb 0f00 	cmp.w	fp, #0
 80138fc:	d039      	beq.n	8013972 <mktime+0x142>
 80138fe:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8013902:	6978      	ldr	r0, [r7, #20]
 8013904:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8013908:	f1bb 0f01 	cmp.w	fp, #1
 801390c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8013910:	46da      	mov	sl, fp
 8013912:	bfa8      	it	ge
 8013914:	f04f 0a01 	movge.w	sl, #1
 8013918:	4283      	cmp	r3, r0
 801391a:	d178      	bne.n	8013a0e <mktime+0x1de>
 801391c:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 8013920:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8013924:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 8013928:	1a5b      	subs	r3, r3, r1
 801392a:	9302      	str	r3, [sp, #8]
 801392c:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 8013930:	9303      	str	r3, [sp, #12]
 8013932:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 8013936:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 801393a:	9301      	str	r3, [sp, #4]
 801393c:	ebb3 0c02 	subs.w	ip, r3, r2
 8013940:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 8013944:	4564      	cmp	r4, ip
 8013946:	eb78 0300 	sbcs.w	r3, r8, r0
 801394a:	da66      	bge.n	8013a1a <mktime+0x1ea>
 801394c:	f8d9 3000 	ldr.w	r3, [r9]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d06f      	beq.n	8013a34 <mktime+0x204>
 8013954:	9b02      	ldr	r3, [sp, #8]
 8013956:	429c      	cmp	r4, r3
 8013958:	9b03      	ldr	r3, [sp, #12]
 801395a:	eb78 0303 	sbcs.w	r3, r8, r3
 801395e:	db03      	blt.n	8013968 <mktime+0x138>
 8013960:	4564      	cmp	r4, ip
 8013962:	eb78 0300 	sbcs.w	r3, r8, r0
 8013966:	db6b      	blt.n	8013a40 <mktime+0x210>
 8013968:	f1bb 0f00 	cmp.w	fp, #0
 801396c:	f04f 0b00 	mov.w	fp, #0
 8013970:	da6b      	bge.n	8013a4a <mktime+0x21a>
 8013972:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8013976:	190c      	adds	r4, r1, r4
 8013978:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 801397c:	e0a9      	b.n	8013ad2 <mktime+0x2a2>
 801397e:	f240 126d 	movw	r2, #365	; 0x16d
 8013982:	e7a9      	b.n	80138d8 <mktime+0xa8>
 8013984:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8013988:	e7a6      	b.n	80138d8 <mktime+0xa8>
 801398a:	d0a9      	beq.n	80138e0 <mktime+0xb0>
 801398c:	2345      	movs	r3, #69	; 0x45
 801398e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8013992:	2164      	movs	r1, #100	; 0x64
 8013994:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8013998:	e012      	b.n	80139c0 <mktime+0x190>
 801399a:	bb62      	cbnz	r2, 80139f6 <mktime+0x1c6>
 801399c:	fb93 f2f1 	sdiv	r2, r3, r1
 80139a0:	fb01 3212 	mls	r2, r1, r2, r3
 80139a4:	bb52      	cbnz	r2, 80139fc <mktime+0x1cc>
 80139a6:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 80139aa:	fb92 fef0 	sdiv	lr, r2, r0
 80139ae:	fb00 221e 	mls	r2, r0, lr, r2
 80139b2:	2a00      	cmp	r2, #0
 80139b4:	bf14      	ite	ne
 80139b6:	4662      	movne	r2, ip
 80139b8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80139bc:	1aad      	subs	r5, r5, r2
 80139be:	3b01      	subs	r3, #1
 80139c0:	429e      	cmp	r6, r3
 80139c2:	f003 0203 	and.w	r2, r3, #3
 80139c6:	dbe8      	blt.n	801399a <mktime+0x16a>
 80139c8:	b9da      	cbnz	r2, 8013a02 <mktime+0x1d2>
 80139ca:	2264      	movs	r2, #100	; 0x64
 80139cc:	fb96 f3f2 	sdiv	r3, r6, r2
 80139d0:	fb02 6313 	mls	r3, r2, r3, r6
 80139d4:	b9c3      	cbnz	r3, 8013a08 <mktime+0x1d8>
 80139d6:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 80139da:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80139de:	fb93 f1f2 	sdiv	r1, r3, r2
 80139e2:	fb02 3311 	mls	r3, r2, r1, r3
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	f240 136d 	movw	r3, #365	; 0x16d
 80139ec:	bf08      	it	eq
 80139ee:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80139f2:	1aed      	subs	r5, r5, r3
 80139f4:	e774      	b.n	80138e0 <mktime+0xb0>
 80139f6:	f240 126d 	movw	r2, #365	; 0x16d
 80139fa:	e7df      	b.n	80139bc <mktime+0x18c>
 80139fc:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8013a00:	e7dc      	b.n	80139bc <mktime+0x18c>
 8013a02:	f240 136d 	movw	r3, #365	; 0x16d
 8013a06:	e7f4      	b.n	80139f2 <mktime+0x1c2>
 8013a08:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8013a0c:	e7f1      	b.n	80139f2 <mktime+0x1c2>
 8013a0e:	f000 fe61 	bl	80146d4 <__tzcalc_limits>
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d182      	bne.n	801391c <mktime+0xec>
 8013a16:	46d3      	mov	fp, sl
 8013a18:	e050      	b.n	8013abc <mktime+0x28c>
 8013a1a:	9b01      	ldr	r3, [sp, #4]
 8013a1c:	1a5b      	subs	r3, r3, r1
 8013a1e:	9301      	str	r3, [sp, #4]
 8013a20:	ea4f 73e1 	mov.w	r3, r1, asr #31
 8013a24:	eb6e 0e03 	sbc.w	lr, lr, r3
 8013a28:	9b01      	ldr	r3, [sp, #4]
 8013a2a:	429c      	cmp	r4, r3
 8013a2c:	eb78 030e 	sbcs.w	r3, r8, lr
 8013a30:	dbf1      	blt.n	8013a16 <mktime+0x1e6>
 8013a32:	e78b      	b.n	801394c <mktime+0x11c>
 8013a34:	9b02      	ldr	r3, [sp, #8]
 8013a36:	429c      	cmp	r4, r3
 8013a38:	9b03      	ldr	r3, [sp, #12]
 8013a3a:	eb78 0303 	sbcs.w	r3, r8, r3
 8013a3e:	db8f      	blt.n	8013960 <mktime+0x130>
 8013a40:	f1bb 0f00 	cmp.w	fp, #0
 8013a44:	db3e      	blt.n	8013ac4 <mktime+0x294>
 8013a46:	f04f 0b01 	mov.w	fp, #1
 8013a4a:	ea8a 0a0b 	eor.w	sl, sl, fp
 8013a4e:	f1ba 0f01 	cmp.w	sl, #1
 8013a52:	d133      	bne.n	8013abc <mktime+0x28c>
 8013a54:	f1bb 0f00 	cmp.w	fp, #0
 8013a58:	d04e      	beq.n	8013af8 <mktime+0x2c8>
 8013a5a:	1a52      	subs	r2, r2, r1
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8013a62:	4413      	add	r3, r2
 8013a64:	1914      	adds	r4, r2, r4
 8013a66:	603b      	str	r3, [r7, #0]
 8013a68:	4638      	mov	r0, r7
 8013a6a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8013a6e:	f7ff fe07 	bl	8013680 <validate_structure>
 8013a72:	68fa      	ldr	r2, [r7, #12]
 8013a74:	ebb2 020a 	subs.w	r2, r2, sl
 8013a78:	d020      	beq.n	8013abc <mktime+0x28c>
 8013a7a:	2a01      	cmp	r2, #1
 8013a7c:	dc3e      	bgt.n	8013afc <mktime+0x2cc>
 8013a7e:	1c90      	adds	r0, r2, #2
 8013a80:	bfd8      	it	le
 8013a82:	2201      	movle	r2, #1
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	18d3      	adds	r3, r2, r3
 8013a88:	4415      	add	r5, r2
 8013a8a:	d540      	bpl.n	8013b0e <mktime+0x2de>
 8013a8c:	1e73      	subs	r3, r6, #1
 8013a8e:	0799      	lsls	r1, r3, #30
 8013a90:	d137      	bne.n	8013b02 <mktime+0x2d2>
 8013a92:	2264      	movs	r2, #100	; 0x64
 8013a94:	fb93 f1f2 	sdiv	r1, r3, r2
 8013a98:	fb02 3311 	mls	r3, r2, r1, r3
 8013a9c:	bba3      	cbnz	r3, 8013b08 <mktime+0x2d8>
 8013a9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8013aa2:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8013aa6:	fb96 f2f3 	sdiv	r2, r6, r3
 8013aaa:	fb03 6612 	mls	r6, r3, r2, r6
 8013aae:	2e00      	cmp	r6, #0
 8013ab0:	f240 136d 	movw	r3, #365	; 0x16d
 8013ab4:	bf18      	it	ne
 8013ab6:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8013aba:	61fb      	str	r3, [r7, #28]
 8013abc:	f1bb 0f01 	cmp.w	fp, #1
 8013ac0:	f47f af57 	bne.w	8013972 <mktime+0x142>
 8013ac4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8013ac8:	190c      	adds	r4, r1, r4
 8013aca:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8013ace:	f04f 0b01 	mov.w	fp, #1
 8013ad2:	f000 feaf 	bl	8014834 <__tz_unlock>
 8013ad6:	3504      	adds	r5, #4
 8013ad8:	2307      	movs	r3, #7
 8013ada:	fb95 f3f3 	sdiv	r3, r5, r3
 8013ade:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8013ae2:	1aed      	subs	r5, r5, r3
 8013ae4:	bf48      	it	mi
 8013ae6:	3507      	addmi	r5, #7
 8013ae8:	f8c7 b020 	str.w	fp, [r7, #32]
 8013aec:	61bd      	str	r5, [r7, #24]
 8013aee:	4620      	mov	r0, r4
 8013af0:	4641      	mov	r1, r8
 8013af2:	b005      	add	sp, #20
 8013af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013af8:	1a8a      	subs	r2, r1, r2
 8013afa:	e7af      	b.n	8013a5c <mktime+0x22c>
 8013afc:	f04f 32ff 	mov.w	r2, #4294967295
 8013b00:	e7c0      	b.n	8013a84 <mktime+0x254>
 8013b02:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8013b06:	e7d8      	b.n	8013aba <mktime+0x28a>
 8013b08:	f240 136d 	movw	r3, #365	; 0x16d
 8013b0c:	e7d5      	b.n	8013aba <mktime+0x28a>
 8013b0e:	07b2      	lsls	r2, r6, #30
 8013b10:	d11e      	bne.n	8013b50 <mktime+0x320>
 8013b12:	2164      	movs	r1, #100	; 0x64
 8013b14:	fb96 f2f1 	sdiv	r2, r6, r1
 8013b18:	fb01 6212 	mls	r2, r1, r2, r6
 8013b1c:	b9da      	cbnz	r2, 8013b56 <mktime+0x326>
 8013b1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8013b22:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8013b26:	fb96 f1f2 	sdiv	r1, r6, r2
 8013b2a:	fb02 6611 	mls	r6, r2, r1, r6
 8013b2e:	2e00      	cmp	r6, #0
 8013b30:	f240 126d 	movw	r2, #365	; 0x16d
 8013b34:	bf08      	it	eq
 8013b36:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8013b3a:	4293      	cmp	r3, r2
 8013b3c:	bfa8      	it	ge
 8013b3e:	1a9b      	subge	r3, r3, r2
 8013b40:	e7bb      	b.n	8013aba <mktime+0x28a>
 8013b42:	bf00      	nop
 8013b44:	080191c8 	.word	0x080191c8
 8013b48:	00015180 	.word	0x00015180
 8013b4c:	2000a7ac 	.word	0x2000a7ac
 8013b50:	f240 126d 	movw	r2, #365	; 0x16d
 8013b54:	e7f1      	b.n	8013b3a <mktime+0x30a>
 8013b56:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8013b5a:	e7ee      	b.n	8013b3a <mktime+0x30a>
 8013b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8013b60:	46a0      	mov	r8, r4
 8013b62:	e7c4      	b.n	8013aee <mktime+0x2be>

08013b64 <_free_r>:
 8013b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b66:	2900      	cmp	r1, #0
 8013b68:	d044      	beq.n	8013bf4 <_free_r+0x90>
 8013b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b6e:	9001      	str	r0, [sp, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	f1a1 0404 	sub.w	r4, r1, #4
 8013b76:	bfb8      	it	lt
 8013b78:	18e4      	addlt	r4, r4, r3
 8013b7a:	f001 ffa3 	bl	8015ac4 <__malloc_lock>
 8013b7e:	4a1e      	ldr	r2, [pc, #120]	; (8013bf8 <_free_r+0x94>)
 8013b80:	9801      	ldr	r0, [sp, #4]
 8013b82:	6813      	ldr	r3, [r2, #0]
 8013b84:	b933      	cbnz	r3, 8013b94 <_free_r+0x30>
 8013b86:	6063      	str	r3, [r4, #4]
 8013b88:	6014      	str	r4, [r2, #0]
 8013b8a:	b003      	add	sp, #12
 8013b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b90:	f001 bf9e 	b.w	8015ad0 <__malloc_unlock>
 8013b94:	42a3      	cmp	r3, r4
 8013b96:	d908      	bls.n	8013baa <_free_r+0x46>
 8013b98:	6825      	ldr	r5, [r4, #0]
 8013b9a:	1961      	adds	r1, r4, r5
 8013b9c:	428b      	cmp	r3, r1
 8013b9e:	bf01      	itttt	eq
 8013ba0:	6819      	ldreq	r1, [r3, #0]
 8013ba2:	685b      	ldreq	r3, [r3, #4]
 8013ba4:	1949      	addeq	r1, r1, r5
 8013ba6:	6021      	streq	r1, [r4, #0]
 8013ba8:	e7ed      	b.n	8013b86 <_free_r+0x22>
 8013baa:	461a      	mov	r2, r3
 8013bac:	685b      	ldr	r3, [r3, #4]
 8013bae:	b10b      	cbz	r3, 8013bb4 <_free_r+0x50>
 8013bb0:	42a3      	cmp	r3, r4
 8013bb2:	d9fa      	bls.n	8013baa <_free_r+0x46>
 8013bb4:	6811      	ldr	r1, [r2, #0]
 8013bb6:	1855      	adds	r5, r2, r1
 8013bb8:	42a5      	cmp	r5, r4
 8013bba:	d10b      	bne.n	8013bd4 <_free_r+0x70>
 8013bbc:	6824      	ldr	r4, [r4, #0]
 8013bbe:	4421      	add	r1, r4
 8013bc0:	1854      	adds	r4, r2, r1
 8013bc2:	42a3      	cmp	r3, r4
 8013bc4:	6011      	str	r1, [r2, #0]
 8013bc6:	d1e0      	bne.n	8013b8a <_free_r+0x26>
 8013bc8:	681c      	ldr	r4, [r3, #0]
 8013bca:	685b      	ldr	r3, [r3, #4]
 8013bcc:	6053      	str	r3, [r2, #4]
 8013bce:	4421      	add	r1, r4
 8013bd0:	6011      	str	r1, [r2, #0]
 8013bd2:	e7da      	b.n	8013b8a <_free_r+0x26>
 8013bd4:	d902      	bls.n	8013bdc <_free_r+0x78>
 8013bd6:	230c      	movs	r3, #12
 8013bd8:	6003      	str	r3, [r0, #0]
 8013bda:	e7d6      	b.n	8013b8a <_free_r+0x26>
 8013bdc:	6825      	ldr	r5, [r4, #0]
 8013bde:	1961      	adds	r1, r4, r5
 8013be0:	428b      	cmp	r3, r1
 8013be2:	bf04      	itt	eq
 8013be4:	6819      	ldreq	r1, [r3, #0]
 8013be6:	685b      	ldreq	r3, [r3, #4]
 8013be8:	6063      	str	r3, [r4, #4]
 8013bea:	bf04      	itt	eq
 8013bec:	1949      	addeq	r1, r1, r5
 8013bee:	6021      	streq	r1, [r4, #0]
 8013bf0:	6054      	str	r4, [r2, #4]
 8013bf2:	e7ca      	b.n	8013b8a <_free_r+0x26>
 8013bf4:	b003      	add	sp, #12
 8013bf6:	bd30      	pop	{r4, r5, pc}
 8013bf8:	2000a788 	.word	0x2000a788

08013bfc <sbrk_aligned>:
 8013bfc:	b570      	push	{r4, r5, r6, lr}
 8013bfe:	4e0e      	ldr	r6, [pc, #56]	; (8013c38 <sbrk_aligned+0x3c>)
 8013c00:	460c      	mov	r4, r1
 8013c02:	6831      	ldr	r1, [r6, #0]
 8013c04:	4605      	mov	r5, r0
 8013c06:	b911      	cbnz	r1, 8013c0e <sbrk_aligned+0x12>
 8013c08:	f000 fd34 	bl	8014674 <_sbrk_r>
 8013c0c:	6030      	str	r0, [r6, #0]
 8013c0e:	4621      	mov	r1, r4
 8013c10:	4628      	mov	r0, r5
 8013c12:	f000 fd2f 	bl	8014674 <_sbrk_r>
 8013c16:	1c43      	adds	r3, r0, #1
 8013c18:	d00a      	beq.n	8013c30 <sbrk_aligned+0x34>
 8013c1a:	1cc4      	adds	r4, r0, #3
 8013c1c:	f024 0403 	bic.w	r4, r4, #3
 8013c20:	42a0      	cmp	r0, r4
 8013c22:	d007      	beq.n	8013c34 <sbrk_aligned+0x38>
 8013c24:	1a21      	subs	r1, r4, r0
 8013c26:	4628      	mov	r0, r5
 8013c28:	f000 fd24 	bl	8014674 <_sbrk_r>
 8013c2c:	3001      	adds	r0, #1
 8013c2e:	d101      	bne.n	8013c34 <sbrk_aligned+0x38>
 8013c30:	f04f 34ff 	mov.w	r4, #4294967295
 8013c34:	4620      	mov	r0, r4
 8013c36:	bd70      	pop	{r4, r5, r6, pc}
 8013c38:	2000a78c 	.word	0x2000a78c

08013c3c <_malloc_r>:
 8013c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c40:	1ccd      	adds	r5, r1, #3
 8013c42:	f025 0503 	bic.w	r5, r5, #3
 8013c46:	3508      	adds	r5, #8
 8013c48:	2d0c      	cmp	r5, #12
 8013c4a:	bf38      	it	cc
 8013c4c:	250c      	movcc	r5, #12
 8013c4e:	2d00      	cmp	r5, #0
 8013c50:	4607      	mov	r7, r0
 8013c52:	db01      	blt.n	8013c58 <_malloc_r+0x1c>
 8013c54:	42a9      	cmp	r1, r5
 8013c56:	d905      	bls.n	8013c64 <_malloc_r+0x28>
 8013c58:	230c      	movs	r3, #12
 8013c5a:	603b      	str	r3, [r7, #0]
 8013c5c:	2600      	movs	r6, #0
 8013c5e:	4630      	mov	r0, r6
 8013c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c64:	4e2e      	ldr	r6, [pc, #184]	; (8013d20 <_malloc_r+0xe4>)
 8013c66:	f001 ff2d 	bl	8015ac4 <__malloc_lock>
 8013c6a:	6833      	ldr	r3, [r6, #0]
 8013c6c:	461c      	mov	r4, r3
 8013c6e:	bb34      	cbnz	r4, 8013cbe <_malloc_r+0x82>
 8013c70:	4629      	mov	r1, r5
 8013c72:	4638      	mov	r0, r7
 8013c74:	f7ff ffc2 	bl	8013bfc <sbrk_aligned>
 8013c78:	1c43      	adds	r3, r0, #1
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	d14d      	bne.n	8013d1a <_malloc_r+0xde>
 8013c7e:	6834      	ldr	r4, [r6, #0]
 8013c80:	4626      	mov	r6, r4
 8013c82:	2e00      	cmp	r6, #0
 8013c84:	d140      	bne.n	8013d08 <_malloc_r+0xcc>
 8013c86:	6823      	ldr	r3, [r4, #0]
 8013c88:	4631      	mov	r1, r6
 8013c8a:	4638      	mov	r0, r7
 8013c8c:	eb04 0803 	add.w	r8, r4, r3
 8013c90:	f000 fcf0 	bl	8014674 <_sbrk_r>
 8013c94:	4580      	cmp	r8, r0
 8013c96:	d13a      	bne.n	8013d0e <_malloc_r+0xd2>
 8013c98:	6821      	ldr	r1, [r4, #0]
 8013c9a:	3503      	adds	r5, #3
 8013c9c:	1a6d      	subs	r5, r5, r1
 8013c9e:	f025 0503 	bic.w	r5, r5, #3
 8013ca2:	3508      	adds	r5, #8
 8013ca4:	2d0c      	cmp	r5, #12
 8013ca6:	bf38      	it	cc
 8013ca8:	250c      	movcc	r5, #12
 8013caa:	4629      	mov	r1, r5
 8013cac:	4638      	mov	r0, r7
 8013cae:	f7ff ffa5 	bl	8013bfc <sbrk_aligned>
 8013cb2:	3001      	adds	r0, #1
 8013cb4:	d02b      	beq.n	8013d0e <_malloc_r+0xd2>
 8013cb6:	6823      	ldr	r3, [r4, #0]
 8013cb8:	442b      	add	r3, r5
 8013cba:	6023      	str	r3, [r4, #0]
 8013cbc:	e00e      	b.n	8013cdc <_malloc_r+0xa0>
 8013cbe:	6822      	ldr	r2, [r4, #0]
 8013cc0:	1b52      	subs	r2, r2, r5
 8013cc2:	d41e      	bmi.n	8013d02 <_malloc_r+0xc6>
 8013cc4:	2a0b      	cmp	r2, #11
 8013cc6:	d916      	bls.n	8013cf6 <_malloc_r+0xba>
 8013cc8:	1961      	adds	r1, r4, r5
 8013cca:	42a3      	cmp	r3, r4
 8013ccc:	6025      	str	r5, [r4, #0]
 8013cce:	bf18      	it	ne
 8013cd0:	6059      	strne	r1, [r3, #4]
 8013cd2:	6863      	ldr	r3, [r4, #4]
 8013cd4:	bf08      	it	eq
 8013cd6:	6031      	streq	r1, [r6, #0]
 8013cd8:	5162      	str	r2, [r4, r5]
 8013cda:	604b      	str	r3, [r1, #4]
 8013cdc:	4638      	mov	r0, r7
 8013cde:	f104 060b 	add.w	r6, r4, #11
 8013ce2:	f001 fef5 	bl	8015ad0 <__malloc_unlock>
 8013ce6:	f026 0607 	bic.w	r6, r6, #7
 8013cea:	1d23      	adds	r3, r4, #4
 8013cec:	1af2      	subs	r2, r6, r3
 8013cee:	d0b6      	beq.n	8013c5e <_malloc_r+0x22>
 8013cf0:	1b9b      	subs	r3, r3, r6
 8013cf2:	50a3      	str	r3, [r4, r2]
 8013cf4:	e7b3      	b.n	8013c5e <_malloc_r+0x22>
 8013cf6:	6862      	ldr	r2, [r4, #4]
 8013cf8:	42a3      	cmp	r3, r4
 8013cfa:	bf0c      	ite	eq
 8013cfc:	6032      	streq	r2, [r6, #0]
 8013cfe:	605a      	strne	r2, [r3, #4]
 8013d00:	e7ec      	b.n	8013cdc <_malloc_r+0xa0>
 8013d02:	4623      	mov	r3, r4
 8013d04:	6864      	ldr	r4, [r4, #4]
 8013d06:	e7b2      	b.n	8013c6e <_malloc_r+0x32>
 8013d08:	4634      	mov	r4, r6
 8013d0a:	6876      	ldr	r6, [r6, #4]
 8013d0c:	e7b9      	b.n	8013c82 <_malloc_r+0x46>
 8013d0e:	230c      	movs	r3, #12
 8013d10:	603b      	str	r3, [r7, #0]
 8013d12:	4638      	mov	r0, r7
 8013d14:	f001 fedc 	bl	8015ad0 <__malloc_unlock>
 8013d18:	e7a1      	b.n	8013c5e <_malloc_r+0x22>
 8013d1a:	6025      	str	r5, [r4, #0]
 8013d1c:	e7de      	b.n	8013cdc <_malloc_r+0xa0>
 8013d1e:	bf00      	nop
 8013d20:	2000a788 	.word	0x2000a788

08013d24 <__cvt>:
 8013d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d28:	ec55 4b10 	vmov	r4, r5, d0
 8013d2c:	2d00      	cmp	r5, #0
 8013d2e:	460e      	mov	r6, r1
 8013d30:	4619      	mov	r1, r3
 8013d32:	462b      	mov	r3, r5
 8013d34:	bfbb      	ittet	lt
 8013d36:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013d3a:	461d      	movlt	r5, r3
 8013d3c:	2300      	movge	r3, #0
 8013d3e:	232d      	movlt	r3, #45	; 0x2d
 8013d40:	700b      	strb	r3, [r1, #0]
 8013d42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d44:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013d48:	4691      	mov	r9, r2
 8013d4a:	f023 0820 	bic.w	r8, r3, #32
 8013d4e:	bfbc      	itt	lt
 8013d50:	4622      	movlt	r2, r4
 8013d52:	4614      	movlt	r4, r2
 8013d54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013d58:	d005      	beq.n	8013d66 <__cvt+0x42>
 8013d5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013d5e:	d100      	bne.n	8013d62 <__cvt+0x3e>
 8013d60:	3601      	adds	r6, #1
 8013d62:	2102      	movs	r1, #2
 8013d64:	e000      	b.n	8013d68 <__cvt+0x44>
 8013d66:	2103      	movs	r1, #3
 8013d68:	ab03      	add	r3, sp, #12
 8013d6a:	9301      	str	r3, [sp, #4]
 8013d6c:	ab02      	add	r3, sp, #8
 8013d6e:	9300      	str	r3, [sp, #0]
 8013d70:	ec45 4b10 	vmov	d0, r4, r5
 8013d74:	4653      	mov	r3, sl
 8013d76:	4632      	mov	r2, r6
 8013d78:	f000 ffa6 	bl	8014cc8 <_dtoa_r>
 8013d7c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013d80:	4607      	mov	r7, r0
 8013d82:	d102      	bne.n	8013d8a <__cvt+0x66>
 8013d84:	f019 0f01 	tst.w	r9, #1
 8013d88:	d022      	beq.n	8013dd0 <__cvt+0xac>
 8013d8a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013d8e:	eb07 0906 	add.w	r9, r7, r6
 8013d92:	d110      	bne.n	8013db6 <__cvt+0x92>
 8013d94:	783b      	ldrb	r3, [r7, #0]
 8013d96:	2b30      	cmp	r3, #48	; 0x30
 8013d98:	d10a      	bne.n	8013db0 <__cvt+0x8c>
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	4620      	mov	r0, r4
 8013da0:	4629      	mov	r1, r5
 8013da2:	f7ec fe73 	bl	8000a8c <__aeabi_dcmpeq>
 8013da6:	b918      	cbnz	r0, 8013db0 <__cvt+0x8c>
 8013da8:	f1c6 0601 	rsb	r6, r6, #1
 8013dac:	f8ca 6000 	str.w	r6, [sl]
 8013db0:	f8da 3000 	ldr.w	r3, [sl]
 8013db4:	4499      	add	r9, r3
 8013db6:	2200      	movs	r2, #0
 8013db8:	2300      	movs	r3, #0
 8013dba:	4620      	mov	r0, r4
 8013dbc:	4629      	mov	r1, r5
 8013dbe:	f7ec fe65 	bl	8000a8c <__aeabi_dcmpeq>
 8013dc2:	b108      	cbz	r0, 8013dc8 <__cvt+0xa4>
 8013dc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8013dc8:	2230      	movs	r2, #48	; 0x30
 8013dca:	9b03      	ldr	r3, [sp, #12]
 8013dcc:	454b      	cmp	r3, r9
 8013dce:	d307      	bcc.n	8013de0 <__cvt+0xbc>
 8013dd0:	9b03      	ldr	r3, [sp, #12]
 8013dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dd4:	1bdb      	subs	r3, r3, r7
 8013dd6:	4638      	mov	r0, r7
 8013dd8:	6013      	str	r3, [r2, #0]
 8013dda:	b004      	add	sp, #16
 8013ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013de0:	1c59      	adds	r1, r3, #1
 8013de2:	9103      	str	r1, [sp, #12]
 8013de4:	701a      	strb	r2, [r3, #0]
 8013de6:	e7f0      	b.n	8013dca <__cvt+0xa6>

08013de8 <__exponent>:
 8013de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013dea:	4603      	mov	r3, r0
 8013dec:	2900      	cmp	r1, #0
 8013dee:	bfb8      	it	lt
 8013df0:	4249      	neglt	r1, r1
 8013df2:	f803 2b02 	strb.w	r2, [r3], #2
 8013df6:	bfb4      	ite	lt
 8013df8:	222d      	movlt	r2, #45	; 0x2d
 8013dfa:	222b      	movge	r2, #43	; 0x2b
 8013dfc:	2909      	cmp	r1, #9
 8013dfe:	7042      	strb	r2, [r0, #1]
 8013e00:	dd2a      	ble.n	8013e58 <__exponent+0x70>
 8013e02:	f10d 0407 	add.w	r4, sp, #7
 8013e06:	46a4      	mov	ip, r4
 8013e08:	270a      	movs	r7, #10
 8013e0a:	46a6      	mov	lr, r4
 8013e0c:	460a      	mov	r2, r1
 8013e0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8013e12:	fb07 1516 	mls	r5, r7, r6, r1
 8013e16:	3530      	adds	r5, #48	; 0x30
 8013e18:	2a63      	cmp	r2, #99	; 0x63
 8013e1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8013e1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013e22:	4631      	mov	r1, r6
 8013e24:	dcf1      	bgt.n	8013e0a <__exponent+0x22>
 8013e26:	3130      	adds	r1, #48	; 0x30
 8013e28:	f1ae 0502 	sub.w	r5, lr, #2
 8013e2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013e30:	1c44      	adds	r4, r0, #1
 8013e32:	4629      	mov	r1, r5
 8013e34:	4561      	cmp	r1, ip
 8013e36:	d30a      	bcc.n	8013e4e <__exponent+0x66>
 8013e38:	f10d 0209 	add.w	r2, sp, #9
 8013e3c:	eba2 020e 	sub.w	r2, r2, lr
 8013e40:	4565      	cmp	r5, ip
 8013e42:	bf88      	it	hi
 8013e44:	2200      	movhi	r2, #0
 8013e46:	4413      	add	r3, r2
 8013e48:	1a18      	subs	r0, r3, r0
 8013e4a:	b003      	add	sp, #12
 8013e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013e52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8013e56:	e7ed      	b.n	8013e34 <__exponent+0x4c>
 8013e58:	2330      	movs	r3, #48	; 0x30
 8013e5a:	3130      	adds	r1, #48	; 0x30
 8013e5c:	7083      	strb	r3, [r0, #2]
 8013e5e:	70c1      	strb	r1, [r0, #3]
 8013e60:	1d03      	adds	r3, r0, #4
 8013e62:	e7f1      	b.n	8013e48 <__exponent+0x60>

08013e64 <_printf_float>:
 8013e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e68:	ed2d 8b02 	vpush	{d8}
 8013e6c:	b08d      	sub	sp, #52	; 0x34
 8013e6e:	460c      	mov	r4, r1
 8013e70:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013e74:	4616      	mov	r6, r2
 8013e76:	461f      	mov	r7, r3
 8013e78:	4605      	mov	r5, r0
 8013e7a:	f001 fe19 	bl	8015ab0 <_localeconv_r>
 8013e7e:	f8d0 a000 	ldr.w	sl, [r0]
 8013e82:	4650      	mov	r0, sl
 8013e84:	f7ec f97c 	bl	8000180 <strlen>
 8013e88:	2300      	movs	r3, #0
 8013e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8013e8c:	6823      	ldr	r3, [r4, #0]
 8013e8e:	9305      	str	r3, [sp, #20]
 8013e90:	f8d8 3000 	ldr.w	r3, [r8]
 8013e94:	f894 b018 	ldrb.w	fp, [r4, #24]
 8013e98:	3307      	adds	r3, #7
 8013e9a:	f023 0307 	bic.w	r3, r3, #7
 8013e9e:	f103 0208 	add.w	r2, r3, #8
 8013ea2:	f8c8 2000 	str.w	r2, [r8]
 8013ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eaa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013eae:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013eb2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013eb6:	9307      	str	r3, [sp, #28]
 8013eb8:	f8cd 8018 	str.w	r8, [sp, #24]
 8013ebc:	ee08 0a10 	vmov	s16, r0
 8013ec0:	4b9f      	ldr	r3, [pc, #636]	; (8014140 <_printf_float+0x2dc>)
 8013ec2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8013eca:	f7ec fe11 	bl	8000af0 <__aeabi_dcmpun>
 8013ece:	bb88      	cbnz	r0, 8013f34 <_printf_float+0xd0>
 8013ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013ed4:	4b9a      	ldr	r3, [pc, #616]	; (8014140 <_printf_float+0x2dc>)
 8013ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8013eda:	f7ec fdeb 	bl	8000ab4 <__aeabi_dcmple>
 8013ede:	bb48      	cbnz	r0, 8013f34 <_printf_float+0xd0>
 8013ee0:	2200      	movs	r2, #0
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	4640      	mov	r0, r8
 8013ee6:	4649      	mov	r1, r9
 8013ee8:	f7ec fdda 	bl	8000aa0 <__aeabi_dcmplt>
 8013eec:	b110      	cbz	r0, 8013ef4 <_printf_float+0x90>
 8013eee:	232d      	movs	r3, #45	; 0x2d
 8013ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ef4:	4b93      	ldr	r3, [pc, #588]	; (8014144 <_printf_float+0x2e0>)
 8013ef6:	4894      	ldr	r0, [pc, #592]	; (8014148 <_printf_float+0x2e4>)
 8013ef8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013efc:	bf94      	ite	ls
 8013efe:	4698      	movls	r8, r3
 8013f00:	4680      	movhi	r8, r0
 8013f02:	2303      	movs	r3, #3
 8013f04:	6123      	str	r3, [r4, #16]
 8013f06:	9b05      	ldr	r3, [sp, #20]
 8013f08:	f023 0204 	bic.w	r2, r3, #4
 8013f0c:	6022      	str	r2, [r4, #0]
 8013f0e:	f04f 0900 	mov.w	r9, #0
 8013f12:	9700      	str	r7, [sp, #0]
 8013f14:	4633      	mov	r3, r6
 8013f16:	aa0b      	add	r2, sp, #44	; 0x2c
 8013f18:	4621      	mov	r1, r4
 8013f1a:	4628      	mov	r0, r5
 8013f1c:	f000 f9d8 	bl	80142d0 <_printf_common>
 8013f20:	3001      	adds	r0, #1
 8013f22:	f040 8090 	bne.w	8014046 <_printf_float+0x1e2>
 8013f26:	f04f 30ff 	mov.w	r0, #4294967295
 8013f2a:	b00d      	add	sp, #52	; 0x34
 8013f2c:	ecbd 8b02 	vpop	{d8}
 8013f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f34:	4642      	mov	r2, r8
 8013f36:	464b      	mov	r3, r9
 8013f38:	4640      	mov	r0, r8
 8013f3a:	4649      	mov	r1, r9
 8013f3c:	f7ec fdd8 	bl	8000af0 <__aeabi_dcmpun>
 8013f40:	b140      	cbz	r0, 8013f54 <_printf_float+0xf0>
 8013f42:	464b      	mov	r3, r9
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	bfbc      	itt	lt
 8013f48:	232d      	movlt	r3, #45	; 0x2d
 8013f4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013f4e:	487f      	ldr	r0, [pc, #508]	; (801414c <_printf_float+0x2e8>)
 8013f50:	4b7f      	ldr	r3, [pc, #508]	; (8014150 <_printf_float+0x2ec>)
 8013f52:	e7d1      	b.n	8013ef8 <_printf_float+0x94>
 8013f54:	6863      	ldr	r3, [r4, #4]
 8013f56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013f5a:	9206      	str	r2, [sp, #24]
 8013f5c:	1c5a      	adds	r2, r3, #1
 8013f5e:	d13f      	bne.n	8013fe0 <_printf_float+0x17c>
 8013f60:	2306      	movs	r3, #6
 8013f62:	6063      	str	r3, [r4, #4]
 8013f64:	9b05      	ldr	r3, [sp, #20]
 8013f66:	6861      	ldr	r1, [r4, #4]
 8013f68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013f6c:	2300      	movs	r3, #0
 8013f6e:	9303      	str	r3, [sp, #12]
 8013f70:	ab0a      	add	r3, sp, #40	; 0x28
 8013f72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013f76:	ab09      	add	r3, sp, #36	; 0x24
 8013f78:	ec49 8b10 	vmov	d0, r8, r9
 8013f7c:	9300      	str	r3, [sp, #0]
 8013f7e:	6022      	str	r2, [r4, #0]
 8013f80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013f84:	4628      	mov	r0, r5
 8013f86:	f7ff fecd 	bl	8013d24 <__cvt>
 8013f8a:	9b06      	ldr	r3, [sp, #24]
 8013f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013f8e:	2b47      	cmp	r3, #71	; 0x47
 8013f90:	4680      	mov	r8, r0
 8013f92:	d108      	bne.n	8013fa6 <_printf_float+0x142>
 8013f94:	1cc8      	adds	r0, r1, #3
 8013f96:	db02      	blt.n	8013f9e <_printf_float+0x13a>
 8013f98:	6863      	ldr	r3, [r4, #4]
 8013f9a:	4299      	cmp	r1, r3
 8013f9c:	dd41      	ble.n	8014022 <_printf_float+0x1be>
 8013f9e:	f1ab 0b02 	sub.w	fp, fp, #2
 8013fa2:	fa5f fb8b 	uxtb.w	fp, fp
 8013fa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013faa:	d820      	bhi.n	8013fee <_printf_float+0x18a>
 8013fac:	3901      	subs	r1, #1
 8013fae:	465a      	mov	r2, fp
 8013fb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8013fb6:	f7ff ff17 	bl	8013de8 <__exponent>
 8013fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013fbc:	1813      	adds	r3, r2, r0
 8013fbe:	2a01      	cmp	r2, #1
 8013fc0:	4681      	mov	r9, r0
 8013fc2:	6123      	str	r3, [r4, #16]
 8013fc4:	dc02      	bgt.n	8013fcc <_printf_float+0x168>
 8013fc6:	6822      	ldr	r2, [r4, #0]
 8013fc8:	07d2      	lsls	r2, r2, #31
 8013fca:	d501      	bpl.n	8013fd0 <_printf_float+0x16c>
 8013fcc:	3301      	adds	r3, #1
 8013fce:	6123      	str	r3, [r4, #16]
 8013fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d09c      	beq.n	8013f12 <_printf_float+0xae>
 8013fd8:	232d      	movs	r3, #45	; 0x2d
 8013fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fde:	e798      	b.n	8013f12 <_printf_float+0xae>
 8013fe0:	9a06      	ldr	r2, [sp, #24]
 8013fe2:	2a47      	cmp	r2, #71	; 0x47
 8013fe4:	d1be      	bne.n	8013f64 <_printf_float+0x100>
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d1bc      	bne.n	8013f64 <_printf_float+0x100>
 8013fea:	2301      	movs	r3, #1
 8013fec:	e7b9      	b.n	8013f62 <_printf_float+0xfe>
 8013fee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013ff2:	d118      	bne.n	8014026 <_printf_float+0x1c2>
 8013ff4:	2900      	cmp	r1, #0
 8013ff6:	6863      	ldr	r3, [r4, #4]
 8013ff8:	dd0b      	ble.n	8014012 <_printf_float+0x1ae>
 8013ffa:	6121      	str	r1, [r4, #16]
 8013ffc:	b913      	cbnz	r3, 8014004 <_printf_float+0x1a0>
 8013ffe:	6822      	ldr	r2, [r4, #0]
 8014000:	07d0      	lsls	r0, r2, #31
 8014002:	d502      	bpl.n	801400a <_printf_float+0x1a6>
 8014004:	3301      	adds	r3, #1
 8014006:	440b      	add	r3, r1
 8014008:	6123      	str	r3, [r4, #16]
 801400a:	65a1      	str	r1, [r4, #88]	; 0x58
 801400c:	f04f 0900 	mov.w	r9, #0
 8014010:	e7de      	b.n	8013fd0 <_printf_float+0x16c>
 8014012:	b913      	cbnz	r3, 801401a <_printf_float+0x1b6>
 8014014:	6822      	ldr	r2, [r4, #0]
 8014016:	07d2      	lsls	r2, r2, #31
 8014018:	d501      	bpl.n	801401e <_printf_float+0x1ba>
 801401a:	3302      	adds	r3, #2
 801401c:	e7f4      	b.n	8014008 <_printf_float+0x1a4>
 801401e:	2301      	movs	r3, #1
 8014020:	e7f2      	b.n	8014008 <_printf_float+0x1a4>
 8014022:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014028:	4299      	cmp	r1, r3
 801402a:	db05      	blt.n	8014038 <_printf_float+0x1d4>
 801402c:	6823      	ldr	r3, [r4, #0]
 801402e:	6121      	str	r1, [r4, #16]
 8014030:	07d8      	lsls	r0, r3, #31
 8014032:	d5ea      	bpl.n	801400a <_printf_float+0x1a6>
 8014034:	1c4b      	adds	r3, r1, #1
 8014036:	e7e7      	b.n	8014008 <_printf_float+0x1a4>
 8014038:	2900      	cmp	r1, #0
 801403a:	bfd4      	ite	le
 801403c:	f1c1 0202 	rsble	r2, r1, #2
 8014040:	2201      	movgt	r2, #1
 8014042:	4413      	add	r3, r2
 8014044:	e7e0      	b.n	8014008 <_printf_float+0x1a4>
 8014046:	6823      	ldr	r3, [r4, #0]
 8014048:	055a      	lsls	r2, r3, #21
 801404a:	d407      	bmi.n	801405c <_printf_float+0x1f8>
 801404c:	6923      	ldr	r3, [r4, #16]
 801404e:	4642      	mov	r2, r8
 8014050:	4631      	mov	r1, r6
 8014052:	4628      	mov	r0, r5
 8014054:	47b8      	blx	r7
 8014056:	3001      	adds	r0, #1
 8014058:	d12c      	bne.n	80140b4 <_printf_float+0x250>
 801405a:	e764      	b.n	8013f26 <_printf_float+0xc2>
 801405c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014060:	f240 80e0 	bls.w	8014224 <_printf_float+0x3c0>
 8014064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014068:	2200      	movs	r2, #0
 801406a:	2300      	movs	r3, #0
 801406c:	f7ec fd0e 	bl	8000a8c <__aeabi_dcmpeq>
 8014070:	2800      	cmp	r0, #0
 8014072:	d034      	beq.n	80140de <_printf_float+0x27a>
 8014074:	4a37      	ldr	r2, [pc, #220]	; (8014154 <_printf_float+0x2f0>)
 8014076:	2301      	movs	r3, #1
 8014078:	4631      	mov	r1, r6
 801407a:	4628      	mov	r0, r5
 801407c:	47b8      	blx	r7
 801407e:	3001      	adds	r0, #1
 8014080:	f43f af51 	beq.w	8013f26 <_printf_float+0xc2>
 8014084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014088:	429a      	cmp	r2, r3
 801408a:	db02      	blt.n	8014092 <_printf_float+0x22e>
 801408c:	6823      	ldr	r3, [r4, #0]
 801408e:	07d8      	lsls	r0, r3, #31
 8014090:	d510      	bpl.n	80140b4 <_printf_float+0x250>
 8014092:	ee18 3a10 	vmov	r3, s16
 8014096:	4652      	mov	r2, sl
 8014098:	4631      	mov	r1, r6
 801409a:	4628      	mov	r0, r5
 801409c:	47b8      	blx	r7
 801409e:	3001      	adds	r0, #1
 80140a0:	f43f af41 	beq.w	8013f26 <_printf_float+0xc2>
 80140a4:	f04f 0800 	mov.w	r8, #0
 80140a8:	f104 091a 	add.w	r9, r4, #26
 80140ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80140ae:	3b01      	subs	r3, #1
 80140b0:	4543      	cmp	r3, r8
 80140b2:	dc09      	bgt.n	80140c8 <_printf_float+0x264>
 80140b4:	6823      	ldr	r3, [r4, #0]
 80140b6:	079b      	lsls	r3, r3, #30
 80140b8:	f100 8105 	bmi.w	80142c6 <_printf_float+0x462>
 80140bc:	68e0      	ldr	r0, [r4, #12]
 80140be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140c0:	4298      	cmp	r0, r3
 80140c2:	bfb8      	it	lt
 80140c4:	4618      	movlt	r0, r3
 80140c6:	e730      	b.n	8013f2a <_printf_float+0xc6>
 80140c8:	2301      	movs	r3, #1
 80140ca:	464a      	mov	r2, r9
 80140cc:	4631      	mov	r1, r6
 80140ce:	4628      	mov	r0, r5
 80140d0:	47b8      	blx	r7
 80140d2:	3001      	adds	r0, #1
 80140d4:	f43f af27 	beq.w	8013f26 <_printf_float+0xc2>
 80140d8:	f108 0801 	add.w	r8, r8, #1
 80140dc:	e7e6      	b.n	80140ac <_printf_float+0x248>
 80140de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	dc39      	bgt.n	8014158 <_printf_float+0x2f4>
 80140e4:	4a1b      	ldr	r2, [pc, #108]	; (8014154 <_printf_float+0x2f0>)
 80140e6:	2301      	movs	r3, #1
 80140e8:	4631      	mov	r1, r6
 80140ea:	4628      	mov	r0, r5
 80140ec:	47b8      	blx	r7
 80140ee:	3001      	adds	r0, #1
 80140f0:	f43f af19 	beq.w	8013f26 <_printf_float+0xc2>
 80140f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140f8:	4313      	orrs	r3, r2
 80140fa:	d102      	bne.n	8014102 <_printf_float+0x29e>
 80140fc:	6823      	ldr	r3, [r4, #0]
 80140fe:	07d9      	lsls	r1, r3, #31
 8014100:	d5d8      	bpl.n	80140b4 <_printf_float+0x250>
 8014102:	ee18 3a10 	vmov	r3, s16
 8014106:	4652      	mov	r2, sl
 8014108:	4631      	mov	r1, r6
 801410a:	4628      	mov	r0, r5
 801410c:	47b8      	blx	r7
 801410e:	3001      	adds	r0, #1
 8014110:	f43f af09 	beq.w	8013f26 <_printf_float+0xc2>
 8014114:	f04f 0900 	mov.w	r9, #0
 8014118:	f104 0a1a 	add.w	sl, r4, #26
 801411c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801411e:	425b      	negs	r3, r3
 8014120:	454b      	cmp	r3, r9
 8014122:	dc01      	bgt.n	8014128 <_printf_float+0x2c4>
 8014124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014126:	e792      	b.n	801404e <_printf_float+0x1ea>
 8014128:	2301      	movs	r3, #1
 801412a:	4652      	mov	r2, sl
 801412c:	4631      	mov	r1, r6
 801412e:	4628      	mov	r0, r5
 8014130:	47b8      	blx	r7
 8014132:	3001      	adds	r0, #1
 8014134:	f43f aef7 	beq.w	8013f26 <_printf_float+0xc2>
 8014138:	f109 0901 	add.w	r9, r9, #1
 801413c:	e7ee      	b.n	801411c <_printf_float+0x2b8>
 801413e:	bf00      	nop
 8014140:	7fefffff 	.word	0x7fefffff
 8014144:	08019258 	.word	0x08019258
 8014148:	0801925c 	.word	0x0801925c
 801414c:	08019264 	.word	0x08019264
 8014150:	08019260 	.word	0x08019260
 8014154:	080196b6 	.word	0x080196b6
 8014158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801415a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801415c:	429a      	cmp	r2, r3
 801415e:	bfa8      	it	ge
 8014160:	461a      	movge	r2, r3
 8014162:	2a00      	cmp	r2, #0
 8014164:	4691      	mov	r9, r2
 8014166:	dc37      	bgt.n	80141d8 <_printf_float+0x374>
 8014168:	f04f 0b00 	mov.w	fp, #0
 801416c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014170:	f104 021a 	add.w	r2, r4, #26
 8014174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014176:	9305      	str	r3, [sp, #20]
 8014178:	eba3 0309 	sub.w	r3, r3, r9
 801417c:	455b      	cmp	r3, fp
 801417e:	dc33      	bgt.n	80141e8 <_printf_float+0x384>
 8014180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014184:	429a      	cmp	r2, r3
 8014186:	db3b      	blt.n	8014200 <_printf_float+0x39c>
 8014188:	6823      	ldr	r3, [r4, #0]
 801418a:	07da      	lsls	r2, r3, #31
 801418c:	d438      	bmi.n	8014200 <_printf_float+0x39c>
 801418e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014190:	9a05      	ldr	r2, [sp, #20]
 8014192:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014194:	1a9a      	subs	r2, r3, r2
 8014196:	eba3 0901 	sub.w	r9, r3, r1
 801419a:	4591      	cmp	r9, r2
 801419c:	bfa8      	it	ge
 801419e:	4691      	movge	r9, r2
 80141a0:	f1b9 0f00 	cmp.w	r9, #0
 80141a4:	dc35      	bgt.n	8014212 <_printf_float+0x3ae>
 80141a6:	f04f 0800 	mov.w	r8, #0
 80141aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80141ae:	f104 0a1a 	add.w	sl, r4, #26
 80141b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141b6:	1a9b      	subs	r3, r3, r2
 80141b8:	eba3 0309 	sub.w	r3, r3, r9
 80141bc:	4543      	cmp	r3, r8
 80141be:	f77f af79 	ble.w	80140b4 <_printf_float+0x250>
 80141c2:	2301      	movs	r3, #1
 80141c4:	4652      	mov	r2, sl
 80141c6:	4631      	mov	r1, r6
 80141c8:	4628      	mov	r0, r5
 80141ca:	47b8      	blx	r7
 80141cc:	3001      	adds	r0, #1
 80141ce:	f43f aeaa 	beq.w	8013f26 <_printf_float+0xc2>
 80141d2:	f108 0801 	add.w	r8, r8, #1
 80141d6:	e7ec      	b.n	80141b2 <_printf_float+0x34e>
 80141d8:	4613      	mov	r3, r2
 80141da:	4631      	mov	r1, r6
 80141dc:	4642      	mov	r2, r8
 80141de:	4628      	mov	r0, r5
 80141e0:	47b8      	blx	r7
 80141e2:	3001      	adds	r0, #1
 80141e4:	d1c0      	bne.n	8014168 <_printf_float+0x304>
 80141e6:	e69e      	b.n	8013f26 <_printf_float+0xc2>
 80141e8:	2301      	movs	r3, #1
 80141ea:	4631      	mov	r1, r6
 80141ec:	4628      	mov	r0, r5
 80141ee:	9205      	str	r2, [sp, #20]
 80141f0:	47b8      	blx	r7
 80141f2:	3001      	adds	r0, #1
 80141f4:	f43f ae97 	beq.w	8013f26 <_printf_float+0xc2>
 80141f8:	9a05      	ldr	r2, [sp, #20]
 80141fa:	f10b 0b01 	add.w	fp, fp, #1
 80141fe:	e7b9      	b.n	8014174 <_printf_float+0x310>
 8014200:	ee18 3a10 	vmov	r3, s16
 8014204:	4652      	mov	r2, sl
 8014206:	4631      	mov	r1, r6
 8014208:	4628      	mov	r0, r5
 801420a:	47b8      	blx	r7
 801420c:	3001      	adds	r0, #1
 801420e:	d1be      	bne.n	801418e <_printf_float+0x32a>
 8014210:	e689      	b.n	8013f26 <_printf_float+0xc2>
 8014212:	9a05      	ldr	r2, [sp, #20]
 8014214:	464b      	mov	r3, r9
 8014216:	4442      	add	r2, r8
 8014218:	4631      	mov	r1, r6
 801421a:	4628      	mov	r0, r5
 801421c:	47b8      	blx	r7
 801421e:	3001      	adds	r0, #1
 8014220:	d1c1      	bne.n	80141a6 <_printf_float+0x342>
 8014222:	e680      	b.n	8013f26 <_printf_float+0xc2>
 8014224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014226:	2a01      	cmp	r2, #1
 8014228:	dc01      	bgt.n	801422e <_printf_float+0x3ca>
 801422a:	07db      	lsls	r3, r3, #31
 801422c:	d538      	bpl.n	80142a0 <_printf_float+0x43c>
 801422e:	2301      	movs	r3, #1
 8014230:	4642      	mov	r2, r8
 8014232:	4631      	mov	r1, r6
 8014234:	4628      	mov	r0, r5
 8014236:	47b8      	blx	r7
 8014238:	3001      	adds	r0, #1
 801423a:	f43f ae74 	beq.w	8013f26 <_printf_float+0xc2>
 801423e:	ee18 3a10 	vmov	r3, s16
 8014242:	4652      	mov	r2, sl
 8014244:	4631      	mov	r1, r6
 8014246:	4628      	mov	r0, r5
 8014248:	47b8      	blx	r7
 801424a:	3001      	adds	r0, #1
 801424c:	f43f ae6b 	beq.w	8013f26 <_printf_float+0xc2>
 8014250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014254:	2200      	movs	r2, #0
 8014256:	2300      	movs	r3, #0
 8014258:	f7ec fc18 	bl	8000a8c <__aeabi_dcmpeq>
 801425c:	b9d8      	cbnz	r0, 8014296 <_printf_float+0x432>
 801425e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014260:	f108 0201 	add.w	r2, r8, #1
 8014264:	3b01      	subs	r3, #1
 8014266:	4631      	mov	r1, r6
 8014268:	4628      	mov	r0, r5
 801426a:	47b8      	blx	r7
 801426c:	3001      	adds	r0, #1
 801426e:	d10e      	bne.n	801428e <_printf_float+0x42a>
 8014270:	e659      	b.n	8013f26 <_printf_float+0xc2>
 8014272:	2301      	movs	r3, #1
 8014274:	4652      	mov	r2, sl
 8014276:	4631      	mov	r1, r6
 8014278:	4628      	mov	r0, r5
 801427a:	47b8      	blx	r7
 801427c:	3001      	adds	r0, #1
 801427e:	f43f ae52 	beq.w	8013f26 <_printf_float+0xc2>
 8014282:	f108 0801 	add.w	r8, r8, #1
 8014286:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014288:	3b01      	subs	r3, #1
 801428a:	4543      	cmp	r3, r8
 801428c:	dcf1      	bgt.n	8014272 <_printf_float+0x40e>
 801428e:	464b      	mov	r3, r9
 8014290:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014294:	e6dc      	b.n	8014050 <_printf_float+0x1ec>
 8014296:	f04f 0800 	mov.w	r8, #0
 801429a:	f104 0a1a 	add.w	sl, r4, #26
 801429e:	e7f2      	b.n	8014286 <_printf_float+0x422>
 80142a0:	2301      	movs	r3, #1
 80142a2:	4642      	mov	r2, r8
 80142a4:	e7df      	b.n	8014266 <_printf_float+0x402>
 80142a6:	2301      	movs	r3, #1
 80142a8:	464a      	mov	r2, r9
 80142aa:	4631      	mov	r1, r6
 80142ac:	4628      	mov	r0, r5
 80142ae:	47b8      	blx	r7
 80142b0:	3001      	adds	r0, #1
 80142b2:	f43f ae38 	beq.w	8013f26 <_printf_float+0xc2>
 80142b6:	f108 0801 	add.w	r8, r8, #1
 80142ba:	68e3      	ldr	r3, [r4, #12]
 80142bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80142be:	1a5b      	subs	r3, r3, r1
 80142c0:	4543      	cmp	r3, r8
 80142c2:	dcf0      	bgt.n	80142a6 <_printf_float+0x442>
 80142c4:	e6fa      	b.n	80140bc <_printf_float+0x258>
 80142c6:	f04f 0800 	mov.w	r8, #0
 80142ca:	f104 0919 	add.w	r9, r4, #25
 80142ce:	e7f4      	b.n	80142ba <_printf_float+0x456>

080142d0 <_printf_common>:
 80142d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d4:	4616      	mov	r6, r2
 80142d6:	4699      	mov	r9, r3
 80142d8:	688a      	ldr	r2, [r1, #8]
 80142da:	690b      	ldr	r3, [r1, #16]
 80142dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142e0:	4293      	cmp	r3, r2
 80142e2:	bfb8      	it	lt
 80142e4:	4613      	movlt	r3, r2
 80142e6:	6033      	str	r3, [r6, #0]
 80142e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142ec:	4607      	mov	r7, r0
 80142ee:	460c      	mov	r4, r1
 80142f0:	b10a      	cbz	r2, 80142f6 <_printf_common+0x26>
 80142f2:	3301      	adds	r3, #1
 80142f4:	6033      	str	r3, [r6, #0]
 80142f6:	6823      	ldr	r3, [r4, #0]
 80142f8:	0699      	lsls	r1, r3, #26
 80142fa:	bf42      	ittt	mi
 80142fc:	6833      	ldrmi	r3, [r6, #0]
 80142fe:	3302      	addmi	r3, #2
 8014300:	6033      	strmi	r3, [r6, #0]
 8014302:	6825      	ldr	r5, [r4, #0]
 8014304:	f015 0506 	ands.w	r5, r5, #6
 8014308:	d106      	bne.n	8014318 <_printf_common+0x48>
 801430a:	f104 0a19 	add.w	sl, r4, #25
 801430e:	68e3      	ldr	r3, [r4, #12]
 8014310:	6832      	ldr	r2, [r6, #0]
 8014312:	1a9b      	subs	r3, r3, r2
 8014314:	42ab      	cmp	r3, r5
 8014316:	dc26      	bgt.n	8014366 <_printf_common+0x96>
 8014318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801431c:	1e13      	subs	r3, r2, #0
 801431e:	6822      	ldr	r2, [r4, #0]
 8014320:	bf18      	it	ne
 8014322:	2301      	movne	r3, #1
 8014324:	0692      	lsls	r2, r2, #26
 8014326:	d42b      	bmi.n	8014380 <_printf_common+0xb0>
 8014328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801432c:	4649      	mov	r1, r9
 801432e:	4638      	mov	r0, r7
 8014330:	47c0      	blx	r8
 8014332:	3001      	adds	r0, #1
 8014334:	d01e      	beq.n	8014374 <_printf_common+0xa4>
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	68e5      	ldr	r5, [r4, #12]
 801433a:	6832      	ldr	r2, [r6, #0]
 801433c:	f003 0306 	and.w	r3, r3, #6
 8014340:	2b04      	cmp	r3, #4
 8014342:	bf08      	it	eq
 8014344:	1aad      	subeq	r5, r5, r2
 8014346:	68a3      	ldr	r3, [r4, #8]
 8014348:	6922      	ldr	r2, [r4, #16]
 801434a:	bf0c      	ite	eq
 801434c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014350:	2500      	movne	r5, #0
 8014352:	4293      	cmp	r3, r2
 8014354:	bfc4      	itt	gt
 8014356:	1a9b      	subgt	r3, r3, r2
 8014358:	18ed      	addgt	r5, r5, r3
 801435a:	2600      	movs	r6, #0
 801435c:	341a      	adds	r4, #26
 801435e:	42b5      	cmp	r5, r6
 8014360:	d11a      	bne.n	8014398 <_printf_common+0xc8>
 8014362:	2000      	movs	r0, #0
 8014364:	e008      	b.n	8014378 <_printf_common+0xa8>
 8014366:	2301      	movs	r3, #1
 8014368:	4652      	mov	r2, sl
 801436a:	4649      	mov	r1, r9
 801436c:	4638      	mov	r0, r7
 801436e:	47c0      	blx	r8
 8014370:	3001      	adds	r0, #1
 8014372:	d103      	bne.n	801437c <_printf_common+0xac>
 8014374:	f04f 30ff 	mov.w	r0, #4294967295
 8014378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801437c:	3501      	adds	r5, #1
 801437e:	e7c6      	b.n	801430e <_printf_common+0x3e>
 8014380:	18e1      	adds	r1, r4, r3
 8014382:	1c5a      	adds	r2, r3, #1
 8014384:	2030      	movs	r0, #48	; 0x30
 8014386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801438a:	4422      	add	r2, r4
 801438c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014394:	3302      	adds	r3, #2
 8014396:	e7c7      	b.n	8014328 <_printf_common+0x58>
 8014398:	2301      	movs	r3, #1
 801439a:	4622      	mov	r2, r4
 801439c:	4649      	mov	r1, r9
 801439e:	4638      	mov	r0, r7
 80143a0:	47c0      	blx	r8
 80143a2:	3001      	adds	r0, #1
 80143a4:	d0e6      	beq.n	8014374 <_printf_common+0xa4>
 80143a6:	3601      	adds	r6, #1
 80143a8:	e7d9      	b.n	801435e <_printf_common+0x8e>
	...

080143ac <_printf_i>:
 80143ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80143b0:	7e0f      	ldrb	r7, [r1, #24]
 80143b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80143b4:	2f78      	cmp	r7, #120	; 0x78
 80143b6:	4691      	mov	r9, r2
 80143b8:	4680      	mov	r8, r0
 80143ba:	460c      	mov	r4, r1
 80143bc:	469a      	mov	sl, r3
 80143be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80143c2:	d807      	bhi.n	80143d4 <_printf_i+0x28>
 80143c4:	2f62      	cmp	r7, #98	; 0x62
 80143c6:	d80a      	bhi.n	80143de <_printf_i+0x32>
 80143c8:	2f00      	cmp	r7, #0
 80143ca:	f000 80d8 	beq.w	801457e <_printf_i+0x1d2>
 80143ce:	2f58      	cmp	r7, #88	; 0x58
 80143d0:	f000 80a3 	beq.w	801451a <_printf_i+0x16e>
 80143d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143dc:	e03a      	b.n	8014454 <_printf_i+0xa8>
 80143de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143e2:	2b15      	cmp	r3, #21
 80143e4:	d8f6      	bhi.n	80143d4 <_printf_i+0x28>
 80143e6:	a101      	add	r1, pc, #4	; (adr r1, 80143ec <_printf_i+0x40>)
 80143e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80143ec:	08014445 	.word	0x08014445
 80143f0:	08014459 	.word	0x08014459
 80143f4:	080143d5 	.word	0x080143d5
 80143f8:	080143d5 	.word	0x080143d5
 80143fc:	080143d5 	.word	0x080143d5
 8014400:	080143d5 	.word	0x080143d5
 8014404:	08014459 	.word	0x08014459
 8014408:	080143d5 	.word	0x080143d5
 801440c:	080143d5 	.word	0x080143d5
 8014410:	080143d5 	.word	0x080143d5
 8014414:	080143d5 	.word	0x080143d5
 8014418:	08014565 	.word	0x08014565
 801441c:	08014489 	.word	0x08014489
 8014420:	08014547 	.word	0x08014547
 8014424:	080143d5 	.word	0x080143d5
 8014428:	080143d5 	.word	0x080143d5
 801442c:	08014587 	.word	0x08014587
 8014430:	080143d5 	.word	0x080143d5
 8014434:	08014489 	.word	0x08014489
 8014438:	080143d5 	.word	0x080143d5
 801443c:	080143d5 	.word	0x080143d5
 8014440:	0801454f 	.word	0x0801454f
 8014444:	682b      	ldr	r3, [r5, #0]
 8014446:	1d1a      	adds	r2, r3, #4
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	602a      	str	r2, [r5, #0]
 801444c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014454:	2301      	movs	r3, #1
 8014456:	e0a3      	b.n	80145a0 <_printf_i+0x1f4>
 8014458:	6820      	ldr	r0, [r4, #0]
 801445a:	6829      	ldr	r1, [r5, #0]
 801445c:	0606      	lsls	r6, r0, #24
 801445e:	f101 0304 	add.w	r3, r1, #4
 8014462:	d50a      	bpl.n	801447a <_printf_i+0xce>
 8014464:	680e      	ldr	r6, [r1, #0]
 8014466:	602b      	str	r3, [r5, #0]
 8014468:	2e00      	cmp	r6, #0
 801446a:	da03      	bge.n	8014474 <_printf_i+0xc8>
 801446c:	232d      	movs	r3, #45	; 0x2d
 801446e:	4276      	negs	r6, r6
 8014470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014474:	485e      	ldr	r0, [pc, #376]	; (80145f0 <_printf_i+0x244>)
 8014476:	230a      	movs	r3, #10
 8014478:	e019      	b.n	80144ae <_printf_i+0x102>
 801447a:	680e      	ldr	r6, [r1, #0]
 801447c:	602b      	str	r3, [r5, #0]
 801447e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8014482:	bf18      	it	ne
 8014484:	b236      	sxthne	r6, r6
 8014486:	e7ef      	b.n	8014468 <_printf_i+0xbc>
 8014488:	682b      	ldr	r3, [r5, #0]
 801448a:	6820      	ldr	r0, [r4, #0]
 801448c:	1d19      	adds	r1, r3, #4
 801448e:	6029      	str	r1, [r5, #0]
 8014490:	0601      	lsls	r1, r0, #24
 8014492:	d501      	bpl.n	8014498 <_printf_i+0xec>
 8014494:	681e      	ldr	r6, [r3, #0]
 8014496:	e002      	b.n	801449e <_printf_i+0xf2>
 8014498:	0646      	lsls	r6, r0, #25
 801449a:	d5fb      	bpl.n	8014494 <_printf_i+0xe8>
 801449c:	881e      	ldrh	r6, [r3, #0]
 801449e:	4854      	ldr	r0, [pc, #336]	; (80145f0 <_printf_i+0x244>)
 80144a0:	2f6f      	cmp	r7, #111	; 0x6f
 80144a2:	bf0c      	ite	eq
 80144a4:	2308      	moveq	r3, #8
 80144a6:	230a      	movne	r3, #10
 80144a8:	2100      	movs	r1, #0
 80144aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80144ae:	6865      	ldr	r5, [r4, #4]
 80144b0:	60a5      	str	r5, [r4, #8]
 80144b2:	2d00      	cmp	r5, #0
 80144b4:	bfa2      	ittt	ge
 80144b6:	6821      	ldrge	r1, [r4, #0]
 80144b8:	f021 0104 	bicge.w	r1, r1, #4
 80144bc:	6021      	strge	r1, [r4, #0]
 80144be:	b90e      	cbnz	r6, 80144c4 <_printf_i+0x118>
 80144c0:	2d00      	cmp	r5, #0
 80144c2:	d04d      	beq.n	8014560 <_printf_i+0x1b4>
 80144c4:	4615      	mov	r5, r2
 80144c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80144ca:	fb03 6711 	mls	r7, r3, r1, r6
 80144ce:	5dc7      	ldrb	r7, [r0, r7]
 80144d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80144d4:	4637      	mov	r7, r6
 80144d6:	42bb      	cmp	r3, r7
 80144d8:	460e      	mov	r6, r1
 80144da:	d9f4      	bls.n	80144c6 <_printf_i+0x11a>
 80144dc:	2b08      	cmp	r3, #8
 80144de:	d10b      	bne.n	80144f8 <_printf_i+0x14c>
 80144e0:	6823      	ldr	r3, [r4, #0]
 80144e2:	07de      	lsls	r6, r3, #31
 80144e4:	d508      	bpl.n	80144f8 <_printf_i+0x14c>
 80144e6:	6923      	ldr	r3, [r4, #16]
 80144e8:	6861      	ldr	r1, [r4, #4]
 80144ea:	4299      	cmp	r1, r3
 80144ec:	bfde      	ittt	le
 80144ee:	2330      	movle	r3, #48	; 0x30
 80144f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80144f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80144f8:	1b52      	subs	r2, r2, r5
 80144fa:	6122      	str	r2, [r4, #16]
 80144fc:	f8cd a000 	str.w	sl, [sp]
 8014500:	464b      	mov	r3, r9
 8014502:	aa03      	add	r2, sp, #12
 8014504:	4621      	mov	r1, r4
 8014506:	4640      	mov	r0, r8
 8014508:	f7ff fee2 	bl	80142d0 <_printf_common>
 801450c:	3001      	adds	r0, #1
 801450e:	d14c      	bne.n	80145aa <_printf_i+0x1fe>
 8014510:	f04f 30ff 	mov.w	r0, #4294967295
 8014514:	b004      	add	sp, #16
 8014516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801451a:	4835      	ldr	r0, [pc, #212]	; (80145f0 <_printf_i+0x244>)
 801451c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014520:	6829      	ldr	r1, [r5, #0]
 8014522:	6823      	ldr	r3, [r4, #0]
 8014524:	f851 6b04 	ldr.w	r6, [r1], #4
 8014528:	6029      	str	r1, [r5, #0]
 801452a:	061d      	lsls	r5, r3, #24
 801452c:	d514      	bpl.n	8014558 <_printf_i+0x1ac>
 801452e:	07df      	lsls	r7, r3, #31
 8014530:	bf44      	itt	mi
 8014532:	f043 0320 	orrmi.w	r3, r3, #32
 8014536:	6023      	strmi	r3, [r4, #0]
 8014538:	b91e      	cbnz	r6, 8014542 <_printf_i+0x196>
 801453a:	6823      	ldr	r3, [r4, #0]
 801453c:	f023 0320 	bic.w	r3, r3, #32
 8014540:	6023      	str	r3, [r4, #0]
 8014542:	2310      	movs	r3, #16
 8014544:	e7b0      	b.n	80144a8 <_printf_i+0xfc>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	f043 0320 	orr.w	r3, r3, #32
 801454c:	6023      	str	r3, [r4, #0]
 801454e:	2378      	movs	r3, #120	; 0x78
 8014550:	4828      	ldr	r0, [pc, #160]	; (80145f4 <_printf_i+0x248>)
 8014552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014556:	e7e3      	b.n	8014520 <_printf_i+0x174>
 8014558:	0659      	lsls	r1, r3, #25
 801455a:	bf48      	it	mi
 801455c:	b2b6      	uxthmi	r6, r6
 801455e:	e7e6      	b.n	801452e <_printf_i+0x182>
 8014560:	4615      	mov	r5, r2
 8014562:	e7bb      	b.n	80144dc <_printf_i+0x130>
 8014564:	682b      	ldr	r3, [r5, #0]
 8014566:	6826      	ldr	r6, [r4, #0]
 8014568:	6961      	ldr	r1, [r4, #20]
 801456a:	1d18      	adds	r0, r3, #4
 801456c:	6028      	str	r0, [r5, #0]
 801456e:	0635      	lsls	r5, r6, #24
 8014570:	681b      	ldr	r3, [r3, #0]
 8014572:	d501      	bpl.n	8014578 <_printf_i+0x1cc>
 8014574:	6019      	str	r1, [r3, #0]
 8014576:	e002      	b.n	801457e <_printf_i+0x1d2>
 8014578:	0670      	lsls	r0, r6, #25
 801457a:	d5fb      	bpl.n	8014574 <_printf_i+0x1c8>
 801457c:	8019      	strh	r1, [r3, #0]
 801457e:	2300      	movs	r3, #0
 8014580:	6123      	str	r3, [r4, #16]
 8014582:	4615      	mov	r5, r2
 8014584:	e7ba      	b.n	80144fc <_printf_i+0x150>
 8014586:	682b      	ldr	r3, [r5, #0]
 8014588:	1d1a      	adds	r2, r3, #4
 801458a:	602a      	str	r2, [r5, #0]
 801458c:	681d      	ldr	r5, [r3, #0]
 801458e:	6862      	ldr	r2, [r4, #4]
 8014590:	2100      	movs	r1, #0
 8014592:	4628      	mov	r0, r5
 8014594:	f7eb fdfc 	bl	8000190 <memchr>
 8014598:	b108      	cbz	r0, 801459e <_printf_i+0x1f2>
 801459a:	1b40      	subs	r0, r0, r5
 801459c:	6060      	str	r0, [r4, #4]
 801459e:	6863      	ldr	r3, [r4, #4]
 80145a0:	6123      	str	r3, [r4, #16]
 80145a2:	2300      	movs	r3, #0
 80145a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145a8:	e7a8      	b.n	80144fc <_printf_i+0x150>
 80145aa:	6923      	ldr	r3, [r4, #16]
 80145ac:	462a      	mov	r2, r5
 80145ae:	4649      	mov	r1, r9
 80145b0:	4640      	mov	r0, r8
 80145b2:	47d0      	blx	sl
 80145b4:	3001      	adds	r0, #1
 80145b6:	d0ab      	beq.n	8014510 <_printf_i+0x164>
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	079b      	lsls	r3, r3, #30
 80145bc:	d413      	bmi.n	80145e6 <_printf_i+0x23a>
 80145be:	68e0      	ldr	r0, [r4, #12]
 80145c0:	9b03      	ldr	r3, [sp, #12]
 80145c2:	4298      	cmp	r0, r3
 80145c4:	bfb8      	it	lt
 80145c6:	4618      	movlt	r0, r3
 80145c8:	e7a4      	b.n	8014514 <_printf_i+0x168>
 80145ca:	2301      	movs	r3, #1
 80145cc:	4632      	mov	r2, r6
 80145ce:	4649      	mov	r1, r9
 80145d0:	4640      	mov	r0, r8
 80145d2:	47d0      	blx	sl
 80145d4:	3001      	adds	r0, #1
 80145d6:	d09b      	beq.n	8014510 <_printf_i+0x164>
 80145d8:	3501      	adds	r5, #1
 80145da:	68e3      	ldr	r3, [r4, #12]
 80145dc:	9903      	ldr	r1, [sp, #12]
 80145de:	1a5b      	subs	r3, r3, r1
 80145e0:	42ab      	cmp	r3, r5
 80145e2:	dcf2      	bgt.n	80145ca <_printf_i+0x21e>
 80145e4:	e7eb      	b.n	80145be <_printf_i+0x212>
 80145e6:	2500      	movs	r5, #0
 80145e8:	f104 0619 	add.w	r6, r4, #25
 80145ec:	e7f5      	b.n	80145da <_printf_i+0x22e>
 80145ee:	bf00      	nop
 80145f0:	08019268 	.word	0x08019268
 80145f4:	08019279 	.word	0x08019279

080145f8 <rand>:
 80145f8:	4b16      	ldr	r3, [pc, #88]	; (8014654 <rand+0x5c>)
 80145fa:	b510      	push	{r4, lr}
 80145fc:	681c      	ldr	r4, [r3, #0]
 80145fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014600:	b9b3      	cbnz	r3, 8014630 <rand+0x38>
 8014602:	2018      	movs	r0, #24
 8014604:	f7ff f816 	bl	8013634 <malloc>
 8014608:	63a0      	str	r0, [r4, #56]	; 0x38
 801460a:	b928      	cbnz	r0, 8014618 <rand+0x20>
 801460c:	4602      	mov	r2, r0
 801460e:	4b12      	ldr	r3, [pc, #72]	; (8014658 <rand+0x60>)
 8014610:	4812      	ldr	r0, [pc, #72]	; (801465c <rand+0x64>)
 8014612:	214e      	movs	r1, #78	; 0x4e
 8014614:	f000 fa9a 	bl	8014b4c <__assert_func>
 8014618:	4a11      	ldr	r2, [pc, #68]	; (8014660 <rand+0x68>)
 801461a:	4b12      	ldr	r3, [pc, #72]	; (8014664 <rand+0x6c>)
 801461c:	e9c0 2300 	strd	r2, r3, [r0]
 8014620:	4b11      	ldr	r3, [pc, #68]	; (8014668 <rand+0x70>)
 8014622:	6083      	str	r3, [r0, #8]
 8014624:	230b      	movs	r3, #11
 8014626:	8183      	strh	r3, [r0, #12]
 8014628:	2201      	movs	r2, #1
 801462a:	2300      	movs	r3, #0
 801462c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014630:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8014632:	4a0e      	ldr	r2, [pc, #56]	; (801466c <rand+0x74>)
 8014634:	6920      	ldr	r0, [r4, #16]
 8014636:	6963      	ldr	r3, [r4, #20]
 8014638:	490d      	ldr	r1, [pc, #52]	; (8014670 <rand+0x78>)
 801463a:	4342      	muls	r2, r0
 801463c:	fb01 2203 	mla	r2, r1, r3, r2
 8014640:	fba0 0101 	umull	r0, r1, r0, r1
 8014644:	1c43      	adds	r3, r0, #1
 8014646:	eb42 0001 	adc.w	r0, r2, r1
 801464a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801464e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014652:	bd10      	pop	{r4, pc}
 8014654:	20000020 	.word	0x20000020
 8014658:	08019124 	.word	0x08019124
 801465c:	0801928a 	.word	0x0801928a
 8014660:	abcd330e 	.word	0xabcd330e
 8014664:	e66d1234 	.word	0xe66d1234
 8014668:	0005deec 	.word	0x0005deec
 801466c:	5851f42d 	.word	0x5851f42d
 8014670:	4c957f2d 	.word	0x4c957f2d

08014674 <_sbrk_r>:
 8014674:	b538      	push	{r3, r4, r5, lr}
 8014676:	4d06      	ldr	r5, [pc, #24]	; (8014690 <_sbrk_r+0x1c>)
 8014678:	2300      	movs	r3, #0
 801467a:	4604      	mov	r4, r0
 801467c:	4608      	mov	r0, r1
 801467e:	602b      	str	r3, [r5, #0]
 8014680:	f7f6 fe7a 	bl	800b378 <_sbrk>
 8014684:	1c43      	adds	r3, r0, #1
 8014686:	d102      	bne.n	801468e <_sbrk_r+0x1a>
 8014688:	682b      	ldr	r3, [r5, #0]
 801468a:	b103      	cbz	r3, 801468e <_sbrk_r+0x1a>
 801468c:	6023      	str	r3, [r4, #0]
 801468e:	bd38      	pop	{r3, r4, r5, pc}
 8014690:	2000a7bc 	.word	0x2000a7bc

08014694 <siprintf>:
 8014694:	b40e      	push	{r1, r2, r3}
 8014696:	b500      	push	{lr}
 8014698:	b09c      	sub	sp, #112	; 0x70
 801469a:	ab1d      	add	r3, sp, #116	; 0x74
 801469c:	9002      	str	r0, [sp, #8]
 801469e:	9006      	str	r0, [sp, #24]
 80146a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80146a4:	4809      	ldr	r0, [pc, #36]	; (80146cc <siprintf+0x38>)
 80146a6:	9107      	str	r1, [sp, #28]
 80146a8:	9104      	str	r1, [sp, #16]
 80146aa:	4909      	ldr	r1, [pc, #36]	; (80146d0 <siprintf+0x3c>)
 80146ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80146b0:	9105      	str	r1, [sp, #20]
 80146b2:	6800      	ldr	r0, [r0, #0]
 80146b4:	9301      	str	r3, [sp, #4]
 80146b6:	a902      	add	r1, sp, #8
 80146b8:	f001 fe06 	bl	80162c8 <_svfiprintf_r>
 80146bc:	9b02      	ldr	r3, [sp, #8]
 80146be:	2200      	movs	r2, #0
 80146c0:	701a      	strb	r2, [r3, #0]
 80146c2:	b01c      	add	sp, #112	; 0x70
 80146c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80146c8:	b003      	add	sp, #12
 80146ca:	4770      	bx	lr
 80146cc:	20000020 	.word	0x20000020
 80146d0:	ffff0208 	.word	0xffff0208

080146d4 <__tzcalc_limits>:
 80146d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146d8:	4605      	mov	r5, r0
 80146da:	f001 f939 	bl	8015950 <__gettzinfo>
 80146de:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80146e2:	429d      	cmp	r5, r3
 80146e4:	f340 8099 	ble.w	801481a <__tzcalc_limits+0x146>
 80146e8:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 80146ec:	18ac      	adds	r4, r5, r2
 80146ee:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 80146f2:	f240 126d 	movw	r2, #365	; 0x16d
 80146f6:	10a4      	asrs	r4, r4, #2
 80146f8:	fb02 4403 	mla	r4, r2, r3, r4
 80146fc:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8014700:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8014704:	fb93 f3f2 	sdiv	r3, r3, r2
 8014708:	441c      	add	r4, r3
 801470a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 801470e:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8014712:	fb95 fcf3 	sdiv	ip, r5, r3
 8014716:	fb03 5c1c 	mls	ip, r3, ip, r5
 801471a:	186a      	adds	r2, r5, r1
 801471c:	fabc f68c 	clz	r6, ip
 8014720:	fbb2 f2f3 	udiv	r2, r2, r3
 8014724:	f005 0303 	and.w	r3, r5, #3
 8014728:	4414      	add	r4, r2
 801472a:	2264      	movs	r2, #100	; 0x64
 801472c:	6045      	str	r5, [r0, #4]
 801472e:	fb95 f7f2 	sdiv	r7, r5, r2
 8014732:	0976      	lsrs	r6, r6, #5
 8014734:	fb02 5717 	mls	r7, r2, r7, r5
 8014738:	4601      	mov	r1, r0
 801473a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	f04f 0a07 	mov.w	sl, #7
 8014744:	7a0d      	ldrb	r5, [r1, #8]
 8014746:	694b      	ldr	r3, [r1, #20]
 8014748:	2d4a      	cmp	r5, #74	; 0x4a
 801474a:	d12d      	bne.n	80147a8 <__tzcalc_limits+0xd4>
 801474c:	9a00      	ldr	r2, [sp, #0]
 801474e:	eb04 0e03 	add.w	lr, r4, r3
 8014752:	b902      	cbnz	r2, 8014756 <__tzcalc_limits+0x82>
 8014754:	b917      	cbnz	r7, 801475c <__tzcalc_limits+0x88>
 8014756:	f1bc 0f00 	cmp.w	ip, #0
 801475a:	d123      	bne.n	80147a4 <__tzcalc_limits+0xd0>
 801475c:	2b3b      	cmp	r3, #59	; 0x3b
 801475e:	bfd4      	ite	le
 8014760:	2300      	movle	r3, #0
 8014762:	2301      	movgt	r3, #1
 8014764:	4473      	add	r3, lr
 8014766:	3b01      	subs	r3, #1
 8014768:	698d      	ldr	r5, [r1, #24]
 801476a:	4a2d      	ldr	r2, [pc, #180]	; (8014820 <__tzcalc_limits+0x14c>)
 801476c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8014770:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8014774:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8014776:	18ed      	adds	r5, r5, r3
 8014778:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 801477c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8014780:	3128      	adds	r1, #40	; 0x28
 8014782:	458b      	cmp	fp, r1
 8014784:	d1de      	bne.n	8014744 <__tzcalc_limits+0x70>
 8014786:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 801478a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 801478e:	428c      	cmp	r4, r1
 8014790:	eb72 0303 	sbcs.w	r3, r2, r3
 8014794:	bfb4      	ite	lt
 8014796:	2301      	movlt	r3, #1
 8014798:	2300      	movge	r3, #0
 801479a:	6003      	str	r3, [r0, #0]
 801479c:	2001      	movs	r0, #1
 801479e:	b003      	add	sp, #12
 80147a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147a4:	2300      	movs	r3, #0
 80147a6:	e7dd      	b.n	8014764 <__tzcalc_limits+0x90>
 80147a8:	2d44      	cmp	r5, #68	; 0x44
 80147aa:	d101      	bne.n	80147b0 <__tzcalc_limits+0xdc>
 80147ac:	4423      	add	r3, r4
 80147ae:	e7db      	b.n	8014768 <__tzcalc_limits+0x94>
 80147b0:	9a00      	ldr	r2, [sp, #0]
 80147b2:	bb62      	cbnz	r2, 801480e <__tzcalc_limits+0x13a>
 80147b4:	2f00      	cmp	r7, #0
 80147b6:	bf0c      	ite	eq
 80147b8:	4635      	moveq	r5, r6
 80147ba:	2501      	movne	r5, #1
 80147bc:	68ca      	ldr	r2, [r1, #12]
 80147be:	9201      	str	r2, [sp, #4]
 80147c0:	4a18      	ldr	r2, [pc, #96]	; (8014824 <__tzcalc_limits+0x150>)
 80147c2:	f04f 0930 	mov.w	r9, #48	; 0x30
 80147c6:	fb09 2505 	mla	r5, r9, r5, r2
 80147ca:	46a6      	mov	lr, r4
 80147cc:	f04f 0800 	mov.w	r8, #0
 80147d0:	3d04      	subs	r5, #4
 80147d2:	9a01      	ldr	r2, [sp, #4]
 80147d4:	f108 0801 	add.w	r8, r8, #1
 80147d8:	4542      	cmp	r2, r8
 80147da:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80147de:	dc18      	bgt.n	8014812 <__tzcalc_limits+0x13e>
 80147e0:	f10e 0504 	add.w	r5, lr, #4
 80147e4:	fb95 f8fa 	sdiv	r8, r5, sl
 80147e8:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80147ec:	eba5 0808 	sub.w	r8, r5, r8
 80147f0:	ebb3 0808 	subs.w	r8, r3, r8
 80147f4:	690b      	ldr	r3, [r1, #16]
 80147f6:	f103 33ff 	add.w	r3, r3, #4294967295
 80147fa:	bf48      	it	mi
 80147fc:	f108 0807 	addmi.w	r8, r8, #7
 8014800:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8014804:	4443      	add	r3, r8
 8014806:	454b      	cmp	r3, r9
 8014808:	da05      	bge.n	8014816 <__tzcalc_limits+0x142>
 801480a:	4473      	add	r3, lr
 801480c:	e7ac      	b.n	8014768 <__tzcalc_limits+0x94>
 801480e:	4635      	mov	r5, r6
 8014810:	e7d4      	b.n	80147bc <__tzcalc_limits+0xe8>
 8014812:	44ce      	add	lr, r9
 8014814:	e7dd      	b.n	80147d2 <__tzcalc_limits+0xfe>
 8014816:	3b07      	subs	r3, #7
 8014818:	e7f5      	b.n	8014806 <__tzcalc_limits+0x132>
 801481a:	2000      	movs	r0, #0
 801481c:	e7bf      	b.n	801479e <__tzcalc_limits+0xca>
 801481e:	bf00      	nop
 8014820:	00015180 	.word	0x00015180
 8014824:	080191f8 	.word	0x080191f8

08014828 <__tz_lock>:
 8014828:	4801      	ldr	r0, [pc, #4]	; (8014830 <__tz_lock+0x8>)
 801482a:	f001 b946 	b.w	8015aba <__retarget_lock_acquire>
 801482e:	bf00      	nop
 8014830:	2000a7b8 	.word	0x2000a7b8

08014834 <__tz_unlock>:
 8014834:	4801      	ldr	r0, [pc, #4]	; (801483c <__tz_unlock+0x8>)
 8014836:	f001 b942 	b.w	8015abe <__retarget_lock_release>
 801483a:	bf00      	nop
 801483c:	2000a7b8 	.word	0x2000a7b8

08014840 <_tzset_unlocked>:
 8014840:	4b01      	ldr	r3, [pc, #4]	; (8014848 <_tzset_unlocked+0x8>)
 8014842:	6818      	ldr	r0, [r3, #0]
 8014844:	f000 b802 	b.w	801484c <_tzset_unlocked_r>
 8014848:	20000020 	.word	0x20000020

0801484c <_tzset_unlocked_r>:
 801484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014850:	b08d      	sub	sp, #52	; 0x34
 8014852:	4607      	mov	r7, r0
 8014854:	f001 f87c 	bl	8015950 <__gettzinfo>
 8014858:	49b0      	ldr	r1, [pc, #704]	; (8014b1c <_tzset_unlocked_r+0x2d0>)
 801485a:	4eb1      	ldr	r6, [pc, #708]	; (8014b20 <_tzset_unlocked_r+0x2d4>)
 801485c:	4605      	mov	r5, r0
 801485e:	4638      	mov	r0, r7
 8014860:	f001 f86e 	bl	8015940 <_getenv_r>
 8014864:	4604      	mov	r4, r0
 8014866:	b970      	cbnz	r0, 8014886 <_tzset_unlocked_r+0x3a>
 8014868:	4bae      	ldr	r3, [pc, #696]	; (8014b24 <_tzset_unlocked_r+0x2d8>)
 801486a:	4aaf      	ldr	r2, [pc, #700]	; (8014b28 <_tzset_unlocked_r+0x2dc>)
 801486c:	6018      	str	r0, [r3, #0]
 801486e:	4baf      	ldr	r3, [pc, #700]	; (8014b2c <_tzset_unlocked_r+0x2e0>)
 8014870:	6018      	str	r0, [r3, #0]
 8014872:	4baf      	ldr	r3, [pc, #700]	; (8014b30 <_tzset_unlocked_r+0x2e4>)
 8014874:	6830      	ldr	r0, [r6, #0]
 8014876:	e9c3 2200 	strd	r2, r2, [r3]
 801487a:	f7fe fee3 	bl	8013644 <free>
 801487e:	6034      	str	r4, [r6, #0]
 8014880:	b00d      	add	sp, #52	; 0x34
 8014882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014886:	6831      	ldr	r1, [r6, #0]
 8014888:	2900      	cmp	r1, #0
 801488a:	d162      	bne.n	8014952 <_tzset_unlocked_r+0x106>
 801488c:	6830      	ldr	r0, [r6, #0]
 801488e:	f7fe fed9 	bl	8013644 <free>
 8014892:	4620      	mov	r0, r4
 8014894:	f7eb fc74 	bl	8000180 <strlen>
 8014898:	1c41      	adds	r1, r0, #1
 801489a:	4638      	mov	r0, r7
 801489c:	f7ff f9ce 	bl	8013c3c <_malloc_r>
 80148a0:	6030      	str	r0, [r6, #0]
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d15a      	bne.n	801495c <_tzset_unlocked_r+0x110>
 80148a6:	7823      	ldrb	r3, [r4, #0]
 80148a8:	4aa2      	ldr	r2, [pc, #648]	; (8014b34 <_tzset_unlocked_r+0x2e8>)
 80148aa:	49a3      	ldr	r1, [pc, #652]	; (8014b38 <_tzset_unlocked_r+0x2ec>)
 80148ac:	2b3a      	cmp	r3, #58	; 0x3a
 80148ae:	bf08      	it	eq
 80148b0:	3401      	addeq	r4, #1
 80148b2:	ae0a      	add	r6, sp, #40	; 0x28
 80148b4:	4633      	mov	r3, r6
 80148b6:	4620      	mov	r0, r4
 80148b8:	f001 ff60 	bl	801677c <siscanf>
 80148bc:	2800      	cmp	r0, #0
 80148be:	dddf      	ble.n	8014880 <_tzset_unlocked_r+0x34>
 80148c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80148c2:	18e7      	adds	r7, r4, r3
 80148c4:	5ce3      	ldrb	r3, [r4, r3]
 80148c6:	2b2d      	cmp	r3, #45	; 0x2d
 80148c8:	d14c      	bne.n	8014964 <_tzset_unlocked_r+0x118>
 80148ca:	3701      	adds	r7, #1
 80148cc:	f04f 38ff 	mov.w	r8, #4294967295
 80148d0:	f10d 0a20 	add.w	sl, sp, #32
 80148d4:	f10d 0b1e 	add.w	fp, sp, #30
 80148d8:	2400      	movs	r4, #0
 80148da:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 80148de:	4997      	ldr	r1, [pc, #604]	; (8014b3c <_tzset_unlocked_r+0x2f0>)
 80148e0:	9603      	str	r6, [sp, #12]
 80148e2:	f8cd b000 	str.w	fp, [sp]
 80148e6:	4633      	mov	r3, r6
 80148e8:	aa07      	add	r2, sp, #28
 80148ea:	4638      	mov	r0, r7
 80148ec:	f8ad 401e 	strh.w	r4, [sp, #30]
 80148f0:	f8ad 4020 	strh.w	r4, [sp, #32]
 80148f4:	f001 ff42 	bl	801677c <siscanf>
 80148f8:	42a0      	cmp	r0, r4
 80148fa:	ddc1      	ble.n	8014880 <_tzset_unlocked_r+0x34>
 80148fc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014900:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014904:	f8df 9240 	ldr.w	r9, [pc, #576]	; 8014b48 <_tzset_unlocked_r+0x2fc>
 8014908:	213c      	movs	r1, #60	; 0x3c
 801490a:	fb01 3302 	mla	r3, r1, r2, r3
 801490e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014912:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014916:	fb01 3302 	mla	r3, r1, r2, r3
 801491a:	fb08 f303 	mul.w	r3, r8, r3
 801491e:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8014b30 <_tzset_unlocked_r+0x2e4>
 8014922:	62ab      	str	r3, [r5, #40]	; 0x28
 8014924:	4b83      	ldr	r3, [pc, #524]	; (8014b34 <_tzset_unlocked_r+0x2e8>)
 8014926:	f8c8 3000 	str.w	r3, [r8]
 801492a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801492c:	4982      	ldr	r1, [pc, #520]	; (8014b38 <_tzset_unlocked_r+0x2ec>)
 801492e:	441f      	add	r7, r3
 8014930:	464a      	mov	r2, r9
 8014932:	4633      	mov	r3, r6
 8014934:	4638      	mov	r0, r7
 8014936:	f001 ff21 	bl	801677c <siscanf>
 801493a:	42a0      	cmp	r0, r4
 801493c:	dc18      	bgt.n	8014970 <_tzset_unlocked_r+0x124>
 801493e:	f8d8 3000 	ldr.w	r3, [r8]
 8014942:	f8c8 3004 	str.w	r3, [r8, #4]
 8014946:	4b77      	ldr	r3, [pc, #476]	; (8014b24 <_tzset_unlocked_r+0x2d8>)
 8014948:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801494a:	601a      	str	r2, [r3, #0]
 801494c:	4b77      	ldr	r3, [pc, #476]	; (8014b2c <_tzset_unlocked_r+0x2e0>)
 801494e:	601c      	str	r4, [r3, #0]
 8014950:	e796      	b.n	8014880 <_tzset_unlocked_r+0x34>
 8014952:	f7eb fc6d 	bl	8000230 <strcmp>
 8014956:	2800      	cmp	r0, #0
 8014958:	d198      	bne.n	801488c <_tzset_unlocked_r+0x40>
 801495a:	e791      	b.n	8014880 <_tzset_unlocked_r+0x34>
 801495c:	4621      	mov	r1, r4
 801495e:	f001 ff7e 	bl	801685e <strcpy>
 8014962:	e7a0      	b.n	80148a6 <_tzset_unlocked_r+0x5a>
 8014964:	2b2b      	cmp	r3, #43	; 0x2b
 8014966:	bf08      	it	eq
 8014968:	3701      	addeq	r7, #1
 801496a:	f04f 0801 	mov.w	r8, #1
 801496e:	e7af      	b.n	80148d0 <_tzset_unlocked_r+0x84>
 8014970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014972:	f8c8 9004 	str.w	r9, [r8, #4]
 8014976:	18fc      	adds	r4, r7, r3
 8014978:	5cfb      	ldrb	r3, [r7, r3]
 801497a:	2b2d      	cmp	r3, #45	; 0x2d
 801497c:	f040 808b 	bne.w	8014a96 <_tzset_unlocked_r+0x24a>
 8014980:	3401      	adds	r4, #1
 8014982:	f04f 37ff 	mov.w	r7, #4294967295
 8014986:	2300      	movs	r3, #0
 8014988:	f8ad 301c 	strh.w	r3, [sp, #28]
 801498c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014990:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014994:	930a      	str	r3, [sp, #40]	; 0x28
 8014996:	e9cd a602 	strd	sl, r6, [sp, #8]
 801499a:	e9cd b600 	strd	fp, r6, [sp]
 801499e:	4967      	ldr	r1, [pc, #412]	; (8014b3c <_tzset_unlocked_r+0x2f0>)
 80149a0:	4633      	mov	r3, r6
 80149a2:	aa07      	add	r2, sp, #28
 80149a4:	4620      	mov	r0, r4
 80149a6:	f001 fee9 	bl	801677c <siscanf>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	dc78      	bgt.n	8014aa0 <_tzset_unlocked_r+0x254>
 80149ae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80149b0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80149b4:	652b      	str	r3, [r5, #80]	; 0x50
 80149b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80149b8:	462f      	mov	r7, r5
 80149ba:	441c      	add	r4, r3
 80149bc:	f04f 0900 	mov.w	r9, #0
 80149c0:	7823      	ldrb	r3, [r4, #0]
 80149c2:	2b2c      	cmp	r3, #44	; 0x2c
 80149c4:	bf08      	it	eq
 80149c6:	3401      	addeq	r4, #1
 80149c8:	f894 8000 	ldrb.w	r8, [r4]
 80149cc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80149d0:	d178      	bne.n	8014ac4 <_tzset_unlocked_r+0x278>
 80149d2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80149d6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80149da:	ab09      	add	r3, sp, #36	; 0x24
 80149dc:	9300      	str	r3, [sp, #0]
 80149de:	4958      	ldr	r1, [pc, #352]	; (8014b40 <_tzset_unlocked_r+0x2f4>)
 80149e0:	9603      	str	r6, [sp, #12]
 80149e2:	4633      	mov	r3, r6
 80149e4:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80149e8:	4620      	mov	r0, r4
 80149ea:	f001 fec7 	bl	801677c <siscanf>
 80149ee:	2803      	cmp	r0, #3
 80149f0:	f47f af46 	bne.w	8014880 <_tzset_unlocked_r+0x34>
 80149f4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80149f8:	1e4b      	subs	r3, r1, #1
 80149fa:	2b0b      	cmp	r3, #11
 80149fc:	f63f af40 	bhi.w	8014880 <_tzset_unlocked_r+0x34>
 8014a00:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8014a04:	1e53      	subs	r3, r2, #1
 8014a06:	2b04      	cmp	r3, #4
 8014a08:	f63f af3a 	bhi.w	8014880 <_tzset_unlocked_r+0x34>
 8014a0c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8014a10:	2b06      	cmp	r3, #6
 8014a12:	f63f af35 	bhi.w	8014880 <_tzset_unlocked_r+0x34>
 8014a16:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8014a1a:	f887 8008 	strb.w	r8, [r7, #8]
 8014a1e:	617b      	str	r3, [r7, #20]
 8014a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014a22:	eb04 0803 	add.w	r8, r4, r3
 8014a26:	2302      	movs	r3, #2
 8014a28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	f8ad 301e 	strh.w	r3, [sp, #30]
 8014a32:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014a36:	930a      	str	r3, [sp, #40]	; 0x28
 8014a38:	f898 3000 	ldrb.w	r3, [r8]
 8014a3c:	2b2f      	cmp	r3, #47	; 0x2f
 8014a3e:	d109      	bne.n	8014a54 <_tzset_unlocked_r+0x208>
 8014a40:	e9cd a602 	strd	sl, r6, [sp, #8]
 8014a44:	e9cd b600 	strd	fp, r6, [sp]
 8014a48:	493e      	ldr	r1, [pc, #248]	; (8014b44 <_tzset_unlocked_r+0x2f8>)
 8014a4a:	4633      	mov	r3, r6
 8014a4c:	aa07      	add	r2, sp, #28
 8014a4e:	4640      	mov	r0, r8
 8014a50:	f001 fe94 	bl	801677c <siscanf>
 8014a54:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014a58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014a5c:	213c      	movs	r1, #60	; 0x3c
 8014a5e:	fb01 3302 	mla	r3, r1, r2, r3
 8014a62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014a66:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014a6a:	fb01 3302 	mla	r3, r1, r2, r3
 8014a6e:	61bb      	str	r3, [r7, #24]
 8014a70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8014a72:	3728      	adds	r7, #40	; 0x28
 8014a74:	4444      	add	r4, r8
 8014a76:	f1b9 0f00 	cmp.w	r9, #0
 8014a7a:	d020      	beq.n	8014abe <_tzset_unlocked_r+0x272>
 8014a7c:	6868      	ldr	r0, [r5, #4]
 8014a7e:	f7ff fe29 	bl	80146d4 <__tzcalc_limits>
 8014a82:	4b28      	ldr	r3, [pc, #160]	; (8014b24 <_tzset_unlocked_r+0x2d8>)
 8014a84:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8014a86:	601a      	str	r2, [r3, #0]
 8014a88:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8014a8a:	1a9b      	subs	r3, r3, r2
 8014a8c:	4a27      	ldr	r2, [pc, #156]	; (8014b2c <_tzset_unlocked_r+0x2e0>)
 8014a8e:	bf18      	it	ne
 8014a90:	2301      	movne	r3, #1
 8014a92:	6013      	str	r3, [r2, #0]
 8014a94:	e6f4      	b.n	8014880 <_tzset_unlocked_r+0x34>
 8014a96:	2b2b      	cmp	r3, #43	; 0x2b
 8014a98:	bf08      	it	eq
 8014a9a:	3401      	addeq	r4, #1
 8014a9c:	2701      	movs	r7, #1
 8014a9e:	e772      	b.n	8014986 <_tzset_unlocked_r+0x13a>
 8014aa0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014aa4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014aa8:	213c      	movs	r1, #60	; 0x3c
 8014aaa:	fb01 3302 	mla	r3, r1, r2, r3
 8014aae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8014ab2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8014ab6:	fb01 3302 	mla	r3, r1, r2, r3
 8014aba:	437b      	muls	r3, r7
 8014abc:	e77a      	b.n	80149b4 <_tzset_unlocked_r+0x168>
 8014abe:	f04f 0901 	mov.w	r9, #1
 8014ac2:	e77d      	b.n	80149c0 <_tzset_unlocked_r+0x174>
 8014ac4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8014ac8:	bf06      	itte	eq
 8014aca:	3401      	addeq	r4, #1
 8014acc:	4643      	moveq	r3, r8
 8014ace:	2344      	movne	r3, #68	; 0x44
 8014ad0:	220a      	movs	r2, #10
 8014ad2:	a90b      	add	r1, sp, #44	; 0x2c
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	9305      	str	r3, [sp, #20]
 8014ad8:	f001 ff52 	bl	8016980 <strtoul>
 8014adc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8014ae0:	9b05      	ldr	r3, [sp, #20]
 8014ae2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8014ae6:	45a0      	cmp	r8, r4
 8014ae8:	d114      	bne.n	8014b14 <_tzset_unlocked_r+0x2c8>
 8014aea:	234d      	movs	r3, #77	; 0x4d
 8014aec:	f1b9 0f00 	cmp.w	r9, #0
 8014af0:	d107      	bne.n	8014b02 <_tzset_unlocked_r+0x2b6>
 8014af2:	722b      	strb	r3, [r5, #8]
 8014af4:	2103      	movs	r1, #3
 8014af6:	2302      	movs	r3, #2
 8014af8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8014afc:	f8c5 9014 	str.w	r9, [r5, #20]
 8014b00:	e791      	b.n	8014a26 <_tzset_unlocked_r+0x1da>
 8014b02:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 8014b06:	220b      	movs	r2, #11
 8014b08:	2301      	movs	r3, #1
 8014b0a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8014b0e:	2300      	movs	r3, #0
 8014b10:	63eb      	str	r3, [r5, #60]	; 0x3c
 8014b12:	e788      	b.n	8014a26 <_tzset_unlocked_r+0x1da>
 8014b14:	b280      	uxth	r0, r0
 8014b16:	723b      	strb	r3, [r7, #8]
 8014b18:	6178      	str	r0, [r7, #20]
 8014b1a:	e784      	b.n	8014a26 <_tzset_unlocked_r+0x1da>
 8014b1c:	080192e5 	.word	0x080192e5
 8014b20:	2000a7a8 	.word	0x2000a7a8
 8014b24:	2000a7b0 	.word	0x2000a7b0
 8014b28:	080192e8 	.word	0x080192e8
 8014b2c:	2000a7ac 	.word	0x2000a7ac
 8014b30:	20000084 	.word	0x20000084
 8014b34:	2000a79b 	.word	0x2000a79b
 8014b38:	080192ec 	.word	0x080192ec
 8014b3c:	0801930f 	.word	0x0801930f
 8014b40:	080192fb 	.word	0x080192fb
 8014b44:	0801930e 	.word	0x0801930e
 8014b48:	2000a790 	.word	0x2000a790

08014b4c <__assert_func>:
 8014b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014b4e:	4614      	mov	r4, r2
 8014b50:	461a      	mov	r2, r3
 8014b52:	4b09      	ldr	r3, [pc, #36]	; (8014b78 <__assert_func+0x2c>)
 8014b54:	681b      	ldr	r3, [r3, #0]
 8014b56:	4605      	mov	r5, r0
 8014b58:	68d8      	ldr	r0, [r3, #12]
 8014b5a:	b14c      	cbz	r4, 8014b70 <__assert_func+0x24>
 8014b5c:	4b07      	ldr	r3, [pc, #28]	; (8014b7c <__assert_func+0x30>)
 8014b5e:	9100      	str	r1, [sp, #0]
 8014b60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014b64:	4906      	ldr	r1, [pc, #24]	; (8014b80 <__assert_func+0x34>)
 8014b66:	462b      	mov	r3, r5
 8014b68:	f000 fe9c 	bl	80158a4 <fiprintf>
 8014b6c:	f001 ffe4 	bl	8016b38 <abort>
 8014b70:	4b04      	ldr	r3, [pc, #16]	; (8014b84 <__assert_func+0x38>)
 8014b72:	461c      	mov	r4, r3
 8014b74:	e7f3      	b.n	8014b5e <__assert_func+0x12>
 8014b76:	bf00      	nop
 8014b78:	20000020 	.word	0x20000020
 8014b7c:	08019321 	.word	0x08019321
 8014b80:	0801932e 	.word	0x0801932e
 8014b84:	0801935c 	.word	0x0801935c

08014b88 <div>:
 8014b88:	2900      	cmp	r1, #0
 8014b8a:	b510      	push	{r4, lr}
 8014b8c:	fb91 f4f2 	sdiv	r4, r1, r2
 8014b90:	fb02 1314 	mls	r3, r2, r4, r1
 8014b94:	db06      	blt.n	8014ba4 <div+0x1c>
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	da01      	bge.n	8014b9e <div+0x16>
 8014b9a:	3401      	adds	r4, #1
 8014b9c:	1a9b      	subs	r3, r3, r2
 8014b9e:	e9c0 4300 	strd	r4, r3, [r0]
 8014ba2:	bd10      	pop	{r4, pc}
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	bfc4      	itt	gt
 8014ba8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8014bac:	189b      	addgt	r3, r3, r2
 8014bae:	e7f6      	b.n	8014b9e <div+0x16>

08014bb0 <quorem>:
 8014bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb4:	6903      	ldr	r3, [r0, #16]
 8014bb6:	690c      	ldr	r4, [r1, #16]
 8014bb8:	42a3      	cmp	r3, r4
 8014bba:	4607      	mov	r7, r0
 8014bbc:	f2c0 8081 	blt.w	8014cc2 <quorem+0x112>
 8014bc0:	3c01      	subs	r4, #1
 8014bc2:	f101 0814 	add.w	r8, r1, #20
 8014bc6:	f100 0514 	add.w	r5, r0, #20
 8014bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014bce:	9301      	str	r3, [sp, #4]
 8014bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8014be8:	d331      	bcc.n	8014c4e <quorem+0x9e>
 8014bea:	f04f 0e00 	mov.w	lr, #0
 8014bee:	4640      	mov	r0, r8
 8014bf0:	46ac      	mov	ip, r5
 8014bf2:	46f2      	mov	sl, lr
 8014bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8014bf8:	b293      	uxth	r3, r2
 8014bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8014bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	ebaa 0303 	sub.w	r3, sl, r3
 8014c08:	f8dc a000 	ldr.w	sl, [ip]
 8014c0c:	0c12      	lsrs	r2, r2, #16
 8014c0e:	fa13 f38a 	uxtah	r3, r3, sl
 8014c12:	fb06 e202 	mla	r2, r6, r2, lr
 8014c16:	9300      	str	r3, [sp, #0]
 8014c18:	9b00      	ldr	r3, [sp, #0]
 8014c1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014c1e:	b292      	uxth	r2, r2
 8014c20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c28:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c2c:	4581      	cmp	r9, r0
 8014c2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c32:	f84c 3b04 	str.w	r3, [ip], #4
 8014c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014c3a:	d2db      	bcs.n	8014bf4 <quorem+0x44>
 8014c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8014c40:	b92b      	cbnz	r3, 8014c4e <quorem+0x9e>
 8014c42:	9b01      	ldr	r3, [sp, #4]
 8014c44:	3b04      	subs	r3, #4
 8014c46:	429d      	cmp	r5, r3
 8014c48:	461a      	mov	r2, r3
 8014c4a:	d32e      	bcc.n	8014caa <quorem+0xfa>
 8014c4c:	613c      	str	r4, [r7, #16]
 8014c4e:	4638      	mov	r0, r7
 8014c50:	f001 f9c6 	bl	8015fe0 <__mcmp>
 8014c54:	2800      	cmp	r0, #0
 8014c56:	db24      	blt.n	8014ca2 <quorem+0xf2>
 8014c58:	3601      	adds	r6, #1
 8014c5a:	4628      	mov	r0, r5
 8014c5c:	f04f 0c00 	mov.w	ip, #0
 8014c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8014c64:	f8d0 e000 	ldr.w	lr, [r0]
 8014c68:	b293      	uxth	r3, r2
 8014c6a:	ebac 0303 	sub.w	r3, ip, r3
 8014c6e:	0c12      	lsrs	r2, r2, #16
 8014c70:	fa13 f38e 	uxtah	r3, r3, lr
 8014c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c7c:	b29b      	uxth	r3, r3
 8014c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c82:	45c1      	cmp	r9, r8
 8014c84:	f840 3b04 	str.w	r3, [r0], #4
 8014c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014c8c:	d2e8      	bcs.n	8014c60 <quorem+0xb0>
 8014c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014c96:	b922      	cbnz	r2, 8014ca2 <quorem+0xf2>
 8014c98:	3b04      	subs	r3, #4
 8014c9a:	429d      	cmp	r5, r3
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	d30a      	bcc.n	8014cb6 <quorem+0x106>
 8014ca0:	613c      	str	r4, [r7, #16]
 8014ca2:	4630      	mov	r0, r6
 8014ca4:	b003      	add	sp, #12
 8014ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014caa:	6812      	ldr	r2, [r2, #0]
 8014cac:	3b04      	subs	r3, #4
 8014cae:	2a00      	cmp	r2, #0
 8014cb0:	d1cc      	bne.n	8014c4c <quorem+0x9c>
 8014cb2:	3c01      	subs	r4, #1
 8014cb4:	e7c7      	b.n	8014c46 <quorem+0x96>
 8014cb6:	6812      	ldr	r2, [r2, #0]
 8014cb8:	3b04      	subs	r3, #4
 8014cba:	2a00      	cmp	r2, #0
 8014cbc:	d1f0      	bne.n	8014ca0 <quorem+0xf0>
 8014cbe:	3c01      	subs	r4, #1
 8014cc0:	e7eb      	b.n	8014c9a <quorem+0xea>
 8014cc2:	2000      	movs	r0, #0
 8014cc4:	e7ee      	b.n	8014ca4 <quorem+0xf4>
	...

08014cc8 <_dtoa_r>:
 8014cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ccc:	ed2d 8b04 	vpush	{d8-d9}
 8014cd0:	ec57 6b10 	vmov	r6, r7, d0
 8014cd4:	b093      	sub	sp, #76	; 0x4c
 8014cd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014cd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014cdc:	9106      	str	r1, [sp, #24]
 8014cde:	ee10 aa10 	vmov	sl, s0
 8014ce2:	4604      	mov	r4, r0
 8014ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8014ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8014ce8:	46bb      	mov	fp, r7
 8014cea:	b975      	cbnz	r5, 8014d0a <_dtoa_r+0x42>
 8014cec:	2010      	movs	r0, #16
 8014cee:	f7fe fca1 	bl	8013634 <malloc>
 8014cf2:	4602      	mov	r2, r0
 8014cf4:	6260      	str	r0, [r4, #36]	; 0x24
 8014cf6:	b920      	cbnz	r0, 8014d02 <_dtoa_r+0x3a>
 8014cf8:	4ba7      	ldr	r3, [pc, #668]	; (8014f98 <_dtoa_r+0x2d0>)
 8014cfa:	21ea      	movs	r1, #234	; 0xea
 8014cfc:	48a7      	ldr	r0, [pc, #668]	; (8014f9c <_dtoa_r+0x2d4>)
 8014cfe:	f7ff ff25 	bl	8014b4c <__assert_func>
 8014d02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014d06:	6005      	str	r5, [r0, #0]
 8014d08:	60c5      	str	r5, [r0, #12]
 8014d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d0c:	6819      	ldr	r1, [r3, #0]
 8014d0e:	b151      	cbz	r1, 8014d26 <_dtoa_r+0x5e>
 8014d10:	685a      	ldr	r2, [r3, #4]
 8014d12:	604a      	str	r2, [r1, #4]
 8014d14:	2301      	movs	r3, #1
 8014d16:	4093      	lsls	r3, r2
 8014d18:	608b      	str	r3, [r1, #8]
 8014d1a:	4620      	mov	r0, r4
 8014d1c:	f000 ff1e 	bl	8015b5c <_Bfree>
 8014d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d22:	2200      	movs	r2, #0
 8014d24:	601a      	str	r2, [r3, #0]
 8014d26:	1e3b      	subs	r3, r7, #0
 8014d28:	bfaa      	itet	ge
 8014d2a:	2300      	movge	r3, #0
 8014d2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014d30:	f8c8 3000 	strge.w	r3, [r8]
 8014d34:	4b9a      	ldr	r3, [pc, #616]	; (8014fa0 <_dtoa_r+0x2d8>)
 8014d36:	bfbc      	itt	lt
 8014d38:	2201      	movlt	r2, #1
 8014d3a:	f8c8 2000 	strlt.w	r2, [r8]
 8014d3e:	ea33 030b 	bics.w	r3, r3, fp
 8014d42:	d11b      	bne.n	8014d7c <_dtoa_r+0xb4>
 8014d44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d46:	f242 730f 	movw	r3, #9999	; 0x270f
 8014d4a:	6013      	str	r3, [r2, #0]
 8014d4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014d50:	4333      	orrs	r3, r6
 8014d52:	f000 8592 	beq.w	801587a <_dtoa_r+0xbb2>
 8014d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d58:	b963      	cbnz	r3, 8014d74 <_dtoa_r+0xac>
 8014d5a:	4b92      	ldr	r3, [pc, #584]	; (8014fa4 <_dtoa_r+0x2dc>)
 8014d5c:	e022      	b.n	8014da4 <_dtoa_r+0xdc>
 8014d5e:	4b92      	ldr	r3, [pc, #584]	; (8014fa8 <_dtoa_r+0x2e0>)
 8014d60:	9301      	str	r3, [sp, #4]
 8014d62:	3308      	adds	r3, #8
 8014d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d66:	6013      	str	r3, [r2, #0]
 8014d68:	9801      	ldr	r0, [sp, #4]
 8014d6a:	b013      	add	sp, #76	; 0x4c
 8014d6c:	ecbd 8b04 	vpop	{d8-d9}
 8014d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d74:	4b8b      	ldr	r3, [pc, #556]	; (8014fa4 <_dtoa_r+0x2dc>)
 8014d76:	9301      	str	r3, [sp, #4]
 8014d78:	3303      	adds	r3, #3
 8014d7a:	e7f3      	b.n	8014d64 <_dtoa_r+0x9c>
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	2300      	movs	r3, #0
 8014d80:	4650      	mov	r0, sl
 8014d82:	4659      	mov	r1, fp
 8014d84:	f7eb fe82 	bl	8000a8c <__aeabi_dcmpeq>
 8014d88:	ec4b ab19 	vmov	d9, sl, fp
 8014d8c:	4680      	mov	r8, r0
 8014d8e:	b158      	cbz	r0, 8014da8 <_dtoa_r+0xe0>
 8014d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014d92:	2301      	movs	r3, #1
 8014d94:	6013      	str	r3, [r2, #0]
 8014d96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	f000 856b 	beq.w	8015874 <_dtoa_r+0xbac>
 8014d9e:	4883      	ldr	r0, [pc, #524]	; (8014fac <_dtoa_r+0x2e4>)
 8014da0:	6018      	str	r0, [r3, #0]
 8014da2:	1e43      	subs	r3, r0, #1
 8014da4:	9301      	str	r3, [sp, #4]
 8014da6:	e7df      	b.n	8014d68 <_dtoa_r+0xa0>
 8014da8:	ec4b ab10 	vmov	d0, sl, fp
 8014dac:	aa10      	add	r2, sp, #64	; 0x40
 8014dae:	a911      	add	r1, sp, #68	; 0x44
 8014db0:	4620      	mov	r0, r4
 8014db2:	f001 f9bb 	bl	801612c <__d2b>
 8014db6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014dba:	ee08 0a10 	vmov	s16, r0
 8014dbe:	2d00      	cmp	r5, #0
 8014dc0:	f000 8084 	beq.w	8014ecc <_dtoa_r+0x204>
 8014dc4:	ee19 3a90 	vmov	r3, s19
 8014dc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014dcc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014dd0:	4656      	mov	r6, sl
 8014dd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014dd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014dda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014dde:	4b74      	ldr	r3, [pc, #464]	; (8014fb0 <_dtoa_r+0x2e8>)
 8014de0:	2200      	movs	r2, #0
 8014de2:	4630      	mov	r0, r6
 8014de4:	4639      	mov	r1, r7
 8014de6:	f7eb fa31 	bl	800024c <__aeabi_dsub>
 8014dea:	a365      	add	r3, pc, #404	; (adr r3, 8014f80 <_dtoa_r+0x2b8>)
 8014dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014df0:	f7eb fbe4 	bl	80005bc <__aeabi_dmul>
 8014df4:	a364      	add	r3, pc, #400	; (adr r3, 8014f88 <_dtoa_r+0x2c0>)
 8014df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfa:	f7eb fa29 	bl	8000250 <__adddf3>
 8014dfe:	4606      	mov	r6, r0
 8014e00:	4628      	mov	r0, r5
 8014e02:	460f      	mov	r7, r1
 8014e04:	f7eb fb70 	bl	80004e8 <__aeabi_i2d>
 8014e08:	a361      	add	r3, pc, #388	; (adr r3, 8014f90 <_dtoa_r+0x2c8>)
 8014e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e0e:	f7eb fbd5 	bl	80005bc <__aeabi_dmul>
 8014e12:	4602      	mov	r2, r0
 8014e14:	460b      	mov	r3, r1
 8014e16:	4630      	mov	r0, r6
 8014e18:	4639      	mov	r1, r7
 8014e1a:	f7eb fa19 	bl	8000250 <__adddf3>
 8014e1e:	4606      	mov	r6, r0
 8014e20:	460f      	mov	r7, r1
 8014e22:	f7eb fe7b 	bl	8000b1c <__aeabi_d2iz>
 8014e26:	2200      	movs	r2, #0
 8014e28:	9000      	str	r0, [sp, #0]
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	4630      	mov	r0, r6
 8014e2e:	4639      	mov	r1, r7
 8014e30:	f7eb fe36 	bl	8000aa0 <__aeabi_dcmplt>
 8014e34:	b150      	cbz	r0, 8014e4c <_dtoa_r+0x184>
 8014e36:	9800      	ldr	r0, [sp, #0]
 8014e38:	f7eb fb56 	bl	80004e8 <__aeabi_i2d>
 8014e3c:	4632      	mov	r2, r6
 8014e3e:	463b      	mov	r3, r7
 8014e40:	f7eb fe24 	bl	8000a8c <__aeabi_dcmpeq>
 8014e44:	b910      	cbnz	r0, 8014e4c <_dtoa_r+0x184>
 8014e46:	9b00      	ldr	r3, [sp, #0]
 8014e48:	3b01      	subs	r3, #1
 8014e4a:	9300      	str	r3, [sp, #0]
 8014e4c:	9b00      	ldr	r3, [sp, #0]
 8014e4e:	2b16      	cmp	r3, #22
 8014e50:	d85a      	bhi.n	8014f08 <_dtoa_r+0x240>
 8014e52:	9a00      	ldr	r2, [sp, #0]
 8014e54:	4b57      	ldr	r3, [pc, #348]	; (8014fb4 <_dtoa_r+0x2ec>)
 8014e56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e5e:	ec51 0b19 	vmov	r0, r1, d9
 8014e62:	f7eb fe1d 	bl	8000aa0 <__aeabi_dcmplt>
 8014e66:	2800      	cmp	r0, #0
 8014e68:	d050      	beq.n	8014f0c <_dtoa_r+0x244>
 8014e6a:	9b00      	ldr	r3, [sp, #0]
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	9300      	str	r3, [sp, #0]
 8014e70:	2300      	movs	r3, #0
 8014e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014e76:	1b5d      	subs	r5, r3, r5
 8014e78:	1e6b      	subs	r3, r5, #1
 8014e7a:	9305      	str	r3, [sp, #20]
 8014e7c:	bf45      	ittet	mi
 8014e7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8014e82:	9304      	strmi	r3, [sp, #16]
 8014e84:	2300      	movpl	r3, #0
 8014e86:	2300      	movmi	r3, #0
 8014e88:	bf4c      	ite	mi
 8014e8a:	9305      	strmi	r3, [sp, #20]
 8014e8c:	9304      	strpl	r3, [sp, #16]
 8014e8e:	9b00      	ldr	r3, [sp, #0]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	db3d      	blt.n	8014f10 <_dtoa_r+0x248>
 8014e94:	9b05      	ldr	r3, [sp, #20]
 8014e96:	9a00      	ldr	r2, [sp, #0]
 8014e98:	920a      	str	r2, [sp, #40]	; 0x28
 8014e9a:	4413      	add	r3, r2
 8014e9c:	9305      	str	r3, [sp, #20]
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	9307      	str	r3, [sp, #28]
 8014ea2:	9b06      	ldr	r3, [sp, #24]
 8014ea4:	2b09      	cmp	r3, #9
 8014ea6:	f200 8089 	bhi.w	8014fbc <_dtoa_r+0x2f4>
 8014eaa:	2b05      	cmp	r3, #5
 8014eac:	bfc4      	itt	gt
 8014eae:	3b04      	subgt	r3, #4
 8014eb0:	9306      	strgt	r3, [sp, #24]
 8014eb2:	9b06      	ldr	r3, [sp, #24]
 8014eb4:	f1a3 0302 	sub.w	r3, r3, #2
 8014eb8:	bfcc      	ite	gt
 8014eba:	2500      	movgt	r5, #0
 8014ebc:	2501      	movle	r5, #1
 8014ebe:	2b03      	cmp	r3, #3
 8014ec0:	f200 8087 	bhi.w	8014fd2 <_dtoa_r+0x30a>
 8014ec4:	e8df f003 	tbb	[pc, r3]
 8014ec8:	59383a2d 	.word	0x59383a2d
 8014ecc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014ed0:	441d      	add	r5, r3
 8014ed2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014ed6:	2b20      	cmp	r3, #32
 8014ed8:	bfc1      	itttt	gt
 8014eda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014ede:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014ee2:	fa0b f303 	lslgt.w	r3, fp, r3
 8014ee6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014eea:	bfda      	itte	le
 8014eec:	f1c3 0320 	rsble	r3, r3, #32
 8014ef0:	fa06 f003 	lslle.w	r0, r6, r3
 8014ef4:	4318      	orrgt	r0, r3
 8014ef6:	f7eb fae7 	bl	80004c8 <__aeabi_ui2d>
 8014efa:	2301      	movs	r3, #1
 8014efc:	4606      	mov	r6, r0
 8014efe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014f02:	3d01      	subs	r5, #1
 8014f04:	930e      	str	r3, [sp, #56]	; 0x38
 8014f06:	e76a      	b.n	8014dde <_dtoa_r+0x116>
 8014f08:	2301      	movs	r3, #1
 8014f0a:	e7b2      	b.n	8014e72 <_dtoa_r+0x1aa>
 8014f0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8014f0e:	e7b1      	b.n	8014e74 <_dtoa_r+0x1ac>
 8014f10:	9b04      	ldr	r3, [sp, #16]
 8014f12:	9a00      	ldr	r2, [sp, #0]
 8014f14:	1a9b      	subs	r3, r3, r2
 8014f16:	9304      	str	r3, [sp, #16]
 8014f18:	4253      	negs	r3, r2
 8014f1a:	9307      	str	r3, [sp, #28]
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8014f20:	e7bf      	b.n	8014ea2 <_dtoa_r+0x1da>
 8014f22:	2300      	movs	r3, #0
 8014f24:	9308      	str	r3, [sp, #32]
 8014f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	dc55      	bgt.n	8014fd8 <_dtoa_r+0x310>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014f32:	461a      	mov	r2, r3
 8014f34:	9209      	str	r2, [sp, #36]	; 0x24
 8014f36:	e00c      	b.n	8014f52 <_dtoa_r+0x28a>
 8014f38:	2301      	movs	r3, #1
 8014f3a:	e7f3      	b.n	8014f24 <_dtoa_r+0x25c>
 8014f3c:	2300      	movs	r3, #0
 8014f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014f40:	9308      	str	r3, [sp, #32]
 8014f42:	9b00      	ldr	r3, [sp, #0]
 8014f44:	4413      	add	r3, r2
 8014f46:	9302      	str	r3, [sp, #8]
 8014f48:	3301      	adds	r3, #1
 8014f4a:	2b01      	cmp	r3, #1
 8014f4c:	9303      	str	r3, [sp, #12]
 8014f4e:	bfb8      	it	lt
 8014f50:	2301      	movlt	r3, #1
 8014f52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014f54:	2200      	movs	r2, #0
 8014f56:	6042      	str	r2, [r0, #4]
 8014f58:	2204      	movs	r2, #4
 8014f5a:	f102 0614 	add.w	r6, r2, #20
 8014f5e:	429e      	cmp	r6, r3
 8014f60:	6841      	ldr	r1, [r0, #4]
 8014f62:	d93d      	bls.n	8014fe0 <_dtoa_r+0x318>
 8014f64:	4620      	mov	r0, r4
 8014f66:	f000 fdb9 	bl	8015adc <_Balloc>
 8014f6a:	9001      	str	r0, [sp, #4]
 8014f6c:	2800      	cmp	r0, #0
 8014f6e:	d13b      	bne.n	8014fe8 <_dtoa_r+0x320>
 8014f70:	4b11      	ldr	r3, [pc, #68]	; (8014fb8 <_dtoa_r+0x2f0>)
 8014f72:	4602      	mov	r2, r0
 8014f74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014f78:	e6c0      	b.n	8014cfc <_dtoa_r+0x34>
 8014f7a:	2301      	movs	r3, #1
 8014f7c:	e7df      	b.n	8014f3e <_dtoa_r+0x276>
 8014f7e:	bf00      	nop
 8014f80:	636f4361 	.word	0x636f4361
 8014f84:	3fd287a7 	.word	0x3fd287a7
 8014f88:	8b60c8b3 	.word	0x8b60c8b3
 8014f8c:	3fc68a28 	.word	0x3fc68a28
 8014f90:	509f79fb 	.word	0x509f79fb
 8014f94:	3fd34413 	.word	0x3fd34413
 8014f98:	08019124 	.word	0x08019124
 8014f9c:	0801936a 	.word	0x0801936a
 8014fa0:	7ff00000 	.word	0x7ff00000
 8014fa4:	08019366 	.word	0x08019366
 8014fa8:	0801935d 	.word	0x0801935d
 8014fac:	080196b7 	.word	0x080196b7
 8014fb0:	3ff80000 	.word	0x3ff80000
 8014fb4:	08019460 	.word	0x08019460
 8014fb8:	080193c5 	.word	0x080193c5
 8014fbc:	2501      	movs	r5, #1
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	9306      	str	r3, [sp, #24]
 8014fc2:	9508      	str	r5, [sp, #32]
 8014fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8014fc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014fcc:	2200      	movs	r2, #0
 8014fce:	2312      	movs	r3, #18
 8014fd0:	e7b0      	b.n	8014f34 <_dtoa_r+0x26c>
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	9308      	str	r3, [sp, #32]
 8014fd6:	e7f5      	b.n	8014fc4 <_dtoa_r+0x2fc>
 8014fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014fde:	e7b8      	b.n	8014f52 <_dtoa_r+0x28a>
 8014fe0:	3101      	adds	r1, #1
 8014fe2:	6041      	str	r1, [r0, #4]
 8014fe4:	0052      	lsls	r2, r2, #1
 8014fe6:	e7b8      	b.n	8014f5a <_dtoa_r+0x292>
 8014fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014fea:	9a01      	ldr	r2, [sp, #4]
 8014fec:	601a      	str	r2, [r3, #0]
 8014fee:	9b03      	ldr	r3, [sp, #12]
 8014ff0:	2b0e      	cmp	r3, #14
 8014ff2:	f200 809d 	bhi.w	8015130 <_dtoa_r+0x468>
 8014ff6:	2d00      	cmp	r5, #0
 8014ff8:	f000 809a 	beq.w	8015130 <_dtoa_r+0x468>
 8014ffc:	9b00      	ldr	r3, [sp, #0]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	dd32      	ble.n	8015068 <_dtoa_r+0x3a0>
 8015002:	4ab7      	ldr	r2, [pc, #732]	; (80152e0 <_dtoa_r+0x618>)
 8015004:	f003 030f 	and.w	r3, r3, #15
 8015008:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801500c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015010:	9b00      	ldr	r3, [sp, #0]
 8015012:	05d8      	lsls	r0, r3, #23
 8015014:	ea4f 1723 	mov.w	r7, r3, asr #4
 8015018:	d516      	bpl.n	8015048 <_dtoa_r+0x380>
 801501a:	4bb2      	ldr	r3, [pc, #712]	; (80152e4 <_dtoa_r+0x61c>)
 801501c:	ec51 0b19 	vmov	r0, r1, d9
 8015020:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015024:	f7eb fbf4 	bl	8000810 <__aeabi_ddiv>
 8015028:	f007 070f 	and.w	r7, r7, #15
 801502c:	4682      	mov	sl, r0
 801502e:	468b      	mov	fp, r1
 8015030:	2503      	movs	r5, #3
 8015032:	4eac      	ldr	r6, [pc, #688]	; (80152e4 <_dtoa_r+0x61c>)
 8015034:	b957      	cbnz	r7, 801504c <_dtoa_r+0x384>
 8015036:	4642      	mov	r2, r8
 8015038:	464b      	mov	r3, r9
 801503a:	4650      	mov	r0, sl
 801503c:	4659      	mov	r1, fp
 801503e:	f7eb fbe7 	bl	8000810 <__aeabi_ddiv>
 8015042:	4682      	mov	sl, r0
 8015044:	468b      	mov	fp, r1
 8015046:	e028      	b.n	801509a <_dtoa_r+0x3d2>
 8015048:	2502      	movs	r5, #2
 801504a:	e7f2      	b.n	8015032 <_dtoa_r+0x36a>
 801504c:	07f9      	lsls	r1, r7, #31
 801504e:	d508      	bpl.n	8015062 <_dtoa_r+0x39a>
 8015050:	4640      	mov	r0, r8
 8015052:	4649      	mov	r1, r9
 8015054:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015058:	f7eb fab0 	bl	80005bc <__aeabi_dmul>
 801505c:	3501      	adds	r5, #1
 801505e:	4680      	mov	r8, r0
 8015060:	4689      	mov	r9, r1
 8015062:	107f      	asrs	r7, r7, #1
 8015064:	3608      	adds	r6, #8
 8015066:	e7e5      	b.n	8015034 <_dtoa_r+0x36c>
 8015068:	f000 809b 	beq.w	80151a2 <_dtoa_r+0x4da>
 801506c:	9b00      	ldr	r3, [sp, #0]
 801506e:	4f9d      	ldr	r7, [pc, #628]	; (80152e4 <_dtoa_r+0x61c>)
 8015070:	425e      	negs	r6, r3
 8015072:	4b9b      	ldr	r3, [pc, #620]	; (80152e0 <_dtoa_r+0x618>)
 8015074:	f006 020f 	and.w	r2, r6, #15
 8015078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015080:	ec51 0b19 	vmov	r0, r1, d9
 8015084:	f7eb fa9a 	bl	80005bc <__aeabi_dmul>
 8015088:	1136      	asrs	r6, r6, #4
 801508a:	4682      	mov	sl, r0
 801508c:	468b      	mov	fp, r1
 801508e:	2300      	movs	r3, #0
 8015090:	2502      	movs	r5, #2
 8015092:	2e00      	cmp	r6, #0
 8015094:	d17a      	bne.n	801518c <_dtoa_r+0x4c4>
 8015096:	2b00      	cmp	r3, #0
 8015098:	d1d3      	bne.n	8015042 <_dtoa_r+0x37a>
 801509a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801509c:	2b00      	cmp	r3, #0
 801509e:	f000 8082 	beq.w	80151a6 <_dtoa_r+0x4de>
 80150a2:	4b91      	ldr	r3, [pc, #580]	; (80152e8 <_dtoa_r+0x620>)
 80150a4:	2200      	movs	r2, #0
 80150a6:	4650      	mov	r0, sl
 80150a8:	4659      	mov	r1, fp
 80150aa:	f7eb fcf9 	bl	8000aa0 <__aeabi_dcmplt>
 80150ae:	2800      	cmp	r0, #0
 80150b0:	d079      	beq.n	80151a6 <_dtoa_r+0x4de>
 80150b2:	9b03      	ldr	r3, [sp, #12]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d076      	beq.n	80151a6 <_dtoa_r+0x4de>
 80150b8:	9b02      	ldr	r3, [sp, #8]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	dd36      	ble.n	801512c <_dtoa_r+0x464>
 80150be:	9b00      	ldr	r3, [sp, #0]
 80150c0:	4650      	mov	r0, sl
 80150c2:	4659      	mov	r1, fp
 80150c4:	1e5f      	subs	r7, r3, #1
 80150c6:	2200      	movs	r2, #0
 80150c8:	4b88      	ldr	r3, [pc, #544]	; (80152ec <_dtoa_r+0x624>)
 80150ca:	f7eb fa77 	bl	80005bc <__aeabi_dmul>
 80150ce:	9e02      	ldr	r6, [sp, #8]
 80150d0:	4682      	mov	sl, r0
 80150d2:	468b      	mov	fp, r1
 80150d4:	3501      	adds	r5, #1
 80150d6:	4628      	mov	r0, r5
 80150d8:	f7eb fa06 	bl	80004e8 <__aeabi_i2d>
 80150dc:	4652      	mov	r2, sl
 80150de:	465b      	mov	r3, fp
 80150e0:	f7eb fa6c 	bl	80005bc <__aeabi_dmul>
 80150e4:	4b82      	ldr	r3, [pc, #520]	; (80152f0 <_dtoa_r+0x628>)
 80150e6:	2200      	movs	r2, #0
 80150e8:	f7eb f8b2 	bl	8000250 <__adddf3>
 80150ec:	46d0      	mov	r8, sl
 80150ee:	46d9      	mov	r9, fp
 80150f0:	4682      	mov	sl, r0
 80150f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80150f6:	2e00      	cmp	r6, #0
 80150f8:	d158      	bne.n	80151ac <_dtoa_r+0x4e4>
 80150fa:	4b7e      	ldr	r3, [pc, #504]	; (80152f4 <_dtoa_r+0x62c>)
 80150fc:	2200      	movs	r2, #0
 80150fe:	4640      	mov	r0, r8
 8015100:	4649      	mov	r1, r9
 8015102:	f7eb f8a3 	bl	800024c <__aeabi_dsub>
 8015106:	4652      	mov	r2, sl
 8015108:	465b      	mov	r3, fp
 801510a:	4680      	mov	r8, r0
 801510c:	4689      	mov	r9, r1
 801510e:	f7eb fce5 	bl	8000adc <__aeabi_dcmpgt>
 8015112:	2800      	cmp	r0, #0
 8015114:	f040 8295 	bne.w	8015642 <_dtoa_r+0x97a>
 8015118:	4652      	mov	r2, sl
 801511a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801511e:	4640      	mov	r0, r8
 8015120:	4649      	mov	r1, r9
 8015122:	f7eb fcbd 	bl	8000aa0 <__aeabi_dcmplt>
 8015126:	2800      	cmp	r0, #0
 8015128:	f040 8289 	bne.w	801563e <_dtoa_r+0x976>
 801512c:	ec5b ab19 	vmov	sl, fp, d9
 8015130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015132:	2b00      	cmp	r3, #0
 8015134:	f2c0 8148 	blt.w	80153c8 <_dtoa_r+0x700>
 8015138:	9a00      	ldr	r2, [sp, #0]
 801513a:	2a0e      	cmp	r2, #14
 801513c:	f300 8144 	bgt.w	80153c8 <_dtoa_r+0x700>
 8015140:	4b67      	ldr	r3, [pc, #412]	; (80152e0 <_dtoa_r+0x618>)
 8015142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015146:	e9d3 8900 	ldrd	r8, r9, [r3]
 801514a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801514c:	2b00      	cmp	r3, #0
 801514e:	f280 80d5 	bge.w	80152fc <_dtoa_r+0x634>
 8015152:	9b03      	ldr	r3, [sp, #12]
 8015154:	2b00      	cmp	r3, #0
 8015156:	f300 80d1 	bgt.w	80152fc <_dtoa_r+0x634>
 801515a:	f040 826f 	bne.w	801563c <_dtoa_r+0x974>
 801515e:	4b65      	ldr	r3, [pc, #404]	; (80152f4 <_dtoa_r+0x62c>)
 8015160:	2200      	movs	r2, #0
 8015162:	4640      	mov	r0, r8
 8015164:	4649      	mov	r1, r9
 8015166:	f7eb fa29 	bl	80005bc <__aeabi_dmul>
 801516a:	4652      	mov	r2, sl
 801516c:	465b      	mov	r3, fp
 801516e:	f7eb fcab 	bl	8000ac8 <__aeabi_dcmpge>
 8015172:	9e03      	ldr	r6, [sp, #12]
 8015174:	4637      	mov	r7, r6
 8015176:	2800      	cmp	r0, #0
 8015178:	f040 8245 	bne.w	8015606 <_dtoa_r+0x93e>
 801517c:	9d01      	ldr	r5, [sp, #4]
 801517e:	2331      	movs	r3, #49	; 0x31
 8015180:	f805 3b01 	strb.w	r3, [r5], #1
 8015184:	9b00      	ldr	r3, [sp, #0]
 8015186:	3301      	adds	r3, #1
 8015188:	9300      	str	r3, [sp, #0]
 801518a:	e240      	b.n	801560e <_dtoa_r+0x946>
 801518c:	07f2      	lsls	r2, r6, #31
 801518e:	d505      	bpl.n	801519c <_dtoa_r+0x4d4>
 8015190:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015194:	f7eb fa12 	bl	80005bc <__aeabi_dmul>
 8015198:	3501      	adds	r5, #1
 801519a:	2301      	movs	r3, #1
 801519c:	1076      	asrs	r6, r6, #1
 801519e:	3708      	adds	r7, #8
 80151a0:	e777      	b.n	8015092 <_dtoa_r+0x3ca>
 80151a2:	2502      	movs	r5, #2
 80151a4:	e779      	b.n	801509a <_dtoa_r+0x3d2>
 80151a6:	9f00      	ldr	r7, [sp, #0]
 80151a8:	9e03      	ldr	r6, [sp, #12]
 80151aa:	e794      	b.n	80150d6 <_dtoa_r+0x40e>
 80151ac:	9901      	ldr	r1, [sp, #4]
 80151ae:	4b4c      	ldr	r3, [pc, #304]	; (80152e0 <_dtoa_r+0x618>)
 80151b0:	4431      	add	r1, r6
 80151b2:	910d      	str	r1, [sp, #52]	; 0x34
 80151b4:	9908      	ldr	r1, [sp, #32]
 80151b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80151ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80151be:	2900      	cmp	r1, #0
 80151c0:	d043      	beq.n	801524a <_dtoa_r+0x582>
 80151c2:	494d      	ldr	r1, [pc, #308]	; (80152f8 <_dtoa_r+0x630>)
 80151c4:	2000      	movs	r0, #0
 80151c6:	f7eb fb23 	bl	8000810 <__aeabi_ddiv>
 80151ca:	4652      	mov	r2, sl
 80151cc:	465b      	mov	r3, fp
 80151ce:	f7eb f83d 	bl	800024c <__aeabi_dsub>
 80151d2:	9d01      	ldr	r5, [sp, #4]
 80151d4:	4682      	mov	sl, r0
 80151d6:	468b      	mov	fp, r1
 80151d8:	4649      	mov	r1, r9
 80151da:	4640      	mov	r0, r8
 80151dc:	f7eb fc9e 	bl	8000b1c <__aeabi_d2iz>
 80151e0:	4606      	mov	r6, r0
 80151e2:	f7eb f981 	bl	80004e8 <__aeabi_i2d>
 80151e6:	4602      	mov	r2, r0
 80151e8:	460b      	mov	r3, r1
 80151ea:	4640      	mov	r0, r8
 80151ec:	4649      	mov	r1, r9
 80151ee:	f7eb f82d 	bl	800024c <__aeabi_dsub>
 80151f2:	3630      	adds	r6, #48	; 0x30
 80151f4:	f805 6b01 	strb.w	r6, [r5], #1
 80151f8:	4652      	mov	r2, sl
 80151fa:	465b      	mov	r3, fp
 80151fc:	4680      	mov	r8, r0
 80151fe:	4689      	mov	r9, r1
 8015200:	f7eb fc4e 	bl	8000aa0 <__aeabi_dcmplt>
 8015204:	2800      	cmp	r0, #0
 8015206:	d163      	bne.n	80152d0 <_dtoa_r+0x608>
 8015208:	4642      	mov	r2, r8
 801520a:	464b      	mov	r3, r9
 801520c:	4936      	ldr	r1, [pc, #216]	; (80152e8 <_dtoa_r+0x620>)
 801520e:	2000      	movs	r0, #0
 8015210:	f7eb f81c 	bl	800024c <__aeabi_dsub>
 8015214:	4652      	mov	r2, sl
 8015216:	465b      	mov	r3, fp
 8015218:	f7eb fc42 	bl	8000aa0 <__aeabi_dcmplt>
 801521c:	2800      	cmp	r0, #0
 801521e:	f040 80b5 	bne.w	801538c <_dtoa_r+0x6c4>
 8015222:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015224:	429d      	cmp	r5, r3
 8015226:	d081      	beq.n	801512c <_dtoa_r+0x464>
 8015228:	4b30      	ldr	r3, [pc, #192]	; (80152ec <_dtoa_r+0x624>)
 801522a:	2200      	movs	r2, #0
 801522c:	4650      	mov	r0, sl
 801522e:	4659      	mov	r1, fp
 8015230:	f7eb f9c4 	bl	80005bc <__aeabi_dmul>
 8015234:	4b2d      	ldr	r3, [pc, #180]	; (80152ec <_dtoa_r+0x624>)
 8015236:	4682      	mov	sl, r0
 8015238:	468b      	mov	fp, r1
 801523a:	4640      	mov	r0, r8
 801523c:	4649      	mov	r1, r9
 801523e:	2200      	movs	r2, #0
 8015240:	f7eb f9bc 	bl	80005bc <__aeabi_dmul>
 8015244:	4680      	mov	r8, r0
 8015246:	4689      	mov	r9, r1
 8015248:	e7c6      	b.n	80151d8 <_dtoa_r+0x510>
 801524a:	4650      	mov	r0, sl
 801524c:	4659      	mov	r1, fp
 801524e:	f7eb f9b5 	bl	80005bc <__aeabi_dmul>
 8015252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015254:	9d01      	ldr	r5, [sp, #4]
 8015256:	930f      	str	r3, [sp, #60]	; 0x3c
 8015258:	4682      	mov	sl, r0
 801525a:	468b      	mov	fp, r1
 801525c:	4649      	mov	r1, r9
 801525e:	4640      	mov	r0, r8
 8015260:	f7eb fc5c 	bl	8000b1c <__aeabi_d2iz>
 8015264:	4606      	mov	r6, r0
 8015266:	f7eb f93f 	bl	80004e8 <__aeabi_i2d>
 801526a:	3630      	adds	r6, #48	; 0x30
 801526c:	4602      	mov	r2, r0
 801526e:	460b      	mov	r3, r1
 8015270:	4640      	mov	r0, r8
 8015272:	4649      	mov	r1, r9
 8015274:	f7ea ffea 	bl	800024c <__aeabi_dsub>
 8015278:	f805 6b01 	strb.w	r6, [r5], #1
 801527c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801527e:	429d      	cmp	r5, r3
 8015280:	4680      	mov	r8, r0
 8015282:	4689      	mov	r9, r1
 8015284:	f04f 0200 	mov.w	r2, #0
 8015288:	d124      	bne.n	80152d4 <_dtoa_r+0x60c>
 801528a:	4b1b      	ldr	r3, [pc, #108]	; (80152f8 <_dtoa_r+0x630>)
 801528c:	4650      	mov	r0, sl
 801528e:	4659      	mov	r1, fp
 8015290:	f7ea ffde 	bl	8000250 <__adddf3>
 8015294:	4602      	mov	r2, r0
 8015296:	460b      	mov	r3, r1
 8015298:	4640      	mov	r0, r8
 801529a:	4649      	mov	r1, r9
 801529c:	f7eb fc1e 	bl	8000adc <__aeabi_dcmpgt>
 80152a0:	2800      	cmp	r0, #0
 80152a2:	d173      	bne.n	801538c <_dtoa_r+0x6c4>
 80152a4:	4652      	mov	r2, sl
 80152a6:	465b      	mov	r3, fp
 80152a8:	4913      	ldr	r1, [pc, #76]	; (80152f8 <_dtoa_r+0x630>)
 80152aa:	2000      	movs	r0, #0
 80152ac:	f7ea ffce 	bl	800024c <__aeabi_dsub>
 80152b0:	4602      	mov	r2, r0
 80152b2:	460b      	mov	r3, r1
 80152b4:	4640      	mov	r0, r8
 80152b6:	4649      	mov	r1, r9
 80152b8:	f7eb fbf2 	bl	8000aa0 <__aeabi_dcmplt>
 80152bc:	2800      	cmp	r0, #0
 80152be:	f43f af35 	beq.w	801512c <_dtoa_r+0x464>
 80152c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80152c4:	1e6b      	subs	r3, r5, #1
 80152c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80152c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80152cc:	2b30      	cmp	r3, #48	; 0x30
 80152ce:	d0f8      	beq.n	80152c2 <_dtoa_r+0x5fa>
 80152d0:	9700      	str	r7, [sp, #0]
 80152d2:	e049      	b.n	8015368 <_dtoa_r+0x6a0>
 80152d4:	4b05      	ldr	r3, [pc, #20]	; (80152ec <_dtoa_r+0x624>)
 80152d6:	f7eb f971 	bl	80005bc <__aeabi_dmul>
 80152da:	4680      	mov	r8, r0
 80152dc:	4689      	mov	r9, r1
 80152de:	e7bd      	b.n	801525c <_dtoa_r+0x594>
 80152e0:	08019460 	.word	0x08019460
 80152e4:	08019438 	.word	0x08019438
 80152e8:	3ff00000 	.word	0x3ff00000
 80152ec:	40240000 	.word	0x40240000
 80152f0:	401c0000 	.word	0x401c0000
 80152f4:	40140000 	.word	0x40140000
 80152f8:	3fe00000 	.word	0x3fe00000
 80152fc:	9d01      	ldr	r5, [sp, #4]
 80152fe:	4656      	mov	r6, sl
 8015300:	465f      	mov	r7, fp
 8015302:	4642      	mov	r2, r8
 8015304:	464b      	mov	r3, r9
 8015306:	4630      	mov	r0, r6
 8015308:	4639      	mov	r1, r7
 801530a:	f7eb fa81 	bl	8000810 <__aeabi_ddiv>
 801530e:	f7eb fc05 	bl	8000b1c <__aeabi_d2iz>
 8015312:	4682      	mov	sl, r0
 8015314:	f7eb f8e8 	bl	80004e8 <__aeabi_i2d>
 8015318:	4642      	mov	r2, r8
 801531a:	464b      	mov	r3, r9
 801531c:	f7eb f94e 	bl	80005bc <__aeabi_dmul>
 8015320:	4602      	mov	r2, r0
 8015322:	460b      	mov	r3, r1
 8015324:	4630      	mov	r0, r6
 8015326:	4639      	mov	r1, r7
 8015328:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801532c:	f7ea ff8e 	bl	800024c <__aeabi_dsub>
 8015330:	f805 6b01 	strb.w	r6, [r5], #1
 8015334:	9e01      	ldr	r6, [sp, #4]
 8015336:	9f03      	ldr	r7, [sp, #12]
 8015338:	1bae      	subs	r6, r5, r6
 801533a:	42b7      	cmp	r7, r6
 801533c:	4602      	mov	r2, r0
 801533e:	460b      	mov	r3, r1
 8015340:	d135      	bne.n	80153ae <_dtoa_r+0x6e6>
 8015342:	f7ea ff85 	bl	8000250 <__adddf3>
 8015346:	4642      	mov	r2, r8
 8015348:	464b      	mov	r3, r9
 801534a:	4606      	mov	r6, r0
 801534c:	460f      	mov	r7, r1
 801534e:	f7eb fbc5 	bl	8000adc <__aeabi_dcmpgt>
 8015352:	b9d0      	cbnz	r0, 801538a <_dtoa_r+0x6c2>
 8015354:	4642      	mov	r2, r8
 8015356:	464b      	mov	r3, r9
 8015358:	4630      	mov	r0, r6
 801535a:	4639      	mov	r1, r7
 801535c:	f7eb fb96 	bl	8000a8c <__aeabi_dcmpeq>
 8015360:	b110      	cbz	r0, 8015368 <_dtoa_r+0x6a0>
 8015362:	f01a 0f01 	tst.w	sl, #1
 8015366:	d110      	bne.n	801538a <_dtoa_r+0x6c2>
 8015368:	4620      	mov	r0, r4
 801536a:	ee18 1a10 	vmov	r1, s16
 801536e:	f000 fbf5 	bl	8015b5c <_Bfree>
 8015372:	2300      	movs	r3, #0
 8015374:	9800      	ldr	r0, [sp, #0]
 8015376:	702b      	strb	r3, [r5, #0]
 8015378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801537a:	3001      	adds	r0, #1
 801537c:	6018      	str	r0, [r3, #0]
 801537e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015380:	2b00      	cmp	r3, #0
 8015382:	f43f acf1 	beq.w	8014d68 <_dtoa_r+0xa0>
 8015386:	601d      	str	r5, [r3, #0]
 8015388:	e4ee      	b.n	8014d68 <_dtoa_r+0xa0>
 801538a:	9f00      	ldr	r7, [sp, #0]
 801538c:	462b      	mov	r3, r5
 801538e:	461d      	mov	r5, r3
 8015390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015394:	2a39      	cmp	r2, #57	; 0x39
 8015396:	d106      	bne.n	80153a6 <_dtoa_r+0x6de>
 8015398:	9a01      	ldr	r2, [sp, #4]
 801539a:	429a      	cmp	r2, r3
 801539c:	d1f7      	bne.n	801538e <_dtoa_r+0x6c6>
 801539e:	9901      	ldr	r1, [sp, #4]
 80153a0:	2230      	movs	r2, #48	; 0x30
 80153a2:	3701      	adds	r7, #1
 80153a4:	700a      	strb	r2, [r1, #0]
 80153a6:	781a      	ldrb	r2, [r3, #0]
 80153a8:	3201      	adds	r2, #1
 80153aa:	701a      	strb	r2, [r3, #0]
 80153ac:	e790      	b.n	80152d0 <_dtoa_r+0x608>
 80153ae:	4ba6      	ldr	r3, [pc, #664]	; (8015648 <_dtoa_r+0x980>)
 80153b0:	2200      	movs	r2, #0
 80153b2:	f7eb f903 	bl	80005bc <__aeabi_dmul>
 80153b6:	2200      	movs	r2, #0
 80153b8:	2300      	movs	r3, #0
 80153ba:	4606      	mov	r6, r0
 80153bc:	460f      	mov	r7, r1
 80153be:	f7eb fb65 	bl	8000a8c <__aeabi_dcmpeq>
 80153c2:	2800      	cmp	r0, #0
 80153c4:	d09d      	beq.n	8015302 <_dtoa_r+0x63a>
 80153c6:	e7cf      	b.n	8015368 <_dtoa_r+0x6a0>
 80153c8:	9a08      	ldr	r2, [sp, #32]
 80153ca:	2a00      	cmp	r2, #0
 80153cc:	f000 80d7 	beq.w	801557e <_dtoa_r+0x8b6>
 80153d0:	9a06      	ldr	r2, [sp, #24]
 80153d2:	2a01      	cmp	r2, #1
 80153d4:	f300 80ba 	bgt.w	801554c <_dtoa_r+0x884>
 80153d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80153da:	2a00      	cmp	r2, #0
 80153dc:	f000 80b2 	beq.w	8015544 <_dtoa_r+0x87c>
 80153e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80153e4:	9e07      	ldr	r6, [sp, #28]
 80153e6:	9d04      	ldr	r5, [sp, #16]
 80153e8:	9a04      	ldr	r2, [sp, #16]
 80153ea:	441a      	add	r2, r3
 80153ec:	9204      	str	r2, [sp, #16]
 80153ee:	9a05      	ldr	r2, [sp, #20]
 80153f0:	2101      	movs	r1, #1
 80153f2:	441a      	add	r2, r3
 80153f4:	4620      	mov	r0, r4
 80153f6:	9205      	str	r2, [sp, #20]
 80153f8:	f000 fc68 	bl	8015ccc <__i2b>
 80153fc:	4607      	mov	r7, r0
 80153fe:	2d00      	cmp	r5, #0
 8015400:	dd0c      	ble.n	801541c <_dtoa_r+0x754>
 8015402:	9b05      	ldr	r3, [sp, #20]
 8015404:	2b00      	cmp	r3, #0
 8015406:	dd09      	ble.n	801541c <_dtoa_r+0x754>
 8015408:	42ab      	cmp	r3, r5
 801540a:	9a04      	ldr	r2, [sp, #16]
 801540c:	bfa8      	it	ge
 801540e:	462b      	movge	r3, r5
 8015410:	1ad2      	subs	r2, r2, r3
 8015412:	9204      	str	r2, [sp, #16]
 8015414:	9a05      	ldr	r2, [sp, #20]
 8015416:	1aed      	subs	r5, r5, r3
 8015418:	1ad3      	subs	r3, r2, r3
 801541a:	9305      	str	r3, [sp, #20]
 801541c:	9b07      	ldr	r3, [sp, #28]
 801541e:	b31b      	cbz	r3, 8015468 <_dtoa_r+0x7a0>
 8015420:	9b08      	ldr	r3, [sp, #32]
 8015422:	2b00      	cmp	r3, #0
 8015424:	f000 80af 	beq.w	8015586 <_dtoa_r+0x8be>
 8015428:	2e00      	cmp	r6, #0
 801542a:	dd13      	ble.n	8015454 <_dtoa_r+0x78c>
 801542c:	4639      	mov	r1, r7
 801542e:	4632      	mov	r2, r6
 8015430:	4620      	mov	r0, r4
 8015432:	f000 fd0b 	bl	8015e4c <__pow5mult>
 8015436:	ee18 2a10 	vmov	r2, s16
 801543a:	4601      	mov	r1, r0
 801543c:	4607      	mov	r7, r0
 801543e:	4620      	mov	r0, r4
 8015440:	f000 fc5a 	bl	8015cf8 <__multiply>
 8015444:	ee18 1a10 	vmov	r1, s16
 8015448:	4680      	mov	r8, r0
 801544a:	4620      	mov	r0, r4
 801544c:	f000 fb86 	bl	8015b5c <_Bfree>
 8015450:	ee08 8a10 	vmov	s16, r8
 8015454:	9b07      	ldr	r3, [sp, #28]
 8015456:	1b9a      	subs	r2, r3, r6
 8015458:	d006      	beq.n	8015468 <_dtoa_r+0x7a0>
 801545a:	ee18 1a10 	vmov	r1, s16
 801545e:	4620      	mov	r0, r4
 8015460:	f000 fcf4 	bl	8015e4c <__pow5mult>
 8015464:	ee08 0a10 	vmov	s16, r0
 8015468:	2101      	movs	r1, #1
 801546a:	4620      	mov	r0, r4
 801546c:	f000 fc2e 	bl	8015ccc <__i2b>
 8015470:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015472:	2b00      	cmp	r3, #0
 8015474:	4606      	mov	r6, r0
 8015476:	f340 8088 	ble.w	801558a <_dtoa_r+0x8c2>
 801547a:	461a      	mov	r2, r3
 801547c:	4601      	mov	r1, r0
 801547e:	4620      	mov	r0, r4
 8015480:	f000 fce4 	bl	8015e4c <__pow5mult>
 8015484:	9b06      	ldr	r3, [sp, #24]
 8015486:	2b01      	cmp	r3, #1
 8015488:	4606      	mov	r6, r0
 801548a:	f340 8081 	ble.w	8015590 <_dtoa_r+0x8c8>
 801548e:	f04f 0800 	mov.w	r8, #0
 8015492:	6933      	ldr	r3, [r6, #16]
 8015494:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015498:	6918      	ldr	r0, [r3, #16]
 801549a:	f000 fbc7 	bl	8015c2c <__hi0bits>
 801549e:	f1c0 0020 	rsb	r0, r0, #32
 80154a2:	9b05      	ldr	r3, [sp, #20]
 80154a4:	4418      	add	r0, r3
 80154a6:	f010 001f 	ands.w	r0, r0, #31
 80154aa:	f000 8092 	beq.w	80155d2 <_dtoa_r+0x90a>
 80154ae:	f1c0 0320 	rsb	r3, r0, #32
 80154b2:	2b04      	cmp	r3, #4
 80154b4:	f340 808a 	ble.w	80155cc <_dtoa_r+0x904>
 80154b8:	f1c0 001c 	rsb	r0, r0, #28
 80154bc:	9b04      	ldr	r3, [sp, #16]
 80154be:	4403      	add	r3, r0
 80154c0:	9304      	str	r3, [sp, #16]
 80154c2:	9b05      	ldr	r3, [sp, #20]
 80154c4:	4403      	add	r3, r0
 80154c6:	4405      	add	r5, r0
 80154c8:	9305      	str	r3, [sp, #20]
 80154ca:	9b04      	ldr	r3, [sp, #16]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dd07      	ble.n	80154e0 <_dtoa_r+0x818>
 80154d0:	ee18 1a10 	vmov	r1, s16
 80154d4:	461a      	mov	r2, r3
 80154d6:	4620      	mov	r0, r4
 80154d8:	f000 fd12 	bl	8015f00 <__lshift>
 80154dc:	ee08 0a10 	vmov	s16, r0
 80154e0:	9b05      	ldr	r3, [sp, #20]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	dd05      	ble.n	80154f2 <_dtoa_r+0x82a>
 80154e6:	4631      	mov	r1, r6
 80154e8:	461a      	mov	r2, r3
 80154ea:	4620      	mov	r0, r4
 80154ec:	f000 fd08 	bl	8015f00 <__lshift>
 80154f0:	4606      	mov	r6, r0
 80154f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d06e      	beq.n	80155d6 <_dtoa_r+0x90e>
 80154f8:	ee18 0a10 	vmov	r0, s16
 80154fc:	4631      	mov	r1, r6
 80154fe:	f000 fd6f 	bl	8015fe0 <__mcmp>
 8015502:	2800      	cmp	r0, #0
 8015504:	da67      	bge.n	80155d6 <_dtoa_r+0x90e>
 8015506:	9b00      	ldr	r3, [sp, #0]
 8015508:	3b01      	subs	r3, #1
 801550a:	ee18 1a10 	vmov	r1, s16
 801550e:	9300      	str	r3, [sp, #0]
 8015510:	220a      	movs	r2, #10
 8015512:	2300      	movs	r3, #0
 8015514:	4620      	mov	r0, r4
 8015516:	f000 fb43 	bl	8015ba0 <__multadd>
 801551a:	9b08      	ldr	r3, [sp, #32]
 801551c:	ee08 0a10 	vmov	s16, r0
 8015520:	2b00      	cmp	r3, #0
 8015522:	f000 81b1 	beq.w	8015888 <_dtoa_r+0xbc0>
 8015526:	2300      	movs	r3, #0
 8015528:	4639      	mov	r1, r7
 801552a:	220a      	movs	r2, #10
 801552c:	4620      	mov	r0, r4
 801552e:	f000 fb37 	bl	8015ba0 <__multadd>
 8015532:	9b02      	ldr	r3, [sp, #8]
 8015534:	2b00      	cmp	r3, #0
 8015536:	4607      	mov	r7, r0
 8015538:	f300 808e 	bgt.w	8015658 <_dtoa_r+0x990>
 801553c:	9b06      	ldr	r3, [sp, #24]
 801553e:	2b02      	cmp	r3, #2
 8015540:	dc51      	bgt.n	80155e6 <_dtoa_r+0x91e>
 8015542:	e089      	b.n	8015658 <_dtoa_r+0x990>
 8015544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801554a:	e74b      	b.n	80153e4 <_dtoa_r+0x71c>
 801554c:	9b03      	ldr	r3, [sp, #12]
 801554e:	1e5e      	subs	r6, r3, #1
 8015550:	9b07      	ldr	r3, [sp, #28]
 8015552:	42b3      	cmp	r3, r6
 8015554:	bfbf      	itttt	lt
 8015556:	9b07      	ldrlt	r3, [sp, #28]
 8015558:	9607      	strlt	r6, [sp, #28]
 801555a:	1af2      	sublt	r2, r6, r3
 801555c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801555e:	bfb6      	itet	lt
 8015560:	189b      	addlt	r3, r3, r2
 8015562:	1b9e      	subge	r6, r3, r6
 8015564:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015566:	9b03      	ldr	r3, [sp, #12]
 8015568:	bfb8      	it	lt
 801556a:	2600      	movlt	r6, #0
 801556c:	2b00      	cmp	r3, #0
 801556e:	bfb7      	itett	lt
 8015570:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015574:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015578:	1a9d      	sublt	r5, r3, r2
 801557a:	2300      	movlt	r3, #0
 801557c:	e734      	b.n	80153e8 <_dtoa_r+0x720>
 801557e:	9e07      	ldr	r6, [sp, #28]
 8015580:	9d04      	ldr	r5, [sp, #16]
 8015582:	9f08      	ldr	r7, [sp, #32]
 8015584:	e73b      	b.n	80153fe <_dtoa_r+0x736>
 8015586:	9a07      	ldr	r2, [sp, #28]
 8015588:	e767      	b.n	801545a <_dtoa_r+0x792>
 801558a:	9b06      	ldr	r3, [sp, #24]
 801558c:	2b01      	cmp	r3, #1
 801558e:	dc18      	bgt.n	80155c2 <_dtoa_r+0x8fa>
 8015590:	f1ba 0f00 	cmp.w	sl, #0
 8015594:	d115      	bne.n	80155c2 <_dtoa_r+0x8fa>
 8015596:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801559a:	b993      	cbnz	r3, 80155c2 <_dtoa_r+0x8fa>
 801559c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80155a0:	0d1b      	lsrs	r3, r3, #20
 80155a2:	051b      	lsls	r3, r3, #20
 80155a4:	b183      	cbz	r3, 80155c8 <_dtoa_r+0x900>
 80155a6:	9b04      	ldr	r3, [sp, #16]
 80155a8:	3301      	adds	r3, #1
 80155aa:	9304      	str	r3, [sp, #16]
 80155ac:	9b05      	ldr	r3, [sp, #20]
 80155ae:	3301      	adds	r3, #1
 80155b0:	9305      	str	r3, [sp, #20]
 80155b2:	f04f 0801 	mov.w	r8, #1
 80155b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	f47f af6a 	bne.w	8015492 <_dtoa_r+0x7ca>
 80155be:	2001      	movs	r0, #1
 80155c0:	e76f      	b.n	80154a2 <_dtoa_r+0x7da>
 80155c2:	f04f 0800 	mov.w	r8, #0
 80155c6:	e7f6      	b.n	80155b6 <_dtoa_r+0x8ee>
 80155c8:	4698      	mov	r8, r3
 80155ca:	e7f4      	b.n	80155b6 <_dtoa_r+0x8ee>
 80155cc:	f43f af7d 	beq.w	80154ca <_dtoa_r+0x802>
 80155d0:	4618      	mov	r0, r3
 80155d2:	301c      	adds	r0, #28
 80155d4:	e772      	b.n	80154bc <_dtoa_r+0x7f4>
 80155d6:	9b03      	ldr	r3, [sp, #12]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	dc37      	bgt.n	801564c <_dtoa_r+0x984>
 80155dc:	9b06      	ldr	r3, [sp, #24]
 80155de:	2b02      	cmp	r3, #2
 80155e0:	dd34      	ble.n	801564c <_dtoa_r+0x984>
 80155e2:	9b03      	ldr	r3, [sp, #12]
 80155e4:	9302      	str	r3, [sp, #8]
 80155e6:	9b02      	ldr	r3, [sp, #8]
 80155e8:	b96b      	cbnz	r3, 8015606 <_dtoa_r+0x93e>
 80155ea:	4631      	mov	r1, r6
 80155ec:	2205      	movs	r2, #5
 80155ee:	4620      	mov	r0, r4
 80155f0:	f000 fad6 	bl	8015ba0 <__multadd>
 80155f4:	4601      	mov	r1, r0
 80155f6:	4606      	mov	r6, r0
 80155f8:	ee18 0a10 	vmov	r0, s16
 80155fc:	f000 fcf0 	bl	8015fe0 <__mcmp>
 8015600:	2800      	cmp	r0, #0
 8015602:	f73f adbb 	bgt.w	801517c <_dtoa_r+0x4b4>
 8015606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015608:	9d01      	ldr	r5, [sp, #4]
 801560a:	43db      	mvns	r3, r3
 801560c:	9300      	str	r3, [sp, #0]
 801560e:	f04f 0800 	mov.w	r8, #0
 8015612:	4631      	mov	r1, r6
 8015614:	4620      	mov	r0, r4
 8015616:	f000 faa1 	bl	8015b5c <_Bfree>
 801561a:	2f00      	cmp	r7, #0
 801561c:	f43f aea4 	beq.w	8015368 <_dtoa_r+0x6a0>
 8015620:	f1b8 0f00 	cmp.w	r8, #0
 8015624:	d005      	beq.n	8015632 <_dtoa_r+0x96a>
 8015626:	45b8      	cmp	r8, r7
 8015628:	d003      	beq.n	8015632 <_dtoa_r+0x96a>
 801562a:	4641      	mov	r1, r8
 801562c:	4620      	mov	r0, r4
 801562e:	f000 fa95 	bl	8015b5c <_Bfree>
 8015632:	4639      	mov	r1, r7
 8015634:	4620      	mov	r0, r4
 8015636:	f000 fa91 	bl	8015b5c <_Bfree>
 801563a:	e695      	b.n	8015368 <_dtoa_r+0x6a0>
 801563c:	2600      	movs	r6, #0
 801563e:	4637      	mov	r7, r6
 8015640:	e7e1      	b.n	8015606 <_dtoa_r+0x93e>
 8015642:	9700      	str	r7, [sp, #0]
 8015644:	4637      	mov	r7, r6
 8015646:	e599      	b.n	801517c <_dtoa_r+0x4b4>
 8015648:	40240000 	.word	0x40240000
 801564c:	9b08      	ldr	r3, [sp, #32]
 801564e:	2b00      	cmp	r3, #0
 8015650:	f000 80ca 	beq.w	80157e8 <_dtoa_r+0xb20>
 8015654:	9b03      	ldr	r3, [sp, #12]
 8015656:	9302      	str	r3, [sp, #8]
 8015658:	2d00      	cmp	r5, #0
 801565a:	dd05      	ble.n	8015668 <_dtoa_r+0x9a0>
 801565c:	4639      	mov	r1, r7
 801565e:	462a      	mov	r2, r5
 8015660:	4620      	mov	r0, r4
 8015662:	f000 fc4d 	bl	8015f00 <__lshift>
 8015666:	4607      	mov	r7, r0
 8015668:	f1b8 0f00 	cmp.w	r8, #0
 801566c:	d05b      	beq.n	8015726 <_dtoa_r+0xa5e>
 801566e:	6879      	ldr	r1, [r7, #4]
 8015670:	4620      	mov	r0, r4
 8015672:	f000 fa33 	bl	8015adc <_Balloc>
 8015676:	4605      	mov	r5, r0
 8015678:	b928      	cbnz	r0, 8015686 <_dtoa_r+0x9be>
 801567a:	4b87      	ldr	r3, [pc, #540]	; (8015898 <_dtoa_r+0xbd0>)
 801567c:	4602      	mov	r2, r0
 801567e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8015682:	f7ff bb3b 	b.w	8014cfc <_dtoa_r+0x34>
 8015686:	693a      	ldr	r2, [r7, #16]
 8015688:	3202      	adds	r2, #2
 801568a:	0092      	lsls	r2, r2, #2
 801568c:	f107 010c 	add.w	r1, r7, #12
 8015690:	300c      	adds	r0, #12
 8015692:	f7fd ffdf 	bl	8013654 <memcpy>
 8015696:	2201      	movs	r2, #1
 8015698:	4629      	mov	r1, r5
 801569a:	4620      	mov	r0, r4
 801569c:	f000 fc30 	bl	8015f00 <__lshift>
 80156a0:	9b01      	ldr	r3, [sp, #4]
 80156a2:	f103 0901 	add.w	r9, r3, #1
 80156a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80156aa:	4413      	add	r3, r2
 80156ac:	9305      	str	r3, [sp, #20]
 80156ae:	f00a 0301 	and.w	r3, sl, #1
 80156b2:	46b8      	mov	r8, r7
 80156b4:	9304      	str	r3, [sp, #16]
 80156b6:	4607      	mov	r7, r0
 80156b8:	4631      	mov	r1, r6
 80156ba:	ee18 0a10 	vmov	r0, s16
 80156be:	f7ff fa77 	bl	8014bb0 <quorem>
 80156c2:	4641      	mov	r1, r8
 80156c4:	9002      	str	r0, [sp, #8]
 80156c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80156ca:	ee18 0a10 	vmov	r0, s16
 80156ce:	f000 fc87 	bl	8015fe0 <__mcmp>
 80156d2:	463a      	mov	r2, r7
 80156d4:	9003      	str	r0, [sp, #12]
 80156d6:	4631      	mov	r1, r6
 80156d8:	4620      	mov	r0, r4
 80156da:	f000 fc9d 	bl	8016018 <__mdiff>
 80156de:	68c2      	ldr	r2, [r0, #12]
 80156e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80156e4:	4605      	mov	r5, r0
 80156e6:	bb02      	cbnz	r2, 801572a <_dtoa_r+0xa62>
 80156e8:	4601      	mov	r1, r0
 80156ea:	ee18 0a10 	vmov	r0, s16
 80156ee:	f000 fc77 	bl	8015fe0 <__mcmp>
 80156f2:	4602      	mov	r2, r0
 80156f4:	4629      	mov	r1, r5
 80156f6:	4620      	mov	r0, r4
 80156f8:	9207      	str	r2, [sp, #28]
 80156fa:	f000 fa2f 	bl	8015b5c <_Bfree>
 80156fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8015702:	ea43 0102 	orr.w	r1, r3, r2
 8015706:	9b04      	ldr	r3, [sp, #16]
 8015708:	430b      	orrs	r3, r1
 801570a:	464d      	mov	r5, r9
 801570c:	d10f      	bne.n	801572e <_dtoa_r+0xa66>
 801570e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015712:	d02a      	beq.n	801576a <_dtoa_r+0xaa2>
 8015714:	9b03      	ldr	r3, [sp, #12]
 8015716:	2b00      	cmp	r3, #0
 8015718:	dd02      	ble.n	8015720 <_dtoa_r+0xa58>
 801571a:	9b02      	ldr	r3, [sp, #8]
 801571c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8015720:	f88b a000 	strb.w	sl, [fp]
 8015724:	e775      	b.n	8015612 <_dtoa_r+0x94a>
 8015726:	4638      	mov	r0, r7
 8015728:	e7ba      	b.n	80156a0 <_dtoa_r+0x9d8>
 801572a:	2201      	movs	r2, #1
 801572c:	e7e2      	b.n	80156f4 <_dtoa_r+0xa2c>
 801572e:	9b03      	ldr	r3, [sp, #12]
 8015730:	2b00      	cmp	r3, #0
 8015732:	db04      	blt.n	801573e <_dtoa_r+0xa76>
 8015734:	9906      	ldr	r1, [sp, #24]
 8015736:	430b      	orrs	r3, r1
 8015738:	9904      	ldr	r1, [sp, #16]
 801573a:	430b      	orrs	r3, r1
 801573c:	d122      	bne.n	8015784 <_dtoa_r+0xabc>
 801573e:	2a00      	cmp	r2, #0
 8015740:	ddee      	ble.n	8015720 <_dtoa_r+0xa58>
 8015742:	ee18 1a10 	vmov	r1, s16
 8015746:	2201      	movs	r2, #1
 8015748:	4620      	mov	r0, r4
 801574a:	f000 fbd9 	bl	8015f00 <__lshift>
 801574e:	4631      	mov	r1, r6
 8015750:	ee08 0a10 	vmov	s16, r0
 8015754:	f000 fc44 	bl	8015fe0 <__mcmp>
 8015758:	2800      	cmp	r0, #0
 801575a:	dc03      	bgt.n	8015764 <_dtoa_r+0xa9c>
 801575c:	d1e0      	bne.n	8015720 <_dtoa_r+0xa58>
 801575e:	f01a 0f01 	tst.w	sl, #1
 8015762:	d0dd      	beq.n	8015720 <_dtoa_r+0xa58>
 8015764:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8015768:	d1d7      	bne.n	801571a <_dtoa_r+0xa52>
 801576a:	2339      	movs	r3, #57	; 0x39
 801576c:	f88b 3000 	strb.w	r3, [fp]
 8015770:	462b      	mov	r3, r5
 8015772:	461d      	mov	r5, r3
 8015774:	3b01      	subs	r3, #1
 8015776:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801577a:	2a39      	cmp	r2, #57	; 0x39
 801577c:	d071      	beq.n	8015862 <_dtoa_r+0xb9a>
 801577e:	3201      	adds	r2, #1
 8015780:	701a      	strb	r2, [r3, #0]
 8015782:	e746      	b.n	8015612 <_dtoa_r+0x94a>
 8015784:	2a00      	cmp	r2, #0
 8015786:	dd07      	ble.n	8015798 <_dtoa_r+0xad0>
 8015788:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801578c:	d0ed      	beq.n	801576a <_dtoa_r+0xaa2>
 801578e:	f10a 0301 	add.w	r3, sl, #1
 8015792:	f88b 3000 	strb.w	r3, [fp]
 8015796:	e73c      	b.n	8015612 <_dtoa_r+0x94a>
 8015798:	9b05      	ldr	r3, [sp, #20]
 801579a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801579e:	4599      	cmp	r9, r3
 80157a0:	d047      	beq.n	8015832 <_dtoa_r+0xb6a>
 80157a2:	ee18 1a10 	vmov	r1, s16
 80157a6:	2300      	movs	r3, #0
 80157a8:	220a      	movs	r2, #10
 80157aa:	4620      	mov	r0, r4
 80157ac:	f000 f9f8 	bl	8015ba0 <__multadd>
 80157b0:	45b8      	cmp	r8, r7
 80157b2:	ee08 0a10 	vmov	s16, r0
 80157b6:	f04f 0300 	mov.w	r3, #0
 80157ba:	f04f 020a 	mov.w	r2, #10
 80157be:	4641      	mov	r1, r8
 80157c0:	4620      	mov	r0, r4
 80157c2:	d106      	bne.n	80157d2 <_dtoa_r+0xb0a>
 80157c4:	f000 f9ec 	bl	8015ba0 <__multadd>
 80157c8:	4680      	mov	r8, r0
 80157ca:	4607      	mov	r7, r0
 80157cc:	f109 0901 	add.w	r9, r9, #1
 80157d0:	e772      	b.n	80156b8 <_dtoa_r+0x9f0>
 80157d2:	f000 f9e5 	bl	8015ba0 <__multadd>
 80157d6:	4639      	mov	r1, r7
 80157d8:	4680      	mov	r8, r0
 80157da:	2300      	movs	r3, #0
 80157dc:	220a      	movs	r2, #10
 80157de:	4620      	mov	r0, r4
 80157e0:	f000 f9de 	bl	8015ba0 <__multadd>
 80157e4:	4607      	mov	r7, r0
 80157e6:	e7f1      	b.n	80157cc <_dtoa_r+0xb04>
 80157e8:	9b03      	ldr	r3, [sp, #12]
 80157ea:	9302      	str	r3, [sp, #8]
 80157ec:	9d01      	ldr	r5, [sp, #4]
 80157ee:	ee18 0a10 	vmov	r0, s16
 80157f2:	4631      	mov	r1, r6
 80157f4:	f7ff f9dc 	bl	8014bb0 <quorem>
 80157f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80157fc:	9b01      	ldr	r3, [sp, #4]
 80157fe:	f805 ab01 	strb.w	sl, [r5], #1
 8015802:	1aea      	subs	r2, r5, r3
 8015804:	9b02      	ldr	r3, [sp, #8]
 8015806:	4293      	cmp	r3, r2
 8015808:	dd09      	ble.n	801581e <_dtoa_r+0xb56>
 801580a:	ee18 1a10 	vmov	r1, s16
 801580e:	2300      	movs	r3, #0
 8015810:	220a      	movs	r2, #10
 8015812:	4620      	mov	r0, r4
 8015814:	f000 f9c4 	bl	8015ba0 <__multadd>
 8015818:	ee08 0a10 	vmov	s16, r0
 801581c:	e7e7      	b.n	80157ee <_dtoa_r+0xb26>
 801581e:	9b02      	ldr	r3, [sp, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	bfc8      	it	gt
 8015824:	461d      	movgt	r5, r3
 8015826:	9b01      	ldr	r3, [sp, #4]
 8015828:	bfd8      	it	le
 801582a:	2501      	movle	r5, #1
 801582c:	441d      	add	r5, r3
 801582e:	f04f 0800 	mov.w	r8, #0
 8015832:	ee18 1a10 	vmov	r1, s16
 8015836:	2201      	movs	r2, #1
 8015838:	4620      	mov	r0, r4
 801583a:	f000 fb61 	bl	8015f00 <__lshift>
 801583e:	4631      	mov	r1, r6
 8015840:	ee08 0a10 	vmov	s16, r0
 8015844:	f000 fbcc 	bl	8015fe0 <__mcmp>
 8015848:	2800      	cmp	r0, #0
 801584a:	dc91      	bgt.n	8015770 <_dtoa_r+0xaa8>
 801584c:	d102      	bne.n	8015854 <_dtoa_r+0xb8c>
 801584e:	f01a 0f01 	tst.w	sl, #1
 8015852:	d18d      	bne.n	8015770 <_dtoa_r+0xaa8>
 8015854:	462b      	mov	r3, r5
 8015856:	461d      	mov	r5, r3
 8015858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801585c:	2a30      	cmp	r2, #48	; 0x30
 801585e:	d0fa      	beq.n	8015856 <_dtoa_r+0xb8e>
 8015860:	e6d7      	b.n	8015612 <_dtoa_r+0x94a>
 8015862:	9a01      	ldr	r2, [sp, #4]
 8015864:	429a      	cmp	r2, r3
 8015866:	d184      	bne.n	8015772 <_dtoa_r+0xaaa>
 8015868:	9b00      	ldr	r3, [sp, #0]
 801586a:	3301      	adds	r3, #1
 801586c:	9300      	str	r3, [sp, #0]
 801586e:	2331      	movs	r3, #49	; 0x31
 8015870:	7013      	strb	r3, [r2, #0]
 8015872:	e6ce      	b.n	8015612 <_dtoa_r+0x94a>
 8015874:	4b09      	ldr	r3, [pc, #36]	; (801589c <_dtoa_r+0xbd4>)
 8015876:	f7ff ba95 	b.w	8014da4 <_dtoa_r+0xdc>
 801587a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801587c:	2b00      	cmp	r3, #0
 801587e:	f47f aa6e 	bne.w	8014d5e <_dtoa_r+0x96>
 8015882:	4b07      	ldr	r3, [pc, #28]	; (80158a0 <_dtoa_r+0xbd8>)
 8015884:	f7ff ba8e 	b.w	8014da4 <_dtoa_r+0xdc>
 8015888:	9b02      	ldr	r3, [sp, #8]
 801588a:	2b00      	cmp	r3, #0
 801588c:	dcae      	bgt.n	80157ec <_dtoa_r+0xb24>
 801588e:	9b06      	ldr	r3, [sp, #24]
 8015890:	2b02      	cmp	r3, #2
 8015892:	f73f aea8 	bgt.w	80155e6 <_dtoa_r+0x91e>
 8015896:	e7a9      	b.n	80157ec <_dtoa_r+0xb24>
 8015898:	080193c5 	.word	0x080193c5
 801589c:	080196b6 	.word	0x080196b6
 80158a0:	0801935d 	.word	0x0801935d

080158a4 <fiprintf>:
 80158a4:	b40e      	push	{r1, r2, r3}
 80158a6:	b503      	push	{r0, r1, lr}
 80158a8:	4601      	mov	r1, r0
 80158aa:	ab03      	add	r3, sp, #12
 80158ac:	4805      	ldr	r0, [pc, #20]	; (80158c4 <fiprintf+0x20>)
 80158ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80158b2:	6800      	ldr	r0, [r0, #0]
 80158b4:	9301      	str	r3, [sp, #4]
 80158b6:	f000 fe31 	bl	801651c <_vfiprintf_r>
 80158ba:	b002      	add	sp, #8
 80158bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80158c0:	b003      	add	sp, #12
 80158c2:	4770      	bx	lr
 80158c4:	20000020 	.word	0x20000020

080158c8 <_findenv_r>:
 80158c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158cc:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801593c <_findenv_r+0x74>
 80158d0:	4607      	mov	r7, r0
 80158d2:	4689      	mov	r9, r1
 80158d4:	4616      	mov	r6, r2
 80158d6:	f001 f947 	bl	8016b68 <__env_lock>
 80158da:	f8da 4000 	ldr.w	r4, [sl]
 80158de:	b134      	cbz	r4, 80158ee <_findenv_r+0x26>
 80158e0:	464b      	mov	r3, r9
 80158e2:	4698      	mov	r8, r3
 80158e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158e8:	b13a      	cbz	r2, 80158fa <_findenv_r+0x32>
 80158ea:	2a3d      	cmp	r2, #61	; 0x3d
 80158ec:	d1f9      	bne.n	80158e2 <_findenv_r+0x1a>
 80158ee:	4638      	mov	r0, r7
 80158f0:	f001 f940 	bl	8016b74 <__env_unlock>
 80158f4:	2000      	movs	r0, #0
 80158f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158fa:	eba8 0809 	sub.w	r8, r8, r9
 80158fe:	46a3      	mov	fp, r4
 8015900:	f854 0b04 	ldr.w	r0, [r4], #4
 8015904:	2800      	cmp	r0, #0
 8015906:	d0f2      	beq.n	80158ee <_findenv_r+0x26>
 8015908:	4642      	mov	r2, r8
 801590a:	4649      	mov	r1, r9
 801590c:	f000 ffaf 	bl	801686e <strncmp>
 8015910:	2800      	cmp	r0, #0
 8015912:	d1f4      	bne.n	80158fe <_findenv_r+0x36>
 8015914:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8015918:	eb03 0508 	add.w	r5, r3, r8
 801591c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8015920:	2b3d      	cmp	r3, #61	; 0x3d
 8015922:	d1ec      	bne.n	80158fe <_findenv_r+0x36>
 8015924:	f8da 3000 	ldr.w	r3, [sl]
 8015928:	ebab 0303 	sub.w	r3, fp, r3
 801592c:	109b      	asrs	r3, r3, #2
 801592e:	4638      	mov	r0, r7
 8015930:	6033      	str	r3, [r6, #0]
 8015932:	f001 f91f 	bl	8016b74 <__env_unlock>
 8015936:	1c68      	adds	r0, r5, #1
 8015938:	e7dd      	b.n	80158f6 <_findenv_r+0x2e>
 801593a:	bf00      	nop
 801593c:	20000010 	.word	0x20000010

08015940 <_getenv_r>:
 8015940:	b507      	push	{r0, r1, r2, lr}
 8015942:	aa01      	add	r2, sp, #4
 8015944:	f7ff ffc0 	bl	80158c8 <_findenv_r>
 8015948:	b003      	add	sp, #12
 801594a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015950 <__gettzinfo>:
 8015950:	4800      	ldr	r0, [pc, #0]	; (8015954 <__gettzinfo+0x4>)
 8015952:	4770      	bx	lr
 8015954:	20000090 	.word	0x20000090

08015958 <gmtime_r>:
 8015958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801595c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8015960:	460c      	mov	r4, r1
 8015962:	4a4f      	ldr	r2, [pc, #316]	; (8015aa0 <gmtime_r+0x148>)
 8015964:	2300      	movs	r3, #0
 8015966:	4630      	mov	r0, r6
 8015968:	4639      	mov	r1, r7
 801596a:	f7eb f96f 	bl	8000c4c <__aeabi_ldivmod>
 801596e:	4639      	mov	r1, r7
 8015970:	4605      	mov	r5, r0
 8015972:	4a4b      	ldr	r2, [pc, #300]	; (8015aa0 <gmtime_r+0x148>)
 8015974:	4630      	mov	r0, r6
 8015976:	2300      	movs	r3, #0
 8015978:	f7eb f968 	bl	8000c4c <__aeabi_ldivmod>
 801597c:	2a00      	cmp	r2, #0
 801597e:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8015982:	bfb7      	itett	lt
 8015984:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8015988:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 801598c:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8015990:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8015994:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8015998:	fbb2 f1f0 	udiv	r1, r2, r0
 801599c:	fb00 2211 	mls	r2, r0, r1, r2
 80159a0:	203c      	movs	r0, #60	; 0x3c
 80159a2:	60a1      	str	r1, [r4, #8]
 80159a4:	fbb2 f1f0 	udiv	r1, r2, r0
 80159a8:	fb00 2211 	mls	r2, r0, r1, r2
 80159ac:	6061      	str	r1, [r4, #4]
 80159ae:	6022      	str	r2, [r4, #0]
 80159b0:	2107      	movs	r1, #7
 80159b2:	1cda      	adds	r2, r3, #3
 80159b4:	fb92 f1f1 	sdiv	r1, r2, r1
 80159b8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80159bc:	1a52      	subs	r2, r2, r1
 80159be:	bf48      	it	mi
 80159c0:	3207      	addmi	r2, #7
 80159c2:	4d38      	ldr	r5, [pc, #224]	; (8015aa4 <gmtime_r+0x14c>)
 80159c4:	4838      	ldr	r0, [pc, #224]	; (8015aa8 <gmtime_r+0x150>)
 80159c6:	61a2      	str	r2, [r4, #24]
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	bfb7      	itett	lt
 80159cc:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 80159d0:	fb93 f5f5 	sdivge	r5, r3, r5
 80159d4:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80159d8:	fb92 f5f5 	sdivlt	r5, r2, r5
 80159dc:	fb00 3005 	mla	r0, r0, r5, r3
 80159e0:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80159e4:	fbb0 f2f2 	udiv	r2, r0, r2
 80159e8:	4402      	add	r2, r0
 80159ea:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80159ee:	fbb0 f1f3 	udiv	r1, r0, r3
 80159f2:	1a52      	subs	r2, r2, r1
 80159f4:	f240 1c6d 	movw	ip, #365	; 0x16d
 80159f8:	492c      	ldr	r1, [pc, #176]	; (8015aac <gmtime_r+0x154>)
 80159fa:	fbb0 f1f1 	udiv	r1, r0, r1
 80159fe:	2764      	movs	r7, #100	; 0x64
 8015a00:	1a52      	subs	r2, r2, r1
 8015a02:	fbb2 f1fc 	udiv	r1, r2, ip
 8015a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8015a0a:	fbb1 f6f7 	udiv	r6, r1, r7
 8015a0e:	1af3      	subs	r3, r6, r3
 8015a10:	4403      	add	r3, r0
 8015a12:	fb0c 3311 	mls	r3, ip, r1, r3
 8015a16:	2299      	movs	r2, #153	; 0x99
 8015a18:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 8015a1c:	f10e 0e02 	add.w	lr, lr, #2
 8015a20:	f103 0c01 	add.w	ip, r3, #1
 8015a24:	fbbe f0f2 	udiv	r0, lr, r2
 8015a28:	4342      	muls	r2, r0
 8015a2a:	3202      	adds	r2, #2
 8015a2c:	f04f 0805 	mov.w	r8, #5
 8015a30:	fbb2 f2f8 	udiv	r2, r2, r8
 8015a34:	ebac 0c02 	sub.w	ip, ip, r2
 8015a38:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8015a3c:	4596      	cmp	lr, r2
 8015a3e:	bf94      	ite	ls
 8015a40:	2202      	movls	r2, #2
 8015a42:	f06f 0209 	mvnhi.w	r2, #9
 8015a46:	4410      	add	r0, r2
 8015a48:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015a4c:	fb02 1505 	mla	r5, r2, r5, r1
 8015a50:	2801      	cmp	r0, #1
 8015a52:	bf98      	it	ls
 8015a54:	3501      	addls	r5, #1
 8015a56:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8015a5a:	d30d      	bcc.n	8015a78 <gmtime_r+0x120>
 8015a5c:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8015a60:	61e3      	str	r3, [r4, #28]
 8015a62:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8015a66:	2300      	movs	r3, #0
 8015a68:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8015a6c:	f8c4 c00c 	str.w	ip, [r4, #12]
 8015a70:	6223      	str	r3, [r4, #32]
 8015a72:	4620      	mov	r0, r4
 8015a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a78:	078a      	lsls	r2, r1, #30
 8015a7a:	d102      	bne.n	8015a82 <gmtime_r+0x12a>
 8015a7c:	fb07 1616 	mls	r6, r7, r6, r1
 8015a80:	b95e      	cbnz	r6, 8015a9a <gmtime_r+0x142>
 8015a82:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8015a86:	fbb1 f6f2 	udiv	r6, r1, r2
 8015a8a:	fb02 1216 	mls	r2, r2, r6, r1
 8015a8e:	fab2 f282 	clz	r2, r2
 8015a92:	0952      	lsrs	r2, r2, #5
 8015a94:	333b      	adds	r3, #59	; 0x3b
 8015a96:	4413      	add	r3, r2
 8015a98:	e7e2      	b.n	8015a60 <gmtime_r+0x108>
 8015a9a:	2201      	movs	r2, #1
 8015a9c:	e7fa      	b.n	8015a94 <gmtime_r+0x13c>
 8015a9e:	bf00      	nop
 8015aa0:	00015180 	.word	0x00015180
 8015aa4:	00023ab1 	.word	0x00023ab1
 8015aa8:	fffdc54f 	.word	0xfffdc54f
 8015aac:	00023ab0 	.word	0x00023ab0

08015ab0 <_localeconv_r>:
 8015ab0:	4800      	ldr	r0, [pc, #0]	; (8015ab4 <_localeconv_r+0x4>)
 8015ab2:	4770      	bx	lr
 8015ab4:	200001d8 	.word	0x200001d8

08015ab8 <__retarget_lock_init_recursive>:
 8015ab8:	4770      	bx	lr

08015aba <__retarget_lock_acquire>:
 8015aba:	4770      	bx	lr

08015abc <__retarget_lock_acquire_recursive>:
 8015abc:	4770      	bx	lr

08015abe <__retarget_lock_release>:
 8015abe:	4770      	bx	lr

08015ac0 <__retarget_lock_release_recursive>:
 8015ac0:	4770      	bx	lr
	...

08015ac4 <__malloc_lock>:
 8015ac4:	4801      	ldr	r0, [pc, #4]	; (8015acc <__malloc_lock+0x8>)
 8015ac6:	f7ff bff9 	b.w	8015abc <__retarget_lock_acquire_recursive>
 8015aca:	bf00      	nop
 8015acc:	2000a7b5 	.word	0x2000a7b5

08015ad0 <__malloc_unlock>:
 8015ad0:	4801      	ldr	r0, [pc, #4]	; (8015ad8 <__malloc_unlock+0x8>)
 8015ad2:	f7ff bff5 	b.w	8015ac0 <__retarget_lock_release_recursive>
 8015ad6:	bf00      	nop
 8015ad8:	2000a7b5 	.word	0x2000a7b5

08015adc <_Balloc>:
 8015adc:	b570      	push	{r4, r5, r6, lr}
 8015ade:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015ae0:	4604      	mov	r4, r0
 8015ae2:	460d      	mov	r5, r1
 8015ae4:	b976      	cbnz	r6, 8015b04 <_Balloc+0x28>
 8015ae6:	2010      	movs	r0, #16
 8015ae8:	f7fd fda4 	bl	8013634 <malloc>
 8015aec:	4602      	mov	r2, r0
 8015aee:	6260      	str	r0, [r4, #36]	; 0x24
 8015af0:	b920      	cbnz	r0, 8015afc <_Balloc+0x20>
 8015af2:	4b18      	ldr	r3, [pc, #96]	; (8015b54 <_Balloc+0x78>)
 8015af4:	4818      	ldr	r0, [pc, #96]	; (8015b58 <_Balloc+0x7c>)
 8015af6:	2166      	movs	r1, #102	; 0x66
 8015af8:	f7ff f828 	bl	8014b4c <__assert_func>
 8015afc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b00:	6006      	str	r6, [r0, #0]
 8015b02:	60c6      	str	r6, [r0, #12]
 8015b04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015b06:	68f3      	ldr	r3, [r6, #12]
 8015b08:	b183      	cbz	r3, 8015b2c <_Balloc+0x50>
 8015b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b0c:	68db      	ldr	r3, [r3, #12]
 8015b0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b12:	b9b8      	cbnz	r0, 8015b44 <_Balloc+0x68>
 8015b14:	2101      	movs	r1, #1
 8015b16:	fa01 f605 	lsl.w	r6, r1, r5
 8015b1a:	1d72      	adds	r2, r6, #5
 8015b1c:	0092      	lsls	r2, r2, #2
 8015b1e:	4620      	mov	r0, r4
 8015b20:	f000 fb60 	bl	80161e4 <_calloc_r>
 8015b24:	b160      	cbz	r0, 8015b40 <_Balloc+0x64>
 8015b26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015b2a:	e00e      	b.n	8015b4a <_Balloc+0x6e>
 8015b2c:	2221      	movs	r2, #33	; 0x21
 8015b2e:	2104      	movs	r1, #4
 8015b30:	4620      	mov	r0, r4
 8015b32:	f000 fb57 	bl	80161e4 <_calloc_r>
 8015b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b38:	60f0      	str	r0, [r6, #12]
 8015b3a:	68db      	ldr	r3, [r3, #12]
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d1e4      	bne.n	8015b0a <_Balloc+0x2e>
 8015b40:	2000      	movs	r0, #0
 8015b42:	bd70      	pop	{r4, r5, r6, pc}
 8015b44:	6802      	ldr	r2, [r0, #0]
 8015b46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015b50:	e7f7      	b.n	8015b42 <_Balloc+0x66>
 8015b52:	bf00      	nop
 8015b54:	08019124 	.word	0x08019124
 8015b58:	080193d6 	.word	0x080193d6

08015b5c <_Bfree>:
 8015b5c:	b570      	push	{r4, r5, r6, lr}
 8015b5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b60:	4605      	mov	r5, r0
 8015b62:	460c      	mov	r4, r1
 8015b64:	b976      	cbnz	r6, 8015b84 <_Bfree+0x28>
 8015b66:	2010      	movs	r0, #16
 8015b68:	f7fd fd64 	bl	8013634 <malloc>
 8015b6c:	4602      	mov	r2, r0
 8015b6e:	6268      	str	r0, [r5, #36]	; 0x24
 8015b70:	b920      	cbnz	r0, 8015b7c <_Bfree+0x20>
 8015b72:	4b09      	ldr	r3, [pc, #36]	; (8015b98 <_Bfree+0x3c>)
 8015b74:	4809      	ldr	r0, [pc, #36]	; (8015b9c <_Bfree+0x40>)
 8015b76:	218a      	movs	r1, #138	; 0x8a
 8015b78:	f7fe ffe8 	bl	8014b4c <__assert_func>
 8015b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b80:	6006      	str	r6, [r0, #0]
 8015b82:	60c6      	str	r6, [r0, #12]
 8015b84:	b13c      	cbz	r4, 8015b96 <_Bfree+0x3a>
 8015b86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015b88:	6862      	ldr	r2, [r4, #4]
 8015b8a:	68db      	ldr	r3, [r3, #12]
 8015b8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015b90:	6021      	str	r1, [r4, #0]
 8015b92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015b96:	bd70      	pop	{r4, r5, r6, pc}
 8015b98:	08019124 	.word	0x08019124
 8015b9c:	080193d6 	.word	0x080193d6

08015ba0 <__multadd>:
 8015ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba4:	690d      	ldr	r5, [r1, #16]
 8015ba6:	4607      	mov	r7, r0
 8015ba8:	460c      	mov	r4, r1
 8015baa:	461e      	mov	r6, r3
 8015bac:	f101 0c14 	add.w	ip, r1, #20
 8015bb0:	2000      	movs	r0, #0
 8015bb2:	f8dc 3000 	ldr.w	r3, [ip]
 8015bb6:	b299      	uxth	r1, r3
 8015bb8:	fb02 6101 	mla	r1, r2, r1, r6
 8015bbc:	0c1e      	lsrs	r6, r3, #16
 8015bbe:	0c0b      	lsrs	r3, r1, #16
 8015bc0:	fb02 3306 	mla	r3, r2, r6, r3
 8015bc4:	b289      	uxth	r1, r1
 8015bc6:	3001      	adds	r0, #1
 8015bc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015bcc:	4285      	cmp	r5, r0
 8015bce:	f84c 1b04 	str.w	r1, [ip], #4
 8015bd2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015bd6:	dcec      	bgt.n	8015bb2 <__multadd+0x12>
 8015bd8:	b30e      	cbz	r6, 8015c1e <__multadd+0x7e>
 8015bda:	68a3      	ldr	r3, [r4, #8]
 8015bdc:	42ab      	cmp	r3, r5
 8015bde:	dc19      	bgt.n	8015c14 <__multadd+0x74>
 8015be0:	6861      	ldr	r1, [r4, #4]
 8015be2:	4638      	mov	r0, r7
 8015be4:	3101      	adds	r1, #1
 8015be6:	f7ff ff79 	bl	8015adc <_Balloc>
 8015bea:	4680      	mov	r8, r0
 8015bec:	b928      	cbnz	r0, 8015bfa <__multadd+0x5a>
 8015bee:	4602      	mov	r2, r0
 8015bf0:	4b0c      	ldr	r3, [pc, #48]	; (8015c24 <__multadd+0x84>)
 8015bf2:	480d      	ldr	r0, [pc, #52]	; (8015c28 <__multadd+0x88>)
 8015bf4:	21b5      	movs	r1, #181	; 0xb5
 8015bf6:	f7fe ffa9 	bl	8014b4c <__assert_func>
 8015bfa:	6922      	ldr	r2, [r4, #16]
 8015bfc:	3202      	adds	r2, #2
 8015bfe:	f104 010c 	add.w	r1, r4, #12
 8015c02:	0092      	lsls	r2, r2, #2
 8015c04:	300c      	adds	r0, #12
 8015c06:	f7fd fd25 	bl	8013654 <memcpy>
 8015c0a:	4621      	mov	r1, r4
 8015c0c:	4638      	mov	r0, r7
 8015c0e:	f7ff ffa5 	bl	8015b5c <_Bfree>
 8015c12:	4644      	mov	r4, r8
 8015c14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015c18:	3501      	adds	r5, #1
 8015c1a:	615e      	str	r6, [r3, #20]
 8015c1c:	6125      	str	r5, [r4, #16]
 8015c1e:	4620      	mov	r0, r4
 8015c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c24:	080193c5 	.word	0x080193c5
 8015c28:	080193d6 	.word	0x080193d6

08015c2c <__hi0bits>:
 8015c2c:	0c03      	lsrs	r3, r0, #16
 8015c2e:	041b      	lsls	r3, r3, #16
 8015c30:	b9d3      	cbnz	r3, 8015c68 <__hi0bits+0x3c>
 8015c32:	0400      	lsls	r0, r0, #16
 8015c34:	2310      	movs	r3, #16
 8015c36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015c3a:	bf04      	itt	eq
 8015c3c:	0200      	lsleq	r0, r0, #8
 8015c3e:	3308      	addeq	r3, #8
 8015c40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015c44:	bf04      	itt	eq
 8015c46:	0100      	lsleq	r0, r0, #4
 8015c48:	3304      	addeq	r3, #4
 8015c4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015c4e:	bf04      	itt	eq
 8015c50:	0080      	lsleq	r0, r0, #2
 8015c52:	3302      	addeq	r3, #2
 8015c54:	2800      	cmp	r0, #0
 8015c56:	db05      	blt.n	8015c64 <__hi0bits+0x38>
 8015c58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015c5c:	f103 0301 	add.w	r3, r3, #1
 8015c60:	bf08      	it	eq
 8015c62:	2320      	moveq	r3, #32
 8015c64:	4618      	mov	r0, r3
 8015c66:	4770      	bx	lr
 8015c68:	2300      	movs	r3, #0
 8015c6a:	e7e4      	b.n	8015c36 <__hi0bits+0xa>

08015c6c <__lo0bits>:
 8015c6c:	6803      	ldr	r3, [r0, #0]
 8015c6e:	f013 0207 	ands.w	r2, r3, #7
 8015c72:	4601      	mov	r1, r0
 8015c74:	d00b      	beq.n	8015c8e <__lo0bits+0x22>
 8015c76:	07da      	lsls	r2, r3, #31
 8015c78:	d423      	bmi.n	8015cc2 <__lo0bits+0x56>
 8015c7a:	0798      	lsls	r0, r3, #30
 8015c7c:	bf49      	itett	mi
 8015c7e:	085b      	lsrmi	r3, r3, #1
 8015c80:	089b      	lsrpl	r3, r3, #2
 8015c82:	2001      	movmi	r0, #1
 8015c84:	600b      	strmi	r3, [r1, #0]
 8015c86:	bf5c      	itt	pl
 8015c88:	600b      	strpl	r3, [r1, #0]
 8015c8a:	2002      	movpl	r0, #2
 8015c8c:	4770      	bx	lr
 8015c8e:	b298      	uxth	r0, r3
 8015c90:	b9a8      	cbnz	r0, 8015cbe <__lo0bits+0x52>
 8015c92:	0c1b      	lsrs	r3, r3, #16
 8015c94:	2010      	movs	r0, #16
 8015c96:	b2da      	uxtb	r2, r3
 8015c98:	b90a      	cbnz	r2, 8015c9e <__lo0bits+0x32>
 8015c9a:	3008      	adds	r0, #8
 8015c9c:	0a1b      	lsrs	r3, r3, #8
 8015c9e:	071a      	lsls	r2, r3, #28
 8015ca0:	bf04      	itt	eq
 8015ca2:	091b      	lsreq	r3, r3, #4
 8015ca4:	3004      	addeq	r0, #4
 8015ca6:	079a      	lsls	r2, r3, #30
 8015ca8:	bf04      	itt	eq
 8015caa:	089b      	lsreq	r3, r3, #2
 8015cac:	3002      	addeq	r0, #2
 8015cae:	07da      	lsls	r2, r3, #31
 8015cb0:	d403      	bmi.n	8015cba <__lo0bits+0x4e>
 8015cb2:	085b      	lsrs	r3, r3, #1
 8015cb4:	f100 0001 	add.w	r0, r0, #1
 8015cb8:	d005      	beq.n	8015cc6 <__lo0bits+0x5a>
 8015cba:	600b      	str	r3, [r1, #0]
 8015cbc:	4770      	bx	lr
 8015cbe:	4610      	mov	r0, r2
 8015cc0:	e7e9      	b.n	8015c96 <__lo0bits+0x2a>
 8015cc2:	2000      	movs	r0, #0
 8015cc4:	4770      	bx	lr
 8015cc6:	2020      	movs	r0, #32
 8015cc8:	4770      	bx	lr
	...

08015ccc <__i2b>:
 8015ccc:	b510      	push	{r4, lr}
 8015cce:	460c      	mov	r4, r1
 8015cd0:	2101      	movs	r1, #1
 8015cd2:	f7ff ff03 	bl	8015adc <_Balloc>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	b928      	cbnz	r0, 8015ce6 <__i2b+0x1a>
 8015cda:	4b05      	ldr	r3, [pc, #20]	; (8015cf0 <__i2b+0x24>)
 8015cdc:	4805      	ldr	r0, [pc, #20]	; (8015cf4 <__i2b+0x28>)
 8015cde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015ce2:	f7fe ff33 	bl	8014b4c <__assert_func>
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	6144      	str	r4, [r0, #20]
 8015cea:	6103      	str	r3, [r0, #16]
 8015cec:	bd10      	pop	{r4, pc}
 8015cee:	bf00      	nop
 8015cf0:	080193c5 	.word	0x080193c5
 8015cf4:	080193d6 	.word	0x080193d6

08015cf8 <__multiply>:
 8015cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cfc:	4691      	mov	r9, r2
 8015cfe:	690a      	ldr	r2, [r1, #16]
 8015d00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d04:	429a      	cmp	r2, r3
 8015d06:	bfb8      	it	lt
 8015d08:	460b      	movlt	r3, r1
 8015d0a:	460c      	mov	r4, r1
 8015d0c:	bfbc      	itt	lt
 8015d0e:	464c      	movlt	r4, r9
 8015d10:	4699      	movlt	r9, r3
 8015d12:	6927      	ldr	r7, [r4, #16]
 8015d14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015d18:	68a3      	ldr	r3, [r4, #8]
 8015d1a:	6861      	ldr	r1, [r4, #4]
 8015d1c:	eb07 060a 	add.w	r6, r7, sl
 8015d20:	42b3      	cmp	r3, r6
 8015d22:	b085      	sub	sp, #20
 8015d24:	bfb8      	it	lt
 8015d26:	3101      	addlt	r1, #1
 8015d28:	f7ff fed8 	bl	8015adc <_Balloc>
 8015d2c:	b930      	cbnz	r0, 8015d3c <__multiply+0x44>
 8015d2e:	4602      	mov	r2, r0
 8015d30:	4b44      	ldr	r3, [pc, #272]	; (8015e44 <__multiply+0x14c>)
 8015d32:	4845      	ldr	r0, [pc, #276]	; (8015e48 <__multiply+0x150>)
 8015d34:	f240 115d 	movw	r1, #349	; 0x15d
 8015d38:	f7fe ff08 	bl	8014b4c <__assert_func>
 8015d3c:	f100 0514 	add.w	r5, r0, #20
 8015d40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015d44:	462b      	mov	r3, r5
 8015d46:	2200      	movs	r2, #0
 8015d48:	4543      	cmp	r3, r8
 8015d4a:	d321      	bcc.n	8015d90 <__multiply+0x98>
 8015d4c:	f104 0314 	add.w	r3, r4, #20
 8015d50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015d54:	f109 0314 	add.w	r3, r9, #20
 8015d58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015d5c:	9202      	str	r2, [sp, #8]
 8015d5e:	1b3a      	subs	r2, r7, r4
 8015d60:	3a15      	subs	r2, #21
 8015d62:	f022 0203 	bic.w	r2, r2, #3
 8015d66:	3204      	adds	r2, #4
 8015d68:	f104 0115 	add.w	r1, r4, #21
 8015d6c:	428f      	cmp	r7, r1
 8015d6e:	bf38      	it	cc
 8015d70:	2204      	movcc	r2, #4
 8015d72:	9201      	str	r2, [sp, #4]
 8015d74:	9a02      	ldr	r2, [sp, #8]
 8015d76:	9303      	str	r3, [sp, #12]
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	d80c      	bhi.n	8015d96 <__multiply+0x9e>
 8015d7c:	2e00      	cmp	r6, #0
 8015d7e:	dd03      	ble.n	8015d88 <__multiply+0x90>
 8015d80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d05a      	beq.n	8015e3e <__multiply+0x146>
 8015d88:	6106      	str	r6, [r0, #16]
 8015d8a:	b005      	add	sp, #20
 8015d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d90:	f843 2b04 	str.w	r2, [r3], #4
 8015d94:	e7d8      	b.n	8015d48 <__multiply+0x50>
 8015d96:	f8b3 a000 	ldrh.w	sl, [r3]
 8015d9a:	f1ba 0f00 	cmp.w	sl, #0
 8015d9e:	d024      	beq.n	8015dea <__multiply+0xf2>
 8015da0:	f104 0e14 	add.w	lr, r4, #20
 8015da4:	46a9      	mov	r9, r5
 8015da6:	f04f 0c00 	mov.w	ip, #0
 8015daa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015dae:	f8d9 1000 	ldr.w	r1, [r9]
 8015db2:	fa1f fb82 	uxth.w	fp, r2
 8015db6:	b289      	uxth	r1, r1
 8015db8:	fb0a 110b 	mla	r1, sl, fp, r1
 8015dbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015dc0:	f8d9 2000 	ldr.w	r2, [r9]
 8015dc4:	4461      	add	r1, ip
 8015dc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015dca:	fb0a c20b 	mla	r2, sl, fp, ip
 8015dce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015dd2:	b289      	uxth	r1, r1
 8015dd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015dd8:	4577      	cmp	r7, lr
 8015dda:	f849 1b04 	str.w	r1, [r9], #4
 8015dde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015de2:	d8e2      	bhi.n	8015daa <__multiply+0xb2>
 8015de4:	9a01      	ldr	r2, [sp, #4]
 8015de6:	f845 c002 	str.w	ip, [r5, r2]
 8015dea:	9a03      	ldr	r2, [sp, #12]
 8015dec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015df0:	3304      	adds	r3, #4
 8015df2:	f1b9 0f00 	cmp.w	r9, #0
 8015df6:	d020      	beq.n	8015e3a <__multiply+0x142>
 8015df8:	6829      	ldr	r1, [r5, #0]
 8015dfa:	f104 0c14 	add.w	ip, r4, #20
 8015dfe:	46ae      	mov	lr, r5
 8015e00:	f04f 0a00 	mov.w	sl, #0
 8015e04:	f8bc b000 	ldrh.w	fp, [ip]
 8015e08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015e0c:	fb09 220b 	mla	r2, r9, fp, r2
 8015e10:	4492      	add	sl, r2
 8015e12:	b289      	uxth	r1, r1
 8015e14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015e18:	f84e 1b04 	str.w	r1, [lr], #4
 8015e1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015e20:	f8be 1000 	ldrh.w	r1, [lr]
 8015e24:	0c12      	lsrs	r2, r2, #16
 8015e26:	fb09 1102 	mla	r1, r9, r2, r1
 8015e2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015e2e:	4567      	cmp	r7, ip
 8015e30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015e34:	d8e6      	bhi.n	8015e04 <__multiply+0x10c>
 8015e36:	9a01      	ldr	r2, [sp, #4]
 8015e38:	50a9      	str	r1, [r5, r2]
 8015e3a:	3504      	adds	r5, #4
 8015e3c:	e79a      	b.n	8015d74 <__multiply+0x7c>
 8015e3e:	3e01      	subs	r6, #1
 8015e40:	e79c      	b.n	8015d7c <__multiply+0x84>
 8015e42:	bf00      	nop
 8015e44:	080193c5 	.word	0x080193c5
 8015e48:	080193d6 	.word	0x080193d6

08015e4c <__pow5mult>:
 8015e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e50:	4615      	mov	r5, r2
 8015e52:	f012 0203 	ands.w	r2, r2, #3
 8015e56:	4606      	mov	r6, r0
 8015e58:	460f      	mov	r7, r1
 8015e5a:	d007      	beq.n	8015e6c <__pow5mult+0x20>
 8015e5c:	4c25      	ldr	r4, [pc, #148]	; (8015ef4 <__pow5mult+0xa8>)
 8015e5e:	3a01      	subs	r2, #1
 8015e60:	2300      	movs	r3, #0
 8015e62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e66:	f7ff fe9b 	bl	8015ba0 <__multadd>
 8015e6a:	4607      	mov	r7, r0
 8015e6c:	10ad      	asrs	r5, r5, #2
 8015e6e:	d03d      	beq.n	8015eec <__pow5mult+0xa0>
 8015e70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015e72:	b97c      	cbnz	r4, 8015e94 <__pow5mult+0x48>
 8015e74:	2010      	movs	r0, #16
 8015e76:	f7fd fbdd 	bl	8013634 <malloc>
 8015e7a:	4602      	mov	r2, r0
 8015e7c:	6270      	str	r0, [r6, #36]	; 0x24
 8015e7e:	b928      	cbnz	r0, 8015e8c <__pow5mult+0x40>
 8015e80:	4b1d      	ldr	r3, [pc, #116]	; (8015ef8 <__pow5mult+0xac>)
 8015e82:	481e      	ldr	r0, [pc, #120]	; (8015efc <__pow5mult+0xb0>)
 8015e84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015e88:	f7fe fe60 	bl	8014b4c <__assert_func>
 8015e8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e90:	6004      	str	r4, [r0, #0]
 8015e92:	60c4      	str	r4, [r0, #12]
 8015e94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015e98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e9c:	b94c      	cbnz	r4, 8015eb2 <__pow5mult+0x66>
 8015e9e:	f240 2171 	movw	r1, #625	; 0x271
 8015ea2:	4630      	mov	r0, r6
 8015ea4:	f7ff ff12 	bl	8015ccc <__i2b>
 8015ea8:	2300      	movs	r3, #0
 8015eaa:	f8c8 0008 	str.w	r0, [r8, #8]
 8015eae:	4604      	mov	r4, r0
 8015eb0:	6003      	str	r3, [r0, #0]
 8015eb2:	f04f 0900 	mov.w	r9, #0
 8015eb6:	07eb      	lsls	r3, r5, #31
 8015eb8:	d50a      	bpl.n	8015ed0 <__pow5mult+0x84>
 8015eba:	4639      	mov	r1, r7
 8015ebc:	4622      	mov	r2, r4
 8015ebe:	4630      	mov	r0, r6
 8015ec0:	f7ff ff1a 	bl	8015cf8 <__multiply>
 8015ec4:	4639      	mov	r1, r7
 8015ec6:	4680      	mov	r8, r0
 8015ec8:	4630      	mov	r0, r6
 8015eca:	f7ff fe47 	bl	8015b5c <_Bfree>
 8015ece:	4647      	mov	r7, r8
 8015ed0:	106d      	asrs	r5, r5, #1
 8015ed2:	d00b      	beq.n	8015eec <__pow5mult+0xa0>
 8015ed4:	6820      	ldr	r0, [r4, #0]
 8015ed6:	b938      	cbnz	r0, 8015ee8 <__pow5mult+0x9c>
 8015ed8:	4622      	mov	r2, r4
 8015eda:	4621      	mov	r1, r4
 8015edc:	4630      	mov	r0, r6
 8015ede:	f7ff ff0b 	bl	8015cf8 <__multiply>
 8015ee2:	6020      	str	r0, [r4, #0]
 8015ee4:	f8c0 9000 	str.w	r9, [r0]
 8015ee8:	4604      	mov	r4, r0
 8015eea:	e7e4      	b.n	8015eb6 <__pow5mult+0x6a>
 8015eec:	4638      	mov	r0, r7
 8015eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ef2:	bf00      	nop
 8015ef4:	08019528 	.word	0x08019528
 8015ef8:	08019124 	.word	0x08019124
 8015efc:	080193d6 	.word	0x080193d6

08015f00 <__lshift>:
 8015f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f04:	460c      	mov	r4, r1
 8015f06:	6849      	ldr	r1, [r1, #4]
 8015f08:	6923      	ldr	r3, [r4, #16]
 8015f0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015f0e:	68a3      	ldr	r3, [r4, #8]
 8015f10:	4607      	mov	r7, r0
 8015f12:	4691      	mov	r9, r2
 8015f14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f18:	f108 0601 	add.w	r6, r8, #1
 8015f1c:	42b3      	cmp	r3, r6
 8015f1e:	db0b      	blt.n	8015f38 <__lshift+0x38>
 8015f20:	4638      	mov	r0, r7
 8015f22:	f7ff fddb 	bl	8015adc <_Balloc>
 8015f26:	4605      	mov	r5, r0
 8015f28:	b948      	cbnz	r0, 8015f3e <__lshift+0x3e>
 8015f2a:	4602      	mov	r2, r0
 8015f2c:	4b2a      	ldr	r3, [pc, #168]	; (8015fd8 <__lshift+0xd8>)
 8015f2e:	482b      	ldr	r0, [pc, #172]	; (8015fdc <__lshift+0xdc>)
 8015f30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015f34:	f7fe fe0a 	bl	8014b4c <__assert_func>
 8015f38:	3101      	adds	r1, #1
 8015f3a:	005b      	lsls	r3, r3, #1
 8015f3c:	e7ee      	b.n	8015f1c <__lshift+0x1c>
 8015f3e:	2300      	movs	r3, #0
 8015f40:	f100 0114 	add.w	r1, r0, #20
 8015f44:	f100 0210 	add.w	r2, r0, #16
 8015f48:	4618      	mov	r0, r3
 8015f4a:	4553      	cmp	r3, sl
 8015f4c:	db37      	blt.n	8015fbe <__lshift+0xbe>
 8015f4e:	6920      	ldr	r0, [r4, #16]
 8015f50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015f54:	f104 0314 	add.w	r3, r4, #20
 8015f58:	f019 091f 	ands.w	r9, r9, #31
 8015f5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015f64:	d02f      	beq.n	8015fc6 <__lshift+0xc6>
 8015f66:	f1c9 0e20 	rsb	lr, r9, #32
 8015f6a:	468a      	mov	sl, r1
 8015f6c:	f04f 0c00 	mov.w	ip, #0
 8015f70:	681a      	ldr	r2, [r3, #0]
 8015f72:	fa02 f209 	lsl.w	r2, r2, r9
 8015f76:	ea42 020c 	orr.w	r2, r2, ip
 8015f7a:	f84a 2b04 	str.w	r2, [sl], #4
 8015f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f82:	4298      	cmp	r0, r3
 8015f84:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015f88:	d8f2      	bhi.n	8015f70 <__lshift+0x70>
 8015f8a:	1b03      	subs	r3, r0, r4
 8015f8c:	3b15      	subs	r3, #21
 8015f8e:	f023 0303 	bic.w	r3, r3, #3
 8015f92:	3304      	adds	r3, #4
 8015f94:	f104 0215 	add.w	r2, r4, #21
 8015f98:	4290      	cmp	r0, r2
 8015f9a:	bf38      	it	cc
 8015f9c:	2304      	movcc	r3, #4
 8015f9e:	f841 c003 	str.w	ip, [r1, r3]
 8015fa2:	f1bc 0f00 	cmp.w	ip, #0
 8015fa6:	d001      	beq.n	8015fac <__lshift+0xac>
 8015fa8:	f108 0602 	add.w	r6, r8, #2
 8015fac:	3e01      	subs	r6, #1
 8015fae:	4638      	mov	r0, r7
 8015fb0:	612e      	str	r6, [r5, #16]
 8015fb2:	4621      	mov	r1, r4
 8015fb4:	f7ff fdd2 	bl	8015b5c <_Bfree>
 8015fb8:	4628      	mov	r0, r5
 8015fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	e7c1      	b.n	8015f4a <__lshift+0x4a>
 8015fc6:	3904      	subs	r1, #4
 8015fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015fcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8015fd0:	4298      	cmp	r0, r3
 8015fd2:	d8f9      	bhi.n	8015fc8 <__lshift+0xc8>
 8015fd4:	e7ea      	b.n	8015fac <__lshift+0xac>
 8015fd6:	bf00      	nop
 8015fd8:	080193c5 	.word	0x080193c5
 8015fdc:	080193d6 	.word	0x080193d6

08015fe0 <__mcmp>:
 8015fe0:	b530      	push	{r4, r5, lr}
 8015fe2:	6902      	ldr	r2, [r0, #16]
 8015fe4:	690c      	ldr	r4, [r1, #16]
 8015fe6:	1b12      	subs	r2, r2, r4
 8015fe8:	d10e      	bne.n	8016008 <__mcmp+0x28>
 8015fea:	f100 0314 	add.w	r3, r0, #20
 8015fee:	3114      	adds	r1, #20
 8015ff0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015ff4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015ff8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015ffc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016000:	42a5      	cmp	r5, r4
 8016002:	d003      	beq.n	801600c <__mcmp+0x2c>
 8016004:	d305      	bcc.n	8016012 <__mcmp+0x32>
 8016006:	2201      	movs	r2, #1
 8016008:	4610      	mov	r0, r2
 801600a:	bd30      	pop	{r4, r5, pc}
 801600c:	4283      	cmp	r3, r0
 801600e:	d3f3      	bcc.n	8015ff8 <__mcmp+0x18>
 8016010:	e7fa      	b.n	8016008 <__mcmp+0x28>
 8016012:	f04f 32ff 	mov.w	r2, #4294967295
 8016016:	e7f7      	b.n	8016008 <__mcmp+0x28>

08016018 <__mdiff>:
 8016018:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601c:	460c      	mov	r4, r1
 801601e:	4606      	mov	r6, r0
 8016020:	4611      	mov	r1, r2
 8016022:	4620      	mov	r0, r4
 8016024:	4690      	mov	r8, r2
 8016026:	f7ff ffdb 	bl	8015fe0 <__mcmp>
 801602a:	1e05      	subs	r5, r0, #0
 801602c:	d110      	bne.n	8016050 <__mdiff+0x38>
 801602e:	4629      	mov	r1, r5
 8016030:	4630      	mov	r0, r6
 8016032:	f7ff fd53 	bl	8015adc <_Balloc>
 8016036:	b930      	cbnz	r0, 8016046 <__mdiff+0x2e>
 8016038:	4b3a      	ldr	r3, [pc, #232]	; (8016124 <__mdiff+0x10c>)
 801603a:	4602      	mov	r2, r0
 801603c:	f240 2132 	movw	r1, #562	; 0x232
 8016040:	4839      	ldr	r0, [pc, #228]	; (8016128 <__mdiff+0x110>)
 8016042:	f7fe fd83 	bl	8014b4c <__assert_func>
 8016046:	2301      	movs	r3, #1
 8016048:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801604c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016050:	bfa4      	itt	ge
 8016052:	4643      	movge	r3, r8
 8016054:	46a0      	movge	r8, r4
 8016056:	4630      	mov	r0, r6
 8016058:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801605c:	bfa6      	itte	ge
 801605e:	461c      	movge	r4, r3
 8016060:	2500      	movge	r5, #0
 8016062:	2501      	movlt	r5, #1
 8016064:	f7ff fd3a 	bl	8015adc <_Balloc>
 8016068:	b920      	cbnz	r0, 8016074 <__mdiff+0x5c>
 801606a:	4b2e      	ldr	r3, [pc, #184]	; (8016124 <__mdiff+0x10c>)
 801606c:	4602      	mov	r2, r0
 801606e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016072:	e7e5      	b.n	8016040 <__mdiff+0x28>
 8016074:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016078:	6926      	ldr	r6, [r4, #16]
 801607a:	60c5      	str	r5, [r0, #12]
 801607c:	f104 0914 	add.w	r9, r4, #20
 8016080:	f108 0514 	add.w	r5, r8, #20
 8016084:	f100 0e14 	add.w	lr, r0, #20
 8016088:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801608c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016090:	f108 0210 	add.w	r2, r8, #16
 8016094:	46f2      	mov	sl, lr
 8016096:	2100      	movs	r1, #0
 8016098:	f859 3b04 	ldr.w	r3, [r9], #4
 801609c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80160a0:	fa1f f883 	uxth.w	r8, r3
 80160a4:	fa11 f18b 	uxtah	r1, r1, fp
 80160a8:	0c1b      	lsrs	r3, r3, #16
 80160aa:	eba1 0808 	sub.w	r8, r1, r8
 80160ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80160b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80160b6:	fa1f f888 	uxth.w	r8, r8
 80160ba:	1419      	asrs	r1, r3, #16
 80160bc:	454e      	cmp	r6, r9
 80160be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80160c2:	f84a 3b04 	str.w	r3, [sl], #4
 80160c6:	d8e7      	bhi.n	8016098 <__mdiff+0x80>
 80160c8:	1b33      	subs	r3, r6, r4
 80160ca:	3b15      	subs	r3, #21
 80160cc:	f023 0303 	bic.w	r3, r3, #3
 80160d0:	3304      	adds	r3, #4
 80160d2:	3415      	adds	r4, #21
 80160d4:	42a6      	cmp	r6, r4
 80160d6:	bf38      	it	cc
 80160d8:	2304      	movcc	r3, #4
 80160da:	441d      	add	r5, r3
 80160dc:	4473      	add	r3, lr
 80160de:	469e      	mov	lr, r3
 80160e0:	462e      	mov	r6, r5
 80160e2:	4566      	cmp	r6, ip
 80160e4:	d30e      	bcc.n	8016104 <__mdiff+0xec>
 80160e6:	f10c 0203 	add.w	r2, ip, #3
 80160ea:	1b52      	subs	r2, r2, r5
 80160ec:	f022 0203 	bic.w	r2, r2, #3
 80160f0:	3d03      	subs	r5, #3
 80160f2:	45ac      	cmp	ip, r5
 80160f4:	bf38      	it	cc
 80160f6:	2200      	movcc	r2, #0
 80160f8:	441a      	add	r2, r3
 80160fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80160fe:	b17b      	cbz	r3, 8016120 <__mdiff+0x108>
 8016100:	6107      	str	r7, [r0, #16]
 8016102:	e7a3      	b.n	801604c <__mdiff+0x34>
 8016104:	f856 8b04 	ldr.w	r8, [r6], #4
 8016108:	fa11 f288 	uxtah	r2, r1, r8
 801610c:	1414      	asrs	r4, r2, #16
 801610e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016112:	b292      	uxth	r2, r2
 8016114:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016118:	f84e 2b04 	str.w	r2, [lr], #4
 801611c:	1421      	asrs	r1, r4, #16
 801611e:	e7e0      	b.n	80160e2 <__mdiff+0xca>
 8016120:	3f01      	subs	r7, #1
 8016122:	e7ea      	b.n	80160fa <__mdiff+0xe2>
 8016124:	080193c5 	.word	0x080193c5
 8016128:	080193d6 	.word	0x080193d6

0801612c <__d2b>:
 801612c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016130:	4689      	mov	r9, r1
 8016132:	2101      	movs	r1, #1
 8016134:	ec57 6b10 	vmov	r6, r7, d0
 8016138:	4690      	mov	r8, r2
 801613a:	f7ff fccf 	bl	8015adc <_Balloc>
 801613e:	4604      	mov	r4, r0
 8016140:	b930      	cbnz	r0, 8016150 <__d2b+0x24>
 8016142:	4602      	mov	r2, r0
 8016144:	4b25      	ldr	r3, [pc, #148]	; (80161dc <__d2b+0xb0>)
 8016146:	4826      	ldr	r0, [pc, #152]	; (80161e0 <__d2b+0xb4>)
 8016148:	f240 310a 	movw	r1, #778	; 0x30a
 801614c:	f7fe fcfe 	bl	8014b4c <__assert_func>
 8016150:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016154:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016158:	bb35      	cbnz	r5, 80161a8 <__d2b+0x7c>
 801615a:	2e00      	cmp	r6, #0
 801615c:	9301      	str	r3, [sp, #4]
 801615e:	d028      	beq.n	80161b2 <__d2b+0x86>
 8016160:	4668      	mov	r0, sp
 8016162:	9600      	str	r6, [sp, #0]
 8016164:	f7ff fd82 	bl	8015c6c <__lo0bits>
 8016168:	9900      	ldr	r1, [sp, #0]
 801616a:	b300      	cbz	r0, 80161ae <__d2b+0x82>
 801616c:	9a01      	ldr	r2, [sp, #4]
 801616e:	f1c0 0320 	rsb	r3, r0, #32
 8016172:	fa02 f303 	lsl.w	r3, r2, r3
 8016176:	430b      	orrs	r3, r1
 8016178:	40c2      	lsrs	r2, r0
 801617a:	6163      	str	r3, [r4, #20]
 801617c:	9201      	str	r2, [sp, #4]
 801617e:	9b01      	ldr	r3, [sp, #4]
 8016180:	61a3      	str	r3, [r4, #24]
 8016182:	2b00      	cmp	r3, #0
 8016184:	bf14      	ite	ne
 8016186:	2202      	movne	r2, #2
 8016188:	2201      	moveq	r2, #1
 801618a:	6122      	str	r2, [r4, #16]
 801618c:	b1d5      	cbz	r5, 80161c4 <__d2b+0x98>
 801618e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016192:	4405      	add	r5, r0
 8016194:	f8c9 5000 	str.w	r5, [r9]
 8016198:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801619c:	f8c8 0000 	str.w	r0, [r8]
 80161a0:	4620      	mov	r0, r4
 80161a2:	b003      	add	sp, #12
 80161a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80161ac:	e7d5      	b.n	801615a <__d2b+0x2e>
 80161ae:	6161      	str	r1, [r4, #20]
 80161b0:	e7e5      	b.n	801617e <__d2b+0x52>
 80161b2:	a801      	add	r0, sp, #4
 80161b4:	f7ff fd5a 	bl	8015c6c <__lo0bits>
 80161b8:	9b01      	ldr	r3, [sp, #4]
 80161ba:	6163      	str	r3, [r4, #20]
 80161bc:	2201      	movs	r2, #1
 80161be:	6122      	str	r2, [r4, #16]
 80161c0:	3020      	adds	r0, #32
 80161c2:	e7e3      	b.n	801618c <__d2b+0x60>
 80161c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80161c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80161cc:	f8c9 0000 	str.w	r0, [r9]
 80161d0:	6918      	ldr	r0, [r3, #16]
 80161d2:	f7ff fd2b 	bl	8015c2c <__hi0bits>
 80161d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80161da:	e7df      	b.n	801619c <__d2b+0x70>
 80161dc:	080193c5 	.word	0x080193c5
 80161e0:	080193d6 	.word	0x080193d6

080161e4 <_calloc_r>:
 80161e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161e6:	fba1 2402 	umull	r2, r4, r1, r2
 80161ea:	b94c      	cbnz	r4, 8016200 <_calloc_r+0x1c>
 80161ec:	4611      	mov	r1, r2
 80161ee:	9201      	str	r2, [sp, #4]
 80161f0:	f7fd fd24 	bl	8013c3c <_malloc_r>
 80161f4:	9a01      	ldr	r2, [sp, #4]
 80161f6:	4605      	mov	r5, r0
 80161f8:	b930      	cbnz	r0, 8016208 <_calloc_r+0x24>
 80161fa:	4628      	mov	r0, r5
 80161fc:	b003      	add	sp, #12
 80161fe:	bd30      	pop	{r4, r5, pc}
 8016200:	220c      	movs	r2, #12
 8016202:	6002      	str	r2, [r0, #0]
 8016204:	2500      	movs	r5, #0
 8016206:	e7f8      	b.n	80161fa <_calloc_r+0x16>
 8016208:	4621      	mov	r1, r4
 801620a:	f7fd fa31 	bl	8013670 <memset>
 801620e:	e7f4      	b.n	80161fa <_calloc_r+0x16>

08016210 <__ssputs_r>:
 8016210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016214:	688e      	ldr	r6, [r1, #8]
 8016216:	429e      	cmp	r6, r3
 8016218:	4682      	mov	sl, r0
 801621a:	460c      	mov	r4, r1
 801621c:	4690      	mov	r8, r2
 801621e:	461f      	mov	r7, r3
 8016220:	d838      	bhi.n	8016294 <__ssputs_r+0x84>
 8016222:	898a      	ldrh	r2, [r1, #12]
 8016224:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016228:	d032      	beq.n	8016290 <__ssputs_r+0x80>
 801622a:	6825      	ldr	r5, [r4, #0]
 801622c:	6909      	ldr	r1, [r1, #16]
 801622e:	eba5 0901 	sub.w	r9, r5, r1
 8016232:	6965      	ldr	r5, [r4, #20]
 8016234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016238:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801623c:	3301      	adds	r3, #1
 801623e:	444b      	add	r3, r9
 8016240:	106d      	asrs	r5, r5, #1
 8016242:	429d      	cmp	r5, r3
 8016244:	bf38      	it	cc
 8016246:	461d      	movcc	r5, r3
 8016248:	0553      	lsls	r3, r2, #21
 801624a:	d531      	bpl.n	80162b0 <__ssputs_r+0xa0>
 801624c:	4629      	mov	r1, r5
 801624e:	f7fd fcf5 	bl	8013c3c <_malloc_r>
 8016252:	4606      	mov	r6, r0
 8016254:	b950      	cbnz	r0, 801626c <__ssputs_r+0x5c>
 8016256:	230c      	movs	r3, #12
 8016258:	f8ca 3000 	str.w	r3, [sl]
 801625c:	89a3      	ldrh	r3, [r4, #12]
 801625e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016262:	81a3      	strh	r3, [r4, #12]
 8016264:	f04f 30ff 	mov.w	r0, #4294967295
 8016268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801626c:	6921      	ldr	r1, [r4, #16]
 801626e:	464a      	mov	r2, r9
 8016270:	f7fd f9f0 	bl	8013654 <memcpy>
 8016274:	89a3      	ldrh	r3, [r4, #12]
 8016276:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801627a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801627e:	81a3      	strh	r3, [r4, #12]
 8016280:	6126      	str	r6, [r4, #16]
 8016282:	6165      	str	r5, [r4, #20]
 8016284:	444e      	add	r6, r9
 8016286:	eba5 0509 	sub.w	r5, r5, r9
 801628a:	6026      	str	r6, [r4, #0]
 801628c:	60a5      	str	r5, [r4, #8]
 801628e:	463e      	mov	r6, r7
 8016290:	42be      	cmp	r6, r7
 8016292:	d900      	bls.n	8016296 <__ssputs_r+0x86>
 8016294:	463e      	mov	r6, r7
 8016296:	6820      	ldr	r0, [r4, #0]
 8016298:	4632      	mov	r2, r6
 801629a:	4641      	mov	r1, r8
 801629c:	f000 feb2 	bl	8017004 <memmove>
 80162a0:	68a3      	ldr	r3, [r4, #8]
 80162a2:	1b9b      	subs	r3, r3, r6
 80162a4:	60a3      	str	r3, [r4, #8]
 80162a6:	6823      	ldr	r3, [r4, #0]
 80162a8:	4433      	add	r3, r6
 80162aa:	6023      	str	r3, [r4, #0]
 80162ac:	2000      	movs	r0, #0
 80162ae:	e7db      	b.n	8016268 <__ssputs_r+0x58>
 80162b0:	462a      	mov	r2, r5
 80162b2:	f000 fec1 	bl	8017038 <_realloc_r>
 80162b6:	4606      	mov	r6, r0
 80162b8:	2800      	cmp	r0, #0
 80162ba:	d1e1      	bne.n	8016280 <__ssputs_r+0x70>
 80162bc:	6921      	ldr	r1, [r4, #16]
 80162be:	4650      	mov	r0, sl
 80162c0:	f7fd fc50 	bl	8013b64 <_free_r>
 80162c4:	e7c7      	b.n	8016256 <__ssputs_r+0x46>
	...

080162c8 <_svfiprintf_r>:
 80162c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162cc:	4698      	mov	r8, r3
 80162ce:	898b      	ldrh	r3, [r1, #12]
 80162d0:	061b      	lsls	r3, r3, #24
 80162d2:	b09d      	sub	sp, #116	; 0x74
 80162d4:	4607      	mov	r7, r0
 80162d6:	460d      	mov	r5, r1
 80162d8:	4614      	mov	r4, r2
 80162da:	d50e      	bpl.n	80162fa <_svfiprintf_r+0x32>
 80162dc:	690b      	ldr	r3, [r1, #16]
 80162de:	b963      	cbnz	r3, 80162fa <_svfiprintf_r+0x32>
 80162e0:	2140      	movs	r1, #64	; 0x40
 80162e2:	f7fd fcab 	bl	8013c3c <_malloc_r>
 80162e6:	6028      	str	r0, [r5, #0]
 80162e8:	6128      	str	r0, [r5, #16]
 80162ea:	b920      	cbnz	r0, 80162f6 <_svfiprintf_r+0x2e>
 80162ec:	230c      	movs	r3, #12
 80162ee:	603b      	str	r3, [r7, #0]
 80162f0:	f04f 30ff 	mov.w	r0, #4294967295
 80162f4:	e0d1      	b.n	801649a <_svfiprintf_r+0x1d2>
 80162f6:	2340      	movs	r3, #64	; 0x40
 80162f8:	616b      	str	r3, [r5, #20]
 80162fa:	2300      	movs	r3, #0
 80162fc:	9309      	str	r3, [sp, #36]	; 0x24
 80162fe:	2320      	movs	r3, #32
 8016300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016304:	f8cd 800c 	str.w	r8, [sp, #12]
 8016308:	2330      	movs	r3, #48	; 0x30
 801630a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80164b4 <_svfiprintf_r+0x1ec>
 801630e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016312:	f04f 0901 	mov.w	r9, #1
 8016316:	4623      	mov	r3, r4
 8016318:	469a      	mov	sl, r3
 801631a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801631e:	b10a      	cbz	r2, 8016324 <_svfiprintf_r+0x5c>
 8016320:	2a25      	cmp	r2, #37	; 0x25
 8016322:	d1f9      	bne.n	8016318 <_svfiprintf_r+0x50>
 8016324:	ebba 0b04 	subs.w	fp, sl, r4
 8016328:	d00b      	beq.n	8016342 <_svfiprintf_r+0x7a>
 801632a:	465b      	mov	r3, fp
 801632c:	4622      	mov	r2, r4
 801632e:	4629      	mov	r1, r5
 8016330:	4638      	mov	r0, r7
 8016332:	f7ff ff6d 	bl	8016210 <__ssputs_r>
 8016336:	3001      	adds	r0, #1
 8016338:	f000 80aa 	beq.w	8016490 <_svfiprintf_r+0x1c8>
 801633c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801633e:	445a      	add	r2, fp
 8016340:	9209      	str	r2, [sp, #36]	; 0x24
 8016342:	f89a 3000 	ldrb.w	r3, [sl]
 8016346:	2b00      	cmp	r3, #0
 8016348:	f000 80a2 	beq.w	8016490 <_svfiprintf_r+0x1c8>
 801634c:	2300      	movs	r3, #0
 801634e:	f04f 32ff 	mov.w	r2, #4294967295
 8016352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016356:	f10a 0a01 	add.w	sl, sl, #1
 801635a:	9304      	str	r3, [sp, #16]
 801635c:	9307      	str	r3, [sp, #28]
 801635e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016362:	931a      	str	r3, [sp, #104]	; 0x68
 8016364:	4654      	mov	r4, sl
 8016366:	2205      	movs	r2, #5
 8016368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801636c:	4851      	ldr	r0, [pc, #324]	; (80164b4 <_svfiprintf_r+0x1ec>)
 801636e:	f7e9 ff0f 	bl	8000190 <memchr>
 8016372:	9a04      	ldr	r2, [sp, #16]
 8016374:	b9d8      	cbnz	r0, 80163ae <_svfiprintf_r+0xe6>
 8016376:	06d0      	lsls	r0, r2, #27
 8016378:	bf44      	itt	mi
 801637a:	2320      	movmi	r3, #32
 801637c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016380:	0711      	lsls	r1, r2, #28
 8016382:	bf44      	itt	mi
 8016384:	232b      	movmi	r3, #43	; 0x2b
 8016386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801638a:	f89a 3000 	ldrb.w	r3, [sl]
 801638e:	2b2a      	cmp	r3, #42	; 0x2a
 8016390:	d015      	beq.n	80163be <_svfiprintf_r+0xf6>
 8016392:	9a07      	ldr	r2, [sp, #28]
 8016394:	4654      	mov	r4, sl
 8016396:	2000      	movs	r0, #0
 8016398:	f04f 0c0a 	mov.w	ip, #10
 801639c:	4621      	mov	r1, r4
 801639e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80163a2:	3b30      	subs	r3, #48	; 0x30
 80163a4:	2b09      	cmp	r3, #9
 80163a6:	d94e      	bls.n	8016446 <_svfiprintf_r+0x17e>
 80163a8:	b1b0      	cbz	r0, 80163d8 <_svfiprintf_r+0x110>
 80163aa:	9207      	str	r2, [sp, #28]
 80163ac:	e014      	b.n	80163d8 <_svfiprintf_r+0x110>
 80163ae:	eba0 0308 	sub.w	r3, r0, r8
 80163b2:	fa09 f303 	lsl.w	r3, r9, r3
 80163b6:	4313      	orrs	r3, r2
 80163b8:	9304      	str	r3, [sp, #16]
 80163ba:	46a2      	mov	sl, r4
 80163bc:	e7d2      	b.n	8016364 <_svfiprintf_r+0x9c>
 80163be:	9b03      	ldr	r3, [sp, #12]
 80163c0:	1d19      	adds	r1, r3, #4
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	9103      	str	r1, [sp, #12]
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	bfbb      	ittet	lt
 80163ca:	425b      	neglt	r3, r3
 80163cc:	f042 0202 	orrlt.w	r2, r2, #2
 80163d0:	9307      	strge	r3, [sp, #28]
 80163d2:	9307      	strlt	r3, [sp, #28]
 80163d4:	bfb8      	it	lt
 80163d6:	9204      	strlt	r2, [sp, #16]
 80163d8:	7823      	ldrb	r3, [r4, #0]
 80163da:	2b2e      	cmp	r3, #46	; 0x2e
 80163dc:	d10c      	bne.n	80163f8 <_svfiprintf_r+0x130>
 80163de:	7863      	ldrb	r3, [r4, #1]
 80163e0:	2b2a      	cmp	r3, #42	; 0x2a
 80163e2:	d135      	bne.n	8016450 <_svfiprintf_r+0x188>
 80163e4:	9b03      	ldr	r3, [sp, #12]
 80163e6:	1d1a      	adds	r2, r3, #4
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	9203      	str	r2, [sp, #12]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	bfb8      	it	lt
 80163f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80163f4:	3402      	adds	r4, #2
 80163f6:	9305      	str	r3, [sp, #20]
 80163f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80164c4 <_svfiprintf_r+0x1fc>
 80163fc:	7821      	ldrb	r1, [r4, #0]
 80163fe:	2203      	movs	r2, #3
 8016400:	4650      	mov	r0, sl
 8016402:	f7e9 fec5 	bl	8000190 <memchr>
 8016406:	b140      	cbz	r0, 801641a <_svfiprintf_r+0x152>
 8016408:	2340      	movs	r3, #64	; 0x40
 801640a:	eba0 000a 	sub.w	r0, r0, sl
 801640e:	fa03 f000 	lsl.w	r0, r3, r0
 8016412:	9b04      	ldr	r3, [sp, #16]
 8016414:	4303      	orrs	r3, r0
 8016416:	3401      	adds	r4, #1
 8016418:	9304      	str	r3, [sp, #16]
 801641a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801641e:	4826      	ldr	r0, [pc, #152]	; (80164b8 <_svfiprintf_r+0x1f0>)
 8016420:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016424:	2206      	movs	r2, #6
 8016426:	f7e9 feb3 	bl	8000190 <memchr>
 801642a:	2800      	cmp	r0, #0
 801642c:	d038      	beq.n	80164a0 <_svfiprintf_r+0x1d8>
 801642e:	4b23      	ldr	r3, [pc, #140]	; (80164bc <_svfiprintf_r+0x1f4>)
 8016430:	bb1b      	cbnz	r3, 801647a <_svfiprintf_r+0x1b2>
 8016432:	9b03      	ldr	r3, [sp, #12]
 8016434:	3307      	adds	r3, #7
 8016436:	f023 0307 	bic.w	r3, r3, #7
 801643a:	3308      	adds	r3, #8
 801643c:	9303      	str	r3, [sp, #12]
 801643e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016440:	4433      	add	r3, r6
 8016442:	9309      	str	r3, [sp, #36]	; 0x24
 8016444:	e767      	b.n	8016316 <_svfiprintf_r+0x4e>
 8016446:	fb0c 3202 	mla	r2, ip, r2, r3
 801644a:	460c      	mov	r4, r1
 801644c:	2001      	movs	r0, #1
 801644e:	e7a5      	b.n	801639c <_svfiprintf_r+0xd4>
 8016450:	2300      	movs	r3, #0
 8016452:	3401      	adds	r4, #1
 8016454:	9305      	str	r3, [sp, #20]
 8016456:	4619      	mov	r1, r3
 8016458:	f04f 0c0a 	mov.w	ip, #10
 801645c:	4620      	mov	r0, r4
 801645e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016462:	3a30      	subs	r2, #48	; 0x30
 8016464:	2a09      	cmp	r2, #9
 8016466:	d903      	bls.n	8016470 <_svfiprintf_r+0x1a8>
 8016468:	2b00      	cmp	r3, #0
 801646a:	d0c5      	beq.n	80163f8 <_svfiprintf_r+0x130>
 801646c:	9105      	str	r1, [sp, #20]
 801646e:	e7c3      	b.n	80163f8 <_svfiprintf_r+0x130>
 8016470:	fb0c 2101 	mla	r1, ip, r1, r2
 8016474:	4604      	mov	r4, r0
 8016476:	2301      	movs	r3, #1
 8016478:	e7f0      	b.n	801645c <_svfiprintf_r+0x194>
 801647a:	ab03      	add	r3, sp, #12
 801647c:	9300      	str	r3, [sp, #0]
 801647e:	462a      	mov	r2, r5
 8016480:	4b0f      	ldr	r3, [pc, #60]	; (80164c0 <_svfiprintf_r+0x1f8>)
 8016482:	a904      	add	r1, sp, #16
 8016484:	4638      	mov	r0, r7
 8016486:	f7fd fced 	bl	8013e64 <_printf_float>
 801648a:	1c42      	adds	r2, r0, #1
 801648c:	4606      	mov	r6, r0
 801648e:	d1d6      	bne.n	801643e <_svfiprintf_r+0x176>
 8016490:	89ab      	ldrh	r3, [r5, #12]
 8016492:	065b      	lsls	r3, r3, #25
 8016494:	f53f af2c 	bmi.w	80162f0 <_svfiprintf_r+0x28>
 8016498:	9809      	ldr	r0, [sp, #36]	; 0x24
 801649a:	b01d      	add	sp, #116	; 0x74
 801649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164a0:	ab03      	add	r3, sp, #12
 80164a2:	9300      	str	r3, [sp, #0]
 80164a4:	462a      	mov	r2, r5
 80164a6:	4b06      	ldr	r3, [pc, #24]	; (80164c0 <_svfiprintf_r+0x1f8>)
 80164a8:	a904      	add	r1, sp, #16
 80164aa:	4638      	mov	r0, r7
 80164ac:	f7fd ff7e 	bl	80143ac <_printf_i>
 80164b0:	e7eb      	b.n	801648a <_svfiprintf_r+0x1c2>
 80164b2:	bf00      	nop
 80164b4:	08019534 	.word	0x08019534
 80164b8:	0801953e 	.word	0x0801953e
 80164bc:	08013e65 	.word	0x08013e65
 80164c0:	08016211 	.word	0x08016211
 80164c4:	0801953a 	.word	0x0801953a

080164c8 <__sfputc_r>:
 80164c8:	6893      	ldr	r3, [r2, #8]
 80164ca:	3b01      	subs	r3, #1
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	b410      	push	{r4}
 80164d0:	6093      	str	r3, [r2, #8]
 80164d2:	da08      	bge.n	80164e6 <__sfputc_r+0x1e>
 80164d4:	6994      	ldr	r4, [r2, #24]
 80164d6:	42a3      	cmp	r3, r4
 80164d8:	db01      	blt.n	80164de <__sfputc_r+0x16>
 80164da:	290a      	cmp	r1, #10
 80164dc:	d103      	bne.n	80164e6 <__sfputc_r+0x1e>
 80164de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164e2:	f000 ba57 	b.w	8016994 <__swbuf_r>
 80164e6:	6813      	ldr	r3, [r2, #0]
 80164e8:	1c58      	adds	r0, r3, #1
 80164ea:	6010      	str	r0, [r2, #0]
 80164ec:	7019      	strb	r1, [r3, #0]
 80164ee:	4608      	mov	r0, r1
 80164f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164f4:	4770      	bx	lr

080164f6 <__sfputs_r>:
 80164f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f8:	4606      	mov	r6, r0
 80164fa:	460f      	mov	r7, r1
 80164fc:	4614      	mov	r4, r2
 80164fe:	18d5      	adds	r5, r2, r3
 8016500:	42ac      	cmp	r4, r5
 8016502:	d101      	bne.n	8016508 <__sfputs_r+0x12>
 8016504:	2000      	movs	r0, #0
 8016506:	e007      	b.n	8016518 <__sfputs_r+0x22>
 8016508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801650c:	463a      	mov	r2, r7
 801650e:	4630      	mov	r0, r6
 8016510:	f7ff ffda 	bl	80164c8 <__sfputc_r>
 8016514:	1c43      	adds	r3, r0, #1
 8016516:	d1f3      	bne.n	8016500 <__sfputs_r+0xa>
 8016518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801651c <_vfiprintf_r>:
 801651c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016520:	460d      	mov	r5, r1
 8016522:	b09d      	sub	sp, #116	; 0x74
 8016524:	4614      	mov	r4, r2
 8016526:	4698      	mov	r8, r3
 8016528:	4606      	mov	r6, r0
 801652a:	b118      	cbz	r0, 8016534 <_vfiprintf_r+0x18>
 801652c:	6983      	ldr	r3, [r0, #24]
 801652e:	b90b      	cbnz	r3, 8016534 <_vfiprintf_r+0x18>
 8016530:	f000 fc40 	bl	8016db4 <__sinit>
 8016534:	4b89      	ldr	r3, [pc, #548]	; (801675c <_vfiprintf_r+0x240>)
 8016536:	429d      	cmp	r5, r3
 8016538:	d11b      	bne.n	8016572 <_vfiprintf_r+0x56>
 801653a:	6875      	ldr	r5, [r6, #4]
 801653c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801653e:	07d9      	lsls	r1, r3, #31
 8016540:	d405      	bmi.n	801654e <_vfiprintf_r+0x32>
 8016542:	89ab      	ldrh	r3, [r5, #12]
 8016544:	059a      	lsls	r2, r3, #22
 8016546:	d402      	bmi.n	801654e <_vfiprintf_r+0x32>
 8016548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801654a:	f7ff fab7 	bl	8015abc <__retarget_lock_acquire_recursive>
 801654e:	89ab      	ldrh	r3, [r5, #12]
 8016550:	071b      	lsls	r3, r3, #28
 8016552:	d501      	bpl.n	8016558 <_vfiprintf_r+0x3c>
 8016554:	692b      	ldr	r3, [r5, #16]
 8016556:	b9eb      	cbnz	r3, 8016594 <_vfiprintf_r+0x78>
 8016558:	4629      	mov	r1, r5
 801655a:	4630      	mov	r0, r6
 801655c:	f000 fa7e 	bl	8016a5c <__swsetup_r>
 8016560:	b1c0      	cbz	r0, 8016594 <_vfiprintf_r+0x78>
 8016562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016564:	07dc      	lsls	r4, r3, #31
 8016566:	d50e      	bpl.n	8016586 <_vfiprintf_r+0x6a>
 8016568:	f04f 30ff 	mov.w	r0, #4294967295
 801656c:	b01d      	add	sp, #116	; 0x74
 801656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016572:	4b7b      	ldr	r3, [pc, #492]	; (8016760 <_vfiprintf_r+0x244>)
 8016574:	429d      	cmp	r5, r3
 8016576:	d101      	bne.n	801657c <_vfiprintf_r+0x60>
 8016578:	68b5      	ldr	r5, [r6, #8]
 801657a:	e7df      	b.n	801653c <_vfiprintf_r+0x20>
 801657c:	4b79      	ldr	r3, [pc, #484]	; (8016764 <_vfiprintf_r+0x248>)
 801657e:	429d      	cmp	r5, r3
 8016580:	bf08      	it	eq
 8016582:	68f5      	ldreq	r5, [r6, #12]
 8016584:	e7da      	b.n	801653c <_vfiprintf_r+0x20>
 8016586:	89ab      	ldrh	r3, [r5, #12]
 8016588:	0598      	lsls	r0, r3, #22
 801658a:	d4ed      	bmi.n	8016568 <_vfiprintf_r+0x4c>
 801658c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801658e:	f7ff fa97 	bl	8015ac0 <__retarget_lock_release_recursive>
 8016592:	e7e9      	b.n	8016568 <_vfiprintf_r+0x4c>
 8016594:	2300      	movs	r3, #0
 8016596:	9309      	str	r3, [sp, #36]	; 0x24
 8016598:	2320      	movs	r3, #32
 801659a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801659e:	f8cd 800c 	str.w	r8, [sp, #12]
 80165a2:	2330      	movs	r3, #48	; 0x30
 80165a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016768 <_vfiprintf_r+0x24c>
 80165a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80165ac:	f04f 0901 	mov.w	r9, #1
 80165b0:	4623      	mov	r3, r4
 80165b2:	469a      	mov	sl, r3
 80165b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165b8:	b10a      	cbz	r2, 80165be <_vfiprintf_r+0xa2>
 80165ba:	2a25      	cmp	r2, #37	; 0x25
 80165bc:	d1f9      	bne.n	80165b2 <_vfiprintf_r+0x96>
 80165be:	ebba 0b04 	subs.w	fp, sl, r4
 80165c2:	d00b      	beq.n	80165dc <_vfiprintf_r+0xc0>
 80165c4:	465b      	mov	r3, fp
 80165c6:	4622      	mov	r2, r4
 80165c8:	4629      	mov	r1, r5
 80165ca:	4630      	mov	r0, r6
 80165cc:	f7ff ff93 	bl	80164f6 <__sfputs_r>
 80165d0:	3001      	adds	r0, #1
 80165d2:	f000 80aa 	beq.w	801672a <_vfiprintf_r+0x20e>
 80165d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165d8:	445a      	add	r2, fp
 80165da:	9209      	str	r2, [sp, #36]	; 0x24
 80165dc:	f89a 3000 	ldrb.w	r3, [sl]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	f000 80a2 	beq.w	801672a <_vfiprintf_r+0x20e>
 80165e6:	2300      	movs	r3, #0
 80165e8:	f04f 32ff 	mov.w	r2, #4294967295
 80165ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165f0:	f10a 0a01 	add.w	sl, sl, #1
 80165f4:	9304      	str	r3, [sp, #16]
 80165f6:	9307      	str	r3, [sp, #28]
 80165f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165fc:	931a      	str	r3, [sp, #104]	; 0x68
 80165fe:	4654      	mov	r4, sl
 8016600:	2205      	movs	r2, #5
 8016602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016606:	4858      	ldr	r0, [pc, #352]	; (8016768 <_vfiprintf_r+0x24c>)
 8016608:	f7e9 fdc2 	bl	8000190 <memchr>
 801660c:	9a04      	ldr	r2, [sp, #16]
 801660e:	b9d8      	cbnz	r0, 8016648 <_vfiprintf_r+0x12c>
 8016610:	06d1      	lsls	r1, r2, #27
 8016612:	bf44      	itt	mi
 8016614:	2320      	movmi	r3, #32
 8016616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801661a:	0713      	lsls	r3, r2, #28
 801661c:	bf44      	itt	mi
 801661e:	232b      	movmi	r3, #43	; 0x2b
 8016620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016624:	f89a 3000 	ldrb.w	r3, [sl]
 8016628:	2b2a      	cmp	r3, #42	; 0x2a
 801662a:	d015      	beq.n	8016658 <_vfiprintf_r+0x13c>
 801662c:	9a07      	ldr	r2, [sp, #28]
 801662e:	4654      	mov	r4, sl
 8016630:	2000      	movs	r0, #0
 8016632:	f04f 0c0a 	mov.w	ip, #10
 8016636:	4621      	mov	r1, r4
 8016638:	f811 3b01 	ldrb.w	r3, [r1], #1
 801663c:	3b30      	subs	r3, #48	; 0x30
 801663e:	2b09      	cmp	r3, #9
 8016640:	d94e      	bls.n	80166e0 <_vfiprintf_r+0x1c4>
 8016642:	b1b0      	cbz	r0, 8016672 <_vfiprintf_r+0x156>
 8016644:	9207      	str	r2, [sp, #28]
 8016646:	e014      	b.n	8016672 <_vfiprintf_r+0x156>
 8016648:	eba0 0308 	sub.w	r3, r0, r8
 801664c:	fa09 f303 	lsl.w	r3, r9, r3
 8016650:	4313      	orrs	r3, r2
 8016652:	9304      	str	r3, [sp, #16]
 8016654:	46a2      	mov	sl, r4
 8016656:	e7d2      	b.n	80165fe <_vfiprintf_r+0xe2>
 8016658:	9b03      	ldr	r3, [sp, #12]
 801665a:	1d19      	adds	r1, r3, #4
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	9103      	str	r1, [sp, #12]
 8016660:	2b00      	cmp	r3, #0
 8016662:	bfbb      	ittet	lt
 8016664:	425b      	neglt	r3, r3
 8016666:	f042 0202 	orrlt.w	r2, r2, #2
 801666a:	9307      	strge	r3, [sp, #28]
 801666c:	9307      	strlt	r3, [sp, #28]
 801666e:	bfb8      	it	lt
 8016670:	9204      	strlt	r2, [sp, #16]
 8016672:	7823      	ldrb	r3, [r4, #0]
 8016674:	2b2e      	cmp	r3, #46	; 0x2e
 8016676:	d10c      	bne.n	8016692 <_vfiprintf_r+0x176>
 8016678:	7863      	ldrb	r3, [r4, #1]
 801667a:	2b2a      	cmp	r3, #42	; 0x2a
 801667c:	d135      	bne.n	80166ea <_vfiprintf_r+0x1ce>
 801667e:	9b03      	ldr	r3, [sp, #12]
 8016680:	1d1a      	adds	r2, r3, #4
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	9203      	str	r2, [sp, #12]
 8016686:	2b00      	cmp	r3, #0
 8016688:	bfb8      	it	lt
 801668a:	f04f 33ff 	movlt.w	r3, #4294967295
 801668e:	3402      	adds	r4, #2
 8016690:	9305      	str	r3, [sp, #20]
 8016692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016778 <_vfiprintf_r+0x25c>
 8016696:	7821      	ldrb	r1, [r4, #0]
 8016698:	2203      	movs	r2, #3
 801669a:	4650      	mov	r0, sl
 801669c:	f7e9 fd78 	bl	8000190 <memchr>
 80166a0:	b140      	cbz	r0, 80166b4 <_vfiprintf_r+0x198>
 80166a2:	2340      	movs	r3, #64	; 0x40
 80166a4:	eba0 000a 	sub.w	r0, r0, sl
 80166a8:	fa03 f000 	lsl.w	r0, r3, r0
 80166ac:	9b04      	ldr	r3, [sp, #16]
 80166ae:	4303      	orrs	r3, r0
 80166b0:	3401      	adds	r4, #1
 80166b2:	9304      	str	r3, [sp, #16]
 80166b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166b8:	482c      	ldr	r0, [pc, #176]	; (801676c <_vfiprintf_r+0x250>)
 80166ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166be:	2206      	movs	r2, #6
 80166c0:	f7e9 fd66 	bl	8000190 <memchr>
 80166c4:	2800      	cmp	r0, #0
 80166c6:	d03f      	beq.n	8016748 <_vfiprintf_r+0x22c>
 80166c8:	4b29      	ldr	r3, [pc, #164]	; (8016770 <_vfiprintf_r+0x254>)
 80166ca:	bb1b      	cbnz	r3, 8016714 <_vfiprintf_r+0x1f8>
 80166cc:	9b03      	ldr	r3, [sp, #12]
 80166ce:	3307      	adds	r3, #7
 80166d0:	f023 0307 	bic.w	r3, r3, #7
 80166d4:	3308      	adds	r3, #8
 80166d6:	9303      	str	r3, [sp, #12]
 80166d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166da:	443b      	add	r3, r7
 80166dc:	9309      	str	r3, [sp, #36]	; 0x24
 80166de:	e767      	b.n	80165b0 <_vfiprintf_r+0x94>
 80166e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80166e4:	460c      	mov	r4, r1
 80166e6:	2001      	movs	r0, #1
 80166e8:	e7a5      	b.n	8016636 <_vfiprintf_r+0x11a>
 80166ea:	2300      	movs	r3, #0
 80166ec:	3401      	adds	r4, #1
 80166ee:	9305      	str	r3, [sp, #20]
 80166f0:	4619      	mov	r1, r3
 80166f2:	f04f 0c0a 	mov.w	ip, #10
 80166f6:	4620      	mov	r0, r4
 80166f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166fc:	3a30      	subs	r2, #48	; 0x30
 80166fe:	2a09      	cmp	r2, #9
 8016700:	d903      	bls.n	801670a <_vfiprintf_r+0x1ee>
 8016702:	2b00      	cmp	r3, #0
 8016704:	d0c5      	beq.n	8016692 <_vfiprintf_r+0x176>
 8016706:	9105      	str	r1, [sp, #20]
 8016708:	e7c3      	b.n	8016692 <_vfiprintf_r+0x176>
 801670a:	fb0c 2101 	mla	r1, ip, r1, r2
 801670e:	4604      	mov	r4, r0
 8016710:	2301      	movs	r3, #1
 8016712:	e7f0      	b.n	80166f6 <_vfiprintf_r+0x1da>
 8016714:	ab03      	add	r3, sp, #12
 8016716:	9300      	str	r3, [sp, #0]
 8016718:	462a      	mov	r2, r5
 801671a:	4b16      	ldr	r3, [pc, #88]	; (8016774 <_vfiprintf_r+0x258>)
 801671c:	a904      	add	r1, sp, #16
 801671e:	4630      	mov	r0, r6
 8016720:	f7fd fba0 	bl	8013e64 <_printf_float>
 8016724:	4607      	mov	r7, r0
 8016726:	1c78      	adds	r0, r7, #1
 8016728:	d1d6      	bne.n	80166d8 <_vfiprintf_r+0x1bc>
 801672a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801672c:	07d9      	lsls	r1, r3, #31
 801672e:	d405      	bmi.n	801673c <_vfiprintf_r+0x220>
 8016730:	89ab      	ldrh	r3, [r5, #12]
 8016732:	059a      	lsls	r2, r3, #22
 8016734:	d402      	bmi.n	801673c <_vfiprintf_r+0x220>
 8016736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016738:	f7ff f9c2 	bl	8015ac0 <__retarget_lock_release_recursive>
 801673c:	89ab      	ldrh	r3, [r5, #12]
 801673e:	065b      	lsls	r3, r3, #25
 8016740:	f53f af12 	bmi.w	8016568 <_vfiprintf_r+0x4c>
 8016744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016746:	e711      	b.n	801656c <_vfiprintf_r+0x50>
 8016748:	ab03      	add	r3, sp, #12
 801674a:	9300      	str	r3, [sp, #0]
 801674c:	462a      	mov	r2, r5
 801674e:	4b09      	ldr	r3, [pc, #36]	; (8016774 <_vfiprintf_r+0x258>)
 8016750:	a904      	add	r1, sp, #16
 8016752:	4630      	mov	r0, r6
 8016754:	f7fd fe2a 	bl	80143ac <_printf_i>
 8016758:	e7e4      	b.n	8016724 <_vfiprintf_r+0x208>
 801675a:	bf00      	nop
 801675c:	08019668 	.word	0x08019668
 8016760:	08019688 	.word	0x08019688
 8016764:	08019648 	.word	0x08019648
 8016768:	08019534 	.word	0x08019534
 801676c:	0801953e 	.word	0x0801953e
 8016770:	08013e65 	.word	0x08013e65
 8016774:	080164f7 	.word	0x080164f7
 8016778:	0801953a 	.word	0x0801953a

0801677c <siscanf>:
 801677c:	b40e      	push	{r1, r2, r3}
 801677e:	b510      	push	{r4, lr}
 8016780:	b09f      	sub	sp, #124	; 0x7c
 8016782:	ac21      	add	r4, sp, #132	; 0x84
 8016784:	f44f 7101 	mov.w	r1, #516	; 0x204
 8016788:	f854 2b04 	ldr.w	r2, [r4], #4
 801678c:	9201      	str	r2, [sp, #4]
 801678e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016792:	9004      	str	r0, [sp, #16]
 8016794:	9008      	str	r0, [sp, #32]
 8016796:	f7e9 fcf3 	bl	8000180 <strlen>
 801679a:	4b0c      	ldr	r3, [pc, #48]	; (80167cc <siscanf+0x50>)
 801679c:	9005      	str	r0, [sp, #20]
 801679e:	9009      	str	r0, [sp, #36]	; 0x24
 80167a0:	930d      	str	r3, [sp, #52]	; 0x34
 80167a2:	480b      	ldr	r0, [pc, #44]	; (80167d0 <siscanf+0x54>)
 80167a4:	9a01      	ldr	r2, [sp, #4]
 80167a6:	6800      	ldr	r0, [r0, #0]
 80167a8:	9403      	str	r4, [sp, #12]
 80167aa:	2300      	movs	r3, #0
 80167ac:	9311      	str	r3, [sp, #68]	; 0x44
 80167ae:	9316      	str	r3, [sp, #88]	; 0x58
 80167b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80167b4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80167b8:	a904      	add	r1, sp, #16
 80167ba:	4623      	mov	r3, r4
 80167bc:	f000 fcc6 	bl	801714c <__ssvfiscanf_r>
 80167c0:	b01f      	add	sp, #124	; 0x7c
 80167c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167c6:	b003      	add	sp, #12
 80167c8:	4770      	bx	lr
 80167ca:	bf00      	nop
 80167cc:	080167f7 	.word	0x080167f7
 80167d0:	20000020 	.word	0x20000020

080167d4 <__sread>:
 80167d4:	b510      	push	{r4, lr}
 80167d6:	460c      	mov	r4, r1
 80167d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167dc:	f000 ff80 	bl	80176e0 <_read_r>
 80167e0:	2800      	cmp	r0, #0
 80167e2:	bfab      	itete	ge
 80167e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80167e6:	89a3      	ldrhlt	r3, [r4, #12]
 80167e8:	181b      	addge	r3, r3, r0
 80167ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80167ee:	bfac      	ite	ge
 80167f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80167f2:	81a3      	strhlt	r3, [r4, #12]
 80167f4:	bd10      	pop	{r4, pc}

080167f6 <__seofread>:
 80167f6:	2000      	movs	r0, #0
 80167f8:	4770      	bx	lr

080167fa <__swrite>:
 80167fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80167fe:	461f      	mov	r7, r3
 8016800:	898b      	ldrh	r3, [r1, #12]
 8016802:	05db      	lsls	r3, r3, #23
 8016804:	4605      	mov	r5, r0
 8016806:	460c      	mov	r4, r1
 8016808:	4616      	mov	r6, r2
 801680a:	d505      	bpl.n	8016818 <__swrite+0x1e>
 801680c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016810:	2302      	movs	r3, #2
 8016812:	2200      	movs	r2, #0
 8016814:	f000 fb6c 	bl	8016ef0 <_lseek_r>
 8016818:	89a3      	ldrh	r3, [r4, #12]
 801681a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801681e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016822:	81a3      	strh	r3, [r4, #12]
 8016824:	4632      	mov	r2, r6
 8016826:	463b      	mov	r3, r7
 8016828:	4628      	mov	r0, r5
 801682a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801682e:	f000 b903 	b.w	8016a38 <_write_r>

08016832 <__sseek>:
 8016832:	b510      	push	{r4, lr}
 8016834:	460c      	mov	r4, r1
 8016836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801683a:	f000 fb59 	bl	8016ef0 <_lseek_r>
 801683e:	1c43      	adds	r3, r0, #1
 8016840:	89a3      	ldrh	r3, [r4, #12]
 8016842:	bf15      	itete	ne
 8016844:	6560      	strne	r0, [r4, #84]	; 0x54
 8016846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801684a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801684e:	81a3      	strheq	r3, [r4, #12]
 8016850:	bf18      	it	ne
 8016852:	81a3      	strhne	r3, [r4, #12]
 8016854:	bd10      	pop	{r4, pc}

08016856 <__sclose>:
 8016856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801685a:	f000 b975 	b.w	8016b48 <_close_r>

0801685e <strcpy>:
 801685e:	4603      	mov	r3, r0
 8016860:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016864:	f803 2b01 	strb.w	r2, [r3], #1
 8016868:	2a00      	cmp	r2, #0
 801686a:	d1f9      	bne.n	8016860 <strcpy+0x2>
 801686c:	4770      	bx	lr

0801686e <strncmp>:
 801686e:	b510      	push	{r4, lr}
 8016870:	b17a      	cbz	r2, 8016892 <strncmp+0x24>
 8016872:	4603      	mov	r3, r0
 8016874:	3901      	subs	r1, #1
 8016876:	1884      	adds	r4, r0, r2
 8016878:	f813 0b01 	ldrb.w	r0, [r3], #1
 801687c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016880:	4290      	cmp	r0, r2
 8016882:	d101      	bne.n	8016888 <strncmp+0x1a>
 8016884:	42a3      	cmp	r3, r4
 8016886:	d101      	bne.n	801688c <strncmp+0x1e>
 8016888:	1a80      	subs	r0, r0, r2
 801688a:	bd10      	pop	{r4, pc}
 801688c:	2800      	cmp	r0, #0
 801688e:	d1f3      	bne.n	8016878 <strncmp+0xa>
 8016890:	e7fa      	b.n	8016888 <strncmp+0x1a>
 8016892:	4610      	mov	r0, r2
 8016894:	e7f9      	b.n	801688a <strncmp+0x1c>
	...

08016898 <_strtoul_l.constprop.0>:
 8016898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801689c:	4f36      	ldr	r7, [pc, #216]	; (8016978 <_strtoul_l.constprop.0+0xe0>)
 801689e:	4686      	mov	lr, r0
 80168a0:	460d      	mov	r5, r1
 80168a2:	4628      	mov	r0, r5
 80168a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168a8:	5de6      	ldrb	r6, [r4, r7]
 80168aa:	f016 0608 	ands.w	r6, r6, #8
 80168ae:	d1f8      	bne.n	80168a2 <_strtoul_l.constprop.0+0xa>
 80168b0:	2c2d      	cmp	r4, #45	; 0x2d
 80168b2:	d12f      	bne.n	8016914 <_strtoul_l.constprop.0+0x7c>
 80168b4:	782c      	ldrb	r4, [r5, #0]
 80168b6:	2601      	movs	r6, #1
 80168b8:	1c85      	adds	r5, r0, #2
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d057      	beq.n	801696e <_strtoul_l.constprop.0+0xd6>
 80168be:	2b10      	cmp	r3, #16
 80168c0:	d109      	bne.n	80168d6 <_strtoul_l.constprop.0+0x3e>
 80168c2:	2c30      	cmp	r4, #48	; 0x30
 80168c4:	d107      	bne.n	80168d6 <_strtoul_l.constprop.0+0x3e>
 80168c6:	7828      	ldrb	r0, [r5, #0]
 80168c8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80168cc:	2858      	cmp	r0, #88	; 0x58
 80168ce:	d149      	bne.n	8016964 <_strtoul_l.constprop.0+0xcc>
 80168d0:	786c      	ldrb	r4, [r5, #1]
 80168d2:	2310      	movs	r3, #16
 80168d4:	3502      	adds	r5, #2
 80168d6:	f04f 38ff 	mov.w	r8, #4294967295
 80168da:	2700      	movs	r7, #0
 80168dc:	fbb8 f8f3 	udiv	r8, r8, r3
 80168e0:	fb03 f908 	mul.w	r9, r3, r8
 80168e4:	ea6f 0909 	mvn.w	r9, r9
 80168e8:	4638      	mov	r0, r7
 80168ea:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80168ee:	f1bc 0f09 	cmp.w	ip, #9
 80168f2:	d814      	bhi.n	801691e <_strtoul_l.constprop.0+0x86>
 80168f4:	4664      	mov	r4, ip
 80168f6:	42a3      	cmp	r3, r4
 80168f8:	dd22      	ble.n	8016940 <_strtoul_l.constprop.0+0xa8>
 80168fa:	2f00      	cmp	r7, #0
 80168fc:	db1d      	blt.n	801693a <_strtoul_l.constprop.0+0xa2>
 80168fe:	4580      	cmp	r8, r0
 8016900:	d31b      	bcc.n	801693a <_strtoul_l.constprop.0+0xa2>
 8016902:	d101      	bne.n	8016908 <_strtoul_l.constprop.0+0x70>
 8016904:	45a1      	cmp	r9, r4
 8016906:	db18      	blt.n	801693a <_strtoul_l.constprop.0+0xa2>
 8016908:	fb00 4003 	mla	r0, r0, r3, r4
 801690c:	2701      	movs	r7, #1
 801690e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016912:	e7ea      	b.n	80168ea <_strtoul_l.constprop.0+0x52>
 8016914:	2c2b      	cmp	r4, #43	; 0x2b
 8016916:	bf04      	itt	eq
 8016918:	782c      	ldrbeq	r4, [r5, #0]
 801691a:	1c85      	addeq	r5, r0, #2
 801691c:	e7cd      	b.n	80168ba <_strtoul_l.constprop.0+0x22>
 801691e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016922:	f1bc 0f19 	cmp.w	ip, #25
 8016926:	d801      	bhi.n	801692c <_strtoul_l.constprop.0+0x94>
 8016928:	3c37      	subs	r4, #55	; 0x37
 801692a:	e7e4      	b.n	80168f6 <_strtoul_l.constprop.0+0x5e>
 801692c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016930:	f1bc 0f19 	cmp.w	ip, #25
 8016934:	d804      	bhi.n	8016940 <_strtoul_l.constprop.0+0xa8>
 8016936:	3c57      	subs	r4, #87	; 0x57
 8016938:	e7dd      	b.n	80168f6 <_strtoul_l.constprop.0+0x5e>
 801693a:	f04f 37ff 	mov.w	r7, #4294967295
 801693e:	e7e6      	b.n	801690e <_strtoul_l.constprop.0+0x76>
 8016940:	2f00      	cmp	r7, #0
 8016942:	da07      	bge.n	8016954 <_strtoul_l.constprop.0+0xbc>
 8016944:	2322      	movs	r3, #34	; 0x22
 8016946:	f8ce 3000 	str.w	r3, [lr]
 801694a:	f04f 30ff 	mov.w	r0, #4294967295
 801694e:	b932      	cbnz	r2, 801695e <_strtoul_l.constprop.0+0xc6>
 8016950:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016954:	b106      	cbz	r6, 8016958 <_strtoul_l.constprop.0+0xc0>
 8016956:	4240      	negs	r0, r0
 8016958:	2a00      	cmp	r2, #0
 801695a:	d0f9      	beq.n	8016950 <_strtoul_l.constprop.0+0xb8>
 801695c:	b107      	cbz	r7, 8016960 <_strtoul_l.constprop.0+0xc8>
 801695e:	1e69      	subs	r1, r5, #1
 8016960:	6011      	str	r1, [r2, #0]
 8016962:	e7f5      	b.n	8016950 <_strtoul_l.constprop.0+0xb8>
 8016964:	2430      	movs	r4, #48	; 0x30
 8016966:	2b00      	cmp	r3, #0
 8016968:	d1b5      	bne.n	80168d6 <_strtoul_l.constprop.0+0x3e>
 801696a:	2308      	movs	r3, #8
 801696c:	e7b3      	b.n	80168d6 <_strtoul_l.constprop.0+0x3e>
 801696e:	2c30      	cmp	r4, #48	; 0x30
 8016970:	d0a9      	beq.n	80168c6 <_strtoul_l.constprop.0+0x2e>
 8016972:	230a      	movs	r3, #10
 8016974:	e7af      	b.n	80168d6 <_strtoul_l.constprop.0+0x3e>
 8016976:	bf00      	nop
 8016978:	08019546 	.word	0x08019546

0801697c <_strtoul_r>:
 801697c:	f7ff bf8c 	b.w	8016898 <_strtoul_l.constprop.0>

08016980 <strtoul>:
 8016980:	4613      	mov	r3, r2
 8016982:	460a      	mov	r2, r1
 8016984:	4601      	mov	r1, r0
 8016986:	4802      	ldr	r0, [pc, #8]	; (8016990 <strtoul+0x10>)
 8016988:	6800      	ldr	r0, [r0, #0]
 801698a:	f7ff bf85 	b.w	8016898 <_strtoul_l.constprop.0>
 801698e:	bf00      	nop
 8016990:	20000020 	.word	0x20000020

08016994 <__swbuf_r>:
 8016994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016996:	460e      	mov	r6, r1
 8016998:	4614      	mov	r4, r2
 801699a:	4605      	mov	r5, r0
 801699c:	b118      	cbz	r0, 80169a6 <__swbuf_r+0x12>
 801699e:	6983      	ldr	r3, [r0, #24]
 80169a0:	b90b      	cbnz	r3, 80169a6 <__swbuf_r+0x12>
 80169a2:	f000 fa07 	bl	8016db4 <__sinit>
 80169a6:	4b21      	ldr	r3, [pc, #132]	; (8016a2c <__swbuf_r+0x98>)
 80169a8:	429c      	cmp	r4, r3
 80169aa:	d12b      	bne.n	8016a04 <__swbuf_r+0x70>
 80169ac:	686c      	ldr	r4, [r5, #4]
 80169ae:	69a3      	ldr	r3, [r4, #24]
 80169b0:	60a3      	str	r3, [r4, #8]
 80169b2:	89a3      	ldrh	r3, [r4, #12]
 80169b4:	071a      	lsls	r2, r3, #28
 80169b6:	d52f      	bpl.n	8016a18 <__swbuf_r+0x84>
 80169b8:	6923      	ldr	r3, [r4, #16]
 80169ba:	b36b      	cbz	r3, 8016a18 <__swbuf_r+0x84>
 80169bc:	6923      	ldr	r3, [r4, #16]
 80169be:	6820      	ldr	r0, [r4, #0]
 80169c0:	1ac0      	subs	r0, r0, r3
 80169c2:	6963      	ldr	r3, [r4, #20]
 80169c4:	b2f6      	uxtb	r6, r6
 80169c6:	4283      	cmp	r3, r0
 80169c8:	4637      	mov	r7, r6
 80169ca:	dc04      	bgt.n	80169d6 <__swbuf_r+0x42>
 80169cc:	4621      	mov	r1, r4
 80169ce:	4628      	mov	r0, r5
 80169d0:	f000 f95c 	bl	8016c8c <_fflush_r>
 80169d4:	bb30      	cbnz	r0, 8016a24 <__swbuf_r+0x90>
 80169d6:	68a3      	ldr	r3, [r4, #8]
 80169d8:	3b01      	subs	r3, #1
 80169da:	60a3      	str	r3, [r4, #8]
 80169dc:	6823      	ldr	r3, [r4, #0]
 80169de:	1c5a      	adds	r2, r3, #1
 80169e0:	6022      	str	r2, [r4, #0]
 80169e2:	701e      	strb	r6, [r3, #0]
 80169e4:	6963      	ldr	r3, [r4, #20]
 80169e6:	3001      	adds	r0, #1
 80169e8:	4283      	cmp	r3, r0
 80169ea:	d004      	beq.n	80169f6 <__swbuf_r+0x62>
 80169ec:	89a3      	ldrh	r3, [r4, #12]
 80169ee:	07db      	lsls	r3, r3, #31
 80169f0:	d506      	bpl.n	8016a00 <__swbuf_r+0x6c>
 80169f2:	2e0a      	cmp	r6, #10
 80169f4:	d104      	bne.n	8016a00 <__swbuf_r+0x6c>
 80169f6:	4621      	mov	r1, r4
 80169f8:	4628      	mov	r0, r5
 80169fa:	f000 f947 	bl	8016c8c <_fflush_r>
 80169fe:	b988      	cbnz	r0, 8016a24 <__swbuf_r+0x90>
 8016a00:	4638      	mov	r0, r7
 8016a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a04:	4b0a      	ldr	r3, [pc, #40]	; (8016a30 <__swbuf_r+0x9c>)
 8016a06:	429c      	cmp	r4, r3
 8016a08:	d101      	bne.n	8016a0e <__swbuf_r+0x7a>
 8016a0a:	68ac      	ldr	r4, [r5, #8]
 8016a0c:	e7cf      	b.n	80169ae <__swbuf_r+0x1a>
 8016a0e:	4b09      	ldr	r3, [pc, #36]	; (8016a34 <__swbuf_r+0xa0>)
 8016a10:	429c      	cmp	r4, r3
 8016a12:	bf08      	it	eq
 8016a14:	68ec      	ldreq	r4, [r5, #12]
 8016a16:	e7ca      	b.n	80169ae <__swbuf_r+0x1a>
 8016a18:	4621      	mov	r1, r4
 8016a1a:	4628      	mov	r0, r5
 8016a1c:	f000 f81e 	bl	8016a5c <__swsetup_r>
 8016a20:	2800      	cmp	r0, #0
 8016a22:	d0cb      	beq.n	80169bc <__swbuf_r+0x28>
 8016a24:	f04f 37ff 	mov.w	r7, #4294967295
 8016a28:	e7ea      	b.n	8016a00 <__swbuf_r+0x6c>
 8016a2a:	bf00      	nop
 8016a2c:	08019668 	.word	0x08019668
 8016a30:	08019688 	.word	0x08019688
 8016a34:	08019648 	.word	0x08019648

08016a38 <_write_r>:
 8016a38:	b538      	push	{r3, r4, r5, lr}
 8016a3a:	4d07      	ldr	r5, [pc, #28]	; (8016a58 <_write_r+0x20>)
 8016a3c:	4604      	mov	r4, r0
 8016a3e:	4608      	mov	r0, r1
 8016a40:	4611      	mov	r1, r2
 8016a42:	2200      	movs	r2, #0
 8016a44:	602a      	str	r2, [r5, #0]
 8016a46:	461a      	mov	r2, r3
 8016a48:	f7f4 fc45 	bl	800b2d6 <_write>
 8016a4c:	1c43      	adds	r3, r0, #1
 8016a4e:	d102      	bne.n	8016a56 <_write_r+0x1e>
 8016a50:	682b      	ldr	r3, [r5, #0]
 8016a52:	b103      	cbz	r3, 8016a56 <_write_r+0x1e>
 8016a54:	6023      	str	r3, [r4, #0]
 8016a56:	bd38      	pop	{r3, r4, r5, pc}
 8016a58:	2000a7bc 	.word	0x2000a7bc

08016a5c <__swsetup_r>:
 8016a5c:	4b32      	ldr	r3, [pc, #200]	; (8016b28 <__swsetup_r+0xcc>)
 8016a5e:	b570      	push	{r4, r5, r6, lr}
 8016a60:	681d      	ldr	r5, [r3, #0]
 8016a62:	4606      	mov	r6, r0
 8016a64:	460c      	mov	r4, r1
 8016a66:	b125      	cbz	r5, 8016a72 <__swsetup_r+0x16>
 8016a68:	69ab      	ldr	r3, [r5, #24]
 8016a6a:	b913      	cbnz	r3, 8016a72 <__swsetup_r+0x16>
 8016a6c:	4628      	mov	r0, r5
 8016a6e:	f000 f9a1 	bl	8016db4 <__sinit>
 8016a72:	4b2e      	ldr	r3, [pc, #184]	; (8016b2c <__swsetup_r+0xd0>)
 8016a74:	429c      	cmp	r4, r3
 8016a76:	d10f      	bne.n	8016a98 <__swsetup_r+0x3c>
 8016a78:	686c      	ldr	r4, [r5, #4]
 8016a7a:	89a3      	ldrh	r3, [r4, #12]
 8016a7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016a80:	0719      	lsls	r1, r3, #28
 8016a82:	d42c      	bmi.n	8016ade <__swsetup_r+0x82>
 8016a84:	06dd      	lsls	r5, r3, #27
 8016a86:	d411      	bmi.n	8016aac <__swsetup_r+0x50>
 8016a88:	2309      	movs	r3, #9
 8016a8a:	6033      	str	r3, [r6, #0]
 8016a8c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016a90:	81a3      	strh	r3, [r4, #12]
 8016a92:	f04f 30ff 	mov.w	r0, #4294967295
 8016a96:	e03e      	b.n	8016b16 <__swsetup_r+0xba>
 8016a98:	4b25      	ldr	r3, [pc, #148]	; (8016b30 <__swsetup_r+0xd4>)
 8016a9a:	429c      	cmp	r4, r3
 8016a9c:	d101      	bne.n	8016aa2 <__swsetup_r+0x46>
 8016a9e:	68ac      	ldr	r4, [r5, #8]
 8016aa0:	e7eb      	b.n	8016a7a <__swsetup_r+0x1e>
 8016aa2:	4b24      	ldr	r3, [pc, #144]	; (8016b34 <__swsetup_r+0xd8>)
 8016aa4:	429c      	cmp	r4, r3
 8016aa6:	bf08      	it	eq
 8016aa8:	68ec      	ldreq	r4, [r5, #12]
 8016aaa:	e7e6      	b.n	8016a7a <__swsetup_r+0x1e>
 8016aac:	0758      	lsls	r0, r3, #29
 8016aae:	d512      	bpl.n	8016ad6 <__swsetup_r+0x7a>
 8016ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ab2:	b141      	cbz	r1, 8016ac6 <__swsetup_r+0x6a>
 8016ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ab8:	4299      	cmp	r1, r3
 8016aba:	d002      	beq.n	8016ac2 <__swsetup_r+0x66>
 8016abc:	4630      	mov	r0, r6
 8016abe:	f7fd f851 	bl	8013b64 <_free_r>
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	6363      	str	r3, [r4, #52]	; 0x34
 8016ac6:	89a3      	ldrh	r3, [r4, #12]
 8016ac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016acc:	81a3      	strh	r3, [r4, #12]
 8016ace:	2300      	movs	r3, #0
 8016ad0:	6063      	str	r3, [r4, #4]
 8016ad2:	6923      	ldr	r3, [r4, #16]
 8016ad4:	6023      	str	r3, [r4, #0]
 8016ad6:	89a3      	ldrh	r3, [r4, #12]
 8016ad8:	f043 0308 	orr.w	r3, r3, #8
 8016adc:	81a3      	strh	r3, [r4, #12]
 8016ade:	6923      	ldr	r3, [r4, #16]
 8016ae0:	b94b      	cbnz	r3, 8016af6 <__swsetup_r+0x9a>
 8016ae2:	89a3      	ldrh	r3, [r4, #12]
 8016ae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016ae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016aec:	d003      	beq.n	8016af6 <__swsetup_r+0x9a>
 8016aee:	4621      	mov	r1, r4
 8016af0:	4630      	mov	r0, r6
 8016af2:	f000 fa35 	bl	8016f60 <__smakebuf_r>
 8016af6:	89a0      	ldrh	r0, [r4, #12]
 8016af8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016afc:	f010 0301 	ands.w	r3, r0, #1
 8016b00:	d00a      	beq.n	8016b18 <__swsetup_r+0xbc>
 8016b02:	2300      	movs	r3, #0
 8016b04:	60a3      	str	r3, [r4, #8]
 8016b06:	6963      	ldr	r3, [r4, #20]
 8016b08:	425b      	negs	r3, r3
 8016b0a:	61a3      	str	r3, [r4, #24]
 8016b0c:	6923      	ldr	r3, [r4, #16]
 8016b0e:	b943      	cbnz	r3, 8016b22 <__swsetup_r+0xc6>
 8016b10:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016b14:	d1ba      	bne.n	8016a8c <__swsetup_r+0x30>
 8016b16:	bd70      	pop	{r4, r5, r6, pc}
 8016b18:	0781      	lsls	r1, r0, #30
 8016b1a:	bf58      	it	pl
 8016b1c:	6963      	ldrpl	r3, [r4, #20]
 8016b1e:	60a3      	str	r3, [r4, #8]
 8016b20:	e7f4      	b.n	8016b0c <__swsetup_r+0xb0>
 8016b22:	2000      	movs	r0, #0
 8016b24:	e7f7      	b.n	8016b16 <__swsetup_r+0xba>
 8016b26:	bf00      	nop
 8016b28:	20000020 	.word	0x20000020
 8016b2c:	08019668 	.word	0x08019668
 8016b30:	08019688 	.word	0x08019688
 8016b34:	08019648 	.word	0x08019648

08016b38 <abort>:
 8016b38:	b508      	push	{r3, lr}
 8016b3a:	2006      	movs	r0, #6
 8016b3c:	f000 fe42 	bl	80177c4 <raise>
 8016b40:	2001      	movs	r0, #1
 8016b42:	f7f4 fba1 	bl	800b288 <_exit>
	...

08016b48 <_close_r>:
 8016b48:	b538      	push	{r3, r4, r5, lr}
 8016b4a:	4d06      	ldr	r5, [pc, #24]	; (8016b64 <_close_r+0x1c>)
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	4604      	mov	r4, r0
 8016b50:	4608      	mov	r0, r1
 8016b52:	602b      	str	r3, [r5, #0]
 8016b54:	f7f4 fbdb 	bl	800b30e <_close>
 8016b58:	1c43      	adds	r3, r0, #1
 8016b5a:	d102      	bne.n	8016b62 <_close_r+0x1a>
 8016b5c:	682b      	ldr	r3, [r5, #0]
 8016b5e:	b103      	cbz	r3, 8016b62 <_close_r+0x1a>
 8016b60:	6023      	str	r3, [r4, #0]
 8016b62:	bd38      	pop	{r3, r4, r5, pc}
 8016b64:	2000a7bc 	.word	0x2000a7bc

08016b68 <__env_lock>:
 8016b68:	4801      	ldr	r0, [pc, #4]	; (8016b70 <__env_lock+0x8>)
 8016b6a:	f7fe bfa7 	b.w	8015abc <__retarget_lock_acquire_recursive>
 8016b6e:	bf00      	nop
 8016b70:	2000a7b4 	.word	0x2000a7b4

08016b74 <__env_unlock>:
 8016b74:	4801      	ldr	r0, [pc, #4]	; (8016b7c <__env_unlock+0x8>)
 8016b76:	f7fe bfa3 	b.w	8015ac0 <__retarget_lock_release_recursive>
 8016b7a:	bf00      	nop
 8016b7c:	2000a7b4 	.word	0x2000a7b4

08016b80 <__sflush_r>:
 8016b80:	898a      	ldrh	r2, [r1, #12]
 8016b82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b86:	4605      	mov	r5, r0
 8016b88:	0710      	lsls	r0, r2, #28
 8016b8a:	460c      	mov	r4, r1
 8016b8c:	d458      	bmi.n	8016c40 <__sflush_r+0xc0>
 8016b8e:	684b      	ldr	r3, [r1, #4]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	dc05      	bgt.n	8016ba0 <__sflush_r+0x20>
 8016b94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	dc02      	bgt.n	8016ba0 <__sflush_r+0x20>
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ba0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ba2:	2e00      	cmp	r6, #0
 8016ba4:	d0f9      	beq.n	8016b9a <__sflush_r+0x1a>
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016bac:	682f      	ldr	r7, [r5, #0]
 8016bae:	602b      	str	r3, [r5, #0]
 8016bb0:	d032      	beq.n	8016c18 <__sflush_r+0x98>
 8016bb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016bb4:	89a3      	ldrh	r3, [r4, #12]
 8016bb6:	075a      	lsls	r2, r3, #29
 8016bb8:	d505      	bpl.n	8016bc6 <__sflush_r+0x46>
 8016bba:	6863      	ldr	r3, [r4, #4]
 8016bbc:	1ac0      	subs	r0, r0, r3
 8016bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016bc0:	b10b      	cbz	r3, 8016bc6 <__sflush_r+0x46>
 8016bc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016bc4:	1ac0      	subs	r0, r0, r3
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	4602      	mov	r2, r0
 8016bca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016bcc:	6a21      	ldr	r1, [r4, #32]
 8016bce:	4628      	mov	r0, r5
 8016bd0:	47b0      	blx	r6
 8016bd2:	1c43      	adds	r3, r0, #1
 8016bd4:	89a3      	ldrh	r3, [r4, #12]
 8016bd6:	d106      	bne.n	8016be6 <__sflush_r+0x66>
 8016bd8:	6829      	ldr	r1, [r5, #0]
 8016bda:	291d      	cmp	r1, #29
 8016bdc:	d82c      	bhi.n	8016c38 <__sflush_r+0xb8>
 8016bde:	4a2a      	ldr	r2, [pc, #168]	; (8016c88 <__sflush_r+0x108>)
 8016be0:	40ca      	lsrs	r2, r1
 8016be2:	07d6      	lsls	r6, r2, #31
 8016be4:	d528      	bpl.n	8016c38 <__sflush_r+0xb8>
 8016be6:	2200      	movs	r2, #0
 8016be8:	6062      	str	r2, [r4, #4]
 8016bea:	04d9      	lsls	r1, r3, #19
 8016bec:	6922      	ldr	r2, [r4, #16]
 8016bee:	6022      	str	r2, [r4, #0]
 8016bf0:	d504      	bpl.n	8016bfc <__sflush_r+0x7c>
 8016bf2:	1c42      	adds	r2, r0, #1
 8016bf4:	d101      	bne.n	8016bfa <__sflush_r+0x7a>
 8016bf6:	682b      	ldr	r3, [r5, #0]
 8016bf8:	b903      	cbnz	r3, 8016bfc <__sflush_r+0x7c>
 8016bfa:	6560      	str	r0, [r4, #84]	; 0x54
 8016bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016bfe:	602f      	str	r7, [r5, #0]
 8016c00:	2900      	cmp	r1, #0
 8016c02:	d0ca      	beq.n	8016b9a <__sflush_r+0x1a>
 8016c04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c08:	4299      	cmp	r1, r3
 8016c0a:	d002      	beq.n	8016c12 <__sflush_r+0x92>
 8016c0c:	4628      	mov	r0, r5
 8016c0e:	f7fc ffa9 	bl	8013b64 <_free_r>
 8016c12:	2000      	movs	r0, #0
 8016c14:	6360      	str	r0, [r4, #52]	; 0x34
 8016c16:	e7c1      	b.n	8016b9c <__sflush_r+0x1c>
 8016c18:	6a21      	ldr	r1, [r4, #32]
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	4628      	mov	r0, r5
 8016c1e:	47b0      	blx	r6
 8016c20:	1c41      	adds	r1, r0, #1
 8016c22:	d1c7      	bne.n	8016bb4 <__sflush_r+0x34>
 8016c24:	682b      	ldr	r3, [r5, #0]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d0c4      	beq.n	8016bb4 <__sflush_r+0x34>
 8016c2a:	2b1d      	cmp	r3, #29
 8016c2c:	d001      	beq.n	8016c32 <__sflush_r+0xb2>
 8016c2e:	2b16      	cmp	r3, #22
 8016c30:	d101      	bne.n	8016c36 <__sflush_r+0xb6>
 8016c32:	602f      	str	r7, [r5, #0]
 8016c34:	e7b1      	b.n	8016b9a <__sflush_r+0x1a>
 8016c36:	89a3      	ldrh	r3, [r4, #12]
 8016c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c3c:	81a3      	strh	r3, [r4, #12]
 8016c3e:	e7ad      	b.n	8016b9c <__sflush_r+0x1c>
 8016c40:	690f      	ldr	r7, [r1, #16]
 8016c42:	2f00      	cmp	r7, #0
 8016c44:	d0a9      	beq.n	8016b9a <__sflush_r+0x1a>
 8016c46:	0793      	lsls	r3, r2, #30
 8016c48:	680e      	ldr	r6, [r1, #0]
 8016c4a:	bf08      	it	eq
 8016c4c:	694b      	ldreq	r3, [r1, #20]
 8016c4e:	600f      	str	r7, [r1, #0]
 8016c50:	bf18      	it	ne
 8016c52:	2300      	movne	r3, #0
 8016c54:	eba6 0807 	sub.w	r8, r6, r7
 8016c58:	608b      	str	r3, [r1, #8]
 8016c5a:	f1b8 0f00 	cmp.w	r8, #0
 8016c5e:	dd9c      	ble.n	8016b9a <__sflush_r+0x1a>
 8016c60:	6a21      	ldr	r1, [r4, #32]
 8016c62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016c64:	4643      	mov	r3, r8
 8016c66:	463a      	mov	r2, r7
 8016c68:	4628      	mov	r0, r5
 8016c6a:	47b0      	blx	r6
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	dc06      	bgt.n	8016c7e <__sflush_r+0xfe>
 8016c70:	89a3      	ldrh	r3, [r4, #12]
 8016c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c76:	81a3      	strh	r3, [r4, #12]
 8016c78:	f04f 30ff 	mov.w	r0, #4294967295
 8016c7c:	e78e      	b.n	8016b9c <__sflush_r+0x1c>
 8016c7e:	4407      	add	r7, r0
 8016c80:	eba8 0800 	sub.w	r8, r8, r0
 8016c84:	e7e9      	b.n	8016c5a <__sflush_r+0xda>
 8016c86:	bf00      	nop
 8016c88:	20400001 	.word	0x20400001

08016c8c <_fflush_r>:
 8016c8c:	b538      	push	{r3, r4, r5, lr}
 8016c8e:	690b      	ldr	r3, [r1, #16]
 8016c90:	4605      	mov	r5, r0
 8016c92:	460c      	mov	r4, r1
 8016c94:	b913      	cbnz	r3, 8016c9c <_fflush_r+0x10>
 8016c96:	2500      	movs	r5, #0
 8016c98:	4628      	mov	r0, r5
 8016c9a:	bd38      	pop	{r3, r4, r5, pc}
 8016c9c:	b118      	cbz	r0, 8016ca6 <_fflush_r+0x1a>
 8016c9e:	6983      	ldr	r3, [r0, #24]
 8016ca0:	b90b      	cbnz	r3, 8016ca6 <_fflush_r+0x1a>
 8016ca2:	f000 f887 	bl	8016db4 <__sinit>
 8016ca6:	4b14      	ldr	r3, [pc, #80]	; (8016cf8 <_fflush_r+0x6c>)
 8016ca8:	429c      	cmp	r4, r3
 8016caa:	d11b      	bne.n	8016ce4 <_fflush_r+0x58>
 8016cac:	686c      	ldr	r4, [r5, #4]
 8016cae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d0ef      	beq.n	8016c96 <_fflush_r+0xa>
 8016cb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016cb8:	07d0      	lsls	r0, r2, #31
 8016cba:	d404      	bmi.n	8016cc6 <_fflush_r+0x3a>
 8016cbc:	0599      	lsls	r1, r3, #22
 8016cbe:	d402      	bmi.n	8016cc6 <_fflush_r+0x3a>
 8016cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cc2:	f7fe fefb 	bl	8015abc <__retarget_lock_acquire_recursive>
 8016cc6:	4628      	mov	r0, r5
 8016cc8:	4621      	mov	r1, r4
 8016cca:	f7ff ff59 	bl	8016b80 <__sflush_r>
 8016cce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016cd0:	07da      	lsls	r2, r3, #31
 8016cd2:	4605      	mov	r5, r0
 8016cd4:	d4e0      	bmi.n	8016c98 <_fflush_r+0xc>
 8016cd6:	89a3      	ldrh	r3, [r4, #12]
 8016cd8:	059b      	lsls	r3, r3, #22
 8016cda:	d4dd      	bmi.n	8016c98 <_fflush_r+0xc>
 8016cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016cde:	f7fe feef 	bl	8015ac0 <__retarget_lock_release_recursive>
 8016ce2:	e7d9      	b.n	8016c98 <_fflush_r+0xc>
 8016ce4:	4b05      	ldr	r3, [pc, #20]	; (8016cfc <_fflush_r+0x70>)
 8016ce6:	429c      	cmp	r4, r3
 8016ce8:	d101      	bne.n	8016cee <_fflush_r+0x62>
 8016cea:	68ac      	ldr	r4, [r5, #8]
 8016cec:	e7df      	b.n	8016cae <_fflush_r+0x22>
 8016cee:	4b04      	ldr	r3, [pc, #16]	; (8016d00 <_fflush_r+0x74>)
 8016cf0:	429c      	cmp	r4, r3
 8016cf2:	bf08      	it	eq
 8016cf4:	68ec      	ldreq	r4, [r5, #12]
 8016cf6:	e7da      	b.n	8016cae <_fflush_r+0x22>
 8016cf8:	08019668 	.word	0x08019668
 8016cfc:	08019688 	.word	0x08019688
 8016d00:	08019648 	.word	0x08019648

08016d04 <std>:
 8016d04:	2300      	movs	r3, #0
 8016d06:	b510      	push	{r4, lr}
 8016d08:	4604      	mov	r4, r0
 8016d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8016d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d12:	6083      	str	r3, [r0, #8]
 8016d14:	8181      	strh	r1, [r0, #12]
 8016d16:	6643      	str	r3, [r0, #100]	; 0x64
 8016d18:	81c2      	strh	r2, [r0, #14]
 8016d1a:	6183      	str	r3, [r0, #24]
 8016d1c:	4619      	mov	r1, r3
 8016d1e:	2208      	movs	r2, #8
 8016d20:	305c      	adds	r0, #92	; 0x5c
 8016d22:	f7fc fca5 	bl	8013670 <memset>
 8016d26:	4b05      	ldr	r3, [pc, #20]	; (8016d3c <std+0x38>)
 8016d28:	6263      	str	r3, [r4, #36]	; 0x24
 8016d2a:	4b05      	ldr	r3, [pc, #20]	; (8016d40 <std+0x3c>)
 8016d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d2e:	4b05      	ldr	r3, [pc, #20]	; (8016d44 <std+0x40>)
 8016d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d32:	4b05      	ldr	r3, [pc, #20]	; (8016d48 <std+0x44>)
 8016d34:	6224      	str	r4, [r4, #32]
 8016d36:	6323      	str	r3, [r4, #48]	; 0x30
 8016d38:	bd10      	pop	{r4, pc}
 8016d3a:	bf00      	nop
 8016d3c:	080167d5 	.word	0x080167d5
 8016d40:	080167fb 	.word	0x080167fb
 8016d44:	08016833 	.word	0x08016833
 8016d48:	08016857 	.word	0x08016857

08016d4c <_cleanup_r>:
 8016d4c:	4901      	ldr	r1, [pc, #4]	; (8016d54 <_cleanup_r+0x8>)
 8016d4e:	f000 b8af 	b.w	8016eb0 <_fwalk_reent>
 8016d52:	bf00      	nop
 8016d54:	08016c8d 	.word	0x08016c8d

08016d58 <__sfmoreglue>:
 8016d58:	b570      	push	{r4, r5, r6, lr}
 8016d5a:	2268      	movs	r2, #104	; 0x68
 8016d5c:	1e4d      	subs	r5, r1, #1
 8016d5e:	4355      	muls	r5, r2
 8016d60:	460e      	mov	r6, r1
 8016d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d66:	f7fc ff69 	bl	8013c3c <_malloc_r>
 8016d6a:	4604      	mov	r4, r0
 8016d6c:	b140      	cbz	r0, 8016d80 <__sfmoreglue+0x28>
 8016d6e:	2100      	movs	r1, #0
 8016d70:	e9c0 1600 	strd	r1, r6, [r0]
 8016d74:	300c      	adds	r0, #12
 8016d76:	60a0      	str	r0, [r4, #8]
 8016d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016d7c:	f7fc fc78 	bl	8013670 <memset>
 8016d80:	4620      	mov	r0, r4
 8016d82:	bd70      	pop	{r4, r5, r6, pc}

08016d84 <__sfp_lock_acquire>:
 8016d84:	4801      	ldr	r0, [pc, #4]	; (8016d8c <__sfp_lock_acquire+0x8>)
 8016d86:	f7fe be99 	b.w	8015abc <__retarget_lock_acquire_recursive>
 8016d8a:	bf00      	nop
 8016d8c:	2000a7b6 	.word	0x2000a7b6

08016d90 <__sfp_lock_release>:
 8016d90:	4801      	ldr	r0, [pc, #4]	; (8016d98 <__sfp_lock_release+0x8>)
 8016d92:	f7fe be95 	b.w	8015ac0 <__retarget_lock_release_recursive>
 8016d96:	bf00      	nop
 8016d98:	2000a7b6 	.word	0x2000a7b6

08016d9c <__sinit_lock_acquire>:
 8016d9c:	4801      	ldr	r0, [pc, #4]	; (8016da4 <__sinit_lock_acquire+0x8>)
 8016d9e:	f7fe be8d 	b.w	8015abc <__retarget_lock_acquire_recursive>
 8016da2:	bf00      	nop
 8016da4:	2000a7b7 	.word	0x2000a7b7

08016da8 <__sinit_lock_release>:
 8016da8:	4801      	ldr	r0, [pc, #4]	; (8016db0 <__sinit_lock_release+0x8>)
 8016daa:	f7fe be89 	b.w	8015ac0 <__retarget_lock_release_recursive>
 8016dae:	bf00      	nop
 8016db0:	2000a7b7 	.word	0x2000a7b7

08016db4 <__sinit>:
 8016db4:	b510      	push	{r4, lr}
 8016db6:	4604      	mov	r4, r0
 8016db8:	f7ff fff0 	bl	8016d9c <__sinit_lock_acquire>
 8016dbc:	69a3      	ldr	r3, [r4, #24]
 8016dbe:	b11b      	cbz	r3, 8016dc8 <__sinit+0x14>
 8016dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dc4:	f7ff bff0 	b.w	8016da8 <__sinit_lock_release>
 8016dc8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016dcc:	6523      	str	r3, [r4, #80]	; 0x50
 8016dce:	4b13      	ldr	r3, [pc, #76]	; (8016e1c <__sinit+0x68>)
 8016dd0:	4a13      	ldr	r2, [pc, #76]	; (8016e20 <__sinit+0x6c>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	62a2      	str	r2, [r4, #40]	; 0x28
 8016dd6:	42a3      	cmp	r3, r4
 8016dd8:	bf04      	itt	eq
 8016dda:	2301      	moveq	r3, #1
 8016ddc:	61a3      	streq	r3, [r4, #24]
 8016dde:	4620      	mov	r0, r4
 8016de0:	f000 f820 	bl	8016e24 <__sfp>
 8016de4:	6060      	str	r0, [r4, #4]
 8016de6:	4620      	mov	r0, r4
 8016de8:	f000 f81c 	bl	8016e24 <__sfp>
 8016dec:	60a0      	str	r0, [r4, #8]
 8016dee:	4620      	mov	r0, r4
 8016df0:	f000 f818 	bl	8016e24 <__sfp>
 8016df4:	2200      	movs	r2, #0
 8016df6:	60e0      	str	r0, [r4, #12]
 8016df8:	2104      	movs	r1, #4
 8016dfa:	6860      	ldr	r0, [r4, #4]
 8016dfc:	f7ff ff82 	bl	8016d04 <std>
 8016e00:	68a0      	ldr	r0, [r4, #8]
 8016e02:	2201      	movs	r2, #1
 8016e04:	2109      	movs	r1, #9
 8016e06:	f7ff ff7d 	bl	8016d04 <std>
 8016e0a:	68e0      	ldr	r0, [r4, #12]
 8016e0c:	2202      	movs	r2, #2
 8016e0e:	2112      	movs	r1, #18
 8016e10:	f7ff ff78 	bl	8016d04 <std>
 8016e14:	2301      	movs	r3, #1
 8016e16:	61a3      	str	r3, [r4, #24]
 8016e18:	e7d2      	b.n	8016dc0 <__sinit+0xc>
 8016e1a:	bf00      	nop
 8016e1c:	08019120 	.word	0x08019120
 8016e20:	08016d4d 	.word	0x08016d4d

08016e24 <__sfp>:
 8016e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e26:	4607      	mov	r7, r0
 8016e28:	f7ff ffac 	bl	8016d84 <__sfp_lock_acquire>
 8016e2c:	4b1e      	ldr	r3, [pc, #120]	; (8016ea8 <__sfp+0x84>)
 8016e2e:	681e      	ldr	r6, [r3, #0]
 8016e30:	69b3      	ldr	r3, [r6, #24]
 8016e32:	b913      	cbnz	r3, 8016e3a <__sfp+0x16>
 8016e34:	4630      	mov	r0, r6
 8016e36:	f7ff ffbd 	bl	8016db4 <__sinit>
 8016e3a:	3648      	adds	r6, #72	; 0x48
 8016e3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e40:	3b01      	subs	r3, #1
 8016e42:	d503      	bpl.n	8016e4c <__sfp+0x28>
 8016e44:	6833      	ldr	r3, [r6, #0]
 8016e46:	b30b      	cbz	r3, 8016e8c <__sfp+0x68>
 8016e48:	6836      	ldr	r6, [r6, #0]
 8016e4a:	e7f7      	b.n	8016e3c <__sfp+0x18>
 8016e4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e50:	b9d5      	cbnz	r5, 8016e88 <__sfp+0x64>
 8016e52:	4b16      	ldr	r3, [pc, #88]	; (8016eac <__sfp+0x88>)
 8016e54:	60e3      	str	r3, [r4, #12]
 8016e56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e5a:	6665      	str	r5, [r4, #100]	; 0x64
 8016e5c:	f7fe fe2c 	bl	8015ab8 <__retarget_lock_init_recursive>
 8016e60:	f7ff ff96 	bl	8016d90 <__sfp_lock_release>
 8016e64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016e68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016e6c:	6025      	str	r5, [r4, #0]
 8016e6e:	61a5      	str	r5, [r4, #24]
 8016e70:	2208      	movs	r2, #8
 8016e72:	4629      	mov	r1, r5
 8016e74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016e78:	f7fc fbfa 	bl	8013670 <memset>
 8016e7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016e80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016e84:	4620      	mov	r0, r4
 8016e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e88:	3468      	adds	r4, #104	; 0x68
 8016e8a:	e7d9      	b.n	8016e40 <__sfp+0x1c>
 8016e8c:	2104      	movs	r1, #4
 8016e8e:	4638      	mov	r0, r7
 8016e90:	f7ff ff62 	bl	8016d58 <__sfmoreglue>
 8016e94:	4604      	mov	r4, r0
 8016e96:	6030      	str	r0, [r6, #0]
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	d1d5      	bne.n	8016e48 <__sfp+0x24>
 8016e9c:	f7ff ff78 	bl	8016d90 <__sfp_lock_release>
 8016ea0:	230c      	movs	r3, #12
 8016ea2:	603b      	str	r3, [r7, #0]
 8016ea4:	e7ee      	b.n	8016e84 <__sfp+0x60>
 8016ea6:	bf00      	nop
 8016ea8:	08019120 	.word	0x08019120
 8016eac:	ffff0001 	.word	0xffff0001

08016eb0 <_fwalk_reent>:
 8016eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016eb4:	4606      	mov	r6, r0
 8016eb6:	4688      	mov	r8, r1
 8016eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ebc:	2700      	movs	r7, #0
 8016ebe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016ec2:	f1b9 0901 	subs.w	r9, r9, #1
 8016ec6:	d505      	bpl.n	8016ed4 <_fwalk_reent+0x24>
 8016ec8:	6824      	ldr	r4, [r4, #0]
 8016eca:	2c00      	cmp	r4, #0
 8016ecc:	d1f7      	bne.n	8016ebe <_fwalk_reent+0xe>
 8016ece:	4638      	mov	r0, r7
 8016ed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ed4:	89ab      	ldrh	r3, [r5, #12]
 8016ed6:	2b01      	cmp	r3, #1
 8016ed8:	d907      	bls.n	8016eea <_fwalk_reent+0x3a>
 8016eda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ede:	3301      	adds	r3, #1
 8016ee0:	d003      	beq.n	8016eea <_fwalk_reent+0x3a>
 8016ee2:	4629      	mov	r1, r5
 8016ee4:	4630      	mov	r0, r6
 8016ee6:	47c0      	blx	r8
 8016ee8:	4307      	orrs	r7, r0
 8016eea:	3568      	adds	r5, #104	; 0x68
 8016eec:	e7e9      	b.n	8016ec2 <_fwalk_reent+0x12>
	...

08016ef0 <_lseek_r>:
 8016ef0:	b538      	push	{r3, r4, r5, lr}
 8016ef2:	4d07      	ldr	r5, [pc, #28]	; (8016f10 <_lseek_r+0x20>)
 8016ef4:	4604      	mov	r4, r0
 8016ef6:	4608      	mov	r0, r1
 8016ef8:	4611      	mov	r1, r2
 8016efa:	2200      	movs	r2, #0
 8016efc:	602a      	str	r2, [r5, #0]
 8016efe:	461a      	mov	r2, r3
 8016f00:	f7f4 fa2c 	bl	800b35c <_lseek>
 8016f04:	1c43      	adds	r3, r0, #1
 8016f06:	d102      	bne.n	8016f0e <_lseek_r+0x1e>
 8016f08:	682b      	ldr	r3, [r5, #0]
 8016f0a:	b103      	cbz	r3, 8016f0e <_lseek_r+0x1e>
 8016f0c:	6023      	str	r3, [r4, #0]
 8016f0e:	bd38      	pop	{r3, r4, r5, pc}
 8016f10:	2000a7bc 	.word	0x2000a7bc

08016f14 <__swhatbuf_r>:
 8016f14:	b570      	push	{r4, r5, r6, lr}
 8016f16:	460e      	mov	r6, r1
 8016f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f1c:	2900      	cmp	r1, #0
 8016f1e:	b096      	sub	sp, #88	; 0x58
 8016f20:	4614      	mov	r4, r2
 8016f22:	461d      	mov	r5, r3
 8016f24:	da08      	bge.n	8016f38 <__swhatbuf_r+0x24>
 8016f26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	602a      	str	r2, [r5, #0]
 8016f2e:	061a      	lsls	r2, r3, #24
 8016f30:	d410      	bmi.n	8016f54 <__swhatbuf_r+0x40>
 8016f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016f36:	e00e      	b.n	8016f56 <__swhatbuf_r+0x42>
 8016f38:	466a      	mov	r2, sp
 8016f3a:	f000 fd2b 	bl	8017994 <_fstat_r>
 8016f3e:	2800      	cmp	r0, #0
 8016f40:	dbf1      	blt.n	8016f26 <__swhatbuf_r+0x12>
 8016f42:	9a01      	ldr	r2, [sp, #4]
 8016f44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016f48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016f4c:	425a      	negs	r2, r3
 8016f4e:	415a      	adcs	r2, r3
 8016f50:	602a      	str	r2, [r5, #0]
 8016f52:	e7ee      	b.n	8016f32 <__swhatbuf_r+0x1e>
 8016f54:	2340      	movs	r3, #64	; 0x40
 8016f56:	2000      	movs	r0, #0
 8016f58:	6023      	str	r3, [r4, #0]
 8016f5a:	b016      	add	sp, #88	; 0x58
 8016f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016f60 <__smakebuf_r>:
 8016f60:	898b      	ldrh	r3, [r1, #12]
 8016f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016f64:	079d      	lsls	r5, r3, #30
 8016f66:	4606      	mov	r6, r0
 8016f68:	460c      	mov	r4, r1
 8016f6a:	d507      	bpl.n	8016f7c <__smakebuf_r+0x1c>
 8016f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016f70:	6023      	str	r3, [r4, #0]
 8016f72:	6123      	str	r3, [r4, #16]
 8016f74:	2301      	movs	r3, #1
 8016f76:	6163      	str	r3, [r4, #20]
 8016f78:	b002      	add	sp, #8
 8016f7a:	bd70      	pop	{r4, r5, r6, pc}
 8016f7c:	ab01      	add	r3, sp, #4
 8016f7e:	466a      	mov	r2, sp
 8016f80:	f7ff ffc8 	bl	8016f14 <__swhatbuf_r>
 8016f84:	9900      	ldr	r1, [sp, #0]
 8016f86:	4605      	mov	r5, r0
 8016f88:	4630      	mov	r0, r6
 8016f8a:	f7fc fe57 	bl	8013c3c <_malloc_r>
 8016f8e:	b948      	cbnz	r0, 8016fa4 <__smakebuf_r+0x44>
 8016f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f94:	059a      	lsls	r2, r3, #22
 8016f96:	d4ef      	bmi.n	8016f78 <__smakebuf_r+0x18>
 8016f98:	f023 0303 	bic.w	r3, r3, #3
 8016f9c:	f043 0302 	orr.w	r3, r3, #2
 8016fa0:	81a3      	strh	r3, [r4, #12]
 8016fa2:	e7e3      	b.n	8016f6c <__smakebuf_r+0xc>
 8016fa4:	4b0d      	ldr	r3, [pc, #52]	; (8016fdc <__smakebuf_r+0x7c>)
 8016fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8016fa8:	89a3      	ldrh	r3, [r4, #12]
 8016faa:	6020      	str	r0, [r4, #0]
 8016fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016fb0:	81a3      	strh	r3, [r4, #12]
 8016fb2:	9b00      	ldr	r3, [sp, #0]
 8016fb4:	6163      	str	r3, [r4, #20]
 8016fb6:	9b01      	ldr	r3, [sp, #4]
 8016fb8:	6120      	str	r0, [r4, #16]
 8016fba:	b15b      	cbz	r3, 8016fd4 <__smakebuf_r+0x74>
 8016fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016fc0:	4630      	mov	r0, r6
 8016fc2:	f000 fcf9 	bl	80179b8 <_isatty_r>
 8016fc6:	b128      	cbz	r0, 8016fd4 <__smakebuf_r+0x74>
 8016fc8:	89a3      	ldrh	r3, [r4, #12]
 8016fca:	f023 0303 	bic.w	r3, r3, #3
 8016fce:	f043 0301 	orr.w	r3, r3, #1
 8016fd2:	81a3      	strh	r3, [r4, #12]
 8016fd4:	89a0      	ldrh	r0, [r4, #12]
 8016fd6:	4305      	orrs	r5, r0
 8016fd8:	81a5      	strh	r5, [r4, #12]
 8016fda:	e7cd      	b.n	8016f78 <__smakebuf_r+0x18>
 8016fdc:	08016d4d 	.word	0x08016d4d

08016fe0 <__ascii_mbtowc>:
 8016fe0:	b082      	sub	sp, #8
 8016fe2:	b901      	cbnz	r1, 8016fe6 <__ascii_mbtowc+0x6>
 8016fe4:	a901      	add	r1, sp, #4
 8016fe6:	b142      	cbz	r2, 8016ffa <__ascii_mbtowc+0x1a>
 8016fe8:	b14b      	cbz	r3, 8016ffe <__ascii_mbtowc+0x1e>
 8016fea:	7813      	ldrb	r3, [r2, #0]
 8016fec:	600b      	str	r3, [r1, #0]
 8016fee:	7812      	ldrb	r2, [r2, #0]
 8016ff0:	1e10      	subs	r0, r2, #0
 8016ff2:	bf18      	it	ne
 8016ff4:	2001      	movne	r0, #1
 8016ff6:	b002      	add	sp, #8
 8016ff8:	4770      	bx	lr
 8016ffa:	4610      	mov	r0, r2
 8016ffc:	e7fb      	b.n	8016ff6 <__ascii_mbtowc+0x16>
 8016ffe:	f06f 0001 	mvn.w	r0, #1
 8017002:	e7f8      	b.n	8016ff6 <__ascii_mbtowc+0x16>

08017004 <memmove>:
 8017004:	4288      	cmp	r0, r1
 8017006:	b510      	push	{r4, lr}
 8017008:	eb01 0402 	add.w	r4, r1, r2
 801700c:	d902      	bls.n	8017014 <memmove+0x10>
 801700e:	4284      	cmp	r4, r0
 8017010:	4623      	mov	r3, r4
 8017012:	d807      	bhi.n	8017024 <memmove+0x20>
 8017014:	1e43      	subs	r3, r0, #1
 8017016:	42a1      	cmp	r1, r4
 8017018:	d008      	beq.n	801702c <memmove+0x28>
 801701a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801701e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017022:	e7f8      	b.n	8017016 <memmove+0x12>
 8017024:	4402      	add	r2, r0
 8017026:	4601      	mov	r1, r0
 8017028:	428a      	cmp	r2, r1
 801702a:	d100      	bne.n	801702e <memmove+0x2a>
 801702c:	bd10      	pop	{r4, pc}
 801702e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017036:	e7f7      	b.n	8017028 <memmove+0x24>

08017038 <_realloc_r>:
 8017038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801703c:	4680      	mov	r8, r0
 801703e:	4614      	mov	r4, r2
 8017040:	460e      	mov	r6, r1
 8017042:	b921      	cbnz	r1, 801704e <_realloc_r+0x16>
 8017044:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017048:	4611      	mov	r1, r2
 801704a:	f7fc bdf7 	b.w	8013c3c <_malloc_r>
 801704e:	b92a      	cbnz	r2, 801705c <_realloc_r+0x24>
 8017050:	f7fc fd88 	bl	8013b64 <_free_r>
 8017054:	4625      	mov	r5, r4
 8017056:	4628      	mov	r0, r5
 8017058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801705c:	f000 fcbc 	bl	80179d8 <_malloc_usable_size_r>
 8017060:	4284      	cmp	r4, r0
 8017062:	4607      	mov	r7, r0
 8017064:	d802      	bhi.n	801706c <_realloc_r+0x34>
 8017066:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801706a:	d812      	bhi.n	8017092 <_realloc_r+0x5a>
 801706c:	4621      	mov	r1, r4
 801706e:	4640      	mov	r0, r8
 8017070:	f7fc fde4 	bl	8013c3c <_malloc_r>
 8017074:	4605      	mov	r5, r0
 8017076:	2800      	cmp	r0, #0
 8017078:	d0ed      	beq.n	8017056 <_realloc_r+0x1e>
 801707a:	42bc      	cmp	r4, r7
 801707c:	4622      	mov	r2, r4
 801707e:	4631      	mov	r1, r6
 8017080:	bf28      	it	cs
 8017082:	463a      	movcs	r2, r7
 8017084:	f7fc fae6 	bl	8013654 <memcpy>
 8017088:	4631      	mov	r1, r6
 801708a:	4640      	mov	r0, r8
 801708c:	f7fc fd6a 	bl	8013b64 <_free_r>
 8017090:	e7e1      	b.n	8017056 <_realloc_r+0x1e>
 8017092:	4635      	mov	r5, r6
 8017094:	e7df      	b.n	8017056 <_realloc_r+0x1e>

08017096 <_sungetc_r>:
 8017096:	b538      	push	{r3, r4, r5, lr}
 8017098:	1c4b      	adds	r3, r1, #1
 801709a:	4614      	mov	r4, r2
 801709c:	d103      	bne.n	80170a6 <_sungetc_r+0x10>
 801709e:	f04f 35ff 	mov.w	r5, #4294967295
 80170a2:	4628      	mov	r0, r5
 80170a4:	bd38      	pop	{r3, r4, r5, pc}
 80170a6:	8993      	ldrh	r3, [r2, #12]
 80170a8:	f023 0320 	bic.w	r3, r3, #32
 80170ac:	8193      	strh	r3, [r2, #12]
 80170ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170b0:	6852      	ldr	r2, [r2, #4]
 80170b2:	b2cd      	uxtb	r5, r1
 80170b4:	b18b      	cbz	r3, 80170da <_sungetc_r+0x44>
 80170b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170b8:	4293      	cmp	r3, r2
 80170ba:	dd08      	ble.n	80170ce <_sungetc_r+0x38>
 80170bc:	6823      	ldr	r3, [r4, #0]
 80170be:	1e5a      	subs	r2, r3, #1
 80170c0:	6022      	str	r2, [r4, #0]
 80170c2:	f803 5c01 	strb.w	r5, [r3, #-1]
 80170c6:	6863      	ldr	r3, [r4, #4]
 80170c8:	3301      	adds	r3, #1
 80170ca:	6063      	str	r3, [r4, #4]
 80170cc:	e7e9      	b.n	80170a2 <_sungetc_r+0xc>
 80170ce:	4621      	mov	r1, r4
 80170d0:	f000 fc18 	bl	8017904 <__submore>
 80170d4:	2800      	cmp	r0, #0
 80170d6:	d0f1      	beq.n	80170bc <_sungetc_r+0x26>
 80170d8:	e7e1      	b.n	801709e <_sungetc_r+0x8>
 80170da:	6921      	ldr	r1, [r4, #16]
 80170dc:	6823      	ldr	r3, [r4, #0]
 80170de:	b151      	cbz	r1, 80170f6 <_sungetc_r+0x60>
 80170e0:	4299      	cmp	r1, r3
 80170e2:	d208      	bcs.n	80170f6 <_sungetc_r+0x60>
 80170e4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80170e8:	42a9      	cmp	r1, r5
 80170ea:	d104      	bne.n	80170f6 <_sungetc_r+0x60>
 80170ec:	3b01      	subs	r3, #1
 80170ee:	3201      	adds	r2, #1
 80170f0:	6023      	str	r3, [r4, #0]
 80170f2:	6062      	str	r2, [r4, #4]
 80170f4:	e7d5      	b.n	80170a2 <_sungetc_r+0xc>
 80170f6:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80170fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80170fe:	6363      	str	r3, [r4, #52]	; 0x34
 8017100:	2303      	movs	r3, #3
 8017102:	63a3      	str	r3, [r4, #56]	; 0x38
 8017104:	4623      	mov	r3, r4
 8017106:	f803 5f46 	strb.w	r5, [r3, #70]!
 801710a:	6023      	str	r3, [r4, #0]
 801710c:	2301      	movs	r3, #1
 801710e:	e7dc      	b.n	80170ca <_sungetc_r+0x34>

08017110 <__ssrefill_r>:
 8017110:	b510      	push	{r4, lr}
 8017112:	460c      	mov	r4, r1
 8017114:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017116:	b169      	cbz	r1, 8017134 <__ssrefill_r+0x24>
 8017118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801711c:	4299      	cmp	r1, r3
 801711e:	d001      	beq.n	8017124 <__ssrefill_r+0x14>
 8017120:	f7fc fd20 	bl	8013b64 <_free_r>
 8017124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017126:	6063      	str	r3, [r4, #4]
 8017128:	2000      	movs	r0, #0
 801712a:	6360      	str	r0, [r4, #52]	; 0x34
 801712c:	b113      	cbz	r3, 8017134 <__ssrefill_r+0x24>
 801712e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017130:	6023      	str	r3, [r4, #0]
 8017132:	bd10      	pop	{r4, pc}
 8017134:	6923      	ldr	r3, [r4, #16]
 8017136:	6023      	str	r3, [r4, #0]
 8017138:	2300      	movs	r3, #0
 801713a:	6063      	str	r3, [r4, #4]
 801713c:	89a3      	ldrh	r3, [r4, #12]
 801713e:	f043 0320 	orr.w	r3, r3, #32
 8017142:	81a3      	strh	r3, [r4, #12]
 8017144:	f04f 30ff 	mov.w	r0, #4294967295
 8017148:	e7f3      	b.n	8017132 <__ssrefill_r+0x22>
	...

0801714c <__ssvfiscanf_r>:
 801714c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017150:	460c      	mov	r4, r1
 8017152:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017156:	2100      	movs	r1, #0
 8017158:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801715c:	49a6      	ldr	r1, [pc, #664]	; (80173f8 <__ssvfiscanf_r+0x2ac>)
 801715e:	91a0      	str	r1, [sp, #640]	; 0x280
 8017160:	f10d 0804 	add.w	r8, sp, #4
 8017164:	49a5      	ldr	r1, [pc, #660]	; (80173fc <__ssvfiscanf_r+0x2b0>)
 8017166:	4fa6      	ldr	r7, [pc, #664]	; (8017400 <__ssvfiscanf_r+0x2b4>)
 8017168:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017404 <__ssvfiscanf_r+0x2b8>
 801716c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017170:	4606      	mov	r6, r0
 8017172:	91a1      	str	r1, [sp, #644]	; 0x284
 8017174:	9300      	str	r3, [sp, #0]
 8017176:	7813      	ldrb	r3, [r2, #0]
 8017178:	2b00      	cmp	r3, #0
 801717a:	f000 815a 	beq.w	8017432 <__ssvfiscanf_r+0x2e6>
 801717e:	5dd9      	ldrb	r1, [r3, r7]
 8017180:	f011 0108 	ands.w	r1, r1, #8
 8017184:	f102 0501 	add.w	r5, r2, #1
 8017188:	d019      	beq.n	80171be <__ssvfiscanf_r+0x72>
 801718a:	6863      	ldr	r3, [r4, #4]
 801718c:	2b00      	cmp	r3, #0
 801718e:	dd0f      	ble.n	80171b0 <__ssvfiscanf_r+0x64>
 8017190:	6823      	ldr	r3, [r4, #0]
 8017192:	781a      	ldrb	r2, [r3, #0]
 8017194:	5cba      	ldrb	r2, [r7, r2]
 8017196:	0712      	lsls	r2, r2, #28
 8017198:	d401      	bmi.n	801719e <__ssvfiscanf_r+0x52>
 801719a:	462a      	mov	r2, r5
 801719c:	e7eb      	b.n	8017176 <__ssvfiscanf_r+0x2a>
 801719e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80171a0:	3201      	adds	r2, #1
 80171a2:	9245      	str	r2, [sp, #276]	; 0x114
 80171a4:	6862      	ldr	r2, [r4, #4]
 80171a6:	3301      	adds	r3, #1
 80171a8:	3a01      	subs	r2, #1
 80171aa:	6062      	str	r2, [r4, #4]
 80171ac:	6023      	str	r3, [r4, #0]
 80171ae:	e7ec      	b.n	801718a <__ssvfiscanf_r+0x3e>
 80171b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80171b2:	4621      	mov	r1, r4
 80171b4:	4630      	mov	r0, r6
 80171b6:	4798      	blx	r3
 80171b8:	2800      	cmp	r0, #0
 80171ba:	d0e9      	beq.n	8017190 <__ssvfiscanf_r+0x44>
 80171bc:	e7ed      	b.n	801719a <__ssvfiscanf_r+0x4e>
 80171be:	2b25      	cmp	r3, #37	; 0x25
 80171c0:	d012      	beq.n	80171e8 <__ssvfiscanf_r+0x9c>
 80171c2:	469a      	mov	sl, r3
 80171c4:	6863      	ldr	r3, [r4, #4]
 80171c6:	2b00      	cmp	r3, #0
 80171c8:	f340 8091 	ble.w	80172ee <__ssvfiscanf_r+0x1a2>
 80171cc:	6822      	ldr	r2, [r4, #0]
 80171ce:	7813      	ldrb	r3, [r2, #0]
 80171d0:	4553      	cmp	r3, sl
 80171d2:	f040 812e 	bne.w	8017432 <__ssvfiscanf_r+0x2e6>
 80171d6:	6863      	ldr	r3, [r4, #4]
 80171d8:	3b01      	subs	r3, #1
 80171da:	6063      	str	r3, [r4, #4]
 80171dc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80171de:	3201      	adds	r2, #1
 80171e0:	3301      	adds	r3, #1
 80171e2:	6022      	str	r2, [r4, #0]
 80171e4:	9345      	str	r3, [sp, #276]	; 0x114
 80171e6:	e7d8      	b.n	801719a <__ssvfiscanf_r+0x4e>
 80171e8:	9141      	str	r1, [sp, #260]	; 0x104
 80171ea:	9143      	str	r1, [sp, #268]	; 0x10c
 80171ec:	7853      	ldrb	r3, [r2, #1]
 80171ee:	2b2a      	cmp	r3, #42	; 0x2a
 80171f0:	bf02      	ittt	eq
 80171f2:	2310      	moveq	r3, #16
 80171f4:	1c95      	addeq	r5, r2, #2
 80171f6:	9341      	streq	r3, [sp, #260]	; 0x104
 80171f8:	220a      	movs	r2, #10
 80171fa:	46aa      	mov	sl, r5
 80171fc:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017200:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017204:	2b09      	cmp	r3, #9
 8017206:	d91d      	bls.n	8017244 <__ssvfiscanf_r+0xf8>
 8017208:	487e      	ldr	r0, [pc, #504]	; (8017404 <__ssvfiscanf_r+0x2b8>)
 801720a:	2203      	movs	r2, #3
 801720c:	f7e8 ffc0 	bl	8000190 <memchr>
 8017210:	b140      	cbz	r0, 8017224 <__ssvfiscanf_r+0xd8>
 8017212:	2301      	movs	r3, #1
 8017214:	eba0 0009 	sub.w	r0, r0, r9
 8017218:	fa03 f000 	lsl.w	r0, r3, r0
 801721c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801721e:	4318      	orrs	r0, r3
 8017220:	9041      	str	r0, [sp, #260]	; 0x104
 8017222:	4655      	mov	r5, sl
 8017224:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017228:	2b78      	cmp	r3, #120	; 0x78
 801722a:	d806      	bhi.n	801723a <__ssvfiscanf_r+0xee>
 801722c:	2b57      	cmp	r3, #87	; 0x57
 801722e:	d810      	bhi.n	8017252 <__ssvfiscanf_r+0x106>
 8017230:	2b25      	cmp	r3, #37	; 0x25
 8017232:	d0c6      	beq.n	80171c2 <__ssvfiscanf_r+0x76>
 8017234:	d856      	bhi.n	80172e4 <__ssvfiscanf_r+0x198>
 8017236:	2b00      	cmp	r3, #0
 8017238:	d064      	beq.n	8017304 <__ssvfiscanf_r+0x1b8>
 801723a:	2303      	movs	r3, #3
 801723c:	9347      	str	r3, [sp, #284]	; 0x11c
 801723e:	230a      	movs	r3, #10
 8017240:	9342      	str	r3, [sp, #264]	; 0x108
 8017242:	e071      	b.n	8017328 <__ssvfiscanf_r+0x1dc>
 8017244:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017246:	fb02 1103 	mla	r1, r2, r3, r1
 801724a:	3930      	subs	r1, #48	; 0x30
 801724c:	9143      	str	r1, [sp, #268]	; 0x10c
 801724e:	4655      	mov	r5, sl
 8017250:	e7d3      	b.n	80171fa <__ssvfiscanf_r+0xae>
 8017252:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017256:	2a20      	cmp	r2, #32
 8017258:	d8ef      	bhi.n	801723a <__ssvfiscanf_r+0xee>
 801725a:	a101      	add	r1, pc, #4	; (adr r1, 8017260 <__ssvfiscanf_r+0x114>)
 801725c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017260:	08017313 	.word	0x08017313
 8017264:	0801723b 	.word	0x0801723b
 8017268:	0801723b 	.word	0x0801723b
 801726c:	08017371 	.word	0x08017371
 8017270:	0801723b 	.word	0x0801723b
 8017274:	0801723b 	.word	0x0801723b
 8017278:	0801723b 	.word	0x0801723b
 801727c:	0801723b 	.word	0x0801723b
 8017280:	0801723b 	.word	0x0801723b
 8017284:	0801723b 	.word	0x0801723b
 8017288:	0801723b 	.word	0x0801723b
 801728c:	08017387 	.word	0x08017387
 8017290:	0801735d 	.word	0x0801735d
 8017294:	080172eb 	.word	0x080172eb
 8017298:	080172eb 	.word	0x080172eb
 801729c:	080172eb 	.word	0x080172eb
 80172a0:	0801723b 	.word	0x0801723b
 80172a4:	08017361 	.word	0x08017361
 80172a8:	0801723b 	.word	0x0801723b
 80172ac:	0801723b 	.word	0x0801723b
 80172b0:	0801723b 	.word	0x0801723b
 80172b4:	0801723b 	.word	0x0801723b
 80172b8:	08017397 	.word	0x08017397
 80172bc:	08017369 	.word	0x08017369
 80172c0:	0801730b 	.word	0x0801730b
 80172c4:	0801723b 	.word	0x0801723b
 80172c8:	0801723b 	.word	0x0801723b
 80172cc:	08017393 	.word	0x08017393
 80172d0:	0801723b 	.word	0x0801723b
 80172d4:	0801735d 	.word	0x0801735d
 80172d8:	0801723b 	.word	0x0801723b
 80172dc:	0801723b 	.word	0x0801723b
 80172e0:	08017313 	.word	0x08017313
 80172e4:	3b45      	subs	r3, #69	; 0x45
 80172e6:	2b02      	cmp	r3, #2
 80172e8:	d8a7      	bhi.n	801723a <__ssvfiscanf_r+0xee>
 80172ea:	2305      	movs	r3, #5
 80172ec:	e01b      	b.n	8017326 <__ssvfiscanf_r+0x1da>
 80172ee:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80172f0:	4621      	mov	r1, r4
 80172f2:	4630      	mov	r0, r6
 80172f4:	4798      	blx	r3
 80172f6:	2800      	cmp	r0, #0
 80172f8:	f43f af68 	beq.w	80171cc <__ssvfiscanf_r+0x80>
 80172fc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80172fe:	2800      	cmp	r0, #0
 8017300:	f040 808d 	bne.w	801741e <__ssvfiscanf_r+0x2d2>
 8017304:	f04f 30ff 	mov.w	r0, #4294967295
 8017308:	e08f      	b.n	801742a <__ssvfiscanf_r+0x2de>
 801730a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801730c:	f042 0220 	orr.w	r2, r2, #32
 8017310:	9241      	str	r2, [sp, #260]	; 0x104
 8017312:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017318:	9241      	str	r2, [sp, #260]	; 0x104
 801731a:	2210      	movs	r2, #16
 801731c:	2b6f      	cmp	r3, #111	; 0x6f
 801731e:	9242      	str	r2, [sp, #264]	; 0x108
 8017320:	bf34      	ite	cc
 8017322:	2303      	movcc	r3, #3
 8017324:	2304      	movcs	r3, #4
 8017326:	9347      	str	r3, [sp, #284]	; 0x11c
 8017328:	6863      	ldr	r3, [r4, #4]
 801732a:	2b00      	cmp	r3, #0
 801732c:	dd42      	ble.n	80173b4 <__ssvfiscanf_r+0x268>
 801732e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017330:	0659      	lsls	r1, r3, #25
 8017332:	d404      	bmi.n	801733e <__ssvfiscanf_r+0x1f2>
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	781a      	ldrb	r2, [r3, #0]
 8017338:	5cba      	ldrb	r2, [r7, r2]
 801733a:	0712      	lsls	r2, r2, #28
 801733c:	d441      	bmi.n	80173c2 <__ssvfiscanf_r+0x276>
 801733e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017340:	2b02      	cmp	r3, #2
 8017342:	dc50      	bgt.n	80173e6 <__ssvfiscanf_r+0x29a>
 8017344:	466b      	mov	r3, sp
 8017346:	4622      	mov	r2, r4
 8017348:	a941      	add	r1, sp, #260	; 0x104
 801734a:	4630      	mov	r0, r6
 801734c:	f000 f876 	bl	801743c <_scanf_chars>
 8017350:	2801      	cmp	r0, #1
 8017352:	d06e      	beq.n	8017432 <__ssvfiscanf_r+0x2e6>
 8017354:	2802      	cmp	r0, #2
 8017356:	f47f af20 	bne.w	801719a <__ssvfiscanf_r+0x4e>
 801735a:	e7cf      	b.n	80172fc <__ssvfiscanf_r+0x1b0>
 801735c:	220a      	movs	r2, #10
 801735e:	e7dd      	b.n	801731c <__ssvfiscanf_r+0x1d0>
 8017360:	2300      	movs	r3, #0
 8017362:	9342      	str	r3, [sp, #264]	; 0x108
 8017364:	2303      	movs	r3, #3
 8017366:	e7de      	b.n	8017326 <__ssvfiscanf_r+0x1da>
 8017368:	2308      	movs	r3, #8
 801736a:	9342      	str	r3, [sp, #264]	; 0x108
 801736c:	2304      	movs	r3, #4
 801736e:	e7da      	b.n	8017326 <__ssvfiscanf_r+0x1da>
 8017370:	4629      	mov	r1, r5
 8017372:	4640      	mov	r0, r8
 8017374:	f000 f9c6 	bl	8017704 <__sccl>
 8017378:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801737a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801737e:	9341      	str	r3, [sp, #260]	; 0x104
 8017380:	4605      	mov	r5, r0
 8017382:	2301      	movs	r3, #1
 8017384:	e7cf      	b.n	8017326 <__ssvfiscanf_r+0x1da>
 8017386:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801738c:	9341      	str	r3, [sp, #260]	; 0x104
 801738e:	2300      	movs	r3, #0
 8017390:	e7c9      	b.n	8017326 <__ssvfiscanf_r+0x1da>
 8017392:	2302      	movs	r3, #2
 8017394:	e7c7      	b.n	8017326 <__ssvfiscanf_r+0x1da>
 8017396:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017398:	06c3      	lsls	r3, r0, #27
 801739a:	f53f aefe 	bmi.w	801719a <__ssvfiscanf_r+0x4e>
 801739e:	9b00      	ldr	r3, [sp, #0]
 80173a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173a2:	1d19      	adds	r1, r3, #4
 80173a4:	9100      	str	r1, [sp, #0]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	f010 0f01 	tst.w	r0, #1
 80173ac:	bf14      	ite	ne
 80173ae:	801a      	strhne	r2, [r3, #0]
 80173b0:	601a      	streq	r2, [r3, #0]
 80173b2:	e6f2      	b.n	801719a <__ssvfiscanf_r+0x4e>
 80173b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173b6:	4621      	mov	r1, r4
 80173b8:	4630      	mov	r0, r6
 80173ba:	4798      	blx	r3
 80173bc:	2800      	cmp	r0, #0
 80173be:	d0b6      	beq.n	801732e <__ssvfiscanf_r+0x1e2>
 80173c0:	e79c      	b.n	80172fc <__ssvfiscanf_r+0x1b0>
 80173c2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80173c4:	3201      	adds	r2, #1
 80173c6:	9245      	str	r2, [sp, #276]	; 0x114
 80173c8:	6862      	ldr	r2, [r4, #4]
 80173ca:	3a01      	subs	r2, #1
 80173cc:	2a00      	cmp	r2, #0
 80173ce:	6062      	str	r2, [r4, #4]
 80173d0:	dd02      	ble.n	80173d8 <__ssvfiscanf_r+0x28c>
 80173d2:	3301      	adds	r3, #1
 80173d4:	6023      	str	r3, [r4, #0]
 80173d6:	e7ad      	b.n	8017334 <__ssvfiscanf_r+0x1e8>
 80173d8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80173da:	4621      	mov	r1, r4
 80173dc:	4630      	mov	r0, r6
 80173de:	4798      	blx	r3
 80173e0:	2800      	cmp	r0, #0
 80173e2:	d0a7      	beq.n	8017334 <__ssvfiscanf_r+0x1e8>
 80173e4:	e78a      	b.n	80172fc <__ssvfiscanf_r+0x1b0>
 80173e6:	2b04      	cmp	r3, #4
 80173e8:	dc0e      	bgt.n	8017408 <__ssvfiscanf_r+0x2bc>
 80173ea:	466b      	mov	r3, sp
 80173ec:	4622      	mov	r2, r4
 80173ee:	a941      	add	r1, sp, #260	; 0x104
 80173f0:	4630      	mov	r0, r6
 80173f2:	f000 f87d 	bl	80174f0 <_scanf_i>
 80173f6:	e7ab      	b.n	8017350 <__ssvfiscanf_r+0x204>
 80173f8:	08017097 	.word	0x08017097
 80173fc:	08017111 	.word	0x08017111
 8017400:	08019546 	.word	0x08019546
 8017404:	0801953a 	.word	0x0801953a
 8017408:	4b0b      	ldr	r3, [pc, #44]	; (8017438 <__ssvfiscanf_r+0x2ec>)
 801740a:	2b00      	cmp	r3, #0
 801740c:	f43f aec5 	beq.w	801719a <__ssvfiscanf_r+0x4e>
 8017410:	466b      	mov	r3, sp
 8017412:	4622      	mov	r2, r4
 8017414:	a941      	add	r1, sp, #260	; 0x104
 8017416:	4630      	mov	r0, r6
 8017418:	f3af 8000 	nop.w
 801741c:	e798      	b.n	8017350 <__ssvfiscanf_r+0x204>
 801741e:	89a3      	ldrh	r3, [r4, #12]
 8017420:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017424:	bf18      	it	ne
 8017426:	f04f 30ff 	movne.w	r0, #4294967295
 801742a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801742e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017432:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017434:	e7f9      	b.n	801742a <__ssvfiscanf_r+0x2de>
 8017436:	bf00      	nop
 8017438:	00000000 	.word	0x00000000

0801743c <_scanf_chars>:
 801743c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017440:	4615      	mov	r5, r2
 8017442:	688a      	ldr	r2, [r1, #8]
 8017444:	4680      	mov	r8, r0
 8017446:	460c      	mov	r4, r1
 8017448:	b932      	cbnz	r2, 8017458 <_scanf_chars+0x1c>
 801744a:	698a      	ldr	r2, [r1, #24]
 801744c:	2a00      	cmp	r2, #0
 801744e:	bf0c      	ite	eq
 8017450:	2201      	moveq	r2, #1
 8017452:	f04f 32ff 	movne.w	r2, #4294967295
 8017456:	608a      	str	r2, [r1, #8]
 8017458:	6822      	ldr	r2, [r4, #0]
 801745a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80174ec <_scanf_chars+0xb0>
 801745e:	06d1      	lsls	r1, r2, #27
 8017460:	bf5f      	itttt	pl
 8017462:	681a      	ldrpl	r2, [r3, #0]
 8017464:	1d11      	addpl	r1, r2, #4
 8017466:	6019      	strpl	r1, [r3, #0]
 8017468:	6816      	ldrpl	r6, [r2, #0]
 801746a:	2700      	movs	r7, #0
 801746c:	69a0      	ldr	r0, [r4, #24]
 801746e:	b188      	cbz	r0, 8017494 <_scanf_chars+0x58>
 8017470:	2801      	cmp	r0, #1
 8017472:	d107      	bne.n	8017484 <_scanf_chars+0x48>
 8017474:	682a      	ldr	r2, [r5, #0]
 8017476:	7811      	ldrb	r1, [r2, #0]
 8017478:	6962      	ldr	r2, [r4, #20]
 801747a:	5c52      	ldrb	r2, [r2, r1]
 801747c:	b952      	cbnz	r2, 8017494 <_scanf_chars+0x58>
 801747e:	2f00      	cmp	r7, #0
 8017480:	d031      	beq.n	80174e6 <_scanf_chars+0xaa>
 8017482:	e022      	b.n	80174ca <_scanf_chars+0x8e>
 8017484:	2802      	cmp	r0, #2
 8017486:	d120      	bne.n	80174ca <_scanf_chars+0x8e>
 8017488:	682b      	ldr	r3, [r5, #0]
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8017490:	071b      	lsls	r3, r3, #28
 8017492:	d41a      	bmi.n	80174ca <_scanf_chars+0x8e>
 8017494:	6823      	ldr	r3, [r4, #0]
 8017496:	06da      	lsls	r2, r3, #27
 8017498:	bf5e      	ittt	pl
 801749a:	682b      	ldrpl	r3, [r5, #0]
 801749c:	781b      	ldrbpl	r3, [r3, #0]
 801749e:	f806 3b01 	strbpl.w	r3, [r6], #1
 80174a2:	682a      	ldr	r2, [r5, #0]
 80174a4:	686b      	ldr	r3, [r5, #4]
 80174a6:	3201      	adds	r2, #1
 80174a8:	602a      	str	r2, [r5, #0]
 80174aa:	68a2      	ldr	r2, [r4, #8]
 80174ac:	3b01      	subs	r3, #1
 80174ae:	3a01      	subs	r2, #1
 80174b0:	606b      	str	r3, [r5, #4]
 80174b2:	3701      	adds	r7, #1
 80174b4:	60a2      	str	r2, [r4, #8]
 80174b6:	b142      	cbz	r2, 80174ca <_scanf_chars+0x8e>
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	dcd7      	bgt.n	801746c <_scanf_chars+0x30>
 80174bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80174c0:	4629      	mov	r1, r5
 80174c2:	4640      	mov	r0, r8
 80174c4:	4798      	blx	r3
 80174c6:	2800      	cmp	r0, #0
 80174c8:	d0d0      	beq.n	801746c <_scanf_chars+0x30>
 80174ca:	6823      	ldr	r3, [r4, #0]
 80174cc:	f013 0310 	ands.w	r3, r3, #16
 80174d0:	d105      	bne.n	80174de <_scanf_chars+0xa2>
 80174d2:	68e2      	ldr	r2, [r4, #12]
 80174d4:	3201      	adds	r2, #1
 80174d6:	60e2      	str	r2, [r4, #12]
 80174d8:	69a2      	ldr	r2, [r4, #24]
 80174da:	b102      	cbz	r2, 80174de <_scanf_chars+0xa2>
 80174dc:	7033      	strb	r3, [r6, #0]
 80174de:	6923      	ldr	r3, [r4, #16]
 80174e0:	443b      	add	r3, r7
 80174e2:	6123      	str	r3, [r4, #16]
 80174e4:	2000      	movs	r0, #0
 80174e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174ea:	bf00      	nop
 80174ec:	08019546 	.word	0x08019546

080174f0 <_scanf_i>:
 80174f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f4:	4698      	mov	r8, r3
 80174f6:	4b76      	ldr	r3, [pc, #472]	; (80176d0 <_scanf_i+0x1e0>)
 80174f8:	460c      	mov	r4, r1
 80174fa:	4682      	mov	sl, r0
 80174fc:	4616      	mov	r6, r2
 80174fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017502:	b087      	sub	sp, #28
 8017504:	ab03      	add	r3, sp, #12
 8017506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801750a:	4b72      	ldr	r3, [pc, #456]	; (80176d4 <_scanf_i+0x1e4>)
 801750c:	69a1      	ldr	r1, [r4, #24]
 801750e:	4a72      	ldr	r2, [pc, #456]	; (80176d8 <_scanf_i+0x1e8>)
 8017510:	2903      	cmp	r1, #3
 8017512:	bf18      	it	ne
 8017514:	461a      	movne	r2, r3
 8017516:	68a3      	ldr	r3, [r4, #8]
 8017518:	9201      	str	r2, [sp, #4]
 801751a:	1e5a      	subs	r2, r3, #1
 801751c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017520:	bf88      	it	hi
 8017522:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017526:	4627      	mov	r7, r4
 8017528:	bf82      	ittt	hi
 801752a:	eb03 0905 	addhi.w	r9, r3, r5
 801752e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017532:	60a3      	strhi	r3, [r4, #8]
 8017534:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017538:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801753c:	bf98      	it	ls
 801753e:	f04f 0900 	movls.w	r9, #0
 8017542:	6023      	str	r3, [r4, #0]
 8017544:	463d      	mov	r5, r7
 8017546:	f04f 0b00 	mov.w	fp, #0
 801754a:	6831      	ldr	r1, [r6, #0]
 801754c:	ab03      	add	r3, sp, #12
 801754e:	7809      	ldrb	r1, [r1, #0]
 8017550:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017554:	2202      	movs	r2, #2
 8017556:	f7e8 fe1b 	bl	8000190 <memchr>
 801755a:	b328      	cbz	r0, 80175a8 <_scanf_i+0xb8>
 801755c:	f1bb 0f01 	cmp.w	fp, #1
 8017560:	d159      	bne.n	8017616 <_scanf_i+0x126>
 8017562:	6862      	ldr	r2, [r4, #4]
 8017564:	b92a      	cbnz	r2, 8017572 <_scanf_i+0x82>
 8017566:	6822      	ldr	r2, [r4, #0]
 8017568:	2308      	movs	r3, #8
 801756a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801756e:	6063      	str	r3, [r4, #4]
 8017570:	6022      	str	r2, [r4, #0]
 8017572:	6822      	ldr	r2, [r4, #0]
 8017574:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017578:	6022      	str	r2, [r4, #0]
 801757a:	68a2      	ldr	r2, [r4, #8]
 801757c:	1e51      	subs	r1, r2, #1
 801757e:	60a1      	str	r1, [r4, #8]
 8017580:	b192      	cbz	r2, 80175a8 <_scanf_i+0xb8>
 8017582:	6832      	ldr	r2, [r6, #0]
 8017584:	1c51      	adds	r1, r2, #1
 8017586:	6031      	str	r1, [r6, #0]
 8017588:	7812      	ldrb	r2, [r2, #0]
 801758a:	f805 2b01 	strb.w	r2, [r5], #1
 801758e:	6872      	ldr	r2, [r6, #4]
 8017590:	3a01      	subs	r2, #1
 8017592:	2a00      	cmp	r2, #0
 8017594:	6072      	str	r2, [r6, #4]
 8017596:	dc07      	bgt.n	80175a8 <_scanf_i+0xb8>
 8017598:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801759c:	4631      	mov	r1, r6
 801759e:	4650      	mov	r0, sl
 80175a0:	4790      	blx	r2
 80175a2:	2800      	cmp	r0, #0
 80175a4:	f040 8085 	bne.w	80176b2 <_scanf_i+0x1c2>
 80175a8:	f10b 0b01 	add.w	fp, fp, #1
 80175ac:	f1bb 0f03 	cmp.w	fp, #3
 80175b0:	d1cb      	bne.n	801754a <_scanf_i+0x5a>
 80175b2:	6863      	ldr	r3, [r4, #4]
 80175b4:	b90b      	cbnz	r3, 80175ba <_scanf_i+0xca>
 80175b6:	230a      	movs	r3, #10
 80175b8:	6063      	str	r3, [r4, #4]
 80175ba:	6863      	ldr	r3, [r4, #4]
 80175bc:	4947      	ldr	r1, [pc, #284]	; (80176dc <_scanf_i+0x1ec>)
 80175be:	6960      	ldr	r0, [r4, #20]
 80175c0:	1ac9      	subs	r1, r1, r3
 80175c2:	f000 f89f 	bl	8017704 <__sccl>
 80175c6:	f04f 0b00 	mov.w	fp, #0
 80175ca:	68a3      	ldr	r3, [r4, #8]
 80175cc:	6822      	ldr	r2, [r4, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d03d      	beq.n	801764e <_scanf_i+0x15e>
 80175d2:	6831      	ldr	r1, [r6, #0]
 80175d4:	6960      	ldr	r0, [r4, #20]
 80175d6:	f891 c000 	ldrb.w	ip, [r1]
 80175da:	f810 000c 	ldrb.w	r0, [r0, ip]
 80175de:	2800      	cmp	r0, #0
 80175e0:	d035      	beq.n	801764e <_scanf_i+0x15e>
 80175e2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80175e6:	d124      	bne.n	8017632 <_scanf_i+0x142>
 80175e8:	0510      	lsls	r0, r2, #20
 80175ea:	d522      	bpl.n	8017632 <_scanf_i+0x142>
 80175ec:	f10b 0b01 	add.w	fp, fp, #1
 80175f0:	f1b9 0f00 	cmp.w	r9, #0
 80175f4:	d003      	beq.n	80175fe <_scanf_i+0x10e>
 80175f6:	3301      	adds	r3, #1
 80175f8:	f109 39ff 	add.w	r9, r9, #4294967295
 80175fc:	60a3      	str	r3, [r4, #8]
 80175fe:	6873      	ldr	r3, [r6, #4]
 8017600:	3b01      	subs	r3, #1
 8017602:	2b00      	cmp	r3, #0
 8017604:	6073      	str	r3, [r6, #4]
 8017606:	dd1b      	ble.n	8017640 <_scanf_i+0x150>
 8017608:	6833      	ldr	r3, [r6, #0]
 801760a:	3301      	adds	r3, #1
 801760c:	6033      	str	r3, [r6, #0]
 801760e:	68a3      	ldr	r3, [r4, #8]
 8017610:	3b01      	subs	r3, #1
 8017612:	60a3      	str	r3, [r4, #8]
 8017614:	e7d9      	b.n	80175ca <_scanf_i+0xda>
 8017616:	f1bb 0f02 	cmp.w	fp, #2
 801761a:	d1ae      	bne.n	801757a <_scanf_i+0x8a>
 801761c:	6822      	ldr	r2, [r4, #0]
 801761e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017622:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017626:	d1bf      	bne.n	80175a8 <_scanf_i+0xb8>
 8017628:	2310      	movs	r3, #16
 801762a:	6063      	str	r3, [r4, #4]
 801762c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017630:	e7a2      	b.n	8017578 <_scanf_i+0x88>
 8017632:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017636:	6022      	str	r2, [r4, #0]
 8017638:	780b      	ldrb	r3, [r1, #0]
 801763a:	f805 3b01 	strb.w	r3, [r5], #1
 801763e:	e7de      	b.n	80175fe <_scanf_i+0x10e>
 8017640:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017644:	4631      	mov	r1, r6
 8017646:	4650      	mov	r0, sl
 8017648:	4798      	blx	r3
 801764a:	2800      	cmp	r0, #0
 801764c:	d0df      	beq.n	801760e <_scanf_i+0x11e>
 801764e:	6823      	ldr	r3, [r4, #0]
 8017650:	05db      	lsls	r3, r3, #23
 8017652:	d50d      	bpl.n	8017670 <_scanf_i+0x180>
 8017654:	42bd      	cmp	r5, r7
 8017656:	d909      	bls.n	801766c <_scanf_i+0x17c>
 8017658:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801765c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017660:	4632      	mov	r2, r6
 8017662:	4650      	mov	r0, sl
 8017664:	4798      	blx	r3
 8017666:	f105 39ff 	add.w	r9, r5, #4294967295
 801766a:	464d      	mov	r5, r9
 801766c:	42bd      	cmp	r5, r7
 801766e:	d02d      	beq.n	80176cc <_scanf_i+0x1dc>
 8017670:	6822      	ldr	r2, [r4, #0]
 8017672:	f012 0210 	ands.w	r2, r2, #16
 8017676:	d113      	bne.n	80176a0 <_scanf_i+0x1b0>
 8017678:	702a      	strb	r2, [r5, #0]
 801767a:	6863      	ldr	r3, [r4, #4]
 801767c:	9e01      	ldr	r6, [sp, #4]
 801767e:	4639      	mov	r1, r7
 8017680:	4650      	mov	r0, sl
 8017682:	47b0      	blx	r6
 8017684:	6821      	ldr	r1, [r4, #0]
 8017686:	f8d8 3000 	ldr.w	r3, [r8]
 801768a:	f011 0f20 	tst.w	r1, #32
 801768e:	d013      	beq.n	80176b8 <_scanf_i+0x1c8>
 8017690:	1d1a      	adds	r2, r3, #4
 8017692:	f8c8 2000 	str.w	r2, [r8]
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	6018      	str	r0, [r3, #0]
 801769a:	68e3      	ldr	r3, [r4, #12]
 801769c:	3301      	adds	r3, #1
 801769e:	60e3      	str	r3, [r4, #12]
 80176a0:	1bed      	subs	r5, r5, r7
 80176a2:	44ab      	add	fp, r5
 80176a4:	6925      	ldr	r5, [r4, #16]
 80176a6:	445d      	add	r5, fp
 80176a8:	6125      	str	r5, [r4, #16]
 80176aa:	2000      	movs	r0, #0
 80176ac:	b007      	add	sp, #28
 80176ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b2:	f04f 0b00 	mov.w	fp, #0
 80176b6:	e7ca      	b.n	801764e <_scanf_i+0x15e>
 80176b8:	1d1a      	adds	r2, r3, #4
 80176ba:	f8c8 2000 	str.w	r2, [r8]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f011 0f01 	tst.w	r1, #1
 80176c4:	bf14      	ite	ne
 80176c6:	8018      	strhne	r0, [r3, #0]
 80176c8:	6018      	streq	r0, [r3, #0]
 80176ca:	e7e6      	b.n	801769a <_scanf_i+0x1aa>
 80176cc:	2001      	movs	r0, #1
 80176ce:	e7ed      	b.n	80176ac <_scanf_i+0x1bc>
 80176d0:	0801904c 	.word	0x0801904c
 80176d4:	0801697d 	.word	0x0801697d
 80176d8:	08017901 	.word	0x08017901
 80176dc:	080196cb 	.word	0x080196cb

080176e0 <_read_r>:
 80176e0:	b538      	push	{r3, r4, r5, lr}
 80176e2:	4d07      	ldr	r5, [pc, #28]	; (8017700 <_read_r+0x20>)
 80176e4:	4604      	mov	r4, r0
 80176e6:	4608      	mov	r0, r1
 80176e8:	4611      	mov	r1, r2
 80176ea:	2200      	movs	r2, #0
 80176ec:	602a      	str	r2, [r5, #0]
 80176ee:	461a      	mov	r2, r3
 80176f0:	f7f3 fdd4 	bl	800b29c <_read>
 80176f4:	1c43      	adds	r3, r0, #1
 80176f6:	d102      	bne.n	80176fe <_read_r+0x1e>
 80176f8:	682b      	ldr	r3, [r5, #0]
 80176fa:	b103      	cbz	r3, 80176fe <_read_r+0x1e>
 80176fc:	6023      	str	r3, [r4, #0]
 80176fe:	bd38      	pop	{r3, r4, r5, pc}
 8017700:	2000a7bc 	.word	0x2000a7bc

08017704 <__sccl>:
 8017704:	b570      	push	{r4, r5, r6, lr}
 8017706:	780b      	ldrb	r3, [r1, #0]
 8017708:	4604      	mov	r4, r0
 801770a:	2b5e      	cmp	r3, #94	; 0x5e
 801770c:	bf0b      	itete	eq
 801770e:	784b      	ldrbeq	r3, [r1, #1]
 8017710:	1c48      	addne	r0, r1, #1
 8017712:	1c88      	addeq	r0, r1, #2
 8017714:	2200      	movne	r2, #0
 8017716:	bf08      	it	eq
 8017718:	2201      	moveq	r2, #1
 801771a:	1e61      	subs	r1, r4, #1
 801771c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017720:	f801 2f01 	strb.w	r2, [r1, #1]!
 8017724:	42a9      	cmp	r1, r5
 8017726:	d1fb      	bne.n	8017720 <__sccl+0x1c>
 8017728:	b90b      	cbnz	r3, 801772e <__sccl+0x2a>
 801772a:	3801      	subs	r0, #1
 801772c:	bd70      	pop	{r4, r5, r6, pc}
 801772e:	f082 0201 	eor.w	r2, r2, #1
 8017732:	54e2      	strb	r2, [r4, r3]
 8017734:	4605      	mov	r5, r0
 8017736:	4628      	mov	r0, r5
 8017738:	f810 1b01 	ldrb.w	r1, [r0], #1
 801773c:	292d      	cmp	r1, #45	; 0x2d
 801773e:	d006      	beq.n	801774e <__sccl+0x4a>
 8017740:	295d      	cmp	r1, #93	; 0x5d
 8017742:	d0f3      	beq.n	801772c <__sccl+0x28>
 8017744:	b909      	cbnz	r1, 801774a <__sccl+0x46>
 8017746:	4628      	mov	r0, r5
 8017748:	e7f0      	b.n	801772c <__sccl+0x28>
 801774a:	460b      	mov	r3, r1
 801774c:	e7f1      	b.n	8017732 <__sccl+0x2e>
 801774e:	786e      	ldrb	r6, [r5, #1]
 8017750:	2e5d      	cmp	r6, #93	; 0x5d
 8017752:	d0fa      	beq.n	801774a <__sccl+0x46>
 8017754:	42b3      	cmp	r3, r6
 8017756:	dcf8      	bgt.n	801774a <__sccl+0x46>
 8017758:	3502      	adds	r5, #2
 801775a:	4619      	mov	r1, r3
 801775c:	3101      	adds	r1, #1
 801775e:	428e      	cmp	r6, r1
 8017760:	5462      	strb	r2, [r4, r1]
 8017762:	dcfb      	bgt.n	801775c <__sccl+0x58>
 8017764:	1af1      	subs	r1, r6, r3
 8017766:	3901      	subs	r1, #1
 8017768:	1c58      	adds	r0, r3, #1
 801776a:	42b3      	cmp	r3, r6
 801776c:	bfa8      	it	ge
 801776e:	2100      	movge	r1, #0
 8017770:	1843      	adds	r3, r0, r1
 8017772:	e7e0      	b.n	8017736 <__sccl+0x32>

08017774 <_raise_r>:
 8017774:	291f      	cmp	r1, #31
 8017776:	b538      	push	{r3, r4, r5, lr}
 8017778:	4604      	mov	r4, r0
 801777a:	460d      	mov	r5, r1
 801777c:	d904      	bls.n	8017788 <_raise_r+0x14>
 801777e:	2316      	movs	r3, #22
 8017780:	6003      	str	r3, [r0, #0]
 8017782:	f04f 30ff 	mov.w	r0, #4294967295
 8017786:	bd38      	pop	{r3, r4, r5, pc}
 8017788:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801778a:	b112      	cbz	r2, 8017792 <_raise_r+0x1e>
 801778c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017790:	b94b      	cbnz	r3, 80177a6 <_raise_r+0x32>
 8017792:	4620      	mov	r0, r4
 8017794:	f000 f830 	bl	80177f8 <_getpid_r>
 8017798:	462a      	mov	r2, r5
 801779a:	4601      	mov	r1, r0
 801779c:	4620      	mov	r0, r4
 801779e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80177a2:	f000 b817 	b.w	80177d4 <_kill_r>
 80177a6:	2b01      	cmp	r3, #1
 80177a8:	d00a      	beq.n	80177c0 <_raise_r+0x4c>
 80177aa:	1c59      	adds	r1, r3, #1
 80177ac:	d103      	bne.n	80177b6 <_raise_r+0x42>
 80177ae:	2316      	movs	r3, #22
 80177b0:	6003      	str	r3, [r0, #0]
 80177b2:	2001      	movs	r0, #1
 80177b4:	e7e7      	b.n	8017786 <_raise_r+0x12>
 80177b6:	2400      	movs	r4, #0
 80177b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80177bc:	4628      	mov	r0, r5
 80177be:	4798      	blx	r3
 80177c0:	2000      	movs	r0, #0
 80177c2:	e7e0      	b.n	8017786 <_raise_r+0x12>

080177c4 <raise>:
 80177c4:	4b02      	ldr	r3, [pc, #8]	; (80177d0 <raise+0xc>)
 80177c6:	4601      	mov	r1, r0
 80177c8:	6818      	ldr	r0, [r3, #0]
 80177ca:	f7ff bfd3 	b.w	8017774 <_raise_r>
 80177ce:	bf00      	nop
 80177d0:	20000020 	.word	0x20000020

080177d4 <_kill_r>:
 80177d4:	b538      	push	{r3, r4, r5, lr}
 80177d6:	4d07      	ldr	r5, [pc, #28]	; (80177f4 <_kill_r+0x20>)
 80177d8:	2300      	movs	r3, #0
 80177da:	4604      	mov	r4, r0
 80177dc:	4608      	mov	r0, r1
 80177de:	4611      	mov	r1, r2
 80177e0:	602b      	str	r3, [r5, #0]
 80177e2:	f7f3 fd41 	bl	800b268 <_kill>
 80177e6:	1c43      	adds	r3, r0, #1
 80177e8:	d102      	bne.n	80177f0 <_kill_r+0x1c>
 80177ea:	682b      	ldr	r3, [r5, #0]
 80177ec:	b103      	cbz	r3, 80177f0 <_kill_r+0x1c>
 80177ee:	6023      	str	r3, [r4, #0]
 80177f0:	bd38      	pop	{r3, r4, r5, pc}
 80177f2:	bf00      	nop
 80177f4:	2000a7bc 	.word	0x2000a7bc

080177f8 <_getpid_r>:
 80177f8:	f7f3 bd2e 	b.w	800b258 <_getpid>

080177fc <_strtol_l.constprop.0>:
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017802:	d001      	beq.n	8017808 <_strtol_l.constprop.0+0xc>
 8017804:	2b24      	cmp	r3, #36	; 0x24
 8017806:	d906      	bls.n	8017816 <_strtol_l.constprop.0+0x1a>
 8017808:	f7fb fdd8 	bl	80133bc <__errno>
 801780c:	2316      	movs	r3, #22
 801780e:	6003      	str	r3, [r0, #0]
 8017810:	2000      	movs	r0, #0
 8017812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017816:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80178fc <_strtol_l.constprop.0+0x100>
 801781a:	460d      	mov	r5, r1
 801781c:	462e      	mov	r6, r5
 801781e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017822:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017826:	f017 0708 	ands.w	r7, r7, #8
 801782a:	d1f7      	bne.n	801781c <_strtol_l.constprop.0+0x20>
 801782c:	2c2d      	cmp	r4, #45	; 0x2d
 801782e:	d132      	bne.n	8017896 <_strtol_l.constprop.0+0x9a>
 8017830:	782c      	ldrb	r4, [r5, #0]
 8017832:	2701      	movs	r7, #1
 8017834:	1cb5      	adds	r5, r6, #2
 8017836:	2b00      	cmp	r3, #0
 8017838:	d05b      	beq.n	80178f2 <_strtol_l.constprop.0+0xf6>
 801783a:	2b10      	cmp	r3, #16
 801783c:	d109      	bne.n	8017852 <_strtol_l.constprop.0+0x56>
 801783e:	2c30      	cmp	r4, #48	; 0x30
 8017840:	d107      	bne.n	8017852 <_strtol_l.constprop.0+0x56>
 8017842:	782c      	ldrb	r4, [r5, #0]
 8017844:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017848:	2c58      	cmp	r4, #88	; 0x58
 801784a:	d14d      	bne.n	80178e8 <_strtol_l.constprop.0+0xec>
 801784c:	786c      	ldrb	r4, [r5, #1]
 801784e:	2310      	movs	r3, #16
 8017850:	3502      	adds	r5, #2
 8017852:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017856:	f108 38ff 	add.w	r8, r8, #4294967295
 801785a:	f04f 0c00 	mov.w	ip, #0
 801785e:	fbb8 f9f3 	udiv	r9, r8, r3
 8017862:	4666      	mov	r6, ip
 8017864:	fb03 8a19 	mls	sl, r3, r9, r8
 8017868:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801786c:	f1be 0f09 	cmp.w	lr, #9
 8017870:	d816      	bhi.n	80178a0 <_strtol_l.constprop.0+0xa4>
 8017872:	4674      	mov	r4, lr
 8017874:	42a3      	cmp	r3, r4
 8017876:	dd24      	ble.n	80178c2 <_strtol_l.constprop.0+0xc6>
 8017878:	f1bc 0f00 	cmp.w	ip, #0
 801787c:	db1e      	blt.n	80178bc <_strtol_l.constprop.0+0xc0>
 801787e:	45b1      	cmp	r9, r6
 8017880:	d31c      	bcc.n	80178bc <_strtol_l.constprop.0+0xc0>
 8017882:	d101      	bne.n	8017888 <_strtol_l.constprop.0+0x8c>
 8017884:	45a2      	cmp	sl, r4
 8017886:	db19      	blt.n	80178bc <_strtol_l.constprop.0+0xc0>
 8017888:	fb06 4603 	mla	r6, r6, r3, r4
 801788c:	f04f 0c01 	mov.w	ip, #1
 8017890:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017894:	e7e8      	b.n	8017868 <_strtol_l.constprop.0+0x6c>
 8017896:	2c2b      	cmp	r4, #43	; 0x2b
 8017898:	bf04      	itt	eq
 801789a:	782c      	ldrbeq	r4, [r5, #0]
 801789c:	1cb5      	addeq	r5, r6, #2
 801789e:	e7ca      	b.n	8017836 <_strtol_l.constprop.0+0x3a>
 80178a0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80178a4:	f1be 0f19 	cmp.w	lr, #25
 80178a8:	d801      	bhi.n	80178ae <_strtol_l.constprop.0+0xb2>
 80178aa:	3c37      	subs	r4, #55	; 0x37
 80178ac:	e7e2      	b.n	8017874 <_strtol_l.constprop.0+0x78>
 80178ae:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80178b2:	f1be 0f19 	cmp.w	lr, #25
 80178b6:	d804      	bhi.n	80178c2 <_strtol_l.constprop.0+0xc6>
 80178b8:	3c57      	subs	r4, #87	; 0x57
 80178ba:	e7db      	b.n	8017874 <_strtol_l.constprop.0+0x78>
 80178bc:	f04f 3cff 	mov.w	ip, #4294967295
 80178c0:	e7e6      	b.n	8017890 <_strtol_l.constprop.0+0x94>
 80178c2:	f1bc 0f00 	cmp.w	ip, #0
 80178c6:	da05      	bge.n	80178d4 <_strtol_l.constprop.0+0xd8>
 80178c8:	2322      	movs	r3, #34	; 0x22
 80178ca:	6003      	str	r3, [r0, #0]
 80178cc:	4646      	mov	r6, r8
 80178ce:	b942      	cbnz	r2, 80178e2 <_strtol_l.constprop.0+0xe6>
 80178d0:	4630      	mov	r0, r6
 80178d2:	e79e      	b.n	8017812 <_strtol_l.constprop.0+0x16>
 80178d4:	b107      	cbz	r7, 80178d8 <_strtol_l.constprop.0+0xdc>
 80178d6:	4276      	negs	r6, r6
 80178d8:	2a00      	cmp	r2, #0
 80178da:	d0f9      	beq.n	80178d0 <_strtol_l.constprop.0+0xd4>
 80178dc:	f1bc 0f00 	cmp.w	ip, #0
 80178e0:	d000      	beq.n	80178e4 <_strtol_l.constprop.0+0xe8>
 80178e2:	1e69      	subs	r1, r5, #1
 80178e4:	6011      	str	r1, [r2, #0]
 80178e6:	e7f3      	b.n	80178d0 <_strtol_l.constprop.0+0xd4>
 80178e8:	2430      	movs	r4, #48	; 0x30
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d1b1      	bne.n	8017852 <_strtol_l.constprop.0+0x56>
 80178ee:	2308      	movs	r3, #8
 80178f0:	e7af      	b.n	8017852 <_strtol_l.constprop.0+0x56>
 80178f2:	2c30      	cmp	r4, #48	; 0x30
 80178f4:	d0a5      	beq.n	8017842 <_strtol_l.constprop.0+0x46>
 80178f6:	230a      	movs	r3, #10
 80178f8:	e7ab      	b.n	8017852 <_strtol_l.constprop.0+0x56>
 80178fa:	bf00      	nop
 80178fc:	08019546 	.word	0x08019546

08017900 <_strtol_r>:
 8017900:	f7ff bf7c 	b.w	80177fc <_strtol_l.constprop.0>

08017904 <__submore>:
 8017904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017908:	460c      	mov	r4, r1
 801790a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801790c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017910:	4299      	cmp	r1, r3
 8017912:	d11d      	bne.n	8017950 <__submore+0x4c>
 8017914:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017918:	f7fc f990 	bl	8013c3c <_malloc_r>
 801791c:	b918      	cbnz	r0, 8017926 <__submore+0x22>
 801791e:	f04f 30ff 	mov.w	r0, #4294967295
 8017922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017926:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801792a:	63a3      	str	r3, [r4, #56]	; 0x38
 801792c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017930:	6360      	str	r0, [r4, #52]	; 0x34
 8017932:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8017936:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801793a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801793e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8017942:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8017946:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801794a:	6020      	str	r0, [r4, #0]
 801794c:	2000      	movs	r0, #0
 801794e:	e7e8      	b.n	8017922 <__submore+0x1e>
 8017950:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8017952:	0077      	lsls	r7, r6, #1
 8017954:	463a      	mov	r2, r7
 8017956:	f7ff fb6f 	bl	8017038 <_realloc_r>
 801795a:	4605      	mov	r5, r0
 801795c:	2800      	cmp	r0, #0
 801795e:	d0de      	beq.n	801791e <__submore+0x1a>
 8017960:	eb00 0806 	add.w	r8, r0, r6
 8017964:	4601      	mov	r1, r0
 8017966:	4632      	mov	r2, r6
 8017968:	4640      	mov	r0, r8
 801796a:	f7fb fe73 	bl	8013654 <memcpy>
 801796e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017972:	f8c4 8000 	str.w	r8, [r4]
 8017976:	e7e9      	b.n	801794c <__submore+0x48>

08017978 <__ascii_wctomb>:
 8017978:	b149      	cbz	r1, 801798e <__ascii_wctomb+0x16>
 801797a:	2aff      	cmp	r2, #255	; 0xff
 801797c:	bf85      	ittet	hi
 801797e:	238a      	movhi	r3, #138	; 0x8a
 8017980:	6003      	strhi	r3, [r0, #0]
 8017982:	700a      	strbls	r2, [r1, #0]
 8017984:	f04f 30ff 	movhi.w	r0, #4294967295
 8017988:	bf98      	it	ls
 801798a:	2001      	movls	r0, #1
 801798c:	4770      	bx	lr
 801798e:	4608      	mov	r0, r1
 8017990:	4770      	bx	lr
	...

08017994 <_fstat_r>:
 8017994:	b538      	push	{r3, r4, r5, lr}
 8017996:	4d07      	ldr	r5, [pc, #28]	; (80179b4 <_fstat_r+0x20>)
 8017998:	2300      	movs	r3, #0
 801799a:	4604      	mov	r4, r0
 801799c:	4608      	mov	r0, r1
 801799e:	4611      	mov	r1, r2
 80179a0:	602b      	str	r3, [r5, #0]
 80179a2:	f7f3 fcc0 	bl	800b326 <_fstat>
 80179a6:	1c43      	adds	r3, r0, #1
 80179a8:	d102      	bne.n	80179b0 <_fstat_r+0x1c>
 80179aa:	682b      	ldr	r3, [r5, #0]
 80179ac:	b103      	cbz	r3, 80179b0 <_fstat_r+0x1c>
 80179ae:	6023      	str	r3, [r4, #0]
 80179b0:	bd38      	pop	{r3, r4, r5, pc}
 80179b2:	bf00      	nop
 80179b4:	2000a7bc 	.word	0x2000a7bc

080179b8 <_isatty_r>:
 80179b8:	b538      	push	{r3, r4, r5, lr}
 80179ba:	4d06      	ldr	r5, [pc, #24]	; (80179d4 <_isatty_r+0x1c>)
 80179bc:	2300      	movs	r3, #0
 80179be:	4604      	mov	r4, r0
 80179c0:	4608      	mov	r0, r1
 80179c2:	602b      	str	r3, [r5, #0]
 80179c4:	f7f3 fcbf 	bl	800b346 <_isatty>
 80179c8:	1c43      	adds	r3, r0, #1
 80179ca:	d102      	bne.n	80179d2 <_isatty_r+0x1a>
 80179cc:	682b      	ldr	r3, [r5, #0]
 80179ce:	b103      	cbz	r3, 80179d2 <_isatty_r+0x1a>
 80179d0:	6023      	str	r3, [r4, #0]
 80179d2:	bd38      	pop	{r3, r4, r5, pc}
 80179d4:	2000a7bc 	.word	0x2000a7bc

080179d8 <_malloc_usable_size_r>:
 80179d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179dc:	1f18      	subs	r0, r3, #4
 80179de:	2b00      	cmp	r3, #0
 80179e0:	bfbc      	itt	lt
 80179e2:	580b      	ldrlt	r3, [r1, r0]
 80179e4:	18c0      	addlt	r0, r0, r3
 80179e6:	4770      	bx	lr

080179e8 <_init>:
 80179e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179ea:	bf00      	nop
 80179ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179ee:	bc08      	pop	{r3}
 80179f0:	469e      	mov	lr, r3
 80179f2:	4770      	bx	lr

080179f4 <_fini>:
 80179f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179f6:	bf00      	nop
 80179f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179fa:	bc08      	pop	{r3}
 80179fc:	469e      	mov	lr, r3
 80179fe:	4770      	bx	lr

08017a00 <__FLASH_Program_Fast_veneer>:
 8017a00:	f85f f000 	ldr.w	pc, [pc]	; 8017a04 <__FLASH_Program_Fast_veneer+0x4>
 8017a04:	20000255 	.word	0x20000255

Disassembly of section .data:

20000008 <uwAddressNextWrite>:
20000008:	00000020                                 ...

2000000c <debugLevel>:
2000000c:	00000007                                ....

20000010 <environ>:
20000010:	2000a6c0                                ... 

20000014 <SystemCoreClock>:
20000014:	003d0900                                ..=.

20000018 <uwTickPrio>:
20000018:	00000010                                ....

2000001c <uwTickFreq>:
2000001c:	00000001                                ....

20000020 <_impure_ptr>:
20000020:	20000024                                $.. 

20000024 <impure_data>:
20000024:	00000000 08019668 08019688 08019648     ....h.......H...
	...

20000084 <_tzname>:
20000084:	080192e8 080192e8 00000000              ............

20000090 <tzinfo>:
20000090:	00000001 00000000 0000004a 00000000     ........J.......
	...
200000c0:	0000004a 00000000 00000000 00000000     J...............
	...

200000e8 <__global_locale>:
200000e8:	00000043 00000000 00000000 00000000     C...............
	...
20000108:	00000043 00000000 00000000 00000000     C...............
	...
20000128:	00000043 00000000 00000000 00000000     C...............
	...
20000148:	00000043 00000000 00000000 00000000     C...............
	...
20000168:	00000043 00000000 00000000 00000000     C...............
	...
20000188:	00000043 00000000 00000000 00000000     C...............
	...
200001a8:	00000043 00000000 00000000 00000000     C...............
	...
200001c8:	08017979 08016fe1 00000000 08019545     yy...o......E...
200001d8:	080196b0 0801935c 0801935c 0801935c     ....\...\...\...
200001e8:	0801935c 0801935c 0801935c 0801935c     \...\...\...\...
200001f8:	0801935c 0801935c ffffffff ffffffff     \...\...........
20000208:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20000230:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20000254 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000254:	b480      	push	{r7}
20000256:	b089      	sub	sp, #36	; 0x24
20000258:	af00      	add	r7, sp, #0
2000025a:	6078      	str	r0, [r7, #4]
2000025c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
2000025e:	2380      	movs	r3, #128	; 0x80
20000260:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
20000262:	687b      	ldr	r3, [r7, #4]
20000264:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
20000266:	683b      	ldr	r3, [r7, #0]
20000268:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000026a:	4b18      	ldr	r3, [pc, #96]	; (200002cc <FLASH_Program_Fast+0x78>)
2000026c:	695b      	ldr	r3, [r3, #20]
2000026e:	4a17      	ldr	r2, [pc, #92]	; (200002cc <FLASH_Program_Fast+0x78>)
20000270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20000274:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000276:	f3ef 8310 	mrs	r3, PRIMASK
2000027a:	60fb      	str	r3, [r7, #12]
  return(result);
2000027c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000027e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
20000280:	b672      	cpsid	i
}
20000282:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
20000284:	697b      	ldr	r3, [r7, #20]
20000286:	681a      	ldr	r2, [r3, #0]
20000288:	69bb      	ldr	r3, [r7, #24]
2000028a:	601a      	str	r2, [r3, #0]
    dest_addr++;
2000028c:	69bb      	ldr	r3, [r7, #24]
2000028e:	3304      	adds	r3, #4
20000290:	61bb      	str	r3, [r7, #24]
    src_addr++;
20000292:	697b      	ldr	r3, [r7, #20]
20000294:	3304      	adds	r3, #4
20000296:	617b      	str	r3, [r7, #20]
    row_index--;
20000298:	7ffb      	ldrb	r3, [r7, #31]
2000029a:	3b01      	subs	r3, #1
2000029c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
2000029e:	7ffb      	ldrb	r3, [r7, #31]
200002a0:	2b00      	cmp	r3, #0
200002a2:	d1ef      	bne.n	20000284 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
200002a4:	bf00      	nop
200002a6:	4b09      	ldr	r3, [pc, #36]	; (200002cc <FLASH_Program_Fast+0x78>)
200002a8:	691b      	ldr	r3, [r3, #16]
200002aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
200002ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
200002b2:	d0f8      	beq.n	200002a6 <FLASH_Program_Fast+0x52>
200002b4:	693b      	ldr	r3, [r7, #16]
200002b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200002b8:	68bb      	ldr	r3, [r7, #8]
200002ba:	f383 8810 	msr	PRIMASK, r3
}
200002be:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
200002c0:	bf00      	nop
200002c2:	3724      	adds	r7, #36	; 0x24
200002c4:	46bd      	mov	sp, r7
200002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200002ca:	4770      	bx	lr
200002cc:	58004000 	.word	0x58004000
