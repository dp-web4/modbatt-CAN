/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.h
  * @brief          : Header for main.c file.
  *                   This file contains the common defines of the application.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __MAIN_H
#define __MAIN_H

#ifdef __cplusplus
extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "stm32wbxx_hal.h"
#include "bms.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Exported types ------------------------------------------------------------*/
/* USER CODE BEGIN ET */

/* USER CODE END ET */

/* Exported constants --------------------------------------------------------*/
/* USER CODE BEGIN EC */

/* USER CODE END EC */

/* Exported macro ------------------------------------------------------------*/
/* USER CODE BEGIN EM */

/* USER CODE END EM */

/* Exported functions prototypes ---------------------------------------------*/
void Error_Handler(void);

/* USER CODE BEGIN EFP */

/* USER CODE END EFP */

/* Private defines -----------------------------------------------------------*/
#define CAN1_INT0_Pin GPIO_PIN_8
#define CAN1_INT0_GPIO_Port GPIOB
#define CAN1_INT0_EXTI_IRQn EXTI9_5_IRQn
#define CAN1_INT1_Pin GPIO_PIN_9
#define CAN1_INT1_GPIO_Port GPIOB
#define CAN1_INT1_EXTI_IRQn EXTI9_5_IRQn
#define SPI2_CS1_Pin GPIO_PIN_0
#define SPI2_CS1_GPIO_Port GPIOC
#define SPI2_CS2_Pin GPIO_PIN_3
#define SPI2_CS2_GPIO_Port GPIOC
#define CAN1_CS_Pin GPIO_PIN_5
#define CAN1_CS_GPIO_Port GPIOA
#define BUTTON1_Pin GPIO_PIN_4
#define BUTTON1_GPIO_Port GPIOC
#define BUTTON1_EXTI_IRQn EXTI4_IRQn
#define CAN2_CS_Pin GPIO_PIN_5
#define CAN2_CS_GPIO_Port GPIOC
#define LED_GREEN_Pin GPIO_PIN_0
#define LED_GREEN_GPIO_Port GPIOB
#define LED_RED_Pin GPIO_PIN_1
#define LED_RED_GPIO_Port GPIOB
#define CAN2_INT_Pin GPIO_PIN_12
#define CAN2_INT_GPIO_Port GPIOB
#define CAN2_INT_EXTI_IRQn EXTI15_10_IRQn
#define CAN2_INT0_Pin GPIO_PIN_13
#define CAN2_INT0_GPIO_Port GPIOB
#define CAN2_INT0_EXTI_IRQn EXTI15_10_IRQn
#define CAN2_INT1_Pin GPIO_PIN_14
#define CAN2_INT1_GPIO_Port GPIOB
#define CAN2_INT1_EXTI_IRQn EXTI15_10_IRQn
#define CAN1_INT_Pin GPIO_PIN_10
#define CAN1_INT_GPIO_Port GPIOA
#define CAN1_INT_EXTI_IRQn EXTI15_10_IRQn
#define BUTTON2_Pin GPIO_PIN_0
#define BUTTON2_GPIO_Port GPIOD
#define BUTTON2_EXTI_IRQn EXTI0_IRQn
#define BUTTON3_Pin GPIO_PIN_1
#define BUTTON3_GPIO_Port GPIOD
#define BUTTON3_EXTI_IRQn EXTI1_IRQn
#define LED_BLUE_Pin GPIO_PIN_5
#define LED_BLUE_GPIO_Port GPIOB

/* USER CODE BEGIN Private defines */
//Timeout used for SPI functions

#define MAX_BUFFER      100
#define UART_TIMEOUT    1000

#define SPI_TIMEOUT			100

#define CAN1            0
#define CAN2            1
#define VCU_CAN         CAN1
#define MCU_CAN         CAN2

// Debug Levels
#define DEBUG_LEVEL     0x0B
#define DBG_DISABLED    0x00
#define DBG_ERRORS      0x01
#define DBG_MCU         0x02
#define DBG_VCU         0x04
#define DBG_VERBOSE     0x08

extern uint8_t debugLevel;


//LED's
#define RED_LED         0
#define GREEN_LED       1
#define BLUE_LED        2
#define MCU_RX_LED      GREEN_LED
#define VCU_RX_LED      RED_LED



// Code anchor for break points
#define Nop() asm("nop")


extern uint16_t  packOffset;
extern void switchLedOn(uint8_t led);
extern void switchLedOff(uint8_t led);
extern char tempBuffer[MAX_BUFFER];
extern uint8_t can2RxInterrupt;
extern uint8_t can2TxInterrupt;
extern uint8_t can1RxInterrupt;
extern uint8_t can1TxInterrupt;
extern void serialOut(char* message);
extern uint8_t deRegisterAll;
extern uint32_t etTimerOverflows;
extern TIM_HandleTypeDef htim1;
extern uint8_t decSec;
extern uint8_t sendState;


/* USER CODE END Private defines */

#ifdef __cplusplus
}
#endif

#endif /* __MAIN_H */
