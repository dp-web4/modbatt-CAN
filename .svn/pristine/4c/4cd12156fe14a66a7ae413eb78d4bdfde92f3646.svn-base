
Pack Emulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b54  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08007ce4  08007ce4  00017ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c4  080082c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082cc  080082cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082cc  080082cc  000182cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080082d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0000c7cc  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000c83c  2000c83c  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001457a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002287  00000000  00000000  0003461a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f18  00000000  00000000  000368a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e40  00000000  00000000  000377c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002283c  00000000  00000000  00038600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000100d2  00000000  00000000  0005ae3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d036a  00000000  00000000  0006af0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013b278  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a68  00000000  00000000  0013b2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ccc 	.word	0x08007ccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007ccc 	.word	0x08007ccc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <APP_LED_Clear>:
*                   Section: Application Local Functions                               P A C K   E M U L A T O R
*
***************************************************************************************************************/

void APP_LED_Clear(uint8_t led)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	2b02      	cmp	r3, #2
 8000592:	d014      	beq.n	80005be <APP_LED_Clear+0x3a>
 8000594:	2b02      	cmp	r3, #2
 8000596:	dc19      	bgt.n	80005cc <APP_LED_Clear+0x48>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d002      	beq.n	80005a2 <APP_LED_Clear+0x1e>
 800059c:	2b01      	cmp	r3, #1
 800059e:	d007      	beq.n	80005b0 <APP_LED_Clear+0x2c>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_RESET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_RESET);
            break;
        default: break;
 80005a0:	e014      	b.n	80005cc <APP_LED_Clear+0x48>
        	HAL_GPIO_WritePin(LED5_RED_GPIO_Port,  LED5_RED_Pin , GPIO_PIN_RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <APP_LED_Clear+0x54>)
 80005aa:	f004 fb23 	bl	8004bf4 <HAL_GPIO_WritePin>
            break;
 80005ae:	e00e      	b.n	80005ce <APP_LED_Clear+0x4a>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <APP_LED_Clear+0x54>)
 80005b8:	f004 fb1c 	bl	8004bf4 <HAL_GPIO_WritePin>
            break;
 80005bc:	e007      	b.n	80005ce <APP_LED_Clear+0x4a>
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <APP_LED_Clear+0x54>)
 80005c6:	f004 fb15 	bl	8004bf4 <HAL_GPIO_WritePin>
            break;
 80005ca:	e000      	b.n	80005ce <APP_LED_Clear+0x4a>
        default: break;
 80005cc:	bf00      	nop
    }
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020c00 	.word	0x40020c00

080005dc <APP_LED_Set>:

void APP_LED_Set(uint8_t led)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	d014      	beq.n	8000616 <APP_LED_Set+0x3a>
 80005ec:	2b02      	cmp	r3, #2
 80005ee:	dc19      	bgt.n	8000624 <APP_LED_Set+0x48>
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d002      	beq.n	80005fa <APP_LED_Set+0x1e>
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d007      	beq.n	8000608 <APP_LED_Set+0x2c>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_SET);
            break;
        case 2: //LED_On(LED2);
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_SET);
            break;
        default: break;
 80005f8:	e014      	b.n	8000624 <APP_LED_Set+0x48>
        	HAL_GPIO_WritePin(LED5_RED_GPIO_Port,  LED5_RED_Pin , GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <APP_LED_Set+0x54>)
 8000602:	f004 faf7 	bl	8004bf4 <HAL_GPIO_WritePin>
            break;
 8000606:	e00e      	b.n	8000626 <APP_LED_Set+0x4a>
        	HAL_GPIO_WritePin(LED4_GREEN_GPIO_Port,  LED4_GREEN_Pin , GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <APP_LED_Set+0x54>)
 8000610:	f004 faf0 	bl	8004bf4 <HAL_GPIO_WritePin>
            break;
 8000614:	e007      	b.n	8000626 <APP_LED_Set+0x4a>
            HAL_GPIO_WritePin(LED6_BLUE_GPIO_Port,  LED6_BLUE_Pin , GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800061c:	4804      	ldr	r0, [pc, #16]	; (8000630 <APP_LED_Set+0x54>)
 800061e:	f004 fae9 	bl	8004bf4 <HAL_GPIO_WritePin>
            break;
 8000622:	e000      	b.n	8000626 <APP_LED_Set+0x4a>
        default: break;
 8000624:	bf00      	nop
    }
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020c00 	.word	0x40020c00

08000634 <APP_Initialize>:

/***************************************************************************************************************
*     A P P _ I n i t i a l i z e                                                      P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_Initialize(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0


  //clear the batteryModule Array
  memset(module,0,sizeof(module));
 8000638:	f24c 4280 	movw	r2, #50304	; 0xc480
 800063c:	2100      	movs	r1, #0
 800063e:	489e      	ldr	r0, [pc, #632]	; (80008b8 <APP_Initialize+0x284>)
 8000640:	f006 f936 	bl	80068b0 <memset>

  //set up a couple of modules
  //module[0]
  module[0].mfgId           = 0xDC;
 8000644:	4b9c      	ldr	r3, [pc, #624]	; (80008b8 <APP_Initialize+0x284>)
 8000646:	22dc      	movs	r2, #220	; 0xdc
 8000648:	701a      	strb	r2, [r3, #0]
  module[0].partId          = 0x01;
 800064a:	4b9b      	ldr	r3, [pc, #620]	; (80008b8 <APP_Initialize+0x284>)
 800064c:	2201      	movs	r2, #1
 800064e:	705a      	strb	r2, [r3, #1]
  module[0].uniqueId        = 0xBA770001;
 8000650:	4b99      	ldr	r3, [pc, #612]	; (80008b8 <APP_Initialize+0x284>)
 8000652:	4a9a      	ldr	r2, [pc, #616]	; (80008bc <APP_Initialize+0x288>)
 8000654:	605a      	str	r2, [r3, #4]
  module[0].mmv             = 400;// 10 bit MMV = 0 to 1023
 8000656:	4b98      	ldr	r3, [pc, #608]	; (80008b8 <APP_Initialize+0x284>)
 8000658:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800065c:	819a      	strh	r2, [r3, #12]
  module[0].mmc             = 300;// 10 bit MMV = 0 to 1023
 800065e:	4b96      	ldr	r3, [pc, #600]	; (80008b8 <APP_Initialize+0x284>)
 8000660:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000664:	81da      	strh	r2, [r3, #14]
  module[0].state           = isolated;
 8000666:	4b94      	ldr	r3, [pc, #592]	; (80008b8 <APP_Initialize+0x284>)
 8000668:	2200      	movs	r2, #0
 800066a:	771a      	strb	r2, [r3, #28]
  module[0].fwVersion       = 1;
 800066c:	4b92      	ldr	r3, [pc, #584]	; (80008b8 <APP_Initialize+0x284>)
 800066e:	2201      	movs	r2, #1
 8000670:	729a      	strb	r2, [r3, #10]
  module[0].hwVersion       = 100;
 8000672:	4b91      	ldr	r3, [pc, #580]	; (80008b8 <APP_Initialize+0x284>)
 8000674:	2264      	movs	r2, #100	; 0x64
 8000676:	725a      	strb	r2, [r3, #9]
  module[0].voltHi          = 3;
 8000678:	4b8f      	ldr	r3, [pc, #572]	; (80008b8 <APP_Initialize+0x284>)
 800067a:	2203      	movs	r2, #3
 800067c:	82da      	strh	r2, [r3, #22]
  module[0].voltLo          = 2;
 800067e:	4b8e      	ldr	r3, [pc, #568]	; (80008b8 <APP_Initialize+0x284>)
 8000680:	2202      	movs	r2, #2
 8000682:	831a      	strh	r2, [r3, #24]
  module[0].voltAvg         = 2;
 8000684:	4b8c      	ldr	r3, [pc, #560]	; (80008b8 <APP_Initialize+0x284>)
 8000686:	2202      	movs	r2, #2
 8000688:	835a      	strh	r2, [r3, #26]
  module[0].tempHi          = 50;
 800068a:	4b8b      	ldr	r3, [pc, #556]	; (80008b8 <APP_Initialize+0x284>)
 800068c:	2232      	movs	r2, #50	; 0x32
 800068e:	821a      	strh	r2, [r3, #16]
  module[0].tempLo          = 48;
 8000690:	4b89      	ldr	r3, [pc, #548]	; (80008b8 <APP_Initialize+0x284>)
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	825a      	strh	r2, [r3, #18]
  module[0].tempAvg         = 49;
 8000696:	4b88      	ldr	r3, [pc, #544]	; (80008b8 <APP_Initialize+0x284>)
 8000698:	2231      	movs	r2, #49	; 0x31
 800069a:	829a      	strh	r2, [r3, #20]
  module[0].soc             = 90;
 800069c:	4b86      	ldr	r3, [pc, #536]	; (80008b8 <APP_Initialize+0x284>)
 800069e:	225a      	movs	r2, #90	; 0x5a
 80006a0:	779a      	strb	r2, [r3, #30]
  module[0].cellCount       = 5;
 80006a2:	4b85      	ldr	r3, [pc, #532]	; (80008b8 <APP_Initialize+0x284>)
 80006a4:	2205      	movs	r2, #5
 80006a6:	f883 2020 	strb.w	r2, [r3, #32]
  module[0].cell[0].voltage = 1;
 80006aa:	4b83      	ldr	r3, [pc, #524]	; (80008b8 <APP_Initialize+0x284>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	845a      	strh	r2, [r3, #34]	; 0x22
  module[0].cell[0].temp    = 48;
 80006b0:	4b81      	ldr	r3, [pc, #516]	; (80008b8 <APP_Initialize+0x284>)
 80006b2:	2230      	movs	r2, #48	; 0x30
 80006b4:	849a      	strh	r2, [r3, #36]	; 0x24
  module[0].cell[0].soc     = 90;
 80006b6:	4b80      	ldr	r3, [pc, #512]	; (80008b8 <APP_Initialize+0x284>)
 80006b8:	225a      	movs	r2, #90	; 0x5a
 80006ba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  module[0].cell[0].soh     = 100;
 80006be:	4b7e      	ldr	r3, [pc, #504]	; (80008b8 <APP_Initialize+0x284>)
 80006c0:	2264      	movs	r2, #100	; 0x64
 80006c2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  module[0].cell[1].voltage = 1;
 80006c6:	4b7c      	ldr	r3, [pc, #496]	; (80008b8 <APP_Initialize+0x284>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	851a      	strh	r2, [r3, #40]	; 0x28
  module[0].cell[1].temp    = 48;
 80006cc:	4b7a      	ldr	r3, [pc, #488]	; (80008b8 <APP_Initialize+0x284>)
 80006ce:	2230      	movs	r2, #48	; 0x30
 80006d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  module[0].cell[1].soc     = 90;
 80006d2:	4b79      	ldr	r3, [pc, #484]	; (80008b8 <APP_Initialize+0x284>)
 80006d4:	225a      	movs	r2, #90	; 0x5a
 80006d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  module[0].cell[1].soh     = 90;
 80006da:	4b77      	ldr	r3, [pc, #476]	; (80008b8 <APP_Initialize+0x284>)
 80006dc:	225a      	movs	r2, #90	; 0x5a
 80006de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  module[0].cell[2].voltage = 1;
 80006e2:	4b75      	ldr	r3, [pc, #468]	; (80008b8 <APP_Initialize+0x284>)
 80006e4:	2201      	movs	r2, #1
 80006e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  module[0].cell[2].temp    = 48;
 80006e8:	4b73      	ldr	r3, [pc, #460]	; (80008b8 <APP_Initialize+0x284>)
 80006ea:	2230      	movs	r2, #48	; 0x30
 80006ec:	861a      	strh	r2, [r3, #48]	; 0x30
  module[0].cell[2].soc     = 90;
 80006ee:	4b72      	ldr	r3, [pc, #456]	; (80008b8 <APP_Initialize+0x284>)
 80006f0:	225a      	movs	r2, #90	; 0x5a
 80006f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  module[0].cell[2].soh     = 100;
 80006f6:	4b70      	ldr	r3, [pc, #448]	; (80008b8 <APP_Initialize+0x284>)
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  module[0].cell[3].voltage = 1;
 80006fe:	4b6e      	ldr	r3, [pc, #440]	; (80008b8 <APP_Initialize+0x284>)
 8000700:	2201      	movs	r2, #1
 8000702:	869a      	strh	r2, [r3, #52]	; 0x34
  module[0].cell[3].temp    = 49;
 8000704:	4b6c      	ldr	r3, [pc, #432]	; (80008b8 <APP_Initialize+0x284>)
 8000706:	2231      	movs	r2, #49	; 0x31
 8000708:	86da      	strh	r2, [r3, #54]	; 0x36
  module[0].cell[3].soc     = 90;
 800070a:	4b6b      	ldr	r3, [pc, #428]	; (80008b8 <APP_Initialize+0x284>)
 800070c:	225a      	movs	r2, #90	; 0x5a
 800070e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  module[0].cell[3].soh     = 99;
 8000712:	4b69      	ldr	r3, [pc, #420]	; (80008b8 <APP_Initialize+0x284>)
 8000714:	2263      	movs	r2, #99	; 0x63
 8000716:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  module[0].cell[4].voltage = 1;
 800071a:	4b67      	ldr	r3, [pc, #412]	; (80008b8 <APP_Initialize+0x284>)
 800071c:	2201      	movs	r2, #1
 800071e:	875a      	strh	r2, [r3, #58]	; 0x3a
  module[0].cell[4].temp    = 50;
 8000720:	4b65      	ldr	r3, [pc, #404]	; (80008b8 <APP_Initialize+0x284>)
 8000722:	2232      	movs	r2, #50	; 0x32
 8000724:	879a      	strh	r2, [r3, #60]	; 0x3c
  module[0].cell[4].soc     = 91;
 8000726:	4b64      	ldr	r3, [pc, #400]	; (80008b8 <APP_Initialize+0x284>)
 8000728:	225b      	movs	r2, #91	; 0x5b
 800072a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  module[0].cell[4].soh     = 100;
 800072e:	4b62      	ldr	r3, [pc, #392]	; (80008b8 <APP_Initialize+0x284>)
 8000730:	2264      	movs	r2, #100	; 0x64
 8000732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  moduleCount++;
 8000736:	4b62      	ldr	r3, [pc, #392]	; (80008c0 <APP_Initialize+0x28c>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	b2da      	uxtb	r2, r3
 800073e:	4b60      	ldr	r3, [pc, #384]	; (80008c0 <APP_Initialize+0x28c>)
 8000740:	701a      	strb	r2, [r3, #0]

  //module[1]
  module[1].mfgId           = 0xDC;
 8000742:	4b5d      	ldr	r3, [pc, #372]	; (80008b8 <APP_Initialize+0x284>)
 8000744:	22dc      	movs	r2, #220	; 0xdc
 8000746:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
  module[1].partId          = 0x01;
 800074a:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <APP_Initialize+0x284>)
 800074c:	2201      	movs	r2, #1
 800074e:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
  module[1].uniqueId        = 0xBA770002;
 8000752:	4b59      	ldr	r3, [pc, #356]	; (80008b8 <APP_Initialize+0x284>)
 8000754:	4a5b      	ldr	r2, [pc, #364]	; (80008c4 <APP_Initialize+0x290>)
 8000756:	f8c3 2628 	str.w	r2, [r3, #1576]	; 0x628
  module[1].mmv             = 401;// 10 bit MMV = 0 to 1023
 800075a:	4b57      	ldr	r3, [pc, #348]	; (80008b8 <APP_Initialize+0x284>)
 800075c:	f240 1291 	movw	r2, #401	; 0x191
 8000760:	f8a3 2630 	strh.w	r2, [r3, #1584]	; 0x630
  module[1].mmc             = 200;// 10 bit MMV = 0 to 1023
 8000764:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <APP_Initialize+0x284>)
 8000766:	22c8      	movs	r2, #200	; 0xc8
 8000768:	f8a3 2632 	strh.w	r2, [r3, #1586]	; 0x632
  module[1].state           = isolated;
 800076c:	4b52      	ldr	r3, [pc, #328]	; (80008b8 <APP_Initialize+0x284>)
 800076e:	2200      	movs	r2, #0
 8000770:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
  module[1].fwVersion       = 1;
 8000774:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <APP_Initialize+0x284>)
 8000776:	2201      	movs	r2, #1
 8000778:	f883 262e 	strb.w	r2, [r3, #1582]	; 0x62e
  module[1].hwVersion       = 100;
 800077c:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <APP_Initialize+0x284>)
 800077e:	2264      	movs	r2, #100	; 0x64
 8000780:	f883 262d 	strb.w	r2, [r3, #1581]	; 0x62d
  module[1].voltHi          = 3;
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <APP_Initialize+0x284>)
 8000786:	2203      	movs	r2, #3
 8000788:	f8a3 263a 	strh.w	r2, [r3, #1594]	; 0x63a
  module[1].voltLo          = 2;
 800078c:	4b4a      	ldr	r3, [pc, #296]	; (80008b8 <APP_Initialize+0x284>)
 800078e:	2202      	movs	r2, #2
 8000790:	f8a3 263c 	strh.w	r2, [r3, #1596]	; 0x63c
  module[1].voltAvg         = 2;
 8000794:	4b48      	ldr	r3, [pc, #288]	; (80008b8 <APP_Initialize+0x284>)
 8000796:	2202      	movs	r2, #2
 8000798:	f8a3 263e 	strh.w	r2, [r3, #1598]	; 0x63e
  module[1].tempHi          = 50;
 800079c:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <APP_Initialize+0x284>)
 800079e:	2232      	movs	r2, #50	; 0x32
 80007a0:	f8a3 2634 	strh.w	r2, [r3, #1588]	; 0x634
  module[1].tempLo          = 48;
 80007a4:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <APP_Initialize+0x284>)
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	f8a3 2636 	strh.w	r2, [r3, #1590]	; 0x636
  module[1].tempAvg         = 49;
 80007ac:	4b42      	ldr	r3, [pc, #264]	; (80008b8 <APP_Initialize+0x284>)
 80007ae:	2231      	movs	r2, #49	; 0x31
 80007b0:	f8a3 2638 	strh.w	r2, [r3, #1592]	; 0x638
  module[1].soc             = 90;
 80007b4:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <APP_Initialize+0x284>)
 80007b6:	225a      	movs	r2, #90	; 0x5a
 80007b8:	f883 2642 	strb.w	r2, [r3, #1602]	; 0x642
  module[1].cellCount       = 5;
 80007bc:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <APP_Initialize+0x284>)
 80007be:	2205      	movs	r2, #5
 80007c0:	f883 2644 	strb.w	r2, [r3, #1604]	; 0x644
  module[1].cell[0].voltage = 1;
 80007c4:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <APP_Initialize+0x284>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	f8a3 2646 	strh.w	r2, [r3, #1606]	; 0x646
  module[1].cell[0].temp    = 48;
 80007cc:	4b3a      	ldr	r3, [pc, #232]	; (80008b8 <APP_Initialize+0x284>)
 80007ce:	2230      	movs	r2, #48	; 0x30
 80007d0:	f8a3 2648 	strh.w	r2, [r3, #1608]	; 0x648
  module[1].cell[0].soc     = 90;
 80007d4:	4b38      	ldr	r3, [pc, #224]	; (80008b8 <APP_Initialize+0x284>)
 80007d6:	225a      	movs	r2, #90	; 0x5a
 80007d8:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a
  module[1].cell[0].soh     = 96;
 80007dc:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <APP_Initialize+0x284>)
 80007de:	2260      	movs	r2, #96	; 0x60
 80007e0:	f883 264b 	strb.w	r2, [r3, #1611]	; 0x64b
  module[1].cell[1].voltage = 1;
 80007e4:	4b34      	ldr	r3, [pc, #208]	; (80008b8 <APP_Initialize+0x284>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	f8a3 264c 	strh.w	r2, [r3, #1612]	; 0x64c
  module[1].cell[1].temp    = 48;
 80007ec:	4b32      	ldr	r3, [pc, #200]	; (80008b8 <APP_Initialize+0x284>)
 80007ee:	2230      	movs	r2, #48	; 0x30
 80007f0:	f8a3 264e 	strh.w	r2, [r3, #1614]	; 0x64e
  module[1].cell[1].soc     = 90;
 80007f4:	4b30      	ldr	r3, [pc, #192]	; (80008b8 <APP_Initialize+0x284>)
 80007f6:	225a      	movs	r2, #90	; 0x5a
 80007f8:	f883 2650 	strb.w	r2, [r3, #1616]	; 0x650
  module[1].cell[1].soh     = 97;
 80007fc:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <APP_Initialize+0x284>)
 80007fe:	2261      	movs	r2, #97	; 0x61
 8000800:	f883 2651 	strb.w	r2, [r3, #1617]	; 0x651
  module[1].cell[2].voltage = 1;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <APP_Initialize+0x284>)
 8000806:	2201      	movs	r2, #1
 8000808:	f8a3 2652 	strh.w	r2, [r3, #1618]	; 0x652
  module[1].cell[2].temp    = 48;
 800080c:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <APP_Initialize+0x284>)
 800080e:	2230      	movs	r2, #48	; 0x30
 8000810:	f8a3 2654 	strh.w	r2, [r3, #1620]	; 0x654
  module[1].cell[2].soc     = 90;
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <APP_Initialize+0x284>)
 8000816:	225a      	movs	r2, #90	; 0x5a
 8000818:	f883 2656 	strb.w	r2, [r3, #1622]	; 0x656
  module[1].cell[2].soh     = 98;
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <APP_Initialize+0x284>)
 800081e:	2262      	movs	r2, #98	; 0x62
 8000820:	f883 2657 	strb.w	r2, [r3, #1623]	; 0x657
  module[1].cell[3].voltage = 1;
 8000824:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <APP_Initialize+0x284>)
 8000826:	2201      	movs	r2, #1
 8000828:	f8a3 2658 	strh.w	r2, [r3, #1624]	; 0x658
  module[1].cell[3].temp    = 49;
 800082c:	4b22      	ldr	r3, [pc, #136]	; (80008b8 <APP_Initialize+0x284>)
 800082e:	2231      	movs	r2, #49	; 0x31
 8000830:	f8a3 265a 	strh.w	r2, [r3, #1626]	; 0x65a
  module[1].cell[3].soc     = 90;
 8000834:	4b20      	ldr	r3, [pc, #128]	; (80008b8 <APP_Initialize+0x284>)
 8000836:	225a      	movs	r2, #90	; 0x5a
 8000838:	f883 265c 	strb.w	r2, [r3, #1628]	; 0x65c
  module[1].cell[3].soh     = 99;
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <APP_Initialize+0x284>)
 800083e:	2263      	movs	r2, #99	; 0x63
 8000840:	f883 265d 	strb.w	r2, [r3, #1629]	; 0x65d
  module[1].cell[4].voltage = 1;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <APP_Initialize+0x284>)
 8000846:	2201      	movs	r2, #1
 8000848:	f8a3 265e 	strh.w	r2, [r3, #1630]	; 0x65e
  module[1].cell[4].temp    = 49;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <APP_Initialize+0x284>)
 800084e:	2231      	movs	r2, #49	; 0x31
 8000850:	f8a3 2660 	strh.w	r2, [r3, #1632]	; 0x660
  module[1].cell[4].soc     = 91;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <APP_Initialize+0x284>)
 8000856:	225b      	movs	r2, #91	; 0x5b
 8000858:	f883 2662 	strb.w	r2, [r3, #1634]	; 0x662
  module[1].cell[4].soh     = 100;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <APP_Initialize+0x284>)
 800085e:	2264      	movs	r2, #100	; 0x64
 8000860:	f883 2663 	strb.w	r2, [r3, #1635]	; 0x663
  moduleCount++;
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <APP_Initialize+0x28c>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	3301      	adds	r3, #1
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <APP_Initialize+0x28c>)
 800086e:	701a      	strb	r2, [r3, #0]


  serialOut("");
 8000870:	4815      	ldr	r0, [pc, #84]	; (80008c8 <APP_Initialize+0x294>)
 8000872:	f003 fa3b 	bl	8003cec <serialOut>
  serialOut("");
 8000876:	4814      	ldr	r0, [pc, #80]	; (80008c8 <APP_Initialize+0x294>)
 8000878:	f003 fa38 	bl	8003cec <serialOut>
  serialOut("        ██    ██");
 800087c:	4813      	ldr	r0, [pc, #76]	; (80008cc <APP_Initialize+0x298>)
 800087e:	f003 fa35 	bl	8003cec <serialOut>
  serialOut("     ██ ██ ██ ██ ██");
 8000882:	4813      	ldr	r0, [pc, #76]	; (80008d0 <APP_Initialize+0x29c>)
 8000884:	f003 fa32 	bl	8003cec <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Module Emulator V1.0     (c) 2023");
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <APP_Initialize+0x2a0>)
 800088a:	f003 fa2f 	bl	8003cec <serialOut>
  serialOut("     ██ ██ ██ ██ ██     Modular Battery Technologies, Inc");
 800088e:	4812      	ldr	r0, [pc, #72]	; (80008d8 <APP_Initialize+0x2a4>)
 8000890:	f003 fa2c 	bl	8003cec <serialOut>
  serialOut("     ██    ██    ██");
 8000894:	4811      	ldr	r0, [pc, #68]	; (80008dc <APP_Initialize+0x2a8>)
 8000896:	f003 fa29 	bl	8003cec <serialOut>
  serialOut("     m o d b a t t");
 800089a:	4811      	ldr	r0, [pc, #68]	; (80008e0 <APP_Initialize+0x2ac>)
 800089c:	f003 fa26 	bl	8003cec <serialOut>
  serialOut("");
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <APP_Initialize+0x294>)
 80008a2:	f003 fa23 	bl	8003cec <serialOut>


	    // Switch state
    lastSwitchState.S1 = APP_SWITCH_RELEASED;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <APP_Initialize+0x2b0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]

    appData.state = APP_STATE_TEST_RAM_ACCESS;

#else
    /* Place the App state machine in its initial state. */
    appData.state = APP_STATE_TEST_RAM_ACCESS;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <APP_Initialize+0x2b4>)
 80008ae:	2206      	movs	r2, #6
 80008b0:	701a      	strb	r2, [r3, #0]
#endif

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000008c 	.word	0x2000008c
 80008bc:	ba770001 	.word	0xba770001
 80008c0:	2000c50c 	.word	0x2000c50c
 80008c4:	ba770002 	.word	0xba770002
 80008c8:	08007ce4 	.word	0x08007ce4
 80008cc:	08007ce8 	.word	0x08007ce8
 80008d0:	08007d04 	.word	0x08007d04
 80008d4:	08007d2c 	.word	0x08007d2c
 80008d8:	08007d7c 	.word	0x08007d7c
 80008dc:	08007dcc 	.word	0x08007dcc
 80008e0:	08007dec 	.word	0x08007dec
 80008e4:	2000c5c8 	.word	0x2000c5c8
 80008e8:	2000c510 	.word	0x2000c510

080008ec <APP_Tasks>:

/***************************************************************************************************************
*     A P P _ T a s k s                                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_Tasks(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0


    /* Check the application's current state. */
    switch (appData.state) {
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <APP_Tasks+0xe8>)
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b07      	cmp	r3, #7
 80008f8:	d863      	bhi.n	80009c2 <APP_Tasks+0xd6>
 80008fa:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <APP_Tasks+0x14>)
 80008fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000900:	08000921 	.word	0x08000921
 8000904:	08000939 	.word	0x08000939
 8000908:	080009c3 	.word	0x080009c3
 800090c:	080009c3 	.word	0x080009c3
 8000910:	080009c3 	.word	0x080009c3
 8000914:	0800093f 	.word	0x0800093f
 8000918:	0800094d 	.word	0x0800094d
 800091c:	08000981 	.word	0x08000981
            /* Application's initial state. */
        case APP_STATE_INIT:
        {
          if (DEBUG > 1) serialOut("APP_STATE_INIT");
          //Nop();
          APP_LED_Set(APP_INIT_LED);
 8000920:	2000      	movs	r0, #0
 8000922:	f7ff fe5b 	bl	80005dc <APP_LED_Set>
          APP_CANFDSPI_Init();
 8000926:	f000 f863 	bl	80009f0 <APP_CANFDSPI_Init>
          APP_LED_Clear(APP_INIT_LED);
 800092a:	2000      	movs	r0, #0
 800092c:	f7ff fe2a 	bl	8000584 <APP_LED_Clear>

          appData.state = APP_STATE_IDLE;
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <APP_Tasks+0xe8>)
 8000932:	2201      	movs	r2, #1
 8000934:	701a      	strb	r2, [r3, #0]
          break;
 8000936:	e048      	b.n	80009ca <APP_Tasks+0xde>
        }
        case APP_STATE_IDLE:
        {
           // Check for unregistered modules and send announcements
          APP_AnnounceUnregisteredModules();
 8000938:	f000 f9b2 	bl	8000ca0 <APP_AnnounceUnregisteredModules>
          break;
 800093c:	e045      	b.n	80009ca <APP_Tasks+0xde>
        }
        case APP_STATE_RECEIVE:
        {
          appData.state = APP_ReceiveMessage_Tasks();
 800093e:	f000 f8f9 	bl	8000b34 <APP_ReceiveMessage_Tasks>
 8000942:	4603      	mov	r3, r0
 8000944:	461a      	mov	r2, r3
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <APP_Tasks+0xe8>)
 8000948:	701a      	strb	r2, [r3, #0]
          break;
 800094a:	e03e      	b.n	80009ca <APP_Tasks+0xde>
        }
        case APP_STATE_TEST_RAM_ACCESS:             // RAM access test
        {
          bool passed = APP_TestRamAccess();
 800094c:	f000 ff96 	bl	800187c <APP_TestRamAccess>
 8000950:	4603      	mov	r3, r0
 8000952:	71bb      	strb	r3, [r7, #6]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD RAM TEST      : PASSED"); serialOut(tempBuffer);
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d007      	beq.n	800096a <APP_Tasks+0x7e>
 800095a:	491f      	ldr	r1, [pc, #124]	; (80009d8 <APP_Tasks+0xec>)
 800095c:	481f      	ldr	r0, [pc, #124]	; (80009dc <APP_Tasks+0xf0>)
 800095e:	f005 ffed 	bl	800693c <siprintf>
 8000962:	481e      	ldr	r0, [pc, #120]	; (80009dc <APP_Tasks+0xf0>)
 8000964:	f003 f9c2 	bl	8003cec <serialOut>
 8000968:	e006      	b.n	8000978 <APP_Tasks+0x8c>
          }else{        sprintf(tempBuffer,"     MCP2518FD RAM TEST      : FAILED"); serialOut(tempBuffer);
 800096a:	491d      	ldr	r1, [pc, #116]	; (80009e0 <APP_Tasks+0xf4>)
 800096c:	481b      	ldr	r0, [pc, #108]	; (80009dc <APP_Tasks+0xf0>)
 800096e:	f005 ffe5 	bl	800693c <siprintf>
 8000972:	481a      	ldr	r0, [pc, #104]	; (80009dc <APP_Tasks+0xf0>)
 8000974:	f003 f9ba 	bl	8003cec <serialOut>
          }
          appData.state = APP_STATE_TEST_REGISTER_ACCESS;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <APP_Tasks+0xe8>)
 800097a:	2207      	movs	r2, #7
 800097c:	701a      	strb	r2, [r3, #0]
          break;
 800097e:	e024      	b.n	80009ca <APP_Tasks+0xde>
        }
        case APP_STATE_TEST_REGISTER_ACCESS: /* Register access test */
        {
          bool passed = APP_TestRegisterAccess();
 8000980:	f000 ff04 	bl	800178c <APP_TestRegisterAccess>
 8000984:	4603      	mov	r3, r0
 8000986:	71fb      	strb	r3, [r7, #7]
          if (passed) { sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : PASSED"); serialOut(tempBuffer);
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <APP_Tasks+0xb2>
 800098e:	4915      	ldr	r1, [pc, #84]	; (80009e4 <APP_Tasks+0xf8>)
 8000990:	4812      	ldr	r0, [pc, #72]	; (80009dc <APP_Tasks+0xf0>)
 8000992:	f005 ffd3 	bl	800693c <siprintf>
 8000996:	4811      	ldr	r0, [pc, #68]	; (80009dc <APP_Tasks+0xf0>)
 8000998:	f003 f9a8 	bl	8003cec <serialOut>
 800099c:	e006      	b.n	80009ac <APP_Tasks+0xc0>
          }else{        sprintf(tempBuffer,"     MCP2518FD REGISTER TEST : FAILED"); serialOut(tempBuffer);
 800099e:	4912      	ldr	r1, [pc, #72]	; (80009e8 <APP_Tasks+0xfc>)
 80009a0:	480e      	ldr	r0, [pc, #56]	; (80009dc <APP_Tasks+0xf0>)
 80009a2:	f005 ffcb 	bl	800693c <siprintf>
 80009a6:	480d      	ldr	r0, [pc, #52]	; (80009dc <APP_Tasks+0xf0>)
 80009a8:	f003 f9a0 	bl	8003cec <serialOut>
          }
          sprintf(tempBuffer," "); serialOut(tempBuffer);
 80009ac:	490f      	ldr	r1, [pc, #60]	; (80009ec <APP_Tasks+0x100>)
 80009ae:	480b      	ldr	r0, [pc, #44]	; (80009dc <APP_Tasks+0xf0>)
 80009b0:	f005 ffc4 	bl	800693c <siprintf>
 80009b4:	4809      	ldr	r0, [pc, #36]	; (80009dc <APP_Tasks+0xf0>)
 80009b6:	f003 f999 	bl	8003cec <serialOut>
          appData.state = APP_STATE_INIT;
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <APP_Tasks+0xe8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
          break;
 80009c0:	e003      	b.n	80009ca <APP_Tasks+0xde>
        }
        // The default state should never be executed
        default:
        {
          /* TODO: Handle error in application's state machine. */
          appData.state = APP_STATE_INIT;
 80009c2:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <APP_Tasks+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]
          break;
 80009c8:	bf00      	nop
        }
    }
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2000c510 	.word	0x2000c510
 80009d8:	08007e00 	.word	0x08007e00
 80009dc:	2000c7bc 	.word	0x2000c7bc
 80009e0:	08007e28 	.word	0x08007e28
 80009e4:	08007e50 	.word	0x08007e50
 80009e8:	08007e78 	.word	0x08007e78
 80009ec:	08007ea0 	.word	0x08007ea0

080009f0 <APP_CANFDSPI_Init>:

/***************************************************************************************************************
*     A P P _ C A N F D S P I _ I n i t                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_CANFDSPI_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
    // Reset device
    DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 80009f4:	2000      	movs	r0, #0
 80009f6:	f000 ffb5 	bl	8001964 <DRV_CANFDSPI_Reset>

    // Enable ECC and initialize RAM
    DRV_CANFDSPI_EccEnable(DRV_CANFDSPI_INDEX_0);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f002 f95b 	bl	8002cb6 <DRV_CANFDSPI_EccEnable>

    DRV_CANFDSPI_RamInit(DRV_CANFDSPI_INDEX_0, 0xff);
 8000a00:	21ff      	movs	r1, #255	; 0xff
 8000a02:	2000      	movs	r0, #0
 8000a04:	f002 f98b 	bl	8002d1e <DRV_CANFDSPI_RamInit>

    // Configure device
    DRV_CANFDSPI_ConfigureObjectReset(&config);
 8000a08:	4845      	ldr	r0, [pc, #276]	; (8000b20 <APP_CANFDSPI_Init+0x130>)
 8000a0a:	f001 fb97 	bl	800213c <DRV_CANFDSPI_ConfigureObjectReset>
    config.IsoCrcEnable = 1;
 8000a0e:	4a44      	ldr	r2, [pc, #272]	; (8000b20 <APP_CANFDSPI_Init+0x130>)
 8000a10:	7813      	ldrb	r3, [r2, #0]
 8000a12:	f043 0320 	orr.w	r3, r3, #32
 8000a16:	7013      	strb	r3, [r2, #0]
    config.StoreInTEF = 0;
 8000a18:	4a41      	ldr	r2, [pc, #260]	; (8000b20 <APP_CANFDSPI_Init+0x130>)
 8000a1a:	7853      	ldrb	r3, [r2, #1]
 8000a1c:	f36f 1386 	bfc	r3, #6, #1
 8000a20:	7053      	strb	r3, [r2, #1]

    DRV_CANFDSPI_Configure(DRV_CANFDSPI_INDEX_0, &config);
 8000a22:	493f      	ldr	r1, [pc, #252]	; (8000b20 <APP_CANFDSPI_Init+0x130>)
 8000a24:	2000      	movs	r0, #0
 8000a26:	f001 fafb 	bl	8002020 <DRV_CANFDSPI_Configure>

    // Setup TX FIFO
    DRV_CANFDSPI_TransmitChannelConfigureObjectReset(&txConfig);
 8000a2a:	483e      	ldr	r0, [pc, #248]	; (8000b24 <APP_CANFDSPI_Init+0x134>)
 8000a2c:	f001 fc96 	bl	800235c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>
    txConfig.FifoSize = 7;
 8000a30:	4a3c      	ldr	r2, [pc, #240]	; (8000b24 <APP_CANFDSPI_Init+0x134>)
 8000a32:	7853      	ldrb	r3, [r2, #1]
 8000a34:	2107      	movs	r1, #7
 8000a36:	f361 0304 	bfi	r3, r1, #0, #5
 8000a3a:	7053      	strb	r3, [r2, #1]
    txConfig.PayLoadSize = CAN_PLSIZE_64;
 8000a3c:	4a39      	ldr	r2, [pc, #228]	; (8000b24 <APP_CANFDSPI_Init+0x134>)
 8000a3e:	7853      	ldrb	r3, [r2, #1]
 8000a40:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000a44:	7053      	strb	r3, [r2, #1]
    txConfig.TxPriority = 1;
 8000a46:	4a37      	ldr	r2, [pc, #220]	; (8000b24 <APP_CANFDSPI_Init+0x134>)
 8000a48:	7813      	ldrb	r3, [r2, #0]
 8000a4a:	2101      	movs	r1, #1
 8000a4c:	f361 0345 	bfi	r3, r1, #1, #5
 8000a50:	7013      	strb	r3, [r2, #0]

    DRV_CANFDSPI_TransmitChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txConfig);
 8000a52:	4a34      	ldr	r2, [pc, #208]	; (8000b24 <APP_CANFDSPI_Init+0x134>)
 8000a54:	2102      	movs	r1, #2
 8000a56:	2000      	movs	r0, #0
 8000a58:	f001 fc28 	bl	80022ac <DRV_CANFDSPI_TransmitChannelConfigure>

    // Setup RX FIFO
    DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(&rxConfig);
 8000a5c:	4832      	ldr	r0, [pc, #200]	; (8000b28 <APP_CANFDSPI_Init+0x138>)
 8000a5e:	f001 feab 	bl	80027b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>
    rxConfig.FifoSize = 15;
 8000a62:	4a31      	ldr	r2, [pc, #196]	; (8000b28 <APP_CANFDSPI_Init+0x138>)
 8000a64:	7813      	ldrb	r3, [r2, #0]
 8000a66:	210f      	movs	r1, #15
 8000a68:	f361 0345 	bfi	r3, r1, #1, #5
 8000a6c:	7013      	strb	r3, [r2, #0]
    rxConfig.PayLoadSize = CAN_PLSIZE_64;
 8000a6e:	4a2e      	ldr	r2, [pc, #184]	; (8000b28 <APP_CANFDSPI_Init+0x138>)
 8000a70:	8813      	ldrh	r3, [r2, #0]
 8000a72:	f443 73e0 	orr.w	r3, r3, #448	; 0x1c0
 8000a76:	8013      	strh	r3, [r2, #0]

    DRV_CANFDSPI_ReceiveChannelConfigure(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxConfig);
 8000a78:	4a2b      	ldr	r2, [pc, #172]	; (8000b28 <APP_CANFDSPI_Init+0x138>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f001 fe4f 	bl	8002720 <DRV_CANFDSPI_ReceiveChannelConfigure>

    // Setup RX Filter
    fObj.word = 0;
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <APP_CANFDSPI_Init+0x13c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
    //fObj.bF.SID = 0xda;
    fObj.bF.SID = 0x00;
 8000a88:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <APP_CANFDSPI_Init+0x13c>)
 8000a8a:	8813      	ldrh	r3, [r2, #0]
 8000a8c:	f36f 030a 	bfc	r3, #0, #11
 8000a90:	8013      	strh	r3, [r2, #0]
    fObj.bF.EXIDE = 0;
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <APP_CANFDSPI_Init+0x13c>)
 8000a94:	78d3      	ldrb	r3, [r2, #3]
 8000a96:	f36f 1386 	bfc	r3, #6, #1
 8000a9a:	70d3      	strb	r3, [r2, #3]
    fObj.bF.EID = 0x00;
 8000a9c:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <APP_CANFDSPI_Init+0x13c>)
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f36f 23dc 	bfc	r3, #11, #18
 8000aa4:	6013      	str	r3, [r2, #0]

    DRV_CANFDSPI_FilterObjectConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &fObj.bF);
 8000aa6:	4a21      	ldr	r2, [pc, #132]	; (8000b2c <APP_CANFDSPI_Init+0x13c>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f001 fdba 	bl	8002624 <DRV_CANFDSPI_FilterObjectConfigure>

    // Setup RX Mask
    mObj.word = 0;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <APP_CANFDSPI_Init+0x140>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
    mObj.bF.MSID = 0x0;
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <APP_CANFDSPI_Init+0x140>)
 8000ab8:	8813      	ldrh	r3, [r2, #0]
 8000aba:	f36f 030a 	bfc	r3, #0, #11
 8000abe:	8013      	strh	r3, [r2, #0]
    mObj.bF.MIDE = 0; // Both standard and extended frames accepted
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	; (8000b30 <APP_CANFDSPI_Init+0x140>)
 8000ac2:	78d3      	ldrb	r3, [r2, #3]
 8000ac4:	f36f 1386 	bfc	r3, #6, #1
 8000ac8:	70d3      	strb	r3, [r2, #3]
    mObj.bF.MEID = 0x0;
 8000aca:	4a19      	ldr	r2, [pc, #100]	; (8000b30 <APP_CANFDSPI_Init+0x140>)
 8000acc:	6813      	ldr	r3, [r2, #0]
 8000ace:	f36f 23dc 	bfc	r3, #11, #18
 8000ad2:	6013      	str	r3, [r2, #0]
    DRV_CANFDSPI_FilterMaskConfigure(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, &mObj.bF);
 8000ad4:	4a16      	ldr	r2, [pc, #88]	; (8000b30 <APP_CANFDSPI_Init+0x140>)
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f001 fdc5 	bl	8002668 <DRV_CANFDSPI_FilterMaskConfigure>

    // Link FIFO and Filter
    DRV_CANFDSPI_FilterToFifoLink(DRV_CANFDSPI_INDEX_0, CAN_FILTER0, APP_RX_FIFO, true);
 8000ade:	2301      	movs	r3, #1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f001 fde3 	bl	80026b0 <DRV_CANFDSPI_FilterToFifoLink>

    // Setup Bit Time
    DRV_CANFDSPI_BitTimeConfigure(DRV_CANFDSPI_INDEX_0, CAN_500K_2M, CAN_SSP_MODE_AUTO, CAN_SYSCLK_40M);
 8000aea:	2300      	movs	r3, #0
 8000aec:	2202      	movs	r2, #2
 8000aee:	2101      	movs	r1, #1
 8000af0:	2000      	movs	r0, #0
 8000af2:	f002 f954 	bl	8002d9e <DRV_CANFDSPI_BitTimeConfigure>

    // Setup Transmit and Receive Interrupts
    DRV_CANFDSPI_GpioModeConfigure(DRV_CANFDSPI_INDEX_0, GPIO_MODE_INT, GPIO_MODE_INT);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2100      	movs	r1, #0
 8000afa:	2000      	movs	r0, #0
 8000afc:	f003 f86e 	bl	8003bdc <DRV_CANFDSPI_GpioModeConfigure>
	#ifdef APP_USE_TX_INT
    DRV_CANFDSPI_TransmitChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, CAN_TX_FIFO_NOT_FULL_EVENT);
	#endif
    DRV_CANFDSPI_ReceiveChannelEventEnable(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, CAN_RX_FIFO_NOT_EMPTY_EVENT);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2101      	movs	r1, #1
 8000b04:	2000      	movs	r0, #0
 8000b06:	f002 f856 	bl	8002bb6 <DRV_CANFDSPI_ReceiveChannelEventEnable>
    DRV_CANFDSPI_ModuleEventEnable(DRV_CANFDSPI_INDEX_0, CAN_TX_EVENT | CAN_RX_EVENT);
 8000b0a:	2103      	movs	r1, #3
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f001 ffa6 	bl	8002a5e <DRV_CANFDSPI_ModuleEventEnable>

    // Select Normal Mode
    DRV_CANFDSPI_OperationModeSelect(DRV_CANFDSPI_INDEX_0, CAN_NORMAL_MODE);
 8000b12:	2100      	movs	r1, #0
 8000b14:	2000      	movs	r0, #0
 8000b16:	f001 fb8d 	bl	8002234 <DRV_CANFDSPI_OperationModeSelect>
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2000c514 	.word	0x2000c514
 8000b24:	2000c518 	.word	0x2000c518
 8000b28:	2000c56c 	.word	0x2000c56c
 8000b2c:	2000c570 	.word	0x2000c570
 8000b30:	2000c574 	.word	0x2000c574

08000b34 <APP_ReceiveMessage_Tasks>:

/***************************************************************************************************************
*     A P P _ R e c e i v e M e s s a g e _ T a s k s                                  P A C K   E M U L A T O R
***************************************************************************************************************/
APP_STATES APP_ReceiveMessage_Tasks(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af02      	add	r7, sp, #8
    APP_STATES nextState;
    // CANFRM_REGISTER registration;
    //uint8_t index;

    // Check if FIFO is not empty
    DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 8000b3a:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <APP_ReceiveMessage_Tasks+0xcc>)
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f002 f800 	bl	8002b44 <DRV_CANFDSPI_ReceiveChannelEventGet>

    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000b44:	e04b      	b.n	8000bde <APP_ReceiveMessage_Tasks+0xaa>

      // Get message
      DRV_CANFDSPI_ReceiveMessageGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxObj, rxd, MAX_DATA_BYTES);
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	; (8000c04 <APP_ReceiveMessage_Tasks+0xd0>)
 8000b4c:	4a2e      	ldr	r2, [pc, #184]	; (8000c08 <APP_ReceiveMessage_Tasks+0xd4>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	2000      	movs	r0, #0
 8000b52:	f001 fe5b 	bl	800280c <DRV_CANFDSPI_ReceiveMessageGet>

      switch (rxObj.bF.id.SID) {
 8000b56:	4b2c      	ldr	r3, [pc, #176]	; (8000c08 <APP_ReceiveMessage_Tasks+0xd4>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	f5a3 63a2 	sub.w	r3, r3, #1296	; 0x510
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d835      	bhi.n	8000bd4 <APP_ReceiveMessage_Tasks+0xa0>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <APP_ReceiveMessage_Tasks+0x3c>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000bb1 	.word	0x08000bb1
 8000b74:	08000bd5 	.word	0x08000bd5
 8000b78:	08000bc9 	.word	0x08000bc9
 8000b7c:	08000bd5 	.word	0x08000bd5
 8000b80:	08000bcf 	.word	0x08000bcf
 8000b84:	08000bc3 	.word	0x08000bc3
 8000b88:	08000bd5 	.word	0x08000bd5
 8000b8c:	08000bd5 	.word	0x08000bd5
 8000b90:	08000bd5 	.word	0x08000bd5
 8000b94:	08000bd5 	.word	0x08000bd5
 8000b98:	08000bd5 	.word	0x08000bd5
 8000b9c:	08000bd5 	.word	0x08000bd5
 8000ba0:	08000bd5 	.word	0x08000bd5
 8000ba4:	08000bd5 	.word	0x08000bd5
 8000ba8:	08000bb7 	.word	0x08000bb7
 8000bac:	08000bbd 	.word	0x08000bbd
        case ID_MODULE_REGISTRATION:
          APP_RegisterModule();
 8000bb0:	f000 fd18 	bl	80015e4 <APP_RegisterModule>
          break;
 8000bb4:	e00e      	b.n	8000bd4 <APP_ReceiveMessage_Tasks+0xa0>
        case ID_MODULE_ALL_DEREGISTER   :
          APP_DeRegisterAllModules();
 8000bb6:	f000 fd91 	bl	80016dc <APP_DeRegisterAllModules>
          break;
 8000bba:	e00b      	b.n	8000bd4 <APP_ReceiveMessage_Tasks+0xa0>
        case ID_MODULE_ALL_ISOLATE      :
          APP_IsolateAllModules();
 8000bbc:	f000 fdba 	bl	8001734 <APP_IsolateAllModules>
          break;
 8000bc0:	e008      	b.n	8000bd4 <APP_ReceiveMessage_Tasks+0xa0>
        case ID_MODULE_DETAIL_REQUEST   :
          APP_ReplyToCellDetailRequest();
 8000bc2:	f000 fc21 	bl	8001408 <APP_ReplyToCellDetailRequest>
          break;
 8000bc6:	e005      	b.n	8000bd4 <APP_ReceiveMessage_Tasks+0xa0>
        case ID_MODULE_STATUS_REQUEST   :
          APP_ReplyToStatusRequest();
 8000bc8:	f000 fb74 	bl	80012b4 <APP_ReplyToStatusRequest>
          break;
 8000bcc:	e002      	b.n	8000bd4 <APP_ReceiveMessage_Tasks+0xa0>
        case ID_MODULE_STATE_CHANGE   :
          APP_StateChange();
 8000bce:	f000 fbbf 	bl	8001350 <APP_StateChange>
        break;
 8000bd2:	bf00      	nop
      }

      // check for any more messages
      DRV_CANFDSPI_ReceiveChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_RX_FIFO, &rxFlags);
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <APP_ReceiveMessage_Tasks+0xcc>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f001 ffb3 	bl	8002b44 <DRV_CANFDSPI_ReceiveChannelEventGet>
    while ( rxFlags & CAN_RX_FIFO_NOT_EMPTY_EVENT){
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <APP_ReceiveMessage_Tasks+0xcc>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1ad      	bne.n	8000b46 <APP_ReceiveMessage_Tasks+0x12>
    }

    //    APP_LED_Clear(APP_RX_LED);

    nextState = APP_STATE_IDLE;
 8000bea:	2301      	movs	r3, #1
 8000bec:	71fb      	strb	r3, [r7, #7]
    canRxInterrupt = 0;
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <APP_ReceiveMessage_Tasks+0xd8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]


    return nextState;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000c578 	.word	0x2000c578
 8000c04:	2000c588 	.word	0x2000c588
 8000c08:	2000c57c 	.word	0x2000c57c
 8000c0c:	2000c820 	.word	0x2000c820

08000c10 <APP_TransmitMessageQueue>:
/***************************************************************************************************************
*     A P P _ T r a n s m i t M e s s a g e Q u e u e                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitMessageQueue(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af02      	add	r7, sp, #8
    APP_LED_Set(APP_TX_LED);
 8000c16:	2002      	movs	r0, #2
 8000c18:	f7ff fce0 	bl	80005dc <APP_LED_Set>

    uint8_t attempts = MAX_TXQUEUE_ATTEMPTS;
 8000c1c:	2332      	movs	r3, #50	; 0x32
 8000c1e:	71fb      	strb	r3, [r7, #7]

    // Check if FIFO is not full
    do {
        DRV_CANFDSPI_TransmitChannelEventGet(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txFlags);
 8000c20:	4a19      	ldr	r2, [pc, #100]	; (8000c88 <APP_TransmitMessageQueue+0x78>)
 8000c22:	2102      	movs	r1, #2
 8000c24:	2000      	movs	r0, #0
 8000c26:	f001 ff5a 	bl	8002ade <DRV_CANFDSPI_TransmitChannelEventGet>
        if (attempts == 0) {
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d108      	bne.n	8000c42 <APP_TransmitMessageQueue+0x32>
            Nop();
 8000c30:	bf00      	nop
            Nop();
 8000c32:	bf00      	nop
            DRV_CANFDSPI_ErrorCountStateGet(DRV_CANFDSPI_INDEX_0, &tec, &rec, &errorFlags);
 8000c34:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <APP_TransmitMessageQueue+0x7c>)
 8000c36:	4a16      	ldr	r2, [pc, #88]	; (8000c90 <APP_TransmitMessageQueue+0x80>)
 8000c38:	4916      	ldr	r1, [pc, #88]	; (8000c94 <APP_TransmitMessageQueue+0x84>)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f002 f809 	bl	8002c52 <DRV_CANFDSPI_ErrorCountStateGet>
            return;
 8000c40:	e01f      	b.n	8000c82 <APP_TransmitMessageQueue+0x72>
        }
        attempts--;
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	3b01      	subs	r3, #1
 8000c46:	71fb      	strb	r3, [r7, #7]
    }
    while (!(txFlags & CAN_TX_FIFO_NOT_FULL_EVENT));
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <APP_TransmitMessageQueue+0x78>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0e5      	beq.n	8000c20 <APP_TransmitMessageQueue+0x10>

    // Load message and transmit
    uint8_t n = DRV_CANFDSPI_DlcToDataBytes(txObj.bF.ctrl.DLC);
 8000c54:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <APP_TransmitMessageQueue+0x88>)
 8000c56:	791b      	ldrb	r3, [r3, #4]
 8000c58:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f003 f804 	bl	8003c6c <DRV_CANFDSPI_DlcToDataBytes>
 8000c64:	4603      	mov	r3, r0
 8000c66:	71bb      	strb	r3, [r7, #6]

    DRV_CANFDSPI_TransmitChannelLoad(DRV_CANFDSPI_INDEX_0, APP_TX_FIFO, &txObj, txd, n, true);
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	9201      	str	r2, [sp, #4]
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <APP_TransmitMessageQueue+0x8c>)
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <APP_TransmitMessageQueue+0x88>)
 8000c74:	2102      	movs	r1, #2
 8000c76:	2000      	movs	r0, #0
 8000c78:	f001 fbac 	bl	80023d4 <DRV_CANFDSPI_TransmitChannelLoad>

    APP_LED_Clear(APP_TX_LED);
 8000c7c:	2002      	movs	r0, #2
 8000c7e:	f7ff fc81 	bl	8000584 <APP_LED_Clear>
}
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000c51c 	.word	0x2000c51c
 8000c8c:	2000c5cc 	.word	0x2000c5cc
 8000c90:	2000c5cb 	.word	0x2000c5cb
 8000c94:	2000c5ca 	.word	0x2000c5ca
 8000c98:	2000c520 	.word	0x2000c520
 8000c9c:	2000c52c 	.word	0x2000c52c

08000ca0 <APP_AnnounceUnregisteredModules>:

/***************************************************************************************************************
*     A P P _ A n n o u n c e U n r e g i s t e r e d M o d u l e s                    P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_AnnounceUnregisteredModules(void){
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b089      	sub	sp, #36	; 0x24
 8000ca4:	af04      	add	r7, sp, #16

  uint8_t index;
  CANFRM_MODULE_ANNOUNCEMENT announcement;

  // check for unregistered modules and send out ANNOUNCE packets
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	73fb      	strb	r3, [r7, #15]
 8000caa:	e091      	b.n	8000dd0 <APP_AnnounceUnregisteredModules+0x130>
    if((module[index].uniqueId != 0) && (module[index].moduleId == 0)){
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	4a4d      	ldr	r2, [pc, #308]	; (8000de4 <APP_AnnounceUnregisteredModules+0x144>)
 8000cb0:	f240 6124 	movw	r1, #1572	; 0x624
 8000cb4:	fb01 f303 	mul.w	r3, r1, r3
 8000cb8:	4413      	add	r3, r2
 8000cba:	3304      	adds	r3, #4
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	f000 8083 	beq.w	8000dca <APP_AnnounceUnregisteredModules+0x12a>
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	4a47      	ldr	r2, [pc, #284]	; (8000de4 <APP_AnnounceUnregisteredModules+0x144>)
 8000cc8:	f240 6124 	movw	r1, #1572	; 0x624
 8000ccc:	fb01 f303 	mul.w	r3, r1, r3
 8000cd0:	4413      	add	r3, r2
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d177      	bne.n	8000dca <APP_AnnounceUnregisteredModules+0x12a>

      announcement.moduleFw = module[index].fwVersion;        // fill in the details
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	4a41      	ldr	r2, [pc, #260]	; (8000de4 <APP_AnnounceUnregisteredModules+0x144>)
 8000cde:	f240 6124 	movw	r1, #1572	; 0x624
 8000ce2:	fb01 f303 	mul.w	r3, r1, r3
 8000ce6:	4413      	add	r3, r2
 8000ce8:	330a      	adds	r3, #10
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	713b      	strb	r3, [r7, #4]
      announcement.moduleHw = module[index].hwVersion;
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a3c      	ldr	r2, [pc, #240]	; (8000de4 <APP_AnnounceUnregisteredModules+0x144>)
 8000cf2:	f240 6124 	movw	r1, #1572	; 0x624
 8000cf6:	fb01 f303 	mul.w	r3, r1, r3
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3309      	adds	r3, #9
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	717b      	strb	r3, [r7, #5]
      announcement.modulePartId = module[index].partId;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	4a37      	ldr	r2, [pc, #220]	; (8000de4 <APP_AnnounceUnregisteredModules+0x144>)
 8000d06:	f240 6124 	movw	r1, #1572	; 0x624
 8000d0a:	fb01 f303 	mul.w	r3, r1, r3
 8000d0e:	4413      	add	r3, r2
 8000d10:	3301      	adds	r3, #1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	71fb      	strb	r3, [r7, #7]
      announcement.moduleMfgId = module[index].mfgId;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	4a32      	ldr	r2, [pc, #200]	; (8000de4 <APP_AnnounceUnregisteredModules+0x144>)
 8000d1a:	f240 6124 	movw	r1, #1572	; 0x624
 8000d1e:	fb01 f303 	mul.w	r3, r1, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	71bb      	strb	r3, [r7, #6]
      announcement.moduleUniqueId = module[index].uniqueId;
 8000d28:	7bfb      	ldrb	r3, [r7, #15]
 8000d2a:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <APP_AnnounceUnregisteredModules+0x144>)
 8000d2c:	f240 6124 	movw	r1, #1572	; 0x624
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	3304      	adds	r3, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	60bb      	str	r3, [r7, #8]

      txObj.word[0] = 0;                              // Configure transmit message
 8000d3c:	4b2a      	ldr	r3, [pc, #168]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
      txObj.word[1] = 0;
 8000d42:	4b29      	ldr	r3, [pc, #164]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	605a      	str	r2, [r3, #4]

      memcpy(txd, &announcement, 8);
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <APP_AnnounceUnregisteredModules+0x14c>)
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d52:	e882 0003 	stmia.w	r2, {r0, r1}

      txObj.bF.id.SID = ID_MODULE_ANNOUNCEMENT     ;  // Standard ID
 8000d56:	4a24      	ldr	r2, [pc, #144]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d58:	8813      	ldrh	r3, [r2, #0]
 8000d5a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000d5e:	f361 030a 	bfi	r3, r1, #0, #11
 8000d62:	8013      	strh	r3, [r2, #0]
      txObj.bF.id.EID = 0;                            // Extended ID
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d66:	6813      	ldr	r3, [r2, #0]
 8000d68:	f36f 23dc 	bfc	r3, #11, #18
 8000d6c:	6013      	str	r3, [r2, #0]

      txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8000d6e:	4a1e      	ldr	r2, [pc, #120]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d70:	7913      	ldrb	r3, [r2, #4]
 8000d72:	f36f 1386 	bfc	r3, #6, #1
 8000d76:	7113      	strb	r3, [r2, #4]
      txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 8000d78:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d7a:	7913      	ldrb	r3, [r2, #4]
 8000d7c:	2108      	movs	r1, #8
 8000d7e:	f361 0303 	bfi	r3, r1, #0, #4
 8000d82:	7113      	strb	r3, [r2, #4]
      txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8000d84:	4a18      	ldr	r2, [pc, #96]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d86:	7913      	ldrb	r3, [r2, #4]
 8000d88:	f36f 13c7 	bfc	r3, #7, #1
 8000d8c:	7113      	strb	r3, [r2, #4]
      txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8000d8e:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <APP_AnnounceUnregisteredModules+0x148>)
 8000d90:	7913      	ldrb	r3, [r2, #4]
 8000d92:	f043 0310 	orr.w	r3, r3, #16
 8000d96:	7113      	strb	r3, [r2, #4]

      sprintf(tempBuffer,"TX 0x500 Announcement: FW=%02x, HW=%02x, MFG=%02x, PN=%02x, ID=%08x",announcement.moduleFw, announcement.moduleHw, announcement.moduleMfgId, announcement.modulePartId,(int)announcement.moduleUniqueId); serialOut(tempBuffer);
 8000d98:	793b      	ldrb	r3, [r7, #4]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	797b      	ldrb	r3, [r7, #5]
 8000d9e:	461c      	mov	r4, r3
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	68b9      	ldr	r1, [r7, #8]
 8000da6:	9102      	str	r1, [sp, #8]
 8000da8:	9201      	str	r2, [sp, #4]
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	4623      	mov	r3, r4
 8000dae:	4602      	mov	r2, r0
 8000db0:	490f      	ldr	r1, [pc, #60]	; (8000df0 <APP_AnnounceUnregisteredModules+0x150>)
 8000db2:	4810      	ldr	r0, [pc, #64]	; (8000df4 <APP_AnnounceUnregisteredModules+0x154>)
 8000db4:	f005 fdc2 	bl	800693c <siprintf>
 8000db8:	480e      	ldr	r0, [pc, #56]	; (8000df4 <APP_AnnounceUnregisteredModules+0x154>)
 8000dba:	f002 ff97 	bl	8003cec <serialOut>

      APP_TransmitMessageQueue();                     // Send it
 8000dbe:	f7ff ff27 	bl	8000c10 <APP_TransmitMessageQueue>

      HAL_Delay(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc6:	f003 fc43 	bl	8004650 <HAL_Delay>
  for(index = 0; index < MAX_MODULES_PER_PACK; index++){
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b1f      	cmp	r3, #31
 8000dd4:	f67f af6a 	bls.w	8000cac <APP_AnnounceUnregisteredModules+0xc>
    }
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	bf00      	nop
 8000de4:	2000008c 	.word	0x2000008c
 8000de8:	2000c520 	.word	0x2000c520
 8000dec:	2000c52c 	.word	0x2000c52c
 8000df0:	08007ea4 	.word	0x08007ea4
 8000df4:	2000c7bc 	.word	0x2000c7bc

08000df8 <APP_TransmitStatus1>:

/***************************************************************************************************************
*     A P P _ T  r a n s m i t S t a t u s 1                                           P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitStatus1(uint8_t index){
 8000df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dfa:	b08b      	sub	sp, #44	; 0x2c
 8000dfc:	af06      	add	r7, sp, #24
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]

  CANFRM_MODULE_STATUS_1 status;
  memset(&status,0,sizeof(status));
 8000e02:	f107 0308 	add.w	r3, r7, #8
 8000e06:	2208      	movs	r2, #8
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fd50 	bl	80068b0 <memset>

  status.moduleState = module[index].state;
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	4a79      	ldr	r2, [pc, #484]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000e14:	f240 6124 	movw	r1, #1572	; 0x624
 8000e18:	fb01 f303 	mul.w	r3, r1, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	331c      	adds	r3, #28
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	7a3b      	ldrb	r3, [r7, #8]
 8000e2a:	f362 0303 	bfi	r3, r2, #0, #4
 8000e2e:	723b      	strb	r3, [r7, #8]
  status.moduleSoc = module[index].soc;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4a71      	ldr	r2, [pc, #452]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000e34:	f240 6124 	movw	r1, #1572	; 0x624
 8000e38:	fb01 f303 	mul.w	r3, r1, r3
 8000e3c:	4413      	add	r3, r2
 8000e3e:	331e      	adds	r3, #30
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	727b      	strb	r3, [r7, #9]
  status.cellCount = module[index].cellCount;
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a6c      	ldr	r2, [pc, #432]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000e48:	f240 6124 	movw	r1, #1572	; 0x624
 8000e4c:	fb01 f303 	mul.w	r3, r1, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	3320      	adds	r3, #32
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	72fb      	strb	r3, [r7, #11]
  status.moduleSoh = module[index].soh;
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4a67      	ldr	r2, [pc, #412]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000e5c:	f240 6124 	movw	r1, #1572	; 0x624
 8000e60:	fb01 f303 	mul.w	r3, r1, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	331f      	adds	r3, #31
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	72bb      	strb	r3, [r7, #10]
  status.moduleMmc = module[index].mmc;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a62      	ldr	r2, [pc, #392]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000e70:	f240 6124 	movw	r1, #1572	; 0x624
 8000e74:	fb01 f303 	mul.w	r3, r1, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	330e      	adds	r3, #14
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	81bb      	strh	r3, [r7, #12]
  status.moduleMmv = module[index].mmv;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4a5d      	ldr	r2, [pc, #372]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000e84:	f240 6124 	movw	r1, #1572	; 0x624
 8000e88:	fb01 f303 	mul.w	r3, r1, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	330c      	adds	r3, #12
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	81fb      	strh	r3, [r7, #14]
  status.moduleStatus = module[index].status;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4a58      	ldr	r2, [pc, #352]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000e98:	f240 6124 	movw	r1, #1572	; 0x624
 8000e9c:	fb01 f303 	mul.w	r3, r1, r3
 8000ea0:	4413      	add	r3, r2
 8000ea2:	331d      	adds	r3, #29
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	7a3b      	ldrb	r3, [r7, #8]
 8000eae:	f362 1307 	bfi	r3, r2, #4, #4
 8000eb2:	723b      	strb	r3, [r7, #8]

  txObj.word[0] = 0;                              // Configure transmit message
 8000eb4:	4b51      	ldr	r3, [pc, #324]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8000eba:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 8000ec0:	4b4e      	ldr	r3, [pc, #312]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	609a      	str	r2, [r3, #8]

  memcpy(txd, &status, 12);
 8000ec6:	f107 0308 	add.w	r3, r7, #8
 8000eca:	220c      	movs	r2, #12
 8000ecc:	4619      	mov	r1, r3
 8000ece:	484c      	ldr	r0, [pc, #304]	; (8001000 <APP_TransmitStatus1+0x208>)
 8000ed0:	f005 fce0 	bl	8006894 <memcpy>

  txObj.bF.id.SID = ID_MODULE_STATUS_1 ;          // Standard ID
 8000ed4:	4a49      	ldr	r2, [pc, #292]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000ed6:	8813      	ldrh	r3, [r2, #0]
 8000ed8:	f240 5102 	movw	r1, #1282	; 0x502
 8000edc:	f361 030a 	bfi	r3, r1, #0, #11
 8000ee0:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[index].moduleId;       // Extended ID
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	4a44      	ldr	r2, [pc, #272]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000ee6:	f240 6124 	movw	r1, #1572	; 0x624
 8000eea:	fb01 f303 	mul.w	r3, r1, r3
 8000eee:	4413      	add	r3, r2
 8000ef0:	3308      	adds	r3, #8
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8000efa:	4940      	ldr	r1, [pc, #256]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000efc:	680b      	ldr	r3, [r1, #0]
 8000efe:	f362 23dc 	bfi	r3, r2, #11, #18
 8000f02:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8000f04:	4a3d      	ldr	r2, [pc, #244]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000f06:	7913      	ldrb	r3, [r2, #4]
 8000f08:	f36f 1386 	bfc	r3, #6, #1
 8000f0c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                 // 8 bytes to transmit
 8000f0e:	4a3b      	ldr	r2, [pc, #236]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000f10:	7913      	ldrb	r3, [r2, #4]
 8000f12:	2108      	movs	r1, #8
 8000f14:	f361 0303 	bfi	r3, r1, #0, #4
 8000f18:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 8000f1a:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000f1c:	7913      	ldrb	r3, [r2, #4]
 8000f1e:	f36f 13c7 	bfc	r3, #7, #1
 8000f22:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8000f24:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <APP_TransmitStatus1+0x204>)
 8000f26:	7913      	ldrb	r3, [r2, #4]
 8000f28:	f043 0310 	orr.w	r3, r3, #16
 8000f2c:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4a31      	ldr	r2, [pc, #196]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000f32:	f240 6124 	movw	r1, #1572	; 0x624
 8000f36:	fb01 f303 	mul.w	r3, r1, r3
 8000f3a:	4413      	add	r3, r2
 8000f3c:	3308      	adds	r3, #8
 8000f3e:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000f40:	469c      	mov	ip, r3
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	4a2c      	ldr	r2, [pc, #176]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000f46:	f240 6124 	movw	r1, #1572	; 0x624
 8000f4a:	fb01 f303 	mul.w	r3, r1, r3
 8000f4e:	4413      	add	r3, r2
 8000f50:	331c      	adds	r3, #28
 8000f52:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000f54:	469e      	mov	lr, r3
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000f5a:	f240 6124 	movw	r1, #1572	; 0x624
 8000f5e:	fb01 f303 	mul.w	r3, r1, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	331d      	adds	r3, #29
 8000f66:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000f68:	4618      	mov	r0, r3
        module[index].moduleId,module[index].state,module[index].status,module[index].cellCount,
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000f6e:	f240 6124 	movw	r1, #1572	; 0x624
 8000f72:	fb01 f303 	mul.w	r3, r1, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	3320      	adds	r3, #32
 8000f7a:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000f7c:	461c      	mov	r4, r3
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000f82:	f240 6124 	movw	r1, #1572	; 0x624
 8000f86:	fb01 f303 	mul.w	r3, r1, r3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	330c      	adds	r3, #12
 8000f8e:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000f90:	461d      	mov	r5, r3
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	4a18      	ldr	r2, [pc, #96]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000f96:	f240 6124 	movw	r1, #1572	; 0x624
 8000f9a:	fb01 f303 	mul.w	r3, r1, r3
 8000f9e:	4413      	add	r3, r2
 8000fa0:	330e      	adds	r3, #14
 8000fa2:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000fa4:	461e      	mov	r6, r3
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000faa:	f240 6124 	movw	r1, #1572	; 0x624
 8000fae:	fb01 f303 	mul.w	r3, r1, r3
 8000fb2:	4413      	add	r3, r2
 8000fb4:	331e      	adds	r3, #30
 8000fb6:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000fb8:	603b      	str	r3, [r7, #0]
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <APP_TransmitStatus1+0x200>)
 8000fbe:	f240 6124 	movw	r1, #1572	; 0x624
 8000fc2:	fb01 f303 	mul.w	r3, r1, r3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	331e      	adds	r3, #30
 8000fca:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x502 Status1: ID=%02x STE=%02x STS=%d CNT=%d MMV=%d MMC=%d SOC=%d, SOH=%d",
 8000fcc:	9305      	str	r3, [sp, #20]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	9304      	str	r3, [sp, #16]
 8000fd2:	9603      	str	r6, [sp, #12]
 8000fd4:	9502      	str	r5, [sp, #8]
 8000fd6:	9401      	str	r4, [sp, #4]
 8000fd8:	9000      	str	r0, [sp, #0]
 8000fda:	4673      	mov	r3, lr
 8000fdc:	4662      	mov	r2, ip
 8000fde:	4909      	ldr	r1, [pc, #36]	; (8001004 <APP_TransmitStatus1+0x20c>)
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <APP_TransmitStatus1+0x210>)
 8000fe2:	f005 fcab 	bl	800693c <siprintf>
        module[index].mmv,module[index].mmc,module[index].soc,module[index].soc); serialOut(tempBuffer);
 8000fe6:	4808      	ldr	r0, [pc, #32]	; (8001008 <APP_TransmitStatus1+0x210>)
 8000fe8:	f002 fe80 	bl	8003cec <serialOut>


  APP_TransmitMessageQueue();                     // Send it
 8000fec:	f7ff fe10 	bl	8000c10 <APP_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff8:	2000008c 	.word	0x2000008c
 8000ffc:	2000c520 	.word	0x2000c520
 8001000:	2000c52c 	.word	0x2000c52c
 8001004:	08007ee8 	.word	0x08007ee8
 8001008:	2000c7bc 	.word	0x2000c7bc

0800100c <APP_TransmitStatus2>:

/***************************************************************************************************************
*     A P P _ T  r a n s m i t S t a t u s 2                                           P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitStatus2(uint8_t index){
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]

  CANFRM_MODULE_STATUS_2 status;
  memset(&status,0,sizeof(status));
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2208      	movs	r2, #8
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fc46 	bl	80068b0 <memset>

  status.cellAvgVolt = module[index].voltAvg;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a49      	ldr	r2, [pc, #292]	; (800114c <APP_TransmitStatus2+0x140>)
 8001028:	f240 6124 	movw	r1, #1572	; 0x624
 800102c:	fb01 f303 	mul.w	r3, r1, r3
 8001030:	4413      	add	r3, r2
 8001032:	331a      	adds	r3, #26
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	81bb      	strh	r3, [r7, #12]
  status.cellHiVolt = module[index].voltHi;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a44      	ldr	r2, [pc, #272]	; (800114c <APP_TransmitStatus2+0x140>)
 800103c:	f240 6124 	movw	r1, #1572	; 0x624
 8001040:	fb01 f303 	mul.w	r3, r1, r3
 8001044:	4413      	add	r3, r2
 8001046:	3316      	adds	r3, #22
 8001048:	881b      	ldrh	r3, [r3, #0]
 800104a:	817b      	strh	r3, [r7, #10]
  status.cellLoVolt = module[index].voltLo;
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4a3f      	ldr	r2, [pc, #252]	; (800114c <APP_TransmitStatus2+0x140>)
 8001050:	f240 6124 	movw	r1, #1572	; 0x624
 8001054:	fb01 f303 	mul.w	r3, r1, r3
 8001058:	4413      	add	r3, r2
 800105a:	3318      	adds	r3, #24
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	813b      	strh	r3, [r7, #8]

  txObj.word[0] = 0;                              // Configure transmit message
 8001060:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <APP_TransmitStatus2+0x144>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 8001066:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <APP_TransmitStatus2+0x144>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 800106c:	4b38      	ldr	r3, [pc, #224]	; (8001150 <APP_TransmitStatus2+0x144>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]

  memcpy(txd, &status, 12);
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	220c      	movs	r2, #12
 8001078:	4619      	mov	r1, r3
 800107a:	4836      	ldr	r0, [pc, #216]	; (8001154 <APP_TransmitStatus2+0x148>)
 800107c:	f005 fc0a 	bl	8006894 <memcpy>

  txObj.bF.id.SID = ID_MODULE_STATUS_2           ;          // Standard ID
 8001080:	4a33      	ldr	r2, [pc, #204]	; (8001150 <APP_TransmitStatus2+0x144>)
 8001082:	8813      	ldrh	r3, [r2, #0]
 8001084:	f240 5103 	movw	r1, #1283	; 0x503
 8001088:	f361 030a 	bfi	r3, r1, #0, #11
 800108c:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[index].moduleId;                 // Extended ID
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	4a2e      	ldr	r2, [pc, #184]	; (800114c <APP_TransmitStatus2+0x140>)
 8001092:	f240 6124 	movw	r1, #1572	; 0x624
 8001096:	fb01 f303 	mul.w	r3, r1, r3
 800109a:	4413      	add	r3, r2
 800109c:	3308      	adds	r3, #8
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80010a6:	492a      	ldr	r1, [pc, #168]	; (8001150 <APP_TransmitStatus2+0x144>)
 80010a8:	680b      	ldr	r3, [r1, #0]
 80010aa:	f362 23dc 	bfi	r3, r2, #11, #18
 80010ae:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 80010b0:	4a27      	ldr	r2, [pc, #156]	; (8001150 <APP_TransmitStatus2+0x144>)
 80010b2:	7913      	ldrb	r3, [r2, #4]
 80010b4:	f36f 1386 	bfc	r3, #6, #1
 80010b8:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_6;                  // 8 bytes to transmit
 80010ba:	4a25      	ldr	r2, [pc, #148]	; (8001150 <APP_TransmitStatus2+0x144>)
 80010bc:	7913      	ldrb	r3, [r2, #4]
 80010be:	2106      	movs	r1, #6
 80010c0:	f361 0303 	bfi	r3, r1, #0, #4
 80010c4:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 80010c6:	4a22      	ldr	r2, [pc, #136]	; (8001150 <APP_TransmitStatus2+0x144>)
 80010c8:	7913      	ldrb	r3, [r2, #4]
 80010ca:	f36f 13c7 	bfc	r3, #7, #1
 80010ce:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 80010d0:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <APP_TransmitStatus2+0x144>)
 80010d2:	7913      	ldrb	r3, [r2, #4]
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	; (800114c <APP_TransmitStatus2+0x140>)
 80010de:	f240 6124 	movw	r1, #1572	; 0x624
 80010e2:	fb01 f303 	mul.w	r3, r1, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	3308      	adds	r3, #8
 80010ea:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 80010ec:	461c      	mov	r4, r3
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	4a16      	ldr	r2, [pc, #88]	; (800114c <APP_TransmitStatus2+0x140>)
 80010f2:	f240 6124 	movw	r1, #1572	; 0x624
 80010f6:	fb01 f303 	mul.w	r3, r1, r3
 80010fa:	4413      	add	r3, r2
 80010fc:	3316      	adds	r3, #22
 80010fe:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 8001100:	461d      	mov	r5, r3
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a11      	ldr	r2, [pc, #68]	; (800114c <APP_TransmitStatus2+0x140>)
 8001106:	f240 6124 	movw	r1, #1572	; 0x624
 800110a:	fb01 f303 	mul.w	r3, r1, r3
 800110e:	4413      	add	r3, r2
 8001110:	3318      	adds	r3, #24
 8001112:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 8001114:	4618      	mov	r0, r3
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <APP_TransmitStatus2+0x140>)
 800111a:	f240 6124 	movw	r1, #1572	; 0x624
 800111e:	fb01 f303 	mul.w	r3, r1, r3
 8001122:	4413      	add	r3, r2
 8001124:	331a      	adds	r3, #26
 8001126:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x503 Status2: ID=%02x HIV=%d LOV=%d AVG=%d",
 8001128:	9301      	str	r3, [sp, #4]
 800112a:	9000      	str	r0, [sp, #0]
 800112c:	462b      	mov	r3, r5
 800112e:	4622      	mov	r2, r4
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <APP_TransmitStatus2+0x14c>)
 8001132:	480a      	ldr	r0, [pc, #40]	; (800115c <APP_TransmitStatus2+0x150>)
 8001134:	f005 fc02 	bl	800693c <siprintf>
      module[index].moduleId,  module[index].voltHi,module[index].voltLo, module[index].voltAvg); serialOut(tempBuffer);
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <APP_TransmitStatus2+0x150>)
 800113a:	f002 fdd7 	bl	8003cec <serialOut>

  APP_TransmitMessageQueue();                     // Send it
 800113e:	f7ff fd67 	bl	8000c10 <APP_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bdb0      	pop	{r4, r5, r7, pc}
 800114a:	bf00      	nop
 800114c:	2000008c 	.word	0x2000008c
 8001150:	2000c520 	.word	0x2000c520
 8001154:	2000c52c 	.word	0x2000c52c
 8001158:	08007f38 	.word	0x08007f38
 800115c:	2000c7bc 	.word	0x2000c7bc

08001160 <APP_TransmitStatus3>:

/***************************************************************************************************************
*     A P P _ T  r a n s m i t S t a t u s 3                                           P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_TransmitStatus3(uint8_t index){
 8001160:	b5b0      	push	{r4, r5, r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af02      	add	r7, sp, #8
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]

  CANFRM_MODULE_STATUS_3 status;
  memset(&status,0,sizeof(status));
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	2208      	movs	r2, #8
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f005 fb9c 	bl	80068b0 <memset>


  status.cellHiTemp = module[index].tempHi;
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	4a49      	ldr	r2, [pc, #292]	; (80012a0 <APP_TransmitStatus3+0x140>)
 800117c:	f240 6124 	movw	r1, #1572	; 0x624
 8001180:	fb01 f303 	mul.w	r3, r1, r3
 8001184:	4413      	add	r3, r2
 8001186:	3310      	adds	r3, #16
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	817b      	strh	r3, [r7, #10]
  status.cellLoTemp = module[index].tempLo;
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4a44      	ldr	r2, [pc, #272]	; (80012a0 <APP_TransmitStatus3+0x140>)
 8001190:	f240 6124 	movw	r1, #1572	; 0x624
 8001194:	fb01 f303 	mul.w	r3, r1, r3
 8001198:	4413      	add	r3, r2
 800119a:	3312      	adds	r3, #18
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	813b      	strh	r3, [r7, #8]
  status.cellAvgTemp = module[index].tempAvg;
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4a3f      	ldr	r2, [pc, #252]	; (80012a0 <APP_TransmitStatus3+0x140>)
 80011a4:	f240 6124 	movw	r1, #1572	; 0x624
 80011a8:	fb01 f303 	mul.w	r3, r1, r3
 80011ac:	4413      	add	r3, r2
 80011ae:	3314      	adds	r3, #20
 80011b0:	881b      	ldrh	r3, [r3, #0]
 80011b2:	81bb      	strh	r3, [r7, #12]

  txObj.word[0] = 0;                              // Configure transmit message
 80011b4:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <APP_TransmitStatus3+0x144>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
  txObj.word[1] = 0;
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <APP_TransmitStatus3+0x144>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  txObj.word[2] = 0;
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <APP_TransmitStatus3+0x144>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]

  memcpy(txd, &status, 12);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	220c      	movs	r2, #12
 80011cc:	4619      	mov	r1, r3
 80011ce:	4836      	ldr	r0, [pc, #216]	; (80012a8 <APP_TransmitStatus3+0x148>)
 80011d0:	f005 fb60 	bl	8006894 <memcpy>

  txObj.bF.id.SID = ID_MODULE_STATUS_3             ;          // Standard ID
 80011d4:	4a33      	ldr	r2, [pc, #204]	; (80012a4 <APP_TransmitStatus3+0x144>)
 80011d6:	8813      	ldrh	r3, [r2, #0]
 80011d8:	f240 5104 	movw	r1, #1284	; 0x504
 80011dc:	f361 030a 	bfi	r3, r1, #0, #11
 80011e0:	8013      	strh	r3, [r2, #0]
  txObj.bF.id.EID = module[index].moduleId;                 // Extended ID
 80011e2:	79fb      	ldrb	r3, [r7, #7]
 80011e4:	4a2e      	ldr	r2, [pc, #184]	; (80012a0 <APP_TransmitStatus3+0x140>)
 80011e6:	f240 6124 	movw	r1, #1572	; 0x624
 80011ea:	fb01 f303 	mul.w	r3, r1, r3
 80011ee:	4413      	add	r3, r2
 80011f0:	3308      	adds	r3, #8
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	f3c2 0211 	ubfx	r2, r2, #0, #18
 80011fa:	492a      	ldr	r1, [pc, #168]	; (80012a4 <APP_TransmitStatus3+0x144>)
 80011fc:	680b      	ldr	r3, [r1, #0]
 80011fe:	f362 23dc 	bfi	r3, r2, #11, #18
 8001202:	600b      	str	r3, [r1, #0]

  txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001204:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <APP_TransmitStatus3+0x144>)
 8001206:	7913      	ldrb	r3, [r2, #4]
 8001208:	f36f 1386 	bfc	r3, #6, #1
 800120c:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 8 bytes to transmit
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <APP_TransmitStatus3+0x144>)
 8001210:	7913      	ldrb	r3, [r2, #4]
 8001212:	2108      	movs	r1, #8
 8001214:	f361 0303 	bfi	r3, r1, #0, #4
 8001218:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800121a:	4a22      	ldr	r2, [pc, #136]	; (80012a4 <APP_TransmitStatus3+0x144>)
 800121c:	7913      	ldrb	r3, [r2, #4]
 800121e:	f36f 13c7 	bfc	r3, #7, #1
 8001222:	7113      	strb	r3, [r2, #4]
  txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001224:	4a1f      	ldr	r2, [pc, #124]	; (80012a4 <APP_TransmitStatus3+0x144>)
 8001226:	7913      	ldrb	r3, [r2, #4]
 8001228:	f043 0310 	orr.w	r3, r3, #16
 800122c:	7113      	strb	r3, [r2, #4]

  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <APP_TransmitStatus3+0x140>)
 8001232:	f240 6124 	movw	r1, #1572	; 0x624
 8001236:	fb01 f303 	mul.w	r3, r1, r3
 800123a:	4413      	add	r3, r2
 800123c:	3308      	adds	r3, #8
 800123e:	781b      	ldrb	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 8001240:	461c      	mov	r4, r3
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <APP_TransmitStatus3+0x140>)
 8001246:	f240 6124 	movw	r1, #1572	; 0x624
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	4413      	add	r3, r2
 8001250:	3310      	adds	r3, #16
 8001252:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 8001254:	461d      	mov	r5, r3
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4a11      	ldr	r2, [pc, #68]	; (80012a0 <APP_TransmitStatus3+0x140>)
 800125a:	f240 6124 	movw	r1, #1572	; 0x624
 800125e:	fb01 f303 	mul.w	r3, r1, r3
 8001262:	4413      	add	r3, r2
 8001264:	3312      	adds	r3, #18
 8001266:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 8001268:	4618      	mov	r0, r3
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4a0c      	ldr	r2, [pc, #48]	; (80012a0 <APP_TransmitStatus3+0x140>)
 800126e:	f240 6124 	movw	r1, #1572	; 0x624
 8001272:	fb01 f303 	mul.w	r3, r1, r3
 8001276:	4413      	add	r3, r2
 8001278:	3314      	adds	r3, #20
 800127a:	881b      	ldrh	r3, [r3, #0]
  sprintf(tempBuffer,"TX 0x504 Status3: ID=%02x HIT=%d LOT=%d AVG=%d",
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	9000      	str	r0, [sp, #0]
 8001280:	462b      	mov	r3, r5
 8001282:	4622      	mov	r2, r4
 8001284:	4909      	ldr	r1, [pc, #36]	; (80012ac <APP_TransmitStatus3+0x14c>)
 8001286:	480a      	ldr	r0, [pc, #40]	; (80012b0 <APP_TransmitStatus3+0x150>)
 8001288:	f005 fb58 	bl	800693c <siprintf>
        module[index].moduleId,  module[index].tempHi,module[index].tempLo, module[index].tempAvg); serialOut(tempBuffer);
 800128c:	4808      	ldr	r0, [pc, #32]	; (80012b0 <APP_TransmitStatus3+0x150>)
 800128e:	f002 fd2d 	bl	8003cec <serialOut>

  APP_TransmitMessageQueue();                     // Send it
 8001292:	f7ff fcbd 	bl	8000c10 <APP_TransmitMessageQueue>
  //APP_TransmitCellZeroDetails(index);
}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bdb0      	pop	{r4, r5, r7, pc}
 800129e:	bf00      	nop
 80012a0:	2000008c 	.word	0x2000008c
 80012a4:	2000c520 	.word	0x2000c520
 80012a8:	2000c52c 	.word	0x2000c52c
 80012ac:	08007f68 	.word	0x08007f68
 80012b0:	2000c7bc 	.word	0x2000c7bc

080012b4 <APP_ReplyToStatusRequest>:
}

/***************************************************************************************************************
*     A P P _ R e p l y T o S t a t u s R e q u e s t                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_ReplyToStatusRequest(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0

   uint8_t moduleIndex = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	71fb      	strb	r3, [r7, #7]
   uint8_t index;
   uint8_t moduleId;

   moduleId = rxObj.bF.id.EID;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <APP_ReplyToStatusRequest+0x88>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 80012c6:	717b      	strb	r3, [r7, #5]

   sprintf(tempBuffer,"RX 0x512 Status Request ID=%02x",moduleId); serialOut(tempBuffer);
 80012c8:	797b      	ldrb	r3, [r7, #5]
 80012ca:	461a      	mov	r2, r3
 80012cc:	491c      	ldr	r1, [pc, #112]	; (8001340 <APP_ReplyToStatusRequest+0x8c>)
 80012ce:	481d      	ldr	r0, [pc, #116]	; (8001344 <APP_ReplyToStatusRequest+0x90>)
 80012d0:	f005 fb34 	bl	800693c <siprintf>
 80012d4:	481b      	ldr	r0, [pc, #108]	; (8001344 <APP_ReplyToStatusRequest+0x90>)
 80012d6:	f002 fd09 	bl	8003cec <serialOut>

 //find the index for the module
 moduleIndex = moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <APP_ReplyToStatusRequest+0x94>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 80012e0:	2300      	movs	r3, #0
 80012e2:	71bb      	strb	r3, [r7, #6]
 80012e4:	e010      	b.n	8001308 <APP_ReplyToStatusRequest+0x54>
   if(moduleId == module[index].moduleId)
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	4a18      	ldr	r2, [pc, #96]	; (800134c <APP_ReplyToStatusRequest+0x98>)
 80012ea:	f240 6124 	movw	r1, #1572	; 0x624
 80012ee:	fb01 f303 	mul.w	r3, r1, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	3308      	adds	r3, #8
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	797a      	ldrb	r2, [r7, #5]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d101      	bne.n	8001302 <APP_ReplyToStatusRequest+0x4e>
     moduleIndex = index; // module is already registered, save the index
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	71fb      	strb	r3, [r7, #7]
 for(index = 0; index < moduleCount; index++){
 8001302:	79bb      	ldrb	r3, [r7, #6]
 8001304:	3301      	adds	r3, #1
 8001306:	71bb      	strb	r3, [r7, #6]
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <APP_ReplyToStatusRequest+0x94>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	79ba      	ldrb	r2, [r7, #6]
 800130e:	429a      	cmp	r2, r3
 8001310:	d3e9      	bcc.n	80012e6 <APP_ReplyToStatusRequest+0x32>
 }
 if(moduleIndex != moduleCount) {
 8001312:	4b0d      	ldr	r3, [pc, #52]	; (8001348 <APP_ReplyToStatusRequest+0x94>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	429a      	cmp	r2, r3
 800131a:	d00b      	beq.n	8001334 <APP_ReplyToStatusRequest+0x80>
     // Transmit the 3 status frames
     APP_TransmitStatus1(moduleIndex);
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fd6a 	bl	8000df8 <APP_TransmitStatus1>
     APP_TransmitStatus2(moduleIndex);
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff fe70 	bl	800100c <APP_TransmitStatus2>
     APP_TransmitStatus3(moduleIndex);
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff16 	bl	8001160 <APP_TransmitStatus3>
    }
 }
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000c57c 	.word	0x2000c57c
 8001340:	08007ff0 	.word	0x08007ff0
 8001344:	2000c7bc 	.word	0x2000c7bc
 8001348:	2000c50c 	.word	0x2000c50c
 800134c:	2000008c 	.word	0x2000008c

08001350 <APP_StateChange>:


/***************************************************************************************************************
*     A P P _ R e p l y T o S t a t u s R e q u e s t                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_StateChange(void){
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

   uint8_t moduleIndex = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
   uint8_t index;
   uint8_t moduleId;

   moduleId = rxObj.bF.id.EID;
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <APP_StateChange+0xa0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8001362:	737b      	strb	r3, [r7, #13]

   CANFRM_MODULE_STATUS_1 status;
   memcpy(&status, rxd,sizeof(status));
 8001364:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <APP_StateChange+0xa4>)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	e892 0003 	ldmia.w	r2, {r0, r1}
 800136c:	e883 0003 	stmia.w	r3, {r0, r1}

 //find the index for the module
 moduleIndex = moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <APP_StateChange+0xa8>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	73fb      	strb	r3, [r7, #15]
 for(index = 0; index < moduleCount; index++){
 8001376:	2300      	movs	r3, #0
 8001378:	73bb      	strb	r3, [r7, #14]
 800137a:	e010      	b.n	800139e <APP_StateChange+0x4e>
   if(moduleId == module[index].moduleId)
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <APP_StateChange+0xac>)
 8001380:	f240 6124 	movw	r1, #1572	; 0x624
 8001384:	fb01 f303 	mul.w	r3, r1, r3
 8001388:	4413      	add	r3, r2
 800138a:	3308      	adds	r3, #8
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	7b7a      	ldrb	r2, [r7, #13]
 8001390:	429a      	cmp	r2, r3
 8001392:	d101      	bne.n	8001398 <APP_StateChange+0x48>
     moduleIndex = index; // module is already registered, save the index
 8001394:	7bbb      	ldrb	r3, [r7, #14]
 8001396:	73fb      	strb	r3, [r7, #15]
 for(index = 0; index < moduleCount; index++){
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	3301      	adds	r3, #1
 800139c:	73bb      	strb	r3, [r7, #14]
 800139e:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <APP_StateChange+0xa8>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	7bba      	ldrb	r2, [r7, #14]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d3e9      	bcc.n	800137c <APP_StateChange+0x2c>
 }
 if(moduleIndex != moduleCount){
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <APP_StateChange+0xa8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	7bfa      	ldrb	r2, [r7, #15]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d01a      	beq.n	80013e8 <APP_StateChange+0x98>
   module[moduleIndex].state = status.moduleState;
 80013b2:	793b      	ldrb	r3, [r7, #4]
 80013b4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	4610      	mov	r0, r2
 80013be:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <APP_StateChange+0xac>)
 80013c0:	f240 6124 	movw	r1, #1572	; 0x624
 80013c4:	fb01 f303 	mul.w	r3, r1, r3
 80013c8:	4413      	add	r3, r2
 80013ca:	331c      	adds	r3, #28
 80013cc:	4602      	mov	r2, r0
 80013ce:	701a      	strb	r2, [r3, #0]
   sprintf(tempBuffer,"RX 0x514 State Change Request ID=%02x STATE=%02x",moduleId,status.moduleState); serialOut(tempBuffer);
 80013d0:	7b7a      	ldrb	r2, [r7, #13]
 80013d2:	793b      	ldrb	r3, [r7, #4]
 80013d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4909      	ldr	r1, [pc, #36]	; (8001400 <APP_StateChange+0xb0>)
 80013dc:	4809      	ldr	r0, [pc, #36]	; (8001404 <APP_StateChange+0xb4>)
 80013de:	f005 faad 	bl	800693c <siprintf>
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <APP_StateChange+0xb4>)
 80013e4:	f002 fc82 	bl	8003cec <serialOut>
   //APP_TransmitStatus(moduleIndex);
 }
}
 80013e8:	bf00      	nop
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000c57c 	.word	0x2000c57c
 80013f4:	2000c588 	.word	0x2000c588
 80013f8:	2000c50c 	.word	0x2000c50c
 80013fc:	2000008c 	.word	0x2000008c
 8001400:	08008010 	.word	0x08008010
 8001404:	2000c7bc 	.word	0x2000c7bc

08001408 <APP_ReplyToCellDetailRequest>:
/***************************************************************************************************************
*     A P P _ R e p l y T o C e l l D e t a i l R e q u e s t                          P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_ReplyToCellDetailRequest(void){
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b08b      	sub	sp, #44	; 0x2c
 800140c:	af04      	add	r7, sp, #16

  CANFRM_MODULE_DETAIL_REQUEST detailRequest;
 CANFRM_MODULE_DETAIL cellDetail;
 uint8_t moduleIndex = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	75fb      	strb	r3, [r7, #23]
 uint8_t index;

 // copy data to announcement structure
 memcpy(&detailRequest, rxd,3);
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2203      	movs	r2, #3
 8001418:	496a      	ldr	r1, [pc, #424]	; (80015c4 <APP_ReplyToCellDetailRequest+0x1bc>)
 800141a:	4618      	mov	r0, r3
 800141c:	f005 fa3a 	bl	8006894 <memcpy>
 sprintf(tempBuffer,"RX 0x515 Request detail: ID=%02x, CELL=%02x",detailRequest.moduleId,detailRequest.cellId ); serialOut(tempBuffer);
 8001420:	7b3b      	ldrb	r3, [r7, #12]
 8001422:	461a      	mov	r2, r3
 8001424:	7b7b      	ldrb	r3, [r7, #13]
 8001426:	4968      	ldr	r1, [pc, #416]	; (80015c8 <APP_ReplyToCellDetailRequest+0x1c0>)
 8001428:	4868      	ldr	r0, [pc, #416]	; (80015cc <APP_ReplyToCellDetailRequest+0x1c4>)
 800142a:	f005 fa87 	bl	800693c <siprintf>
 800142e:	4867      	ldr	r0, [pc, #412]	; (80015cc <APP_ReplyToCellDetailRequest+0x1c4>)
 8001430:	f002 fc5c 	bl	8003cec <serialOut>

 //find the index for the module
 moduleIndex = moduleCount; //default the index to the next entry (we are using 0 so next index is the moduleCount)
 8001434:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <APP_ReplyToCellDetailRequest+0x1c8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	75fb      	strb	r3, [r7, #23]
 for(index = 0; index < moduleCount; index++){
 800143a:	2300      	movs	r3, #0
 800143c:	75bb      	strb	r3, [r7, #22]
 800143e:	e010      	b.n	8001462 <APP_ReplyToCellDetailRequest+0x5a>
   if(detailRequest.moduleId == module[index].moduleId)
 8001440:	7b3a      	ldrb	r2, [r7, #12]
 8001442:	7dbb      	ldrb	r3, [r7, #22]
 8001444:	4963      	ldr	r1, [pc, #396]	; (80015d4 <APP_ReplyToCellDetailRequest+0x1cc>)
 8001446:	f240 6024 	movw	r0, #1572	; 0x624
 800144a:	fb00 f303 	mul.w	r3, r0, r3
 800144e:	440b      	add	r3, r1
 8001450:	3308      	adds	r3, #8
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d101      	bne.n	800145c <APP_ReplyToCellDetailRequest+0x54>
     moduleIndex = index; // module is already registered, save the index
 8001458:	7dbb      	ldrb	r3, [r7, #22]
 800145a:	75fb      	strb	r3, [r7, #23]
 for(index = 0; index < moduleCount; index++){
 800145c:	7dbb      	ldrb	r3, [r7, #22]
 800145e:	3301      	adds	r3, #1
 8001460:	75bb      	strb	r3, [r7, #22]
 8001462:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <APP_ReplyToCellDetailRequest+0x1c8>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	7dba      	ldrb	r2, [r7, #22]
 8001468:	429a      	cmp	r2, r3
 800146a:	d3e9      	bcc.n	8001440 <APP_ReplyToCellDetailRequest+0x38>
 }
 if(moduleIndex != moduleCount){
 800146c:	4b58      	ldr	r3, [pc, #352]	; (80015d0 <APP_ReplyToCellDetailRequest+0x1c8>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	7dfa      	ldrb	r2, [r7, #23]
 8001472:	429a      	cmp	r2, r3
 8001474:	f000 80a2 	beq.w	80015bc <APP_ReplyToCellDetailRequest+0x1b4>
    // store the details
    cellDetail.cellCount   = module[moduleIndex].cellCount;
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	4a56      	ldr	r2, [pc, #344]	; (80015d4 <APP_ReplyToCellDetailRequest+0x1cc>)
 800147c:	f240 6124 	movw	r1, #1572	; 0x624
 8001480:	fb01 f303 	mul.w	r3, r1, r3
 8001484:	4413      	add	r3, r2
 8001486:	3320      	adds	r3, #32
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	717b      	strb	r3, [r7, #5]
    cellDetail.cellId      = detailRequest.cellId;
 800148c:	7b7b      	ldrb	r3, [r7, #13]
 800148e:	713b      	strb	r3, [r7, #4]
    cellDetail.cellSoc     = module[moduleIndex].cell[detailRequest.cellId].soc;
 8001490:	7dfa      	ldrb	r2, [r7, #23]
 8001492:	7b7b      	ldrb	r3, [r7, #13]
 8001494:	4618      	mov	r0, r3
 8001496:	494f      	ldr	r1, [pc, #316]	; (80015d4 <APP_ReplyToCellDetailRequest+0x1cc>)
 8001498:	4603      	mov	r3, r0
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4403      	add	r3, r0
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	f240 6024 	movw	r0, #1572	; 0x624
 80014a4:	fb00 f202 	mul.w	r2, r0, r2
 80014a8:	4413      	add	r3, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	3326      	adds	r3, #38	; 0x26
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	72bb      	strb	r3, [r7, #10]
    cellDetail.cellSoh     = module[moduleIndex].cell[detailRequest.cellId].soh;
 80014b2:	7dfa      	ldrb	r2, [r7, #23]
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	4618      	mov	r0, r3
 80014b8:	4946      	ldr	r1, [pc, #280]	; (80015d4 <APP_ReplyToCellDetailRequest+0x1cc>)
 80014ba:	4603      	mov	r3, r0
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4403      	add	r3, r0
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	f240 6024 	movw	r0, #1572	; 0x624
 80014c6:	fb00 f202 	mul.w	r2, r0, r2
 80014ca:	4413      	add	r3, r2
 80014cc:	440b      	add	r3, r1
 80014ce:	3327      	adds	r3, #39	; 0x27
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	72fb      	strb	r3, [r7, #11]
    cellDetail.cellTemp    = module[moduleIndex].cell[detailRequest.cellId].temp ;
 80014d4:	7dfa      	ldrb	r2, [r7, #23]
 80014d6:	7b7b      	ldrb	r3, [r7, #13]
 80014d8:	4618      	mov	r0, r3
 80014da:	493e      	ldr	r1, [pc, #248]	; (80015d4 <APP_ReplyToCellDetailRequest+0x1cc>)
 80014dc:	4603      	mov	r3, r0
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4403      	add	r3, r0
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	f240 6024 	movw	r0, #1572	; 0x624
 80014e8:	fb00 f202 	mul.w	r2, r0, r2
 80014ec:	4413      	add	r3, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	3324      	adds	r3, #36	; 0x24
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	80fb      	strh	r3, [r7, #6]
    cellDetail.cellVoltage = module[moduleIndex].cell[detailRequest.cellId].voltage;
 80014f6:	7dfa      	ldrb	r2, [r7, #23]
 80014f8:	7b7b      	ldrb	r3, [r7, #13]
 80014fa:	4618      	mov	r0, r3
 80014fc:	4935      	ldr	r1, [pc, #212]	; (80015d4 <APP_ReplyToCellDetailRequest+0x1cc>)
 80014fe:	4603      	mov	r3, r0
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4403      	add	r3, r0
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	f240 6024 	movw	r0, #1572	; 0x624
 800150a:	fb00 f202 	mul.w	r2, r0, r2
 800150e:	4413      	add	r3, r2
 8001510:	440b      	add	r3, r1
 8001512:	3322      	adds	r3, #34	; 0x22
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	813b      	strh	r3, [r7, #8]

    // clear bit fields
    txObj.word[0] = 0;                              // Configure transmit message
 8001518:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
    txObj.word[1] = 0;
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
    txObj.word[2] = 0;
 8001524:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]

    memcpy(txd, &cellDetail, 8);
 800152a:	4b2c      	ldr	r3, [pc, #176]	; (80015dc <APP_ReplyToCellDetailRequest+0x1d4>)
 800152c:	461a      	mov	r2, r3
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001534:	e882 0003 	stmia.w	r2, {r0, r1}

    txObj.bF.id.SID = ID_MODULE_DETAIL;             // Standard ID
 8001538:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 800153a:	8813      	ldrh	r3, [r2, #0]
 800153c:	f240 5105 	movw	r1, #1285	; 0x505
 8001540:	f361 030a 	bfi	r3, r1, #0, #11
 8001544:	8013      	strh	r3, [r2, #0]
    txObj.bF.id.EID = module[index].moduleId;       // Extended ID
 8001546:	7dbb      	ldrb	r3, [r7, #22]
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <APP_ReplyToCellDetailRequest+0x1cc>)
 800154a:	f240 6124 	movw	r1, #1572	; 0x624
 800154e:	fb01 f303 	mul.w	r3, r1, r3
 8001552:	4413      	add	r3, r2
 8001554:	3308      	adds	r3, #8
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800155e:	491e      	ldr	r1, [pc, #120]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001560:	680b      	ldr	r3, [r1, #0]
 8001562:	f362 23dc 	bfi	r3, r2, #11, #18
 8001566:	600b      	str	r3, [r1, #0]

    txObj.bF.ctrl.BRS = 0;                          // Bit Rate Switch - use DBR when set, NBR when cleared
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 800156a:	7913      	ldrb	r3, [r2, #4]
 800156c:	f36f 1386 	bfc	r3, #6, #1
 8001570:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.DLC = CAN_DLC_8;                  // 3 bytes to transmit
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001574:	7913      	ldrb	r3, [r2, #4]
 8001576:	2108      	movs	r1, #8
 8001578:	f361 0303 	bfi	r3, r1, #0, #4
 800157c:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.FDF = 0;                          // Frame Data Format - CAN FD when set, CAN 2.0 when cleared
 800157e:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 8001580:	7913      	ldrb	r3, [r2, #4]
 8001582:	f36f 13c7 	bfc	r3, #7, #1
 8001586:	7113      	strb	r3, [r2, #4]
    txObj.bF.ctrl.IDE = 1;                          // ID Extension selection - send base frame when cleared, extended frame when set
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <APP_ReplyToCellDetailRequest+0x1d0>)
 800158a:	7913      	ldrb	r3, [r2, #4]
 800158c:	f043 0310 	orr.w	r3, r3, #16
 8001590:	7113      	strb	r3, [r2, #4]

    sprintf(tempBuffer,"TX 0x505 Cell Detail: CNT=%02x, CELL=%02x, SOC=%02x, TEMP=%03x, Voltage=%03x", cellDetail.cellCount, cellDetail.cellId, cellDetail.cellSoc, cellDetail.cellTemp, cellDetail.cellVoltage); serialOut(tempBuffer);
 8001592:	797b      	ldrb	r3, [r7, #5]
 8001594:	4618      	mov	r0, r3
 8001596:	793b      	ldrb	r3, [r7, #4]
 8001598:	461c      	mov	r4, r3
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	88fa      	ldrh	r2, [r7, #6]
 800159e:	8939      	ldrh	r1, [r7, #8]
 80015a0:	9102      	str	r1, [sp, #8]
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4623      	mov	r3, r4
 80015a8:	4602      	mov	r2, r0
 80015aa:	490d      	ldr	r1, [pc, #52]	; (80015e0 <APP_ReplyToCellDetailRequest+0x1d8>)
 80015ac:	4807      	ldr	r0, [pc, #28]	; (80015cc <APP_ReplyToCellDetailRequest+0x1c4>)
 80015ae:	f005 f9c5 	bl	800693c <siprintf>
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <APP_ReplyToCellDetailRequest+0x1c4>)
 80015b4:	f002 fb9a 	bl	8003cec <serialOut>
     APP_TransmitMessageQueue();                     // Send it
 80015b8:	f7ff fb2a 	bl	8000c10 <APP_TransmitMessageQueue>
   }else{
     // TODO : We couldn't find the module.
   }
}
 80015bc:	bf00      	nop
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	2000c588 	.word	0x2000c588
 80015c8:	08008044 	.word	0x08008044
 80015cc:	2000c7bc 	.word	0x2000c7bc
 80015d0:	2000c50c 	.word	0x2000c50c
 80015d4:	2000008c 	.word	0x2000008c
 80015d8:	2000c520 	.word	0x2000c520
 80015dc:	2000c52c 	.word	0x2000c52c
 80015e0:	08008070 	.word	0x08008070

080015e4 <APP_RegisterModule>:

/***************************************************************************************************************
*     A P P _  R e g i s t e r M o d u l e                                             P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_RegisterModule(void){
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b089      	sub	sp, #36	; 0x24
 80015e8:	af04      	add	r7, sp, #16

  CANFRM_MODULE_REGISTRATION registration;
  uint8_t index = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]

  // copy data to announcement structure
  memcpy(&registration, rxd,8);
 80015ee:	4a35      	ldr	r2, [pc, #212]	; (80016c4 <APP_RegisterModule+0xe0>)
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015f6:	e883 0003 	stmia.w	r3, {r0, r1}
  //sprintf(tempBuffer,"RX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",registration.moduleId, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);
  sprintf(tempBuffer,"RX 0x510 Registration: ID=%02x, CTL=%02x, MFG=%02x, PN=%02x, UID=%08x",rxObj.bF.id.EID, registration.controllerId, registration.moduleMfgId, registration.modulePartId,(int)registration.moduleUniqueId); serialOut(tempBuffer);
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <APP_RegisterModule+0xe4>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f3c3 23d1 	ubfx	r3, r3, #11, #18
 8001602:	4618      	mov	r0, r3
 8001604:	797b      	ldrb	r3, [r7, #5]
 8001606:	461c      	mov	r4, r3
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	79fa      	ldrb	r2, [r7, #7]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	9102      	str	r1, [sp, #8]
 8001610:	9201      	str	r2, [sp, #4]
 8001612:	9300      	str	r3, [sp, #0]
 8001614:	4623      	mov	r3, r4
 8001616:	4602      	mov	r2, r0
 8001618:	492c      	ldr	r1, [pc, #176]	; (80016cc <APP_RegisterModule+0xe8>)
 800161a:	482d      	ldr	r0, [pc, #180]	; (80016d0 <APP_RegisterModule+0xec>)
 800161c:	f005 f98e 	bl	800693c <siprintf>
 8001620:	482b      	ldr	r0, [pc, #172]	; (80016d0 <APP_RegisterModule+0xec>)
 8001622:	f002 fb63 	bl	8003cec <serialOut>

  // update our record
  for(index = 0; index < moduleCount; index++){
 8001626:	2300      	movs	r3, #0
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	e040      	b.n	80016ae <APP_RegisterModule+0xca>
   if((registration.moduleMfgId == module[index].mfgId) && (registration.modulePartId == module[index].partId) && (registration.moduleUniqueId == module[index].uniqueId)){
 800162c:	79ba      	ldrb	r2, [r7, #6]
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4928      	ldr	r1, [pc, #160]	; (80016d4 <APP_RegisterModule+0xf0>)
 8001632:	f240 6024 	movw	r0, #1572	; 0x624
 8001636:	fb00 f303 	mul.w	r3, r0, r3
 800163a:	440b      	add	r3, r1
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d132      	bne.n	80016a8 <APP_RegisterModule+0xc4>
 8001642:	79fa      	ldrb	r2, [r7, #7]
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	4923      	ldr	r1, [pc, #140]	; (80016d4 <APP_RegisterModule+0xf0>)
 8001648:	f240 6024 	movw	r0, #1572	; 0x624
 800164c:	fb00 f303 	mul.w	r3, r0, r3
 8001650:	440b      	add	r3, r1
 8001652:	3301      	adds	r3, #1
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d126      	bne.n	80016a8 <APP_RegisterModule+0xc4>
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	491d      	ldr	r1, [pc, #116]	; (80016d4 <APP_RegisterModule+0xf0>)
 8001660:	f240 6024 	movw	r0, #1572	; 0x624
 8001664:	fb00 f303 	mul.w	r3, r0, r3
 8001668:	440b      	add	r3, r1
 800166a:	3304      	adds	r3, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d11a      	bne.n	80016a8 <APP_RegisterModule+0xc4>
      //module[index].moduleId = registration.moduleId;
      module[index].moduleId = rxObj.bF.id.EID;
 8001672:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <APP_RegisterModule+0xe4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f3c3 22d1 	ubfx	r2, r3, #11, #18
 800167a:	7bfb      	ldrb	r3, [r7, #15]
 800167c:	b2d0      	uxtb	r0, r2
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <APP_RegisterModule+0xf0>)
 8001680:	f240 6124 	movw	r1, #1572	; 0x624
 8001684:	fb01 f303 	mul.w	r3, r1, r3
 8001688:	4413      	add	r3, r2
 800168a:	3308      	adds	r3, #8
 800168c:	4602      	mov	r2, r0
 800168e:	701a      	strb	r2, [r3, #0]

      // Tranmist the 3 status frames
      APP_TransmitStatus1(index);
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fbb0 	bl	8000df8 <APP_TransmitStatus1>
      APP_TransmitStatus2(index);
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fcb6 	bl	800100c <APP_TransmitStatus2>
      APP_TransmitStatus3(index);
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fd5c 	bl	8001160 <APP_TransmitStatus3>
  for(index = 0; index < moduleCount; index++){
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	3301      	adds	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
 80016ae:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <APP_RegisterModule+0xf4>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	7bfa      	ldrb	r2, [r7, #15]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3b9      	bcc.n	800162c <APP_RegisterModule+0x48>
    }
  }
}
 80016b8:	bf00      	nop
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000c588 	.word	0x2000c588
 80016c8:	2000c57c 	.word	0x2000c57c
 80016cc:	080080c0 	.word	0x080080c0
 80016d0:	2000c7bc 	.word	0x2000c7bc
 80016d4:	2000008c 	.word	0x2000008c
 80016d8:	2000c50c 	.word	0x2000c50c

080016dc <APP_DeRegisterAllModules>:

/***************************************************************************************************************
*     A P P _ D e R e g i s t e r A l l M o d u l e s                                  P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_DeRegisterAllModules(void){
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0

  uint8_t index;

  sprintf(tempBuffer,"RX 0x51E De-Register all modules"); serialOut(tempBuffer);
 80016e2:	4910      	ldr	r1, [pc, #64]	; (8001724 <APP_DeRegisterAllModules+0x48>)
 80016e4:	4810      	ldr	r0, [pc, #64]	; (8001728 <APP_DeRegisterAllModules+0x4c>)
 80016e6:	f005 f929 	bl	800693c <siprintf>
 80016ea:	480f      	ldr	r0, [pc, #60]	; (8001728 <APP_DeRegisterAllModules+0x4c>)
 80016ec:	f002 fafe 	bl	8003cec <serialOut>
  for(index = 0; index < moduleCount; index++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	e00c      	b.n	8001710 <APP_DeRegisterAllModules+0x34>
    module[index].moduleId = 0;
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <APP_DeRegisterAllModules+0x50>)
 80016fa:	f240 6124 	movw	r1, #1572	; 0x624
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	4413      	add	r3, r2
 8001704:	3308      	adds	r3, #8
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < moduleCount; index++){
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	3301      	adds	r3, #1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <APP_DeRegisterAllModules+0x54>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	79fa      	ldrb	r2, [r7, #7]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3ed      	bcc.n	80016f6 <APP_DeRegisterAllModules+0x1a>
  }
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08008108 	.word	0x08008108
 8001728:	2000c7bc 	.word	0x2000c7bc
 800172c:	2000008c 	.word	0x2000008c
 8001730:	2000c50c 	.word	0x2000c50c

08001734 <APP_IsolateAllModules>:


/***************************************************************************************************************
*     A P P _ I s o la t e A l l M o d u l e s                                         P A C K   E M U L A T O R
***************************************************************************************************************/
void APP_IsolateAllModules(void){
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  uint8_t index;

  sprintf(tempBuffer,"RX 0x51F Isolate all modules"); serialOut(tempBuffer);
 800173a:	4910      	ldr	r1, [pc, #64]	; (800177c <APP_IsolateAllModules+0x48>)
 800173c:	4810      	ldr	r0, [pc, #64]	; (8001780 <APP_IsolateAllModules+0x4c>)
 800173e:	f005 f8fd 	bl	800693c <siprintf>
 8001742:	480f      	ldr	r0, [pc, #60]	; (8001780 <APP_IsolateAllModules+0x4c>)
 8001744:	f002 fad2 	bl	8003cec <serialOut>
  for(index = 0; index < moduleCount; index++){
 8001748:	2300      	movs	r3, #0
 800174a:	71fb      	strb	r3, [r7, #7]
 800174c:	e00c      	b.n	8001768 <APP_IsolateAllModules+0x34>
    module[index].state = isolated;
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <APP_IsolateAllModules+0x50>)
 8001752:	f240 6124 	movw	r1, #1572	; 0x624
 8001756:	fb01 f303 	mul.w	r3, r1, r3
 800175a:	4413      	add	r3, r2
 800175c:	331c      	adds	r3, #28
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < moduleCount; index++){
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	3301      	adds	r3, #1
 8001766:	71fb      	strb	r3, [r7, #7]
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <APP_IsolateAllModules+0x54>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	429a      	cmp	r2, r3
 8001770:	d3ed      	bcc.n	800174e <APP_IsolateAllModules+0x1a>
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	0800812c 	.word	0x0800812c
 8001780:	2000c7bc 	.word	0x2000c7bc
 8001784:	2000008c 	.word	0x2000008c
 8001788:	2000c50c 	.word	0x2000c50c

0800178c <APP_TestRegisterAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R e g i s t e r A c c e s s                                      P A C K   E M U L A T O R
***************************************************************************************************************/
bool APP_TestRegisterAccess(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8001792:	2300      	movs	r3, #0
 8001794:	71bb      	strb	r3, [r7, #6]

    Nop();
 8001796:	bf00      	nop

    // Verify read/write with different access length
    // Note: registers can be accessed in multiples of bytes
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8001798:	2301      	movs	r3, #1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	e05d      	b.n	800185a <APP_TestRegisterAccess+0xce>
        for (i = 0; i < length; i++) {
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
 80017a4:	e016      	b.n	80017d4 <APP_TestRegisterAccess+0x48>
            txd[i] = rand() & 0x7f; // Bit 31 of Filter objects is not implemented
 80017a6:	f005 f88b 	bl	80068c0 <rand>
 80017aa:	4603      	mov	r3, r0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4a30      	ldr	r2, [pc, #192]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 80017b0:	7812      	ldrb	r2, [r2, #0]
 80017b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017b6:	b2d9      	uxtb	r1, r3
 80017b8:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <APP_TestRegisterAccess+0xe8>)
 80017ba:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 80017bc:	4b2c      	ldr	r3, [pc, #176]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b2d      	ldr	r3, [pc, #180]	; (8001878 <APP_TestRegisterAccess+0xec>)
 80017c4:	21ff      	movs	r1, #255	; 0xff
 80017c6:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b27      	ldr	r3, [pc, #156]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 80017d2:	701a      	strb	r2, [r3, #0]
 80017d4:	4b26      	ldr	r3, [pc, #152]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	79fa      	ldrb	r2, [r7, #7]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d8e3      	bhi.n	80017a6 <APP_TestRegisterAccess+0x1a>
        }

        Nop();
 80017de:	bf00      	nop

        // Write data to registers
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, txd, length);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4a23      	ldr	r2, [pc, #140]	; (8001874 <APP_TestRegisterAccess+0xe8>)
 80017e6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80017ea:	2000      	movs	r0, #0
 80017ec:	f000 fb38 	bl	8001e60 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from registers
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cREGADDR_CiFLTOBJ, rxd, length);
 80017f0:	79fb      	ldrb	r3, [r7, #7]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4a20      	ldr	r2, [pc, #128]	; (8001878 <APP_TestRegisterAccess+0xec>)
 80017f6:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80017fa:	2000      	movs	r0, #0
 80017fc:	f000 fac8 	bl	8001d90 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 8001800:	2300      	movs	r3, #0
 8001802:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 8001804:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e01e      	b.n	800184a <APP_TestRegisterAccess+0xbe>
            good = txd[i] == rxd[i];
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <APP_TestRegisterAccess+0xe8>)
 8001814:	5c9a      	ldrb	r2, [r3, r2]
 8001816:	4b16      	ldr	r3, [pc, #88]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	4619      	mov	r1, r3
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <APP_TestRegisterAccess+0xec>)
 800181e:	5c5b      	ldrb	r3, [r3, r1]
 8001820:	429a      	cmp	r2, r3
 8001822:	bf0c      	ite	eq
 8001824:	2301      	moveq	r3, #1
 8001826:	2300      	movne	r3, #0
 8001828:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d003      	beq.n	800183e <APP_TestRegisterAccess+0xb2>
                Nop();
 8001836:	bf00      	nop
                Nop();
 8001838:	bf00      	nop
                // Data mismatch
                return false;
 800183a:	2300      	movs	r3, #0
 800183c:	e013      	b.n	8001866 <APP_TestRegisterAccess+0xda>
        for (i = 0; i < length; i++) {
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <APP_TestRegisterAccess+0xe4>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	79fa      	ldrb	r2, [r7, #7]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8db      	bhi.n	800180c <APP_TestRegisterAccess+0x80>
    for (length = 1; length <= MAX_DATA_BYTES; length++) {
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	3301      	adds	r3, #1
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b40      	cmp	r3, #64	; 0x40
 800185e:	d99e      	bls.n	800179e <APP_TestRegisterAccess+0x12>
            }
        }
    }
    Nop();
 8001860:	bf00      	nop
    Nop();
 8001862:	bf00      	nop
    return true;
 8001864:	2301      	movs	r3, #1
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000c5c9 	.word	0x2000c5c9
 8001874:	2000c52c 	.word	0x2000c52c
 8001878:	2000c588 	.word	0x2000c588

0800187c <APP_TestRamAccess>:

/***************************************************************************************************************
*     A P P _ T e s t R a m A c c e s s                                                P A C K   E M U L A T O R
***************************************************************************************************************/
bool APP_TestRamAccess(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
    // Variables
    uint8_t length;
    bool good = false;
 8001882:	2300      	movs	r3, #0
 8001884:	71bb      	strb	r3, [r7, #6]

    Nop();
 8001886:	bf00      	nop

    // Verify read/write with different access length
    // Note: RAM can only be accessed in multiples of 4 bytes
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8001888:	2304      	movs	r3, #4
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	e05b      	b.n	8001946 <APP_TestRamAccess+0xca>
        for (i = 0; i < length; i++) {
 800188e:	4b32      	ldr	r3, [pc, #200]	; (8001958 <APP_TestRamAccess+0xdc>)
 8001890:	2200      	movs	r2, #0
 8001892:	701a      	strb	r2, [r3, #0]
 8001894:	e014      	b.n	80018c0 <APP_TestRamAccess+0x44>
            txd[i] = rand() & 0xff;
 8001896:	f005 f813 	bl	80068c0 <rand>
 800189a:	4601      	mov	r1, r0
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <APP_TestRamAccess+0xdc>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	b2c9      	uxtb	r1, r1
 80018a4:	4b2d      	ldr	r3, [pc, #180]	; (800195c <APP_TestRamAccess+0xe0>)
 80018a6:	5499      	strb	r1, [r3, r2]
            rxd[i] = 0xff;
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <APP_TestRamAccess+0xdc>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b2c      	ldr	r3, [pc, #176]	; (8001960 <APP_TestRamAccess+0xe4>)
 80018b0:	21ff      	movs	r1, #255	; 0xff
 80018b2:	5499      	strb	r1, [r3, r2]
        for (i = 0; i < length; i++) {
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <APP_TestRamAccess+0xdc>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b26      	ldr	r3, [pc, #152]	; (8001958 <APP_TestRamAccess+0xdc>)
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <APP_TestRamAccess+0xdc>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d8e5      	bhi.n	8001896 <APP_TestRamAccess+0x1a>
        }

        Nop();
 80018ca:	bf00      	nop

        // Write data to RAM
        DRV_CANFDSPI_WriteByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, txd, length);
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <APP_TestRamAccess+0xe0>)
 80018d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 fac2 	bl	8001e60 <DRV_CANFDSPI_WriteByteArray>

        // Read data back from RAM
        DRV_CANFDSPI_ReadByteArray(DRV_CANFDSPI_INDEX_0, cRAMADDR_START, rxd, length);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4a1f      	ldr	r2, [pc, #124]	; (8001960 <APP_TestRamAccess+0xe4>)
 80018e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 fa52 	bl	8001d90 <DRV_CANFDSPI_ReadByteArray>

        // Verify
        good = false;
 80018ec:	2300      	movs	r3, #0
 80018ee:	71bb      	strb	r3, [r7, #6]
        for (i = 0; i < length; i++) {
 80018f0:	4b19      	ldr	r3, [pc, #100]	; (8001958 <APP_TestRamAccess+0xdc>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	e01e      	b.n	8001936 <APP_TestRamAccess+0xba>
            good = txd[i] == rxd[i];
 80018f8:	4b17      	ldr	r3, [pc, #92]	; (8001958 <APP_TestRamAccess+0xdc>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <APP_TestRamAccess+0xe0>)
 8001900:	5c9a      	ldrb	r2, [r3, r2]
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <APP_TestRamAccess+0xdc>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	4619      	mov	r1, r3
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <APP_TestRamAccess+0xe4>)
 800190a:	5c5b      	ldrb	r3, [r3, r1]
 800190c:	429a      	cmp	r2, r3
 800190e:	bf0c      	ite	eq
 8001910:	2301      	moveq	r3, #1
 8001912:	2300      	movne	r3, #0
 8001914:	71bb      	strb	r3, [r7, #6]

            if (!good) {
 8001916:	79bb      	ldrb	r3, [r7, #6]
 8001918:	f083 0301 	eor.w	r3, r3, #1
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <APP_TestRamAccess+0xae>
                Nop();
 8001922:	bf00      	nop
                Nop();
 8001924:	bf00      	nop

                // Data mismatch
                return false;
 8001926:	2300      	movs	r3, #0
 8001928:	e011      	b.n	800194e <APP_TestRamAccess+0xd2>
        for (i = 0; i < length; i++) {
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <APP_TestRamAccess+0xdc>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	3301      	adds	r3, #1
 8001930:	b2da      	uxtb	r2, r3
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <APP_TestRamAccess+0xdc>)
 8001934:	701a      	strb	r2, [r3, #0]
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <APP_TestRamAccess+0xdc>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	79fa      	ldrb	r2, [r7, #7]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8db      	bhi.n	80018f8 <APP_TestRamAccess+0x7c>
    for (length = 4; length <= MAX_DATA_BYTES; length += 4) {
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	3304      	adds	r3, #4
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	2b40      	cmp	r3, #64	; 0x40
 800194a:	d9a0      	bls.n	800188e <APP_TestRamAccess+0x12>
            }
        }
    }

    return true;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	2000c5c9 	.word	0x2000c5c9
 800195c:	2000c52c 	.word	0x2000c52c
 8001960:	2000c588 	.word	0x2000c588

08001964 <DRV_CANFDSPI_Reset>:
// *****************************************************************************
// *****************************************************************************
// Section: Reset

int8_t DRV_CANFDSPI_Reset(CANFDSPI_MODULE_ID index)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af02      	add	r7, sp, #8
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  uint16_t spiTransferSize = 2;
 800196e:	2302      	movs	r3, #2
 8001970:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) (cINSTRUCTION_RESET << 4);
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <DRV_CANFDSPI_Reset+0x54>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = 0;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <DRV_CANFDSPI_Reset+0x54>)
 800197a:	2200      	movs	r2, #0
 800197c:	705a      	strb	r2, [r3, #1]

  //spiTransferError = DRV_SPI_TransferData(index, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize);


	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <DRV_CANFDSPI_Reset+0x58>)
 8001986:	f003 f935 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	2264      	movs	r2, #100	; 0x64
 800198e:	9200      	str	r2, [sp, #0]
 8001990:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <DRV_CANFDSPI_Reset+0x5c>)
 8001992:	4909      	ldr	r1, [pc, #36]	; (80019b8 <DRV_CANFDSPI_Reset+0x54>)
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <DRV_CANFDSPI_Reset+0x60>)
 8001996:	f004 f925 	bl	8005be4 <HAL_SPI_TransmitReceive>
 800199a:	4603      	mov	r3, r0
 800199c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a4:	4805      	ldr	r0, [pc, #20]	; (80019bc <DRV_CANFDSPI_Reset+0x58>)
 80019a6:	f003 f925 	bl	8004bf4 <HAL_GPIO_WritePin>

  return spiTransferError;
 80019aa:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	2000c5d0 	.word	0x2000c5d0
 80019bc:	40020c00 	.word	0x40020c00
 80019c0:	2000c630 	.word	0x2000c630
 80019c4:	2000c6b0 	.word	0x2000c6b0

080019c8 <DRV_CANFDSPI_ReadByte>:
// *****************************************************************************
// *****************************************************************************
// Section: SPI Access Functions

int8_t DRV_CANFDSPI_ReadByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t *rxd)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af02      	add	r7, sp, #8
 80019ce:	4603      	mov	r3, r0
 80019d0:	603a      	str	r2, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	460b      	mov	r3, r1
 80019d6:	80bb      	strh	r3, [r7, #4]
  uint16_t spiTransferSize = 3;
 80019d8:	2303      	movs	r3, #3
 80019da:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	0a1b      	lsrs	r3, r3, #8
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	3330      	adds	r3, #48	; 0x30
 80019ec:	b2da      	uxtb	r2, r3
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <DRV_CANFDSPI_ReadByte+0x78>)
 80019f0:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <DRV_CANFDSPI_ReadByte+0x78>)
 80019f8:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = 0;
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <DRV_CANFDSPI_ReadByte+0x78>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	709a      	strb	r2, [r3, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <DRV_CANFDSPI_ReadByte+0x7c>)
 8001a08:	f003 f8f4 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a0c:	89fb      	ldrh	r3, [r7, #14]
 8001a0e:	2264      	movs	r2, #100	; 0x64
 8001a10:	9200      	str	r2, [sp, #0]
 8001a12:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <DRV_CANFDSPI_ReadByte+0x80>)
 8001a14:	490a      	ldr	r1, [pc, #40]	; (8001a40 <DRV_CANFDSPI_ReadByte+0x78>)
 8001a16:	480d      	ldr	r0, [pc, #52]	; (8001a4c <DRV_CANFDSPI_ReadByte+0x84>)
 8001a18:	f004 f8e4 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a26:	4807      	ldr	r0, [pc, #28]	; (8001a44 <DRV_CANFDSPI_ReadByte+0x7c>)
 8001a28:	f003 f8e4 	bl	8004bf4 <HAL_GPIO_WritePin>

  // Update data
  *rxd = spiReceiveBuffer[2];
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <DRV_CANFDSPI_ReadByte+0x80>)
 8001a2e:	789a      	ldrb	r2, [r3, #2]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	701a      	strb	r2, [r3, #0]

  return spiTransferError;
 8001a34:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	2000c5d0 	.word	0x2000c5d0
 8001a44:	40020c00 	.word	0x40020c00
 8001a48:	2000c630 	.word	0x2000c630
 8001a4c:	2000c6b0 	.word	0x2000c6b0

08001a50 <DRV_CANFDSPI_WriteByte>:

int8_t DRV_CANFDSPI_WriteByte(CANFDSPI_MODULE_ID index, uint16_t address, uint8_t txd)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	80bb      	strh	r3, [r7, #4]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	71bb      	strb	r3, [r7, #6]
  uint16_t spiTransferSize = 3;
 8001a62:	2303      	movs	r3, #3
 8001a64:	81fb      	strh	r3, [r7, #14]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001a66:	88bb      	ldrh	r3, [r7, #4]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	3320      	adds	r3, #32
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001a7a:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001a7c:	88bb      	ldrh	r3, [r7, #4]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001a82:	705a      	strb	r2, [r3, #1]
  spiTransmitBuffer[2] = txd;
 8001a84:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001a86:	79bb      	ldrb	r3, [r7, #6]
 8001a88:	7093      	strb	r3, [r2, #2]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a90:	480d      	ldr	r0, [pc, #52]	; (8001ac8 <DRV_CANFDSPI_WriteByte+0x78>)
 8001a92:	f003 f8af 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001a96:	89fb      	ldrh	r3, [r7, #14]
 8001a98:	2264      	movs	r2, #100	; 0x64
 8001a9a:	9200      	str	r2, [sp, #0]
 8001a9c:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <DRV_CANFDSPI_WriteByte+0x7c>)
 8001a9e:	4909      	ldr	r1, [pc, #36]	; (8001ac4 <DRV_CANFDSPI_WriteByte+0x74>)
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <DRV_CANFDSPI_WriteByte+0x80>)
 8001aa2:	f004 f89f 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ab0:	4805      	ldr	r0, [pc, #20]	; (8001ac8 <DRV_CANFDSPI_WriteByte+0x78>)
 8001ab2:	f003 f89f 	bl	8004bf4 <HAL_GPIO_WritePin>

  return spiTransferError;
 8001ab6:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000c5d0 	.word	0x2000c5d0
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	2000c630 	.word	0x2000c630
 8001ad0:	2000c6b0 	.word	0x2000c6b0

08001ad4 <DRV_CANFDSPI_ReadWord>:

int8_t DRV_CANFDSPI_ReadWord(CANFDSPI_MODULE_ID index, uint16_t address, uint32_t *rxd)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	4603      	mov	r3, r0
 8001adc:	603a      	str	r2, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 6;
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001ae8:	88bb      	ldrh	r3, [r7, #4]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3330      	adds	r3, #48	; 0x30
 8001af8:	b2da      	uxtb	r2, r3
 8001afa:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <DRV_CANFDSPI_ReadWord+0xac>)
 8001afc:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001afe:	88bb      	ldrh	r3, [r7, #4]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	4b1f      	ldr	r3, [pc, #124]	; (8001b80 <DRV_CANFDSPI_ReadWord+0xac>)
 8001b04:	705a      	strb	r2, [r3, #1]

  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b0c:	481d      	ldr	r0, [pc, #116]	; (8001b84 <DRV_CANFDSPI_ReadWord+0xb0>)
 8001b0e:	f003 f871 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001b12:	8abb      	ldrh	r3, [r7, #20]
 8001b14:	2264      	movs	r2, #100	; 0x64
 8001b16:	9200      	str	r2, [sp, #0]
 8001b18:	4a1b      	ldr	r2, [pc, #108]	; (8001b88 <DRV_CANFDSPI_ReadWord+0xb4>)
 8001b1a:	4919      	ldr	r1, [pc, #100]	; (8001b80 <DRV_CANFDSPI_ReadWord+0xac>)
 8001b1c:	481b      	ldr	r0, [pc, #108]	; (8001b8c <DRV_CANFDSPI_ReadWord+0xb8>)
 8001b1e:	f004 f861 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001b22:	4603      	mov	r3, r0
 8001b24:	74fb      	strb	r3, [r7, #19]
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001b26:	2201      	movs	r2, #1
 8001b28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b2c:	4815      	ldr	r0, [pc, #84]	; (8001b84 <DRV_CANFDSPI_ReadWord+0xb0>)
 8001b2e:	f003 f861 	bl	8004bf4 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 8001b32:	7cfb      	ldrb	r3, [r7, #19]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d002      	beq.n	8001b3e <DRV_CANFDSPI_ReadWord+0x6a>
      return spiTransferError;
 8001b38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b3c:	e01c      	b.n	8001b78 <DRV_CANFDSPI_ReadWord+0xa4>
  }

  // Update data
  *rxd = 0;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001b44:	2302      	movs	r3, #2
 8001b46:	75fb      	strb	r3, [r7, #23]
 8001b48:	e011      	b.n	8001b6e <DRV_CANFDSPI_ReadWord+0x9a>
      x = (uint32_t) spiReceiveBuffer[i];
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <DRV_CANFDSPI_ReadWord+0xb4>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	7dfb      	ldrb	r3, [r7, #23]
 8001b58:	3b02      	subs	r3, #2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b62:	441a      	add	r2, r3
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	601a      	str	r2, [r3, #0]
  for (i = 2; i < 6; i++) {
 8001b68:	7dfb      	ldrb	r3, [r7, #23]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d9ea      	bls.n	8001b4a <DRV_CANFDSPI_ReadWord+0x76>
  }

  return spiTransferError;
 8001b74:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	2000c5d0 	.word	0x2000c5d0
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	2000c630 	.word	0x2000c630
 8001b8c:	2000c6b0 	.word	0x2000c6b0

08001b90 <DRV_CANFDSPI_WriteWord>:

int8_t DRV_CANFDSPI_WriteWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t txd)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	4603      	mov	r3, r0
 8001b98:	603a      	str	r2, [r7, #0]
 8001b9a:	71fb      	strb	r3, [r7, #7]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint16_t spiTransferSize = 6;
 8001ba0:	2306      	movs	r3, #6
 8001ba2:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001ba4:	88bb      	ldrh	r3, [r7, #4]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	3320      	adds	r3, #32
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <DRV_CANFDSPI_WriteWord+0x90>)
 8001bb8:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001bba:	88bb      	ldrh	r3, [r7, #4]
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <DRV_CANFDSPI_WriteWord+0x90>)
 8001bc0:	705a      	strb	r2, [r3, #1]

  // Split word into 4 bytes and add them to buffer
  for (i = 0; i < 4; i++) {
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e00b      	b.n	8001be0 <DRV_CANFDSPI_WriteWord+0x50>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	40da      	lsrs	r2, r3
 8001bd0:	7bfb      	ldrb	r3, [r7, #15]
 8001bd2:	3302      	adds	r3, #2
 8001bd4:	b2d1      	uxtb	r1, r2
 8001bd6:	4a12      	ldr	r2, [pc, #72]	; (8001c20 <DRV_CANFDSPI_WriteWord+0x90>)
 8001bd8:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 4; i++) {
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d9f0      	bls.n	8001bc8 <DRV_CANFDSPI_WriteWord+0x38>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bec:	480d      	ldr	r0, [pc, #52]	; (8001c24 <DRV_CANFDSPI_WriteWord+0x94>)
 8001bee:	f003 f801 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001bf2:	89bb      	ldrh	r3, [r7, #12]
 8001bf4:	2264      	movs	r2, #100	; 0x64
 8001bf6:	9200      	str	r2, [sp, #0]
 8001bf8:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <DRV_CANFDSPI_WriteWord+0x98>)
 8001bfa:	4909      	ldr	r1, [pc, #36]	; (8001c20 <DRV_CANFDSPI_WriteWord+0x90>)
 8001bfc:	480b      	ldr	r0, [pc, #44]	; (8001c2c <DRV_CANFDSPI_WriteWord+0x9c>)
 8001bfe:	f003 fff1 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001c02:	4603      	mov	r3, r0
 8001c04:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001c06:	2201      	movs	r2, #1
 8001c08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c0c:	4805      	ldr	r0, [pc, #20]	; (8001c24 <DRV_CANFDSPI_WriteWord+0x94>)
 8001c0e:	f002 fff1 	bl	8004bf4 <HAL_GPIO_WritePin>

  return spiTransferError;
 8001c12:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	2000c5d0 	.word	0x2000c5d0
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	2000c630 	.word	0x2000c630
 8001c2c:	2000c6b0 	.word	0x2000c6b0

08001c30 <DRV_CANFDSPI_ReadHalfWord>:

int8_t DRV_CANFDSPI_ReadHalfWord(CANFDSPI_MODULE_ID index, uint16_t address, uint16_t *rxd)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	4603      	mov	r3, r0
 8001c38:	603a      	str	r2, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	80bb      	strh	r3, [r7, #4]
  uint8_t i;
  uint32_t x;
  uint16_t spiTransferSize = 4;
 8001c40:	2304      	movs	r3, #4
 8001c42:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001c44:	88bb      	ldrh	r3, [r7, #4]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f003 030f 	and.w	r3, r3, #15
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	3330      	adds	r3, #48	; 0x30
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8001c58:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001c5a:	88bb      	ldrh	r3, [r7, #4]
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8001c60:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c68:	481e      	ldr	r0, [pc, #120]	; (8001ce4 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 8001c6a:	f002 ffc3 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001c6e:	8abb      	ldrh	r3, [r7, #20]
 8001c70:	2264      	movs	r2, #100	; 0x64
 8001c72:	9200      	str	r2, [sp, #0]
 8001c74:	4a1c      	ldr	r2, [pc, #112]	; (8001ce8 <DRV_CANFDSPI_ReadHalfWord+0xb8>)
 8001c76:	491a      	ldr	r1, [pc, #104]	; (8001ce0 <DRV_CANFDSPI_ReadHalfWord+0xb0>)
 8001c78:	481c      	ldr	r0, [pc, #112]	; (8001cec <DRV_CANFDSPI_ReadHalfWord+0xbc>)
 8001c7a:	f003 ffb3 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c88:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <DRV_CANFDSPI_ReadHalfWord+0xb4>)
 8001c8a:	f002 ffb3 	bl	8004bf4 <HAL_GPIO_WritePin>

  if (spiTransferError != HAL_OK) {
 8001c8e:	7cfb      	ldrb	r3, [r7, #19]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <DRV_CANFDSPI_ReadHalfWord+0x6a>
      return spiTransferError;
 8001c94:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c98:	e01e      	b.n	8001cd8 <DRV_CANFDSPI_ReadHalfWord+0xa8>
  }

  // Update data
  *rxd = 0;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	75fb      	strb	r3, [r7, #23]
 8001ca4:	e013      	b.n	8001cce <DRV_CANFDSPI_ReadHalfWord+0x9e>
      x = (uint32_t) spiReceiveBuffer[i];
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	4a0f      	ldr	r2, [pc, #60]	; (8001ce8 <DRV_CANFDSPI_ReadHalfWord+0xb8>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	60fb      	str	r3, [r7, #12]
      *rxd += x << ((i - 2)*8);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	7dfb      	ldrb	r3, [r7, #23]
 8001cb4:	3b02      	subs	r3, #2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	68f9      	ldr	r1, [r7, #12]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	801a      	strh	r2, [r3, #0]
  for (i = 2; i < 4; i++) {
 8001cc8:	7dfb      	ldrb	r3, [r7, #23]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	75fb      	strb	r3, [r7, #23]
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d9e8      	bls.n	8001ca6 <DRV_CANFDSPI_ReadHalfWord+0x76>
  }

  return spiTransferError;
 8001cd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	2000c5d0 	.word	0x2000c5d0
 8001ce4:	40020c00 	.word	0x40020c00
 8001ce8:	2000c630 	.word	0x2000c630
 8001cec:	2000c6b0 	.word	0x2000c6b0

08001cf0 <DRV_CANFDSPI_WriteHalfWord>:

int8_t DRV_CANFDSPI_WriteHalfWord(CANFDSPI_MODULE_ID index, uint16_t address,
        uint16_t txd)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	71fb      	strb	r3, [r7, #7]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	80bb      	strh	r3, [r7, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  uint16_t spiTransferSize = 4;
 8001d02:	2304      	movs	r3, #4
 8001d04:	81bb      	strh	r3, [r7, #12]
  HAL_StatusTypeDef spiTransferError;

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001d06:	88bb      	ldrh	r3, [r7, #4]
 8001d08:	0a1b      	lsrs	r3, r3, #8
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	3320      	adds	r3, #32
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 8001d1a:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001d1c:	88bb      	ldrh	r3, [r7, #4]
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 8001d22:	705a      	strb	r2, [r3, #1]

  // Split word into 2 bytes and add them to buffer
  for (i = 0; i < 2; i++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	73fb      	strb	r3, [r7, #15]
 8001d28:	e00b      	b.n	8001d42 <DRV_CANFDSPI_WriteHalfWord+0x52>
      spiTransmitBuffer[i + 2] = (uint8_t) ((txd >> (i * 8)) & 0xFF);
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	00db      	lsls	r3, r3, #3
 8001d30:	411a      	asrs	r2, r3
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	3302      	adds	r3, #2
 8001d36:	b2d1      	uxtb	r1, r2
 8001d38:	4a11      	ldr	r2, [pc, #68]	; (8001d80 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 8001d3a:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < 2; i++) {
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d9f0      	bls.n	8001d2a <DRV_CANFDSPI_WriteHalfWord+0x3a>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d4e:	480d      	ldr	r0, [pc, #52]	; (8001d84 <DRV_CANFDSPI_WriteHalfWord+0x94>)
 8001d50:	f002 ff50 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001d54:	89bb      	ldrh	r3, [r7, #12]
 8001d56:	2264      	movs	r2, #100	; 0x64
 8001d58:	9200      	str	r2, [sp, #0]
 8001d5a:	4a0b      	ldr	r2, [pc, #44]	; (8001d88 <DRV_CANFDSPI_WriteHalfWord+0x98>)
 8001d5c:	4908      	ldr	r1, [pc, #32]	; (8001d80 <DRV_CANFDSPI_WriteHalfWord+0x90>)
 8001d5e:	480b      	ldr	r0, [pc, #44]	; (8001d8c <DRV_CANFDSPI_WriteHalfWord+0x9c>)
 8001d60:	f003 ff40 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001d64:	4603      	mov	r3, r0
 8001d66:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d6e:	4805      	ldr	r0, [pc, #20]	; (8001d84 <DRV_CANFDSPI_WriteHalfWord+0x94>)
 8001d70:	f002 ff40 	bl	8004bf4 <HAL_GPIO_WritePin>


    return spiTransferError;
 8001d74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	2000c5d0 	.word	0x2000c5d0
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	2000c630 	.word	0x2000c630
 8001d8c:	2000c6b0 	.word	0x2000c6b0

08001d90 <DRV_CANFDSPI_ReadByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *rxd, uint16_t nBytes)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b088      	sub	sp, #32
 8001d94:	af02      	add	r7, sp, #8
 8001d96:	60ba      	str	r2, [r7, #8]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	73fb      	strb	r3, [r7, #15]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	81bb      	strh	r3, [r7, #12]
 8001da2:	4613      	mov	r3, r2
 8001da4:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	3302      	adds	r3, #2
 8001daa:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001dac:	8abb      	ldrh	r3, [r7, #20]
 8001dae:	2b60      	cmp	r3, #96	; 0x60
 8001db0:	d902      	bls.n	8001db8 <DRV_CANFDSPI_ReadByteArray+0x28>
      return -1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e046      	b.n	8001e46 <DRV_CANFDSPI_ReadByteArray+0xb6>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF));
 8001db8:	89bb      	ldrh	r3, [r7, #12]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f003 030f 	and.w	r3, r3, #15
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3330      	adds	r3, #48	; 0x30
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 8001dcc:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001dce:	89bb      	ldrh	r3, [r7, #12]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 8001dd4:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	82fb      	strh	r3, [r7, #22]
 8001dda:	e006      	b.n	8001dea <DRV_CANFDSPI_ReadByteArray+0x5a>
      spiTransmitBuffer[i] = 0;
 8001ddc:	8afb      	ldrh	r3, [r7, #22]
 8001dde:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 8001de0:	2100      	movs	r1, #0
 8001de2:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 8001de4:	8afb      	ldrh	r3, [r7, #22]
 8001de6:	3301      	adds	r3, #1
 8001de8:	82fb      	strh	r3, [r7, #22]
 8001dea:	8afa      	ldrh	r2, [r7, #22]
 8001dec:	8abb      	ldrh	r3, [r7, #20]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d3f4      	bcc.n	8001ddc <DRV_CANFDSPI_ReadByteArray+0x4c>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001df8:	4816      	ldr	r0, [pc, #88]	; (8001e54 <DRV_CANFDSPI_ReadByteArray+0xc4>)
 8001dfa:	f002 fefb 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001dfe:	8abb      	ldrh	r3, [r7, #20]
 8001e00:	2264      	movs	r2, #100	; 0x64
 8001e02:	9200      	str	r2, [sp, #0]
 8001e04:	4a14      	ldr	r2, [pc, #80]	; (8001e58 <DRV_CANFDSPI_ReadByteArray+0xc8>)
 8001e06:	4912      	ldr	r1, [pc, #72]	; (8001e50 <DRV_CANFDSPI_ReadByteArray+0xc0>)
 8001e08:	4814      	ldr	r0, [pc, #80]	; (8001e5c <DRV_CANFDSPI_ReadByteArray+0xcc>)
 8001e0a:	f003 feeb 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e18:	480e      	ldr	r0, [pc, #56]	; (8001e54 <DRV_CANFDSPI_ReadByteArray+0xc4>)
 8001e1a:	f002 feeb 	bl	8004bf4 <HAL_GPIO_WritePin>


  // Update data
  for (i = 0; i < nBytes; i++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	82fb      	strh	r3, [r7, #22]
 8001e22:	e00a      	b.n	8001e3a <DRV_CANFDSPI_ReadByteArray+0xaa>
      rxd[i] = spiReceiveBuffer[i + 2];
 8001e24:	8afb      	ldrh	r3, [r7, #22]
 8001e26:	1c9a      	adds	r2, r3, #2
 8001e28:	8afb      	ldrh	r3, [r7, #22]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	490a      	ldr	r1, [pc, #40]	; (8001e58 <DRV_CANFDSPI_ReadByteArray+0xc8>)
 8001e30:	5c8a      	ldrb	r2, [r1, r2]
 8001e32:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < nBytes; i++) {
 8001e34:	8afb      	ldrh	r3, [r7, #22]
 8001e36:	3301      	adds	r3, #1
 8001e38:	82fb      	strh	r3, [r7, #22]
 8001e3a:	8afa      	ldrh	r2, [r7, #22]
 8001e3c:	88fb      	ldrh	r3, [r7, #6]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d3f0      	bcc.n	8001e24 <DRV_CANFDSPI_ReadByteArray+0x94>
  }

  return spiTransferError;
 8001e42:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000c5d0 	.word	0x2000c5d0
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	2000c630 	.word	0x2000c630
 8001e5c:	2000c6b0 	.word	0x2000c6b0

08001e60 <DRV_CANFDSPI_WriteByteArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_WriteByteArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint8_t *txd, uint16_t nBytes)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b088      	sub	sp, #32
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60ba      	str	r2, [r7, #8]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	73fb      	strb	r3, [r7, #15]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	81bb      	strh	r3, [r7, #12]
 8001e72:	4613      	mov	r3, r2
 8001e74:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint16_t spiTransferSize = nBytes + 2;
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	3302      	adds	r3, #2
 8001e7a:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001e7c:	8abb      	ldrh	r3, [r7, #20]
 8001e7e:	2b60      	cmp	r3, #96	; 0x60
 8001e80:	d902      	bls.n	8001e88 <DRV_CANFDSPI_WriteByteArray+0x28>
      return -1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	e038      	b.n	8001efa <DRV_CANFDSPI_WriteByteArray+0x9a>
  }

  // Compose command
  spiTransmitBuffer[0] = (uint8_t) ((cINSTRUCTION_WRITE << 4) + ((address >> 8) & 0xF));
 8001e88:	89bb      	ldrh	r3, [r7, #12]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 030f 	and.w	r3, r3, #15
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3320      	adds	r3, #32
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8001e9c:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = (uint8_t) (address & 0xFF);
 8001e9e:	89bb      	ldrh	r3, [r7, #12]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8001ea4:	705a      	strb	r2, [r3, #1]

  // Add data
  for (i = 0; i < nBytes; i++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	82fb      	strh	r3, [r7, #22]
 8001eaa:	e00a      	b.n	8001ec2 <DRV_CANFDSPI_WriteByteArray+0x62>
      spiTransmitBuffer[i+2] = txd[i];
 8001eac:	8afb      	ldrh	r3, [r7, #22]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	441a      	add	r2, r3
 8001eb2:	8afb      	ldrh	r3, [r7, #22]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	7811      	ldrb	r1, [r2, #0]
 8001eb8:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8001eba:	54d1      	strb	r1, [r2, r3]
  for (i = 0; i < nBytes; i++) {
 8001ebc:	8afb      	ldrh	r3, [r7, #22]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	82fb      	strh	r3, [r7, #22]
 8001ec2:	8afa      	ldrh	r2, [r7, #22]
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d3f0      	bcc.n	8001eac <DRV_CANFDSPI_WriteByteArray+0x4c>
  }
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ed0:	480d      	ldr	r0, [pc, #52]	; (8001f08 <DRV_CANFDSPI_WriteByteArray+0xa8>)
 8001ed2:	f002 fe8f 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001ed6:	8abb      	ldrh	r3, [r7, #20]
 8001ed8:	2264      	movs	r2, #100	; 0x64
 8001eda:	9200      	str	r2, [sp, #0]
 8001edc:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <DRV_CANFDSPI_WriteByteArray+0xac>)
 8001ede:	4909      	ldr	r1, [pc, #36]	; (8001f04 <DRV_CANFDSPI_WriteByteArray+0xa4>)
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <DRV_CANFDSPI_WriteByteArray+0xb0>)
 8001ee2:	f003 fe7f 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	74fb      	strb	r3, [r7, #19]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001eea:	2201      	movs	r2, #1
 8001eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <DRV_CANFDSPI_WriteByteArray+0xa8>)
 8001ef2:	f002 fe7f 	bl	8004bf4 <HAL_GPIO_WritePin>


  return spiTransferError;
 8001ef6:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000c5d0 	.word	0x2000c5d0
 8001f08:	40020c00 	.word	0x40020c00
 8001f0c:	2000c630 	.word	0x2000c630
 8001f10:	2000c6b0 	.word	0x2000c6b0

08001f14 <DRV_CANFDSPI_ReadWordArray>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReadWordArray(CANFDSPI_MODULE_ID index, uint16_t address,
        uint32_t *rxd, uint16_t nWords)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	; 0x28
 8001f18:	af02      	add	r7, sp, #8
 8001f1a:	60ba      	str	r2, [r7, #8]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	460b      	mov	r3, r1
 8001f24:	81bb      	strh	r3, [r7, #12]
 8001f26:	4613      	mov	r3, r2
 8001f28:	80fb      	strh	r3, [r7, #6]
  uint16_t i, j, n;
  REG_t w;
  uint16_t spiTransferSize = nWords * 4 + 2;
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	3302      	adds	r3, #2
 8001f32:	833b      	strh	r3, [r7, #24]
  HAL_StatusTypeDef spiTransferError;

  // Validate that length of array is sufficient to hold requested number of bytes
  if (spiTransferSize > sizeof(spiTransmitBuffer)) {
 8001f34:	8b3b      	ldrh	r3, [r7, #24]
 8001f36:	2b60      	cmp	r3, #96	; 0x60
 8001f38:	d902      	bls.n	8001f40 <DRV_CANFDSPI_ReadWordArray+0x2c>
      return -1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e062      	b.n	8002006 <DRV_CANFDSPI_ReadWordArray+0xf2>
  }

  // Compose command
  spiTransmitBuffer[0] = (cINSTRUCTION_READ << 4) + ((address >> 8) & 0xF);
 8001f40:	89bb      	ldrh	r3, [r7, #12]
 8001f42:	0a1b      	lsrs	r3, r3, #8
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3330      	adds	r3, #48	; 0x30
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b2f      	ldr	r3, [pc, #188]	; (8002010 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8001f54:	701a      	strb	r2, [r3, #0]
  spiTransmitBuffer[1] = address & 0xFF;
 8001f56:	89bb      	ldrh	r3, [r7, #12]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b2d      	ldr	r3, [pc, #180]	; (8002010 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8001f5c:	705a      	strb	r2, [r3, #1]

  // Clear data
  for (i = 2; i < spiTransferSize; i++) {
 8001f5e:	2302      	movs	r3, #2
 8001f60:	83fb      	strh	r3, [r7, #30]
 8001f62:	e006      	b.n	8001f72 <DRV_CANFDSPI_ReadWordArray+0x5e>
      spiTransmitBuffer[i] = 0;
 8001f64:	8bfb      	ldrh	r3, [r7, #30]
 8001f66:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8001f68:	2100      	movs	r1, #0
 8001f6a:	54d1      	strb	r1, [r2, r3]
  for (i = 2; i < spiTransferSize; i++) {
 8001f6c:	8bfb      	ldrh	r3, [r7, #30]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	83fb      	strh	r3, [r7, #30]
 8001f72:	8bfa      	ldrh	r2, [r7, #30]
 8001f74:	8b3b      	ldrh	r3, [r7, #24]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d3f4      	bcc.n	8001f64 <DRV_CANFDSPI_ReadWordArray+0x50>
  }

	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_RESET);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f80:	4824      	ldr	r0, [pc, #144]	; (8002014 <DRV_CANFDSPI_ReadWordArray+0x100>)
 8001f82:	f002 fe37 	bl	8004bf4 <HAL_GPIO_WritePin>
  spiTransferError = HAL_SPI_TransmitReceive(&hspi1, spiTransmitBuffer, spiReceiveBuffer, spiTransferSize, SPI_TIMEOUT);
 8001f86:	8b3b      	ldrh	r3, [r7, #24]
 8001f88:	2264      	movs	r2, #100	; 0x64
 8001f8a:	9200      	str	r2, [sp, #0]
 8001f8c:	4a22      	ldr	r2, [pc, #136]	; (8002018 <DRV_CANFDSPI_ReadWordArray+0x104>)
 8001f8e:	4920      	ldr	r1, [pc, #128]	; (8002010 <DRV_CANFDSPI_ReadWordArray+0xfc>)
 8001f90:	4822      	ldr	r0, [pc, #136]	; (800201c <DRV_CANFDSPI_ReadWordArray+0x108>)
 8001f92:	f003 fe27 	bl	8005be4 <HAL_SPI_TransmitReceive>
 8001f96:	4603      	mov	r3, r0
 8001f98:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port,  CAN_CS_Pin , GPIO_PIN_SET);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa0:	481c      	ldr	r0, [pc, #112]	; (8002014 <DRV_CANFDSPI_ReadWordArray+0x100>)
 8001fa2:	f002 fe27 	bl	8004bf4 <HAL_GPIO_WritePin>

  if (spiTransferError) {
 8001fa6:	7dfb      	ldrb	r3, [r7, #23]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <DRV_CANFDSPI_ReadWordArray+0x9e>
      return spiTransferError;
 8001fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001fb0:	e029      	b.n	8002006 <DRV_CANFDSPI_ReadWordArray+0xf2>
  }

  // Convert Byte array to Word array
  n = 2;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	837b      	strh	r3, [r7, #26]
  for (i = 0; i < nWords; i++) {
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	83fb      	strh	r3, [r7, #30]
 8001fba:	e01e      	b.n	8001ffa <DRV_CANFDSPI_ReadWordArray+0xe6>
      w.word = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
      for (j = 0; j < 4; j++, n++) {
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	83bb      	strh	r3, [r7, #28]
 8001fc4:	e00d      	b.n	8001fe2 <DRV_CANFDSPI_ReadWordArray+0xce>
          w.byte[j] = spiReceiveBuffer[n];
 8001fc6:	8b7a      	ldrh	r2, [r7, #26]
 8001fc8:	8bbb      	ldrh	r3, [r7, #28]
 8001fca:	4913      	ldr	r1, [pc, #76]	; (8002018 <DRV_CANFDSPI_ReadWordArray+0x104>)
 8001fcc:	5c8a      	ldrb	r2, [r1, r2]
 8001fce:	3320      	adds	r3, #32
 8001fd0:	443b      	add	r3, r7
 8001fd2:	f803 2c10 	strb.w	r2, [r3, #-16]
      for (j = 0; j < 4; j++, n++) {
 8001fd6:	8bbb      	ldrh	r3, [r7, #28]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	83bb      	strh	r3, [r7, #28]
 8001fdc:	8b7b      	ldrh	r3, [r7, #26]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	837b      	strh	r3, [r7, #26]
 8001fe2:	8bbb      	ldrh	r3, [r7, #28]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d9ee      	bls.n	8001fc6 <DRV_CANFDSPI_ReadWordArray+0xb2>
      }
      rxd[i] = w.word;
 8001fe8:	8bfb      	ldrh	r3, [r7, #30]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	4413      	add	r3, r2
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < nWords; i++) {
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	83fb      	strh	r3, [r7, #30]
 8001ffa:	8bfa      	ldrh	r2, [r7, #30]
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3dc      	bcc.n	8001fbc <DRV_CANFDSPI_ReadWordArray+0xa8>
  }

  return spiTransferError;
 8002002:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3720      	adds	r7, #32
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000c5d0 	.word	0x2000c5d0
 8002014:	40020c00 	.word	0x40020c00
 8002018:	2000c630 	.word	0x2000c630
 800201c:	2000c6b0 	.word	0x2000c6b0

08002020 <DRV_CANFDSPI_Configure>:
// *****************************************************************************
// *****************************************************************************
// Section: Configuration

int8_t DRV_CANFDSPI_Configure(CANFDSPI_MODULE_ID index, CAN_CONFIG* config)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  REG_CiCON ciCon;
  int8_t spiTransferError = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]

  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <DRV_CANFDSPI_Configure+0x118>)
 8002032:	60bb      	str	r3, [r7, #8]

  ciCon.bF.DNetFilterCount = config->DNetFilterCount;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800203c:	b2da      	uxtb	r2, r3
 800203e:	7a3b      	ldrb	r3, [r7, #8]
 8002040:	f362 0304 	bfi	r3, r2, #0, #5
 8002044:	723b      	strb	r3, [r7, #8]
  ciCon.bF.IsoCrcEnable = config->IsoCrcEnable;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	7a3b      	ldrb	r3, [r7, #8]
 8002052:	f362 1345 	bfi	r3, r2, #5, #1
 8002056:	723b      	strb	r3, [r7, #8]
  ciCon.bF.ProtocolExceptionEventDisable = config->ProtocolExpectionEventDisable;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	7a3b      	ldrb	r3, [r7, #8]
 8002064:	f362 1386 	bfi	r3, r2, #6, #1
 8002068:	723b      	strb	r3, [r7, #8]
  ciCon.bF.WakeUpFilterEnable = config->WakeUpFilterEnable;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002072:	b2da      	uxtb	r2, r3
 8002074:	7a7b      	ldrb	r3, [r7, #9]
 8002076:	f362 0300 	bfi	r3, r2, #0, #1
 800207a:	727b      	strb	r3, [r7, #9]
  ciCon.bF.WakeUpFilterTime = config->WakeUpFilterTime;
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	785b      	ldrb	r3, [r3, #1]
 8002080:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002084:	b2da      	uxtb	r2, r3
 8002086:	7a7b      	ldrb	r3, [r7, #9]
 8002088:	f362 0342 	bfi	r3, r2, #1, #2
 800208c:	727b      	strb	r3, [r7, #9]
  ciCon.bF.BitRateSwitchDisable = config->BitRateSwitchDisable;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	785b      	ldrb	r3, [r3, #1]
 8002092:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	7a7b      	ldrb	r3, [r7, #9]
 800209a:	f362 1304 	bfi	r3, r2, #4, #1
 800209e:	727b      	strb	r3, [r7, #9]
  ciCon.bF.RestrictReTxAttempts = config->RestrictReTxAttempts;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	7abb      	ldrb	r3, [r7, #10]
 80020ac:	f362 0300 	bfi	r3, r2, #0, #1
 80020b0:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.EsiInGatewayMode = config->EsiInGatewayMode;
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	785b      	ldrb	r3, [r3, #1]
 80020b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	7abb      	ldrb	r3, [r7, #10]
 80020be:	f362 0341 	bfi	r3, r2, #1, #1
 80020c2:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.SystemErrorToListenOnly = config->SystemErrorToListenOnly;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	785b      	ldrb	r3, [r3, #1]
 80020c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	7abb      	ldrb	r3, [r7, #10]
 80020d0:	f362 0382 	bfi	r3, r2, #2, #1
 80020d4:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.StoreInTEF = config->StoreInTEF;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	785b      	ldrb	r3, [r3, #1]
 80020da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	f362 03c3 	bfi	r3, r2, #3, #1
 80020e6:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TXQEnable = config->TXQEnable;
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	785b      	ldrb	r3, [r3, #1]
 80020ec:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	7abb      	ldrb	r3, [r7, #10]
 80020f4:	f362 1304 	bfi	r3, r2, #4, #1
 80020f8:	72bb      	strb	r3, [r7, #10]
  ciCon.bF.TxBandWidthSharing = config->TxBandWidthSharing;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	789b      	ldrb	r3, [r3, #2]
 80020fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002102:	b2da      	uxtb	r2, r3
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	f362 1307 	bfi	r3, r2, #4, #4
 800210a:	72fb      	strb	r3, [r7, #11]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiCON, ciCon.word);
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	79fb      	ldrb	r3, [r7, #7]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fd3c 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 800211c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <DRV_CANFDSPI_Configure+0x10a>
      return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
 8002128:	e001      	b.n	800212e <DRV_CANFDSPI_Configure+0x10e>
  }

  return spiTransferError;
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	04980760 	.word	0x04980760

0800213c <DRV_CANFDSPI_ConfigureObjectReset>:

int8_t DRV_CANFDSPI_ConfigureObjectReset(CAN_CONFIG* config)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  REG_CiCON ciCon;
  ciCon.word = canControlResetValues[cREGADDR_CiCON / 4];
 8002144:	4b3a      	ldr	r3, [pc, #232]	; (8002230 <DRV_CANFDSPI_ConfigureObjectReset+0xf4>)
 8002146:	60fb      	str	r3, [r7, #12]

  config->DNetFilterCount = ciCon.bF.DNetFilterCount;
 8002148:	7b3b      	ldrb	r3, [r7, #12]
 800214a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800214e:	b2d9      	uxtb	r1, r3
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	7813      	ldrb	r3, [r2, #0]
 8002154:	f361 0304 	bfi	r3, r1, #0, #5
 8002158:	7013      	strb	r3, [r2, #0]
  config->IsoCrcEnable = ciCon.bF.IsoCrcEnable;
 800215a:	7b3b      	ldrb	r3, [r7, #12]
 800215c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002160:	b2d9      	uxtb	r1, r3
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	7813      	ldrb	r3, [r2, #0]
 8002166:	f361 1345 	bfi	r3, r1, #5, #1
 800216a:	7013      	strb	r3, [r2, #0]
  config->ProtocolExpectionEventDisable = ciCon.bF.ProtocolExceptionEventDisable;
 800216c:	7b3b      	ldrb	r3, [r7, #12]
 800216e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002172:	b2d9      	uxtb	r1, r3
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	7813      	ldrb	r3, [r2, #0]
 8002178:	f361 1386 	bfi	r3, r1, #6, #1
 800217c:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterEnable = ciCon.bF.WakeUpFilterEnable;
 800217e:	7b7b      	ldrb	r3, [r7, #13]
 8002180:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002184:	b2d9      	uxtb	r1, r3
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	7813      	ldrb	r3, [r2, #0]
 800218a:	f361 13c7 	bfi	r3, r1, #7, #1
 800218e:	7013      	strb	r3, [r2, #0]
  config->WakeUpFilterTime = ciCon.bF.WakeUpFilterTime;
 8002190:	7b7b      	ldrb	r3, [r7, #13]
 8002192:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002196:	b2d9      	uxtb	r1, r3
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	7853      	ldrb	r3, [r2, #1]
 800219c:	f361 0301 	bfi	r3, r1, #0, #2
 80021a0:	7053      	strb	r3, [r2, #1]
  config->BitRateSwitchDisable = ciCon.bF.BitRateSwitchDisable;
 80021a2:	7b7b      	ldrb	r3, [r7, #13]
 80021a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021a8:	b2d9      	uxtb	r1, r3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	7853      	ldrb	r3, [r2, #1]
 80021ae:	f361 0382 	bfi	r3, r1, #2, #1
 80021b2:	7053      	strb	r3, [r2, #1]
  config->RestrictReTxAttempts = ciCon.bF.RestrictReTxAttempts;
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021ba:	b2d9      	uxtb	r1, r3
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	7853      	ldrb	r3, [r2, #1]
 80021c0:	f361 03c3 	bfi	r3, r1, #3, #1
 80021c4:	7053      	strb	r3, [r2, #1]
  config->EsiInGatewayMode = ciCon.bF.EsiInGatewayMode;
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021cc:	b2d9      	uxtb	r1, r3
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	7853      	ldrb	r3, [r2, #1]
 80021d2:	f361 1304 	bfi	r3, r1, #4, #1
 80021d6:	7053      	strb	r3, [r2, #1]
  config->SystemErrorToListenOnly = ciCon.bF.SystemErrorToListenOnly;
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021de:	b2d9      	uxtb	r1, r3
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	7853      	ldrb	r3, [r2, #1]
 80021e4:	f361 1345 	bfi	r3, r1, #5, #1
 80021e8:	7053      	strb	r3, [r2, #1]
  config->StoreInTEF = ciCon.bF.StoreInTEF;
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021f0:	b2d9      	uxtb	r1, r3
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	7853      	ldrb	r3, [r2, #1]
 80021f6:	f361 1386 	bfi	r3, r1, #6, #1
 80021fa:	7053      	strb	r3, [r2, #1]
  config->TXQEnable = ciCon.bF.TXQEnable;
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002202:	b2d9      	uxtb	r1, r3
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	7853      	ldrb	r3, [r2, #1]
 8002208:	f361 13c7 	bfi	r3, r1, #7, #1
 800220c:	7053      	strb	r3, [r2, #1]
  config->TxBandWidthSharing = ciCon.bF.TxBandWidthSharing;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002214:	b2d9      	uxtb	r1, r3
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	7893      	ldrb	r3, [r2, #2]
 800221a:	f361 0303 	bfi	r3, r1, #0, #4
 800221e:	7093      	strb	r3, [r2, #2]

  return 0;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	04980760 	.word	0x04980760

08002234 <DRV_CANFDSPI_OperationModeSelect>:
// *****************************************************************************
// Section: Operating mode

int8_t DRV_CANFDSPI_OperationModeSelect(CANFDSPI_MODULE_ID index,
        CAN_OPERATION_MODE opMode)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	71bb      	strb	r3, [r7, #6]
  uint8_t d = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	73bb      	strb	r3, [r7, #14]
  int8_t spiTransferError = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	73fb      	strb	r3, [r7, #15]

  // Read
  spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_CiCON + 3, &d);
 800224c:	f107 020e 	add.w	r2, r7, #14
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	2103      	movs	r1, #3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fbb7 	bl	80019c8 <DRV_CANFDSPI_ReadByte>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 800225e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <DRV_CANFDSPI_OperationModeSelect+0x38>
      return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e01a      	b.n	80022a2 <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  // Modify
  d &= ~0x07;
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	f023 0307 	bic.w	r3, r3, #7
 8002272:	b2db      	uxtb	r3, r3
 8002274:	73bb      	strb	r3, [r7, #14]
  d |= opMode;
 8002276:	7bba      	ldrb	r2, [r7, #14]
 8002278:	79bb      	ldrb	r3, [r7, #6]
 800227a:	4313      	orrs	r3, r2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	73bb      	strb	r3, [r7, #14]

  // Write
  spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_CiCON + 3, d);
 8002280:	7bba      	ldrb	r2, [r7, #14]
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2103      	movs	r1, #3
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fbe2 	bl	8001a50 <DRV_CANFDSPI_WriteByte>
 800228c:	4603      	mov	r3, r0
 800228e:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 8002290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <DRV_CANFDSPI_OperationModeSelect+0x6a>
      return -2;
 8002298:	f06f 0301 	mvn.w	r3, #1
 800229c:	e001      	b.n	80022a2 <DRV_CANFDSPI_OperationModeSelect+0x6e>
  }

  return spiTransferError;
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <DRV_CANFDSPI_TransmitChannelConfigure>:
// *****************************************************************************
// Section: CAN Transmit

int8_t DRV_CANFDSPI_TransmitChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_CONFIG* config)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	603a      	str	r2, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
 80022b8:	460b      	mov	r3, r1
 80022ba:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	81bb      	strh	r3, [r7, #12]

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <DRV_CANFDSPI_TransmitChannelConfigure+0xac>)
 80022c6:	60bb      	str	r3, [r7, #8]

  ciFifoCon.txBF.TxEnable = 1;
 80022c8:	7a3b      	ldrb	r3, [r7, #8]
 80022ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022ce:	723b      	strb	r3, [r7, #8]
  ciFifoCon.txBF.FifoSize = config->FifoSize;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	f362 0304 	bfi	r3, r2, #0, #5
 80022e0:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.PayLoadSize = config->PayLoadSize;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	785b      	ldrb	r3, [r3, #1]
 80022e6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	f362 1347 	bfi	r3, r2, #5, #3
 80022f2:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.txBF.TxAttempts = config->TxAttempts;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	7abb      	ldrb	r3, [r7, #10]
 8002300:	f362 1346 	bfi	r3, r2, #5, #2
 8002304:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.TxPriority = config->TxPriority;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800230e:	b2da      	uxtb	r2, r3
 8002310:	7abb      	ldrb	r3, [r7, #10]
 8002312:	f362 0304 	bfi	r3, r2, #0, #5
 8002316:	72bb      	strb	r3, [r7, #10]
  ciFifoCon.txBF.RTREnable = config->RTREnable;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002320:	b2da      	uxtb	r2, r3
 8002322:	7a3b      	ldrb	r3, [r7, #8]
 8002324:	f362 1386 	bfi	r3, r2, #6, #1
 8002328:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 800232a:	79bb      	ldrb	r3, [r7, #6]
 800232c:	b29b      	uxth	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	0052      	lsls	r2, r2, #1
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	b29b      	uxth	r3, r3
 8002338:	3350      	adds	r3, #80	; 0x50
 800233a:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	89b9      	ldrh	r1, [r7, #12]
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fc24 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 8002348:	4603      	mov	r3, r0
 800234a:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 800234c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	00600400 	.word	0x00600400

0800235c <DRV_CANFDSPI_TransmitChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_TransmitChannelConfigureObjectReset(CAN_TX_FIFO_CONFIG* config)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8002364:	4b1a      	ldr	r3, [pc, #104]	; (80023d0 <DRV_CANFDSPI_TransmitChannelConfigureObjectReset+0x74>)
 8002366:	60fb      	str	r3, [r7, #12]

  config->RTREnable = ciFifoCon.txBF.RTREnable;
 8002368:	7b3b      	ldrb	r3, [r7, #12]
 800236a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800236e:	b2d9      	uxtb	r1, r3
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	7813      	ldrb	r3, [r2, #0]
 8002374:	f361 0300 	bfi	r3, r1, #0, #1
 8002378:	7013      	strb	r3, [r2, #0]
  config->TxPriority = ciFifoCon.txBF.TxPriority;
 800237a:	7bbb      	ldrb	r3, [r7, #14]
 800237c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002380:	b2d9      	uxtb	r1, r3
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	7813      	ldrb	r3, [r2, #0]
 8002386:	f361 0345 	bfi	r3, r1, #1, #5
 800238a:	7013      	strb	r3, [r2, #0]
  config->TxAttempts = ciFifoCon.txBF.TxAttempts;
 800238c:	7bbb      	ldrb	r3, [r7, #14]
 800238e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8002392:	b2d9      	uxtb	r1, r3
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	7813      	ldrb	r3, [r2, #0]
 8002398:	f361 1387 	bfi	r3, r1, #6, #2
 800239c:	7013      	strb	r3, [r2, #0]
  config->FifoSize = ciFifoCon.txBF.FifoSize;
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80023a4:	b2d9      	uxtb	r1, r3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	7853      	ldrb	r3, [r2, #1]
 80023aa:	f361 0304 	bfi	r3, r1, #0, #5
 80023ae:	7053      	strb	r3, [r2, #1]
  config->PayLoadSize = ciFifoCon.txBF.PayLoadSize;
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80023b6:	b2d9      	uxtb	r1, r3
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	7853      	ldrb	r3, [r2, #1]
 80023bc:	f361 1347 	bfi	r3, r1, #5, #3
 80023c0:	7053      	strb	r3, [r2, #1]

  return 0;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	00600400 	.word	0x00600400

080023d4 <DRV_CANFDSPI_TransmitChannelLoad>:
}

int8_t DRV_CANFDSPI_TransmitChannelLoad(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_MSGOBJ* txObj,
        uint8_t *txd, uint32_t txdNumBytes, bool flush)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b0a0      	sub	sp, #128	; 0x80
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60ba      	str	r2, [r7, #8]
 80023dc:	607b      	str	r3, [r7, #4]
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
 80023e2:	460b      	mov	r3, r1
 80023e4:	73bb      	strb	r3, [r7, #14]
  uint32_t fifoReg[3];
  uint32_t dataBytesInObject;
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 80023ec:	7bbb      	ldrb	r3, [r7, #14]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	0052      	lsls	r2, r2, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3350      	adds	r3, #80	; 0x50
 80023fc:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002400:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002404:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8002408:	7bf8      	ldrb	r0, [r7, #15]
 800240a:	2303      	movs	r3, #3
 800240c:	f7ff fd82 	bl	8001f14 <DRV_CANFDSPI_ReadWordArray>
 8002410:	4603      	mov	r3, r0
 8002412:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 8002416:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <DRV_CANFDSPI_TransmitChannelLoad+0x50>
      return -1;
 800241e:	f04f 33ff 	mov.w	r3, #4294967295
 8002422:	e0c5      	b.n	80025b0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that it is a transmit buffer
  ciFifoCon.word = fifoReg[0];
 8002424:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002426:	667b      	str	r3, [r7, #100]	; 0x64
  if (!ciFifoCon.txBF.TxEnable) {
 8002428:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800242c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d102      	bne.n	800243c <DRV_CANFDSPI_TransmitChannelLoad+0x68>
      return -2;
 8002436:	f06f 0301 	mvn.w	r3, #1
 800243a:	e0b9      	b.n	80025b0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Check that DLC is big enough for data
  dataBytesInObject = DRV_CANFDSPI_DlcToDataBytes((CAN_DLC) txObj->bF.ctrl.DLC);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	791b      	ldrb	r3, [r3, #4]
 8002440:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f001 fc10 	bl	8003c6c <DRV_CANFDSPI_DlcToDataBytes>
 800244c:	6778      	str	r0, [r7, #116]	; 0x74
  if (dataBytesInObject < txdNumBytes) {
 800244e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002450:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002454:	429a      	cmp	r2, r3
 8002456:	d202      	bcs.n	800245e <DRV_CANFDSPI_TransmitChannelLoad+0x8a>
      return -3;
 8002458:	f06f 0302 	mvn.w	r3, #2
 800245c:	e0a8      	b.n	80025b0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Get status
  ciFifoSta.word = fifoReg[1];
 800245e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002460:	663b      	str	r3, [r7, #96]	; 0x60

  // Get address
  ciFifoUa.word = fifoReg[2];
 8002462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002464:	65fb      	str	r3, [r7, #92]	; 0x5c
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 8002466:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800246a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246e:	b29b      	uxth	r3, r3
 8002470:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
#endif
  a += cRAMADDR_START;
 8002474:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800247c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

  uint8_t txBuffer[MAX_MSG_SIZE];

  txBuffer[0] = txObj->byte[0]; //not using 'for' to reduce no of instructions
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	743b      	strb	r3, [r7, #16]
  txBuffer[1] = txObj->byte[1];
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	785b      	ldrb	r3, [r3, #1]
 800248a:	747b      	strb	r3, [r7, #17]
  txBuffer[2] = txObj->byte[2];
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	789b      	ldrb	r3, [r3, #2]
 8002490:	74bb      	strb	r3, [r7, #18]
  txBuffer[3] = txObj->byte[3];
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	78db      	ldrb	r3, [r3, #3]
 8002496:	74fb      	strb	r3, [r7, #19]

  txBuffer[4] = txObj->byte[4];
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	791b      	ldrb	r3, [r3, #4]
 800249c:	753b      	strb	r3, [r7, #20]
  txBuffer[5] = txObj->byte[5];
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	795b      	ldrb	r3, [r3, #5]
 80024a2:	757b      	strb	r3, [r7, #21]
  txBuffer[6] = txObj->byte[6];
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	799b      	ldrb	r3, [r3, #6]
 80024a8:	75bb      	strb	r3, [r7, #22]
  txBuffer[7] = txObj->byte[7];
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	79db      	ldrb	r3, [r3, #7]
 80024ae:	75fb      	strb	r3, [r7, #23]

  uint8_t i;
  for (i = 0; i < txdNumBytes; i++) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80024b6:	e010      	b.n	80024da <DRV_CANFDSPI_TransmitChannelLoad+0x106>
      txBuffer[i + 8] = txd[i];
 80024b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	441a      	add	r2, r3
 80024c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80024c4:	3308      	adds	r3, #8
 80024c6:	7812      	ldrb	r2, [r2, #0]
 80024c8:	3380      	adds	r3, #128	; 0x80
 80024ca:	443b      	add	r3, r7
 80024cc:	f803 2c70 	strb.w	r2, [r3, #-112]
  for (i = 0; i < txdNumBytes; i++) {
 80024d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80024d4:	3301      	adds	r3, #1
 80024d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80024da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80024de:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d8e8      	bhi.n	80024b8 <DRV_CANFDSPI_TransmitChannelLoad+0xe4>
  }

  // Make sure we write a multiple of 4 bytes to RAM
  uint16_t n = 0;
 80024e6:	2300      	movs	r3, #0
 80024e8:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  uint8_t j = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b

  if (txdNumBytes % 4) {
 80024f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d02b      	beq.n	8002556 <DRV_CANFDSPI_TransmitChannelLoad+0x182>
      // Need to add bytes
      n = 4 - (txdNumBytes % 4);
 80024fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002502:	b29b      	uxth	r3, r3
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	b29b      	uxth	r3, r3
 800250a:	f1c3 0304 	rsb	r3, r3, #4
 800250e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      i = txdNumBytes + 8;
 8002512:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002516:	b2db      	uxtb	r3, r3
 8002518:	3308      	adds	r3, #8
 800251a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

      for (j = 0; j < n; j++) {
 800251e:	2300      	movs	r3, #0
 8002520:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002524:	e010      	b.n	8002548 <DRV_CANFDSPI_TransmitChannelLoad+0x174>
          txBuffer[i + 8 + j] = 0;
 8002526:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800252a:	f103 0208 	add.w	r2, r3, #8
 800252e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002532:	4413      	add	r3, r2
 8002534:	3380      	adds	r3, #128	; 0x80
 8002536:	443b      	add	r3, r7
 8002538:	2200      	movs	r2, #0
 800253a:	f803 2c70 	strb.w	r2, [r3, #-112]
      for (j = 0; j < n; j++) {
 800253e:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8002542:	3301      	adds	r3, #1
 8002544:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8002548:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800254c:	b29b      	uxth	r3, r3
 800254e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002552:	429a      	cmp	r2, r3
 8002554:	d8e7      	bhi.n	8002526 <DRV_CANFDSPI_TransmitChannelLoad+0x152>
      }
  }

  spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txBuffer, txdNumBytes + 8 + n);
 8002556:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800255a:	b29a      	uxth	r2, r3
 800255c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002560:	4413      	add	r3, r2
 8002562:	b29b      	uxth	r3, r3
 8002564:	3308      	adds	r3, #8
 8002566:	b29b      	uxth	r3, r3
 8002568:	f107 0210 	add.w	r2, r7, #16
 800256c:	f8b7 1078 	ldrh.w	r1, [r7, #120]	; 0x78
 8002570:	7bf8      	ldrb	r0, [r7, #15]
 8002572:	f7ff fc75 	bl	8001e60 <DRV_CANFDSPI_WriteByteArray>
 8002576:	4603      	mov	r3, r0
 8002578:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 800257c:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <DRV_CANFDSPI_TransmitChannelLoad+0x1b6>
      return -4;
 8002584:	f06f 0303 	mvn.w	r3, #3
 8002588:	e012      	b.n	80025b0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  // Set UINC and TXREQ
  spiTransferError = DRV_CANFDSPI_TransmitChannelUpdate(index, channel, flush);
 800258a:	f897 208c 	ldrb.w	r2, [r7, #140]	; 0x8c
 800258e:	7bb9      	ldrb	r1, [r7, #14]
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f810 	bl	80025b8 <DRV_CANFDSPI_TransmitChannelUpdate>
 8002598:	4603      	mov	r3, r0
 800259a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
  if (spiTransferError) {
 800259e:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <DRV_CANFDSPI_TransmitChannelLoad+0x1d8>
      return -5;
 80025a6:	f06f 0304 	mvn.w	r3, #4
 80025aa:	e001      	b.n	80025b0 <DRV_CANFDSPI_TransmitChannelLoad+0x1dc>
  }

  return spiTransferError;
 80025ac:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3780      	adds	r7, #128	; 0x80
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <DRV_CANFDSPI_TransmitChannelUpdate>:
  return DRV_CANFDSPI_ReceiveChannelReset(index, channel);
}

int8_t DRV_CANFDSPI_TransmitChannelUpdate(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, bool flush)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	460b      	mov	r3, r1
 80025c4:	71bb      	strb	r3, [r7, #6]
 80025c6:	4613      	mov	r3, r2
 80025c8:	717b      	strb	r3, [r7, #5]
  uint16_t a;
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 80025ce:	79bb      	ldrb	r3, [r7, #6]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	0052      	lsls	r2, r2, #1
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3351      	adds	r3, #81	; 0x51
 80025de:	81bb      	strh	r3, [r7, #12]
  ciFifoCon.word = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  ciFifoCon.txBF.UINC = 1;
 80025e4:	7a7b      	ldrb	r3, [r7, #9]
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	727b      	strb	r3, [r7, #9]

  // Set TXREQ
  if (flush) {
 80025ec:	797b      	ldrb	r3, [r7, #5]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <DRV_CANFDSPI_TransmitChannelUpdate+0x42>
      ciFifoCon.txBF.TxRequest = 1;
 80025f2:	7a7b      	ldrb	r3, [r7, #9]
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	727b      	strb	r3, [r7, #9]
  }

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 80025fa:	7a7a      	ldrb	r2, [r7, #9]
 80025fc:	89b9      	ldrh	r1, [r7, #12]
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff fa25 	bl	8001a50 <DRV_CANFDSPI_WriteByte>
 8002606:	4603      	mov	r3, r0
 8002608:	73fb      	strb	r3, [r7, #15]
  if (spiTransferError) {
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d002      	beq.n	8002618 <DRV_CANFDSPI_TransmitChannelUpdate+0x60>
      return -1;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	e001      	b.n	800261c <DRV_CANFDSPI_TransmitChannelUpdate+0x64>
  }

  return spiTransferError;
 8002618:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <DRV_CANFDSPI_FilterObjectConfigure>:
// *****************************************************************************
// Section: CAN Receive

int8_t DRV_CANFDSPI_FilterObjectConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FILTEROBJ_ID* id)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	603a      	str	r2, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
 8002630:	460b      	mov	r3, r1
 8002632:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiFLTOBJ fObj;
  int8_t spiTransferError = 0;
 8002634:	2300      	movs	r3, #0
 8002636:	73fb      	strb	r3, [r7, #15]

  // Setup
  fObj.word = 0;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  fObj.bF = *id;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiFLTOBJ + (filter * CiFILTER_OFFSET);
 8002642:	79bb      	ldrb	r3, [r7, #6]
 8002644:	333e      	adds	r3, #62	; 0x3e
 8002646:	b29b      	uxth	r3, r3
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, fObj.word);
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	89b9      	ldrh	r1, [r7, #12]
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fa9c 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 8002658:	4603      	mov	r3, r0
 800265a:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 800265c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <DRV_CANFDSPI_FilterMaskConfigure>:

int8_t DRV_CANFDSPI_FilterMaskConfigure(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_MASKOBJ_ID* mask)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	603a      	str	r2, [r7, #0]
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	460b      	mov	r3, r1
 8002676:	71bb      	strb	r3, [r7, #6]
  uint16_t a;
  REG_CiMASK mObj;
  int8_t spiTransferError = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]

  // Setup
  mObj.word = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	60bb      	str	r3, [r7, #8]
  mObj.bF = *mask;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60bb      	str	r3, [r7, #8]
  a = cREGADDR_CiMASK + (filter * CiFILTER_OFFSET);
 8002686:	79bb      	ldrb	r3, [r7, #6]
 8002688:	b29b      	uxth	r3, r3
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	b29b      	uxth	r3, r3
 800268e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002692:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, mObj.word);
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	89b9      	ldrh	r1, [r7, #12]
 8002698:	79fb      	ldrb	r3, [r7, #7]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fa78 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 80026a0:	4603      	mov	r3, r0
 80026a2:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 80026a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <DRV_CANFDSPI_FilterToFifoLink>:

int8_t DRV_CANFDSPI_FilterToFifoLink(CANFDSPI_MODULE_ID index,
        CAN_FILTER filter, CAN_FIFO_CHANNEL channel, bool enable)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4604      	mov	r4, r0
 80026b8:	4608      	mov	r0, r1
 80026ba:	4611      	mov	r1, r2
 80026bc:	461a      	mov	r2, r3
 80026be:	4623      	mov	r3, r4
 80026c0:	71fb      	strb	r3, [r7, #7]
 80026c2:	4603      	mov	r3, r0
 80026c4:	71bb      	strb	r3, [r7, #6]
 80026c6:	460b      	mov	r3, r1
 80026c8:	717b      	strb	r3, [r7, #5]
 80026ca:	4613      	mov	r3, r2
 80026cc:	713b      	strb	r3, [r7, #4]
  uint16_t a;
  REG_CiFLTCON_BYTE fCtrl;
  int8_t spiTransferError = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	73fb      	strb	r3, [r7, #15]

  // Enable
  if (enable) {
 80026d2:	793b      	ldrb	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d004      	beq.n	80026e2 <DRV_CANFDSPI_FilterToFifoLink+0x32>
      fCtrl.bF.Enable = 1;
 80026d8:	7a3b      	ldrb	r3, [r7, #8]
 80026da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026de:	723b      	strb	r3, [r7, #8]
 80026e0:	e003      	b.n	80026ea <DRV_CANFDSPI_FilterToFifoLink+0x3a>
  } else {
      fCtrl.bF.Enable = 0;
 80026e2:	7a3b      	ldrb	r3, [r7, #8]
 80026e4:	f36f 13c7 	bfc	r3, #7, #1
 80026e8:	723b      	strb	r3, [r7, #8]
  }

  // Link
  fCtrl.bF.BufferPointer = channel;
 80026ea:	797b      	ldrb	r3, [r7, #5]
 80026ec:	f003 031f 	and.w	r3, r3, #31
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	7a3b      	ldrb	r3, [r7, #8]
 80026f4:	f362 0304 	bfi	r3, r2, #0, #5
 80026f8:	723b      	strb	r3, [r7, #8]
  a = cREGADDR_CiFLTCON + filter;
 80026fa:	79bb      	ldrb	r3, [r7, #6]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8002702:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, fCtrl.byte);
 8002704:	7a3a      	ldrb	r2, [r7, #8]
 8002706:	89b9      	ldrh	r1, [r7, #12]
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff f9a0 	bl	8001a50 <DRV_CANFDSPI_WriteByte>
 8002710:	4603      	mov	r3, r0
 8002712:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 8002714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	bd90      	pop	{r4, r7, pc}

08002720 <DRV_CANFDSPI_ReceiveChannelConfigure>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelConfigure(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_CONFIG* config)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	603a      	str	r2, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	460b      	mov	r3, r1
 800272e:	71bb      	strb	r3, [r7, #6]
  int8_t spiTransferError = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  uint16_t a = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	81bb      	strh	r3, [r7, #12]

  if (channel == CAN_TXQUEUE_CH0) {
 8002738:	79bb      	ldrb	r3, [r7, #6]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d102      	bne.n	8002744 <DRV_CANFDSPI_ReceiveChannelConfigure+0x24>
      return -100;
 800273e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002742:	e033      	b.n	80027ac <DRV_CANFDSPI_ReceiveChannelConfigure+0x8c>
  }

  // Setup FIFO
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 8002744:	4b1b      	ldr	r3, [pc, #108]	; (80027b4 <DRV_CANFDSPI_ReceiveChannelConfigure+0x94>)
 8002746:	60bb      	str	r3, [r7, #8]

  ciFifoCon.rxBF.TxEnable = 0;
 8002748:	7a3b      	ldrb	r3, [r7, #8]
 800274a:	f36f 13c7 	bfc	r3, #7, #1
 800274e:	723b      	strb	r3, [r7, #8]
  ciFifoCon.rxBF.FifoSize = config->FifoSize;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f3c3 0344 	ubfx	r3, r3, #1, #5
 8002758:	b2da      	uxtb	r2, r3
 800275a:	7afb      	ldrb	r3, [r7, #11]
 800275c:	f362 0304 	bfi	r3, r2, #0, #5
 8002760:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.PayLoadSize = config->PayLoadSize;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	f3c3 1382 	ubfx	r3, r3, #6, #3
 800276a:	b2da      	uxtb	r2, r3
 800276c:	7afb      	ldrb	r3, [r7, #11]
 800276e:	f362 1347 	bfi	r3, r2, #5, #3
 8002772:	72fb      	strb	r3, [r7, #11]
  ciFifoCon.rxBF.RxTimeStampEnable = config->RxTimeStampEnable;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800277c:	b2da      	uxtb	r2, r3
 800277e:	7a3b      	ldrb	r3, [r7, #8]
 8002780:	f362 1345 	bfi	r3, r2, #5, #1
 8002784:	723b      	strb	r3, [r7, #8]

  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002786:	79bb      	ldrb	r3, [r7, #6]
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	0052      	lsls	r2, r2, #1
 800278e:	4413      	add	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	b29b      	uxth	r3, r3
 8002794:	3350      	adds	r3, #80	; 0x50
 8002796:	81bb      	strh	r3, [r7, #12]

  spiTransferError = DRV_CANFDSPI_WriteWord(index, a, ciFifoCon.word);
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	89b9      	ldrh	r1, [r7, #12]
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff f9f6 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]

  return spiTransferError;
 80027a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	00600400 	.word	0x00600400

080027b8 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset>:

int8_t DRV_CANFDSPI_ReceiveChannelConfigureObjectReset(CAN_RX_FIFO_CONFIG* config)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  REG_CiFIFOCON ciFifoCon;
  ciFifoCon.word = canFifoResetValues[0];
 80027c0:	4b11      	ldr	r3, [pc, #68]	; (8002808 <DRV_CANFDSPI_ReceiveChannelConfigureObjectReset+0x50>)
 80027c2:	60fb      	str	r3, [r7, #12]

  config->FifoSize = ciFifoCon.rxBF.FifoSize;
 80027c4:	7bfb      	ldrb	r3, [r7, #15]
 80027c6:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80027ca:	b2d9      	uxtb	r1, r3
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	7813      	ldrb	r3, [r2, #0]
 80027d0:	f361 0345 	bfi	r3, r1, #1, #5
 80027d4:	7013      	strb	r3, [r2, #0]
  config->PayLoadSize = ciFifoCon.rxBF.PayLoadSize;
 80027d6:	7bfb      	ldrb	r3, [r7, #15]
 80027d8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80027dc:	b2d9      	uxtb	r1, r3
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	8813      	ldrh	r3, [r2, #0]
 80027e2:	f361 1388 	bfi	r3, r1, #6, #3
 80027e6:	8013      	strh	r3, [r2, #0]
  config->RxTimeStampEnable = ciFifoCon.rxBF.RxTimeStampEnable;
 80027e8:	7b3b      	ldrb	r3, [r7, #12]
 80027ea:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80027ee:	b2d9      	uxtb	r1, r3
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	7813      	ldrb	r3, [r2, #0]
 80027f4:	f361 0300 	bfi	r3, r1, #0, #1
 80027f8:	7013      	strb	r3, [r2, #0]

  return 0;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	00600400 	.word	0x00600400

0800280c <DRV_CANFDSPI_ReceiveMessageGet>:
}

int8_t DRV_CANFDSPI_ReceiveMessageGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_MSGOBJ* rxObj,
        uint8_t *rxd, uint8_t nBytes)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b0a0      	sub	sp, #128	; 0x80
 8002810:	af00      	add	r7, sp, #0
 8002812:	60ba      	str	r2, [r7, #8]
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	4603      	mov	r3, r0
 8002818:	73fb      	strb	r3, [r7, #15]
 800281a:	460b      	mov	r3, r1
 800281c:	73bb      	strb	r3, [r7, #14]
  uint8_t n = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint8_t i = 0;
 8002824:	2300      	movs	r3, #0
 8002826:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  uint16_t a;
  uint32_t fifoReg[3];
  REG_CiFIFOCON ciFifoCon;
  __attribute__((unused)) REG_CiFIFOSTA ciFifoSta;
  REG_CiFIFOUA ciFifoUa;
  int8_t spiTransferError = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

  // Get FIFO registers
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002830:	7bbb      	ldrb	r3, [r7, #14]
 8002832:	b29b      	uxth	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	0052      	lsls	r2, r2, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	b29b      	uxth	r3, r3
 800283e:	3350      	adds	r3, #80	; 0x50
 8002840:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  spiTransferError = DRV_CANFDSPI_ReadWordArray(index, a, fifoReg, 3);
 8002844:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002848:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 800284c:	7bf8      	ldrb	r0, [r7, #15]
 800284e:	2303      	movs	r3, #3
 8002850:	f7ff fb60 	bl	8001f14 <DRV_CANFDSPI_ReadWordArray>
 8002854:	4603      	mov	r3, r0
 8002856:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 800285a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <DRV_CANFDSPI_ReceiveMessageGet+0x5c>
      return -1;
 8002862:	f04f 33ff 	mov.w	r3, #4294967295
 8002866:	e0cd      	b.n	8002a04 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Check that it is a receive buffer
  ciFifoCon.word = fifoReg[0];
 8002868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800286a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (ciFifoCon.txBF.TxEnable) {
 800286c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002870:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d002      	beq.n	8002880 <DRV_CANFDSPI_ReceiveMessageGet+0x74>
      return -2;
 800287a:	f06f 0301 	mvn.w	r3, #1
 800287e:	e0c1      	b.n	8002a04 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Get Status
  ciFifoSta.word = fifoReg[1];
 8002880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002882:	667b      	str	r3, [r7, #100]	; 0x64

  // Get address
  ciFifoUa.word = fifoReg[2];
 8002884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002886:	663b      	str	r3, [r7, #96]	; 0x60
#ifdef USERADDRESS_TIMES_FOUR
  a = 4 * ciFifoUa.bF.UserAddress;
#else
  a = ciFifoUa.bF.UserAddress;
 8002888:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 800288c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002890:	b29b      	uxth	r3, r3
 8002892:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
#endif
  a += cRAMADDR_START;
 8002896:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800289a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800289e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

  // Number of bytes to read
  n = nBytes + 8; // Add 8 header bytes
 80028a2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80028a6:	3308      	adds	r3, #8
 80028a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 80028ac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d004      	beq.n	80028c4 <DRV_CANFDSPI_ReceiveMessageGet+0xb8>
      n += 4; // Add 4 time stamp bytes
 80028ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028be:	3304      	adds	r3, #4
 80028c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Make sure we read a multiple of 4 bytes from RAM
  if (n % 4) {
 80028c4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028c8:	f003 0303 	and.w	r3, r3, #3
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d007      	beq.n	80028e2 <DRV_CANFDSPI_ReceiveMessageGet+0xd6>
      n = n + 4 - (n % 4);
 80028d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028d6:	f023 0303 	bic.w	r3, r3, #3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	3304      	adds	r3, #4
 80028de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  // Read rxObj using one access
  uint8_t ba[MAX_MSG_SIZE];

  if (n > MAX_MSG_SIZE) {
 80028e2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028e6:	2b4c      	cmp	r3, #76	; 0x4c
 80028e8:	d902      	bls.n	80028f0 <DRV_CANFDSPI_ReceiveMessageGet+0xe4>
      n = MAX_MSG_SIZE;
 80028ea:	234c      	movs	r3, #76	; 0x4c
 80028ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  spiTransferError = DRV_CANFDSPI_ReadByteArray(index, a, ba, n);
 80028f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	f107 0214 	add.w	r2, r7, #20
 80028fa:	f8b7 107a 	ldrh.w	r1, [r7, #122]	; 0x7a
 80028fe:	7bf8      	ldrb	r0, [r7, #15]
 8002900:	f7ff fa46 	bl	8001d90 <DRV_CANFDSPI_ReadByteArray>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 800290a:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <DRV_CANFDSPI_ReceiveMessageGet+0x10c>
      return -3;
 8002912:	f06f 0302 	mvn.w	r3, #2
 8002916:	e075      	b.n	8002a04 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  // Assign message header
  REG_t myReg;

  myReg.byte[0] = ba[0];
 8002918:	7d3b      	ldrb	r3, [r7, #20]
 800291a:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[1];
 800291c:	7d7b      	ldrb	r3, [r7, #21]
 800291e:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[2];
 8002920:	7dbb      	ldrb	r3, [r7, #22]
 8002922:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[3];
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	74fb      	strb	r3, [r7, #19]
  rxObj->word[0] = myReg.word;
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	601a      	str	r2, [r3, #0]

  myReg.byte[0] = ba[4];
 800292e:	7e3b      	ldrb	r3, [r7, #24]
 8002930:	743b      	strb	r3, [r7, #16]
  myReg.byte[1] = ba[5];
 8002932:	7e7b      	ldrb	r3, [r7, #25]
 8002934:	747b      	strb	r3, [r7, #17]
  myReg.byte[2] = ba[6];
 8002936:	7ebb      	ldrb	r3, [r7, #26]
 8002938:	74bb      	strb	r3, [r7, #18]
  myReg.byte[3] = ba[7];
 800293a:	7efb      	ldrb	r3, [r7, #27]
 800293c:	74fb      	strb	r3, [r7, #19]
  rxObj->word[1] = myReg.word;
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	605a      	str	r2, [r3, #4]

  if (ciFifoCon.rxBF.RxTimeStampEnable) {
 8002944:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d027      	beq.n	80029a2 <DRV_CANFDSPI_ReceiveMessageGet+0x196>
      myReg.byte[0] = ba[8];
 8002952:	7f3b      	ldrb	r3, [r7, #28]
 8002954:	743b      	strb	r3, [r7, #16]
      myReg.byte[1] = ba[9];
 8002956:	7f7b      	ldrb	r3, [r7, #29]
 8002958:	747b      	strb	r3, [r7, #17]
      myReg.byte[2] = ba[10];
 800295a:	7fbb      	ldrb	r3, [r7, #30]
 800295c:	74bb      	strb	r3, [r7, #18]
      myReg.byte[3] = ba[11];
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	74fb      	strb	r3, [r7, #19]
      rxObj->word[2] = myReg.word;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 8002968:	2300      	movs	r3, #0
 800296a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800296e:	e011      	b.n	8002994 <DRV_CANFDSPI_ReceiveMessageGet+0x188>
          rxd[i] = ba[i + 12];
 8002970:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002974:	f103 020c 	add.w	r2, r3, #12
 8002978:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	440b      	add	r3, r1
 8002980:	3280      	adds	r2, #128	; 0x80
 8002982:	443a      	add	r2, r7
 8002984:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8002988:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 800298a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800298e:	3301      	adds	r3, #1
 8002990:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002994:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 8002998:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800299c:	429a      	cmp	r2, r3
 800299e:	d3e7      	bcc.n	8002970 <DRV_CANFDSPI_ReceiveMessageGet+0x164>
 80029a0:	e01e      	b.n	80029e0 <DRV_CANFDSPI_ReceiveMessageGet+0x1d4>
      }
  } else {
      rxObj->word[2] = 0;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2200      	movs	r2, #0
 80029a6:	609a      	str	r2, [r3, #8]

      // Assign message data
      for (i = 0; i < nBytes; i++) {
 80029a8:	2300      	movs	r3, #0
 80029aa:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80029ae:	e011      	b.n	80029d4 <DRV_CANFDSPI_ReceiveMessageGet+0x1c8>
          rxd[i] = ba[i + 8];
 80029b0:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80029b4:	f103 0208 	add.w	r2, r3, #8
 80029b8:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	440b      	add	r3, r1
 80029c0:	3280      	adds	r2, #128	; 0x80
 80029c2:	443a      	add	r2, r7
 80029c4:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 80029c8:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < nBytes; i++) {
 80029ca:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80029ce:	3301      	adds	r3, #1
 80029d0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80029d4:	f897 207e 	ldrb.w	r2, [r7, #126]	; 0x7e
 80029d8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3e7      	bcc.n	80029b0 <DRV_CANFDSPI_ReceiveMessageGet+0x1a4>
      }
  }

  // UINC channel
  spiTransferError = DRV_CANFDSPI_ReceiveChannelUpdate(index, channel);
 80029e0:	7bba      	ldrb	r2, [r7, #14]
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 f810 	bl	8002a0c <DRV_CANFDSPI_ReceiveChannelUpdate>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
  if (spiTransferError) {
 80029f2:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <DRV_CANFDSPI_ReceiveMessageGet+0x1f4>
      return -4;
 80029fa:	f06f 0303 	mvn.w	r3, #3
 80029fe:	e001      	b.n	8002a04 <DRV_CANFDSPI_ReceiveMessageGet+0x1f8>
  }

  return spiTransferError;
 8002a00:	f997 307d 	ldrsb.w	r3, [r7, #125]	; 0x7d
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3780      	adds	r7, #128	; 0x80
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <DRV_CANFDSPI_ReceiveChannelUpdate>:
  return spiTransferError;
}

int8_t DRV_CANFDSPI_ReceiveChannelUpdate(CANFDSPI_MODULE_ID index,
      CAN_FIFO_CHANNEL channel)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	460a      	mov	r2, r1
 8002a16:	71fb      	strb	r3, [r7, #7]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	71bb      	strb	r3, [r7, #6]
  uint16_t a = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	81fb      	strh	r3, [r7, #14]
  REG_CiFIFOCON ciFifoCon;
  int8_t spiTransferError = 0;
 8002a20:	2300      	movs	r3, #0
 8002a22:	737b      	strb	r3, [r7, #13]
  ciFifoCon.word = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60bb      	str	r3, [r7, #8]

  // Set UINC
  a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET) + 1; // Byte that contains FRESET
 8002a28:	79bb      	ldrb	r3, [r7, #6]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	0052      	lsls	r2, r2, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3351      	adds	r3, #81	; 0x51
 8002a38:	81fb      	strh	r3, [r7, #14]
  ciFifoCon.rxBF.UINC = 1;
 8002a3a:	7a7b      	ldrb	r3, [r7, #9]
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	727b      	strb	r3, [r7, #9]

  // Write byte
  spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[1]);
 8002a42:	7a7a      	ldrb	r2, [r7, #9]
 8002a44:	89f9      	ldrh	r1, [r7, #14]
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f801 	bl	8001a50 <DRV_CANFDSPI_WriteByte>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	737b      	strb	r3, [r7, #13]

  return spiTransferError;
 8002a52:	f997 300d 	ldrsb.w	r3, [r7, #13]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <DRV_CANFDSPI_ModuleEventEnable>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ModuleEventEnable(CANFDSPI_MODULE_ID index,
        CAN_MODULE_EVENT flags)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	460a      	mov	r2, r1
 8002a68:	71fb      	strb	r3, [r7, #7]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	80bb      	strh	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002a72:	2300      	movs	r3, #0
 8002a74:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt Enables
    a = cREGADDR_CiINTENABLE;
 8002a76:	231e      	movs	r3, #30
 8002a78:	81bb      	strh	r3, [r7, #12]
    REG_CiINTENABLE intEnables;
    intEnables.word = 0;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	813b      	strh	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadHalfWord(index, a, &intEnables.word);
 8002a7e:	f107 0208 	add.w	r2, r7, #8
 8002a82:	89b9      	ldrh	r1, [r7, #12]
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff f8d2 	bl	8001c30 <DRV_CANFDSPI_ReadHalfWord>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <DRV_CANFDSPI_ModuleEventEnable+0x40>
        return -1;
 8002a98:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9c:	e01b      	b.n	8002ad6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    // Modify
    intEnables.word |= (flags & CAN_ALL_EVENTS);
 8002a9e:	893b      	ldrh	r3, [r7, #8]
 8002aa0:	b21a      	sxth	r2, r3
 8002aa2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002aa6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8002aaa:	b21b      	sxth	r3, r3
 8002aac:	4313      	orrs	r3, r2
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	813b      	strh	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteHalfWord(index, a, intEnables.word);
 8002ab4:	893a      	ldrh	r2, [r7, #8]
 8002ab6:	89b9      	ldrh	r1, [r7, #12]
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f918 	bl	8001cf0 <DRV_CANFDSPI_WriteHalfWord>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <DRV_CANFDSPI_ModuleEventEnable+0x74>
        return -2;
 8002acc:	f06f 0301 	mvn.w	r3, #1
 8002ad0:	e001      	b.n	8002ad6 <DRV_CANFDSPI_ModuleEventEnable+0x78>
    }

    return spiTransferError;
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <DRV_CANFDSPI_TransmitChannelEventGet>:
// *****************************************************************************
// Section: Transmit FIFO Events

int8_t DRV_CANFDSPI_TransmitChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_TX_FIFO_EVENT* flags)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	603a      	str	r2, [r7, #0]
 8002ae8:	71fb      	strb	r3, [r7, #7]
 8002aea:	460b      	mov	r3, r1
 8002aec:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002af2:	2300      	movs	r3, #0
 8002af4:	81bb      	strh	r3, [r7, #12]

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002afa:	79bb      	ldrb	r3, [r7, #6]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	0052      	lsls	r2, r2, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3354      	adds	r3, #84	; 0x54
 8002b0a:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8002b0c:	f107 0208 	add.w	r2, r7, #8
 8002b10:	89b9      	ldrh	r1, [r7, #12]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe ff57 	bl	80019c8 <DRV_CANFDSPI_ReadByte>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <DRV_CANFDSPI_TransmitChannelEventGet+0x4e>
        return -1;
 8002b26:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2a:	e007      	b.n	8002b3c <DRV_CANFDSPI_TransmitChannelEventGet+0x5e>
    }

    // Update data
    *flags = (CAN_TX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_TX_FIFO_ALL_EVENTS);
 8002b2c:	7a3b      	ldrb	r3, [r7, #8]
 8002b2e:	f003 0317 	and.w	r3, r3, #23
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <DRV_CANFDSPI_ReceiveChannelEventGet>:
// *****************************************************************************
// Section: Receive FIFO Events

int8_t DRV_CANFDSPI_ReceiveChannelEventGet(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT* flags)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	603a      	str	r2, [r7, #0]
 8002b4e:	71fb      	strb	r3, [r7, #7]
 8002b50:	460b      	mov	r3, r1
 8002b52:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002b5c:	79bb      	ldrb	r3, [r7, #6]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <DRV_CANFDSPI_ReceiveChannelEventGet+0x24>
 8002b62:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002b66:	e022      	b.n	8002bae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>

    // Read Interrupt flags
    REG_CiFIFOSTA ciFifoSta;
    ciFifoSta.word = 0;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
    a = cREGADDR_CiFIFOSTA + (channel * CiFIFO_OFFSET);
 8002b6c:	79bb      	ldrb	r3, [r7, #6]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	0052      	lsls	r2, r2, #1
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	3354      	adds	r3, #84	; 0x54
 8002b7c:	81bb      	strh	r3, [r7, #12]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoSta.byte[0]);
 8002b7e:	f107 0208 	add.w	r2, r7, #8
 8002b82:	89b9      	ldrh	r1, [r7, #12]
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe ff1e 	bl	80019c8 <DRV_CANFDSPI_ReadByte>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <DRV_CANFDSPI_ReceiveChannelEventGet+0x5a>
        return -1;
 8002b98:	f04f 33ff 	mov.w	r3, #4294967295
 8002b9c:	e007      	b.n	8002bae <DRV_CANFDSPI_ReceiveChannelEventGet+0x6a>
    }

    // Update data
    *flags = (CAN_RX_FIFO_EVENT) (ciFifoSta.byte[0] & CAN_RX_FIFO_ALL_EVENTS);
 8002b9e:	7a3b      	ldrb	r3, [r7, #8]
 8002ba0:	f003 030f 	and.w	r3, r3, #15
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <DRV_CANFDSPI_ReceiveChannelEventEnable>:
    return DRV_CANFDSPI_TransmitChannelIndexGet(index, channel, idx);
}

int8_t DRV_CANFDSPI_ReceiveChannelEventEnable(CANFDSPI_MODULE_ID index,
        CAN_FIFO_CHANNEL channel, CAN_RX_FIFO_EVENT flags)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	71fb      	strb	r3, [r7, #7]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	71bb      	strb	r3, [r7, #6]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	81bb      	strh	r3, [r7, #12]

    if (channel == CAN_TXQUEUE_CH0) return -100;
 8002bd0:	79bb      	ldrb	r3, [r7, #6]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d102      	bne.n	8002bdc <DRV_CANFDSPI_ReceiveChannelEventEnable+0x26>
 8002bd6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002bda:	e036      	b.n	8002c4a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>

    // Read Interrupt Enables
    a = cREGADDR_CiFIFOCON + (channel * CiFIFO_OFFSET);
 8002bdc:	79bb      	ldrb	r3, [r7, #6]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	0052      	lsls	r2, r2, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	3350      	adds	r3, #80	; 0x50
 8002bec:	81bb      	strh	r3, [r7, #12]
    REG_CiFIFOCON ciFifoCon;
    ciFifoCon.word = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &ciFifoCon.byte[0]);
 8002bf2:	f107 0208 	add.w	r2, r7, #8
 8002bf6:	89b9      	ldrh	r1, [r7, #12]
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fee4 	bl	80019c8 <DRV_CANFDSPI_ReadByte>
 8002c00:	4603      	mov	r3, r0
 8002c02:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x5c>
        return -1;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	e01b      	b.n	8002c4a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    // Modify
    ciFifoCon.byte[0] |= (flags & CAN_RX_FIFO_ALL_EVENTS);
 8002c12:	7a3b      	ldrb	r3, [r7, #8]
 8002c14:	b25a      	sxtb	r2, r3
 8002c16:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b25b      	sxtb	r3, r3
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	723b      	strb	r3, [r7, #8]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, ciFifoCon.byte[0]);
 8002c28:	7a3a      	ldrb	r2, [r7, #8]
 8002c2a:	89b9      	ldrh	r1, [r7, #12]
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fe ff0e 	bl	8001a50 <DRV_CANFDSPI_WriteByte>
 8002c34:	4603      	mov	r3, r0
 8002c36:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002c38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <DRV_CANFDSPI_ReceiveChannelEventEnable+0x90>
        return -2;
 8002c40:	f06f 0301 	mvn.w	r3, #1
 8002c44:	e001      	b.n	8002c4a <DRV_CANFDSPI_ReceiveChannelEventEnable+0x94>
    }

    return spiTransferError;
 8002c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <DRV_CANFDSPI_ErrorCountStateGet>:
    return spiTransferError;
}

int8_t DRV_CANFDSPI_ErrorCountStateGet(CANFDSPI_MODULE_ID index,
        uint8_t* tec, uint8_t* rec, CAN_ERROR_STATE* flags)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b086      	sub	sp, #24
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
 8002c5e:	4603      	mov	r3, r0
 8002c60:	73fb      	strb	r3, [r7, #15]
    int8_t spiTransferError = 0;
 8002c62:	2300      	movs	r3, #0
 8002c64:	75fb      	strb	r3, [r7, #23]
    uint16_t a = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	82bb      	strh	r3, [r7, #20]

    // Read Error
    a = cREGADDR_CiTREC;
 8002c6a:	2334      	movs	r3, #52	; 0x34
 8002c6c:	82bb      	strh	r3, [r7, #20]
    REG_CiTREC ciTrec;
    ciTrec.word = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	613b      	str	r3, [r7, #16]

    spiTransferError = DRV_CANFDSPI_ReadWord(index, a, &ciTrec.word);
 8002c72:	f107 0210 	add.w	r2, r7, #16
 8002c76:	8ab9      	ldrh	r1, [r7, #20]
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe ff2a 	bl	8001ad4 <DRV_CANFDSPI_ReadWord>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8002c84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <DRV_CANFDSPI_ErrorCountStateGet+0x40>
        return -1;
 8002c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c90:	e00d      	b.n	8002cae <DRV_CANFDSPI_ErrorCountStateGet+0x5c>
    }

    // Update data
    *tec = ciTrec.byte[1];
 8002c92:	7c7a      	ldrb	r2, [r7, #17]
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	701a      	strb	r2, [r3, #0]
    *rec = ciTrec.byte[0];
 8002c98:	7c3a      	ldrb	r2, [r7, #16]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	701a      	strb	r2, [r3, #0]
    *flags = (CAN_ERROR_STATE) (ciTrec.byte[2] & CAN_ERROR_ALL);
 8002c9e:	7cbb      	ldrb	r3, [r7, #18]
 8002ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	701a      	strb	r2, [r3, #0]

    return spiTransferError;
 8002caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <DRV_CANFDSPI_EccEnable>:
// *****************************************************************************
// *****************************************************************************
// Section: ECC

int8_t DRV_CANFDSPI_EccEnable(CANFDSPI_MODULE_ID index)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
    int8_t spiTransferError = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	73fb      	strb	r3, [r7, #15]
    uint8_t d = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73bb      	strb	r3, [r7, #14]

    // Read
    spiTransferError = DRV_CANFDSPI_ReadByte(index, cREGADDR_ECCCON, &d);
 8002cc8:	f107 020e 	add.w	r2, r7, #14
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f640 610c 	movw	r1, #3596	; 0xe0c
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fe fe78 	bl	80019c8 <DRV_CANFDSPI_ReadByte>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <DRV_CANFDSPI_EccEnable+0x34>
        return -1;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ce8:	e015      	b.n	8002d16 <DRV_CANFDSPI_EccEnable+0x60>
    }

    // Modify
    d |= 0x01;
 8002cea:	7bbb      	ldrb	r3, [r7, #14]
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	73bb      	strb	r3, [r7, #14]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, cREGADDR_ECCCON, d);
 8002cf4:	7bba      	ldrb	r2, [r7, #14]
 8002cf6:	79fb      	ldrb	r3, [r7, #7]
 8002cf8:	f640 610c 	movw	r1, #3596	; 0xe0c
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe fea7 	bl	8001a50 <DRV_CANFDSPI_WriteByte>
 8002d02:	4603      	mov	r3, r0
 8002d04:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8002d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d002      	beq.n	8002d14 <DRV_CANFDSPI_EccEnable+0x5e>
        return -2;
 8002d0e:	f06f 0301 	mvn.w	r3, #1
 8002d12:	e000      	b.n	8002d16 <DRV_CANFDSPI_EccEnable+0x60>
    }

    return 0;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <DRV_CANFDSPI_RamInit>:

    return spiTransferError;
}

int8_t DRV_CANFDSPI_RamInit(CANFDSPI_MODULE_ID index, uint8_t d)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b090      	sub	sp, #64	; 0x40
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	4603      	mov	r3, r0
 8002d26:	460a      	mov	r2, r1
 8002d28:	71fb      	strb	r3, [r7, #7]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	71bb      	strb	r3, [r7, #6]
    uint8_t txd[SPI_DEFAULT_BUFFER_LENGTH/2];
    uint32_t k;
    int8_t spiTransferError = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    // Prepare data
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002d34:	2300      	movs	r3, #0
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d38:	e008      	b.n	8002d4c <DRV_CANFDSPI_RamInit+0x2e>
        txd[k] = d;
 8002d3a:	f107 0208 	add.w	r2, r7, #8
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	4413      	add	r3, r2
 8002d42:	79ba      	ldrb	r2, [r7, #6]
 8002d44:	701a      	strb	r2, [r3, #0]
    for (k = 0; k < SPI_DEFAULT_BUFFER_LENGTH/2; k++) {
 8002d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d48:	3301      	adds	r3, #1
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	2b2f      	cmp	r3, #47	; 0x2f
 8002d50:	d9f3      	bls.n	8002d3a <DRV_CANFDSPI_RamInit+0x1c>
    }

    uint16_t a = cRAMADDR_START;
 8002d52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d56:	873b      	strh	r3, [r7, #56]	; 0x38

    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002d58:	2300      	movs	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5c:	e016      	b.n	8002d8c <DRV_CANFDSPI_RamInit+0x6e>
        spiTransferError = DRV_CANFDSPI_WriteByteArray(index, a, txd, SPI_DEFAULT_BUFFER_LENGTH/2);
 8002d5e:	f107 0208 	add.w	r2, r7, #8
 8002d62:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002d64:	79f8      	ldrb	r0, [r7, #7]
 8002d66:	2330      	movs	r3, #48	; 0x30
 8002d68:	f7ff f87a 	bl	8001e60 <DRV_CANFDSPI_WriteByteArray>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (spiTransferError) {
 8002d72:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <DRV_CANFDSPI_RamInit+0x62>
            return -1;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	e00a      	b.n	8002d96 <DRV_CANFDSPI_RamInit+0x78>
        }
        a += SPI_DEFAULT_BUFFER_LENGTH/2;
 8002d80:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002d82:	3330      	adds	r3, #48	; 0x30
 8002d84:	873b      	strh	r3, [r7, #56]	; 0x38
    for (k = 0; k < ((cRAM_SIZE / SPI_DEFAULT_BUFFER_LENGTH) * 2); k++) {
 8002d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d88:	3301      	adds	r3, #1
 8002d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	2b29      	cmp	r3, #41	; 0x29
 8002d90:	d9e5      	bls.n	8002d5e <DRV_CANFDSPI_RamInit+0x40>
    }

    return spiTransferError;
 8002d92:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3740      	adds	r7, #64	; 0x40
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <DRV_CANFDSPI_BitTimeConfigure>:
}

int8_t DRV_CANFDSPI_BitTimeConfigure(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode,
        CAN_SYSCLK_SPEED clk)
{
 8002d9e:	b590      	push	{r4, r7, lr}
 8002da0:	b085      	sub	sp, #20
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	4604      	mov	r4, r0
 8002da6:	4608      	mov	r0, r1
 8002da8:	4611      	mov	r1, r2
 8002daa:	461a      	mov	r2, r3
 8002dac:	4623      	mov	r3, r4
 8002dae:	71fb      	strb	r3, [r7, #7]
 8002db0:	4603      	mov	r3, r0
 8002db2:	71bb      	strb	r3, [r7, #6]
 8002db4:	460b      	mov	r3, r1
 8002db6:	717b      	strb	r3, [r7, #5]
 8002db8:	4613      	mov	r3, r2
 8002dba:	713b      	strb	r3, [r7, #4]
    int8_t spiTransferError = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	73fb      	strb	r3, [r7, #15]

    // Decode clk
    switch (clk) {
 8002dc0:	793b      	ldrb	r3, [r7, #4]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d036      	beq.n	8002e34 <DRV_CANFDSPI_BitTimeConfigure+0x96>
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	dc4c      	bgt.n	8002e64 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <DRV_CANFDSPI_BitTimeConfigure+0x36>
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d018      	beq.n	8002e04 <DRV_CANFDSPI_BitTimeConfigure+0x66>
 8002dd2:	e047      	b.n	8002e64 <DRV_CANFDSPI_BitTimeConfigure+0xc6>
        case CAN_SYSCLK_40M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal40MHz(index, bitTime);
 8002dd4:	79ba      	ldrb	r2, [r7, #6]
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f84c 	bl	8002e78 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>
 8002de0:	4603      	mov	r3, r0
 8002de2:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <DRV_CANFDSPI_BitTimeConfigure+0x54>
 8002dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df0:	e03d      	b.n	8002e6e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData40MHz(index, bitTime, sspMode);
 8002df2:	797a      	ldrb	r2, [r7, #5]
 8002df4:	79b9      	ldrb	r1, [r7, #6]
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f000 f8c3 	bl	8002f84 <DRV_CANFDSPI_BitTimeConfigureData40MHz>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	73fb      	strb	r3, [r7, #15]
            break;
 8002e02:	e032      	b.n	8002e6a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_20M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal20MHz(index, bitTime);
 8002e04:	79ba      	ldrb	r2, [r7, #6]
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 faf2 	bl	80033f4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d002      	beq.n	8002e22 <DRV_CANFDSPI_BitTimeConfigure+0x84>
 8002e1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e20:	e025      	b.n	8002e6e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData20MHz(index, bitTime, sspMode);
 8002e22:	797a      	ldrb	r2, [r7, #5]
 8002e24:	79b9      	ldrb	r1, [r7, #6]
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fb6f 	bl	800350c <DRV_CANFDSPI_BitTimeConfigureData20MHz>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]
            break;
 8002e32:	e01a      	b.n	8002e6a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        case CAN_SYSCLK_10M:
            spiTransferError = DRV_CANFDSPI_BitTimeConfigureNominal10MHz(index, bitTime);
 8002e34:	79ba      	ldrb	r2, [r7, #6]
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd10 	bl	8003860 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>
 8002e40:	4603      	mov	r3, r0
 8002e42:	73fb      	strb	r3, [r7, #15]
            if (spiTransferError) return spiTransferError;
 8002e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d002      	beq.n	8002e52 <DRV_CANFDSPI_BitTimeConfigure+0xb4>
 8002e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e50:	e00d      	b.n	8002e6e <DRV_CANFDSPI_BitTimeConfigure+0xd0>

            spiTransferError = DRV_CANFDSPI_BitTimeConfigureData10MHz(index, bitTime, sspMode);
 8002e52:	797a      	ldrb	r2, [r7, #5]
 8002e54:	79b9      	ldrb	r1, [r7, #6]
 8002e56:	79fb      	ldrb	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f000 fd8d 	bl	8003978 <DRV_CANFDSPI_BitTimeConfigureData10MHz>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	73fb      	strb	r3, [r7, #15]
            break;
 8002e62:	e002      	b.n	8002e6a <DRV_CANFDSPI_BitTimeConfigure+0xcc>
        default:
            spiTransferError = -1;
 8002e64:	23ff      	movs	r3, #255	; 0xff
 8002e66:	73fb      	strb	r3, [r7, #15]
            break;
 8002e68:	bf00      	nop
    }

    return spiTransferError;
 8002e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd90      	pop	{r4, r7, pc}
	...

08002e78 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	460a      	mov	r2, r1
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8002e8c:	4b3c      	ldr	r3, [pc, #240]	; (8002f80 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x108>)
 8002e8e:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8002e90:	79bb      	ldrb	r3, [r7, #6]
 8002e92:	2b11      	cmp	r3, #17
 8002e94:	d862      	bhi.n	8002f5c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xe4>
 8002e96:	a201      	add	r2, pc, #4	; (adr r2, 8002e9c <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0x24>)
 8002e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9c:	08002ee5 	.word	0x08002ee5
 8002ea0:	08002ee5 	.word	0x08002ee5
 8002ea4:	08002ee5 	.word	0x08002ee5
 8002ea8:	08002ee5 	.word	0x08002ee5
 8002eac:	08002ee5 	.word	0x08002ee5
 8002eb0:	08002ee5 	.word	0x08002ee5
 8002eb4:	08002ee5 	.word	0x08002ee5
 8002eb8:	08002ee5 	.word	0x08002ee5
 8002ebc:	08002f03 	.word	0x08002f03
 8002ec0:	08002f03 	.word	0x08002f03
 8002ec4:	08002f03 	.word	0x08002f03
 8002ec8:	08002f03 	.word	0x08002f03
 8002ecc:	08002f03 	.word	0x08002f03
 8002ed0:	08002f03 	.word	0x08002f03
 8002ed4:	08002f03 	.word	0x08002f03
 8002ed8:	08002f21 	.word	0x08002f21
 8002edc:	08002f21 	.word	0x08002f21
 8002ee0:	08002f3f 	.word	0x08002f3f
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8002ee8:	233e      	movs	r3, #62	; 0x3e
 8002eea:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8002eec:	7a7b      	ldrb	r3, [r7, #9]
 8002eee:	220f      	movs	r2, #15
 8002ef0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ef4:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8002ef6:	7a3b      	ldrb	r3, [r7, #8]
 8002ef8:	220f      	movs	r2, #15
 8002efa:	f362 0306 	bfi	r3, r2, #0, #7
 8002efe:	723b      	strb	r3, [r7, #8]
            break;
 8002f00:	e02f      	b.n	8002f62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 8002f02:	2300      	movs	r3, #0
 8002f04:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 8002f06:	237e      	movs	r3, #126	; 0x7e
 8002f08:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 8002f0a:	7a7b      	ldrb	r3, [r7, #9]
 8002f0c:	221f      	movs	r2, #31
 8002f0e:	f362 0306 	bfi	r3, r2, #0, #7
 8002f12:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 8002f14:	7a3b      	ldrb	r3, [r7, #8]
 8002f16:	221f      	movs	r2, #31
 8002f18:	f362 0306 	bfi	r3, r2, #0, #7
 8002f1c:	723b      	strb	r3, [r7, #8]
            break;
 8002f1e:	e020      	b.n	8002f62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8002f24:	231e      	movs	r3, #30
 8002f26:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8002f28:	7a7b      	ldrb	r3, [r7, #9]
 8002f2a:	2207      	movs	r2, #7
 8002f2c:	f362 0306 	bfi	r3, r2, #0, #7
 8002f30:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8002f32:	7a3b      	ldrb	r3, [r7, #8]
 8002f34:	2207      	movs	r2, #7
 8002f36:	f362 0306 	bfi	r3, r2, #0, #7
 8002f3a:	723b      	strb	r3, [r7, #8]
            break;
 8002f3c:	e011      	b.n	8002f62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 254;
 8002f42:	23fe      	movs	r3, #254	; 0xfe
 8002f44:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 63;
 8002f46:	7a7b      	ldrb	r3, [r7, #9]
 8002f48:	223f      	movs	r2, #63	; 0x3f
 8002f4a:	f362 0306 	bfi	r3, r2, #0, #7
 8002f4e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 63;
 8002f50:	7a3b      	ldrb	r3, [r7, #8]
 8002f52:	223f      	movs	r2, #63	; 0x3f
 8002f54:	f362 0306 	bfi	r3, r2, #0, #7
 8002f58:	723b      	strb	r3, [r7, #8]
            break;
 8002f5a:	e002      	b.n	8002f62 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xea>

        default:
            return -1;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f60:	e009      	b.n	8002f76 <DRV_CANFDSPI_BitTimeConfigureNominal40MHz+0xfe>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	79fb      	ldrb	r3, [r7, #7]
 8002f66:	2104      	movs	r1, #4
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fe fe11 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	73fb      	strb	r3, [r7, #15]

    return spiTransferError;
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	003e0f0f 	.word	0x003e0f0f

08002f84 <DRV_CANFDSPI_BitTimeConfigureData40MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData40MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	71fb      	strb	r3, [r7, #7]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	71bb      	strb	r3, [r7, #6]
 8002f92:	4613      	mov	r3, r2
 8002f94:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8002f9a:	4be2      	ldr	r3, [pc, #904]	; (8003324 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3a0>)
 8002f9c:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8002fa2:	7abb      	ldrb	r3, [r7, #10]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f362 0301 	bfi	r3, r2, #0, #2
 8002faa:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8002fb0:	79bb      	ldrb	r3, [r7, #6]
 8002fb2:	2b11      	cmp	r3, #17
 8002fb4:	f200 81f6 	bhi.w	80033a4 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x420>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x3c>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08003009 	.word	0x08003009
 8002fc4:	08003047 	.word	0x08003047
 8002fc8:	08003085 	.word	0x08003085
 8002fcc:	080030c3 	.word	0x080030c3
 8002fd0:	08003101 	.word	0x08003101
 8002fd4:	0800313f 	.word	0x0800313f
 8002fd8:	08003179 	.word	0x08003179
 8002fdc:	080031ad 	.word	0x080031ad
 8002fe0:	080031df 	.word	0x080031df
 8002fe4:	08003225 	.word	0x08003225
 8002fe8:	0800326b 	.word	0x0800326b
 8002fec:	080032a9 	.word	0x080032a9
 8002ff0:	080032e7 	.word	0x080032e7
 8002ff4:	08003329 	.word	0x08003329
 8002ff8:	08003367 	.word	0x08003367
 8002ffc:	080030c3 	.word	0x080030c3
 8003000:	08003179 	.word	0x08003179
 8003004:	080031df 	.word	0x080031df
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800300c:	7bbb      	ldrb	r3, [r7, #14]
 800300e:	221e      	movs	r2, #30
 8003010:	f362 0304 	bfi	r3, r2, #0, #5
 8003014:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003016:	7b7b      	ldrb	r3, [r7, #13]
 8003018:	2207      	movs	r2, #7
 800301a:	f362 0303 	bfi	r3, r2, #0, #4
 800301e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003020:	7b3b      	ldrb	r3, [r7, #12]
 8003022:	2207      	movs	r2, #7
 8003024:	f362 0303 	bfi	r3, r2, #0, #4
 8003028:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 800302a:	7a7b      	ldrb	r3, [r7, #9]
 800302c:	221f      	movs	r2, #31
 800302e:	f362 0306 	bfi	r3, r2, #0, #7
 8003032:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800303a:	b2da      	uxtb	r2, r3
 800303c:	7a3b      	ldrb	r3, [r7, #8]
 800303e:	f362 0305 	bfi	r3, r2, #0, #6
 8003042:	723b      	strb	r3, [r7, #8]
            break;
 8003044:	e1b1      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003046:	2300      	movs	r3, #0
 8003048:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 800304a:	7bbb      	ldrb	r3, [r7, #14]
 800304c:	220e      	movs	r2, #14
 800304e:	f362 0304 	bfi	r3, r2, #0, #5
 8003052:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003054:	7b7b      	ldrb	r3, [r7, #13]
 8003056:	2203      	movs	r2, #3
 8003058:	f362 0303 	bfi	r3, r2, #0, #4
 800305c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800305e:	7b3b      	ldrb	r3, [r7, #12]
 8003060:	2203      	movs	r2, #3
 8003062:	f362 0303 	bfi	r3, r2, #0, #4
 8003066:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003068:	7a7b      	ldrb	r3, [r7, #9]
 800306a:	220f      	movs	r2, #15
 800306c:	f362 0306 	bfi	r3, r2, #0, #7
 8003070:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003078:	b2da      	uxtb	r2, r3
 800307a:	7a3b      	ldrb	r3, [r7, #8]
 800307c:	f362 0305 	bfi	r3, r2, #0, #6
 8003080:	723b      	strb	r3, [r7, #8]
            break;
 8003082:	e192      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_3M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003084:	2300      	movs	r3, #0
 8003086:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003088:	7bbb      	ldrb	r3, [r7, #14]
 800308a:	2208      	movs	r2, #8
 800308c:	f362 0304 	bfi	r3, r2, #0, #5
 8003090:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003092:	7b7b      	ldrb	r3, [r7, #13]
 8003094:	2202      	movs	r2, #2
 8003096:	f362 0303 	bfi	r3, r2, #0, #4
 800309a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 800309c:	7b3b      	ldrb	r3, [r7, #12]
 800309e:	2202      	movs	r2, #2
 80030a0:	f362 0303 	bfi	r3, r2, #0, #4
 80030a4:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 80030a6:	7a7b      	ldrb	r3, [r7, #9]
 80030a8:	2209      	movs	r2, #9
 80030aa:	f362 0306 	bfi	r3, r2, #0, #7
 80030ae:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	7a3b      	ldrb	r3, [r7, #8]
 80030ba:	f362 0305 	bfi	r3, r2, #0, #6
 80030be:	723b      	strb	r3, [r7, #8]
            break;
 80030c0:	e173      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80030c6:	7bbb      	ldrb	r3, [r7, #14]
 80030c8:	2206      	movs	r2, #6
 80030ca:	f362 0304 	bfi	r3, r2, #0, #5
 80030ce:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80030d0:	7b7b      	ldrb	r3, [r7, #13]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f362 0303 	bfi	r3, r2, #0, #4
 80030d8:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80030da:	7b3b      	ldrb	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f362 0303 	bfi	r3, r2, #0, #4
 80030e2:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80030e4:	7a7b      	ldrb	r3, [r7, #9]
 80030e6:	2207      	movs	r2, #7
 80030e8:	f362 0306 	bfi	r3, r2, #0, #7
 80030ec:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	7a3b      	ldrb	r3, [r7, #8]
 80030f8:	f362 0305 	bfi	r3, r2, #0, #6
 80030fc:	723b      	strb	r3, [r7, #8]
            break;
 80030fe:	e154      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 4;
 8003104:	7bbb      	ldrb	r3, [r7, #14]
 8003106:	2204      	movs	r2, #4
 8003108:	f362 0304 	bfi	r3, r2, #0, #5
 800310c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800310e:	7b7b      	ldrb	r3, [r7, #13]
 8003110:	2201      	movs	r2, #1
 8003112:	f362 0303 	bfi	r3, r2, #0, #4
 8003116:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003118:	7b3b      	ldrb	r3, [r7, #12]
 800311a:	2201      	movs	r2, #1
 800311c:	f362 0303 	bfi	r3, r2, #0, #4
 8003120:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 5;
 8003122:	7a7b      	ldrb	r3, [r7, #9]
 8003124:	2205      	movs	r2, #5
 8003126:	f362 0306 	bfi	r3, r2, #0, #7
 800312a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003132:	b2da      	uxtb	r2, r3
 8003134:	7a3b      	ldrb	r3, [r7, #8]
 8003136:	f362 0305 	bfi	r3, r2, #0, #6
 800313a:	723b      	strb	r3, [r7, #8]
            break;
 800313c:	e135      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_6M7:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 3;
 8003142:	7bbb      	ldrb	r3, [r7, #14]
 8003144:	2203      	movs	r2, #3
 8003146:	f362 0304 	bfi	r3, r2, #0, #5
 800314a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800314c:	7b7b      	ldrb	r3, [r7, #13]
 800314e:	f36f 0303 	bfc	r3, #0, #4
 8003152:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003154:	7b3b      	ldrb	r3, [r7, #12]
 8003156:	f36f 0303 	bfc	r3, #0, #4
 800315a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 4;
 800315c:	7a7b      	ldrb	r3, [r7, #9]
 800315e:	2204      	movs	r2, #4
 8003160:	f362 0306 	bfi	r3, r2, #0, #7
 8003164:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800316c:	b2da      	uxtb	r2, r3
 800316e:	7a3b      	ldrb	r3, [r7, #8]
 8003170:	f362 0305 	bfi	r3, r2, #0, #6
 8003174:	723b      	strb	r3, [r7, #8]
            break;
 8003176:	e118      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_8M:
        case CAN_1000K_8M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 800317c:	7bbb      	ldrb	r3, [r7, #14]
 800317e:	2202      	movs	r2, #2
 8003180:	f362 0304 	bfi	r3, r2, #0, #5
 8003184:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003186:	7b7b      	ldrb	r3, [r7, #13]
 8003188:	f36f 0303 	bfc	r3, #0, #4
 800318c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800318e:	7b3b      	ldrb	r3, [r7, #12]
 8003190:	f36f 0303 	bfc	r3, #0, #4
 8003194:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003196:	7a7b      	ldrb	r3, [r7, #9]
 8003198:	2203      	movs	r2, #3
 800319a:	f362 0306 	bfi	r3, r2, #0, #7
 800319e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 1;
 80031a0:	7a3b      	ldrb	r3, [r7, #8]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f362 0305 	bfi	r3, r2, #0, #6
 80031a8:	723b      	strb	r3, [r7, #8]
            break;
 80031aa:	e0fe      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_500K_10M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 80031b0:	7bbb      	ldrb	r3, [r7, #14]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f362 0304 	bfi	r3, r2, #0, #5
 80031b8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80031ba:	7b7b      	ldrb	r3, [r7, #13]
 80031bc:	f36f 0303 	bfc	r3, #0, #4
 80031c0:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80031c2:	7b3b      	ldrb	r3, [r7, #12]
 80031c4:	f36f 0303 	bfc	r3, #0, #4
 80031c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 80031ca:	7a7b      	ldrb	r3, [r7, #9]
 80031cc:	2202      	movs	r2, #2
 80031ce:	f362 0306 	bfi	r3, r2, #0, #7
 80031d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = 0;
 80031d4:	7a3b      	ldrb	r3, [r7, #8]
 80031d6:	f36f 0305 	bfc	r3, #0, #6
 80031da:	723b      	strb	r3, [r7, #8]
            break;
 80031dc:	e0e5      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 1;
 80031de:	2301      	movs	r3, #1
 80031e0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 80031e2:	7bbb      	ldrb	r3, [r7, #14]
 80031e4:	221e      	movs	r2, #30
 80031e6:	f362 0304 	bfi	r3, r2, #0, #5
 80031ea:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 80031ec:	7b7b      	ldrb	r3, [r7, #13]
 80031ee:	2207      	movs	r2, #7
 80031f0:	f362 0303 	bfi	r3, r2, #0, #4
 80031f4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 80031f6:	7b3b      	ldrb	r3, [r7, #12]
 80031f8:	2207      	movs	r2, #7
 80031fa:	f362 0303 	bfi	r3, r2, #0, #4
 80031fe:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 8003200:	7a7b      	ldrb	r3, [r7, #9]
 8003202:	221f      	movs	r2, #31
 8003204:	f362 0306 	bfi	r3, r2, #0, #7
 8003208:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003210:	b2da      	uxtb	r2, r3
 8003212:	7a3b      	ldrb	r3, [r7, #8]
 8003214:	f362 0305 	bfi	r3, r2, #0, #6
 8003218:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 800321a:	7abb      	ldrb	r3, [r7, #10]
 800321c:	f36f 0301 	bfc	r3, #0, #2
 8003220:	72bb      	strb	r3, [r7, #10]
            break;
 8003222:	e0c2      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 1;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 8003228:	7bbb      	ldrb	r3, [r7, #14]
 800322a:	2211      	movs	r2, #17
 800322c:	f362 0304 	bfi	r3, r2, #0, #5
 8003230:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 8003232:	7b7b      	ldrb	r3, [r7, #13]
 8003234:	2204      	movs	r2, #4
 8003236:	f362 0303 	bfi	r3, r2, #0, #4
 800323a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 800323c:	7b3b      	ldrb	r3, [r7, #12]
 800323e:	2204      	movs	r2, #4
 8003240:	f362 0303 	bfi	r3, r2, #0, #4
 8003244:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 8003246:	7a7b      	ldrb	r3, [r7, #9]
 8003248:	2212      	movs	r2, #18
 800324a:	f362 0306 	bfi	r3, r2, #0, #7
 800324e:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003256:	b2da      	uxtb	r2, r3
 8003258:	7a3b      	ldrb	r3, [r7, #8]
 800325a:	f362 0305 	bfi	r3, r2, #0, #6
 800325e:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003260:	7abb      	ldrb	r3, [r7, #10]
 8003262:	f36f 0301 	bfc	r3, #0, #2
 8003266:	72bb      	strb	r3, [r7, #10]
            break;
 8003268:	e09f      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 800326a:	2300      	movs	r3, #0
 800326c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800326e:	7bbb      	ldrb	r3, [r7, #14]
 8003270:	221e      	movs	r2, #30
 8003272:	f362 0304 	bfi	r3, r2, #0, #5
 8003276:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003278:	7b7b      	ldrb	r3, [r7, #13]
 800327a:	2207      	movs	r2, #7
 800327c:	f362 0303 	bfi	r3, r2, #0, #4
 8003280:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 8003282:	7b3b      	ldrb	r3, [r7, #12]
 8003284:	2207      	movs	r2, #7
 8003286:	f362 0303 	bfi	r3, r2, #0, #4
 800328a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 800328c:	7a7b      	ldrb	r3, [r7, #9]
 800328e:	221f      	movs	r2, #31
 8003290:	f362 0306 	bfi	r3, r2, #0, #7
 8003294:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329c:	b2da      	uxtb	r2, r3
 800329e:	7a3b      	ldrb	r3, [r7, #8]
 80032a0:	f362 0305 	bfi	r3, r2, #0, #6
 80032a4:	723b      	strb	r3, [r7, #8]
            break;
 80032a6:	e080      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 18;
 80032ac:	7bbb      	ldrb	r3, [r7, #14]
 80032ae:	2212      	movs	r2, #18
 80032b0:	f362 0304 	bfi	r3, r2, #0, #5
 80032b4:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 5;
 80032b6:	7b7b      	ldrb	r3, [r7, #13]
 80032b8:	2205      	movs	r2, #5
 80032ba:	f362 0303 	bfi	r3, r2, #0, #4
 80032be:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 5;
 80032c0:	7b3b      	ldrb	r3, [r7, #12]
 80032c2:	2205      	movs	r2, #5
 80032c4:	f362 0303 	bfi	r3, r2, #0, #4
 80032c8:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 19;
 80032ca:	7a7b      	ldrb	r3, [r7, #9]
 80032cc:	2213      	movs	r2, #19
 80032ce:	f362 0306 	bfi	r3, r2, #0, #7
 80032d2:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	7a3b      	ldrb	r3, [r7, #8]
 80032de:	f362 0305 	bfi	r3, r2, #0, #6
 80032e2:	723b      	strb	r3, [r7, #8]
            break;
 80032e4:	e061      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 80032ea:	7bbb      	ldrb	r3, [r7, #14]
 80032ec:	220e      	movs	r2, #14
 80032ee:	f362 0304 	bfi	r3, r2, #0, #5
 80032f2:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 80032f4:	7b7b      	ldrb	r3, [r7, #13]
 80032f6:	2203      	movs	r2, #3
 80032f8:	f362 0303 	bfi	r3, r2, #0, #4
 80032fc:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80032fe:	7b3b      	ldrb	r3, [r7, #12]
 8003300:	2203      	movs	r2, #3
 8003302:	f362 0303 	bfi	r3, r2, #0, #4
 8003306:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003308:	7a7b      	ldrb	r3, [r7, #9]
 800330a:	220f      	movs	r2, #15
 800330c:	f362 0306 	bfi	r3, r2, #0, #7
 8003310:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	b2da      	uxtb	r2, r3
 800331a:	7a3b      	ldrb	r3, [r7, #8]
 800331c:	f362 0305 	bfi	r3, r2, #0, #6
 8003320:	723b      	strb	r3, [r7, #8]
            break;
 8003322:	e042      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
 8003324:	000e0303 	.word	0x000e0303
        case CAN_250K_3M:
            ciDbtcfg.bF.BRP = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 800332c:	7bbb      	ldrb	r3, [r7, #14]
 800332e:	2208      	movs	r2, #8
 8003330:	f362 0304 	bfi	r3, r2, #0, #5
 8003334:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003336:	7b7b      	ldrb	r3, [r7, #13]
 8003338:	2202      	movs	r2, #2
 800333a:	f362 0303 	bfi	r3, r2, #0, #4
 800333e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003340:	7b3b      	ldrb	r3, [r7, #12]
 8003342:	2202      	movs	r2, #2
 8003344:	f362 0303 	bfi	r3, r2, #0, #4
 8003348:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 800334a:	7a7b      	ldrb	r3, [r7, #9]
 800334c:	2209      	movs	r2, #9
 800334e:	f362 0306 	bfi	r3, r2, #0, #7
 8003352:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800335a:	b2da      	uxtb	r2, r3
 800335c:	7a3b      	ldrb	r3, [r7, #8]
 800335e:	f362 0305 	bfi	r3, r2, #0, #6
 8003362:	723b      	strb	r3, [r7, #8]
            break;
 8003364:	e021      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 800336a:	7bbb      	ldrb	r3, [r7, #14]
 800336c:	2206      	movs	r2, #6
 800336e:	f362 0304 	bfi	r3, r2, #0, #5
 8003372:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003374:	7b7b      	ldrb	r3, [r7, #13]
 8003376:	2201      	movs	r2, #1
 8003378:	f362 0303 	bfi	r3, r2, #0, #4
 800337c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 800337e:	7b3b      	ldrb	r3, [r7, #12]
 8003380:	2201      	movs	r2, #1
 8003382:	f362 0303 	bfi	r3, r2, #0, #4
 8003386:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003388:	7a7b      	ldrb	r3, [r7, #9]
 800338a:	2207      	movs	r2, #7
 800338c:	f362 0306 	bfi	r3, r2, #0, #7
 8003390:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003398:	b2da      	uxtb	r2, r3
 800339a:	7a3b      	ldrb	r3, [r7, #8]
 800339c:	f362 0305 	bfi	r3, r2, #0, #6
 80033a0:	723b      	strb	r3, [r7, #8]
            break;
 80033a2:	e002      	b.n	80033aa <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x426>

        default:
            return -1;
 80033a4:	f04f 33ff 	mov.w	r3, #4294967295
 80033a8:	e01f      	b.n	80033ea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2108      	movs	r1, #8
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fe fbed 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 80033b6:	4603      	mov	r3, r0
 80033b8:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80033ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d002      	beq.n	80033c8 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x444>
        return -2;
 80033c2:	f06f 0301 	mvn.w	r3, #1
 80033c6:	e010      	b.n	80033ea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	210c      	movs	r1, #12
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fbde 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 80033d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x462>
        return -3;
 80033e0:	f06f 0302 	mvn.w	r3, #2
 80033e4:	e001      	b.n	80033ea <DRV_CANFDSPI_BitTimeConfigureData40MHz+0x466>
    }

    return spiTransferError;
 80033e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop

080033f4 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	460a      	mov	r2, r1
 80033fe:	71fb      	strb	r3, [r7, #7]
 8003400:	4613      	mov	r3, r2
 8003402:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003408:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x114>)
 800340a:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 800340c:	79bb      	ldrb	r3, [r7, #6]
 800340e:	2b11      	cmp	r3, #17
 8003410:	d862      	bhi.n	80034d8 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xe4>
 8003412:	a201      	add	r2, pc, #4	; (adr r2, 8003418 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x24>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	08003461 	.word	0x08003461
 800341c:	08003461 	.word	0x08003461
 8003420:	080034d9 	.word	0x080034d9
 8003424:	08003461 	.word	0x08003461
 8003428:	08003461 	.word	0x08003461
 800342c:	08003461 	.word	0x08003461
 8003430:	08003461 	.word	0x08003461
 8003434:	08003461 	.word	0x08003461
 8003438:	0800347f 	.word	0x0800347f
 800343c:	0800347f 	.word	0x0800347f
 8003440:	0800347f 	.word	0x0800347f
 8003444:	0800347f 	.word	0x0800347f
 8003448:	0800347f 	.word	0x0800347f
 800344c:	0800347f 	.word	0x0800347f
 8003450:	0800347f 	.word	0x0800347f
 8003454:	0800349d 	.word	0x0800349d
 8003458:	0800349d 	.word	0x0800349d
 800345c:	080034bb 	.word	0x080034bb
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 8003460:	2300      	movs	r3, #0
 8003462:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 8003464:	231e      	movs	r3, #30
 8003466:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 8003468:	7a7b      	ldrb	r3, [r7, #9]
 800346a:	2207      	movs	r2, #7
 800346c:	f362 0306 	bfi	r3, r2, #0, #7
 8003470:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 8003472:	7a3b      	ldrb	r3, [r7, #8]
 8003474:	2207      	movs	r2, #7
 8003476:	f362 0306 	bfi	r3, r2, #0, #7
 800347a:	723b      	strb	r3, [r7, #8]
            break;
 800347c:	e02f      	b.n	80034de <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 8003482:	233e      	movs	r3, #62	; 0x3e
 8003484:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 8003486:	7a7b      	ldrb	r3, [r7, #9]
 8003488:	220f      	movs	r2, #15
 800348a:	f362 0306 	bfi	r3, r2, #0, #7
 800348e:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003490:	7a3b      	ldrb	r3, [r7, #8]
 8003492:	220f      	movs	r2, #15
 8003494:	f362 0306 	bfi	r3, r2, #0, #7
 8003498:	723b      	strb	r3, [r7, #8]
            break;
 800349a:	e020      	b.n	80034de <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80034a0:	230e      	movs	r3, #14
 80034a2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80034a4:	7a7b      	ldrb	r3, [r7, #9]
 80034a6:	2203      	movs	r2, #3
 80034a8:	f362 0306 	bfi	r3, r2, #0, #7
 80034ac:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80034ae:	7a3b      	ldrb	r3, [r7, #8]
 80034b0:	2203      	movs	r2, #3
 80034b2:	f362 0306 	bfi	r3, r2, #0, #7
 80034b6:	723b      	strb	r3, [r7, #8]
            break;
 80034b8:	e011      	b.n	80034de <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 80034ba:	2300      	movs	r3, #0
 80034bc:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 126;
 80034be:	237e      	movs	r3, #126	; 0x7e
 80034c0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 31;
 80034c2:	7a7b      	ldrb	r3, [r7, #9]
 80034c4:	221f      	movs	r2, #31
 80034c6:	f362 0306 	bfi	r3, r2, #0, #7
 80034ca:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 31;
 80034cc:	7a3b      	ldrb	r3, [r7, #8]
 80034ce:	221f      	movs	r2, #31
 80034d0:	f362 0306 	bfi	r3, r2, #0, #7
 80034d4:	723b      	strb	r3, [r7, #8]
            break;
 80034d6:	e002      	b.n	80034de <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0xea>

        default:
            return -1;
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	e010      	b.n	8003500 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	2104      	movs	r1, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fe fb53 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 80034ea:	4603      	mov	r3, r0
 80034ec:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x108>
        return -2;
 80034f6:	f06f 0301 	mvn.w	r3, #1
 80034fa:	e001      	b.n	8003500 <DRV_CANFDSPI_BitTimeConfigureNominal20MHz+0x10c>
    }

    return spiTransferError;
 80034fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	003e0f0f 	.word	0x003e0f0f

0800350c <DRV_CANFDSPI_BitTimeConfigureData20MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData20MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	71fb      	strb	r3, [r7, #7]
 8003516:	460b      	mov	r3, r1
 8003518:	71bb      	strb	r3, [r7, #6]
 800351a:	4613      	mov	r3, r2
 800351c:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800351e:	2300      	movs	r3, #0
 8003520:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 8003522:	4bce      	ldr	r3, [pc, #824]	; (800385c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x350>)
 8003524:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 800352a:	7abb      	ldrb	r3, [r7, #10]
 800352c:	2202      	movs	r2, #2
 800352e:	f362 0301 	bfi	r3, r2, #0, #2
 8003532:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 8003538:	79bb      	ldrb	r3, [r7, #6]
 800353a:	2b11      	cmp	r3, #17
 800353c:	f200 8166 	bhi.w	800380c <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x300>
 8003540:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x3c>)
 8003542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003546:	bf00      	nop
 8003548:	08003591 	.word	0x08003591
 800354c:	080035cf 	.word	0x080035cf
 8003550:	0800380d 	.word	0x0800380d
 8003554:	0800360d 	.word	0x0800360d
 8003558:	08003647 	.word	0x08003647
 800355c:	08003681 	.word	0x08003681
 8003560:	08003681 	.word	0x08003681
 8003564:	08003681 	.word	0x08003681
 8003568:	08003687 	.word	0x08003687
 800356c:	080036cd 	.word	0x080036cd
 8003570:	08003713 	.word	0x08003713
 8003574:	08003751 	.word	0x08003751
 8003578:	0800378f 	.word	0x0800378f
 800357c:	080037cd 	.word	0x080037cd
 8003580:	080037d3 	.word	0x080037d3
 8003584:	0800360d 	.word	0x0800360d
 8003588:	08003681 	.word	0x08003681
 800358c:	08003687 	.word	0x08003687
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003590:	2300      	movs	r3, #0
 8003592:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003594:	7bbb      	ldrb	r3, [r7, #14]
 8003596:	220e      	movs	r2, #14
 8003598:	f362 0304 	bfi	r3, r2, #0, #5
 800359c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 800359e:	7b7b      	ldrb	r3, [r7, #13]
 80035a0:	2203      	movs	r2, #3
 80035a2:	f362 0303 	bfi	r3, r2, #0, #4
 80035a6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 80035a8:	7b3b      	ldrb	r3, [r7, #12]
 80035aa:	2203      	movs	r2, #3
 80035ac:	f362 0303 	bfi	r3, r2, #0, #4
 80035b0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 80035b2:	7a7b      	ldrb	r3, [r7, #9]
 80035b4:	220f      	movs	r2, #15
 80035b6:	f362 0306 	bfi	r3, r2, #0, #7
 80035ba:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	7a3b      	ldrb	r3, [r7, #8]
 80035c6:	f362 0305 	bfi	r3, r2, #0, #6
 80035ca:	723b      	strb	r3, [r7, #8]
            break;
 80035cc:	e121      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 80035d2:	7bbb      	ldrb	r3, [r7, #14]
 80035d4:	2206      	movs	r2, #6
 80035d6:	f362 0304 	bfi	r3, r2, #0, #5
 80035da:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 80035dc:	7b7b      	ldrb	r3, [r7, #13]
 80035de:	2201      	movs	r2, #1
 80035e0:	f362 0303 	bfi	r3, r2, #0, #4
 80035e4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80035e6:	7b3b      	ldrb	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f362 0303 	bfi	r3, r2, #0, #4
 80035ee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80035f0:	7a7b      	ldrb	r3, [r7, #9]
 80035f2:	2207      	movs	r2, #7
 80035f4:	f362 0306 	bfi	r3, r2, #0, #7
 80035f8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003600:	b2da      	uxtb	r2, r3
 8003602:	7a3b      	ldrb	r3, [r7, #8]
 8003604:	f362 0305 	bfi	r3, r2, #0, #6
 8003608:	723b      	strb	r3, [r7, #8]
            break;
 800360a:	e102      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_4M:
        case CAN_1000K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003610:	7bbb      	ldrb	r3, [r7, #14]
 8003612:	2202      	movs	r2, #2
 8003614:	f362 0304 	bfi	r3, r2, #0, #5
 8003618:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	f36f 0303 	bfc	r3, #0, #4
 8003620:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003622:	7b3b      	ldrb	r3, [r7, #12]
 8003624:	f36f 0303 	bfc	r3, #0, #4
 8003628:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 800362a:	7a7b      	ldrb	r3, [r7, #9]
 800362c:	2203      	movs	r2, #3
 800362e:	f362 0306 	bfi	r3, r2, #0, #7
 8003632:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800363a:	b2da      	uxtb	r2, r3
 800363c:	7a3b      	ldrb	r3, [r7, #8]
 800363e:	f362 0305 	bfi	r3, r2, #0, #6
 8003642:	723b      	strb	r3, [r7, #8]
            break;
 8003644:	e0e5      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_5M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 1;
 800364a:	7bbb      	ldrb	r3, [r7, #14]
 800364c:	2201      	movs	r2, #1
 800364e:	f362 0304 	bfi	r3, r2, #0, #5
 8003652:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003654:	7b7b      	ldrb	r3, [r7, #13]
 8003656:	f36f 0303 	bfc	r3, #0, #4
 800365a:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 800365c:	7b3b      	ldrb	r3, [r7, #12]
 800365e:	f36f 0303 	bfc	r3, #0, #4
 8003662:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 2;
 8003664:	7a7b      	ldrb	r3, [r7, #9]
 8003666:	2202      	movs	r2, #2
 8003668:	f362 0306 	bfi	r3, r2, #0, #7
 800366c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003674:	b2da      	uxtb	r2, r3
 8003676:	7a3b      	ldrb	r3, [r7, #8]
 8003678:	f362 0305 	bfi	r3, r2, #0, #6
 800367c:	723b      	strb	r3, [r7, #8]
            break;
 800367e:	e0c8      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003680:	f04f 33ff 	mov.w	r3, #4294967295
 8003684:	e0e5      	b.n	8003852 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003686:	2300      	movs	r3, #0
 8003688:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 30;
 800368a:	7bbb      	ldrb	r3, [r7, #14]
 800368c:	221e      	movs	r2, #30
 800368e:	f362 0304 	bfi	r3, r2, #0, #5
 8003692:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 7;
 8003694:	7b7b      	ldrb	r3, [r7, #13]
 8003696:	2207      	movs	r2, #7
 8003698:	f362 0303 	bfi	r3, r2, #0, #4
 800369c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 7;
 800369e:	7b3b      	ldrb	r3, [r7, #12]
 80036a0:	2207      	movs	r2, #7
 80036a2:	f362 0303 	bfi	r3, r2, #0, #4
 80036a6:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 31;
 80036a8:	7a7b      	ldrb	r3, [r7, #9]
 80036aa:	221f      	movs	r2, #31
 80036ac:	f362 0306 	bfi	r3, r2, #0, #7
 80036b0:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	7a3b      	ldrb	r3, [r7, #8]
 80036bc:	f362 0305 	bfi	r3, r2, #0, #6
 80036c0:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 80036c2:	7abb      	ldrb	r3, [r7, #10]
 80036c4:	f36f 0301 	bfc	r3, #0, #2
 80036c8:	72bb      	strb	r3, [r7, #10]
            break;
 80036ca:	e0a2      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 17;
 80036d0:	7bbb      	ldrb	r3, [r7, #14]
 80036d2:	2211      	movs	r2, #17
 80036d4:	f362 0304 	bfi	r3, r2, #0, #5
 80036d8:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 4;
 80036da:	7b7b      	ldrb	r3, [r7, #13]
 80036dc:	2204      	movs	r2, #4
 80036de:	f362 0303 	bfi	r3, r2, #0, #4
 80036e2:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 4;
 80036e4:	7b3b      	ldrb	r3, [r7, #12]
 80036e6:	2204      	movs	r2, #4
 80036e8:	f362 0303 	bfi	r3, r2, #0, #4
 80036ec:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 18;
 80036ee:	7a7b      	ldrb	r3, [r7, #9]
 80036f0:	2212      	movs	r2, #18
 80036f2:	f362 0306 	bfi	r3, r2, #0, #7
 80036f6:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	7a3b      	ldrb	r3, [r7, #8]
 8003702:	f362 0305 	bfi	r3, r2, #0, #6
 8003706:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003708:	7abb      	ldrb	r3, [r7, #10]
 800370a:	f36f 0301 	bfc	r3, #0, #2
 800370e:	72bb      	strb	r3, [r7, #10]
            break;
 8003710:	e07f      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003716:	7bbb      	ldrb	r3, [r7, #14]
 8003718:	220e      	movs	r2, #14
 800371a:	f362 0304 	bfi	r3, r2, #0, #5
 800371e:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003720:	7b7b      	ldrb	r3, [r7, #13]
 8003722:	2203      	movs	r2, #3
 8003724:	f362 0303 	bfi	r3, r2, #0, #4
 8003728:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 800372a:	7b3b      	ldrb	r3, [r7, #12]
 800372c:	2203      	movs	r2, #3
 800372e:	f362 0303 	bfi	r3, r2, #0, #4
 8003732:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003734:	7a7b      	ldrb	r3, [r7, #9]
 8003736:	220f      	movs	r2, #15
 8003738:	f362 0306 	bfi	r3, r2, #0, #7
 800373c:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	b2da      	uxtb	r2, r3
 8003746:	7a3b      	ldrb	r3, [r7, #8]
 8003748:	f362 0305 	bfi	r3, r2, #0, #6
 800374c:	723b      	strb	r3, [r7, #8]
            break;
 800374e:	e060      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_1M5:
            ciDbtcfg.bF.BRP = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 8;
 8003754:	7bbb      	ldrb	r3, [r7, #14]
 8003756:	2208      	movs	r2, #8
 8003758:	f362 0304 	bfi	r3, r2, #0, #5
 800375c:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 800375e:	7b7b      	ldrb	r3, [r7, #13]
 8003760:	2202      	movs	r2, #2
 8003762:	f362 0303 	bfi	r3, r2, #0, #4
 8003766:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003768:	7b3b      	ldrb	r3, [r7, #12]
 800376a:	2202      	movs	r2, #2
 800376c:	f362 0303 	bfi	r3, r2, #0, #4
 8003770:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 9;
 8003772:	7a7b      	ldrb	r3, [r7, #9]
 8003774:	2209      	movs	r2, #9
 8003776:	f362 0306 	bfi	r3, r2, #0, #7
 800377a:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003782:	b2da      	uxtb	r2, r3
 8003784:	7a3b      	ldrb	r3, [r7, #8]
 8003786:	f362 0305 	bfi	r3, r2, #0, #6
 800378a:	723b      	strb	r3, [r7, #8]
            break;
 800378c:	e041      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 800378e:	2300      	movs	r3, #0
 8003790:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003792:	7bbb      	ldrb	r3, [r7, #14]
 8003794:	2206      	movs	r2, #6
 8003796:	f362 0304 	bfi	r3, r2, #0, #5
 800379a:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 800379c:	7b7b      	ldrb	r3, [r7, #13]
 800379e:	2201      	movs	r2, #1
 80037a0:	f362 0303 	bfi	r3, r2, #0, #4
 80037a4:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 80037a6:	7b3b      	ldrb	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f362 0303 	bfi	r3, r2, #0, #4
 80037ae:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 80037b0:	7a7b      	ldrb	r3, [r7, #9]
 80037b2:	2207      	movs	r2, #7
 80037b4:	f362 0306 	bfi	r3, r2, #0, #7
 80037b8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	7a3b      	ldrb	r3, [r7, #8]
 80037c4:	f362 0305 	bfi	r3, r2, #0, #6
 80037c8:	723b      	strb	r3, [r7, #8]
            break;
 80037ca:	e022      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>
        case CAN_250K_3M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 80037cc:	f04f 33ff 	mov.w	r3, #4294967295
 80037d0:	e03f      	b.n	8003852 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
        case CAN_250K_4M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 80037d6:	7bbb      	ldrb	r3, [r7, #14]
 80037d8:	2202      	movs	r2, #2
 80037da:	f362 0304 	bfi	r3, r2, #0, #5
 80037de:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 80037e0:	7b7b      	ldrb	r3, [r7, #13]
 80037e2:	f36f 0303 	bfc	r3, #0, #4
 80037e6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 80037e8:	7b3b      	ldrb	r3, [r7, #12]
 80037ea:	f36f 0303 	bfc	r3, #0, #4
 80037ee:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 80037f0:	7a7b      	ldrb	r3, [r7, #9]
 80037f2:	2203      	movs	r2, #3
 80037f4:	f362 0306 	bfi	r3, r2, #0, #7
 80037f8:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003800:	b2da      	uxtb	r2, r3
 8003802:	7a3b      	ldrb	r3, [r7, #8]
 8003804:	f362 0305 	bfi	r3, r2, #0, #6
 8003808:	723b      	strb	r3, [r7, #8]
            break;
 800380a:	e002      	b.n	8003812 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x306>

        default:
            return -1;
 800380c:	f04f 33ff 	mov.w	r3, #4294967295
 8003810:	e01f      	b.n	8003852 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	2108      	movs	r1, #8
 8003818:	4618      	mov	r0, r3
 800381a:	f7fe f9b9 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 800381e:	4603      	mov	r3, r0
 8003820:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x324>
        return -2;
 800382a:	f06f 0301 	mvn.w	r3, #1
 800382e:	e010      	b.n	8003852 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	210c      	movs	r1, #12
 8003836:	4618      	mov	r0, r3
 8003838:	f7fe f9aa 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 800383c:	4603      	mov	r3, r0
 800383e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003840:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x342>
        return -3;
 8003848:	f06f 0302 	mvn.w	r3, #2
 800384c:	e001      	b.n	8003852 <DRV_CANFDSPI_BitTimeConfigureData20MHz+0x346>
    }

    return spiTransferError;
 800384e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	000e0303 	.word	0x000e0303

08003860 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureNominal10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	460a      	mov	r2, r1
 800386a:	71fb      	strb	r3, [r7, #7]
 800386c:	4613      	mov	r3, r2
 800386e:	71bb      	strb	r3, [r7, #6]
    int8_t spiTransferError = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]
    REG_CiNBTCFG ciNbtcfg;

    ciNbtcfg.word = canControlResetValues[cREGADDR_CiNBTCFG / 4];
 8003874:	4b3f      	ldr	r3, [pc, #252]	; (8003974 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x114>)
 8003876:	60bb      	str	r3, [r7, #8]

    // Arbitration Bit rate
    switch (bitTime) {
 8003878:	79bb      	ldrb	r3, [r7, #6]
 800387a:	2b11      	cmp	r3, #17
 800387c:	d862      	bhi.n	8003944 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xe4>
 800387e:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x24>)
 8003880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003884:	080038cd 	.word	0x080038cd
 8003888:	080038cd 	.word	0x080038cd
 800388c:	08003945 	.word	0x08003945
 8003890:	080038cd 	.word	0x080038cd
 8003894:	080038cd 	.word	0x080038cd
 8003898:	080038cd 	.word	0x080038cd
 800389c:	080038cd 	.word	0x080038cd
 80038a0:	080038cd 	.word	0x080038cd
 80038a4:	080038eb 	.word	0x080038eb
 80038a8:	080038eb 	.word	0x080038eb
 80038ac:	080038eb 	.word	0x080038eb
 80038b0:	080038eb 	.word	0x080038eb
 80038b4:	080038eb 	.word	0x080038eb
 80038b8:	080038eb 	.word	0x080038eb
 80038bc:	080038eb 	.word	0x080038eb
 80038c0:	08003909 	.word	0x08003909
 80038c4:	08003909 	.word	0x08003909
 80038c8:	08003927 	.word	0x08003927
        case CAN_500K_4M:
        case CAN_500K_5M:
        case CAN_500K_6M7:
        case CAN_500K_8M:
        case CAN_500K_10M:
            ciNbtcfg.bF.BRP = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 14;
 80038d0:	230e      	movs	r3, #14
 80038d2:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 3;
 80038d4:	7a7b      	ldrb	r3, [r7, #9]
 80038d6:	2203      	movs	r2, #3
 80038d8:	f362 0306 	bfi	r3, r2, #0, #7
 80038dc:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 3;
 80038de:	7a3b      	ldrb	r3, [r7, #8]
 80038e0:	2203      	movs	r2, #3
 80038e2:	f362 0306 	bfi	r3, r2, #0, #7
 80038e6:	723b      	strb	r3, [r7, #8]
            break;
 80038e8:	e02f      	b.n	800394a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>
        case CAN_250K_1M:
        case CAN_250K_1M5:
        case CAN_250K_2M:
        case CAN_250K_3M:
        case CAN_250K_4M:
            ciNbtcfg.bF.BRP = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 30;
 80038ee:	231e      	movs	r3, #30
 80038f0:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 7;
 80038f2:	7a7b      	ldrb	r3, [r7, #9]
 80038f4:	2207      	movs	r2, #7
 80038f6:	f362 0306 	bfi	r3, r2, #0, #7
 80038fa:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 7;
 80038fc:	7a3b      	ldrb	r3, [r7, #8]
 80038fe:	2207      	movs	r2, #7
 8003900:	f362 0306 	bfi	r3, r2, #0, #7
 8003904:	723b      	strb	r3, [r7, #8]
            break;
 8003906:	e020      	b.n	800394a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_1000K_4M:
        case CAN_1000K_8M:
            ciNbtcfg.bF.BRP = 0;
 8003908:	2300      	movs	r3, #0
 800390a:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 7;
 800390c:	2307      	movs	r3, #7
 800390e:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 2;
 8003910:	7a7b      	ldrb	r3, [r7, #9]
 8003912:	2202      	movs	r2, #2
 8003914:	f362 0306 	bfi	r3, r2, #0, #7
 8003918:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 2;
 800391a:	7a3b      	ldrb	r3, [r7, #8]
 800391c:	2202      	movs	r2, #2
 800391e:	f362 0306 	bfi	r3, r2, #0, #7
 8003922:	723b      	strb	r3, [r7, #8]
            break;
 8003924:	e011      	b.n	800394a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        case CAN_125K_500K:
            ciNbtcfg.bF.BRP = 0;
 8003926:	2300      	movs	r3, #0
 8003928:	72fb      	strb	r3, [r7, #11]
            ciNbtcfg.bF.TSEG1 = 62;
 800392a:	233e      	movs	r3, #62	; 0x3e
 800392c:	72bb      	strb	r3, [r7, #10]
            ciNbtcfg.bF.TSEG2 = 15;
 800392e:	7a7b      	ldrb	r3, [r7, #9]
 8003930:	220f      	movs	r2, #15
 8003932:	f362 0306 	bfi	r3, r2, #0, #7
 8003936:	727b      	strb	r3, [r7, #9]
            ciNbtcfg.bF.SJW = 15;
 8003938:	7a3b      	ldrb	r3, [r7, #8]
 800393a:	220f      	movs	r2, #15
 800393c:	f362 0306 	bfi	r3, r2, #0, #7
 8003940:	723b      	strb	r3, [r7, #8]
            break;
 8003942:	e002      	b.n	800394a <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0xea>

        default:
            return -1;
 8003944:	f04f 33ff 	mov.w	r3, #4294967295
 8003948:	e010      	b.n	800396c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiNBTCFG, ciNbtcfg.word);
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	2104      	movs	r1, #4
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe f91d 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 8003956:	4603      	mov	r3, r0
 8003958:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 800395a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x108>
        return -2;
 8003962:	f06f 0301 	mvn.w	r3, #1
 8003966:	e001      	b.n	800396c <DRV_CANFDSPI_BitTimeConfigureNominal10MHz+0x10c>
    }

    return spiTransferError;
 8003968:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	003e0f0f 	.word	0x003e0f0f

08003978 <DRV_CANFDSPI_BitTimeConfigureData10MHz>:

int8_t DRV_CANFDSPI_BitTimeConfigureData10MHz(CANFDSPI_MODULE_ID index,
        CAN_BITTIME_SETUP bitTime, CAN_SSP_MODE sspMode)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
 8003982:	460b      	mov	r3, r1
 8003984:	71bb      	strb	r3, [r7, #6]
 8003986:	4613      	mov	r3, r2
 8003988:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	75fb      	strb	r3, [r7, #23]
    REG_CiDBTCFG ciDbtcfg;
    REG_CiTDC ciTdc;
    //    sspMode;

    ciDbtcfg.word = canControlResetValues[cREGADDR_CiDBTCFG / 4];
 800398e:	4b92      	ldr	r3, [pc, #584]	; (8003bd8 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x260>)
 8003990:	60fb      	str	r3, [r7, #12]
    ciTdc.word = 0;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]

    // Configure Bit time and sample point
    ciTdc.bF.TDCMode = CAN_SSP_MODE_AUTO;
 8003996:	7abb      	ldrb	r3, [r7, #10]
 8003998:	2202      	movs	r2, #2
 800399a:	f362 0301 	bfi	r3, r2, #0, #2
 800399e:	72bb      	strb	r3, [r7, #10]
    uint32_t tdcValue = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	613b      	str	r3, [r7, #16]

    // Data Bit rate and SSP
    switch (bitTime) {
 80039a4:	79bb      	ldrb	r3, [r7, #6]
 80039a6:	2b11      	cmp	r3, #17
 80039a8:	f200 80ef 	bhi.w	8003b8a <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x212>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x3c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039fd 	.word	0x080039fd
 80039b8:	08003a3b 	.word	0x08003a3b
 80039bc:	08003b8b 	.word	0x08003b8b
 80039c0:	08003a75 	.word	0x08003a75
 80039c4:	08003a75 	.word	0x08003a75
 80039c8:	08003a75 	.word	0x08003a75
 80039cc:	08003a75 	.word	0x08003a75
 80039d0:	08003a75 	.word	0x08003a75
 80039d4:	08003a7b 	.word	0x08003a7b
 80039d8:	08003ac1 	.word	0x08003ac1
 80039dc:	08003b07 	.word	0x08003b07
 80039e0:	08003b45 	.word	0x08003b45
 80039e4:	08003b4b 	.word	0x08003b4b
 80039e8:	08003b85 	.word	0x08003b85
 80039ec:	08003b85 	.word	0x08003b85
 80039f0:	08003a75 	.word	0x08003a75
 80039f4:	08003a75 	.word	0x08003a75
 80039f8:	08003a7b 	.word	0x08003a7b
        case CAN_500K_1M:
            ciDbtcfg.bF.BRP = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003a00:	7bbb      	ldrb	r3, [r7, #14]
 8003a02:	2206      	movs	r2, #6
 8003a04:	f362 0304 	bfi	r3, r2, #0, #5
 8003a08:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003a0a:	7b7b      	ldrb	r3, [r7, #13]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f362 0303 	bfi	r3, r2, #0, #4
 8003a12:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003a14:	7b3b      	ldrb	r3, [r7, #12]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f362 0303 	bfi	r3, r2, #0, #4
 8003a1c:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003a1e:	7a7b      	ldrb	r3, [r7, #9]
 8003a20:	2207      	movs	r2, #7
 8003a22:	f362 0306 	bfi	r3, r2, #0, #7
 8003a26:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	7a3b      	ldrb	r3, [r7, #8]
 8003a32:	f362 0305 	bfi	r3, r2, #0, #6
 8003a36:	723b      	strb	r3, [r7, #8]
            break;
 8003a38:	e0aa      	b.n	8003b90 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_2M:
            // Data BR
            ciDbtcfg.bF.BRP = 0;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003a3e:	7bbb      	ldrb	r3, [r7, #14]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f362 0304 	bfi	r3, r2, #0, #5
 8003a46:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003a48:	7b7b      	ldrb	r3, [r7, #13]
 8003a4a:	f36f 0303 	bfc	r3, #0, #4
 8003a4e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003a50:	7b3b      	ldrb	r3, [r7, #12]
 8003a52:	f36f 0303 	bfc	r3, #0, #4
 8003a56:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003a58:	7a7b      	ldrb	r3, [r7, #9]
 8003a5a:	2203      	movs	r2, #3
 8003a5c:	f362 0306 	bfi	r3, r2, #0, #7
 8003a60:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a68:	b2da      	uxtb	r2, r3
 8003a6a:	7a3b      	ldrb	r3, [r7, #8]
 8003a6c:	f362 0305 	bfi	r3, r2, #0, #6
 8003a70:	723b      	strb	r3, [r7, #8]
            break;
 8003a72:	e08d      	b.n	8003b90 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_500K_8M:
        case CAN_500K_10M:
        case CAN_1000K_4M:
        case CAN_1000K_8M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003a74:	f04f 33ff 	mov.w	r3, #4294967295
 8003a78:	e0aa      	b.n	8003bd0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        case CAN_250K_500K:
        case CAN_125K_500K:
            ciDbtcfg.bF.BRP = 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 14;
 8003a7e:	7bbb      	ldrb	r3, [r7, #14]
 8003a80:	220e      	movs	r2, #14
 8003a82:	f362 0304 	bfi	r3, r2, #0, #5
 8003a86:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 3;
 8003a88:	7b7b      	ldrb	r3, [r7, #13]
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	f362 0303 	bfi	r3, r2, #0, #4
 8003a90:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 3;
 8003a92:	7b3b      	ldrb	r3, [r7, #12]
 8003a94:	2203      	movs	r2, #3
 8003a96:	f362 0303 	bfi	r3, r2, #0, #4
 8003a9a:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 15;
 8003a9c:	7a7b      	ldrb	r3, [r7, #9]
 8003a9e:	220f      	movs	r2, #15
 8003aa0:	f362 0306 	bfi	r3, r2, #0, #7
 8003aa4:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	7a3b      	ldrb	r3, [r7, #8]
 8003ab0:	f362 0305 	bfi	r3, r2, #0, #6
 8003ab4:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003ab6:	7abb      	ldrb	r3, [r7, #10]
 8003ab8:	f36f 0301 	bfc	r3, #0, #2
 8003abc:	72bb      	strb	r3, [r7, #10]
            break;
 8003abe:	e067      	b.n	8003b90 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_833K:
            ciDbtcfg.bF.BRP = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 7;
 8003ac4:	7bbb      	ldrb	r3, [r7, #14]
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	f362 0304 	bfi	r3, r2, #0, #5
 8003acc:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 2;
 8003ace:	7b7b      	ldrb	r3, [r7, #13]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f362 0303 	bfi	r3, r2, #0, #4
 8003ad6:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 2;
 8003ad8:	7b3b      	ldrb	r3, [r7, #12]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f362 0303 	bfi	r3, r2, #0, #4
 8003ae0:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 8;
 8003ae2:	7a7b      	ldrb	r3, [r7, #9]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	f362 0306 	bfi	r3, r2, #0, #7
 8003aea:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	7a3b      	ldrb	r3, [r7, #8]
 8003af6:	f362 0305 	bfi	r3, r2, #0, #6
 8003afa:	723b      	strb	r3, [r7, #8]
            ciTdc.bF.TDCMode = CAN_SSP_MODE_OFF;
 8003afc:	7abb      	ldrb	r3, [r7, #10]
 8003afe:	f36f 0301 	bfc	r3, #0, #2
 8003b02:	72bb      	strb	r3, [r7, #10]
            break;
 8003b04:	e044      	b.n	8003b90 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M:
            ciDbtcfg.bF.BRP = 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 6;
 8003b0a:	7bbb      	ldrb	r3, [r7, #14]
 8003b0c:	2206      	movs	r2, #6
 8003b0e:	f362 0304 	bfi	r3, r2, #0, #5
 8003b12:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 1;
 8003b14:	7b7b      	ldrb	r3, [r7, #13]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f362 0303 	bfi	r3, r2, #0, #4
 8003b1c:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 1;
 8003b1e:	7b3b      	ldrb	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f362 0303 	bfi	r3, r2, #0, #4
 8003b26:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 7;
 8003b28:	7a7b      	ldrb	r3, [r7, #9]
 8003b2a:	2207      	movs	r2, #7
 8003b2c:	f362 0306 	bfi	r3, r2, #0, #7
 8003b30:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	7a3b      	ldrb	r3, [r7, #8]
 8003b3c:	f362 0305 	bfi	r3, r2, #0, #6
 8003b40:	723b      	strb	r3, [r7, #8]
            break;
 8003b42:	e025      	b.n	8003b90 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_1M5:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	e042      	b.n	8003bd0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
        case CAN_250K_2M:
            ciDbtcfg.bF.BRP = 0;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	73fb      	strb	r3, [r7, #15]
            ciDbtcfg.bF.TSEG1 = 2;
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f362 0304 	bfi	r3, r2, #0, #5
 8003b56:	73bb      	strb	r3, [r7, #14]
            ciDbtcfg.bF.TSEG2 = 0;
 8003b58:	7b7b      	ldrb	r3, [r7, #13]
 8003b5a:	f36f 0303 	bfc	r3, #0, #4
 8003b5e:	737b      	strb	r3, [r7, #13]
            ciDbtcfg.bF.SJW = 0;
 8003b60:	7b3b      	ldrb	r3, [r7, #12]
 8003b62:	f36f 0303 	bfc	r3, #0, #4
 8003b66:	733b      	strb	r3, [r7, #12]
            // SSP
            ciTdc.bF.TDCOffset = 3;
 8003b68:	7a7b      	ldrb	r3, [r7, #9]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	f362 0306 	bfi	r3, r2, #0, #7
 8003b70:	727b      	strb	r3, [r7, #9]
            ciTdc.bF.TDCValue = tdcValue;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	7a3b      	ldrb	r3, [r7, #8]
 8003b7c:	f362 0305 	bfi	r3, r2, #0, #6
 8003b80:	723b      	strb	r3, [r7, #8]
            break;
 8003b82:	e005      	b.n	8003b90 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x218>
        case CAN_250K_3M:
        case CAN_250K_4M:
            //qDebug("Data Bitrate not feasible with this clock!");
            return -1;
 8003b84:	f04f 33ff 	mov.w	r3, #4294967295
 8003b88:	e022      	b.n	8003bd0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;

        default:
            return -1;
 8003b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8e:	e01f      	b.n	8003bd0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
            break;
    }

    // Write Bit time registers
    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiDBTCFG, ciDbtcfg.word);
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	2108      	movs	r1, #8
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd fffa 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d002      	beq.n	8003bae <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x236>
        return -2;
 8003ba8:	f06f 0301 	mvn.w	r3, #1
 8003bac:	e010      	b.n	8003bd0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
#ifdef REV_A
    ciTdc.bF.TDCOffset = 0;
    ciTdc.bF.TDCValue = 0;
#endif

    spiTransferError = DRV_CANFDSPI_WriteWord(index, cREGADDR_CiTDC, ciTdc.word);
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	210c      	movs	r1, #12
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fd ffeb 	bl	8001b90 <DRV_CANFDSPI_WriteWord>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	75fb      	strb	r3, [r7, #23]
    if (spiTransferError) {
 8003bbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d002      	beq.n	8003bcc <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x254>
        return -3;
 8003bc6:	f06f 0302 	mvn.w	r3, #2
 8003bca:	e001      	b.n	8003bd0 <DRV_CANFDSPI_BitTimeConfigureData10MHz+0x258>
    }

    return spiTransferError;
 8003bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	000e0303 	.word	0x000e0303

08003bdc <DRV_CANFDSPI_GpioModeConfigure>:
// *****************************************************************************
// Section: GPIO

int8_t DRV_CANFDSPI_GpioModeConfigure(CANFDSPI_MODULE_ID index,
        GPIO_PIN_MODE gpio0, GPIO_PIN_MODE gpio1)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	4603      	mov	r3, r0
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	460b      	mov	r3, r1
 8003be8:	71bb      	strb	r3, [r7, #6]
 8003bea:	4613      	mov	r3, r2
 8003bec:	717b      	strb	r3, [r7, #5]
    int8_t spiTransferError = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
    uint16_t a = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	81bb      	strh	r3, [r7, #12]

    // Read
    a = cREGADDR_IOCON + 3;
 8003bf6:	f640 6307 	movw	r3, #3591	; 0xe07
 8003bfa:	81bb      	strh	r3, [r7, #12]
    REG_IOCON iocon;
    iocon.word = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60bb      	str	r3, [r7, #8]

    spiTransferError = DRV_CANFDSPI_ReadByte(index, a, &iocon.byte[3]);
 8003c00:	f107 0308 	add.w	r3, r7, #8
 8003c04:	1cda      	adds	r2, r3, #3
 8003c06:	89b9      	ldrh	r1, [r7, #12]
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fd fedc 	bl	80019c8 <DRV_CANFDSPI_ReadByte>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <DRV_CANFDSPI_GpioModeConfigure+0x46>
        return -1;
 8003c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c20:	e020      	b.n	8003c64 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    // Modify
    iocon.bF.PinMode0 = gpio0;
 8003c22:	79bb      	ldrb	r3, [r7, #6]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	7afb      	ldrb	r3, [r7, #11]
 8003c2c:	f362 0300 	bfi	r3, r2, #0, #1
 8003c30:	72fb      	strb	r3, [r7, #11]
    iocon.bF.PinMode1 = gpio1;
 8003c32:	797b      	ldrb	r3, [r7, #5]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	f362 0341 	bfi	r3, r2, #1, #1
 8003c40:	72fb      	strb	r3, [r7, #11]

    // Write
    spiTransferError = DRV_CANFDSPI_WriteByte(index, a, iocon.byte[3]);
 8003c42:	7afa      	ldrb	r2, [r7, #11]
 8003c44:	89b9      	ldrh	r1, [r7, #12]
 8003c46:	79fb      	ldrb	r3, [r7, #7]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fd ff01 	bl	8001a50 <DRV_CANFDSPI_WriteByte>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	73fb      	strb	r3, [r7, #15]
    if (spiTransferError) {
 8003c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <DRV_CANFDSPI_GpioModeConfigure+0x84>
        return -2;
 8003c5a:	f06f 0301 	mvn.w	r3, #1
 8003c5e:	e001      	b.n	8003c64 <DRV_CANFDSPI_GpioModeConfigure+0x88>
    }

    return spiTransferError;
 8003c60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <DRV_CANFDSPI_DlcToDataBytes>:
// *****************************************************************************
// *****************************************************************************
// Section: Miscellaneous

uint32_t DRV_CANFDSPI_DlcToDataBytes(CAN_DLC dlc)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	4603      	mov	r3, r0
 8003c74:	71fb      	strb	r3, [r7, #7]
    uint32_t dataBytesInObject = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]

    //Nop();
    //Nop();

    if (dlc < CAN_DLC_12) {
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d802      	bhi.n	8003c86 <DRV_CANFDSPI_DlcToDataBytes+0x1a>
        dataBytesInObject = dlc;
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	e02a      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
    } else {
        switch (dlc) {
 8003c86:	79fb      	ldrb	r3, [r7, #7]
 8003c88:	3b09      	subs	r3, #9
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d825      	bhi.n	8003cda <DRV_CANFDSPI_DlcToDataBytes+0x6e>
 8003c8e:	a201      	add	r2, pc, #4	; (adr r2, 8003c94 <DRV_CANFDSPI_DlcToDataBytes+0x28>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003cb1 	.word	0x08003cb1
 8003c98:	08003cb7 	.word	0x08003cb7
 8003c9c:	08003cbd 	.word	0x08003cbd
 8003ca0:	08003cc3 	.word	0x08003cc3
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003ccf 	.word	0x08003ccf
 8003cac:	08003cd5 	.word	0x08003cd5
            case CAN_DLC_12:
                dataBytesInObject = 12;
 8003cb0:	230c      	movs	r3, #12
 8003cb2:	60fb      	str	r3, [r7, #12]
                break;
 8003cb4:	e012      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_16:
                dataBytesInObject = 16;
 8003cb6:	2310      	movs	r3, #16
 8003cb8:	60fb      	str	r3, [r7, #12]
                break;
 8003cba:	e00f      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_20:
                dataBytesInObject = 20;
 8003cbc:	2314      	movs	r3, #20
 8003cbe:	60fb      	str	r3, [r7, #12]
                break;
 8003cc0:	e00c      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_24:
                dataBytesInObject = 24;
 8003cc2:	2318      	movs	r3, #24
 8003cc4:	60fb      	str	r3, [r7, #12]
                break;
 8003cc6:	e009      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_32:
                dataBytesInObject = 32;
 8003cc8:	2320      	movs	r3, #32
 8003cca:	60fb      	str	r3, [r7, #12]
                break;
 8003ccc:	e006      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_48:
                dataBytesInObject = 48;
 8003cce:	2330      	movs	r3, #48	; 0x30
 8003cd0:	60fb      	str	r3, [r7, #12]
                break;
 8003cd2:	e003      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            case CAN_DLC_64:
                dataBytesInObject = 64;
 8003cd4:	2340      	movs	r3, #64	; 0x40
 8003cd6:	60fb      	str	r3, [r7, #12]
                break;
 8003cd8:	e000      	b.n	8003cdc <DRV_CANFDSPI_DlcToDataBytes+0x70>
            default:
                break;
 8003cda:	bf00      	nop
        }
    }

    return dataBytesInObject;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop

08003cec <serialOut>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/***************************************************************************************************************
*     S E R I A L   O U T                                                              P A C K   E M U L A T O R
***************************************************************************************************************/
void serialOut(char* message){
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  getTime();
 8003cf4:	f000 f822 	bl	8003d3c <getTime>
  sprintf(txBuffer,"%s %s\r\n",time, message);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a0c      	ldr	r2, [pc, #48]	; (8003d2c <serialOut+0x40>)
 8003cfc:	490c      	ldr	r1, [pc, #48]	; (8003d30 <serialOut+0x44>)
 8003cfe:	480d      	ldr	r0, [pc, #52]	; (8003d34 <serialOut+0x48>)
 8003d00:	f002 fe1c 	bl	800693c <siprintf>

  if (HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 2000) != HAL_OK){// Sending in normal mode
 8003d04:	480b      	ldr	r0, [pc, #44]	; (8003d34 <serialOut+0x48>)
 8003d06:	f7fc fa63 	bl	80001d0 <strlen>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003d12:	4908      	ldr	r1, [pc, #32]	; (8003d34 <serialOut+0x48>)
 8003d14:	4808      	ldr	r0, [pc, #32]	; (8003d38 <serialOut+0x4c>)
 8003d16:	f002 fa1e 	bl	8006156 <HAL_UART_Transmit>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <serialOut+0x38>
    Error_Handler();
 8003d20:	f000 f9f6 	bl	8004110 <Error_Handler>
  }
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	2000c74c 	.word	0x2000c74c
 8003d30:	0800814c 	.word	0x0800814c
 8003d34:	2000c758 	.word	0x2000c758
 8003d38:	2000c708 	.word	0x2000c708

08003d3c <getTime>:

/***************************************************************************************************************
*     T I M E S T A M P                                                                P A C K   E M U L A T O R
***************************************************************************************************************/
void getTime(void){
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08a      	sub	sp, #40	; 0x28
 8003d40:	af02      	add	r7, sp, #8

  RTC_TimeTypeDef sTime = {0};
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	2200      	movs	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	609a      	str	r2, [r3, #8]
 8003d4e:	60da      	str	r2, [r3, #12]
 8003d50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]

  HAL_RTC_GetTime(&hrtc,&sTime, RTC_FORMAT_BCD);
 8003d56:	f107 0308 	add.w	r3, r7, #8
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	480e      	ldr	r0, [pc, #56]	; (8003d98 <getTime+0x5c>)
 8003d60:	f001 fd6a 	bl	8005838 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc,&sDate, RTC_FORMAT_BCD);
 8003d64:	1d3b      	adds	r3, r7, #4
 8003d66:	2201      	movs	r2, #1
 8003d68:	4619      	mov	r1, r3
 8003d6a:	480b      	ldr	r0, [pc, #44]	; (8003d98 <getTime+0x5c>)
 8003d6c:	f001 fdc2 	bl	80058f4 <HAL_RTC_GetDate>
  uint8_t seconds = sTime.Seconds;
 8003d70:	7abb      	ldrb	r3, [r7, #10]
 8003d72:	77fb      	strb	r3, [r7, #31]
  uint8_t minutes = sTime.Minutes;
 8003d74:	7a7b      	ldrb	r3, [r7, #9]
 8003d76:	77bb      	strb	r3, [r7, #30]
  uint8_t hours = sTime.Hours;
 8003d78:	7a3b      	ldrb	r3, [r7, #8]
 8003d7a:	777b      	strb	r3, [r7, #29]
  sprintf(time,"%02x:%02x:%02x",hours,minutes,seconds);
 8003d7c:	7f7a      	ldrb	r2, [r7, #29]
 8003d7e:	7fb9      	ldrb	r1, [r7, #30]
 8003d80:	7ffb      	ldrb	r3, [r7, #31]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	460b      	mov	r3, r1
 8003d86:	4905      	ldr	r1, [pc, #20]	; (8003d9c <getTime+0x60>)
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <getTime+0x64>)
 8003d8a:	f002 fdd7 	bl	800693c <siprintf>
}
 8003d8e:	bf00      	nop
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	2000c690 	.word	0x2000c690
 8003d9c:	08008154 	.word	0x08008154
 8003da0:	2000c74c 	.word	0x2000c74c

08003da4 <HAL_GPIO_EXTI_Callback>:

/***************************************************************************************************************
 *     G P I O     I N T E R R U P T    H A N D L E R   &   C A L L B A C              P A C K   E M U L A T O R
***************************************************************************************************************/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	4603      	mov	r3, r0
 8003dac:	80fb      	strh	r3, [r7, #6]

  // Clear Wake Up Flag (when woken from STOP
  //__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);

  if(GPIO_Pin == CAN_INT_Pin){
 8003dae:	88fb      	ldrh	r3, [r7, #6]
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db4:	d011      	beq.n	8003dda <HAL_GPIO_EXTI_Callback+0x36>
    // Interrupt
  }
  else if (GPIO_Pin == CAN_INT0_Pin){
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dbc:	d103      	bne.n	8003dc6 <HAL_GPIO_EXTI_Callback+0x22>
    // TX Interrupt
    canTxInterrupt = 1;
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_GPIO_EXTI_Callback+0x44>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
    appData.state = APP_STATE_RECEIVE;
  }
  else if(GPIO_Pin == USER_BUTTON_Pin){
    // Spawn a new module?
  }
}
 8003dc4:	e009      	b.n	8003dda <HAL_GPIO_EXTI_Callback+0x36>
  else if (GPIO_Pin == CAN_INT1_Pin){
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dcc:	d105      	bne.n	8003dda <HAL_GPIO_EXTI_Callback+0x36>
    canRxInterrupt = 1;
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <HAL_GPIO_EXTI_Callback+0x48>)
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	701a      	strb	r2, [r3, #0]
    appData.state = APP_STATE_RECEIVE;
 8003dd4:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_GPIO_EXTI_Callback+0x4c>)
 8003dd6:	2205      	movs	r2, #5
 8003dd8:	701a      	strb	r2, [r3, #0]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	2000c821 	.word	0x2000c821
 8003dec:	2000c820 	.word	0x2000c820
 8003df0:	2000c510 	.word	0x2000c510

08003df4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003df8:	f000 fbb8 	bl	800456c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003dfc:	f000 f810 	bl	8003e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e00:	f000 f8fe 	bl	8004000 <MX_GPIO_Init>
  MX_SPI1_Init();
 8003e04:	f000 f89c 	bl	8003f40 <MX_SPI1_Init>
  MX_RTC_Init();
 8003e08:	f000 f874 	bl	8003ef4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8003e0c:	f000 f8ce 	bl	8003fac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  DRV_CANFDSPI_Reset(DRV_CANFDSPI_INDEX_0);
 8003e10:	2000      	movs	r0, #0
 8003e12:	f7fd fda7 	bl	8001964 <DRV_CANFDSPI_Reset>
  APP_Initialize();
 8003e16:	f7fc fc0d 	bl	8000634 <APP_Initialize>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    APP_Tasks();
 8003e1a:	f7fc fd67 	bl	80008ec <APP_Tasks>
 8003e1e:	e7fc      	b.n	8003e1a <main+0x26>

08003e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b094      	sub	sp, #80	; 0x50
 8003e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e26:	f107 0320 	add.w	r3, r7, #32
 8003e2a:	2230      	movs	r2, #48	; 0x30
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f002 fd3e 	bl	80068b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e44:	2300      	movs	r3, #0
 8003e46:	60bb      	str	r3, [r7, #8]
 8003e48:	4b28      	ldr	r3, [pc, #160]	; (8003eec <SystemClock_Config+0xcc>)
 8003e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4c:	4a27      	ldr	r2, [pc, #156]	; (8003eec <SystemClock_Config+0xcc>)
 8003e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e52:	6413      	str	r3, [r2, #64]	; 0x40
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <SystemClock_Config+0xcc>)
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e60:	2300      	movs	r3, #0
 8003e62:	607b      	str	r3, [r7, #4]
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <SystemClock_Config+0xd0>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <SystemClock_Config+0xd0>)
 8003e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <SystemClock_Config+0xd0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e78:	607b      	str	r3, [r7, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8003e7c:	2309      	movs	r3, #9
 8003e7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003e80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003e84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003e86:	2301      	movs	r3, #1
 8003e88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003e8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003e94:	2304      	movs	r3, #4
 8003e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003e98:	2340      	movs	r3, #64	; 0x40
 8003e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003e9c:	2304      	movs	r3, #4
 8003e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ea4:	f107 0320 	add.w	r3, r7, #32
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fed5 	bl	8004c58 <HAL_RCC_OscConfig>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003eb4:	f000 f92c 	bl	8004110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003eb8:	230f      	movs	r3, #15
 8003eba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ec8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003ece:	f107 030c 	add.w	r3, r7, #12
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f001 f937 	bl	8005148 <HAL_RCC_ClockConfig>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003ee0:	f000 f916 	bl	8004110 <Error_Handler>
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	3750      	adds	r7, #80	; 0x50
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40007000 	.word	0x40007000

08003ef4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ef8:	4b0f      	ldr	r3, [pc, #60]	; (8003f38 <MX_RTC_Init+0x44>)
 8003efa:	4a10      	ldr	r2, [pc, #64]	; (8003f3c <MX_RTC_Init+0x48>)
 8003efc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003efe:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <MX_RTC_Init+0x44>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <MX_RTC_Init+0x44>)
 8003f06:	227f      	movs	r2, #127	; 0x7f
 8003f08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003f0a:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <MX_RTC_Init+0x44>)
 8003f0c:	22ff      	movs	r2, #255	; 0xff
 8003f0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f10:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <MX_RTC_Init+0x44>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f16:	4b08      	ldr	r3, [pc, #32]	; (8003f38 <MX_RTC_Init+0x44>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <MX_RTC_Init+0x44>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f22:	4805      	ldr	r0, [pc, #20]	; (8003f38 <MX_RTC_Init+0x44>)
 8003f24:	f001 fc12 	bl	800574c <HAL_RTC_Init>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003f2e:	f000 f8ef 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f32:	bf00      	nop
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	2000c690 	.word	0x2000c690
 8003f3c:	40002800 	.word	0x40002800

08003f40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f46:	4a18      	ldr	r2, [pc, #96]	; (8003fa8 <MX_SPI1_Init+0x68>)
 8003f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f4a:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f52:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f58:	4b12      	ldr	r3, [pc, #72]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f6a:	4b0e      	ldr	r3, [pc, #56]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f78:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f84:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f8c:	220a      	movs	r2, #10
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f90:	4804      	ldr	r0, [pc, #16]	; (8003fa4 <MX_SPI1_Init+0x64>)
 8003f92:	f001 fd9e 	bl	8005ad2 <HAL_SPI_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f9c:	f000 f8b8 	bl	8004110 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003fa0:	bf00      	nop
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	2000c6b0 	.word	0x2000c6b0
 8003fa8:	40013000 	.word	0x40013000

08003fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 1 */


  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fb2:	4a12      	ldr	r2, [pc, #72]	; (8003ffc <MX_USART2_UART_Init+0x50>)
 8003fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003fb6:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003fbe:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fd2:	220c      	movs	r2, #12
 8003fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fd6:	4b08      	ldr	r3, [pc, #32]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003fe2:	4805      	ldr	r0, [pc, #20]	; (8003ff8 <MX_USART2_UART_Init+0x4c>)
 8003fe4:	f002 f86a 	bl	80060bc <HAL_UART_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003fee:	f000 f88f 	bl	8004110 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2000c708 	.word	0x2000c708
 8003ffc:	40004400 	.word	0x40004400

08004000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004006:	f107 030c 	add.w	r3, r7, #12
 800400a:	2200      	movs	r2, #0
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	609a      	str	r2, [r3, #8]
 8004012:	60da      	str	r2, [r3, #12]
 8004014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	4b3a      	ldr	r3, [pc, #232]	; (8004104 <MX_GPIO_Init+0x104>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	4a39      	ldr	r2, [pc, #228]	; (8004104 <MX_GPIO_Init+0x104>)
 8004020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004024:	6313      	str	r3, [r2, #48]	; 0x30
 8004026:	4b37      	ldr	r3, [pc, #220]	; (8004104 <MX_GPIO_Init+0x104>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	607b      	str	r3, [r7, #4]
 8004036:	4b33      	ldr	r3, [pc, #204]	; (8004104 <MX_GPIO_Init+0x104>)
 8004038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403a:	4a32      	ldr	r2, [pc, #200]	; (8004104 <MX_GPIO_Init+0x104>)
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	6313      	str	r3, [r2, #48]	; 0x30
 8004042:	4b30      	ldr	r3, [pc, #192]	; (8004104 <MX_GPIO_Init+0x104>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	607b      	str	r3, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <MX_GPIO_Init+0x104>)
 8004054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004056:	4a2b      	ldr	r2, [pc, #172]	; (8004104 <MX_GPIO_Init+0x104>)
 8004058:	f043 0308 	orr.w	r3, r3, #8
 800405c:	6313      	str	r3, [r2, #48]	; 0x30
 800405e:	4b29      	ldr	r3, [pc, #164]	; (8004104 <MX_GPIO_Init+0x104>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAN_CS_Pin|LED4_GREEN_Pin|LED3_ORANGE_Pin|LED5_RED_Pin
 800406a:	2200      	movs	r2, #0
 800406c:	f44f 4171 	mov.w	r1, #61696	; 0xf100
 8004070:	4825      	ldr	r0, [pc, #148]	; (8004108 <MX_GPIO_Init+0x108>)
 8004072:	f000 fdbf 	bl	8004bf4 <HAL_GPIO_WritePin>
                          |LED6_BLUE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8004076:	2301      	movs	r3, #1
 8004078:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800407a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800407e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	4619      	mov	r1, r3
 800408a:	4820      	ldr	r0, [pc, #128]	; (800410c <MX_GPIO_Init+0x10c>)
 800408c:	f000 fc16 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_CS_Pin LED4_GREEN_Pin LED3_ORANGE_Pin LED5_RED_Pin
                           LED6_BLUE_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin|LED4_GREEN_Pin|LED3_ORANGE_Pin|LED5_RED_Pin
 8004090:	f44f 4371 	mov.w	r3, #61696	; 0xf100
 8004094:	60fb      	str	r3, [r7, #12]
                          |LED6_BLUE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004096:	2301      	movs	r3, #1
 8004098:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800409e:	2300      	movs	r3, #0
 80040a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040a2:	f107 030c 	add.w	r3, r7, #12
 80040a6:	4619      	mov	r1, r3
 80040a8:	4817      	ldr	r0, [pc, #92]	; (8004108 <MX_GPIO_Init+0x108>)
 80040aa:	f000 fc07 	bl	80048bc <HAL_GPIO_Init>

  /*Configure GPIO pins : CAN_INT_Pin CAN_INT1_Pin CAN_INT0_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin|CAN_INT1_Pin|CAN_INT0_Pin;
 80040ae:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80040b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80040b4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80040b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040ba:	2301      	movs	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80040be:	f107 030c 	add.w	r3, r7, #12
 80040c2:	4619      	mov	r1, r3
 80040c4:	4810      	ldr	r0, [pc, #64]	; (8004108 <MX_GPIO_Init+0x108>)
 80040c6:	f000 fbf9 	bl	80048bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2100      	movs	r1, #0
 80040ce:	2006      	movs	r0, #6
 80040d0:	f000 fbbd 	bl	800484e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80040d4:	2006      	movs	r0, #6
 80040d6:	f000 fbd6 	bl	8004886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80040da:	2200      	movs	r2, #0
 80040dc:	2100      	movs	r1, #0
 80040de:	2017      	movs	r0, #23
 80040e0:	f000 fbb5 	bl	800484e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80040e4:	2017      	movs	r0, #23
 80040e6:	f000 fbce 	bl	8004886 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2100      	movs	r1, #0
 80040ee:	2028      	movs	r0, #40	; 0x28
 80040f0:	f000 fbad 	bl	800484e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80040f4:	2028      	movs	r0, #40	; 0x28
 80040f6:	f000 fbc6 	bl	8004886 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80040fa:	bf00      	nop
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	40023800 	.word	0x40023800
 8004108:	40020c00 	.word	0x40020c00
 800410c:	40020000 	.word	0x40020000

08004110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004114:	b672      	cpsid	i
}
 8004116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004118:	e7fe      	b.n	8004118 <Error_Handler+0x8>
	...

0800411c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_MspInit+0x4c>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	4a0f      	ldr	r2, [pc, #60]	; (8004168 <HAL_MspInit+0x4c>)
 800412c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004130:	6453      	str	r3, [r2, #68]	; 0x44
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <HAL_MspInit+0x4c>)
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	2300      	movs	r3, #0
 8004140:	603b      	str	r3, [r7, #0]
 8004142:	4b09      	ldr	r3, [pc, #36]	; (8004168 <HAL_MspInit+0x4c>)
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	4a08      	ldr	r2, [pc, #32]	; (8004168 <HAL_MspInit+0x4c>)
 8004148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414c:	6413      	str	r3, [r2, #64]	; 0x40
 800414e:	4b06      	ldr	r3, [pc, #24]	; (8004168 <HAL_MspInit+0x4c>)
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800415a:	bf00      	nop
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800

0800416c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004174:	f107 0308 	add.w	r3, r7, #8
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	605a      	str	r2, [r3, #4]
 800417e:	609a      	str	r2, [r3, #8]
 8004180:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <HAL_RTC_MspInit+0x4c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800418c:	2302      	movs	r3, #2
 800418e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004194:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004196:	f107 0308 	add.w	r3, r7, #8
 800419a:	4618      	mov	r0, r3
 800419c:	f001 f9f4 	bl	8005588 <HAL_RCCEx_PeriphCLKConfig>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80041a6:	f7ff ffb3 	bl	8004110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041aa:	4b04      	ldr	r3, [pc, #16]	; (80041bc <HAL_RTC_MspInit+0x50>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80041b0:	bf00      	nop
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40002800 	.word	0x40002800
 80041bc:	42470e3c 	.word	0x42470e3c

080041c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <HAL_SPI_MspInit+0x84>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d12b      	bne.n	800423a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	4b18      	ldr	r3, [pc, #96]	; (8004248 <HAL_SPI_MspInit+0x88>)
 80041e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ea:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_SPI_MspInit+0x88>)
 80041ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041f0:	6453      	str	r3, [r2, #68]	; 0x44
 80041f2:	4b15      	ldr	r3, [pc, #84]	; (8004248 <HAL_SPI_MspInit+0x88>)
 80041f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b11      	ldr	r3, [pc, #68]	; (8004248 <HAL_SPI_MspInit+0x88>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a10      	ldr	r2, [pc, #64]	; (8004248 <HAL_SPI_MspInit+0x88>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_SPI_MspInit+0x88>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800421a:	23e0      	movs	r3, #224	; 0xe0
 800421c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421e:	2302      	movs	r3, #2
 8004220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004226:	2303      	movs	r3, #3
 8004228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800422a:	2305      	movs	r3, #5
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422e:	f107 0314 	add.w	r3, r7, #20
 8004232:	4619      	mov	r1, r3
 8004234:	4805      	ldr	r0, [pc, #20]	; (800424c <HAL_SPI_MspInit+0x8c>)
 8004236:	f000 fb41 	bl	80048bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800423a:	bf00      	nop
 800423c:	3728      	adds	r7, #40	; 0x28
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40013000 	.word	0x40013000
 8004248:	40023800 	.word	0x40023800
 800424c:	40020000 	.word	0x40020000

08004250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004258:	f107 0314 	add.w	r3, r7, #20
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	609a      	str	r2, [r3, #8]
 8004264:	60da      	str	r2, [r3, #12]
 8004266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a19      	ldr	r2, [pc, #100]	; (80042d4 <HAL_UART_MspInit+0x84>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d12b      	bne.n	80042ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	4b18      	ldr	r3, [pc, #96]	; (80042d8 <HAL_UART_MspInit+0x88>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_UART_MspInit+0x88>)
 800427c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004280:	6413      	str	r3, [r2, #64]	; 0x40
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_UART_MspInit+0x88>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	613b      	str	r3, [r7, #16]
 800428c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_UART_MspInit+0x88>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_UART_MspInit+0x88>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6313      	str	r3, [r2, #48]	; 0x30
 800429e:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_UART_MspInit+0x88>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80042aa:	230c      	movs	r3, #12
 80042ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ae:	2302      	movs	r3, #2
 80042b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042b6:	2303      	movs	r3, #3
 80042b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80042ba:	2307      	movs	r3, #7
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	f107 0314 	add.w	r3, r7, #20
 80042c2:	4619      	mov	r1, r3
 80042c4:	4805      	ldr	r0, [pc, #20]	; (80042dc <HAL_UART_MspInit+0x8c>)
 80042c6:	f000 faf9 	bl	80048bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80042ca:	bf00      	nop
 80042cc:	3728      	adds	r7, #40	; 0x28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	40004400 	.word	0x40004400
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020000 	.word	0x40020000

080042e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80042e4:	e7fe      	b.n	80042e4 <NMI_Handler+0x4>

080042e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042e6:	b480      	push	{r7}
 80042e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042ea:	e7fe      	b.n	80042ea <HardFault_Handler+0x4>

080042ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80042f0:	e7fe      	b.n	80042f0 <MemManage_Handler+0x4>

080042f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80042f2:	b480      	push	{r7}
 80042f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80042f6:	e7fe      	b.n	80042f6 <BusFault_Handler+0x4>

080042f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80042fc:	e7fe      	b.n	80042fc <UsageFault_Handler+0x4>

080042fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80042fe:	b480      	push	{r7}
 8004300:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004302:	bf00      	nop
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004310:	bf00      	nop
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800431a:	b480      	push	{r7}
 800431c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800432c:	f000 f970 	bl	8004610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004330:	bf00      	nop
 8004332:	bd80      	pop	{r7, pc}

08004334 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_Pin);
 8004338:	2001      	movs	r0, #1
 800433a:	f000 fc75 	bl	8004c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}

08004342 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT_Pin);
 8004346:	f44f 7000 	mov.w	r0, #512	; 0x200
 800434a:	f000 fc6d 	bl	8004c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}

08004352 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CAN_INT1_Pin);
 8004356:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800435a:	f000 fc65 	bl	8004c28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CAN_INT0_Pin);
 800435e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004362:	f000 fc61 	bl	8004c28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004366:	bf00      	nop
 8004368:	bd80      	pop	{r7, pc}

0800436a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800436a:	b480      	push	{r7}
 800436c:	af00      	add	r7, sp, #0
  return 1;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <_kill>:

int _kill(int pid, int sig)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b082      	sub	sp, #8
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
 8004382:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004384:	f002 fa5c 	bl	8006840 <__errno>
 8004388:	4603      	mov	r3, r0
 800438a:	2216      	movs	r2, #22
 800438c:	601a      	str	r2, [r3, #0]
  return -1;
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004392:	4618      	mov	r0, r3
 8004394:	3708      	adds	r7, #8
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <_exit>:

void _exit (int status)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b082      	sub	sp, #8
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80043a2:	f04f 31ff 	mov.w	r1, #4294967295
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ffe7 	bl	800437a <_kill>
  while (1) {}    /* Make sure we hang here */
 80043ac:	e7fe      	b.n	80043ac <_exit+0x12>

080043ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e00a      	b.n	80043d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80043c0:	f3af 8000 	nop.w
 80043c4:	4601      	mov	r1, r0
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	60ba      	str	r2, [r7, #8]
 80043cc:	b2ca      	uxtb	r2, r1
 80043ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	3301      	adds	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	429a      	cmp	r2, r3
 80043dc:	dbf0      	blt.n	80043c0 <_read+0x12>
  }

  return len;
 80043de:	687b      	ldr	r3, [r7, #4]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
 80043f8:	e009      	b.n	800440e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	60ba      	str	r2, [r7, #8]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	3301      	adds	r3, #1
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	dbf1      	blt.n	80043fa <_write+0x12>
  }
  return len;
 8004416:	687b      	ldr	r3, [r7, #4]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <_close>:

int _close(int file)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004448:	605a      	str	r2, [r3, #4]
  return 0;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <_isatty>:

int _isatty(int file)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004460:	2301      	movs	r3, #1
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800446e:	b480      	push	{r7}
 8004470:	b085      	sub	sp, #20
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004490:	4a14      	ldr	r2, [pc, #80]	; (80044e4 <_sbrk+0x5c>)
 8004492:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <_sbrk+0x60>)
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800449c:	4b13      	ldr	r3, [pc, #76]	; (80044ec <_sbrk+0x64>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d102      	bne.n	80044aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044a4:	4b11      	ldr	r3, [pc, #68]	; (80044ec <_sbrk+0x64>)
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <_sbrk+0x68>)
 80044a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <_sbrk+0x64>)
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d207      	bcs.n	80044c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044b8:	f002 f9c2 	bl	8006840 <__errno>
 80044bc:	4603      	mov	r3, r0
 80044be:	220c      	movs	r2, #12
 80044c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044c2:	f04f 33ff 	mov.w	r3, #4294967295
 80044c6:	e009      	b.n	80044dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044c8:	4b08      	ldr	r3, [pc, #32]	; (80044ec <_sbrk+0x64>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ce:	4b07      	ldr	r3, [pc, #28]	; (80044ec <_sbrk+0x64>)
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	4a05      	ldr	r2, [pc, #20]	; (80044ec <_sbrk+0x64>)
 80044d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044da:	68fb      	ldr	r3, [r7, #12]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20020000 	.word	0x20020000
 80044e8:	00000400 	.word	0x00000400
 80044ec:	2000c824 	.word	0x2000c824
 80044f0:	2000c840 	.word	0x2000c840

080044f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <SystemInit+0x20>)
 80044fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fe:	4a05      	ldr	r2, [pc, #20]	; (8004514 <SystemInit+0x20>)
 8004500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004508:	bf00      	nop
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	e000ed00 	.word	0xe000ed00

08004518 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004550 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800451c:	480d      	ldr	r0, [pc, #52]	; (8004554 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800451e:	490e      	ldr	r1, [pc, #56]	; (8004558 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004520:	4a0e      	ldr	r2, [pc, #56]	; (800455c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004524:	e002      	b.n	800452c <LoopCopyDataInit>

08004526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800452a:	3304      	adds	r3, #4

0800452c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800452c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800452e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004530:	d3f9      	bcc.n	8004526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004532:	4a0b      	ldr	r2, [pc, #44]	; (8004560 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004534:	4c0b      	ldr	r4, [pc, #44]	; (8004564 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004538:	e001      	b.n	800453e <LoopFillZerobss>

0800453a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800453a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800453c:	3204      	adds	r2, #4

0800453e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800453e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004540:	d3fb      	bcc.n	800453a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004542:	f7ff ffd7 	bl	80044f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004546:	f002 f981 	bl	800684c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800454a:	f7ff fc53 	bl	8003df4 <main>
  bx  lr    
 800454e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004550:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004558:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800455c:	080082d4 	.word	0x080082d4
  ldr r2, =_sbss
 8004560:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004564:	2000c83c 	.word	0x2000c83c

08004568 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004568:	e7fe      	b.n	8004568 <ADC_IRQHandler>
	...

0800456c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004570:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <HAL_Init+0x40>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a0d      	ldr	r2, [pc, #52]	; (80045ac <HAL_Init+0x40>)
 8004576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800457a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800457c:	4b0b      	ldr	r3, [pc, #44]	; (80045ac <HAL_Init+0x40>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0a      	ldr	r2, [pc, #40]	; (80045ac <HAL_Init+0x40>)
 8004582:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004586:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004588:	4b08      	ldr	r3, [pc, #32]	; (80045ac <HAL_Init+0x40>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a07      	ldr	r2, [pc, #28]	; (80045ac <HAL_Init+0x40>)
 800458e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004592:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004594:	2003      	movs	r0, #3
 8004596:	f000 f94f 	bl	8004838 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800459a:	200f      	movs	r0, #15
 800459c:	f000 f808 	bl	80045b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80045a0:	f7ff fdbc 	bl	800411c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40023c00 	.word	0x40023c00

080045b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80045b8:	4b12      	ldr	r3, [pc, #72]	; (8004604 <HAL_InitTick+0x54>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_InitTick+0x58>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 f967 	bl	80048a2 <HAL_SYSTICK_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e00e      	b.n	80045fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b0f      	cmp	r3, #15
 80045e2:	d80a      	bhi.n	80045fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045e4:	2200      	movs	r2, #0
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	f04f 30ff 	mov.w	r0, #4294967295
 80045ec:	f000 f92f 	bl	800484e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045f0:	4a06      	ldr	r2, [pc, #24]	; (800460c <HAL_InitTick+0x5c>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e000      	b.n	80045fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000000 	.word	0x20000000
 8004608:	20000008 	.word	0x20000008
 800460c:	20000004 	.word	0x20000004

08004610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_IncTick+0x20>)
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_IncTick+0x24>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4413      	add	r3, r2
 8004620:	4a04      	ldr	r2, [pc, #16]	; (8004634 <HAL_IncTick+0x24>)
 8004622:	6013      	str	r3, [r2, #0]
}
 8004624:	bf00      	nop
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000008 	.word	0x20000008
 8004634:	2000c828 	.word	0x2000c828

08004638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
  return uwTick;
 800463c:	4b03      	ldr	r3, [pc, #12]	; (800464c <HAL_GetTick+0x14>)
 800463e:	681b      	ldr	r3, [r3, #0]
}
 8004640:	4618      	mov	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop
 800464c:	2000c828 	.word	0x2000c828

08004650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004658:	f7ff ffee 	bl	8004638 <HAL_GetTick>
 800465c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004668:	d005      	beq.n	8004676 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800466a:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <HAL_Delay+0x44>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	461a      	mov	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004676:	bf00      	nop
 8004678:	f7ff ffde 	bl	8004638 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	429a      	cmp	r2, r3
 8004686:	d8f7      	bhi.n	8004678 <HAL_Delay+0x28>
  {
  }
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000008 	.word	0x20000008

08004698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046a8:	4b0c      	ldr	r3, [pc, #48]	; (80046dc <__NVIC_SetPriorityGrouping+0x44>)
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046b4:	4013      	ands	r3, r2
 80046b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046ca:	4a04      	ldr	r2, [pc, #16]	; (80046dc <__NVIC_SetPriorityGrouping+0x44>)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	60d3      	str	r3, [r2, #12]
}
 80046d0:	bf00      	nop
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	e000ed00 	.word	0xe000ed00

080046e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046e4:	4b04      	ldr	r3, [pc, #16]	; (80046f8 <__NVIC_GetPriorityGrouping+0x18>)
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	f003 0307 	and.w	r3, r3, #7
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	e000ed00 	.word	0xe000ed00

080046fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	4603      	mov	r3, r0
 8004704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	2b00      	cmp	r3, #0
 800470c:	db0b      	blt.n	8004726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	f003 021f 	and.w	r2, r3, #31
 8004714:	4907      	ldr	r1, [pc, #28]	; (8004734 <__NVIC_EnableIRQ+0x38>)
 8004716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2001      	movs	r0, #1
 800471e:	fa00 f202 	lsl.w	r2, r0, r2
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	e000e100 	.word	0xe000e100

08004738 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	6039      	str	r1, [r7, #0]
 8004742:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004748:	2b00      	cmp	r3, #0
 800474a:	db0a      	blt.n	8004762 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	b2da      	uxtb	r2, r3
 8004750:	490c      	ldr	r1, [pc, #48]	; (8004784 <__NVIC_SetPriority+0x4c>)
 8004752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004756:	0112      	lsls	r2, r2, #4
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	440b      	add	r3, r1
 800475c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004760:	e00a      	b.n	8004778 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	b2da      	uxtb	r2, r3
 8004766:	4908      	ldr	r1, [pc, #32]	; (8004788 <__NVIC_SetPriority+0x50>)
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	3b04      	subs	r3, #4
 8004770:	0112      	lsls	r2, r2, #4
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	440b      	add	r3, r1
 8004776:	761a      	strb	r2, [r3, #24]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	e000e100 	.word	0xe000e100
 8004788:	e000ed00 	.word	0xe000ed00

0800478c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800478c:	b480      	push	{r7}
 800478e:	b089      	sub	sp, #36	; 0x24
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f1c3 0307 	rsb	r3, r3, #7
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	bf28      	it	cs
 80047aa:	2304      	movcs	r3, #4
 80047ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	3304      	adds	r3, #4
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d902      	bls.n	80047bc <NVIC_EncodePriority+0x30>
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3b03      	subs	r3, #3
 80047ba:	e000      	b.n	80047be <NVIC_EncodePriority+0x32>
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047c0:	f04f 32ff 	mov.w	r2, #4294967295
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43da      	mvns	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	401a      	ands	r2, r3
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047d4:	f04f 31ff 	mov.w	r1, #4294967295
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	43d9      	mvns	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047e4:	4313      	orrs	r3, r2
         );
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3724      	adds	r7, #36	; 0x24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3b01      	subs	r3, #1
 8004800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004804:	d301      	bcc.n	800480a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004806:	2301      	movs	r3, #1
 8004808:	e00f      	b.n	800482a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800480a:	4a0a      	ldr	r2, [pc, #40]	; (8004834 <SysTick_Config+0x40>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3b01      	subs	r3, #1
 8004810:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004812:	210f      	movs	r1, #15
 8004814:	f04f 30ff 	mov.w	r0, #4294967295
 8004818:	f7ff ff8e 	bl	8004738 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <SysTick_Config+0x40>)
 800481e:	2200      	movs	r2, #0
 8004820:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004822:	4b04      	ldr	r3, [pc, #16]	; (8004834 <SysTick_Config+0x40>)
 8004824:	2207      	movs	r2, #7
 8004826:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	e000e010 	.word	0xe000e010

08004838 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7ff ff29 	bl	8004698 <__NVIC_SetPriorityGrouping>
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004860:	f7ff ff3e 	bl	80046e0 <__NVIC_GetPriorityGrouping>
 8004864:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	6978      	ldr	r0, [r7, #20]
 800486c:	f7ff ff8e 	bl	800478c <NVIC_EncodePriority>
 8004870:	4602      	mov	r2, r0
 8004872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ff5d 	bl	8004738 <__NVIC_SetPriority>
}
 800487e:	bf00      	nop
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b082      	sub	sp, #8
 800488a:	af00      	add	r7, sp, #0
 800488c:	4603      	mov	r3, r0
 800488e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff ff31 	bl	80046fc <__NVIC_EnableIRQ>
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b082      	sub	sp, #8
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ffa2 	bl	80047f4 <SysTick_Config>
 80048b0:	4603      	mov	r3, r0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048bc:	b480      	push	{r7}
 80048be:	b089      	sub	sp, #36	; 0x24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
 80048d6:	e16b      	b.n	8004bb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80048d8:	2201      	movs	r2, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	4013      	ands	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	f040 815a 	bne.w	8004baa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d005      	beq.n	800490e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800490a:	2b02      	cmp	r3, #2
 800490c:	d130      	bne.n	8004970 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	2203      	movs	r2, #3
 800491a:	fa02 f303 	lsl.w	r3, r2, r3
 800491e:	43db      	mvns	r3, r3
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	4013      	ands	r3, r2
 8004924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4313      	orrs	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004944:	2201      	movs	r2, #1
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	43db      	mvns	r3, r3
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4013      	ands	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 0201 	and.w	r2, r3, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa02 f303 	lsl.w	r3, r2, r3
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0303 	and.w	r3, r3, #3
 8004978:	2b03      	cmp	r3, #3
 800497a:	d017      	beq.n	80049ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	2203      	movs	r2, #3
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	fa02 f303 	lsl.w	r3, r2, r3
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0303 	and.w	r3, r3, #3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d123      	bne.n	8004a00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	08da      	lsrs	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3208      	adds	r2, #8
 80049c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	220f      	movs	r2, #15
 80049d0:	fa02 f303 	lsl.w	r3, r2, r3
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	08da      	lsrs	r2, r3, #3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3208      	adds	r2, #8
 80049fa:	69b9      	ldr	r1, [r7, #24]
 80049fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	4013      	ands	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f003 0203 	and.w	r2, r3, #3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80b4 	beq.w	8004baa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
 8004a46:	4b60      	ldr	r3, [pc, #384]	; (8004bc8 <HAL_GPIO_Init+0x30c>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4a:	4a5f      	ldr	r2, [pc, #380]	; (8004bc8 <HAL_GPIO_Init+0x30c>)
 8004a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a50:	6453      	str	r3, [r2, #68]	; 0x44
 8004a52:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <HAL_GPIO_Init+0x30c>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a5e:	4a5b      	ldr	r2, [pc, #364]	; (8004bcc <HAL_GPIO_Init+0x310>)
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	089b      	lsrs	r3, r3, #2
 8004a64:	3302      	adds	r3, #2
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	220f      	movs	r2, #15
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a52      	ldr	r2, [pc, #328]	; (8004bd0 <HAL_GPIO_Init+0x314>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d02b      	beq.n	8004ae2 <HAL_GPIO_Init+0x226>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a51      	ldr	r2, [pc, #324]	; (8004bd4 <HAL_GPIO_Init+0x318>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d025      	beq.n	8004ade <HAL_GPIO_Init+0x222>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a50      	ldr	r2, [pc, #320]	; (8004bd8 <HAL_GPIO_Init+0x31c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01f      	beq.n	8004ada <HAL_GPIO_Init+0x21e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a4f      	ldr	r2, [pc, #316]	; (8004bdc <HAL_GPIO_Init+0x320>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d019      	beq.n	8004ad6 <HAL_GPIO_Init+0x21a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a4e      	ldr	r2, [pc, #312]	; (8004be0 <HAL_GPIO_Init+0x324>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d013      	beq.n	8004ad2 <HAL_GPIO_Init+0x216>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a4d      	ldr	r2, [pc, #308]	; (8004be4 <HAL_GPIO_Init+0x328>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d00d      	beq.n	8004ace <HAL_GPIO_Init+0x212>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a4c      	ldr	r2, [pc, #304]	; (8004be8 <HAL_GPIO_Init+0x32c>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d007      	beq.n	8004aca <HAL_GPIO_Init+0x20e>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4a4b      	ldr	r2, [pc, #300]	; (8004bec <HAL_GPIO_Init+0x330>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d101      	bne.n	8004ac6 <HAL_GPIO_Init+0x20a>
 8004ac2:	2307      	movs	r3, #7
 8004ac4:	e00e      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	e00c      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004aca:	2306      	movs	r3, #6
 8004acc:	e00a      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ace:	2305      	movs	r3, #5
 8004ad0:	e008      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ad2:	2304      	movs	r3, #4
 8004ad4:	e006      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e004      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ada:	2302      	movs	r3, #2
 8004adc:	e002      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_GPIO_Init+0x228>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	69fa      	ldr	r2, [r7, #28]
 8004ae6:	f002 0203 	and.w	r2, r2, #3
 8004aea:	0092      	lsls	r2, r2, #2
 8004aec:	4093      	lsls	r3, r2
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004af4:	4935      	ldr	r1, [pc, #212]	; (8004bcc <HAL_GPIO_Init+0x310>)
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	089b      	lsrs	r3, r3, #2
 8004afa:	3302      	adds	r3, #2
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004b02:	4b3b      	ldr	r3, [pc, #236]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	43db      	mvns	r3, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4013      	ands	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b26:	4a32      	ldr	r2, [pc, #200]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b2c:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d003      	beq.n	8004b50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b50:	4a27      	ldr	r2, [pc, #156]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b56:	4b26      	ldr	r3, [pc, #152]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	4013      	ands	r3, r2
 8004b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d003      	beq.n	8004b7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b80:	4b1b      	ldr	r3, [pc, #108]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	69ba      	ldr	r2, [r7, #24]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ba4:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <HAL_GPIO_Init+0x334>)
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3301      	adds	r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	2b0f      	cmp	r3, #15
 8004bb4:	f67f ae90 	bls.w	80048d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3724      	adds	r7, #36	; 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40013800 	.word	0x40013800
 8004bd0:	40020000 	.word	0x40020000
 8004bd4:	40020400 	.word	0x40020400
 8004bd8:	40020800 	.word	0x40020800
 8004bdc:	40020c00 	.word	0x40020c00
 8004be0:	40021000 	.word	0x40021000
 8004be4:	40021400 	.word	0x40021400
 8004be8:	40021800 	.word	0x40021800
 8004bec:	40021c00 	.word	0x40021c00
 8004bf0:	40013c00 	.word	0x40013c00

08004bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	807b      	strh	r3, [r7, #2]
 8004c00:	4613      	mov	r3, r2
 8004c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004c04:	787b      	ldrb	r3, [r7, #1]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004c10:	e003      	b.n	8004c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004c12:	887b      	ldrh	r3, [r7, #2]
 8004c14:	041a      	lsls	r2, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	619a      	str	r2, [r3, #24]
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
	...

08004c28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c32:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d006      	beq.n	8004c4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c3e:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c40:	88fb      	ldrh	r3, [r7, #6]
 8004c42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7ff f8ac 	bl	8003da4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c4c:	bf00      	nop
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40013c00 	.word	0x40013c00

08004c58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e267      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d075      	beq.n	8004d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c76:	4b88      	ldr	r3, [pc, #544]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 030c 	and.w	r3, r3, #12
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d00c      	beq.n	8004c9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c82:	4b85      	ldr	r3, [pc, #532]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d112      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8e:	4b82      	ldr	r3, [pc, #520]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c9a:	d10b      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9c:	4b7e      	ldr	r3, [pc, #504]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d05b      	beq.n	8004d60 <HAL_RCC_OscConfig+0x108>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d157      	bne.n	8004d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e242      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d106      	bne.n	8004ccc <HAL_RCC_OscConfig+0x74>
 8004cbe:	4b76      	ldr	r3, [pc, #472]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a75      	ldr	r2, [pc, #468]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	e01d      	b.n	8004d08 <HAL_RCC_OscConfig+0xb0>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cd4:	d10c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x98>
 8004cd6:	4b70      	ldr	r3, [pc, #448]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a6f      	ldr	r2, [pc, #444]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	4b6d      	ldr	r3, [pc, #436]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6c      	ldr	r2, [pc, #432]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	e00b      	b.n	8004d08 <HAL_RCC_OscConfig+0xb0>
 8004cf0:	4b69      	ldr	r3, [pc, #420]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a68      	ldr	r2, [pc, #416]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4b66      	ldr	r3, [pc, #408]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a65      	ldr	r2, [pc, #404]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d013      	beq.n	8004d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7ff fc92 	bl	8004638 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d18:	f7ff fc8e 	bl	8004638 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b64      	cmp	r3, #100	; 0x64
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e207      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b5b      	ldr	r3, [pc, #364]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0xc0>
 8004d36:	e014      	b.n	8004d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d38:	f7ff fc7e 	bl	8004638 <HAL_GetTick>
 8004d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d3e:	e008      	b.n	8004d52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d40:	f7ff fc7a 	bl	8004638 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b64      	cmp	r3, #100	; 0x64
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e1f3      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d52:	4b51      	ldr	r3, [pc, #324]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1f0      	bne.n	8004d40 <HAL_RCC_OscConfig+0xe8>
 8004d5e:	e000      	b.n	8004d62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d063      	beq.n	8004e36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d6e:	4b4a      	ldr	r3, [pc, #296]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f003 030c 	and.w	r3, r3, #12
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d7a:	4b47      	ldr	r3, [pc, #284]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d11c      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d86:	4b44      	ldr	r3, [pc, #272]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d116      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	4b41      	ldr	r3, [pc, #260]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d005      	beq.n	8004daa <HAL_RCC_OscConfig+0x152>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e1c7      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004daa:	4b3b      	ldr	r3, [pc, #236]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4937      	ldr	r1, [pc, #220]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dbe:	e03a      	b.n	8004e36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d020      	beq.n	8004e0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <HAL_RCC_OscConfig+0x244>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dce:	f7ff fc33 	bl	8004638 <HAL_GetTick>
 8004dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dd6:	f7ff fc2f 	bl	8004638 <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e1a8      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de8:	4b2b      	ldr	r3, [pc, #172]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0f0      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004df4:	4b28      	ldr	r3, [pc, #160]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4925      	ldr	r1, [pc, #148]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	600b      	str	r3, [r1, #0]
 8004e08:	e015      	b.n	8004e36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e0a:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCC_OscConfig+0x244>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e10:	f7ff fc12 	bl	8004638 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e18:	f7ff fc0e 	bl	8004638 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e187      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e2a:	4b1b      	ldr	r3, [pc, #108]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d036      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <HAL_RCC_OscConfig+0x248>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e50:	f7ff fbf2 	bl	8004638 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e58:	f7ff fbee 	bl	8004638 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e167      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e6a:	4b0b      	ldr	r3, [pc, #44]	; (8004e98 <HAL_RCC_OscConfig+0x240>)
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d0f0      	beq.n	8004e58 <HAL_RCC_OscConfig+0x200>
 8004e76:	e01b      	b.n	8004eb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e78:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <HAL_RCC_OscConfig+0x248>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e7e:	f7ff fbdb 	bl	8004638 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e84:	e00e      	b.n	8004ea4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e86:	f7ff fbd7 	bl	8004638 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d907      	bls.n	8004ea4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e150      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	42470000 	.word	0x42470000
 8004ea0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ea4:	4b88      	ldr	r3, [pc, #544]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1ea      	bne.n	8004e86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8097 	beq.w	8004fec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ec2:	4b81      	ldr	r3, [pc, #516]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10f      	bne.n	8004eee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60bb      	str	r3, [r7, #8]
 8004ed2:	4b7d      	ldr	r3, [pc, #500]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	4a7c      	ldr	r2, [pc, #496]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004edc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ede:	4b7a      	ldr	r3, [pc, #488]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee6:	60bb      	str	r3, [r7, #8]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eea:	2301      	movs	r3, #1
 8004eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eee:	4b77      	ldr	r3, [pc, #476]	; (80050cc <HAL_RCC_OscConfig+0x474>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d118      	bne.n	8004f2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efa:	4b74      	ldr	r3, [pc, #464]	; (80050cc <HAL_RCC_OscConfig+0x474>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a73      	ldr	r2, [pc, #460]	; (80050cc <HAL_RCC_OscConfig+0x474>)
 8004f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f06:	f7ff fb97 	bl	8004638 <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f0e:	f7ff fb93 	bl	8004638 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e10c      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f20:	4b6a      	ldr	r3, [pc, #424]	; (80050cc <HAL_RCC_OscConfig+0x474>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0f0      	beq.n	8004f0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d106      	bne.n	8004f42 <HAL_RCC_OscConfig+0x2ea>
 8004f34:	4b64      	ldr	r3, [pc, #400]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f38:	4a63      	ldr	r2, [pc, #396]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f3a:	f043 0301 	orr.w	r3, r3, #1
 8004f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f40:	e01c      	b.n	8004f7c <HAL_RCC_OscConfig+0x324>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b05      	cmp	r3, #5
 8004f48:	d10c      	bne.n	8004f64 <HAL_RCC_OscConfig+0x30c>
 8004f4a:	4b5f      	ldr	r3, [pc, #380]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4e:	4a5e      	ldr	r2, [pc, #376]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	6713      	str	r3, [r2, #112]	; 0x70
 8004f56:	4b5c      	ldr	r3, [pc, #368]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a5b      	ldr	r2, [pc, #364]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6713      	str	r3, [r2, #112]	; 0x70
 8004f62:	e00b      	b.n	8004f7c <HAL_RCC_OscConfig+0x324>
 8004f64:	4b58      	ldr	r3, [pc, #352]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	4a57      	ldr	r2, [pc, #348]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f70:	4b55      	ldr	r3, [pc, #340]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f74:	4a54      	ldr	r2, [pc, #336]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004f76:	f023 0304 	bic.w	r3, r3, #4
 8004f7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d015      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7ff fb58 	bl	8004638 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7ff fb54 	bl	8004638 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0cb      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fa2:	4b49      	ldr	r3, [pc, #292]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0ee      	beq.n	8004f8c <HAL_RCC_OscConfig+0x334>
 8004fae:	e014      	b.n	8004fda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fb0:	f7ff fb42 	bl	8004638 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fb6:	e00a      	b.n	8004fce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fb8:	f7ff fb3e 	bl	8004638 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d901      	bls.n	8004fce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	e0b5      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fce:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1ee      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fda:	7dfb      	ldrb	r3, [r7, #23]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d105      	bne.n	8004fec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fe0:	4b39      	ldr	r3, [pc, #228]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	4a38      	ldr	r2, [pc, #224]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 80a1 	beq.w	8005138 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ff6:	4b34      	ldr	r3, [pc, #208]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
 8004ffe:	2b08      	cmp	r3, #8
 8005000:	d05c      	beq.n	80050bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d141      	bne.n	800508e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800500a:	4b31      	ldr	r3, [pc, #196]	; (80050d0 <HAL_RCC_OscConfig+0x478>)
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7ff fb12 	bl	8004638 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005018:	f7ff fb0e 	bl	8004638 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e087      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	019b      	lsls	r3, r3, #6
 8005046:	431a      	orrs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	3b01      	subs	r3, #1
 8005050:	041b      	lsls	r3, r3, #16
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	061b      	lsls	r3, r3, #24
 800505a:	491b      	ldr	r1, [pc, #108]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 800505c:	4313      	orrs	r3, r2
 800505e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <HAL_RCC_OscConfig+0x478>)
 8005062:	2201      	movs	r2, #1
 8005064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005066:	f7ff fae7 	bl	8004638 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800506e:	f7ff fae3 	bl	8004638 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e05c      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0x416>
 800508c:	e054      	b.n	8005138 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508e:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <HAL_RCC_OscConfig+0x478>)
 8005090:	2200      	movs	r2, #0
 8005092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7ff fad0 	bl	8004638 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800509a:	e008      	b.n	80050ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800509c:	f7ff facc 	bl	8004638 <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e045      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ae:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCC_OscConfig+0x470>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <HAL_RCC_OscConfig+0x444>
 80050ba:	e03d      	b.n	8005138 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e038      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
 80050c8:	40023800 	.word	0x40023800
 80050cc:	40007000 	.word	0x40007000
 80050d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050d4:	4b1b      	ldr	r3, [pc, #108]	; (8005144 <HAL_RCC_OscConfig+0x4ec>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d028      	beq.n	8005134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d121      	bne.n	8005134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d11a      	bne.n	8005134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005104:	4013      	ands	r3, r2
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800510a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800510c:	4293      	cmp	r3, r2
 800510e:	d111      	bne.n	8005134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	085b      	lsrs	r3, r3, #1
 800511c:	3b01      	subs	r3, #1
 800511e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005120:	429a      	cmp	r2, r3
 8005122:	d107      	bne.n	8005134 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005130:	429a      	cmp	r2, r3
 8005132:	d001      	beq.n	8005138 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800

08005148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0cc      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800515c:	4b68      	ldr	r3, [pc, #416]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d90c      	bls.n	8005184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516a:	4b65      	ldr	r3, [pc, #404]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	b2d2      	uxtb	r2, r2
 8005170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b63      	ldr	r3, [pc, #396]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0b8      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d020      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800519c:	4b59      	ldr	r3, [pc, #356]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	4a58      	ldr	r2, [pc, #352]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0308 	and.w	r3, r3, #8
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051b4:	4b53      	ldr	r3, [pc, #332]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	4a52      	ldr	r2, [pc, #328]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80051ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051c0:	4b50      	ldr	r3, [pc, #320]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	494d      	ldr	r1, [pc, #308]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d044      	beq.n	8005268 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e6:	4b47      	ldr	r3, [pc, #284]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d119      	bne.n	8005226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e07f      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d003      	beq.n	8005206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005202:	2b03      	cmp	r3, #3
 8005204:	d107      	bne.n	8005216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005206:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e06f      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005216:	4b3b      	ldr	r3, [pc, #236]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e067      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005226:	4b37      	ldr	r3, [pc, #220]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 8005228:	689b      	ldr	r3, [r3, #8]
 800522a:	f023 0203 	bic.w	r2, r3, #3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	4934      	ldr	r1, [pc, #208]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005238:	f7ff f9fe 	bl	8004638 <HAL_GetTick>
 800523c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523e:	e00a      	b.n	8005256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005240:	f7ff f9fa 	bl	8004638 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	f241 3288 	movw	r2, #5000	; 0x1388
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e04f      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005256:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 020c 	and.w	r2, r3, #12
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	429a      	cmp	r2, r3
 8005266:	d1eb      	bne.n	8005240 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005268:	4b25      	ldr	r3, [pc, #148]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0307 	and.w	r3, r3, #7
 8005270:	683a      	ldr	r2, [r7, #0]
 8005272:	429a      	cmp	r2, r3
 8005274:	d20c      	bcs.n	8005290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005276:	4b22      	ldr	r3, [pc, #136]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e032      	b.n	80052f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d008      	beq.n	80052ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800529c:	4b19      	ldr	r3, [pc, #100]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4916      	ldr	r1, [pc, #88]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0308 	and.w	r3, r3, #8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052ba:	4b12      	ldr	r3, [pc, #72]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	490e      	ldr	r1, [pc, #56]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80052ce:	f000 f821 	bl	8005314 <HAL_RCC_GetSysClockFreq>
 80052d2:	4602      	mov	r2, r0
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	091b      	lsrs	r3, r3, #4
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	490a      	ldr	r1, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	5ccb      	ldrb	r3, [r1, r3]
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	4a09      	ldr	r2, [pc, #36]	; (800530c <HAL_RCC_ClockConfig+0x1c4>)
 80052e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ea:	4b09      	ldr	r3, [pc, #36]	; (8005310 <HAL_RCC_ClockConfig+0x1c8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff f95e 	bl	80045b0 <HAL_InitTick>

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40023c00 	.word	0x40023c00
 8005304:	40023800 	.word	0x40023800
 8005308:	08008164 	.word	0x08008164
 800530c:	20000000 	.word	0x20000000
 8005310:	20000004 	.word	0x20000004

08005314 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005314:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005318:	b094      	sub	sp, #80	; 0x50
 800531a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	2300      	movs	r3, #0
 8005322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005324:	2300      	movs	r3, #0
 8005326:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800532c:	4b79      	ldr	r3, [pc, #484]	; (8005514 <HAL_RCC_GetSysClockFreq+0x200>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 030c 	and.w	r3, r3, #12
 8005334:	2b08      	cmp	r3, #8
 8005336:	d00d      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x40>
 8005338:	2b08      	cmp	r3, #8
 800533a:	f200 80e1 	bhi.w	8005500 <HAL_RCC_GetSysClockFreq+0x1ec>
 800533e:	2b00      	cmp	r3, #0
 8005340:	d002      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0x34>
 8005342:	2b04      	cmp	r3, #4
 8005344:	d003      	beq.n	800534e <HAL_RCC_GetSysClockFreq+0x3a>
 8005346:	e0db      	b.n	8005500 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005348:	4b73      	ldr	r3, [pc, #460]	; (8005518 <HAL_RCC_GetSysClockFreq+0x204>)
 800534a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800534c:	e0db      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800534e:	4b73      	ldr	r3, [pc, #460]	; (800551c <HAL_RCC_GetSysClockFreq+0x208>)
 8005350:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005352:	e0d8      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005354:	4b6f      	ldr	r3, [pc, #444]	; (8005514 <HAL_RCC_GetSysClockFreq+0x200>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800535e:	4b6d      	ldr	r3, [pc, #436]	; (8005514 <HAL_RCC_GetSysClockFreq+0x200>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d063      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800536a:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <HAL_RCC_GetSysClockFreq+0x200>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	099b      	lsrs	r3, r3, #6
 8005370:	2200      	movs	r2, #0
 8005372:	63bb      	str	r3, [r7, #56]	; 0x38
 8005374:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537c:	633b      	str	r3, [r7, #48]	; 0x30
 800537e:	2300      	movs	r3, #0
 8005380:	637b      	str	r3, [r7, #52]	; 0x34
 8005382:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005386:	4622      	mov	r2, r4
 8005388:	462b      	mov	r3, r5
 800538a:	f04f 0000 	mov.w	r0, #0
 800538e:	f04f 0100 	mov.w	r1, #0
 8005392:	0159      	lsls	r1, r3, #5
 8005394:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005398:	0150      	lsls	r0, r2, #5
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	4621      	mov	r1, r4
 80053a0:	1a51      	subs	r1, r2, r1
 80053a2:	6139      	str	r1, [r7, #16]
 80053a4:	4629      	mov	r1, r5
 80053a6:	eb63 0301 	sbc.w	r3, r3, r1
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053b8:	4659      	mov	r1, fp
 80053ba:	018b      	lsls	r3, r1, #6
 80053bc:	4651      	mov	r1, sl
 80053be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053c2:	4651      	mov	r1, sl
 80053c4:	018a      	lsls	r2, r1, #6
 80053c6:	4651      	mov	r1, sl
 80053c8:	ebb2 0801 	subs.w	r8, r2, r1
 80053cc:	4659      	mov	r1, fp
 80053ce:	eb63 0901 	sbc.w	r9, r3, r1
 80053d2:	f04f 0200 	mov.w	r2, #0
 80053d6:	f04f 0300 	mov.w	r3, #0
 80053da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053e6:	4690      	mov	r8, r2
 80053e8:	4699      	mov	r9, r3
 80053ea:	4623      	mov	r3, r4
 80053ec:	eb18 0303 	adds.w	r3, r8, r3
 80053f0:	60bb      	str	r3, [r7, #8]
 80053f2:	462b      	mov	r3, r5
 80053f4:	eb49 0303 	adc.w	r3, r9, r3
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005406:	4629      	mov	r1, r5
 8005408:	024b      	lsls	r3, r1, #9
 800540a:	4621      	mov	r1, r4
 800540c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005410:	4621      	mov	r1, r4
 8005412:	024a      	lsls	r2, r1, #9
 8005414:	4610      	mov	r0, r2
 8005416:	4619      	mov	r1, r3
 8005418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800541a:	2200      	movs	r2, #0
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
 800541e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005424:	f7fa ff2c 	bl	8000280 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4613      	mov	r3, r2
 800542e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005430:	e058      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005432:	4b38      	ldr	r3, [pc, #224]	; (8005514 <HAL_RCC_GetSysClockFreq+0x200>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	2200      	movs	r2, #0
 800543a:	4618      	mov	r0, r3
 800543c:	4611      	mov	r1, r2
 800543e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	2300      	movs	r3, #0
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
 8005448:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	f04f 0000 	mov.w	r0, #0
 8005454:	f04f 0100 	mov.w	r1, #0
 8005458:	0159      	lsls	r1, r3, #5
 800545a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800545e:	0150      	lsls	r0, r2, #5
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4641      	mov	r1, r8
 8005466:	ebb2 0a01 	subs.w	sl, r2, r1
 800546a:	4649      	mov	r1, r9
 800546c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800547c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005480:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005484:	ebb2 040a 	subs.w	r4, r2, sl
 8005488:	eb63 050b 	sbc.w	r5, r3, fp
 800548c:	f04f 0200 	mov.w	r2, #0
 8005490:	f04f 0300 	mov.w	r3, #0
 8005494:	00eb      	lsls	r3, r5, #3
 8005496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800549a:	00e2      	lsls	r2, r4, #3
 800549c:	4614      	mov	r4, r2
 800549e:	461d      	mov	r5, r3
 80054a0:	4643      	mov	r3, r8
 80054a2:	18e3      	adds	r3, r4, r3
 80054a4:	603b      	str	r3, [r7, #0]
 80054a6:	464b      	mov	r3, r9
 80054a8:	eb45 0303 	adc.w	r3, r5, r3
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ba:	4629      	mov	r1, r5
 80054bc:	028b      	lsls	r3, r1, #10
 80054be:	4621      	mov	r1, r4
 80054c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054c4:	4621      	mov	r1, r4
 80054c6:	028a      	lsls	r2, r1, #10
 80054c8:	4610      	mov	r0, r2
 80054ca:	4619      	mov	r1, r3
 80054cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054ce:	2200      	movs	r2, #0
 80054d0:	61bb      	str	r3, [r7, #24]
 80054d2:	61fa      	str	r2, [r7, #28]
 80054d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054d8:	f7fa fed2 	bl	8000280 <__aeabi_uldivmod>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4613      	mov	r3, r2
 80054e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054e4:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <HAL_RCC_GetSysClockFreq+0x200>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	f003 0303 	and.w	r3, r3, #3
 80054ee:	3301      	adds	r3, #1
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80054f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80054fe:	e002      	b.n	8005506 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005500:	4b05      	ldr	r3, [pc, #20]	; (8005518 <HAL_RCC_GetSysClockFreq+0x204>)
 8005502:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005508:	4618      	mov	r0, r3
 800550a:	3750      	adds	r7, #80	; 0x50
 800550c:	46bd      	mov	sp, r7
 800550e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005512:	bf00      	nop
 8005514:	40023800 	.word	0x40023800
 8005518:	00f42400 	.word	0x00f42400
 800551c:	007a1200 	.word	0x007a1200

08005520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005520:	b480      	push	{r7}
 8005522:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005524:	4b03      	ldr	r3, [pc, #12]	; (8005534 <HAL_RCC_GetHCLKFreq+0x14>)
 8005526:	681b      	ldr	r3, [r3, #0]
}
 8005528:	4618      	mov	r0, r3
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000000 	.word	0x20000000

08005538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800553c:	f7ff fff0 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b05      	ldr	r3, [pc, #20]	; (8005558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	0a9b      	lsrs	r3, r3, #10
 8005548:	f003 0307 	and.w	r3, r3, #7
 800554c:	4903      	ldr	r1, [pc, #12]	; (800555c <HAL_RCC_GetPCLK1Freq+0x24>)
 800554e:	5ccb      	ldrb	r3, [r1, r3]
 8005550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005554:	4618      	mov	r0, r3
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40023800 	.word	0x40023800
 800555c:	08008174 	.word	0x08008174

08005560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005564:	f7ff ffdc 	bl	8005520 <HAL_RCC_GetHCLKFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	0b5b      	lsrs	r3, r3, #13
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	4903      	ldr	r1, [pc, #12]	; (8005584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800557c:	4618      	mov	r0, r3
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40023800 	.word	0x40023800
 8005584:	08008174 	.word	0x08008174

08005588 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d105      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d035      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80055b0:	4b62      	ldr	r3, [pc, #392]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055b6:	f7ff f83f 	bl	8004638 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055bc:	e008      	b.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055be:	f7ff f83b 	bl	8004638 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e0b0      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80055d0:	4b5b      	ldr	r3, [pc, #364]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	019a      	lsls	r2, r3, #6
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	071b      	lsls	r3, r3, #28
 80055e8:	4955      	ldr	r1, [pc, #340]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80055f0:	4b52      	ldr	r3, [pc, #328]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80055f2:	2201      	movs	r2, #1
 80055f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055f6:	f7ff f81f 	bl	8004638 <HAL_GetTick>
 80055fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055fc:	e008      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80055fe:	f7ff f81b 	bl	8004638 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e090      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005610:	4b4b      	ldr	r3, [pc, #300]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8083 	beq.w	8005730 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
 800562e:	4b44      	ldr	r3, [pc, #272]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	4a43      	ldr	r2, [pc, #268]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005638:	6413      	str	r3, [r2, #64]	; 0x40
 800563a:	4b41      	ldr	r3, [pc, #260]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005646:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a3e      	ldr	r2, [pc, #248]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005652:	f7fe fff1 	bl	8004638 <HAL_GetTick>
 8005656:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005658:	e008      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fe ffed 	bl	8004638 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e062      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800566c:	4b35      	ldr	r3, [pc, #212]	; (8005744 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005678:	4b31      	ldr	r3, [pc, #196]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005680:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d02f      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	429a      	cmp	r2, r3
 8005694:	d028      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005696:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056a0:	4b29      	ldr	r3, [pc, #164]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056a6:	4b28      	ldr	r3, [pc, #160]	; (8005748 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056ac:	4a24      	ldr	r2, [pc, #144]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056b2:	4b23      	ldr	r3, [pc, #140]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d114      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056be:	f7fe ffbb 	bl	8004638 <HAL_GetTick>
 80056c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	e00a      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056c6:	f7fe ffb7 	bl	8004638 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d901      	bls.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e02a      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056dc:	4b18      	ldr	r3, [pc, #96]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0302 	and.w	r3, r3, #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d0ee      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f4:	d10d      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80056f6:	4b12      	ldr	r3, [pc, #72]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570a:	490d      	ldr	r1, [pc, #52]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570c:	4313      	orrs	r3, r2
 800570e:	608b      	str	r3, [r1, #8]
 8005710:	e005      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005712:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	4a0a      	ldr	r2, [pc, #40]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005718:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800571c:	6093      	str	r3, [r2, #8]
 800571e:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68db      	ldr	r3, [r3, #12]
 8005726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800572a:	4905      	ldr	r1, [pc, #20]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	42470068 	.word	0x42470068
 8005740:	40023800 	.word	0x40023800
 8005744:	40007000 	.word	0x40007000
 8005748:	42470e40 	.word	0x42470e40

0800574c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e066      	b.n	8005830 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	7f5b      	ldrb	r3, [r3, #29]
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fe fcfa 	bl	800416c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	22ca      	movs	r2, #202	; 0xca
 8005784:	625a      	str	r2, [r3, #36]	; 0x24
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2253      	movs	r2, #83	; 0x53
 800578c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f927 	bl	80059e2 <RTC_EnterInitMode>
 8005794:	4603      	mov	r3, r0
 8005796:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d12c      	bne.n	80057f8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6812      	ldr	r2, [r2, #0]
 80057a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80057ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057b0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6899      	ldr	r1, [r3, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68d2      	ldr	r2, [r2, #12]
 80057d8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6919      	ldr	r1, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	041a      	lsls	r2, r3, #16
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f92e 	bl	8005a50 <RTC_ExitInitMode>
 80057f4:	4603      	mov	r3, r0
 80057f6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d113      	bne.n	8005826 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800580c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699a      	ldr	r2, [r3, #24]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	22ff      	movs	r2, #255	; 0xff
 800582c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800582e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800586a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800586e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	b2db      	uxtb	r3, r3
 8005876:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800587a:	b2da      	uxtb	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	0a1b      	lsrs	r3, r3, #8
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588a:	b2da      	uxtb	r2, r3
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005898:	b2da      	uxtb	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	0d9b      	lsrs	r3, r3, #22
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d11a      	bne.n	80058ea <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 f8ee 	bl	8005a9a <RTC_Bcd2ToByte>
 80058be:	4603      	mov	r3, r0
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	785b      	ldrb	r3, [r3, #1]
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f8e5 	bl	8005a9a <RTC_Bcd2ToByte>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	789b      	ldrb	r3, [r3, #2]
 80058dc:	4618      	mov	r0, r3
 80058de:	f000 f8dc 	bl	8005a9a <RTC_Bcd2ToByte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80058ea:	2300      	movs	r3, #0
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b086      	sub	sp, #24
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800590e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005912:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	b2da      	uxtb	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	b2db      	uxtb	r3, r3
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	b2da      	uxtb	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005936:	b2da      	uxtb	r2, r3
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	0b5b      	lsrs	r3, r3, #13
 8005940:	b2db      	uxtb	r3, r3
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	b2da      	uxtb	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d11a      	bne.n	8005988 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	78db      	ldrb	r3, [r3, #3]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f89f 	bl	8005a9a <RTC_Bcd2ToByte>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	785b      	ldrb	r3, [r3, #1]
 8005968:	4618      	mov	r0, r3
 800596a:	f000 f896 	bl	8005a9a <RTC_Bcd2ToByte>
 800596e:	4603      	mov	r3, r0
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	789b      	ldrb	r3, [r3, #2]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f88d 	bl	8005a9a <RTC_Bcd2ToByte>
 8005980:	4603      	mov	r3, r0
 8005982:	461a      	mov	r2, r3
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80059ac:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059ae:	f7fe fe43 	bl	8004638 <HAL_GetTick>
 80059b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059b4:	e009      	b.n	80059ca <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80059b6:	f7fe fe3f 	bl	8004638 <HAL_GetTick>
 80059ba:	4602      	mov	r2, r0
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1ad3      	subs	r3, r2, r3
 80059c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c4:	d901      	bls.n	80059ca <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e007      	b.n	80059da <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0ee      	beq.n	80059b6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}

080059e2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d122      	bne.n	8005a46 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a0e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a10:	f7fe fe12 	bl	8004638 <HAL_GetTick>
 8005a14:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a16:	e00c      	b.n	8005a32 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005a18:	f7fe fe0e 	bl	8004638 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a26:	d904      	bls.n	8005a32 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2204      	movs	r2, #4
 8005a2c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <RTC_EnterInitMode+0x64>
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d1e8      	bne.n	8005a18 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68da      	ldr	r2, [r3, #12]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f003 0320 	and.w	r3, r3, #32
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10a      	bne.n	8005a90 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff ff89 	bl	8005992 <HAL_RTC_WaitForSynchro>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d004      	beq.n	8005a90 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2204      	movs	r2, #4
 8005a8a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	091b      	lsrs	r3, r3, #4
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	461a      	mov	r2, r3
 8005ab0:	0092      	lsls	r2, r2, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	b2db      	uxtb	r3, r3
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e07b      	b.n	8005bdc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d108      	bne.n	8005afe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005af4:	d009      	beq.n	8005b0a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	61da      	str	r2, [r3, #28]
 8005afc:	e005      	b.n	8005b0a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d106      	bne.n	8005b2a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fe fb4b 	bl	80041c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b5c:	431a      	orrs	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	431a      	orrs	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	431a      	orrs	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	699b      	ldr	r3, [r3, #24]
 8005b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b84:	431a      	orrs	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8e:	ea42 0103 	orr.w	r1, r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	0c1b      	lsrs	r3, r3, #16
 8005ba8:	f003 0104 	and.w	r1, r3, #4
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb0:	f003 0210 	and.w	r2, r3, #16
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	69da      	ldr	r2, [r3, #28]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08c      	sub	sp, #48	; 0x30
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
 8005bf0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_SPI_TransmitReceive+0x26>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e18a      	b.n	8005f20 <HAL_SPI_TransmitReceive+0x33c>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c12:	f7fe fd11 	bl	8004638 <HAL_GetTick>
 8005c16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005c28:	887b      	ldrh	r3, [r7, #2]
 8005c2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d00f      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x70>
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c3a:	d107      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <HAL_SPI_TransmitReceive+0x68>
 8005c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005c48:	2b04      	cmp	r3, #4
 8005c4a:	d003      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c52:	e15b      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d005      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x82>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_SPI_TransmitReceive+0x82>
 8005c60:	887b      	ldrh	r3, [r7, #2]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d103      	bne.n	8005c6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005c6c:	e14e      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d003      	beq.n	8005c82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2205      	movs	r2, #5
 8005c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	887a      	ldrh	r2, [r7, #2]
 8005c92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	887a      	ldrh	r2, [r7, #2]
 8005c98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	887a      	ldrh	r2, [r7, #2]
 8005ca4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	887a      	ldrh	r2, [r7, #2]
 8005caa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc2:	2b40      	cmp	r3, #64	; 0x40
 8005cc4:	d007      	beq.n	8005cd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68db      	ldr	r3, [r3, #12]
 8005cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cde:	d178      	bne.n	8005dd2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x10a>
 8005ce8:	8b7b      	ldrh	r3, [r7, #26]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d166      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf2:	881a      	ldrh	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	b29a      	uxth	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d12:	e053      	b.n	8005dbc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d11b      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x176>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d016      	beq.n	8005d5a <HAL_SPI_TransmitReceive+0x176>
 8005d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d113      	bne.n	8005d5a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	881a      	ldrh	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d56:	2300      	movs	r3, #0
 8005d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d119      	bne.n	8005d9c <HAL_SPI_TransmitReceive+0x1b8>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d014      	beq.n	8005d9c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68da      	ldr	r2, [r3, #12]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	b292      	uxth	r2, r2
 8005d7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	1c9a      	adds	r2, r3, #2
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d9c:	f7fe fc4c 	bl	8004638 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d807      	bhi.n	8005dbc <HAL_SPI_TransmitReceive+0x1d8>
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db2:	d003      	beq.n	8005dbc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005db4:	2303      	movs	r3, #3
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005dba:	e0a7      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1a6      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x130>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1a1      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x130>
 8005dd0:	e07c      	b.n	8005ecc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_SPI_TransmitReceive+0x1fc>
 8005dda:	8b7b      	ldrh	r3, [r7, #26]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d16b      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	330c      	adds	r3, #12
 8005dea:	7812      	ldrb	r2, [r2, #0]
 8005dec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	1c5a      	adds	r2, r3, #1
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e06:	e057      	b.n	8005eb8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d11c      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x26c>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d017      	beq.n	8005e50 <HAL_SPI_TransmitReceive+0x26c>
 8005e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d114      	bne.n	8005e50 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	330c      	adds	r3, #12
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	3b01      	subs	r3, #1
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f003 0301 	and.w	r3, r3, #1
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d119      	bne.n	8005e92 <HAL_SPI_TransmitReceive+0x2ae>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d014      	beq.n	8005e92 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68da      	ldr	r2, [r3, #12]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	1c5a      	adds	r2, r3, #1
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005e92:	f7fe fbd1 	bl	8004638 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d803      	bhi.n	8005eaa <HAL_SPI_TransmitReceive+0x2c6>
 8005ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea8:	d102      	bne.n	8005eb0 <HAL_SPI_TransmitReceive+0x2cc>
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005eb6:	e029      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1a2      	bne.n	8005e08 <HAL_SPI_TransmitReceive+0x224>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d19d      	bne.n	8005e08 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ece:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f8b1 	bl	8006038 <SPI_EndRxTxTransaction>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d006      	beq.n	8005eea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ee8:	e010      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10b      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	617b      	str	r3, [r7, #20]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	e000      	b.n	8005f0c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005f1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3730      	adds	r7, #48	; 0x30
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	603b      	str	r3, [r7, #0]
 8005f34:	4613      	mov	r3, r2
 8005f36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f38:	f7fe fb7e 	bl	8004638 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	4413      	add	r3, r2
 8005f46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f48:	f7fe fb76 	bl	8004638 <HAL_GetTick>
 8005f4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f4e:	4b39      	ldr	r3, [pc, #228]	; (8006034 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	015b      	lsls	r3, r3, #5
 8005f54:	0d1b      	lsrs	r3, r3, #20
 8005f56:	69fa      	ldr	r2, [r7, #28]
 8005f58:	fb02 f303 	mul.w	r3, r2, r3
 8005f5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f5e:	e054      	b.n	800600a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f66:	d050      	beq.n	800600a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f68:	f7fe fb66 	bl	8004638 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d902      	bls.n	8005f7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d13d      	bne.n	8005ffa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f96:	d111      	bne.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fa0:	d004      	beq.n	8005fac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d107      	bne.n	8005fbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc4:	d10f      	bne.n	8005fe6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fd4:	601a      	str	r2, [r3, #0]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fe4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ff6:	2303      	movs	r3, #3
 8005ff8:	e017      	b.n	800602a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	3b01      	subs	r3, #1
 8006008:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4013      	ands	r3, r2
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	429a      	cmp	r2, r3
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	461a      	mov	r2, r3
 8006022:	79fb      	ldrb	r3, [r7, #7]
 8006024:	429a      	cmp	r2, r3
 8006026:	d19b      	bne.n	8005f60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000000 	.word	0x20000000

08006038 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af02      	add	r7, sp, #8
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <SPI_EndRxTxTransaction+0x7c>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <SPI_EndRxTxTransaction+0x80>)
 800604a:	fba2 2303 	umull	r2, r3, r2, r3
 800604e:	0d5b      	lsrs	r3, r3, #21
 8006050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006054:	fb02 f303 	mul.w	r3, r2, r3
 8006058:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006062:	d112      	bne.n	800608a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2200      	movs	r2, #0
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f7ff ff5a 	bl	8005f28 <SPI_WaitFlagStateUntilTimeout>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d016      	beq.n	80060a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607e:	f043 0220 	orr.w	r2, r3, #32
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e00f      	b.n	80060aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	3b01      	subs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	2b80      	cmp	r3, #128	; 0x80
 80060a2:	d0f2      	beq.n	800608a <SPI_EndRxTxTransaction+0x52>
 80060a4:	e000      	b.n	80060a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80060a6:	bf00      	nop
  }

  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000000 	.word	0x20000000
 80060b8:	165e9f81 	.word	0x165e9f81

080060bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e03f      	b.n	800614e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d106      	bne.n	80060e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f7fe f8b4 	bl	8004250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2224      	movs	r2, #36	; 0x24
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f929 	bl	8006358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006114:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695a      	ldr	r2, [r3, #20]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006124:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68da      	ldr	r2, [r3, #12]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006134:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2220      	movs	r2, #32
 8006148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3708      	adds	r7, #8
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}

08006156 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	b08a      	sub	sp, #40	; 0x28
 800615a:	af02      	add	r7, sp, #8
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	603b      	str	r3, [r7, #0]
 8006162:	4613      	mov	r3, r2
 8006164:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b20      	cmp	r3, #32
 8006174:	d17c      	bne.n	8006270 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <HAL_UART_Transmit+0x2c>
 800617c:	88fb      	ldrh	r3, [r7, #6]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e075      	b.n	8006272 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800618c:	2b01      	cmp	r3, #1
 800618e:	d101      	bne.n	8006194 <HAL_UART_Transmit+0x3e>
 8006190:	2302      	movs	r3, #2
 8006192:	e06e      	b.n	8006272 <HAL_UART_Transmit+0x11c>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2221      	movs	r2, #33	; 0x21
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061aa:	f7fe fa45 	bl	8004638 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	88fa      	ldrh	r2, [r7, #6]
 80061b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	88fa      	ldrh	r2, [r7, #6]
 80061ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c4:	d108      	bne.n	80061d8 <HAL_UART_Transmit+0x82>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d104      	bne.n	80061d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	61bb      	str	r3, [r7, #24]
 80061d6:	e003      	b.n	80061e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061dc:	2300      	movs	r3, #0
 80061de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80061e8:	e02a      	b.n	8006240 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2180      	movs	r1, #128	; 0x80
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 f840 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e036      	b.n	8006272 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d10b      	bne.n	8006222 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	881b      	ldrh	r3, [r3, #0]
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006218:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	3302      	adds	r3, #2
 800621e:	61bb      	str	r3, [r7, #24]
 8006220:	e007      	b.n	8006232 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	781a      	ldrb	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1cf      	bne.n	80061ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2200      	movs	r2, #0
 8006252:	2140      	movs	r1, #64	; 0x40
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f000 f810 	bl	800627a <UART_WaitOnFlagUntilTimeout>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d001      	beq.n	8006264 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e006      	b.n	8006272 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2220      	movs	r2, #32
 8006268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	e000      	b.n	8006272 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006270:	2302      	movs	r3, #2
  }
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b090      	sub	sp, #64	; 0x40
 800627e:	af00      	add	r7, sp, #0
 8006280:	60f8      	str	r0, [r7, #12]
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	603b      	str	r3, [r7, #0]
 8006286:	4613      	mov	r3, r2
 8006288:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800628a:	e050      	b.n	800632e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800628c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d04c      	beq.n	800632e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <UART_WaitOnFlagUntilTimeout+0x30>
 800629a:	f7fe f9cd 	bl	8004638 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d241      	bcs.n	800632e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	e853 3f00 	ldrex	r3, [r3]
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	330c      	adds	r3, #12
 80062c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062ca:	637a      	str	r2, [r7, #52]	; 0x34
 80062cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e5      	bne.n	80062aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	613b      	str	r3, [r7, #16]
   return(result);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f023 0301 	bic.w	r3, r3, #1
 80062f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	3314      	adds	r3, #20
 80062fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062fe:	623a      	str	r2, [r7, #32]
 8006300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006302:	69f9      	ldr	r1, [r7, #28]
 8006304:	6a3a      	ldr	r2, [r7, #32]
 8006306:	e841 2300 	strex	r3, r2, [r1]
 800630a:	61bb      	str	r3, [r7, #24]
   return(result);
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e5      	bne.n	80062de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2220      	movs	r2, #32
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e00f      	b.n	800634e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4013      	ands	r3, r2
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	429a      	cmp	r2, r3
 800634a:	d09f      	beq.n	800628c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3740      	adds	r7, #64	; 0x40
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
	...

08006358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800635c:	b0c0      	sub	sp, #256	; 0x100
 800635e:	af00      	add	r7, sp, #0
 8006360:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	68d9      	ldr	r1, [r3, #12]
 8006376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	ea40 0301 	orr.w	r3, r0, r1
 8006380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	431a      	orrs	r2, r3
 8006390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	431a      	orrs	r2, r3
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063b0:	f021 010c 	bic.w	r1, r1, #12
 80063b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80063be:	430b      	orrs	r3, r1
 80063c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d2:	6999      	ldr	r1, [r3, #24]
 80063d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	ea40 0301 	orr.w	r3, r0, r1
 80063de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b8f      	ldr	r3, [pc, #572]	; (8006624 <UART_SetConfig+0x2cc>)
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d005      	beq.n	80063f8 <UART_SetConfig+0xa0>
 80063ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	4b8d      	ldr	r3, [pc, #564]	; (8006628 <UART_SetConfig+0x2d0>)
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d104      	bne.n	8006402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7ff f8b2 	bl	8005560 <HAL_RCC_GetPCLK2Freq>
 80063fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006400:	e003      	b.n	800640a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006402:	f7ff f899 	bl	8005538 <HAL_RCC_GetPCLK1Freq>
 8006406:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800640a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800640e:	69db      	ldr	r3, [r3, #28]
 8006410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006414:	f040 810c 	bne.w	8006630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641c:	2200      	movs	r2, #0
 800641e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006422:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800642a:	4622      	mov	r2, r4
 800642c:	462b      	mov	r3, r5
 800642e:	1891      	adds	r1, r2, r2
 8006430:	65b9      	str	r1, [r7, #88]	; 0x58
 8006432:	415b      	adcs	r3, r3
 8006434:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800643a:	4621      	mov	r1, r4
 800643c:	eb12 0801 	adds.w	r8, r2, r1
 8006440:	4629      	mov	r1, r5
 8006442:	eb43 0901 	adc.w	r9, r3, r1
 8006446:	f04f 0200 	mov.w	r2, #0
 800644a:	f04f 0300 	mov.w	r3, #0
 800644e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800645a:	4690      	mov	r8, r2
 800645c:	4699      	mov	r9, r3
 800645e:	4623      	mov	r3, r4
 8006460:	eb18 0303 	adds.w	r3, r8, r3
 8006464:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006468:	462b      	mov	r3, r5
 800646a:	eb49 0303 	adc.w	r3, r9, r3
 800646e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800647e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006486:	460b      	mov	r3, r1
 8006488:	18db      	adds	r3, r3, r3
 800648a:	653b      	str	r3, [r7, #80]	; 0x50
 800648c:	4613      	mov	r3, r2
 800648e:	eb42 0303 	adc.w	r3, r2, r3
 8006492:	657b      	str	r3, [r7, #84]	; 0x54
 8006494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800649c:	f7f9 fef0 	bl	8000280 <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4b61      	ldr	r3, [pc, #388]	; (800662c <UART_SetConfig+0x2d4>)
 80064a6:	fba3 2302 	umull	r2, r3, r3, r2
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	011c      	lsls	r4, r3, #4
 80064ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80064bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80064c8:	415b      	adcs	r3, r3
 80064ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80064d0:	4641      	mov	r1, r8
 80064d2:	eb12 0a01 	adds.w	sl, r2, r1
 80064d6:	4649      	mov	r1, r9
 80064d8:	eb43 0b01 	adc.w	fp, r3, r1
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f0:	4692      	mov	sl, r2
 80064f2:	469b      	mov	fp, r3
 80064f4:	4643      	mov	r3, r8
 80064f6:	eb1a 0303 	adds.w	r3, sl, r3
 80064fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80064fe:	464b      	mov	r3, r9
 8006500:	eb4b 0303 	adc.w	r3, fp, r3
 8006504:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006514:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800651c:	460b      	mov	r3, r1
 800651e:	18db      	adds	r3, r3, r3
 8006520:	643b      	str	r3, [r7, #64]	; 0x40
 8006522:	4613      	mov	r3, r2
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	647b      	str	r3, [r7, #68]	; 0x44
 800652a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800652e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006532:	f7f9 fea5 	bl	8000280 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4611      	mov	r1, r2
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <UART_SetConfig+0x2d4>)
 800653e:	fba3 2301 	umull	r2, r3, r3, r1
 8006542:	095b      	lsrs	r3, r3, #5
 8006544:	2264      	movs	r2, #100	; 0x64
 8006546:	fb02 f303 	mul.w	r3, r2, r3
 800654a:	1acb      	subs	r3, r1, r3
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <UART_SetConfig+0x2d4>)
 8006554:	fba3 2302 	umull	r2, r3, r3, r2
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006560:	441c      	add	r4, r3
 8006562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006566:	2200      	movs	r2, #0
 8006568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800656c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006574:	4642      	mov	r2, r8
 8006576:	464b      	mov	r3, r9
 8006578:	1891      	adds	r1, r2, r2
 800657a:	63b9      	str	r1, [r7, #56]	; 0x38
 800657c:	415b      	adcs	r3, r3
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006584:	4641      	mov	r1, r8
 8006586:	1851      	adds	r1, r2, r1
 8006588:	6339      	str	r1, [r7, #48]	; 0x30
 800658a:	4649      	mov	r1, r9
 800658c:	414b      	adcs	r3, r1
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	f04f 0300 	mov.w	r3, #0
 8006598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800659c:	4659      	mov	r1, fp
 800659e:	00cb      	lsls	r3, r1, #3
 80065a0:	4651      	mov	r1, sl
 80065a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80065a6:	4651      	mov	r1, sl
 80065a8:	00ca      	lsls	r2, r1, #3
 80065aa:	4610      	mov	r0, r2
 80065ac:	4619      	mov	r1, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	4642      	mov	r2, r8
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065b8:	464b      	mov	r3, r9
 80065ba:	460a      	mov	r2, r1
 80065bc:	eb42 0303 	adc.w	r3, r2, r3
 80065c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80065d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80065d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80065d8:	460b      	mov	r3, r1
 80065da:	18db      	adds	r3, r3, r3
 80065dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80065de:	4613      	mov	r3, r2
 80065e0:	eb42 0303 	adc.w	r3, r2, r3
 80065e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80065ee:	f7f9 fe47 	bl	8000280 <__aeabi_uldivmod>
 80065f2:	4602      	mov	r2, r0
 80065f4:	460b      	mov	r3, r1
 80065f6:	4b0d      	ldr	r3, [pc, #52]	; (800662c <UART_SetConfig+0x2d4>)
 80065f8:	fba3 1302 	umull	r1, r3, r3, r2
 80065fc:	095b      	lsrs	r3, r3, #5
 80065fe:	2164      	movs	r1, #100	; 0x64
 8006600:	fb01 f303 	mul.w	r3, r1, r3
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	3332      	adds	r3, #50	; 0x32
 800660a:	4a08      	ldr	r2, [pc, #32]	; (800662c <UART_SetConfig+0x2d4>)
 800660c:	fba2 2303 	umull	r2, r3, r2, r3
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	f003 0207 	and.w	r2, r3, #7
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4422      	add	r2, r4
 800661e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006620:	e105      	b.n	800682e <UART_SetConfig+0x4d6>
 8006622:	bf00      	nop
 8006624:	40011000 	.word	0x40011000
 8006628:	40011400 	.word	0x40011400
 800662c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006634:	2200      	movs	r2, #0
 8006636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800663a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800663e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006642:	4642      	mov	r2, r8
 8006644:	464b      	mov	r3, r9
 8006646:	1891      	adds	r1, r2, r2
 8006648:	6239      	str	r1, [r7, #32]
 800664a:	415b      	adcs	r3, r3
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
 800664e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006652:	4641      	mov	r1, r8
 8006654:	1854      	adds	r4, r2, r1
 8006656:	4649      	mov	r1, r9
 8006658:	eb43 0501 	adc.w	r5, r3, r1
 800665c:	f04f 0200 	mov.w	r2, #0
 8006660:	f04f 0300 	mov.w	r3, #0
 8006664:	00eb      	lsls	r3, r5, #3
 8006666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800666a:	00e2      	lsls	r2, r4, #3
 800666c:	4614      	mov	r4, r2
 800666e:	461d      	mov	r5, r3
 8006670:	4643      	mov	r3, r8
 8006672:	18e3      	adds	r3, r4, r3
 8006674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006678:	464b      	mov	r3, r9
 800667a:	eb45 0303 	adc.w	r3, r5, r3
 800667e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800668e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006692:	f04f 0200 	mov.w	r2, #0
 8006696:	f04f 0300 	mov.w	r3, #0
 800669a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800669e:	4629      	mov	r1, r5
 80066a0:	008b      	lsls	r3, r1, #2
 80066a2:	4621      	mov	r1, r4
 80066a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066a8:	4621      	mov	r1, r4
 80066aa:	008a      	lsls	r2, r1, #2
 80066ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80066b0:	f7f9 fde6 	bl	8000280 <__aeabi_uldivmod>
 80066b4:	4602      	mov	r2, r0
 80066b6:	460b      	mov	r3, r1
 80066b8:	4b60      	ldr	r3, [pc, #384]	; (800683c <UART_SetConfig+0x4e4>)
 80066ba:	fba3 2302 	umull	r2, r3, r3, r2
 80066be:	095b      	lsrs	r3, r3, #5
 80066c0:	011c      	lsls	r4, r3, #4
 80066c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80066d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80066d4:	4642      	mov	r2, r8
 80066d6:	464b      	mov	r3, r9
 80066d8:	1891      	adds	r1, r2, r2
 80066da:	61b9      	str	r1, [r7, #24]
 80066dc:	415b      	adcs	r3, r3
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066e4:	4641      	mov	r1, r8
 80066e6:	1851      	adds	r1, r2, r1
 80066e8:	6139      	str	r1, [r7, #16]
 80066ea:	4649      	mov	r1, r9
 80066ec:	414b      	adcs	r3, r1
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	f04f 0200 	mov.w	r2, #0
 80066f4:	f04f 0300 	mov.w	r3, #0
 80066f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066fc:	4659      	mov	r1, fp
 80066fe:	00cb      	lsls	r3, r1, #3
 8006700:	4651      	mov	r1, sl
 8006702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006706:	4651      	mov	r1, sl
 8006708:	00ca      	lsls	r2, r1, #3
 800670a:	4610      	mov	r0, r2
 800670c:	4619      	mov	r1, r3
 800670e:	4603      	mov	r3, r0
 8006710:	4642      	mov	r2, r8
 8006712:	189b      	adds	r3, r3, r2
 8006714:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006718:	464b      	mov	r3, r9
 800671a:	460a      	mov	r2, r1
 800671c:	eb42 0303 	adc.w	r3, r2, r3
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	67bb      	str	r3, [r7, #120]	; 0x78
 800672e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800673c:	4649      	mov	r1, r9
 800673e:	008b      	lsls	r3, r1, #2
 8006740:	4641      	mov	r1, r8
 8006742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006746:	4641      	mov	r1, r8
 8006748:	008a      	lsls	r2, r1, #2
 800674a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800674e:	f7f9 fd97 	bl	8000280 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4b39      	ldr	r3, [pc, #228]	; (800683c <UART_SetConfig+0x4e4>)
 8006758:	fba3 1302 	umull	r1, r3, r3, r2
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	2164      	movs	r1, #100	; 0x64
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	3332      	adds	r3, #50	; 0x32
 800676a:	4a34      	ldr	r2, [pc, #208]	; (800683c <UART_SetConfig+0x4e4>)
 800676c:	fba2 2303 	umull	r2, r3, r2, r3
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006776:	441c      	add	r4, r3
 8006778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800677c:	2200      	movs	r2, #0
 800677e:	673b      	str	r3, [r7, #112]	; 0x70
 8006780:	677a      	str	r2, [r7, #116]	; 0x74
 8006782:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006786:	4642      	mov	r2, r8
 8006788:	464b      	mov	r3, r9
 800678a:	1891      	adds	r1, r2, r2
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	415b      	adcs	r3, r3
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006796:	4641      	mov	r1, r8
 8006798:	1851      	adds	r1, r2, r1
 800679a:	6039      	str	r1, [r7, #0]
 800679c:	4649      	mov	r1, r9
 800679e:	414b      	adcs	r3, r1
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	f04f 0200 	mov.w	r2, #0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80067ae:	4659      	mov	r1, fp
 80067b0:	00cb      	lsls	r3, r1, #3
 80067b2:	4651      	mov	r1, sl
 80067b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067b8:	4651      	mov	r1, sl
 80067ba:	00ca      	lsls	r2, r1, #3
 80067bc:	4610      	mov	r0, r2
 80067be:	4619      	mov	r1, r3
 80067c0:	4603      	mov	r3, r0
 80067c2:	4642      	mov	r2, r8
 80067c4:	189b      	adds	r3, r3, r2
 80067c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80067c8:	464b      	mov	r3, r9
 80067ca:	460a      	mov	r2, r1
 80067cc:	eb42 0303 	adc.w	r3, r2, r3
 80067d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	663b      	str	r3, [r7, #96]	; 0x60
 80067dc:	667a      	str	r2, [r7, #100]	; 0x64
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	f04f 0300 	mov.w	r3, #0
 80067e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80067ea:	4649      	mov	r1, r9
 80067ec:	008b      	lsls	r3, r1, #2
 80067ee:	4641      	mov	r1, r8
 80067f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067f4:	4641      	mov	r1, r8
 80067f6:	008a      	lsls	r2, r1, #2
 80067f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80067fc:	f7f9 fd40 	bl	8000280 <__aeabi_uldivmod>
 8006800:	4602      	mov	r2, r0
 8006802:	460b      	mov	r3, r1
 8006804:	4b0d      	ldr	r3, [pc, #52]	; (800683c <UART_SetConfig+0x4e4>)
 8006806:	fba3 1302 	umull	r1, r3, r3, r2
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	2164      	movs	r1, #100	; 0x64
 800680e:	fb01 f303 	mul.w	r3, r1, r3
 8006812:	1ad3      	subs	r3, r2, r3
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	3332      	adds	r3, #50	; 0x32
 8006818:	4a08      	ldr	r2, [pc, #32]	; (800683c <UART_SetConfig+0x4e4>)
 800681a:	fba2 2303 	umull	r2, r3, r2, r3
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	f003 020f 	and.w	r2, r3, #15
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4422      	add	r2, r4
 800682c:	609a      	str	r2, [r3, #8]
}
 800682e:	bf00      	nop
 8006830:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006834:	46bd      	mov	sp, r7
 8006836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800683a:	bf00      	nop
 800683c:	51eb851f 	.word	0x51eb851f

08006840 <__errno>:
 8006840:	4b01      	ldr	r3, [pc, #4]	; (8006848 <__errno+0x8>)
 8006842:	6818      	ldr	r0, [r3, #0]
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	2000000c 	.word	0x2000000c

0800684c <__libc_init_array>:
 800684c:	b570      	push	{r4, r5, r6, lr}
 800684e:	4d0d      	ldr	r5, [pc, #52]	; (8006884 <__libc_init_array+0x38>)
 8006850:	4c0d      	ldr	r4, [pc, #52]	; (8006888 <__libc_init_array+0x3c>)
 8006852:	1b64      	subs	r4, r4, r5
 8006854:	10a4      	asrs	r4, r4, #2
 8006856:	2600      	movs	r6, #0
 8006858:	42a6      	cmp	r6, r4
 800685a:	d109      	bne.n	8006870 <__libc_init_array+0x24>
 800685c:	4d0b      	ldr	r5, [pc, #44]	; (800688c <__libc_init_array+0x40>)
 800685e:	4c0c      	ldr	r4, [pc, #48]	; (8006890 <__libc_init_array+0x44>)
 8006860:	f001 fa34 	bl	8007ccc <_init>
 8006864:	1b64      	subs	r4, r4, r5
 8006866:	10a4      	asrs	r4, r4, #2
 8006868:	2600      	movs	r6, #0
 800686a:	42a6      	cmp	r6, r4
 800686c:	d105      	bne.n	800687a <__libc_init_array+0x2e>
 800686e:	bd70      	pop	{r4, r5, r6, pc}
 8006870:	f855 3b04 	ldr.w	r3, [r5], #4
 8006874:	4798      	blx	r3
 8006876:	3601      	adds	r6, #1
 8006878:	e7ee      	b.n	8006858 <__libc_init_array+0xc>
 800687a:	f855 3b04 	ldr.w	r3, [r5], #4
 800687e:	4798      	blx	r3
 8006880:	3601      	adds	r6, #1
 8006882:	e7f2      	b.n	800686a <__libc_init_array+0x1e>
 8006884:	080082cc 	.word	0x080082cc
 8006888:	080082cc 	.word	0x080082cc
 800688c:	080082cc 	.word	0x080082cc
 8006890:	080082d0 	.word	0x080082d0

08006894 <memcpy>:
 8006894:	440a      	add	r2, r1
 8006896:	4291      	cmp	r1, r2
 8006898:	f100 33ff 	add.w	r3, r0, #4294967295
 800689c:	d100      	bne.n	80068a0 <memcpy+0xc>
 800689e:	4770      	bx	lr
 80068a0:	b510      	push	{r4, lr}
 80068a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068aa:	4291      	cmp	r1, r2
 80068ac:	d1f9      	bne.n	80068a2 <memcpy+0xe>
 80068ae:	bd10      	pop	{r4, pc}

080068b0 <memset>:
 80068b0:	4402      	add	r2, r0
 80068b2:	4603      	mov	r3, r0
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d100      	bne.n	80068ba <memset+0xa>
 80068b8:	4770      	bx	lr
 80068ba:	f803 1b01 	strb.w	r1, [r3], #1
 80068be:	e7f9      	b.n	80068b4 <memset+0x4>

080068c0 <rand>:
 80068c0:	4b16      	ldr	r3, [pc, #88]	; (800691c <rand+0x5c>)
 80068c2:	b510      	push	{r4, lr}
 80068c4:	681c      	ldr	r4, [r3, #0]
 80068c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068c8:	b9b3      	cbnz	r3, 80068f8 <rand+0x38>
 80068ca:	2018      	movs	r0, #24
 80068cc:	f000 f886 	bl	80069dc <malloc>
 80068d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80068d2:	b928      	cbnz	r0, 80068e0 <rand+0x20>
 80068d4:	4602      	mov	r2, r0
 80068d6:	4b12      	ldr	r3, [pc, #72]	; (8006920 <rand+0x60>)
 80068d8:	4812      	ldr	r0, [pc, #72]	; (8006924 <rand+0x64>)
 80068da:	214e      	movs	r1, #78	; 0x4e
 80068dc:	f000 f84e 	bl	800697c <__assert_func>
 80068e0:	4a11      	ldr	r2, [pc, #68]	; (8006928 <rand+0x68>)
 80068e2:	4b12      	ldr	r3, [pc, #72]	; (800692c <rand+0x6c>)
 80068e4:	e9c0 2300 	strd	r2, r3, [r0]
 80068e8:	4b11      	ldr	r3, [pc, #68]	; (8006930 <rand+0x70>)
 80068ea:	6083      	str	r3, [r0, #8]
 80068ec:	230b      	movs	r3, #11
 80068ee:	8183      	strh	r3, [r0, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	2300      	movs	r3, #0
 80068f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80068f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80068fa:	4a0e      	ldr	r2, [pc, #56]	; (8006934 <rand+0x74>)
 80068fc:	6920      	ldr	r0, [r4, #16]
 80068fe:	6963      	ldr	r3, [r4, #20]
 8006900:	490d      	ldr	r1, [pc, #52]	; (8006938 <rand+0x78>)
 8006902:	4342      	muls	r2, r0
 8006904:	fb01 2203 	mla	r2, r1, r3, r2
 8006908:	fba0 0101 	umull	r0, r1, r0, r1
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	eb42 0001 	adc.w	r0, r2, r1
 8006912:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006916:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800691a:	bd10      	pop	{r4, pc}
 800691c:	2000000c 	.word	0x2000000c
 8006920:	08008180 	.word	0x08008180
 8006924:	08008197 	.word	0x08008197
 8006928:	abcd330e 	.word	0xabcd330e
 800692c:	e66d1234 	.word	0xe66d1234
 8006930:	0005deec 	.word	0x0005deec
 8006934:	5851f42d 	.word	0x5851f42d
 8006938:	4c957f2d 	.word	0x4c957f2d

0800693c <siprintf>:
 800693c:	b40e      	push	{r1, r2, r3}
 800693e:	b500      	push	{lr}
 8006940:	b09c      	sub	sp, #112	; 0x70
 8006942:	ab1d      	add	r3, sp, #116	; 0x74
 8006944:	9002      	str	r0, [sp, #8]
 8006946:	9006      	str	r0, [sp, #24]
 8006948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800694c:	4809      	ldr	r0, [pc, #36]	; (8006974 <siprintf+0x38>)
 800694e:	9107      	str	r1, [sp, #28]
 8006950:	9104      	str	r1, [sp, #16]
 8006952:	4909      	ldr	r1, [pc, #36]	; (8006978 <siprintf+0x3c>)
 8006954:	f853 2b04 	ldr.w	r2, [r3], #4
 8006958:	9105      	str	r1, [sp, #20]
 800695a:	6800      	ldr	r0, [r0, #0]
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	a902      	add	r1, sp, #8
 8006960:	f000 f980 	bl	8006c64 <_svfiprintf_r>
 8006964:	9b02      	ldr	r3, [sp, #8]
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
 800696a:	b01c      	add	sp, #112	; 0x70
 800696c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006970:	b003      	add	sp, #12
 8006972:	4770      	bx	lr
 8006974:	2000000c 	.word	0x2000000c
 8006978:	ffff0208 	.word	0xffff0208

0800697c <__assert_func>:
 800697c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800697e:	4614      	mov	r4, r2
 8006980:	461a      	mov	r2, r3
 8006982:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <__assert_func+0x2c>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4605      	mov	r5, r0
 8006988:	68d8      	ldr	r0, [r3, #12]
 800698a:	b14c      	cbz	r4, 80069a0 <__assert_func+0x24>
 800698c:	4b07      	ldr	r3, [pc, #28]	; (80069ac <__assert_func+0x30>)
 800698e:	9100      	str	r1, [sp, #0]
 8006990:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006994:	4906      	ldr	r1, [pc, #24]	; (80069b0 <__assert_func+0x34>)
 8006996:	462b      	mov	r3, r5
 8006998:	f000 f80e 	bl	80069b8 <fiprintf>
 800699c:	f000 fe20 	bl	80075e0 <abort>
 80069a0:	4b04      	ldr	r3, [pc, #16]	; (80069b4 <__assert_func+0x38>)
 80069a2:	461c      	mov	r4, r3
 80069a4:	e7f3      	b.n	800698e <__assert_func+0x12>
 80069a6:	bf00      	nop
 80069a8:	2000000c 	.word	0x2000000c
 80069ac:	080081f2 	.word	0x080081f2
 80069b0:	080081ff 	.word	0x080081ff
 80069b4:	0800822d 	.word	0x0800822d

080069b8 <fiprintf>:
 80069b8:	b40e      	push	{r1, r2, r3}
 80069ba:	b503      	push	{r0, r1, lr}
 80069bc:	4601      	mov	r1, r0
 80069be:	ab03      	add	r3, sp, #12
 80069c0:	4805      	ldr	r0, [pc, #20]	; (80069d8 <fiprintf+0x20>)
 80069c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80069c6:	6800      	ldr	r0, [r0, #0]
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	f000 fa75 	bl	8006eb8 <_vfiprintf_r>
 80069ce:	b002      	add	sp, #8
 80069d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d4:	b003      	add	sp, #12
 80069d6:	4770      	bx	lr
 80069d8:	2000000c 	.word	0x2000000c

080069dc <malloc>:
 80069dc:	4b02      	ldr	r3, [pc, #8]	; (80069e8 <malloc+0xc>)
 80069de:	4601      	mov	r1, r0
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	f000 b86f 	b.w	8006ac4 <_malloc_r>
 80069e6:	bf00      	nop
 80069e8:	2000000c 	.word	0x2000000c

080069ec <_free_r>:
 80069ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069ee:	2900      	cmp	r1, #0
 80069f0:	d044      	beq.n	8006a7c <_free_r+0x90>
 80069f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f6:	9001      	str	r0, [sp, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f1a1 0404 	sub.w	r4, r1, #4
 80069fe:	bfb8      	it	lt
 8006a00:	18e4      	addlt	r4, r4, r3
 8006a02:	f001 f82f 	bl	8007a64 <__malloc_lock>
 8006a06:	4a1e      	ldr	r2, [pc, #120]	; (8006a80 <_free_r+0x94>)
 8006a08:	9801      	ldr	r0, [sp, #4]
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	b933      	cbnz	r3, 8006a1c <_free_r+0x30>
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6014      	str	r4, [r2, #0]
 8006a12:	b003      	add	sp, #12
 8006a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a18:	f001 b82a 	b.w	8007a70 <__malloc_unlock>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d908      	bls.n	8006a32 <_free_r+0x46>
 8006a20:	6825      	ldr	r5, [r4, #0]
 8006a22:	1961      	adds	r1, r4, r5
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1949      	addeq	r1, r1, r5
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	e7ed      	b.n	8006a0e <_free_r+0x22>
 8006a32:	461a      	mov	r2, r3
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b10b      	cbz	r3, 8006a3c <_free_r+0x50>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d9fa      	bls.n	8006a32 <_free_r+0x46>
 8006a3c:	6811      	ldr	r1, [r2, #0]
 8006a3e:	1855      	adds	r5, r2, r1
 8006a40:	42a5      	cmp	r5, r4
 8006a42:	d10b      	bne.n	8006a5c <_free_r+0x70>
 8006a44:	6824      	ldr	r4, [r4, #0]
 8006a46:	4421      	add	r1, r4
 8006a48:	1854      	adds	r4, r2, r1
 8006a4a:	42a3      	cmp	r3, r4
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	d1e0      	bne.n	8006a12 <_free_r+0x26>
 8006a50:	681c      	ldr	r4, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	4421      	add	r1, r4
 8006a58:	6011      	str	r1, [r2, #0]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0x26>
 8006a5c:	d902      	bls.n	8006a64 <_free_r+0x78>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	6003      	str	r3, [r0, #0]
 8006a62:	e7d6      	b.n	8006a12 <_free_r+0x26>
 8006a64:	6825      	ldr	r5, [r4, #0]
 8006a66:	1961      	adds	r1, r4, r5
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf04      	itt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	bf04      	itt	eq
 8006a74:	1949      	addeq	r1, r1, r5
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	6054      	str	r4, [r2, #4]
 8006a7a:	e7ca      	b.n	8006a12 <_free_r+0x26>
 8006a7c:	b003      	add	sp, #12
 8006a7e:	bd30      	pop	{r4, r5, pc}
 8006a80:	2000c82c 	.word	0x2000c82c

08006a84 <sbrk_aligned>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4e0e      	ldr	r6, [pc, #56]	; (8006ac0 <sbrk_aligned+0x3c>)
 8006a88:	460c      	mov	r4, r1
 8006a8a:	6831      	ldr	r1, [r6, #0]
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	b911      	cbnz	r1, 8006a96 <sbrk_aligned+0x12>
 8006a90:	f000 fcd6 	bl	8007440 <_sbrk_r>
 8006a94:	6030      	str	r0, [r6, #0]
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 fcd1 	bl	8007440 <_sbrk_r>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d00a      	beq.n	8006ab8 <sbrk_aligned+0x34>
 8006aa2:	1cc4      	adds	r4, r0, #3
 8006aa4:	f024 0403 	bic.w	r4, r4, #3
 8006aa8:	42a0      	cmp	r0, r4
 8006aaa:	d007      	beq.n	8006abc <sbrk_aligned+0x38>
 8006aac:	1a21      	subs	r1, r4, r0
 8006aae:	4628      	mov	r0, r5
 8006ab0:	f000 fcc6 	bl	8007440 <_sbrk_r>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d101      	bne.n	8006abc <sbrk_aligned+0x38>
 8006ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8006abc:	4620      	mov	r0, r4
 8006abe:	bd70      	pop	{r4, r5, r6, pc}
 8006ac0:	2000c830 	.word	0x2000c830

08006ac4 <_malloc_r>:
 8006ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac8:	1ccd      	adds	r5, r1, #3
 8006aca:	f025 0503 	bic.w	r5, r5, #3
 8006ace:	3508      	adds	r5, #8
 8006ad0:	2d0c      	cmp	r5, #12
 8006ad2:	bf38      	it	cc
 8006ad4:	250c      	movcc	r5, #12
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	4607      	mov	r7, r0
 8006ada:	db01      	blt.n	8006ae0 <_malloc_r+0x1c>
 8006adc:	42a9      	cmp	r1, r5
 8006ade:	d905      	bls.n	8006aec <_malloc_r+0x28>
 8006ae0:	230c      	movs	r3, #12
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aec:	4e2e      	ldr	r6, [pc, #184]	; (8006ba8 <_malloc_r+0xe4>)
 8006aee:	f000 ffb9 	bl	8007a64 <__malloc_lock>
 8006af2:	6833      	ldr	r3, [r6, #0]
 8006af4:	461c      	mov	r4, r3
 8006af6:	bb34      	cbnz	r4, 8006b46 <_malloc_r+0x82>
 8006af8:	4629      	mov	r1, r5
 8006afa:	4638      	mov	r0, r7
 8006afc:	f7ff ffc2 	bl	8006a84 <sbrk_aligned>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	4604      	mov	r4, r0
 8006b04:	d14d      	bne.n	8006ba2 <_malloc_r+0xde>
 8006b06:	6834      	ldr	r4, [r6, #0]
 8006b08:	4626      	mov	r6, r4
 8006b0a:	2e00      	cmp	r6, #0
 8006b0c:	d140      	bne.n	8006b90 <_malloc_r+0xcc>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	4631      	mov	r1, r6
 8006b12:	4638      	mov	r0, r7
 8006b14:	eb04 0803 	add.w	r8, r4, r3
 8006b18:	f000 fc92 	bl	8007440 <_sbrk_r>
 8006b1c:	4580      	cmp	r8, r0
 8006b1e:	d13a      	bne.n	8006b96 <_malloc_r+0xd2>
 8006b20:	6821      	ldr	r1, [r4, #0]
 8006b22:	3503      	adds	r5, #3
 8006b24:	1a6d      	subs	r5, r5, r1
 8006b26:	f025 0503 	bic.w	r5, r5, #3
 8006b2a:	3508      	adds	r5, #8
 8006b2c:	2d0c      	cmp	r5, #12
 8006b2e:	bf38      	it	cc
 8006b30:	250c      	movcc	r5, #12
 8006b32:	4629      	mov	r1, r5
 8006b34:	4638      	mov	r0, r7
 8006b36:	f7ff ffa5 	bl	8006a84 <sbrk_aligned>
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d02b      	beq.n	8006b96 <_malloc_r+0xd2>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	442b      	add	r3, r5
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	e00e      	b.n	8006b64 <_malloc_r+0xa0>
 8006b46:	6822      	ldr	r2, [r4, #0]
 8006b48:	1b52      	subs	r2, r2, r5
 8006b4a:	d41e      	bmi.n	8006b8a <_malloc_r+0xc6>
 8006b4c:	2a0b      	cmp	r2, #11
 8006b4e:	d916      	bls.n	8006b7e <_malloc_r+0xba>
 8006b50:	1961      	adds	r1, r4, r5
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	6025      	str	r5, [r4, #0]
 8006b56:	bf18      	it	ne
 8006b58:	6059      	strne	r1, [r3, #4]
 8006b5a:	6863      	ldr	r3, [r4, #4]
 8006b5c:	bf08      	it	eq
 8006b5e:	6031      	streq	r1, [r6, #0]
 8006b60:	5162      	str	r2, [r4, r5]
 8006b62:	604b      	str	r3, [r1, #4]
 8006b64:	4638      	mov	r0, r7
 8006b66:	f104 060b 	add.w	r6, r4, #11
 8006b6a:	f000 ff81 	bl	8007a70 <__malloc_unlock>
 8006b6e:	f026 0607 	bic.w	r6, r6, #7
 8006b72:	1d23      	adds	r3, r4, #4
 8006b74:	1af2      	subs	r2, r6, r3
 8006b76:	d0b6      	beq.n	8006ae6 <_malloc_r+0x22>
 8006b78:	1b9b      	subs	r3, r3, r6
 8006b7a:	50a3      	str	r3, [r4, r2]
 8006b7c:	e7b3      	b.n	8006ae6 <_malloc_r+0x22>
 8006b7e:	6862      	ldr	r2, [r4, #4]
 8006b80:	42a3      	cmp	r3, r4
 8006b82:	bf0c      	ite	eq
 8006b84:	6032      	streq	r2, [r6, #0]
 8006b86:	605a      	strne	r2, [r3, #4]
 8006b88:	e7ec      	b.n	8006b64 <_malloc_r+0xa0>
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	6864      	ldr	r4, [r4, #4]
 8006b8e:	e7b2      	b.n	8006af6 <_malloc_r+0x32>
 8006b90:	4634      	mov	r4, r6
 8006b92:	6876      	ldr	r6, [r6, #4]
 8006b94:	e7b9      	b.n	8006b0a <_malloc_r+0x46>
 8006b96:	230c      	movs	r3, #12
 8006b98:	603b      	str	r3, [r7, #0]
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	f000 ff68 	bl	8007a70 <__malloc_unlock>
 8006ba0:	e7a1      	b.n	8006ae6 <_malloc_r+0x22>
 8006ba2:	6025      	str	r5, [r4, #0]
 8006ba4:	e7de      	b.n	8006b64 <_malloc_r+0xa0>
 8006ba6:	bf00      	nop
 8006ba8:	2000c82c 	.word	0x2000c82c

08006bac <__ssputs_r>:
 8006bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb0:	688e      	ldr	r6, [r1, #8]
 8006bb2:	429e      	cmp	r6, r3
 8006bb4:	4682      	mov	sl, r0
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	4690      	mov	r8, r2
 8006bba:	461f      	mov	r7, r3
 8006bbc:	d838      	bhi.n	8006c30 <__ssputs_r+0x84>
 8006bbe:	898a      	ldrh	r2, [r1, #12]
 8006bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006bc4:	d032      	beq.n	8006c2c <__ssputs_r+0x80>
 8006bc6:	6825      	ldr	r5, [r4, #0]
 8006bc8:	6909      	ldr	r1, [r1, #16]
 8006bca:	eba5 0901 	sub.w	r9, r5, r1
 8006bce:	6965      	ldr	r5, [r4, #20]
 8006bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bd8:	3301      	adds	r3, #1
 8006bda:	444b      	add	r3, r9
 8006bdc:	106d      	asrs	r5, r5, #1
 8006bde:	429d      	cmp	r5, r3
 8006be0:	bf38      	it	cc
 8006be2:	461d      	movcc	r5, r3
 8006be4:	0553      	lsls	r3, r2, #21
 8006be6:	d531      	bpl.n	8006c4c <__ssputs_r+0xa0>
 8006be8:	4629      	mov	r1, r5
 8006bea:	f7ff ff6b 	bl	8006ac4 <_malloc_r>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	b950      	cbnz	r0, 8006c08 <__ssputs_r+0x5c>
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	f8ca 3000 	str.w	r3, [sl]
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bfe:	81a3      	strh	r3, [r4, #12]
 8006c00:	f04f 30ff 	mov.w	r0, #4294967295
 8006c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c08:	6921      	ldr	r1, [r4, #16]
 8006c0a:	464a      	mov	r2, r9
 8006c0c:	f7ff fe42 	bl	8006894 <memcpy>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c1a:	81a3      	strh	r3, [r4, #12]
 8006c1c:	6126      	str	r6, [r4, #16]
 8006c1e:	6165      	str	r5, [r4, #20]
 8006c20:	444e      	add	r6, r9
 8006c22:	eba5 0509 	sub.w	r5, r5, r9
 8006c26:	6026      	str	r6, [r4, #0]
 8006c28:	60a5      	str	r5, [r4, #8]
 8006c2a:	463e      	mov	r6, r7
 8006c2c:	42be      	cmp	r6, r7
 8006c2e:	d900      	bls.n	8006c32 <__ssputs_r+0x86>
 8006c30:	463e      	mov	r6, r7
 8006c32:	6820      	ldr	r0, [r4, #0]
 8006c34:	4632      	mov	r2, r6
 8006c36:	4641      	mov	r1, r8
 8006c38:	f000 fefa 	bl	8007a30 <memmove>
 8006c3c:	68a3      	ldr	r3, [r4, #8]
 8006c3e:	1b9b      	subs	r3, r3, r6
 8006c40:	60a3      	str	r3, [r4, #8]
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	4433      	add	r3, r6
 8006c46:	6023      	str	r3, [r4, #0]
 8006c48:	2000      	movs	r0, #0
 8006c4a:	e7db      	b.n	8006c04 <__ssputs_r+0x58>
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	f000 ff15 	bl	8007a7c <_realloc_r>
 8006c52:	4606      	mov	r6, r0
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d1e1      	bne.n	8006c1c <__ssputs_r+0x70>
 8006c58:	6921      	ldr	r1, [r4, #16]
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	f7ff fec6 	bl	80069ec <_free_r>
 8006c60:	e7c7      	b.n	8006bf2 <__ssputs_r+0x46>
	...

08006c64 <_svfiprintf_r>:
 8006c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	4698      	mov	r8, r3
 8006c6a:	898b      	ldrh	r3, [r1, #12]
 8006c6c:	061b      	lsls	r3, r3, #24
 8006c6e:	b09d      	sub	sp, #116	; 0x74
 8006c70:	4607      	mov	r7, r0
 8006c72:	460d      	mov	r5, r1
 8006c74:	4614      	mov	r4, r2
 8006c76:	d50e      	bpl.n	8006c96 <_svfiprintf_r+0x32>
 8006c78:	690b      	ldr	r3, [r1, #16]
 8006c7a:	b963      	cbnz	r3, 8006c96 <_svfiprintf_r+0x32>
 8006c7c:	2140      	movs	r1, #64	; 0x40
 8006c7e:	f7ff ff21 	bl	8006ac4 <_malloc_r>
 8006c82:	6028      	str	r0, [r5, #0]
 8006c84:	6128      	str	r0, [r5, #16]
 8006c86:	b920      	cbnz	r0, 8006c92 <_svfiprintf_r+0x2e>
 8006c88:	230c      	movs	r3, #12
 8006c8a:	603b      	str	r3, [r7, #0]
 8006c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c90:	e0d1      	b.n	8006e36 <_svfiprintf_r+0x1d2>
 8006c92:	2340      	movs	r3, #64	; 0x40
 8006c94:	616b      	str	r3, [r5, #20]
 8006c96:	2300      	movs	r3, #0
 8006c98:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9a:	2320      	movs	r3, #32
 8006c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ca4:	2330      	movs	r3, #48	; 0x30
 8006ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006e50 <_svfiprintf_r+0x1ec>
 8006caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006cae:	f04f 0901 	mov.w	r9, #1
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	469a      	mov	sl, r3
 8006cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cba:	b10a      	cbz	r2, 8006cc0 <_svfiprintf_r+0x5c>
 8006cbc:	2a25      	cmp	r2, #37	; 0x25
 8006cbe:	d1f9      	bne.n	8006cb4 <_svfiprintf_r+0x50>
 8006cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8006cc4:	d00b      	beq.n	8006cde <_svfiprintf_r+0x7a>
 8006cc6:	465b      	mov	r3, fp
 8006cc8:	4622      	mov	r2, r4
 8006cca:	4629      	mov	r1, r5
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff ff6d 	bl	8006bac <__ssputs_r>
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	f000 80aa 	beq.w	8006e2c <_svfiprintf_r+0x1c8>
 8006cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cda:	445a      	add	r2, fp
 8006cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8006cde:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80a2 	beq.w	8006e2c <_svfiprintf_r+0x1c8>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cf2:	f10a 0a01 	add.w	sl, sl, #1
 8006cf6:	9304      	str	r3, [sp, #16]
 8006cf8:	9307      	str	r3, [sp, #28]
 8006cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8006d00:	4654      	mov	r4, sl
 8006d02:	2205      	movs	r2, #5
 8006d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d08:	4851      	ldr	r0, [pc, #324]	; (8006e50 <_svfiprintf_r+0x1ec>)
 8006d0a:	f7f9 fa69 	bl	80001e0 <memchr>
 8006d0e:	9a04      	ldr	r2, [sp, #16]
 8006d10:	b9d8      	cbnz	r0, 8006d4a <_svfiprintf_r+0xe6>
 8006d12:	06d0      	lsls	r0, r2, #27
 8006d14:	bf44      	itt	mi
 8006d16:	2320      	movmi	r3, #32
 8006d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d1c:	0711      	lsls	r1, r2, #28
 8006d1e:	bf44      	itt	mi
 8006d20:	232b      	movmi	r3, #43	; 0x2b
 8006d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d26:	f89a 3000 	ldrb.w	r3, [sl]
 8006d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2c:	d015      	beq.n	8006d5a <_svfiprintf_r+0xf6>
 8006d2e:	9a07      	ldr	r2, [sp, #28]
 8006d30:	4654      	mov	r4, sl
 8006d32:	2000      	movs	r0, #0
 8006d34:	f04f 0c0a 	mov.w	ip, #10
 8006d38:	4621      	mov	r1, r4
 8006d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d3e:	3b30      	subs	r3, #48	; 0x30
 8006d40:	2b09      	cmp	r3, #9
 8006d42:	d94e      	bls.n	8006de2 <_svfiprintf_r+0x17e>
 8006d44:	b1b0      	cbz	r0, 8006d74 <_svfiprintf_r+0x110>
 8006d46:	9207      	str	r2, [sp, #28]
 8006d48:	e014      	b.n	8006d74 <_svfiprintf_r+0x110>
 8006d4a:	eba0 0308 	sub.w	r3, r0, r8
 8006d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8006d52:	4313      	orrs	r3, r2
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	46a2      	mov	sl, r4
 8006d58:	e7d2      	b.n	8006d00 <_svfiprintf_r+0x9c>
 8006d5a:	9b03      	ldr	r3, [sp, #12]
 8006d5c:	1d19      	adds	r1, r3, #4
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	9103      	str	r1, [sp, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	bfbb      	ittet	lt
 8006d66:	425b      	neglt	r3, r3
 8006d68:	f042 0202 	orrlt.w	r2, r2, #2
 8006d6c:	9307      	strge	r3, [sp, #28]
 8006d6e:	9307      	strlt	r3, [sp, #28]
 8006d70:	bfb8      	it	lt
 8006d72:	9204      	strlt	r2, [sp, #16]
 8006d74:	7823      	ldrb	r3, [r4, #0]
 8006d76:	2b2e      	cmp	r3, #46	; 0x2e
 8006d78:	d10c      	bne.n	8006d94 <_svfiprintf_r+0x130>
 8006d7a:	7863      	ldrb	r3, [r4, #1]
 8006d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d7e:	d135      	bne.n	8006dec <_svfiprintf_r+0x188>
 8006d80:	9b03      	ldr	r3, [sp, #12]
 8006d82:	1d1a      	adds	r2, r3, #4
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	9203      	str	r2, [sp, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bfb8      	it	lt
 8006d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d90:	3402      	adds	r4, #2
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e60 <_svfiprintf_r+0x1fc>
 8006d98:	7821      	ldrb	r1, [r4, #0]
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	4650      	mov	r0, sl
 8006d9e:	f7f9 fa1f 	bl	80001e0 <memchr>
 8006da2:	b140      	cbz	r0, 8006db6 <_svfiprintf_r+0x152>
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	eba0 000a 	sub.w	r0, r0, sl
 8006daa:	fa03 f000 	lsl.w	r0, r3, r0
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	4303      	orrs	r3, r0
 8006db2:	3401      	adds	r4, #1
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dba:	4826      	ldr	r0, [pc, #152]	; (8006e54 <_svfiprintf_r+0x1f0>)
 8006dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dc0:	2206      	movs	r2, #6
 8006dc2:	f7f9 fa0d 	bl	80001e0 <memchr>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d038      	beq.n	8006e3c <_svfiprintf_r+0x1d8>
 8006dca:	4b23      	ldr	r3, [pc, #140]	; (8006e58 <_svfiprintf_r+0x1f4>)
 8006dcc:	bb1b      	cbnz	r3, 8006e16 <_svfiprintf_r+0x1b2>
 8006dce:	9b03      	ldr	r3, [sp, #12]
 8006dd0:	3307      	adds	r3, #7
 8006dd2:	f023 0307 	bic.w	r3, r3, #7
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	9303      	str	r3, [sp, #12]
 8006dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ddc:	4433      	add	r3, r6
 8006dde:	9309      	str	r3, [sp, #36]	; 0x24
 8006de0:	e767      	b.n	8006cb2 <_svfiprintf_r+0x4e>
 8006de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006de6:	460c      	mov	r4, r1
 8006de8:	2001      	movs	r0, #1
 8006dea:	e7a5      	b.n	8006d38 <_svfiprintf_r+0xd4>
 8006dec:	2300      	movs	r3, #0
 8006dee:	3401      	adds	r4, #1
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	4619      	mov	r1, r3
 8006df4:	f04f 0c0a 	mov.w	ip, #10
 8006df8:	4620      	mov	r0, r4
 8006dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dfe:	3a30      	subs	r2, #48	; 0x30
 8006e00:	2a09      	cmp	r2, #9
 8006e02:	d903      	bls.n	8006e0c <_svfiprintf_r+0x1a8>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0c5      	beq.n	8006d94 <_svfiprintf_r+0x130>
 8006e08:	9105      	str	r1, [sp, #20]
 8006e0a:	e7c3      	b.n	8006d94 <_svfiprintf_r+0x130>
 8006e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e10:	4604      	mov	r4, r0
 8006e12:	2301      	movs	r3, #1
 8006e14:	e7f0      	b.n	8006df8 <_svfiprintf_r+0x194>
 8006e16:	ab03      	add	r3, sp, #12
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	462a      	mov	r2, r5
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <_svfiprintf_r+0x1f8>)
 8006e1e:	a904      	add	r1, sp, #16
 8006e20:	4638      	mov	r0, r7
 8006e22:	f3af 8000 	nop.w
 8006e26:	1c42      	adds	r2, r0, #1
 8006e28:	4606      	mov	r6, r0
 8006e2a:	d1d6      	bne.n	8006dda <_svfiprintf_r+0x176>
 8006e2c:	89ab      	ldrh	r3, [r5, #12]
 8006e2e:	065b      	lsls	r3, r3, #25
 8006e30:	f53f af2c 	bmi.w	8006c8c <_svfiprintf_r+0x28>
 8006e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e36:	b01d      	add	sp, #116	; 0x74
 8006e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e3c:	ab03      	add	r3, sp, #12
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	462a      	mov	r2, r5
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <_svfiprintf_r+0x1f8>)
 8006e44:	a904      	add	r1, sp, #16
 8006e46:	4638      	mov	r0, r7
 8006e48:	f000 f9d4 	bl	80071f4 <_printf_i>
 8006e4c:	e7eb      	b.n	8006e26 <_svfiprintf_r+0x1c2>
 8006e4e:	bf00      	nop
 8006e50:	0800822e 	.word	0x0800822e
 8006e54:	08008238 	.word	0x08008238
 8006e58:	00000000 	.word	0x00000000
 8006e5c:	08006bad 	.word	0x08006bad
 8006e60:	08008234 	.word	0x08008234

08006e64 <__sfputc_r>:
 8006e64:	6893      	ldr	r3, [r2, #8]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	b410      	push	{r4}
 8006e6c:	6093      	str	r3, [r2, #8]
 8006e6e:	da08      	bge.n	8006e82 <__sfputc_r+0x1e>
 8006e70:	6994      	ldr	r4, [r2, #24]
 8006e72:	42a3      	cmp	r3, r4
 8006e74:	db01      	blt.n	8006e7a <__sfputc_r+0x16>
 8006e76:	290a      	cmp	r1, #10
 8006e78:	d103      	bne.n	8006e82 <__sfputc_r+0x1e>
 8006e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e7e:	f000 baef 	b.w	8007460 <__swbuf_r>
 8006e82:	6813      	ldr	r3, [r2, #0]
 8006e84:	1c58      	adds	r0, r3, #1
 8006e86:	6010      	str	r0, [r2, #0]
 8006e88:	7019      	strb	r1, [r3, #0]
 8006e8a:	4608      	mov	r0, r1
 8006e8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <__sfputs_r>:
 8006e92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e94:	4606      	mov	r6, r0
 8006e96:	460f      	mov	r7, r1
 8006e98:	4614      	mov	r4, r2
 8006e9a:	18d5      	adds	r5, r2, r3
 8006e9c:	42ac      	cmp	r4, r5
 8006e9e:	d101      	bne.n	8006ea4 <__sfputs_r+0x12>
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	e007      	b.n	8006eb4 <__sfputs_r+0x22>
 8006ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f7ff ffda 	bl	8006e64 <__sfputc_r>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d1f3      	bne.n	8006e9c <__sfputs_r+0xa>
 8006eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006eb8 <_vfiprintf_r>:
 8006eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ebc:	460d      	mov	r5, r1
 8006ebe:	b09d      	sub	sp, #116	; 0x74
 8006ec0:	4614      	mov	r4, r2
 8006ec2:	4698      	mov	r8, r3
 8006ec4:	4606      	mov	r6, r0
 8006ec6:	b118      	cbz	r0, 8006ed0 <_vfiprintf_r+0x18>
 8006ec8:	6983      	ldr	r3, [r0, #24]
 8006eca:	b90b      	cbnz	r3, 8006ed0 <_vfiprintf_r+0x18>
 8006ecc:	f000 fcaa 	bl	8007824 <__sinit>
 8006ed0:	4b89      	ldr	r3, [pc, #548]	; (80070f8 <_vfiprintf_r+0x240>)
 8006ed2:	429d      	cmp	r5, r3
 8006ed4:	d11b      	bne.n	8006f0e <_vfiprintf_r+0x56>
 8006ed6:	6875      	ldr	r5, [r6, #4]
 8006ed8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eda:	07d9      	lsls	r1, r3, #31
 8006edc:	d405      	bmi.n	8006eea <_vfiprintf_r+0x32>
 8006ede:	89ab      	ldrh	r3, [r5, #12]
 8006ee0:	059a      	lsls	r2, r3, #22
 8006ee2:	d402      	bmi.n	8006eea <_vfiprintf_r+0x32>
 8006ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ee6:	f000 fd3b 	bl	8007960 <__retarget_lock_acquire_recursive>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	071b      	lsls	r3, r3, #28
 8006eee:	d501      	bpl.n	8006ef4 <_vfiprintf_r+0x3c>
 8006ef0:	692b      	ldr	r3, [r5, #16]
 8006ef2:	b9eb      	cbnz	r3, 8006f30 <_vfiprintf_r+0x78>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f000 fb04 	bl	8007504 <__swsetup_r>
 8006efc:	b1c0      	cbz	r0, 8006f30 <_vfiprintf_r+0x78>
 8006efe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f00:	07dc      	lsls	r4, r3, #31
 8006f02:	d50e      	bpl.n	8006f22 <_vfiprintf_r+0x6a>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	b01d      	add	sp, #116	; 0x74
 8006f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f0e:	4b7b      	ldr	r3, [pc, #492]	; (80070fc <_vfiprintf_r+0x244>)
 8006f10:	429d      	cmp	r5, r3
 8006f12:	d101      	bne.n	8006f18 <_vfiprintf_r+0x60>
 8006f14:	68b5      	ldr	r5, [r6, #8]
 8006f16:	e7df      	b.n	8006ed8 <_vfiprintf_r+0x20>
 8006f18:	4b79      	ldr	r3, [pc, #484]	; (8007100 <_vfiprintf_r+0x248>)
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	bf08      	it	eq
 8006f1e:	68f5      	ldreq	r5, [r6, #12]
 8006f20:	e7da      	b.n	8006ed8 <_vfiprintf_r+0x20>
 8006f22:	89ab      	ldrh	r3, [r5, #12]
 8006f24:	0598      	lsls	r0, r3, #22
 8006f26:	d4ed      	bmi.n	8006f04 <_vfiprintf_r+0x4c>
 8006f28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f2a:	f000 fd1a 	bl	8007962 <__retarget_lock_release_recursive>
 8006f2e:	e7e9      	b.n	8006f04 <_vfiprintf_r+0x4c>
 8006f30:	2300      	movs	r3, #0
 8006f32:	9309      	str	r3, [sp, #36]	; 0x24
 8006f34:	2320      	movs	r3, #32
 8006f36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f3e:	2330      	movs	r3, #48	; 0x30
 8006f40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007104 <_vfiprintf_r+0x24c>
 8006f44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f48:	f04f 0901 	mov.w	r9, #1
 8006f4c:	4623      	mov	r3, r4
 8006f4e:	469a      	mov	sl, r3
 8006f50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f54:	b10a      	cbz	r2, 8006f5a <_vfiprintf_r+0xa2>
 8006f56:	2a25      	cmp	r2, #37	; 0x25
 8006f58:	d1f9      	bne.n	8006f4e <_vfiprintf_r+0x96>
 8006f5a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f5e:	d00b      	beq.n	8006f78 <_vfiprintf_r+0xc0>
 8006f60:	465b      	mov	r3, fp
 8006f62:	4622      	mov	r2, r4
 8006f64:	4629      	mov	r1, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff ff93 	bl	8006e92 <__sfputs_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	f000 80aa 	beq.w	80070c6 <_vfiprintf_r+0x20e>
 8006f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f74:	445a      	add	r2, fp
 8006f76:	9209      	str	r2, [sp, #36]	; 0x24
 8006f78:	f89a 3000 	ldrb.w	r3, [sl]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	f000 80a2 	beq.w	80070c6 <_vfiprintf_r+0x20e>
 8006f82:	2300      	movs	r3, #0
 8006f84:	f04f 32ff 	mov.w	r2, #4294967295
 8006f88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f8c:	f10a 0a01 	add.w	sl, sl, #1
 8006f90:	9304      	str	r3, [sp, #16]
 8006f92:	9307      	str	r3, [sp, #28]
 8006f94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f98:	931a      	str	r3, [sp, #104]	; 0x68
 8006f9a:	4654      	mov	r4, sl
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa2:	4858      	ldr	r0, [pc, #352]	; (8007104 <_vfiprintf_r+0x24c>)
 8006fa4:	f7f9 f91c 	bl	80001e0 <memchr>
 8006fa8:	9a04      	ldr	r2, [sp, #16]
 8006faa:	b9d8      	cbnz	r0, 8006fe4 <_vfiprintf_r+0x12c>
 8006fac:	06d1      	lsls	r1, r2, #27
 8006fae:	bf44      	itt	mi
 8006fb0:	2320      	movmi	r3, #32
 8006fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fb6:	0713      	lsls	r3, r2, #28
 8006fb8:	bf44      	itt	mi
 8006fba:	232b      	movmi	r3, #43	; 0x2b
 8006fbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8006fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8006fc6:	d015      	beq.n	8006ff4 <_vfiprintf_r+0x13c>
 8006fc8:	9a07      	ldr	r2, [sp, #28]
 8006fca:	4654      	mov	r4, sl
 8006fcc:	2000      	movs	r0, #0
 8006fce:	f04f 0c0a 	mov.w	ip, #10
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fd8:	3b30      	subs	r3, #48	; 0x30
 8006fda:	2b09      	cmp	r3, #9
 8006fdc:	d94e      	bls.n	800707c <_vfiprintf_r+0x1c4>
 8006fde:	b1b0      	cbz	r0, 800700e <_vfiprintf_r+0x156>
 8006fe0:	9207      	str	r2, [sp, #28]
 8006fe2:	e014      	b.n	800700e <_vfiprintf_r+0x156>
 8006fe4:	eba0 0308 	sub.w	r3, r0, r8
 8006fe8:	fa09 f303 	lsl.w	r3, r9, r3
 8006fec:	4313      	orrs	r3, r2
 8006fee:	9304      	str	r3, [sp, #16]
 8006ff0:	46a2      	mov	sl, r4
 8006ff2:	e7d2      	b.n	8006f9a <_vfiprintf_r+0xe2>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	1d19      	adds	r1, r3, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	9103      	str	r1, [sp, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfbb      	ittet	lt
 8007000:	425b      	neglt	r3, r3
 8007002:	f042 0202 	orrlt.w	r2, r2, #2
 8007006:	9307      	strge	r3, [sp, #28]
 8007008:	9307      	strlt	r3, [sp, #28]
 800700a:	bfb8      	it	lt
 800700c:	9204      	strlt	r2, [sp, #16]
 800700e:	7823      	ldrb	r3, [r4, #0]
 8007010:	2b2e      	cmp	r3, #46	; 0x2e
 8007012:	d10c      	bne.n	800702e <_vfiprintf_r+0x176>
 8007014:	7863      	ldrb	r3, [r4, #1]
 8007016:	2b2a      	cmp	r3, #42	; 0x2a
 8007018:	d135      	bne.n	8007086 <_vfiprintf_r+0x1ce>
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	1d1a      	adds	r2, r3, #4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	9203      	str	r2, [sp, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	bfb8      	it	lt
 8007026:	f04f 33ff 	movlt.w	r3, #4294967295
 800702a:	3402      	adds	r4, #2
 800702c:	9305      	str	r3, [sp, #20]
 800702e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007114 <_vfiprintf_r+0x25c>
 8007032:	7821      	ldrb	r1, [r4, #0]
 8007034:	2203      	movs	r2, #3
 8007036:	4650      	mov	r0, sl
 8007038:	f7f9 f8d2 	bl	80001e0 <memchr>
 800703c:	b140      	cbz	r0, 8007050 <_vfiprintf_r+0x198>
 800703e:	2340      	movs	r3, #64	; 0x40
 8007040:	eba0 000a 	sub.w	r0, r0, sl
 8007044:	fa03 f000 	lsl.w	r0, r3, r0
 8007048:	9b04      	ldr	r3, [sp, #16]
 800704a:	4303      	orrs	r3, r0
 800704c:	3401      	adds	r4, #1
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007054:	482c      	ldr	r0, [pc, #176]	; (8007108 <_vfiprintf_r+0x250>)
 8007056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800705a:	2206      	movs	r2, #6
 800705c:	f7f9 f8c0 	bl	80001e0 <memchr>
 8007060:	2800      	cmp	r0, #0
 8007062:	d03f      	beq.n	80070e4 <_vfiprintf_r+0x22c>
 8007064:	4b29      	ldr	r3, [pc, #164]	; (800710c <_vfiprintf_r+0x254>)
 8007066:	bb1b      	cbnz	r3, 80070b0 <_vfiprintf_r+0x1f8>
 8007068:	9b03      	ldr	r3, [sp, #12]
 800706a:	3307      	adds	r3, #7
 800706c:	f023 0307 	bic.w	r3, r3, #7
 8007070:	3308      	adds	r3, #8
 8007072:	9303      	str	r3, [sp, #12]
 8007074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007076:	443b      	add	r3, r7
 8007078:	9309      	str	r3, [sp, #36]	; 0x24
 800707a:	e767      	b.n	8006f4c <_vfiprintf_r+0x94>
 800707c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007080:	460c      	mov	r4, r1
 8007082:	2001      	movs	r0, #1
 8007084:	e7a5      	b.n	8006fd2 <_vfiprintf_r+0x11a>
 8007086:	2300      	movs	r3, #0
 8007088:	3401      	adds	r4, #1
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	4619      	mov	r1, r3
 800708e:	f04f 0c0a 	mov.w	ip, #10
 8007092:	4620      	mov	r0, r4
 8007094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007098:	3a30      	subs	r2, #48	; 0x30
 800709a:	2a09      	cmp	r2, #9
 800709c:	d903      	bls.n	80070a6 <_vfiprintf_r+0x1ee>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d0c5      	beq.n	800702e <_vfiprintf_r+0x176>
 80070a2:	9105      	str	r1, [sp, #20]
 80070a4:	e7c3      	b.n	800702e <_vfiprintf_r+0x176>
 80070a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070aa:	4604      	mov	r4, r0
 80070ac:	2301      	movs	r3, #1
 80070ae:	e7f0      	b.n	8007092 <_vfiprintf_r+0x1da>
 80070b0:	ab03      	add	r3, sp, #12
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	462a      	mov	r2, r5
 80070b6:	4b16      	ldr	r3, [pc, #88]	; (8007110 <_vfiprintf_r+0x258>)
 80070b8:	a904      	add	r1, sp, #16
 80070ba:	4630      	mov	r0, r6
 80070bc:	f3af 8000 	nop.w
 80070c0:	4607      	mov	r7, r0
 80070c2:	1c78      	adds	r0, r7, #1
 80070c4:	d1d6      	bne.n	8007074 <_vfiprintf_r+0x1bc>
 80070c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070c8:	07d9      	lsls	r1, r3, #31
 80070ca:	d405      	bmi.n	80070d8 <_vfiprintf_r+0x220>
 80070cc:	89ab      	ldrh	r3, [r5, #12]
 80070ce:	059a      	lsls	r2, r3, #22
 80070d0:	d402      	bmi.n	80070d8 <_vfiprintf_r+0x220>
 80070d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070d4:	f000 fc45 	bl	8007962 <__retarget_lock_release_recursive>
 80070d8:	89ab      	ldrh	r3, [r5, #12]
 80070da:	065b      	lsls	r3, r3, #25
 80070dc:	f53f af12 	bmi.w	8006f04 <_vfiprintf_r+0x4c>
 80070e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070e2:	e711      	b.n	8006f08 <_vfiprintf_r+0x50>
 80070e4:	ab03      	add	r3, sp, #12
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	462a      	mov	r2, r5
 80070ea:	4b09      	ldr	r3, [pc, #36]	; (8007110 <_vfiprintf_r+0x258>)
 80070ec:	a904      	add	r1, sp, #16
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 f880 	bl	80071f4 <_printf_i>
 80070f4:	e7e4      	b.n	80070c0 <_vfiprintf_r+0x208>
 80070f6:	bf00      	nop
 80070f8:	08008284 	.word	0x08008284
 80070fc:	080082a4 	.word	0x080082a4
 8007100:	08008264 	.word	0x08008264
 8007104:	0800822e 	.word	0x0800822e
 8007108:	08008238 	.word	0x08008238
 800710c:	00000000 	.word	0x00000000
 8007110:	08006e93 	.word	0x08006e93
 8007114:	08008234 	.word	0x08008234

08007118 <_printf_common>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	4616      	mov	r6, r2
 800711e:	4699      	mov	r9, r3
 8007120:	688a      	ldr	r2, [r1, #8]
 8007122:	690b      	ldr	r3, [r1, #16]
 8007124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007128:	4293      	cmp	r3, r2
 800712a:	bfb8      	it	lt
 800712c:	4613      	movlt	r3, r2
 800712e:	6033      	str	r3, [r6, #0]
 8007130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007134:	4607      	mov	r7, r0
 8007136:	460c      	mov	r4, r1
 8007138:	b10a      	cbz	r2, 800713e <_printf_common+0x26>
 800713a:	3301      	adds	r3, #1
 800713c:	6033      	str	r3, [r6, #0]
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	0699      	lsls	r1, r3, #26
 8007142:	bf42      	ittt	mi
 8007144:	6833      	ldrmi	r3, [r6, #0]
 8007146:	3302      	addmi	r3, #2
 8007148:	6033      	strmi	r3, [r6, #0]
 800714a:	6825      	ldr	r5, [r4, #0]
 800714c:	f015 0506 	ands.w	r5, r5, #6
 8007150:	d106      	bne.n	8007160 <_printf_common+0x48>
 8007152:	f104 0a19 	add.w	sl, r4, #25
 8007156:	68e3      	ldr	r3, [r4, #12]
 8007158:	6832      	ldr	r2, [r6, #0]
 800715a:	1a9b      	subs	r3, r3, r2
 800715c:	42ab      	cmp	r3, r5
 800715e:	dc26      	bgt.n	80071ae <_printf_common+0x96>
 8007160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007164:	1e13      	subs	r3, r2, #0
 8007166:	6822      	ldr	r2, [r4, #0]
 8007168:	bf18      	it	ne
 800716a:	2301      	movne	r3, #1
 800716c:	0692      	lsls	r2, r2, #26
 800716e:	d42b      	bmi.n	80071c8 <_printf_common+0xb0>
 8007170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007174:	4649      	mov	r1, r9
 8007176:	4638      	mov	r0, r7
 8007178:	47c0      	blx	r8
 800717a:	3001      	adds	r0, #1
 800717c:	d01e      	beq.n	80071bc <_printf_common+0xa4>
 800717e:	6823      	ldr	r3, [r4, #0]
 8007180:	68e5      	ldr	r5, [r4, #12]
 8007182:	6832      	ldr	r2, [r6, #0]
 8007184:	f003 0306 	and.w	r3, r3, #6
 8007188:	2b04      	cmp	r3, #4
 800718a:	bf08      	it	eq
 800718c:	1aad      	subeq	r5, r5, r2
 800718e:	68a3      	ldr	r3, [r4, #8]
 8007190:	6922      	ldr	r2, [r4, #16]
 8007192:	bf0c      	ite	eq
 8007194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007198:	2500      	movne	r5, #0
 800719a:	4293      	cmp	r3, r2
 800719c:	bfc4      	itt	gt
 800719e:	1a9b      	subgt	r3, r3, r2
 80071a0:	18ed      	addgt	r5, r5, r3
 80071a2:	2600      	movs	r6, #0
 80071a4:	341a      	adds	r4, #26
 80071a6:	42b5      	cmp	r5, r6
 80071a8:	d11a      	bne.n	80071e0 <_printf_common+0xc8>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e008      	b.n	80071c0 <_printf_common+0xa8>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4652      	mov	r2, sl
 80071b2:	4649      	mov	r1, r9
 80071b4:	4638      	mov	r0, r7
 80071b6:	47c0      	blx	r8
 80071b8:	3001      	adds	r0, #1
 80071ba:	d103      	bne.n	80071c4 <_printf_common+0xac>
 80071bc:	f04f 30ff 	mov.w	r0, #4294967295
 80071c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071c4:	3501      	adds	r5, #1
 80071c6:	e7c6      	b.n	8007156 <_printf_common+0x3e>
 80071c8:	18e1      	adds	r1, r4, r3
 80071ca:	1c5a      	adds	r2, r3, #1
 80071cc:	2030      	movs	r0, #48	; 0x30
 80071ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071d2:	4422      	add	r2, r4
 80071d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071dc:	3302      	adds	r3, #2
 80071de:	e7c7      	b.n	8007170 <_printf_common+0x58>
 80071e0:	2301      	movs	r3, #1
 80071e2:	4622      	mov	r2, r4
 80071e4:	4649      	mov	r1, r9
 80071e6:	4638      	mov	r0, r7
 80071e8:	47c0      	blx	r8
 80071ea:	3001      	adds	r0, #1
 80071ec:	d0e6      	beq.n	80071bc <_printf_common+0xa4>
 80071ee:	3601      	adds	r6, #1
 80071f0:	e7d9      	b.n	80071a6 <_printf_common+0x8e>
	...

080071f4 <_printf_i>:
 80071f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071f8:	7e0f      	ldrb	r7, [r1, #24]
 80071fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80071fc:	2f78      	cmp	r7, #120	; 0x78
 80071fe:	4691      	mov	r9, r2
 8007200:	4680      	mov	r8, r0
 8007202:	460c      	mov	r4, r1
 8007204:	469a      	mov	sl, r3
 8007206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800720a:	d807      	bhi.n	800721c <_printf_i+0x28>
 800720c:	2f62      	cmp	r7, #98	; 0x62
 800720e:	d80a      	bhi.n	8007226 <_printf_i+0x32>
 8007210:	2f00      	cmp	r7, #0
 8007212:	f000 80d8 	beq.w	80073c6 <_printf_i+0x1d2>
 8007216:	2f58      	cmp	r7, #88	; 0x58
 8007218:	f000 80a3 	beq.w	8007362 <_printf_i+0x16e>
 800721c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007224:	e03a      	b.n	800729c <_printf_i+0xa8>
 8007226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800722a:	2b15      	cmp	r3, #21
 800722c:	d8f6      	bhi.n	800721c <_printf_i+0x28>
 800722e:	a101      	add	r1, pc, #4	; (adr r1, 8007234 <_printf_i+0x40>)
 8007230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007234:	0800728d 	.word	0x0800728d
 8007238:	080072a1 	.word	0x080072a1
 800723c:	0800721d 	.word	0x0800721d
 8007240:	0800721d 	.word	0x0800721d
 8007244:	0800721d 	.word	0x0800721d
 8007248:	0800721d 	.word	0x0800721d
 800724c:	080072a1 	.word	0x080072a1
 8007250:	0800721d 	.word	0x0800721d
 8007254:	0800721d 	.word	0x0800721d
 8007258:	0800721d 	.word	0x0800721d
 800725c:	0800721d 	.word	0x0800721d
 8007260:	080073ad 	.word	0x080073ad
 8007264:	080072d1 	.word	0x080072d1
 8007268:	0800738f 	.word	0x0800738f
 800726c:	0800721d 	.word	0x0800721d
 8007270:	0800721d 	.word	0x0800721d
 8007274:	080073cf 	.word	0x080073cf
 8007278:	0800721d 	.word	0x0800721d
 800727c:	080072d1 	.word	0x080072d1
 8007280:	0800721d 	.word	0x0800721d
 8007284:	0800721d 	.word	0x0800721d
 8007288:	08007397 	.word	0x08007397
 800728c:	682b      	ldr	r3, [r5, #0]
 800728e:	1d1a      	adds	r2, r3, #4
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	602a      	str	r2, [r5, #0]
 8007294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800729c:	2301      	movs	r3, #1
 800729e:	e0a3      	b.n	80073e8 <_printf_i+0x1f4>
 80072a0:	6820      	ldr	r0, [r4, #0]
 80072a2:	6829      	ldr	r1, [r5, #0]
 80072a4:	0606      	lsls	r6, r0, #24
 80072a6:	f101 0304 	add.w	r3, r1, #4
 80072aa:	d50a      	bpl.n	80072c2 <_printf_i+0xce>
 80072ac:	680e      	ldr	r6, [r1, #0]
 80072ae:	602b      	str	r3, [r5, #0]
 80072b0:	2e00      	cmp	r6, #0
 80072b2:	da03      	bge.n	80072bc <_printf_i+0xc8>
 80072b4:	232d      	movs	r3, #45	; 0x2d
 80072b6:	4276      	negs	r6, r6
 80072b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072bc:	485e      	ldr	r0, [pc, #376]	; (8007438 <_printf_i+0x244>)
 80072be:	230a      	movs	r3, #10
 80072c0:	e019      	b.n	80072f6 <_printf_i+0x102>
 80072c2:	680e      	ldr	r6, [r1, #0]
 80072c4:	602b      	str	r3, [r5, #0]
 80072c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ca:	bf18      	it	ne
 80072cc:	b236      	sxthne	r6, r6
 80072ce:	e7ef      	b.n	80072b0 <_printf_i+0xbc>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	6820      	ldr	r0, [r4, #0]
 80072d4:	1d19      	adds	r1, r3, #4
 80072d6:	6029      	str	r1, [r5, #0]
 80072d8:	0601      	lsls	r1, r0, #24
 80072da:	d501      	bpl.n	80072e0 <_printf_i+0xec>
 80072dc:	681e      	ldr	r6, [r3, #0]
 80072de:	e002      	b.n	80072e6 <_printf_i+0xf2>
 80072e0:	0646      	lsls	r6, r0, #25
 80072e2:	d5fb      	bpl.n	80072dc <_printf_i+0xe8>
 80072e4:	881e      	ldrh	r6, [r3, #0]
 80072e6:	4854      	ldr	r0, [pc, #336]	; (8007438 <_printf_i+0x244>)
 80072e8:	2f6f      	cmp	r7, #111	; 0x6f
 80072ea:	bf0c      	ite	eq
 80072ec:	2308      	moveq	r3, #8
 80072ee:	230a      	movne	r3, #10
 80072f0:	2100      	movs	r1, #0
 80072f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072f6:	6865      	ldr	r5, [r4, #4]
 80072f8:	60a5      	str	r5, [r4, #8]
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	bfa2      	ittt	ge
 80072fe:	6821      	ldrge	r1, [r4, #0]
 8007300:	f021 0104 	bicge.w	r1, r1, #4
 8007304:	6021      	strge	r1, [r4, #0]
 8007306:	b90e      	cbnz	r6, 800730c <_printf_i+0x118>
 8007308:	2d00      	cmp	r5, #0
 800730a:	d04d      	beq.n	80073a8 <_printf_i+0x1b4>
 800730c:	4615      	mov	r5, r2
 800730e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007312:	fb03 6711 	mls	r7, r3, r1, r6
 8007316:	5dc7      	ldrb	r7, [r0, r7]
 8007318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800731c:	4637      	mov	r7, r6
 800731e:	42bb      	cmp	r3, r7
 8007320:	460e      	mov	r6, r1
 8007322:	d9f4      	bls.n	800730e <_printf_i+0x11a>
 8007324:	2b08      	cmp	r3, #8
 8007326:	d10b      	bne.n	8007340 <_printf_i+0x14c>
 8007328:	6823      	ldr	r3, [r4, #0]
 800732a:	07de      	lsls	r6, r3, #31
 800732c:	d508      	bpl.n	8007340 <_printf_i+0x14c>
 800732e:	6923      	ldr	r3, [r4, #16]
 8007330:	6861      	ldr	r1, [r4, #4]
 8007332:	4299      	cmp	r1, r3
 8007334:	bfde      	ittt	le
 8007336:	2330      	movle	r3, #48	; 0x30
 8007338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800733c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007340:	1b52      	subs	r2, r2, r5
 8007342:	6122      	str	r2, [r4, #16]
 8007344:	f8cd a000 	str.w	sl, [sp]
 8007348:	464b      	mov	r3, r9
 800734a:	aa03      	add	r2, sp, #12
 800734c:	4621      	mov	r1, r4
 800734e:	4640      	mov	r0, r8
 8007350:	f7ff fee2 	bl	8007118 <_printf_common>
 8007354:	3001      	adds	r0, #1
 8007356:	d14c      	bne.n	80073f2 <_printf_i+0x1fe>
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	b004      	add	sp, #16
 800735e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007362:	4835      	ldr	r0, [pc, #212]	; (8007438 <_printf_i+0x244>)
 8007364:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007368:	6829      	ldr	r1, [r5, #0]
 800736a:	6823      	ldr	r3, [r4, #0]
 800736c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007370:	6029      	str	r1, [r5, #0]
 8007372:	061d      	lsls	r5, r3, #24
 8007374:	d514      	bpl.n	80073a0 <_printf_i+0x1ac>
 8007376:	07df      	lsls	r7, r3, #31
 8007378:	bf44      	itt	mi
 800737a:	f043 0320 	orrmi.w	r3, r3, #32
 800737e:	6023      	strmi	r3, [r4, #0]
 8007380:	b91e      	cbnz	r6, 800738a <_printf_i+0x196>
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	f023 0320 	bic.w	r3, r3, #32
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	2310      	movs	r3, #16
 800738c:	e7b0      	b.n	80072f0 <_printf_i+0xfc>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f043 0320 	orr.w	r3, r3, #32
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	2378      	movs	r3, #120	; 0x78
 8007398:	4828      	ldr	r0, [pc, #160]	; (800743c <_printf_i+0x248>)
 800739a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800739e:	e7e3      	b.n	8007368 <_printf_i+0x174>
 80073a0:	0659      	lsls	r1, r3, #25
 80073a2:	bf48      	it	mi
 80073a4:	b2b6      	uxthmi	r6, r6
 80073a6:	e7e6      	b.n	8007376 <_printf_i+0x182>
 80073a8:	4615      	mov	r5, r2
 80073aa:	e7bb      	b.n	8007324 <_printf_i+0x130>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	6826      	ldr	r6, [r4, #0]
 80073b0:	6961      	ldr	r1, [r4, #20]
 80073b2:	1d18      	adds	r0, r3, #4
 80073b4:	6028      	str	r0, [r5, #0]
 80073b6:	0635      	lsls	r5, r6, #24
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	d501      	bpl.n	80073c0 <_printf_i+0x1cc>
 80073bc:	6019      	str	r1, [r3, #0]
 80073be:	e002      	b.n	80073c6 <_printf_i+0x1d2>
 80073c0:	0670      	lsls	r0, r6, #25
 80073c2:	d5fb      	bpl.n	80073bc <_printf_i+0x1c8>
 80073c4:	8019      	strh	r1, [r3, #0]
 80073c6:	2300      	movs	r3, #0
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	4615      	mov	r5, r2
 80073cc:	e7ba      	b.n	8007344 <_printf_i+0x150>
 80073ce:	682b      	ldr	r3, [r5, #0]
 80073d0:	1d1a      	adds	r2, r3, #4
 80073d2:	602a      	str	r2, [r5, #0]
 80073d4:	681d      	ldr	r5, [r3, #0]
 80073d6:	6862      	ldr	r2, [r4, #4]
 80073d8:	2100      	movs	r1, #0
 80073da:	4628      	mov	r0, r5
 80073dc:	f7f8 ff00 	bl	80001e0 <memchr>
 80073e0:	b108      	cbz	r0, 80073e6 <_printf_i+0x1f2>
 80073e2:	1b40      	subs	r0, r0, r5
 80073e4:	6060      	str	r0, [r4, #4]
 80073e6:	6863      	ldr	r3, [r4, #4]
 80073e8:	6123      	str	r3, [r4, #16]
 80073ea:	2300      	movs	r3, #0
 80073ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f0:	e7a8      	b.n	8007344 <_printf_i+0x150>
 80073f2:	6923      	ldr	r3, [r4, #16]
 80073f4:	462a      	mov	r2, r5
 80073f6:	4649      	mov	r1, r9
 80073f8:	4640      	mov	r0, r8
 80073fa:	47d0      	blx	sl
 80073fc:	3001      	adds	r0, #1
 80073fe:	d0ab      	beq.n	8007358 <_printf_i+0x164>
 8007400:	6823      	ldr	r3, [r4, #0]
 8007402:	079b      	lsls	r3, r3, #30
 8007404:	d413      	bmi.n	800742e <_printf_i+0x23a>
 8007406:	68e0      	ldr	r0, [r4, #12]
 8007408:	9b03      	ldr	r3, [sp, #12]
 800740a:	4298      	cmp	r0, r3
 800740c:	bfb8      	it	lt
 800740e:	4618      	movlt	r0, r3
 8007410:	e7a4      	b.n	800735c <_printf_i+0x168>
 8007412:	2301      	movs	r3, #1
 8007414:	4632      	mov	r2, r6
 8007416:	4649      	mov	r1, r9
 8007418:	4640      	mov	r0, r8
 800741a:	47d0      	blx	sl
 800741c:	3001      	adds	r0, #1
 800741e:	d09b      	beq.n	8007358 <_printf_i+0x164>
 8007420:	3501      	adds	r5, #1
 8007422:	68e3      	ldr	r3, [r4, #12]
 8007424:	9903      	ldr	r1, [sp, #12]
 8007426:	1a5b      	subs	r3, r3, r1
 8007428:	42ab      	cmp	r3, r5
 800742a:	dcf2      	bgt.n	8007412 <_printf_i+0x21e>
 800742c:	e7eb      	b.n	8007406 <_printf_i+0x212>
 800742e:	2500      	movs	r5, #0
 8007430:	f104 0619 	add.w	r6, r4, #25
 8007434:	e7f5      	b.n	8007422 <_printf_i+0x22e>
 8007436:	bf00      	nop
 8007438:	0800823f 	.word	0x0800823f
 800743c:	08008250 	.word	0x08008250

08007440 <_sbrk_r>:
 8007440:	b538      	push	{r3, r4, r5, lr}
 8007442:	4d06      	ldr	r5, [pc, #24]	; (800745c <_sbrk_r+0x1c>)
 8007444:	2300      	movs	r3, #0
 8007446:	4604      	mov	r4, r0
 8007448:	4608      	mov	r0, r1
 800744a:	602b      	str	r3, [r5, #0]
 800744c:	f7fd f81c 	bl	8004488 <_sbrk>
 8007450:	1c43      	adds	r3, r0, #1
 8007452:	d102      	bne.n	800745a <_sbrk_r+0x1a>
 8007454:	682b      	ldr	r3, [r5, #0]
 8007456:	b103      	cbz	r3, 800745a <_sbrk_r+0x1a>
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	2000c838 	.word	0x2000c838

08007460 <__swbuf_r>:
 8007460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007462:	460e      	mov	r6, r1
 8007464:	4614      	mov	r4, r2
 8007466:	4605      	mov	r5, r0
 8007468:	b118      	cbz	r0, 8007472 <__swbuf_r+0x12>
 800746a:	6983      	ldr	r3, [r0, #24]
 800746c:	b90b      	cbnz	r3, 8007472 <__swbuf_r+0x12>
 800746e:	f000 f9d9 	bl	8007824 <__sinit>
 8007472:	4b21      	ldr	r3, [pc, #132]	; (80074f8 <__swbuf_r+0x98>)
 8007474:	429c      	cmp	r4, r3
 8007476:	d12b      	bne.n	80074d0 <__swbuf_r+0x70>
 8007478:	686c      	ldr	r4, [r5, #4]
 800747a:	69a3      	ldr	r3, [r4, #24]
 800747c:	60a3      	str	r3, [r4, #8]
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	071a      	lsls	r2, r3, #28
 8007482:	d52f      	bpl.n	80074e4 <__swbuf_r+0x84>
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	b36b      	cbz	r3, 80074e4 <__swbuf_r+0x84>
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	6820      	ldr	r0, [r4, #0]
 800748c:	1ac0      	subs	r0, r0, r3
 800748e:	6963      	ldr	r3, [r4, #20]
 8007490:	b2f6      	uxtb	r6, r6
 8007492:	4283      	cmp	r3, r0
 8007494:	4637      	mov	r7, r6
 8007496:	dc04      	bgt.n	80074a2 <__swbuf_r+0x42>
 8007498:	4621      	mov	r1, r4
 800749a:	4628      	mov	r0, r5
 800749c:	f000 f92e 	bl	80076fc <_fflush_r>
 80074a0:	bb30      	cbnz	r0, 80074f0 <__swbuf_r+0x90>
 80074a2:	68a3      	ldr	r3, [r4, #8]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	60a3      	str	r3, [r4, #8]
 80074a8:	6823      	ldr	r3, [r4, #0]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	6022      	str	r2, [r4, #0]
 80074ae:	701e      	strb	r6, [r3, #0]
 80074b0:	6963      	ldr	r3, [r4, #20]
 80074b2:	3001      	adds	r0, #1
 80074b4:	4283      	cmp	r3, r0
 80074b6:	d004      	beq.n	80074c2 <__swbuf_r+0x62>
 80074b8:	89a3      	ldrh	r3, [r4, #12]
 80074ba:	07db      	lsls	r3, r3, #31
 80074bc:	d506      	bpl.n	80074cc <__swbuf_r+0x6c>
 80074be:	2e0a      	cmp	r6, #10
 80074c0:	d104      	bne.n	80074cc <__swbuf_r+0x6c>
 80074c2:	4621      	mov	r1, r4
 80074c4:	4628      	mov	r0, r5
 80074c6:	f000 f919 	bl	80076fc <_fflush_r>
 80074ca:	b988      	cbnz	r0, 80074f0 <__swbuf_r+0x90>
 80074cc:	4638      	mov	r0, r7
 80074ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d0:	4b0a      	ldr	r3, [pc, #40]	; (80074fc <__swbuf_r+0x9c>)
 80074d2:	429c      	cmp	r4, r3
 80074d4:	d101      	bne.n	80074da <__swbuf_r+0x7a>
 80074d6:	68ac      	ldr	r4, [r5, #8]
 80074d8:	e7cf      	b.n	800747a <__swbuf_r+0x1a>
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <__swbuf_r+0xa0>)
 80074dc:	429c      	cmp	r4, r3
 80074de:	bf08      	it	eq
 80074e0:	68ec      	ldreq	r4, [r5, #12]
 80074e2:	e7ca      	b.n	800747a <__swbuf_r+0x1a>
 80074e4:	4621      	mov	r1, r4
 80074e6:	4628      	mov	r0, r5
 80074e8:	f000 f80c 	bl	8007504 <__swsetup_r>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d0cb      	beq.n	8007488 <__swbuf_r+0x28>
 80074f0:	f04f 37ff 	mov.w	r7, #4294967295
 80074f4:	e7ea      	b.n	80074cc <__swbuf_r+0x6c>
 80074f6:	bf00      	nop
 80074f8:	08008284 	.word	0x08008284
 80074fc:	080082a4 	.word	0x080082a4
 8007500:	08008264 	.word	0x08008264

08007504 <__swsetup_r>:
 8007504:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <__swsetup_r+0xcc>)
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	b125      	cbz	r5, 800751a <__swsetup_r+0x16>
 8007510:	69ab      	ldr	r3, [r5, #24]
 8007512:	b913      	cbnz	r3, 800751a <__swsetup_r+0x16>
 8007514:	4628      	mov	r0, r5
 8007516:	f000 f985 	bl	8007824 <__sinit>
 800751a:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <__swsetup_r+0xd0>)
 800751c:	429c      	cmp	r4, r3
 800751e:	d10f      	bne.n	8007540 <__swsetup_r+0x3c>
 8007520:	686c      	ldr	r4, [r5, #4]
 8007522:	89a3      	ldrh	r3, [r4, #12]
 8007524:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007528:	0719      	lsls	r1, r3, #28
 800752a:	d42c      	bmi.n	8007586 <__swsetup_r+0x82>
 800752c:	06dd      	lsls	r5, r3, #27
 800752e:	d411      	bmi.n	8007554 <__swsetup_r+0x50>
 8007530:	2309      	movs	r3, #9
 8007532:	6033      	str	r3, [r6, #0]
 8007534:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	e03e      	b.n	80075be <__swsetup_r+0xba>
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <__swsetup_r+0xd4>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <__swsetup_r+0x46>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7eb      	b.n	8007522 <__swsetup_r+0x1e>
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <__swsetup_r+0xd8>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7e6      	b.n	8007522 <__swsetup_r+0x1e>
 8007554:	0758      	lsls	r0, r3, #29
 8007556:	d512      	bpl.n	800757e <__swsetup_r+0x7a>
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	b141      	cbz	r1, 800756e <__swsetup_r+0x6a>
 800755c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <__swsetup_r+0x66>
 8007564:	4630      	mov	r0, r6
 8007566:	f7ff fa41 	bl	80069ec <_free_r>
 800756a:	2300      	movs	r3, #0
 800756c:	6363      	str	r3, [r4, #52]	; 0x34
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	2300      	movs	r3, #0
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f043 0308 	orr.w	r3, r3, #8
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	b94b      	cbnz	r3, 800759e <__swsetup_r+0x9a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007594:	d003      	beq.n	800759e <__swsetup_r+0x9a>
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f000 fa09 	bl	80079b0 <__smakebuf_r>
 800759e:	89a0      	ldrh	r0, [r4, #12]
 80075a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a4:	f010 0301 	ands.w	r3, r0, #1
 80075a8:	d00a      	beq.n	80075c0 <__swsetup_r+0xbc>
 80075aa:	2300      	movs	r3, #0
 80075ac:	60a3      	str	r3, [r4, #8]
 80075ae:	6963      	ldr	r3, [r4, #20]
 80075b0:	425b      	negs	r3, r3
 80075b2:	61a3      	str	r3, [r4, #24]
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	b943      	cbnz	r3, 80075ca <__swsetup_r+0xc6>
 80075b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075bc:	d1ba      	bne.n	8007534 <__swsetup_r+0x30>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	0781      	lsls	r1, r0, #30
 80075c2:	bf58      	it	pl
 80075c4:	6963      	ldrpl	r3, [r4, #20]
 80075c6:	60a3      	str	r3, [r4, #8]
 80075c8:	e7f4      	b.n	80075b4 <__swsetup_r+0xb0>
 80075ca:	2000      	movs	r0, #0
 80075cc:	e7f7      	b.n	80075be <__swsetup_r+0xba>
 80075ce:	bf00      	nop
 80075d0:	2000000c 	.word	0x2000000c
 80075d4:	08008284 	.word	0x08008284
 80075d8:	080082a4 	.word	0x080082a4
 80075dc:	08008264 	.word	0x08008264

080075e0 <abort>:
 80075e0:	b508      	push	{r3, lr}
 80075e2:	2006      	movs	r0, #6
 80075e4:	f000 faa2 	bl	8007b2c <raise>
 80075e8:	2001      	movs	r0, #1
 80075ea:	f7fc fed6 	bl	800439a <_exit>
	...

080075f0 <__sflush_r>:
 80075f0:	898a      	ldrh	r2, [r1, #12]
 80075f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f6:	4605      	mov	r5, r0
 80075f8:	0710      	lsls	r0, r2, #28
 80075fa:	460c      	mov	r4, r1
 80075fc:	d458      	bmi.n	80076b0 <__sflush_r+0xc0>
 80075fe:	684b      	ldr	r3, [r1, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	dc05      	bgt.n	8007610 <__sflush_r+0x20>
 8007604:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	dc02      	bgt.n	8007610 <__sflush_r+0x20>
 800760a:	2000      	movs	r0, #0
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007612:	2e00      	cmp	r6, #0
 8007614:	d0f9      	beq.n	800760a <__sflush_r+0x1a>
 8007616:	2300      	movs	r3, #0
 8007618:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800761c:	682f      	ldr	r7, [r5, #0]
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	d032      	beq.n	8007688 <__sflush_r+0x98>
 8007622:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	075a      	lsls	r2, r3, #29
 8007628:	d505      	bpl.n	8007636 <__sflush_r+0x46>
 800762a:	6863      	ldr	r3, [r4, #4]
 800762c:	1ac0      	subs	r0, r0, r3
 800762e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007630:	b10b      	cbz	r3, 8007636 <__sflush_r+0x46>
 8007632:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007634:	1ac0      	subs	r0, r0, r3
 8007636:	2300      	movs	r3, #0
 8007638:	4602      	mov	r2, r0
 800763a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800763c:	6a21      	ldr	r1, [r4, #32]
 800763e:	4628      	mov	r0, r5
 8007640:	47b0      	blx	r6
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	89a3      	ldrh	r3, [r4, #12]
 8007646:	d106      	bne.n	8007656 <__sflush_r+0x66>
 8007648:	6829      	ldr	r1, [r5, #0]
 800764a:	291d      	cmp	r1, #29
 800764c:	d82c      	bhi.n	80076a8 <__sflush_r+0xb8>
 800764e:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <__sflush_r+0x108>)
 8007650:	40ca      	lsrs	r2, r1
 8007652:	07d6      	lsls	r6, r2, #31
 8007654:	d528      	bpl.n	80076a8 <__sflush_r+0xb8>
 8007656:	2200      	movs	r2, #0
 8007658:	6062      	str	r2, [r4, #4]
 800765a:	04d9      	lsls	r1, r3, #19
 800765c:	6922      	ldr	r2, [r4, #16]
 800765e:	6022      	str	r2, [r4, #0]
 8007660:	d504      	bpl.n	800766c <__sflush_r+0x7c>
 8007662:	1c42      	adds	r2, r0, #1
 8007664:	d101      	bne.n	800766a <__sflush_r+0x7a>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	b903      	cbnz	r3, 800766c <__sflush_r+0x7c>
 800766a:	6560      	str	r0, [r4, #84]	; 0x54
 800766c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800766e:	602f      	str	r7, [r5, #0]
 8007670:	2900      	cmp	r1, #0
 8007672:	d0ca      	beq.n	800760a <__sflush_r+0x1a>
 8007674:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007678:	4299      	cmp	r1, r3
 800767a:	d002      	beq.n	8007682 <__sflush_r+0x92>
 800767c:	4628      	mov	r0, r5
 800767e:	f7ff f9b5 	bl	80069ec <_free_r>
 8007682:	2000      	movs	r0, #0
 8007684:	6360      	str	r0, [r4, #52]	; 0x34
 8007686:	e7c1      	b.n	800760c <__sflush_r+0x1c>
 8007688:	6a21      	ldr	r1, [r4, #32]
 800768a:	2301      	movs	r3, #1
 800768c:	4628      	mov	r0, r5
 800768e:	47b0      	blx	r6
 8007690:	1c41      	adds	r1, r0, #1
 8007692:	d1c7      	bne.n	8007624 <__sflush_r+0x34>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d0c4      	beq.n	8007624 <__sflush_r+0x34>
 800769a:	2b1d      	cmp	r3, #29
 800769c:	d001      	beq.n	80076a2 <__sflush_r+0xb2>
 800769e:	2b16      	cmp	r3, #22
 80076a0:	d101      	bne.n	80076a6 <__sflush_r+0xb6>
 80076a2:	602f      	str	r7, [r5, #0]
 80076a4:	e7b1      	b.n	800760a <__sflush_r+0x1a>
 80076a6:	89a3      	ldrh	r3, [r4, #12]
 80076a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	e7ad      	b.n	800760c <__sflush_r+0x1c>
 80076b0:	690f      	ldr	r7, [r1, #16]
 80076b2:	2f00      	cmp	r7, #0
 80076b4:	d0a9      	beq.n	800760a <__sflush_r+0x1a>
 80076b6:	0793      	lsls	r3, r2, #30
 80076b8:	680e      	ldr	r6, [r1, #0]
 80076ba:	bf08      	it	eq
 80076bc:	694b      	ldreq	r3, [r1, #20]
 80076be:	600f      	str	r7, [r1, #0]
 80076c0:	bf18      	it	ne
 80076c2:	2300      	movne	r3, #0
 80076c4:	eba6 0807 	sub.w	r8, r6, r7
 80076c8:	608b      	str	r3, [r1, #8]
 80076ca:	f1b8 0f00 	cmp.w	r8, #0
 80076ce:	dd9c      	ble.n	800760a <__sflush_r+0x1a>
 80076d0:	6a21      	ldr	r1, [r4, #32]
 80076d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d4:	4643      	mov	r3, r8
 80076d6:	463a      	mov	r2, r7
 80076d8:	4628      	mov	r0, r5
 80076da:	47b0      	blx	r6
 80076dc:	2800      	cmp	r0, #0
 80076de:	dc06      	bgt.n	80076ee <__sflush_r+0xfe>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	f04f 30ff 	mov.w	r0, #4294967295
 80076ec:	e78e      	b.n	800760c <__sflush_r+0x1c>
 80076ee:	4407      	add	r7, r0
 80076f0:	eba8 0800 	sub.w	r8, r8, r0
 80076f4:	e7e9      	b.n	80076ca <__sflush_r+0xda>
 80076f6:	bf00      	nop
 80076f8:	20400001 	.word	0x20400001

080076fc <_fflush_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	690b      	ldr	r3, [r1, #16]
 8007700:	4605      	mov	r5, r0
 8007702:	460c      	mov	r4, r1
 8007704:	b913      	cbnz	r3, 800770c <_fflush_r+0x10>
 8007706:	2500      	movs	r5, #0
 8007708:	4628      	mov	r0, r5
 800770a:	bd38      	pop	{r3, r4, r5, pc}
 800770c:	b118      	cbz	r0, 8007716 <_fflush_r+0x1a>
 800770e:	6983      	ldr	r3, [r0, #24]
 8007710:	b90b      	cbnz	r3, 8007716 <_fflush_r+0x1a>
 8007712:	f000 f887 	bl	8007824 <__sinit>
 8007716:	4b14      	ldr	r3, [pc, #80]	; (8007768 <_fflush_r+0x6c>)
 8007718:	429c      	cmp	r4, r3
 800771a:	d11b      	bne.n	8007754 <_fflush_r+0x58>
 800771c:	686c      	ldr	r4, [r5, #4]
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0ef      	beq.n	8007706 <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x3a>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x3a>
 8007730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007732:	f000 f915 	bl	8007960 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff59 	bl	80075f0 <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e0      	bmi.n	8007708 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4dd      	bmi.n	8007708 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800774e:	f000 f908 	bl	8007962 <__retarget_lock_release_recursive>
 8007752:	e7d9      	b.n	8007708 <_fflush_r+0xc>
 8007754:	4b05      	ldr	r3, [pc, #20]	; (800776c <_fflush_r+0x70>)
 8007756:	429c      	cmp	r4, r3
 8007758:	d101      	bne.n	800775e <_fflush_r+0x62>
 800775a:	68ac      	ldr	r4, [r5, #8]
 800775c:	e7df      	b.n	800771e <_fflush_r+0x22>
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <_fflush_r+0x74>)
 8007760:	429c      	cmp	r4, r3
 8007762:	bf08      	it	eq
 8007764:	68ec      	ldreq	r4, [r5, #12]
 8007766:	e7da      	b.n	800771e <_fflush_r+0x22>
 8007768:	08008284 	.word	0x08008284
 800776c:	080082a4 	.word	0x080082a4
 8007770:	08008264 	.word	0x08008264

08007774 <std>:
 8007774:	2300      	movs	r3, #0
 8007776:	b510      	push	{r4, lr}
 8007778:	4604      	mov	r4, r0
 800777a:	e9c0 3300 	strd	r3, r3, [r0]
 800777e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007782:	6083      	str	r3, [r0, #8]
 8007784:	8181      	strh	r1, [r0, #12]
 8007786:	6643      	str	r3, [r0, #100]	; 0x64
 8007788:	81c2      	strh	r2, [r0, #14]
 800778a:	6183      	str	r3, [r0, #24]
 800778c:	4619      	mov	r1, r3
 800778e:	2208      	movs	r2, #8
 8007790:	305c      	adds	r0, #92	; 0x5c
 8007792:	f7ff f88d 	bl	80068b0 <memset>
 8007796:	4b05      	ldr	r3, [pc, #20]	; (80077ac <std+0x38>)
 8007798:	6263      	str	r3, [r4, #36]	; 0x24
 800779a:	4b05      	ldr	r3, [pc, #20]	; (80077b0 <std+0x3c>)
 800779c:	62a3      	str	r3, [r4, #40]	; 0x28
 800779e:	4b05      	ldr	r3, [pc, #20]	; (80077b4 <std+0x40>)
 80077a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077a2:	4b05      	ldr	r3, [pc, #20]	; (80077b8 <std+0x44>)
 80077a4:	6224      	str	r4, [r4, #32]
 80077a6:	6323      	str	r3, [r4, #48]	; 0x30
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	08007b65 	.word	0x08007b65
 80077b0:	08007b87 	.word	0x08007b87
 80077b4:	08007bbf 	.word	0x08007bbf
 80077b8:	08007be3 	.word	0x08007be3

080077bc <_cleanup_r>:
 80077bc:	4901      	ldr	r1, [pc, #4]	; (80077c4 <_cleanup_r+0x8>)
 80077be:	f000 b8af 	b.w	8007920 <_fwalk_reent>
 80077c2:	bf00      	nop
 80077c4:	080076fd 	.word	0x080076fd

080077c8 <__sfmoreglue>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	2268      	movs	r2, #104	; 0x68
 80077cc:	1e4d      	subs	r5, r1, #1
 80077ce:	4355      	muls	r5, r2
 80077d0:	460e      	mov	r6, r1
 80077d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077d6:	f7ff f975 	bl	8006ac4 <_malloc_r>
 80077da:	4604      	mov	r4, r0
 80077dc:	b140      	cbz	r0, 80077f0 <__sfmoreglue+0x28>
 80077de:	2100      	movs	r1, #0
 80077e0:	e9c0 1600 	strd	r1, r6, [r0]
 80077e4:	300c      	adds	r0, #12
 80077e6:	60a0      	str	r0, [r4, #8]
 80077e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077ec:	f7ff f860 	bl	80068b0 <memset>
 80077f0:	4620      	mov	r0, r4
 80077f2:	bd70      	pop	{r4, r5, r6, pc}

080077f4 <__sfp_lock_acquire>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__sfp_lock_acquire+0x8>)
 80077f6:	f000 b8b3 	b.w	8007960 <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	2000c835 	.word	0x2000c835

08007800 <__sfp_lock_release>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__sfp_lock_release+0x8>)
 8007802:	f000 b8ae 	b.w	8007962 <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	2000c835 	.word	0x2000c835

0800780c <__sinit_lock_acquire>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__sinit_lock_acquire+0x8>)
 800780e:	f000 b8a7 	b.w	8007960 <__retarget_lock_acquire_recursive>
 8007812:	bf00      	nop
 8007814:	2000c836 	.word	0x2000c836

08007818 <__sinit_lock_release>:
 8007818:	4801      	ldr	r0, [pc, #4]	; (8007820 <__sinit_lock_release+0x8>)
 800781a:	f000 b8a2 	b.w	8007962 <__retarget_lock_release_recursive>
 800781e:	bf00      	nop
 8007820:	2000c836 	.word	0x2000c836

08007824 <__sinit>:
 8007824:	b510      	push	{r4, lr}
 8007826:	4604      	mov	r4, r0
 8007828:	f7ff fff0 	bl	800780c <__sinit_lock_acquire>
 800782c:	69a3      	ldr	r3, [r4, #24]
 800782e:	b11b      	cbz	r3, 8007838 <__sinit+0x14>
 8007830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007834:	f7ff bff0 	b.w	8007818 <__sinit_lock_release>
 8007838:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800783c:	6523      	str	r3, [r4, #80]	; 0x50
 800783e:	4b13      	ldr	r3, [pc, #76]	; (800788c <__sinit+0x68>)
 8007840:	4a13      	ldr	r2, [pc, #76]	; (8007890 <__sinit+0x6c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	62a2      	str	r2, [r4, #40]	; 0x28
 8007846:	42a3      	cmp	r3, r4
 8007848:	bf04      	itt	eq
 800784a:	2301      	moveq	r3, #1
 800784c:	61a3      	streq	r3, [r4, #24]
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f820 	bl	8007894 <__sfp>
 8007854:	6060      	str	r0, [r4, #4]
 8007856:	4620      	mov	r0, r4
 8007858:	f000 f81c 	bl	8007894 <__sfp>
 800785c:	60a0      	str	r0, [r4, #8]
 800785e:	4620      	mov	r0, r4
 8007860:	f000 f818 	bl	8007894 <__sfp>
 8007864:	2200      	movs	r2, #0
 8007866:	60e0      	str	r0, [r4, #12]
 8007868:	2104      	movs	r1, #4
 800786a:	6860      	ldr	r0, [r4, #4]
 800786c:	f7ff ff82 	bl	8007774 <std>
 8007870:	68a0      	ldr	r0, [r4, #8]
 8007872:	2201      	movs	r2, #1
 8007874:	2109      	movs	r1, #9
 8007876:	f7ff ff7d 	bl	8007774 <std>
 800787a:	68e0      	ldr	r0, [r4, #12]
 800787c:	2202      	movs	r2, #2
 800787e:	2112      	movs	r1, #18
 8007880:	f7ff ff78 	bl	8007774 <std>
 8007884:	2301      	movs	r3, #1
 8007886:	61a3      	str	r3, [r4, #24]
 8007888:	e7d2      	b.n	8007830 <__sinit+0xc>
 800788a:	bf00      	nop
 800788c:	0800817c 	.word	0x0800817c
 8007890:	080077bd 	.word	0x080077bd

08007894 <__sfp>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	4607      	mov	r7, r0
 8007898:	f7ff ffac 	bl	80077f4 <__sfp_lock_acquire>
 800789c:	4b1e      	ldr	r3, [pc, #120]	; (8007918 <__sfp+0x84>)
 800789e:	681e      	ldr	r6, [r3, #0]
 80078a0:	69b3      	ldr	r3, [r6, #24]
 80078a2:	b913      	cbnz	r3, 80078aa <__sfp+0x16>
 80078a4:	4630      	mov	r0, r6
 80078a6:	f7ff ffbd 	bl	8007824 <__sinit>
 80078aa:	3648      	adds	r6, #72	; 0x48
 80078ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	d503      	bpl.n	80078bc <__sfp+0x28>
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	b30b      	cbz	r3, 80078fc <__sfp+0x68>
 80078b8:	6836      	ldr	r6, [r6, #0]
 80078ba:	e7f7      	b.n	80078ac <__sfp+0x18>
 80078bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80078c0:	b9d5      	cbnz	r5, 80078f8 <__sfp+0x64>
 80078c2:	4b16      	ldr	r3, [pc, #88]	; (800791c <__sfp+0x88>)
 80078c4:	60e3      	str	r3, [r4, #12]
 80078c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80078ca:	6665      	str	r5, [r4, #100]	; 0x64
 80078cc:	f000 f847 	bl	800795e <__retarget_lock_init_recursive>
 80078d0:	f7ff ff96 	bl	8007800 <__sfp_lock_release>
 80078d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078dc:	6025      	str	r5, [r4, #0]
 80078de:	61a5      	str	r5, [r4, #24]
 80078e0:	2208      	movs	r2, #8
 80078e2:	4629      	mov	r1, r5
 80078e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078e8:	f7fe ffe2 	bl	80068b0 <memset>
 80078ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078f4:	4620      	mov	r0, r4
 80078f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f8:	3468      	adds	r4, #104	; 0x68
 80078fa:	e7d9      	b.n	80078b0 <__sfp+0x1c>
 80078fc:	2104      	movs	r1, #4
 80078fe:	4638      	mov	r0, r7
 8007900:	f7ff ff62 	bl	80077c8 <__sfmoreglue>
 8007904:	4604      	mov	r4, r0
 8007906:	6030      	str	r0, [r6, #0]
 8007908:	2800      	cmp	r0, #0
 800790a:	d1d5      	bne.n	80078b8 <__sfp+0x24>
 800790c:	f7ff ff78 	bl	8007800 <__sfp_lock_release>
 8007910:	230c      	movs	r3, #12
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	e7ee      	b.n	80078f4 <__sfp+0x60>
 8007916:	bf00      	nop
 8007918:	0800817c 	.word	0x0800817c
 800791c:	ffff0001 	.word	0xffff0001

08007920 <_fwalk_reent>:
 8007920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007924:	4606      	mov	r6, r0
 8007926:	4688      	mov	r8, r1
 8007928:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800792c:	2700      	movs	r7, #0
 800792e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007932:	f1b9 0901 	subs.w	r9, r9, #1
 8007936:	d505      	bpl.n	8007944 <_fwalk_reent+0x24>
 8007938:	6824      	ldr	r4, [r4, #0]
 800793a:	2c00      	cmp	r4, #0
 800793c:	d1f7      	bne.n	800792e <_fwalk_reent+0xe>
 800793e:	4638      	mov	r0, r7
 8007940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007944:	89ab      	ldrh	r3, [r5, #12]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d907      	bls.n	800795a <_fwalk_reent+0x3a>
 800794a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800794e:	3301      	adds	r3, #1
 8007950:	d003      	beq.n	800795a <_fwalk_reent+0x3a>
 8007952:	4629      	mov	r1, r5
 8007954:	4630      	mov	r0, r6
 8007956:	47c0      	blx	r8
 8007958:	4307      	orrs	r7, r0
 800795a:	3568      	adds	r5, #104	; 0x68
 800795c:	e7e9      	b.n	8007932 <_fwalk_reent+0x12>

0800795e <__retarget_lock_init_recursive>:
 800795e:	4770      	bx	lr

08007960 <__retarget_lock_acquire_recursive>:
 8007960:	4770      	bx	lr

08007962 <__retarget_lock_release_recursive>:
 8007962:	4770      	bx	lr

08007964 <__swhatbuf_r>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	460e      	mov	r6, r1
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	2900      	cmp	r1, #0
 800796e:	b096      	sub	sp, #88	; 0x58
 8007970:	4614      	mov	r4, r2
 8007972:	461d      	mov	r5, r3
 8007974:	da08      	bge.n	8007988 <__swhatbuf_r+0x24>
 8007976:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	602a      	str	r2, [r5, #0]
 800797e:	061a      	lsls	r2, r3, #24
 8007980:	d410      	bmi.n	80079a4 <__swhatbuf_r+0x40>
 8007982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007986:	e00e      	b.n	80079a6 <__swhatbuf_r+0x42>
 8007988:	466a      	mov	r2, sp
 800798a:	f000 f951 	bl	8007c30 <_fstat_r>
 800798e:	2800      	cmp	r0, #0
 8007990:	dbf1      	blt.n	8007976 <__swhatbuf_r+0x12>
 8007992:	9a01      	ldr	r2, [sp, #4]
 8007994:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007998:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800799c:	425a      	negs	r2, r3
 800799e:	415a      	adcs	r2, r3
 80079a0:	602a      	str	r2, [r5, #0]
 80079a2:	e7ee      	b.n	8007982 <__swhatbuf_r+0x1e>
 80079a4:	2340      	movs	r3, #64	; 0x40
 80079a6:	2000      	movs	r0, #0
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	b016      	add	sp, #88	; 0x58
 80079ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080079b0 <__smakebuf_r>:
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079b4:	079d      	lsls	r5, r3, #30
 80079b6:	4606      	mov	r6, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	d507      	bpl.n	80079cc <__smakebuf_r+0x1c>
 80079bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	2301      	movs	r3, #1
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	b002      	add	sp, #8
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	ab01      	add	r3, sp, #4
 80079ce:	466a      	mov	r2, sp
 80079d0:	f7ff ffc8 	bl	8007964 <__swhatbuf_r>
 80079d4:	9900      	ldr	r1, [sp, #0]
 80079d6:	4605      	mov	r5, r0
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff f873 	bl	8006ac4 <_malloc_r>
 80079de:	b948      	cbnz	r0, 80079f4 <__smakebuf_r+0x44>
 80079e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d4ef      	bmi.n	80079c8 <__smakebuf_r+0x18>
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	e7e3      	b.n	80079bc <__smakebuf_r+0xc>
 80079f4:	4b0d      	ldr	r3, [pc, #52]	; (8007a2c <__smakebuf_r+0x7c>)
 80079f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	6020      	str	r0, [r4, #0]
 80079fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	9b00      	ldr	r3, [sp, #0]
 8007a04:	6163      	str	r3, [r4, #20]
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	6120      	str	r0, [r4, #16]
 8007a0a:	b15b      	cbz	r3, 8007a24 <__smakebuf_r+0x74>
 8007a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a10:	4630      	mov	r0, r6
 8007a12:	f000 f91f 	bl	8007c54 <_isatty_r>
 8007a16:	b128      	cbz	r0, 8007a24 <__smakebuf_r+0x74>
 8007a18:	89a3      	ldrh	r3, [r4, #12]
 8007a1a:	f023 0303 	bic.w	r3, r3, #3
 8007a1e:	f043 0301 	orr.w	r3, r3, #1
 8007a22:	81a3      	strh	r3, [r4, #12]
 8007a24:	89a0      	ldrh	r0, [r4, #12]
 8007a26:	4305      	orrs	r5, r0
 8007a28:	81a5      	strh	r5, [r4, #12]
 8007a2a:	e7cd      	b.n	80079c8 <__smakebuf_r+0x18>
 8007a2c:	080077bd 	.word	0x080077bd

08007a30 <memmove>:
 8007a30:	4288      	cmp	r0, r1
 8007a32:	b510      	push	{r4, lr}
 8007a34:	eb01 0402 	add.w	r4, r1, r2
 8007a38:	d902      	bls.n	8007a40 <memmove+0x10>
 8007a3a:	4284      	cmp	r4, r0
 8007a3c:	4623      	mov	r3, r4
 8007a3e:	d807      	bhi.n	8007a50 <memmove+0x20>
 8007a40:	1e43      	subs	r3, r0, #1
 8007a42:	42a1      	cmp	r1, r4
 8007a44:	d008      	beq.n	8007a58 <memmove+0x28>
 8007a46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007a4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007a4e:	e7f8      	b.n	8007a42 <memmove+0x12>
 8007a50:	4402      	add	r2, r0
 8007a52:	4601      	mov	r1, r0
 8007a54:	428a      	cmp	r2, r1
 8007a56:	d100      	bne.n	8007a5a <memmove+0x2a>
 8007a58:	bd10      	pop	{r4, pc}
 8007a5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a62:	e7f7      	b.n	8007a54 <memmove+0x24>

08007a64 <__malloc_lock>:
 8007a64:	4801      	ldr	r0, [pc, #4]	; (8007a6c <__malloc_lock+0x8>)
 8007a66:	f7ff bf7b 	b.w	8007960 <__retarget_lock_acquire_recursive>
 8007a6a:	bf00      	nop
 8007a6c:	2000c834 	.word	0x2000c834

08007a70 <__malloc_unlock>:
 8007a70:	4801      	ldr	r0, [pc, #4]	; (8007a78 <__malloc_unlock+0x8>)
 8007a72:	f7ff bf76 	b.w	8007962 <__retarget_lock_release_recursive>
 8007a76:	bf00      	nop
 8007a78:	2000c834 	.word	0x2000c834

08007a7c <_realloc_r>:
 8007a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a80:	4680      	mov	r8, r0
 8007a82:	4614      	mov	r4, r2
 8007a84:	460e      	mov	r6, r1
 8007a86:	b921      	cbnz	r1, 8007a92 <_realloc_r+0x16>
 8007a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	f7ff b819 	b.w	8006ac4 <_malloc_r>
 8007a92:	b92a      	cbnz	r2, 8007aa0 <_realloc_r+0x24>
 8007a94:	f7fe ffaa 	bl	80069ec <_free_r>
 8007a98:	4625      	mov	r5, r4
 8007a9a:	4628      	mov	r0, r5
 8007a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa0:	f000 f8fa 	bl	8007c98 <_malloc_usable_size_r>
 8007aa4:	4284      	cmp	r4, r0
 8007aa6:	4607      	mov	r7, r0
 8007aa8:	d802      	bhi.n	8007ab0 <_realloc_r+0x34>
 8007aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007aae:	d812      	bhi.n	8007ad6 <_realloc_r+0x5a>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	f7ff f806 	bl	8006ac4 <_malloc_r>
 8007ab8:	4605      	mov	r5, r0
 8007aba:	2800      	cmp	r0, #0
 8007abc:	d0ed      	beq.n	8007a9a <_realloc_r+0x1e>
 8007abe:	42bc      	cmp	r4, r7
 8007ac0:	4622      	mov	r2, r4
 8007ac2:	4631      	mov	r1, r6
 8007ac4:	bf28      	it	cs
 8007ac6:	463a      	movcs	r2, r7
 8007ac8:	f7fe fee4 	bl	8006894 <memcpy>
 8007acc:	4631      	mov	r1, r6
 8007ace:	4640      	mov	r0, r8
 8007ad0:	f7fe ff8c 	bl	80069ec <_free_r>
 8007ad4:	e7e1      	b.n	8007a9a <_realloc_r+0x1e>
 8007ad6:	4635      	mov	r5, r6
 8007ad8:	e7df      	b.n	8007a9a <_realloc_r+0x1e>

08007ada <_raise_r>:
 8007ada:	291f      	cmp	r1, #31
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4604      	mov	r4, r0
 8007ae0:	460d      	mov	r5, r1
 8007ae2:	d904      	bls.n	8007aee <_raise_r+0x14>
 8007ae4:	2316      	movs	r3, #22
 8007ae6:	6003      	str	r3, [r0, #0]
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	bd38      	pop	{r3, r4, r5, pc}
 8007aee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007af0:	b112      	cbz	r2, 8007af8 <_raise_r+0x1e>
 8007af2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007af6:	b94b      	cbnz	r3, 8007b0c <_raise_r+0x32>
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 f831 	bl	8007b60 <_getpid_r>
 8007afe:	462a      	mov	r2, r5
 8007b00:	4601      	mov	r1, r0
 8007b02:	4620      	mov	r0, r4
 8007b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b08:	f000 b818 	b.w	8007b3c <_kill_r>
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d00a      	beq.n	8007b26 <_raise_r+0x4c>
 8007b10:	1c59      	adds	r1, r3, #1
 8007b12:	d103      	bne.n	8007b1c <_raise_r+0x42>
 8007b14:	2316      	movs	r3, #22
 8007b16:	6003      	str	r3, [r0, #0]
 8007b18:	2001      	movs	r0, #1
 8007b1a:	e7e7      	b.n	8007aec <_raise_r+0x12>
 8007b1c:	2400      	movs	r4, #0
 8007b1e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b22:	4628      	mov	r0, r5
 8007b24:	4798      	blx	r3
 8007b26:	2000      	movs	r0, #0
 8007b28:	e7e0      	b.n	8007aec <_raise_r+0x12>
	...

08007b2c <raise>:
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <raise+0xc>)
 8007b2e:	4601      	mov	r1, r0
 8007b30:	6818      	ldr	r0, [r3, #0]
 8007b32:	f7ff bfd2 	b.w	8007ada <_raise_r>
 8007b36:	bf00      	nop
 8007b38:	2000000c 	.word	0x2000000c

08007b3c <_kill_r>:
 8007b3c:	b538      	push	{r3, r4, r5, lr}
 8007b3e:	4d07      	ldr	r5, [pc, #28]	; (8007b5c <_kill_r+0x20>)
 8007b40:	2300      	movs	r3, #0
 8007b42:	4604      	mov	r4, r0
 8007b44:	4608      	mov	r0, r1
 8007b46:	4611      	mov	r1, r2
 8007b48:	602b      	str	r3, [r5, #0]
 8007b4a:	f7fc fc16 	bl	800437a <_kill>
 8007b4e:	1c43      	adds	r3, r0, #1
 8007b50:	d102      	bne.n	8007b58 <_kill_r+0x1c>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	b103      	cbz	r3, 8007b58 <_kill_r+0x1c>
 8007b56:	6023      	str	r3, [r4, #0]
 8007b58:	bd38      	pop	{r3, r4, r5, pc}
 8007b5a:	bf00      	nop
 8007b5c:	2000c838 	.word	0x2000c838

08007b60 <_getpid_r>:
 8007b60:	f7fc bc03 	b.w	800436a <_getpid>

08007b64 <__sread>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	460c      	mov	r4, r1
 8007b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6c:	f000 f89c 	bl	8007ca8 <_read_r>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	bfab      	itete	ge
 8007b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b76:	89a3      	ldrhlt	r3, [r4, #12]
 8007b78:	181b      	addge	r3, r3, r0
 8007b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b7e:	bfac      	ite	ge
 8007b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b82:	81a3      	strhlt	r3, [r4, #12]
 8007b84:	bd10      	pop	{r4, pc}

08007b86 <__swrite>:
 8007b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	898b      	ldrh	r3, [r1, #12]
 8007b8e:	05db      	lsls	r3, r3, #23
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4616      	mov	r6, r2
 8007b96:	d505      	bpl.n	8007ba4 <__swrite+0x1e>
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f000 f868 	bl	8007c74 <_lseek_r>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	f000 b817 	b.w	8007bec <_write_r>

08007bbe <__sseek>:
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc6:	f000 f855 	bl	8007c74 <_lseek_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	bf15      	itete	ne
 8007bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bda:	81a3      	strheq	r3, [r4, #12]
 8007bdc:	bf18      	it	ne
 8007bde:	81a3      	strhne	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__sclose>:
 8007be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be6:	f000 b813 	b.w	8007c10 <_close_r>
	...

08007bec <_write_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	; (8007c0c <_write_r+0x20>)
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	602a      	str	r2, [r5, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f7fc fbf4 	bl	80043e8 <_write>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_write_r+0x1e>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_write_r+0x1e>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	2000c838 	.word	0x2000c838

08007c10 <_close_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4d06      	ldr	r5, [pc, #24]	; (8007c2c <_close_r+0x1c>)
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	4608      	mov	r0, r1
 8007c1a:	602b      	str	r3, [r5, #0]
 8007c1c:	f7fc fc00 	bl	8004420 <_close>
 8007c20:	1c43      	adds	r3, r0, #1
 8007c22:	d102      	bne.n	8007c2a <_close_r+0x1a>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	b103      	cbz	r3, 8007c2a <_close_r+0x1a>
 8007c28:	6023      	str	r3, [r4, #0]
 8007c2a:	bd38      	pop	{r3, r4, r5, pc}
 8007c2c:	2000c838 	.word	0x2000c838

08007c30 <_fstat_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d07      	ldr	r5, [pc, #28]	; (8007c50 <_fstat_r+0x20>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	4611      	mov	r1, r2
 8007c3c:	602b      	str	r3, [r5, #0]
 8007c3e:	f7fc fbfb 	bl	8004438 <_fstat>
 8007c42:	1c43      	adds	r3, r0, #1
 8007c44:	d102      	bne.n	8007c4c <_fstat_r+0x1c>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	b103      	cbz	r3, 8007c4c <_fstat_r+0x1c>
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	bd38      	pop	{r3, r4, r5, pc}
 8007c4e:	bf00      	nop
 8007c50:	2000c838 	.word	0x2000c838

08007c54 <_isatty_r>:
 8007c54:	b538      	push	{r3, r4, r5, lr}
 8007c56:	4d06      	ldr	r5, [pc, #24]	; (8007c70 <_isatty_r+0x1c>)
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	602b      	str	r3, [r5, #0]
 8007c60:	f7fc fbfa 	bl	8004458 <_isatty>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_isatty_r+0x1a>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_isatty_r+0x1a>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	2000c838 	.word	0x2000c838

08007c74 <_lseek_r>:
 8007c74:	b538      	push	{r3, r4, r5, lr}
 8007c76:	4d07      	ldr	r5, [pc, #28]	; (8007c94 <_lseek_r+0x20>)
 8007c78:	4604      	mov	r4, r0
 8007c7a:	4608      	mov	r0, r1
 8007c7c:	4611      	mov	r1, r2
 8007c7e:	2200      	movs	r2, #0
 8007c80:	602a      	str	r2, [r5, #0]
 8007c82:	461a      	mov	r2, r3
 8007c84:	f7fc fbf3 	bl	800446e <_lseek>
 8007c88:	1c43      	adds	r3, r0, #1
 8007c8a:	d102      	bne.n	8007c92 <_lseek_r+0x1e>
 8007c8c:	682b      	ldr	r3, [r5, #0]
 8007c8e:	b103      	cbz	r3, 8007c92 <_lseek_r+0x1e>
 8007c90:	6023      	str	r3, [r4, #0]
 8007c92:	bd38      	pop	{r3, r4, r5, pc}
 8007c94:	2000c838 	.word	0x2000c838

08007c98 <_malloc_usable_size_r>:
 8007c98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c9c:	1f18      	subs	r0, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bfbc      	itt	lt
 8007ca2:	580b      	ldrlt	r3, [r1, r0]
 8007ca4:	18c0      	addlt	r0, r0, r3
 8007ca6:	4770      	bx	lr

08007ca8 <_read_r>:
 8007ca8:	b538      	push	{r3, r4, r5, lr}
 8007caa:	4d07      	ldr	r5, [pc, #28]	; (8007cc8 <_read_r+0x20>)
 8007cac:	4604      	mov	r4, r0
 8007cae:	4608      	mov	r0, r1
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	602a      	str	r2, [r5, #0]
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	f7fc fb79 	bl	80043ae <_read>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d102      	bne.n	8007cc6 <_read_r+0x1e>
 8007cc0:	682b      	ldr	r3, [r5, #0]
 8007cc2:	b103      	cbz	r3, 8007cc6 <_read_r+0x1e>
 8007cc4:	6023      	str	r3, [r4, #0]
 8007cc6:	bd38      	pop	{r3, r4, r5, pc}
 8007cc8:	2000c838 	.word	0x2000c838

08007ccc <_init>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr

08007cd8 <_fini>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr
